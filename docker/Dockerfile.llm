# TODO: we could use 'uv' to replace the poetry + python image (Also use the slime image)
# Stage 1: Build stage (Isolating the build env)
FROM python:3.10.16-bookworm AS builder

WORKDIR /build/

# 1.1 Install poetry
RUN pip install --no-cache-dir poetry

# 1.2 Copy source code
COPY hugegraph-python-client/ ./hugegraph-python-client/
COPY hugegraph-llm/ ./hugegraph-llm/

# 1.3 Install dependencies
RUN cd /build/hugegraph-llm && \
    poetry config virtualenvs.in-project true && \
    poetry lock && \
    poetry install --no-interaction --no-ansi --verbose && \
    .venv/bin/pip install ../hugegraph-python-client && \
    poetry build

# Stage 2: Runtime stage
FROM python:3.10.16-slim-bookworm
LABEL maintainer="HugeGraph Docker Maintainers <dev@hugegraph.apache.org>"

# Create non-root user & install 'curl' for healthcheck
RUN useradd -m -s /bin/bash work && \
    apt-get update && \
    apt-get install -y --no-install-recommends curl && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /home/work/

# Copy only the built packages and virtual environment from the builder stage
COPY --from=builder --chown=work:work /build/hugegraph-llm/.venv /home/work/hugegraph-llm/.venv
COPY --from=builder --chown=work:work /build/hugegraph-llm/src /home/work/hugegraph-llm/src

USER work
ENV PATH="/home/work/hugegraph-llm/.venv/bin:$PATH"

WORKDIR /home/work/hugegraph-llm/src
VOLUME ["/home/work/hugegraph-llm/src/hugegraph_llm/resources"]
EXPOSE 8001

HEALTHCHECK --interval=60s --timeout=10s --start-period=5s --retries=3 CMD curl -f http://localhost:8001/ || exit 1

CMD ["python", "-m", "hugegraph_llm.demo.rag_demo.app", "--host", "0.0.0.0", "--port", "8001"]
