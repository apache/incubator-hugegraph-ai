{
  "metadata": {
    "total_templates": 198,
    "successful_templates": 198,
    "failed_templates": 0,
    "total_unique_queries": 1493,
    "generation_timestamp": "2025-10-29 19:07:33"
  },
  "corpus": [
    {
      "query": "g.V()",
      "description": "从图中开始查找所有顶点"
    },
    {
      "query": "g.E()",
      "description": "从图中开始查找所有边"
    },
    {
      "query": "g.V().hasLabel('movie')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('keyword')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('user')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('keyword').range(0, 10)",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，取范围内的结果"
    },
    {
      "query": "g.V().hasLabel('keyword').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('genre').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('genre').range(1, 34)",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，取范围内的结果"
    },
    {
      "query": "g.V().has('name', 'Documentary').order()",
      "description": "从图中开始查找所有顶点，其'名'为'Documentary'，然后对结果进行排序"
    },
    {
      "query": "g.V().has('name', 'Kevin Hageman')",
      "description": "从图中开始查找所有顶点，其'名'为'Kevin Hageman'"
    },
    {
      "query": "g.V().has('name', 'irrigation').sample(2)",
      "description": "从图中开始查找所有顶点，其'名字'为'irrigation'，随机采样 2 个结果"
    },
    {
      "query": "g.V().has('name', 'irrigation')",
      "description": "从图中开始查找所有顶点，其'名字'为'irrigation'"
    },
    {
      "query": "g.V().has('name', 'Documentary')",
      "description": "从图中开始查找所有顶点，其'名'为'Documentary'"
    },
    {
      "query": "g.V().has('title', 'The Shawshank Redemption')",
      "description": "从图中开始查找所有顶点，其'标题'为'The Shawshank Redemption'"
    },
    {
      "query": "g.V().has('title', 'The Shawshank Redemption').order()",
      "description": "从图中开始查找所有顶点，其'标题'为'The Shawshank Redemption'，然后对结果进行排序"
    },
    {
      "query": "g.V().has('title', 'The Dark Knight')",
      "description": "从图中开始查找所有顶点，其'标题'为'The Dark Knight'"
    },
    {
      "query": "g.V().has('born', 1917)",
      "description": "从图中开始查找所有顶点，其'出生年份'为'1917'"
    },
    {
      "query": "g.V().has('duration', 102)",
      "description": "从图中开始查找所有顶点，其'持续时间'为'102'"
    },
    {
      "query": "g.V().has('duration', 102).range(0, 10)",
      "description": "从图中开始查找所有顶点，其'持续时间'为'102'，取范围内的结果"
    },
    {
      "query": "g.V().has('duration', 142)",
      "description": "从图中开始查找所有顶点，其'持续时间'为'142'"
    },
    {
      "query": "g.V().has('name', 'Chloë Grace Moretz')",
      "description": "从图中开始查找所有顶点，其'名'为'Chloë Grace Moretz'"
    },
    {
      "query": "g.V().has('name', 'world weariness')",
      "description": "从图中开始查找所有顶点，其'名'为'world weariness'"
    },
    {
      "query": "g.V().has('name', 'Horror')",
      "description": "从图中开始查找所有顶点，其'姓名'为'Horror'"
    },
    {
      "query": "g.V().has('name', 'Suspense')",
      "description": "从图中开始查找所有顶点，其'姓名'为'Suspense'"
    },
    {
      "query": "g.V().has('born', 1963)",
      "description": "从图中开始查找所有顶点，其'出生年份'为'1963'"
    },
    {
      "query": "g.V().has('born', 1967)",
      "description": "从图中开始查找所有顶点，其'出生年份'为'1967'"
    },
    {
      "query": "g.V().has('born', 1943)",
      "description": "从图中开始查找所有顶点，其'出生年份'为'1943'"
    },
    {
      "query": "g.V().has('born', 1961)",
      "description": "从图中开始查找所有顶点，其'出生年份'为'1961'"
    },
    {
      "query": "g.V().has('born', 1945)",
      "description": "从图中开始查找所有顶点，其'出生年份'为'1945'"
    },
    {
      "query": "g.V().has('born', 1974)",
      "description": "从图中开始查找所有顶点，其'出生年份'为'1974'"
    },
    {
      "query": "g.V().has('born', 1933)",
      "description": "从图中开始查找所有顶点，其'出生年份'为'1933'"
    },
    {
      "query": "g.V().has('born', 1955)",
      "description": "从图中开始查找所有顶点，其'出生年份'为'1955'"
    },
    {
      "query": "g.V().has('born', 1960).limit(50)",
      "description": "从图中开始查找所有顶点，其'出生年份'为'1960'，取前 50 条数据"
    },
    {
      "query": "g.V().has('born', 1960)",
      "description": "从图中开始查找所有顶点，其'出生年份'为'1960'"
    },
    {
      "query": "g.V().has('name', 'Luciano Vincenzoni')",
      "description": "从图中开始查找所有顶点，其'名字'为'Luciano Vincenzoni'"
    },
    {
      "query": "g.V().has('name', 'Family')",
      "description": "从图中开始查找所有顶点，其'名称'为'Family'"
    },
    {
      "query": "g.V().has('name', 'thunder')",
      "description": "从图中开始查找所有顶点，其'名'为'thunder'"
    },
    {
      "query": "g.V().has('name', 'giant')",
      "description": "从图中开始查找所有顶点，其'名'为'giant'"
    },
    {
      "query": "g.V().has('name', 'Alice Krige')",
      "description": "从图中开始查找所有顶点，其'名'为'Alice Krige'"
    },
    {
      "query": "g.V().has('name', 'Aimee Garcia')",
      "description": "从图中开始查找所有顶点，其'名'为'Aimee Garcia'"
    },
    {
      "query": "g.V().has('name', 'briefcase full of money')",
      "description": "从图中开始查找所有顶点，其'名字'为'briefcase full of money'"
    },
    {
      "query": "g.V().has('name', 'Pitbull')",
      "description": "从图中开始查找所有顶点，其'名'为'Pitbull'"
    },
    {
      "query": "g.V().has('name', 'Thriller')",
      "description": "从图中开始查找所有顶点，其'姓名'为'Thriller'"
    },
    {
      "query": "g.V().has('name', 'character says i love you')",
      "description": "从图中开始查找所有顶点，其'名'为'character says i love you'"
    },
    {
      "query": "g.V().has('name', 'War')",
      "description": "从图中开始查找所有顶点，其'姓名'为'War'"
    },
    {
      "query": "g.V().has('name', \"car won't start\")",
      "description": "从图中开始查找所有顶点，其'名'为'car won't start'"
    },
    {
      "query": "g.V().has('name', 'Robert Downey Jr.')",
      "description": "从图中开始查找所有顶点，其'姓名'为'Robert Downey Jr.'"
    },
    {
      "query": "g.V().has('name', 'demitasse')",
      "description": "从图中开始查找所有顶点，其'姓名'为'demitasse'"
    },
    {
      "query": "g.V().has('name', 'Romance')",
      "description": "从图中开始查找所有顶点，其'名称'为'Romance'"
    },
    {
      "query": "g.V().has('name', 'Daniel von Bargen')",
      "description": "从图中开始查找所有顶点，其'姓名'为'Daniel von Bargen'"
    },
    {
      "query": "g.V().has('name', 'Western')",
      "description": "从图中开始查找所有顶点，其'名称'为'Western'"
    },
    {
      "query": "g.V().limit(1).has('name', 'cerebral palsy')",
      "description": "从图中开始查找所有顶点，并限制最多返回 1 个结果，其'名字'为'cerebral palsy'"
    },
    {
      "query": "g.V().limit(1).has('name', 'Michael Imperioli')",
      "description": "从图中开始查找所有顶点，并限制最多返回 1 个结果，其'名'为'Michael Imperioli'"
    },
    {
      "query": "g.V().limit(1).has('name', 'Karl Urban')",
      "description": "从图中开始查找所有顶点，并限制最多返回 1 个结果，其'名'为'Karl Urban'"
    },
    {
      "query": "g.V().has('name', 'police officer')",
      "description": "从图中开始查找所有顶点，其'姓名'为'police officer'"
    },
    {
      "query": "g.V().has('name', 'police officer').range(13, 103)",
      "description": "从图中开始查找所有顶点，其'姓名'为'police officer'，取范围内的结果"
    },
    {
      "query": "g.V().limit(1).has('name', 'Thriller')",
      "description": "从图中开始查找所有顶点，并限制最多返回 1 个结果，其'名字'为'Thriller'"
    },
    {
      "query": "g.V().limit(1).has('name', 'balcony')",
      "description": "从图中开始查找所有顶点，并限制最多返回 1 个结果，其'名字'为'balcony'"
    },
    {
      "query": "g.V().limit(1).has('name', 'Karl Urban').order()",
      "description": "从图中开始查找所有顶点，并限制最多返回 1 个结果，其'名'为'Karl Urban'，然后对结果进行排序"
    },
    {
      "query": "g.V().has('name', 'Joel Coen')",
      "description": "从图中开始查找所有顶点，其'名称'为'Joel Coen'"
    },
    {
      "query": "g.V().has('title', 'Fargo')",
      "description": "从图中开始查找所有顶点，其'标题'为'Fargo'"
    },
    {
      "query": "g.V().hasLabel('movie').has('poster_image', 'http://image.tmdb.org/t/p/w185/fdXA81BOdZ3pEyBlY8UUvuJj136.jpg')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，其'海报图片'为'http://image.tmdb.org/t/p/w185/fdXA81BOdZ3pEyBlY8UUvuJj136.jpg'"
    },
    {
      "query": "g.V().hasLabel('user').has('login', 'Dempsey')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，其'登录用户名'为'Dempsey'"
    },
    {
      "query": "g.V().hasLabel('movie').has('duration', 100)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，其'持续时间'为'100'"
    },
    {
      "query": "g.V().hasLabel('person').has('poster_image', 'https://assets.tmdb.org/assets/7f29bd8b3370c71dd379b0e8b570887c/images/no-poster-w185-v2.png')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，其'海报图片'为'https://assets.tmdb.org/assets/7f29bd8b3370c71dd379b0e8b570887c/images/no-poster-w185-v2.png'"
    },
    {
      "query": "g.V().hasLabel('person').has('id', 1120).range(0, 5)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，其'id'为'1120'，取范围内的结果"
    },
    {
      "query": "g.V().hasLabel('user').has('id', 230)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，其'id'为'230'"
    },
    {
      "query": "g.V().hasLabel('person').has('born', 1957)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，其'出生年份'为'1957'"
    },
    {
      "query": "g.V().hasLabel('person').has('name', 'Danny DeVito')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，其'名'为'Danny DeVito'"
    },
    {
      "query": "g.V().hasLabel('keyword').has('name', 'director')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，其'名'为'director'"
    },
    {
      "query": "g.V().hasLabel('genre').has('name', 'Horror')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，其'名称'为'Horror'"
    },
    {
      "query": "g.V().hasLabel('keyword').has('id', 2907)",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，其'id'为'2907'"
    },
    {
      "query": "g.V().hasLabel('person').has('id', 3756)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，其'id'为'3756'"
    },
    {
      "query": "g.V().hasLabel('user').has('id', 183)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，其'id'为'183'"
    },
    {
      "query": "g.V().hasLabel('genre').has('id', 1258)",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，其'id'为'1258'"
    },
    {
      "query": "g.V().hasLabel('movie').has('duration', 98)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，其'持续时间'为'98'"
    },
    {
      "query": "g.V().hasLabel('person').has('id', 1120)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，其'id'为'1120'"
    },
    {
      "query": "g.V().hasLabel('movie').has('poster_image', 'http://image.tmdb.org/t/p/w185/fdXA81BOdZ3pEyBlY8UUvuJj136.jpg').order()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，其'海报图片'为'http://image.tmdb.org/t/p/w185/fdXA81BOdZ3pEyBlY8UUvuJj136.jpg'，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('movie').has('id', 2008).range(44, 86)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，其'id'为'2008'，取范围内的结果"
    },
    {
      "query": "g.V().hasLabel('genre').has('id', 3270)",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，其'id'为'3270'"
    },
    {
      "query": "g.V().hasLabel('movie').has('poster_image', 'http://image.tmdb.org/t/p/w185/kb3X943WMIJYVg4SOAyK0pmWL5D.jpg')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，其'海报图片'为'http://image.tmdb.org/t/p/w185/kb3X943WMIJYVg4SOAyK0pmWL5D.jpg'"
    },
    {
      "query": "g.V().hasLabel('movie').has('title', 'The Usual Suspects')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，其'标题'为'The Usual Suspects'"
    },
    {
      "query": "g.V().hasLabel('person').has('name', 'Eddie Byrne')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，其'名称'为'Eddie Byrne'"
    },
    {
      "query": "g.V().hasLabel('movie').has('duration', 102)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，其'持续时间'为'102'"
    },
    {
      "query": "g.V().hasLabel('person').has('name', 'Edie McClurg')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，其'名称'为'Edie McClurg'"
    },
    {
      "query": "g.V().hasLabel('person').has('id', 3265)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，其'id'为'3265'"
    },
    {
      "query": "g.V().hasLabel('movie').has('id', 3624)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，其'id'为'3624'"
    },
    {
      "query": "g.V().hasLabel('movie').has('id', 2008)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，其'id'为'2008'"
    },
    {
      "query": "g.V().hasLabel('keyword').has('id', 2850)",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，其'id'为'2850'"
    },
    {
      "query": "g.V().hasLabel('person').has('born', 1907)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，其'出生年份'为'1907'"
    },
    {
      "query": "g.V().hasLabel('genre').has('name', 'Western')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，其'名称'为'Western'"
    },
    {
      "query": "g.V().hasLabel('keyword').has('name', 'marooned')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，其'姓名'为'marooned'"
    },
    {
      "query": "g.V().hasLabel('movie').has('title', 'The Lord of the Rings: The Fellowship of the Ring')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，其'标题'为'The Lord of the Rings: The Fellowship of the Ring'"
    },
    {
      "query": "g.V().hasLabel('user').has('id', 787)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，其'id'为'787'"
    },
    {
      "query": "g.V().hasLabel('movie').has('tagline', 'Everything that has a beginning has an end.')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，其'标签'为'Everything that has a beginning has an end.'"
    },
    {
      "query": "g.V().hasLabel('user').has('login', 'Rudolph')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，其'登录用户名'为'Rudolph'"
    },
    {
      "query": "g.V().hasLabel('movie').has('duration', 138)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，其'持续时间'为'138'"
    },
    {
      "query": "g.V().hasLabel('person').has('name', 'Krzysztof Luft')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，其'姓名'为'Krzysztof Luft'"
    },
    {
      "query": "g.V().hasLabel('person').has('id', 492)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，其'id'为'492'"
    },
    {
      "query": "g.V().hasLabel('person').has('id', 2233)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，其'id'为'2233'"
    },
    {
      "query": "g.V().hasLabel('keyword').has('id', 1668)",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，其'id'为'1668'"
    },
    {
      "query": "g.V().hasLabel('genre').has('name', 'Romance').range(0, 71)",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，其'姓名'为'Romance'，取范围内的结果"
    },
    {
      "query": "g.V().hasLabel('user').has('login', 'Harrison')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，其'登录用户名'为'Harrison'"
    },
    {
      "query": "g.V().hasLabel('user').has('id', 933)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，其'id'为'933'"
    },
    {
      "query": "g.V().hasLabel('movie').has('poster_image', 'http://image.tmdb.org/t/p/w185/dEYnvnUfXrqvqeRSqvIEtmzhoA8.jpg')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，其'海报图片'为'http://image.tmdb.org/t/p/w185/dEYnvnUfXrqvqeRSqvIEtmzhoA8.jpg'"
    },
    {
      "query": "g.V().hasLabel('genre').has('name', 'Romance')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，其'姓名'为'Romance'"
    },
    {
      "query": "g.V().hasLabel('genre').has('name', 'Animation')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，其'姓名'为'Animation'"
    },
    {
      "query": "g.V().hasLabel('movie').has('poster_image', 'http://image.tmdb.org/t/p/w185/9HG6pINW1KoFTAKY3LdybkoOKAm.jpg')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，其'海报图片'为'http://image.tmdb.org/t/p/w185/9HG6pINW1KoFTAKY3LdybkoOKAm.jpg'"
    },
    {
      "query": "g.V().hasLabel('person').has('born', 1944)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，其'出生年份'为'1944'"
    },
    {
      "query": "g.V().hasLabel('keyword').has('name', 'whispering')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，其'名'为'whispering'"
    },
    {
      "query": "g.V().hasLabel('movie').has('rated', 'R')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，其'打分'为'R'"
    },
    {
      "query": "g.V().hasLabel('keyword').has('id', 2990)",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，其'id'为'2990'"
    },
    {
      "query": "g.V().hasLabel('user').has('login', 'Wiley')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，其'登录用户名'为'Wiley'"
    },
    {
      "query": "g.V().hasLabel('user').has('id', 25)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，其'id'为'25'"
    },
    {
      "query": "g.V().hasLabel('movie').has('tagline', 'Your mind is the scene of the crime.')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，其'标签'为'Your mind is the scene of the crime.'"
    },
    {
      "query": "g.V().hasLabel('movie').has('poster_image', 'http://image.tmdb.org/t/p/w185/dEYnvnUfXrqvqeRSqvIEtmzhoA8.jpg').range(29, 77)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，其'海报图片'为'http://image.tmdb.org/t/p/w185/dEYnvnUfXrqvqeRSqvIEtmzhoA8.jpg'，取范围内的结果"
    },
    {
      "query": "g.V().hasLabel('genre').has('id', 146)",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，其'id'为'146'"
    },
    {
      "query": "g.V().hasId(13)",
      "description": "从图中开始查找所有顶点，筛选ID为13的元素"
    },
    {
      "query": "g.V().hasId(18)",
      "description": "从图中开始查找所有顶点，筛选ID为18的元素"
    },
    {
      "query": "g.V().hasId(41)",
      "description": "从图中开始查找所有顶点，筛选ID为41的元素"
    },
    {
      "query": "g.V().hasId(26)",
      "description": "从图中开始查找所有顶点，筛选ID为26的元素"
    },
    {
      "query": "g.V().hasId(1)",
      "description": "从图中开始查找所有顶点，筛选ID为1的元素"
    },
    {
      "query": "g.V().hasKey('summary')",
      "description": "从图中开始查找所有顶点，筛选包含键'总结'的属性"
    },
    {
      "query": "g.V().hasKey('id')",
      "description": "从图中开始查找所有顶点，筛选包含键'id'的属性"
    },
    {
      "query": "g.V().hasKey('login').dedup()",
      "description": "从图中开始查找所有顶点，筛选包含键'登录用户名'的属性，并对结果进行去重"
    },
    {
      "query": "g.V().hasKey('login')",
      "description": "从图中开始查找所有顶点，筛选包含键'登录用户名'的属性"
    },
    {
      "query": "g.V().hasKey('name')",
      "description": "从图中开始查找所有顶点，筛选包含键'名字'的属性"
    },
    {
      "query": "g.V().hasKey('duration')",
      "description": "从图中开始查找所有顶点，筛选包含键'持续时间'的属性"
    },
    {
      "query": "g.V().hasValue('Tom Hanks').limit(10)",
      "description": "从图中开始查找所有顶点，筛选包含值'Tom Hanks'的属性，并限制最多返回 10 个结果"
    },
    {
      "query": "g.V().hasValue('Tom Hanks')",
      "description": "从图中开始查找所有顶点，筛选包含值'Tom Hanks'的属性"
    },
    {
      "query": "g.V().out()",
      "description": "从图中开始查找所有顶点，沿out方向遍历"
    },
    {
      "query": "g.V().in()",
      "description": "从图中开始查找所有顶点，沿in方向遍历"
    },
    {
      "query": "g.V().both().dedup()",
      "description": "从图中开始查找所有顶点，沿both方向遍历，并对结果进行去重"
    },
    {
      "query": "g.V().both()",
      "description": "从图中开始查找所有顶点，沿both方向遍历"
    },
    {
      "query": "g.V().outE()",
      "description": "从图中开始查找所有顶点，沿outE方向遍历"
    },
    {
      "query": "g.V().inE()",
      "description": "从图中开始查找所有顶点，沿inE方向遍历"
    },
    {
      "query": "g.V().bothE()",
      "description": "从图中开始查找所有顶点，沿bothE方向遍历"
    },
    {
      "query": "g.V().outE().inV()",
      "description": "从图中开始查找所有顶点，沿outE方向遍历，沿inV方向遍历"
    },
    {
      "query": "g.V().inE().outV()",
      "description": "从图中开始查找所有顶点，沿inE方向遍历，沿outV方向遍历"
    },
    {
      "query": "g.V().outE().otherV()",
      "description": "从图中开始查找所有顶点，沿outE方向遍历，沿otherV方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').out('rate')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('genre').out()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，沿out方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').order()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('write')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('directed')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('keyword').out().sample(38)",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿out方向遍历，随机采样 38 个结果"
    },
    {
      "query": "g.V().hasLabel('keyword').out()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿out方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('produce')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('keyword').in('has_keyword').limit(50)",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿'has_keyword'边in方向遍历，取前 50 条数据"
    },
    {
      "query": "g.V().hasLabel('movie').in('write')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'写'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').in('rate')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'打分'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('genre').in('has_genre').range(20, 43)",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历，取范围内的结果"
    },
    {
      "query": "g.V().hasLabel('keyword').in('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿'has_keyword'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').in('acted_in').sample(10)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'参演'边in方向遍历，随机采样 10 个结果"
    },
    {
      "query": "g.V().hasLabel('person').in()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿in方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').in('acted_in')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'参演'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').in('directed')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'导演'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').in('rate').limit(5)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'打分'边in方向遍历，并限制最多返回 5 个结果"
    },
    {
      "query": "g.V().hasLabel('genre').in('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').in('produce')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'生产'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').in('is_friend')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').has('id', 19).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，其'id'为'19'，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').has('poster_image', 'http://image.tmdb.org/t/p/w185/mhB7C62lSMpGO2HYNaW6d7W3TVH.jpg')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，其'海报图片'为'http://image.tmdb.org/t/p/w185/mhB7C62lSMpGO2HYNaW6d7W3TVH.jpg'"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').has('rated', 'R')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，其'打分'为'R'"
    },
    {
      "query": "g.V().hasLabel('person').out('write').has('tagline', 'The Adventure Continues...')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，其'标签'为'The Adventure Continues...'"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').has('duration', 126).sample(2)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，其'持续时间'为'126'，随机采样 2 个结果"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').has('rated', 'G')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，其'打分'为'G'"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').has('duration', 126)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，其'持续时间'为'126'"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').has('summary', 'placeholder text')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，其'总结'为'placeholder text'"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').has('summary', \"Aragorn is revealed as the heir to the ancient kings as he Gandalf and the other members of the broken fellowship struggle to save Gondor from Sauron's forces. Meanwhile Frodo and Sam bring the ring closer to the heart of Mordor the dark lord's realm.\")",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，其'总结'为'Aragorn is revealed as the heir to the ancient kings as he Gandalf and the other members of the broken fellowship struggle to save Gondor from Sauron's forces. Meanwhile Frodo and Sam bring the ring closer to the heart of Mordor the dark lord's realm.'"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').has('id', 19)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，其'id'为'19'"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').has('title', 'Star Wars: Episode V - The Empire Strikes Back')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，其'标题'为'Star Wars: Episode V - The Empire Strikes Back'"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').has('name', 'Musical')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，其'名字'为'Musical'"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').range(0, 10).has('duration', 158).order()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，取范围内的结果，其'持续时间'为'158'，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').has('title', '300: Rise of an Empire')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，其'标题'为'300: Rise of an Empire'"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').range(0, 10).has('summary', 'placeholder text').sample(3)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，取范围内的结果，其'总结'为'placeholder text'，随机采样 3 个结果"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').has('title', 'The Lord of the Rings: The Fellowship of the Ring')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，其'标题'为'The Lord of the Rings: The Fellowship of the Ring'"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').has('tagline', 'What are you prepared to do?')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，其'标签'为'What are you prepared to do?'"
    },
    {
      "query": "g.V().hasLabel('person').out('write').has('title', 'The Dark Knight Rises')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，其'标题'为'The Dark Knight Rises'"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').has('rated', 'PG')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，其'评价'为'PG'"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').has('tagline', 'A long time ago in a galaxy far far away...')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，其'标签'为'A long time ago in a galaxy far far away...'"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').range(0, 10).has('duration', 158)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，取范围内的结果，其'持续时间'为'158'"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').range(0, 10).has('summary', 'placeholder text')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，取范围内的结果，其'总结'为'placeholder text'"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').has('rated', 'G').range(1, 10)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，其'打分'为'G'，取范围内的结果"
    },
    {
      "query": "g.V().hasLabel('genre').out().has('title', 'Hugo')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，沿out方向遍历，其'标题'为'Hugo'"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').has('id', 2115).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，其'id'为'2115'，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('write').has('tagline', \"If he's crazy what does that make you?\")",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，其'标签'为'If he's crazy what does that make you?'"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').range(0, 10).has('title', 'Mulan')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，取范围内的结果，其'标题'为'Mulan'"
    },
    {
      "query": "g.V().hasLabel('person').out('write').has('title', 'Frozen')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，其'标题'为'Frozen'"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').has('summary', 'placeholder text')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，其'总结'为'placeholder text'"
    },
    {
      "query": "g.V().hasLabel('person').out('write').has('id', 3915)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，其'id'为'3915'"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').has('id', 296)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，其'id'为'296'"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').range(0, 10).has('id', 1241)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，取范围内的结果，其'id'为'1241'"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').range(0, 10).has('title', 'Solomon Kane')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，取范围内的结果，其'标题'为'Solomon Kane'"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').range(0, 10).has('rated', 'PG-13')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，取范围内的结果，其'评价'为'PG-13'"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').has('poster_image', 'http://image.tmdb.org/t/p/w185/8f8Hisd36IN8jN1OpKxsxRu8i57.jpg').sample(2)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，其'海报图片'为'http://image.tmdb.org/t/p/w185/8f8Hisd36IN8jN1OpKxsxRu8i57.jpg'，随机采样 2 个结果"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').has('title', 'The Godfather')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，其'标题'为'The Godfather'"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').has('summary', 'placeholder text')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，其'总结'为'placeholder text'"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').has('rated', 'PG-13')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，其'打分'为'PG-13'"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').has('tagline', 'Why So Serious?')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，其'标签'为'Why So Serious?'"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').has('poster_image', 'http://image.tmdb.org/t/p/w185/8f8Hisd36IN8jN1OpKxsxRu8i57.jpg')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，其'海报图片'为'http://image.tmdb.org/t/p/w185/8f8Hisd36IN8jN1OpKxsxRu8i57.jpg'"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').has('poster_image', 'http://image.tmdb.org/t/p/w185/qb4ls8KzTJMFPEwNOfM7FotfC4Y.jpg')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，其'海报图片'为'http://image.tmdb.org/t/p/w185/qb4ls8KzTJMFPEwNOfM7FotfC4Y.jpg'"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').has('id', 526)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，其'id'为'526'"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').has('tagline', 'This time the princess saves the prince.')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，其'标签'为'This time the princess saves the prince.'"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').has('id', 598)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，其'id'为'598'"
    },
    {
      "query": "g.V().hasLabel('keyword').out().has('title', 'American Hustle')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿out方向遍历，其'标题'为'American Hustle'"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').has('summary', 'placeholder text').limit(20)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，其'总结'为'placeholder text'，取前 20 条数据"
    },
    {
      "query": "g.V().hasLabel('person').out('write').has('title', 'Frozen').limit(50)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，其'标题'为'Frozen'，并限制最多返回 50 个结果"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').has('name', 'man cooking for woman')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，其'名称'为'man cooking for woman'"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').has('login', 'Edward')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，其'登录用户名'为'Edward'"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').range(0, 10).has('id', 3252)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，取范围内的结果，其'id'为'3252'"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').has('id', 2115)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，其'id'为'2115'"
    },
    {
      "query": "g.V().hasLabel('person').out('write').has('summary', 'placeholder text')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，其'总结'为'placeholder text'"
    },
    {
      "query": "g.V().hasLabel('keyword').out().has('title', 'Pulp Fiction')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿out方向遍历，其'标题'为'Pulp Fiction'"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').has('tagline', 'In Cold Blood')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，其'标签'为'In Cold Blood'"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').has('title', 'The Lorax')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，其'标题'为'The Lorax'"
    },
    {
      "query": "g.V().hasLabel('keyword').out().in()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿out方向遍历，沿in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('acted_in')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'参演'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').in('write')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，沿'写'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('write').in('write')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，沿'写'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('write').in('acted_in')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，沿'参演'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').in('directed')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，沿'导演'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').in('write').range(0, 5)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'写'边in方向遍历，取范围内的结果"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').in('produce')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，沿'生产'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('produce')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'生产'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').in('rate')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'打分'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').in('rate')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，沿'打分'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').in('produce')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'生产'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('write').in('directed')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，沿'导演'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('directed')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'导演'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('rate')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'打分'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('directed').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'导演'边in方向遍历，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').out('write').in('produce')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，沿'生产'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').in('is_friend')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，沿'是朋友关系'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').in('rate')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，沿'打分'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').in('write').sample(3)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，沿'写'边in方向遍历，随机采样 3 个结果"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').in('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，沿'has_keyword'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('rate').limit(161)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'打分'边in方向遍历，并限制最多返回 161 个结果"
    },
    {
      "query": "g.V().hasLabel('genre').out().in()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，沿out方向遍历，沿in方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').in('acted_in')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，沿'参演'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').in('acted_in')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'参演'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').in('write')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'写'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('keyword').out().in().limit(3)",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿out方向遍历，沿in方向遍历，并限制最多返回 3 个结果"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').in('write')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，沿'写'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').in('produce')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，沿'出版'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('write').in('rate')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，沿'打分'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').in('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，沿'has_genre'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').in('acted_in')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，沿'参演'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('write')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'写'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').in('directed')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'导演'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').in('directed')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，沿'导演'边in方向遍历"
    },
    {
      "query": "g.V().limit(10)",
      "description": "从图中开始查找所有顶点，并限制最多返回 10 个结果"
    },
    {
      "query": "g.V().skip(5)",
      "description": "从图中开始查找所有顶点，跳过前 5 个结果"
    },
    {
      "query": "g.V().tail(10)",
      "description": "从图中开始查找所有顶点，取最后 10 个结果"
    },
    {
      "query": "g.V().sample(8)",
      "description": "从图中开始查找所有顶点，随机采样 8 个结果"
    },
    {
      "query": "g.V().coin(0.5)",
      "description": "从图中开始查找所有顶点，以 0.5 的概率保留结果"
    },
    {
      "query": "g.V().hasLabel('genre').limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，并限制最多返回 10 个结果"
    },
    {
      "query": "g.V().hasLabel('movie').limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，并限制最多返回 10 个结果"
    },
    {
      "query": "g.V().hasLabel('keyword').limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，取前 10 条数据"
    },
    {
      "query": "g.V().hasLabel('person').limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，取前 10 条数据"
    },
    {
      "query": "g.V().hasLabel('user').limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，取前 10 条数据"
    },
    {
      "query": "g.V().out().limit(5)",
      "description": "从图中开始查找所有顶点，沿out方向遍历，并限制最多返回 5 个结果"
    },
    {
      "query": "g.V().values()",
      "description": "从图中开始查找所有顶点，提取属性值"
    },
    {
      "query": "g.V().properties()",
      "description": "从图中开始查找所有顶点，获取属性对象"
    },
    {
      "query": "g.V().valueMap()",
      "description": "从图中开始查找所有顶点，然后以键值对的形式返回它们的属性"
    },
    {
      "query": "g.V().elementMap().order()",
      "description": "从图中开始查找所有顶点，获取元素映射，然后对结果进行排序"
    },
    {
      "query": "g.V().elementMap()",
      "description": "从图中开始查找所有顶点，获取元素映射"
    },
    {
      "query": "g.V().hasLabel('genre').values(\"id\").dedup()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，提取 'id' 字段的值，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').values(\"poster_image\").order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，提取 '海报图片' 字段的值，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').values(\"born\")",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，然后获取它们的 '出生年份' 属性值"
    },
    {
      "query": "g.V().hasLabel('person').values(\"id\").order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，提取 'id' 字段的值，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('genre').values(\"name\")",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，然后获取它们的 '名' 属性值"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"title\")",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后获取它们的 '标题' 属性值"
    },
    {
      "query": "g.V().hasLabel('person').values(\"name\")",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，提取 '名称' 字段的值"
    },
    {
      "query": "g.V().hasLabel('person').values(\"poster_image\")",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，提取 '海报图片' 字段的值"
    },
    {
      "query": "g.V().hasLabel('user').values(\"id\")",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，提取 'id' 字段的值"
    },
    {
      "query": "g.V().hasLabel('user').values(\"login\")",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，然后获取它们的 '登录用户名' 属性值"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"title\").limit(50)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后获取它们的 '标题' 属性值，并限制最多返回 50 个结果"
    },
    {
      "query": "g.V().hasLabel('keyword').values(\"name\")",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，然后获取它们的 '名字' 属性值"
    },
    {
      "query": "g.V().hasLabel('person').values(\"id\")",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，提取 'id' 字段的值"
    },
    {
      "query": "g.V().hasLabel('genre').values(\"id\")",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，提取 'id' 字段的值"
    },
    {
      "query": "g.V().hasLabel('keyword').values(\"id\")",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，提取 'id' 字段的值"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"poster_image\")",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后获取它们的 '海报图片' 属性值"
    },
    {
      "query": "g.V().dedup().hasLabel('movie').valueMap(\"id\").order()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'电影'类型的顶点，返回 'id' 的键值对，然后对结果进行排序"
    },
    {
      "query": "g.V().dedup().hasLabel('user').valueMap()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'用户'类型的顶点，然后以键值对的形式返回它们的属性"
    },
    {
      "query": "g.V().hasLabel('user').valueMap(\"id\")",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，返回 'id' 的键值对"
    },
    {
      "query": "g.V().hasLabel('keyword').valueMap(\"name\")",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，返回 '名字' 的键值对"
    },
    {
      "query": "g.V().hasLabel('keyword').valueMap(\"id\").limit(27)",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，返回 'id' 的键值对，取前 27 条数据"
    },
    {
      "query": "g.V().dedup().hasLabel('genre').valueMap(\"id\").order()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'流派'类型的顶点，返回 'id' 的键值对，然后对结果进行排序"
    },
    {
      "query": "g.V().dedup().hasLabel('genre').valueMap(\"name\")",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'流派'类型的顶点，返回 '姓名' 的键值对"
    },
    {
      "query": "g.V().hasLabel('person').valueMap(\"name\")",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，返回 '名字' 的键值对"
    },
    {
      "query": "g.V().dedup().hasLabel('genre').valueMap(\"name\").limit(3)",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'流派'类型的顶点，返回 '姓名' 的键值对，取前 3 条数据"
    },
    {
      "query": "g.V().hasLabel('user').valueMap()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，然后以键值对的形式返回它们的属性"
    },
    {
      "query": "g.V().hasLabel('keyword').valueMap(\"id\")",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，返回 'id' 的键值对"
    },
    {
      "query": "g.V().dedup().hasLabel('person').valueMap(\"poster_image\")",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，返回 '海报图片' 的键值对"
    },
    {
      "query": "g.V().hasLabel('movie').valueMap(\"duration\")",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，返回 '持续时间' 的键值对"
    },
    {
      "query": "g.V().dedup().hasLabel('user').valueMap().order()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'用户'类型的顶点，然后以键值对的形式返回它们的属性，然后对结果进行排序"
    },
    {
      "query": "g.V().dedup().hasLabel('keyword').valueMap(\"name\")",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'关键字'类型的顶点，返回 '姓名' 的键值对"
    },
    {
      "query": "g.V().dedup().hasLabel('person').valueMap(\"name\")",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，返回 '名字' 的键值对"
    },
    {
      "query": "g.V().dedup().hasLabel('person')",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点"
    },
    {
      "query": "g.V().dedup().hasLabel('person').valueMap(\"name\").limit(20)",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，返回 '名字' 的键值对，取前 20 条数据"
    },
    {
      "query": "g.V().dedup().hasLabel('keyword').valueMap()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'关键字'类型的顶点，然后以键值对的形式返回它们的属性"
    },
    {
      "query": "g.V().dedup().hasLabel('user')",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'用户'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').valueMap()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，然后以键值对的形式返回它们的属性"
    },
    {
      "query": "g.V().hasLabel('person').valueMap(\"id\")",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，返回 'id' 的键值对"
    },
    {
      "query": "g.V().dedup().hasLabel('person').valueMap(\"id\")",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，返回 'id' 的键值对"
    },
    {
      "query": "g.V().hasLabel('user').valueMap(\"login\")",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，返回 '登录用户名' 的键值对"
    },
    {
      "query": "g.V().dedup().hasLabel('genre')",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().dedup().hasLabel('movie')",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'电影'类型的顶点"
    },
    {
      "query": "g.V().dedup().hasLabel('movie').valueMap(\"rated\")",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'电影'类型的顶点，返回 '打分' 的键值对"
    },
    {
      "query": "g.V().hasLabel('movie').valueMap(\"duration\").dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，返回 '持续时间' 的键值对，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('genre').valueMap()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，然后以键值对的形式返回它们的属性"
    },
    {
      "query": "g.V().dedup().hasLabel('genre').valueMap()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'流派'类型的顶点，然后以键值对的形式返回它们的属性"
    },
    {
      "query": "g.V().dedup().hasLabel('user').valueMap(\"login\")",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'用户'类型的顶点，返回 '登录用户名' 的键值对"
    },
    {
      "query": "g.V().hasLabel('person').valueMap(\"poster_image\")",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，返回 '海报图片' 的键值对"
    },
    {
      "query": "g.V().hasLabel('keyword').valueMap()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，然后以键值对的形式返回它们的属性"
    },
    {
      "query": "g.V().hasLabel('person').valueMap(\"born\")",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，返回 '出生年份' 的键值对"
    },
    {
      "query": "g.V().hasLabel('movie').valueMap()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后以键值对的形式返回它们的属性"
    },
    {
      "query": "g.V().dedup().hasLabel('movie').valueMap(\"id\")",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'电影'类型的顶点，返回 'id' 的键值对"
    },
    {
      "query": "g.V().hasLabel('genre').valueMap().dedup()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，然后以键值对的形式返回它们的属性，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('genre').valueMap(\"id\")",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，返回 'id' 的键值对"
    },
    {
      "query": "g.V().dedup().hasLabel('keyword').valueMap(\"id\")",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'关键字'类型的顶点，返回 'id' 的键值对"
    },
    {
      "query": "g.V().dedup().hasLabel('keyword')",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'关键字'类型的顶点"
    },
    {
      "query": "g.V().dedup().hasLabel('movie').valueMap(\"poster_image\")",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'电影'类型的顶点，返回 '海报图片' 的键值对"
    },
    {
      "query": "g.V().dedup().hasLabel('movie').valueMap(\"title\")",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'电影'类型的顶点，返回 '标题' 的键值对"
    },
    {
      "query": "g.V().hasLabel('genre').valueMap(\"name\")",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，返回 '名字' 的键值对"
    },
    {
      "query": "g.V().dedup().hasLabel('person').valueMap(\"born\")",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，返回 '出生年份' 的键值对"
    },
    {
      "query": "g.V().dedup().hasLabel('user').valueMap(\"id\")",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'用户'类型的顶点，返回 'id' 的键值对"
    },
    {
      "query": "g.V().dedup().hasLabel('person').valueMap()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，然后以键值对的形式返回它们的属性"
    },
    {
      "query": "g.V().dedup().hasLabel('movie').valueMap()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'电影'类型的顶点，然后以键值对的形式返回它们的属性"
    },
    {
      "query": "g.V().hasLabel('movie').valueMap(\"title\")",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，返回 '标题' 的键值对"
    },
    {
      "query": "g.V().hasLabel('movie').valueMap(\"poster_image\")",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，返回 '海报图片' 的键值对"
    },
    {
      "query": "g.V().dedup().hasLabel('genre').valueMap(\"id\")",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'流派'类型的顶点，返回 'id' 的键值对"
    },
    {
      "query": "g.V().hasLabel('movie').valueMap(\"tagline\")",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，返回 '标签' 的键值对"
    },
    {
      "query": "g.V().id()",
      "description": "从图中开始查找所有顶点，然后获取它们的ID"
    },
    {
      "query": "g.V().label().order()",
      "description": "从图中开始查找所有顶点，然后获取它们的标签，然后对结果进行排序"
    },
    {
      "query": "g.V().label()",
      "description": "从图中开始查找所有顶点，然后获取它们的标签"
    },
    {
      "query": "g.V().count()",
      "description": "从图中开始查找所有顶点，最后统计结果的总数"
    },
    {
      "query": "g.V().hasLabel('movie').count()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，最后统计结果的总数"
    },
    {
      "query": "g.V().hasLabel('user').count()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，最后统计结果的总数"
    },
    {
      "query": "g.V().hasLabel('genre').count()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，最后统计结果的总数"
    },
    {
      "query": "g.V().hasLabel('keyword').count()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，最后统计结果的总数"
    },
    {
      "query": "g.V().hasLabel('person').count()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，最后统计结果的总数"
    },
    {
      "query": "g.V().out().count()",
      "description": "从图中开始查找所有顶点，沿out方向遍历，最后统计结果的总数"
    },
    {
      "query": "g.V().dedup()",
      "description": "从图中开始查找所有顶点，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('user').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('movie').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，并对结果进行去重"
    },
    {
      "query": "g.V().values().dedup()",
      "description": "从图中开始查找所有顶点，提取属性值，并对结果进行去重"
    },
    {
      "query": "g.V().order()",
      "description": "从图中开始查找所有顶点，然后对结果进行排序"
    },
    {
      "query": "g.V().order().by('name')",
      "description": "从图中开始查找所有顶点，然后对结果进行排序，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().order().by('born')",
      "description": "从图中开始查找所有顶点，然后对结果进行排序，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('user').order()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('genre').order()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('keyword').order().by('born')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，然后对结果进行排序，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').order()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('movie').order().by('born')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后对结果进行排序，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').order().by('born')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，然后对结果进行排序，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('genre').order().by('born')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，然后对结果进行排序，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').order().by('born').limit(1)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，然后对结果进行排序，通过 '{}' 来进行分组或投影，并限制最多返回 1 个结果"
    },
    {
      "query": "g.V().hasLabel('user').order().by('born')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，然后对结果进行排序，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('keyword').order()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，然后对结果进行排序"
    },
    {
      "query": "g.V().simplePath()",
      "description": "从图中开始查找所有顶点，过滤出简单路径"
    },
    {
      "query": "g.V().cyclicPath()",
      "description": "从图中开始查找所有顶点，过滤出循环路径"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').simplePath()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，过滤出简单路径"
    },
    {
      "query": "g.V().hasLabel('keyword').out().simplePath()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿out方向遍历，过滤出简单路径"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').simplePath()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出简单路径"
    },
    {
      "query": "g.V().hasLabel('genre').out().simplePath()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，沿out方向遍历，过滤出简单路径"
    },
    {
      "query": "g.V().hasLabel('person').out('write').simplePath()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，过滤出简单路径"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').simplePath()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，过滤出简单路径"
    },
    {
      "query": "g.V().hasLabel('movie').order().out('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后对结果进行排序，沿'has_genre'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').simplePath()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，过滤出简单路径"
    },
    {
      "query": "g.V().hasLabel('movie').order().out('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后对结果进行排序，沿'has_keyword'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').order().out('has_genre').simplePath()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后对结果进行排序，沿'has_genre'边out方向遍历，过滤出简单路径"
    },
    {
      "query": "g.V().hasLabel('movie').order().out('has_keyword').simplePath()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后对结果进行排序，沿'has_keyword'边out方向遍历，过滤出简单路径"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').simplePath()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，过滤出简单路径"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').simplePath()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出简单路径"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').simplePath()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，过滤出简单路径"
    },
    {
      "query": "g.V().group().limit(69)",
      "description": "从图中开始查找所有顶点，然后根据 '{}' 进行分组，并限制最多返回 69 个结果"
    },
    {
      "query": "g.V().group()",
      "description": "从图中开始查找所有顶点，然后根据 '{}' 进行分组"
    },
    {
      "query": "g.V().group().by('name')",
      "description": "从图中开始查找所有顶点，然后根据 '{}' 进行分组，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().groupCount()",
      "description": "从图中开始查找所有顶点，分组并统计数量"
    },
    {
      "query": "g.V().groupCount().by('label')",
      "description": "从图中开始查找所有顶点，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').groupCount().by('born')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').groupCount().by('born').order()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('user').groupCount().by('born')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('genre').groupCount().by('born')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('user').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('keyword').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('keyword').groupCount().by('born')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('genre').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('person').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('movie').groupCount().by('born')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().values().sum().limit(50)",
      "description": "从图中开始查找所有顶点，提取属性值，求和，并限制最多返回 50 个结果"
    },
    {
      "query": "g.V().values().sum()",
      "description": "从图中开始查找所有顶点，提取属性值，求和"
    },
    {
      "query": "g.V().values().mean()",
      "description": "从图中开始查找所有顶点，然后获取它们的属性值，求平均值"
    },
    {
      "query": "g.V().values().min()",
      "description": "从图中开始查找所有顶点，然后获取它们的属性值，求最小值"
    },
    {
      "query": "g.V().values().max()",
      "description": "从图中开始查找所有顶点，提取属性值，求最大值"
    },
    {
      "query": "g.V().values().max().order()",
      "description": "从图中开始查找所有顶点，提取属性值，求最大值，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').values(\"poster_image\").sum()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，然后获取它们的 '海报图片' 属性值，求和"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"tagline\").sum()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后获取它们的 '标签' 属性值，求和"
    },
    {
      "query": "g.V().hasLabel('user').values(\"id\").sum()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，然后获取它们的 'id' 属性值，求和"
    },
    {
      "query": "g.V().hasLabel('genre').values(\"name\").sum().limit(69)",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，提取 '名字' 字段的值，求和，并限制最多返回 69 个结果"
    },
    {
      "query": "g.V().hasLabel('genre').values(\"id\").sum()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，提取 'id' 字段的值，求和"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"id\")",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，提取 'id' 字段的值"
    },
    {
      "query": "g.V().hasLabel('person').values(\"born\").sum()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，提取 '出生年份' 字段的值，求和"
    },
    {
      "query": "g.V().hasLabel('user').values(\"login\").sum()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，然后获取它们的 '登录用户名' 属性值，求和"
    },
    {
      "query": "g.V().hasLabel('person').values(\"id\").sum()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，提取 'id' 字段的值，求和"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"duration\")",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，提取 '持续时间' 字段的值"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"rated\").sum()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后获取它们的 '打分' 属性值，求和"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"id\").sum()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，提取 'id' 字段的值，求和"
    },
    {
      "query": "g.V().hasLabel('genre').values(\"name\").sum()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，提取 '名字' 字段的值，求和"
    },
    {
      "query": "g.V().hasLabel('user').order().values(\"login\").sum()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，然后对结果进行排序，提取 '登录用户名' 字段的值，求和"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"rated\")",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后获取它们的 '打分' 属性值"
    },
    {
      "query": "g.V().hasLabel('person').values(\"name\").sum()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，然后获取它们的 '名字' 属性值，求和"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"tagline\")",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后获取它们的 '标签' 属性值"
    },
    {
      "query": "g.V().hasLabel('user').order().values(\"id\")",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，然后对结果进行排序，然后获取它们的 'id' 属性值"
    },
    {
      "query": "g.V().hasLabel('keyword').values(\"id\").sum()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，然后获取它们的 'id' 属性值，求和"
    },
    {
      "query": "g.V().hasLabel('keyword').values(\"name\").sum()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，提取 '姓名' 字段的值，求和"
    },
    {
      "query": "g.V().hasLabel('keyword').values(\"name\").sum().dedup()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，提取 '姓名' 字段的值，求和，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('genre').values(\"id\").sum().dedup()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，提取 'id' 字段的值，求和，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"duration\").sum()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，提取 '持续时间' 字段的值，求和"
    },
    {
      "query": "g.V().hasLabel('user').order().values(\"id\").sum()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，然后对结果进行排序，然后获取它们的 'id' 属性值，求和"
    },
    {
      "query": "g.V().hasLabel('user').order().values(\"login\")",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，然后对结果进行排序，提取 '登录用户名' 字段的值"
    },
    {
      "query": "g.V().as('a')",
      "description": "从图中开始查找所有顶点，标记为'a'"
    },
    {
      "query": "g.V().as('a').out()",
      "description": "从图中开始查找所有顶点，标记为'a'，沿out方向遍历"
    },
    {
      "query": "g.V().as('a').out().as('b')",
      "description": "从图中开始查找所有顶点，标记为'a'，沿out方向遍历，标记为'b'"
    },
    {
      "query": "g.V().as('a').out().as('b').select('a', 'b')",
      "description": "从图中开始查找所有顶点，标记为'a'，沿out方向遍历，标记为'b'，选择标记的元素多个标记"
    },
    {
      "query": "g.V().as('person')",
      "description": "从图中开始查找所有顶点，标记为'person'"
    },
    {
      "query": "g.V().as('person').out().as('movie').select('person')",
      "description": "从图中开始查找所有顶点，标记为'person'，沿out方向遍历，标记为'movie'，选择标记的元素标记'person'"
    },
    {
      "query": "g.V().as('person').out().as('movie')",
      "description": "从图中开始查找所有顶点，标记为'person'，沿out方向遍历，标记为'movie'"
    },
    {
      "query": "g.V().as('person').out()",
      "description": "从图中开始查找所有顶点，标记为'person'，沿out方向遍历"
    },
    {
      "query": "g.V().where(__.out('acted_in'))",
      "description": "从图中开始查找所有顶点，条件过滤（嵌套遍历）"
    },
    {
      "query": "g.V().where(__.out('rate'))",
      "description": "从图中开始查找所有顶点，条件过滤（嵌套遍历）"
    },
    {
      "query": "g.V().not(__.out('acted_in'))",
      "description": "从图中开始查找所有顶点，否定过滤（嵌套遍历）"
    },
    {
      "query": "g.V().not(__.out('rate'))",
      "description": "从图中开始查找所有顶点，否定过滤（嵌套遍历）"
    },
    {
      "query": "g.V().not(__.out('rate')).dedup()",
      "description": "从图中开始查找所有顶点，否定过滤（嵌套遍历），并对结果进行去重"
    },
    {
      "query": "g.V().and(hasLabel('person'), has('born', P.gt(1960)))",
      "description": "从图中开始查找所有顶点，逻辑与过滤"
    },
    {
      "query": "g.V().or(hasLabel('person'), hasLabel('movie')).order()",
      "description": "从图中开始查找所有顶点，逻辑或过滤，然后对结果进行排序"
    },
    {
      "query": "g.V().or(hasLabel('person'), hasLabel('movie'))",
      "description": "从图中开始查找所有顶点，逻辑或过滤"
    },
    {
      "query": "g.V().filter(out('acted_in'))",
      "description": "从图中开始查找所有顶点，通用过滤"
    },
    {
      "query": "g.V().is('Tom Hanks')",
      "description": "从图中开始查找所有顶点，判断值是否为'Tom Hanks'"
    },
    {
      "query": "g.V().constant('value')",
      "description": "从图中开始查找所有顶点，映射为常量值 '{}'（值：value）"
    },
    {
      "query": "g.V().identity()",
      "description": "从图中开始查找所有顶点，保持元素不变"
    },
    {
      "query": "g.V().barrier()",
      "description": "从图中开始查找所有顶点，等待所有结果到齐"
    },
    {
      "query": "g.V().fold()",
      "description": "从图中开始查找所有顶点，折叠为列表"
    },
    {
      "query": "g.V().fold().dedup()",
      "description": "从图中开始查找所有顶点，折叠为列表，并对结果进行去重"
    },
    {
      "query": "g.V().unfold()",
      "description": "从图中开始查找所有顶点，展开列表"
    },
    {
      "query": "g.V().path()",
      "description": "从图中开始查找所有顶点，然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').path()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').path()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('person').out('write').path()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').path()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('genre').dedup().out().path()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，并对结果进行去重，沿out方向遍历，然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').path()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('genre').dedup().out()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，并对结果进行去重，沿out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').path()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('genre').out().path()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，沿out方向遍历，然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').limit(159).path()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，并限制最多返回 159 个结果，然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('keyword').out().path()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿out方向遍历，然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').path()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').path()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，然后返回完整的遍历路径"
    },
    {
      "query": "g.V().project('name', 'born').by('name')",
      "description": "从图中开始查找所有顶点投影字段，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().project('name', 'born')",
      "description": "从图中开始查找所有顶点投影字段"
    },
    {
      "query": "g.V().project('name', 'born').by('name').by('born')",
      "description": "从图中开始查找所有顶点投影字段，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').project('name').by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点投影字段，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').project('name')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点投影字段"
    },
    {
      "query": "g.V().hasLabel('keyword').project('name')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点投影字段"
    },
    {
      "query": "g.V().hasLabel('user').project('name')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点投影字段"
    },
    {
      "query": "g.V().hasLabel('genre').project('name')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点投影字段"
    },
    {
      "query": "g.V().hasLabel('person').project('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点投影字段"
    },
    {
      "query": "g.V().hasLabel('genre').project('name').by('name')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点投影字段，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').project('name').by('name')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点投影字段，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('keyword').project('name').by('name')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点投影字段，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('user').project('name').by('name')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点投影字段，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().repeat(__.out('rate')).times(2)",
      "description": "从图中开始查找所有顶点重复遍历重复2次"
    },
    {
      "query": "g.V().repeat(__.out('rate')).limit(106).times(2)",
      "description": "从图中开始查找所有顶点重复遍历，并限制最多返回 106 个结果重复2次"
    },
    {
      "query": "g.V().repeat(__.out('acted_in'))",
      "description": "从图中开始查找所有顶点重复遍历"
    },
    {
      "query": "g.V().repeat(__.out('rate'))",
      "description": "从图中开始查找所有顶点重复遍历"
    },
    {
      "query": "g.V().repeat(__.out('rate')).limit(106).times(2).dedup()",
      "description": "从图中开始查找所有顶点重复遍历，并限制最多返回 106 个结果重复2次，并对结果进行去重"
    },
    {
      "query": "g.V().repeat(__.out('acted_in')).times(2)",
      "description": "从图中开始查找所有顶点重复遍历重复2次"
    },
    {
      "query": "g.V().repeat(__.out('rate')).until(__.hasLabel('genre')).sample(16)",
      "description": "从图中开始查找所有顶点重复遍历终止条件（遍历），随机采样 16 个结果"
    },
    {
      "query": "g.V().repeat(__.out('rate')).until(__.hasLabel('person'))",
      "description": "从图中开始查找所有顶点重复遍历终止条件（遍历）"
    },
    {
      "query": "g.V().repeat(__.out('acted_in')).until(__.hasLabel('person'))",
      "description": "从图中开始查找所有顶点重复遍历终止条件（遍历）"
    },
    {
      "query": "g.V().repeat(__.out('acted_in')).until(__.hasLabel('genre'))",
      "description": "从图中开始查找所有顶点重复遍历终止条件（遍历）"
    },
    {
      "query": "g.V().repeat(__.out('rate')).until(__.hasLabel('genre'))",
      "description": "从图中开始查找所有顶点重复遍历终止条件（遍历）"
    },
    {
      "query": "g.V().emit()",
      "description": "从图中开始查找所有顶点发射中间结果"
    },
    {
      "query": "g.V().emit().repeat(__.out('rate')).times(2)",
      "description": "从图中开始查找所有顶点发射中间结果重复遍历重复2次"
    },
    {
      "query": "g.V().emit().repeat(__.out('acted_in'))",
      "description": "从图中开始查找所有顶点发射中间结果重复遍历"
    },
    {
      "query": "g.V().emit().repeat(__.out('rate'))",
      "description": "从图中开始查找所有顶点发射中间结果重复遍历"
    },
    {
      "query": "g.V().emit().repeat(__.out('acted_in')).times(2)",
      "description": "从图中开始查找所有顶点发射中间结果重复遍历重复2次"
    },
    {
      "query": "g.V().hasLabel('user').repeat(__.out()).times(2)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点重复遍历重复2次"
    },
    {
      "query": "g.V().hasLabel('movie').repeat(__.out())",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点重复遍历"
    },
    {
      "query": "g.V().hasLabel('genre').repeat(__.out())",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点重复遍历"
    },
    {
      "query": "g.V().hasLabel('genre').repeat(__.out()).times(2)",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点重复遍历重复2次"
    },
    {
      "query": "g.V().hasLabel('keyword').repeat(__.out()).times(2)",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点重复遍历重复2次"
    },
    {
      "query": "g.V().hasLabel('movie').repeat(__.out()).times(2)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点重复遍历重复2次"
    },
    {
      "query": "g.V().hasLabel('user').repeat(__.out())",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点重复遍历"
    },
    {
      "query": "g.V().hasLabel('person').repeat(__.out()).times(2)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点重复遍历重复2次"
    },
    {
      "query": "g.V().hasLabel('movie').repeat(__.out()).times(2).limit(45)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点重复遍历重复2次，取前 45 条数据"
    },
    {
      "query": "g.V().hasLabel('keyword').repeat(__.out())",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点重复遍历"
    },
    {
      "query": "g.V().hasLabel('person').repeat(__.out())",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点重复遍历"
    },
    {
      "query": "g.V().choose(__.hasLabel('person'), __.out('acted_in'), __.out('has_genre'))",
      "description": "从图中开始查找所有顶点条件分支（if-then-else）"
    },
    {
      "query": "g.V().choose(__.hasLabel('genre'), __.out('acted_in'), __.out('has_genre'))",
      "description": "从图中开始查找所有顶点条件分支（if-then-else）"
    },
    {
      "query": "g.V().coalesce(__.out('acted_in'), __.out('directed'))",
      "description": "从图中开始查找所有顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().coalesce(__.out('acted_in'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().coalesce(__.out('rate'), __.out('directed'))",
      "description": "从图中开始查找所有顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().coalesce(__.out('rate'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().optional(__.out('acted_in'))",
      "description": "从图中开始查找所有顶点可选遍历"
    },
    {
      "query": "g.V().union(__.out('rate'), __.out('directed'))",
      "description": "从图中开始查找所有顶点联合多个遍历"
    },
    {
      "query": "g.V().union(__.out('rate'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点联合多个遍历"
    },
    {
      "query": "g.V().union(__.out('acted_in'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点联合多个遍历"
    },
    {
      "query": "g.V().union(__.out('rate'), __.out('acted_in')).dedup()",
      "description": "从图中开始查找所有顶点联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().union(__.out('acted_in'), __.out('directed'))",
      "description": "从图中开始查找所有顶点联合多个遍历"
    },
    {
      "query": "g.V().flatMap(__.out('acted_in'))",
      "description": "从图中开始查找所有顶点扁平映射"
    },
    {
      "query": "g.V().map(__.out('acted_in'))",
      "description": "从图中开始查找所有顶点映射"
    },
    {
      "query": "g.V().aggregate('x')",
      "description": "从图中开始查找所有顶点，将它们聚合到名为 'x' 的侧边变量中"
    },
    {
      "query": "g.V().aggregate('x').out()",
      "description": "从图中开始查找所有顶点，将它们聚合到名为 'x' 的侧边变量中，沿out方向遍历"
    },
    {
      "query": "g.V().store('x')",
      "description": "从图中开始查找所有顶点，将它们存储到名为 'x' 的侧边变量中"
    },
    {
      "query": "g.V().store('x').out()",
      "description": "从图中开始查找所有顶点，将它们存储到名为 'x' 的侧边变量中，沿out方向遍历"
    },
    {
      "query": "g.V().aggregate('x').cap('x').dedup()",
      "description": "从图中开始查找所有顶点，将它们聚合到名为 'x' 的侧边变量中，然后取出 'x' 中存储的内容，并对结果进行去重"
    },
    {
      "query": "g.V().aggregate('x').cap('x')",
      "description": "从图中开始查找所有顶点，将它们聚合到名为 'x' 的侧边变量中，然后取出 'x' 中存储的内容"
    },
    {
      "query": "g.V().sideEffect(out('acted_in'))",
      "description": "从图中开始查找所有顶点，执行附加操作"
    },
    {
      "query": "g.V().tree()",
      "description": "从图中开始查找所有顶点构建树结构"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').tree()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历构建树结构"
    },
    {
      "query": "g.V().hasLabel('genre').out().tree()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，沿out方向遍历构建树结构"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').tree()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历构建树结构"
    },
    {
      "query": "g.V().hasLabel('person').out('write').tree()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历构建树结构"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').tree()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历构建树结构"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').tree()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历构建树结构"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').tree()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历构建树结构"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').tree()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历构建树结构"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').tree()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历构建树结构"
    },
    {
      "query": "g.V().hasLabel('keyword').out().tree()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿out方向遍历构建树结构"
    },
    {
      "query": "g.V().drop()",
      "description": "从图中开始查找所有顶点，最后将这些元素从图中删除"
    },
    {
      "query": "g.V().iterate()",
      "description": "从图中开始查找所有顶点，迭代执行"
    },
    {
      "query": "g.V().explain()",
      "description": "从图中开始查找所有顶点，解释查询计划"
    },
    {
      "query": "g.V().profile()",
      "description": "从图中开始查找所有顶点，性能分析"
    },
    {
      "query": "g.addV('person').property('id', 6942).property('name', 'aePQXV')",
      "description": "从图中开始添加一个'人'顶点，并设置其'id'为'6942'，并设置其'姓名'为'aePQXV'"
    },
    {
      "query": "g.addV('person').property('id', 14).property('name', 'OcGNSS')",
      "description": "从图中开始添加一个'人'顶点，并设置其'id'为'14'，并设置其'名字'为'OcGNSS'"
    },
    {
      "query": "g.addV('person').property('id', 14).property('name', 'OcGNSS').property('name', 'New Person')",
      "description": "从图中开始添加一个'人'顶点，并设置其'id'为'14'，并设置其'名字'为'OcGNSS'设置属性 name=New Person"
    },
    {
      "query": "g.addV('person').property('id', 137).property('name', 'FXRqhC').property('name', 'New Person').limit(5).property('born', '1990')",
      "description": "从图中开始添加一个'人'顶点，并设置其'id'为'137'，并设置其'名称'为'FXRqhC'设置属性 name=New Person，取前 5 条数据设置属性 born=1990"
    },
    {
      "query": "g.addV('person').property('id', 137).property('name', 'FXRqhC').property('name', 'New Person').property('born', '1990')",
      "description": "从图中开始添加一个'人'顶点，并设置其'id'为'137'，并设置其'名称'为'FXRqhC'设置属性 name=New Person设置属性 born=1990"
    },
    {
      "query": "g.addV('person').property('id', 137).property('name', 'FXRqhC')",
      "description": "从图中开始添加一个'人'顶点，并设置其'id'为'137'，并设置其'名称'为'FXRqhC'"
    },
    {
      "query": "g.addV('person').property('id', 137).property('name', 'FXRqhC').property('name', 'New Person')",
      "description": "从图中开始添加一个'人'顶点，并设置其'id'为'137'，并设置其'名称'为'FXRqhC'设置属性 name=New Person"
    },
    {
      "query": "g.addV('person').property('id', 137).property('name', 'FXRqhC').property('name', 'New Person').property('born', '1990').sample(5)",
      "description": "从图中开始添加一个'人'顶点，并设置其'id'为'137'，并设置其'名称'为'FXRqhC'设置属性 name=New Person设置属性 born=1990，随机采样 5 个结果"
    },
    {
      "query": "g.addV('movie').property('id', 4832).property('title', 'Nixnckyf').property('tagline', 'WHnjyb').property('duration', 8638)",
      "description": "从图中开始添加一个'电影'顶点，并设置其'id'为'4832'，并设置其'标题'为'Nixnckyf'，并设置其'标签'为'WHnjyb'，并设置其'持续时间'为'8638'"
    },
    {
      "query": "g.addV('movie').property('id', 4832).property('title', 'Nixnckyf').property('tagline', 'WHnjyb').property('duration', 8638).property('title', 'New Movie')",
      "description": "从图中开始添加一个'电影'顶点，并设置其'id'为'4832'，并设置其'标题'为'Nixnckyf'，并设置其'标签'为'WHnjyb'，并设置其'持续时间'为'8638'设置属性 title=New Movie"
    },
    {
      "query": "g.V().hasLabel('person').out('write').hasLabel('genre').in('has_genre').hasLabel('genre').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历，过滤出'流派'类型的顶点，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').hasLabel('movie').in('acted_in').hasLabel('genre').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出'电影'类型的顶点，沿'参演'边in方向遍历，过滤出'流派'类型的顶点，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').hasLabel('person').in().hasLabel('genre').sample(1)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，过滤出'人'类型的顶点，沿in方向遍历，过滤出'流派'类型的顶点，随机采样 1 个结果"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').hasLabel('genre').in('has_genre').hasLabel('movie').limit(20)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历，过滤出'电影'类型的顶点，并限制最多返回 20 个结果"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').hasLabel('keyword').in('has_keyword').hasLabel('person').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出'关键字'类型的顶点，沿'has_keyword'边in方向遍历，过滤出'人'类型的顶点，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('write').hasLabel('genre').in('has_genre').hasLabel('person').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历，过滤出'人'类型的顶点，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('keyword').in('has_keyword').hasLabel('person').sample(3)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'关键字'类型的顶点，沿'has_keyword'边in方向遍历，过滤出'人'类型的顶点，随机采样 3 个结果"
    },
    {
      "query": "g.V().hasLabel('person').out('write').hasLabel('movie').in('rate').hasLabel('genre').limit(3)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，过滤出'电影'类型的顶点，沿'打分'边in方向遍历，过滤出'流派'类型的顶点，并限制最多返回 3 个结果"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('genre').in('has_genre').hasLabel('genre').range(1, 10)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历，过滤出'流派'类型的顶点，取范围内的结果"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').hasLabel('genre').in('has_genre').hasLabel('user').limit(50)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历，过滤出'用户'类型的顶点，并限制最多返回 50 个结果"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').hasLabel('movie').in('produce').hasLabel('movie')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，过滤出'电影'类型的顶点，沿'出版'边in方向遍历，过滤出'电影'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').hasLabel('keyword').in('has_keyword').hasLabel('person')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，过滤出'关键字'类型的顶点，沿'has_keyword'边in方向遍历，过滤出'人'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('movie').in('directed').hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'电影'类型的顶点，沿'导演'边in方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('genre').in('has_genre').hasLabel('keyword')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历，过滤出'关键字'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('write').hasLabel('movie').in('rate').hasLabel('keyword')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，过滤出'电影'类型的顶点，沿'打分'边in方向遍历，过滤出'关键字'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').hasLabel('person').in().hasLabel('person')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，过滤出'人'类型的顶点，沿in方向遍历，过滤出'人'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').hasLabel('genre').in('has_genre').hasLabel('user')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历，过滤出'用户'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('movie').in('directed').hasLabel('movie')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'电影'类型的顶点，沿'导演'边in方向遍历，过滤出'电影'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').hasLabel('person').in().hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，过滤出'人'类型的顶点，沿in方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('write').hasLabel('movie').in('produce').hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，过滤出'电影'类型的顶点，沿'出版'边in方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('keyword').in('has_keyword').hasLabel('person')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'关键字'类型的顶点，沿'has_keyword'边in方向遍历，过滤出'人'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('movie').in('acted_in').hasLabel('movie')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'电影'类型的顶点，沿'参演'边in方向遍历，过滤出'电影'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').hasLabel('movie').in('produce').hasLabel('person')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，过滤出'电影'类型的顶点，沿'出版'边in方向遍历，过滤出'人'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('movie').in('rate').hasLabel('movie')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'电影'类型的顶点，沿'打分'边in方向遍历，过滤出'电影'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('write').hasLabel('genre').in('has_genre').hasLabel('keyword')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历，过滤出'关键字'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').hasLabel('keyword').in('has_keyword').hasLabel('person')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出'关键字'类型的顶点，沿'has_keyword'边in方向遍历，过滤出'人'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('keyword').in('has_keyword').hasLabel('keyword')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'关键字'类型的顶点，沿'has_keyword'边in方向遍历，过滤出'关键字'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').hasLabel('genre').in('has_genre').hasLabel('person')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历，过滤出'人'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('write').hasLabel('genre').in('has_genre').hasLabel('user')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历，过滤出'用户'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').hasLabel('user').in('is_friend').hasLabel('person')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出'用户'类型的顶点，沿'是朋友关系'边in方向遍历，过滤出'人'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('movie').in('acted_in').hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'电影'类型的顶点，沿'参演'边in方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').hasLabel('genre').in('has_genre').hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').hasLabel('movie').in('produce').hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，过滤出'电影'类型的顶点，沿'出版'边in方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('write').hasLabel('genre').in('has_genre').hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').hasLabel('keyword').in('has_keyword').hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，过滤出'关键字'类型的顶点，沿'has_keyword'边in方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('movie').in('rate').hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'电影'类型的顶点，沿'打分'边in方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('write').hasLabel('movie').in('rate').hasLabel('person')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，过滤出'电影'类型的顶点，沿'打分'边in方向遍历，过滤出'人'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').hasLabel('genre').in('has_genre').hasLabel('movie')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历，过滤出'电影'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').hasLabel('keyword').in('has_keyword').hasLabel('movie')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出'关键字'类型的顶点，沿'has_keyword'边in方向遍历，过滤出'电影'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').hasLabel('genre').in('has_genre').hasLabel('person')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历，过滤出'人'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('genre').in('has_genre').hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').hasLabel('movie').in('directed').hasLabel('person')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，过滤出'电影'类型的顶点，沿'导演'边in方向遍历，过滤出'人'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').hasLabel('user').in('is_friend').hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出'用户'类型的顶点，沿'是朋友关系'边in方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('keyword').in('has_keyword').hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'关键字'类型的顶点，沿'has_keyword'边in方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').hasLabel('movie').in('rate').hasLabel('keyword')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，过滤出'电影'类型的顶点，沿'打分'边in方向遍历，过滤出'关键字'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').hasLabel('genre').in('has_genre').hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').hasLabel('movie').in('directed').hasLabel('movie')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，过滤出'电影'类型的顶点，沿'导演'边in方向遍历，过滤出'电影'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').hasLabel('movie').in('acted_in').hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出'电影'类型的顶点，沿'参演'边in方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').hasLabel('genre').in('has_genre').hasLabel('movie')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历，过滤出'电影'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').hasLabel('keyword').in('has_keyword').hasLabel('user')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，过滤出'关键字'类型的顶点，沿'has_keyword'边in方向遍历，过滤出'用户'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('write').hasLabel('genre').in('has_genre').hasLabel('person')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历，过滤出'人'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').hasLabel('movie').in('directed').hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，过滤出'电影'类型的顶点，沿'导演'边in方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('write').hasLabel('movie').in('rate').hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，过滤出'电影'类型的顶点，沿'打分'边in方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('movie').in('directed').hasLabel('keyword')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'电影'类型的顶点，沿'导演'边in方向遍历，过滤出'关键字'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').hasLabel('movie').in('rate').hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，过滤出'电影'类型的顶点，沿'打分'边in方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('write').hasLabel('movie').in('produce').hasLabel('person')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，过滤出'电影'类型的顶点，沿'出版'边in方向遍历，过滤出'人'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').hasLabel('movie').in('rate').hasLabel('movie')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，过滤出'电影'类型的顶点，沿'打分'边in方向遍历，过滤出'电影'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').hasLabel('movie').in('acted_in').hasLabel('user')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出'电影'类型的顶点，沿'参演'边in方向遍历，过滤出'用户'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').hasLabel('keyword').in('has_keyword').hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出'关键字'类型的顶点，沿'has_keyword'边in方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('write').hasLabel('movie').in('produce').hasLabel('keyword')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，过滤出'电影'类型的顶点，沿'出版'边in方向遍历，过滤出'关键字'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').hasLabel('movie').in('rate').hasLabel('user')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，过滤出'电影'类型的顶点，沿'打分'边in方向遍历，过滤出'用户'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').hasLabel('user').in('is_friend')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出'用户'类型的顶点，沿'是朋友关系'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').hasLabel('keyword').in('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出'关键字'类型的顶点，沿'has_keyword'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').hasLabel('keyword').in('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，过滤出'关键字'类型的顶点，沿'has_keyword'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').hasLabel('genre').in('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').hasLabel('movie').in('produce')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，过滤出'电影'类型的顶点，沿'出版'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('write').hasLabel('movie').in('rate')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，过滤出'电影'类型的顶点，沿'打分'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').hasLabel('movie').in('directed')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，过滤出'电影'类型的顶点，沿'导演'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').hasLabel('genre').in('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('movie').in('acted_in')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'电影'类型的顶点，沿'参演'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('keyword').in('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'关键字'类型的顶点，沿'has_keyword'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('genre').in('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').hasLabel('person').in()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，过滤出'人'类型的顶点，沿in方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').hasLabel('movie').in('rate')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，过滤出'电影'类型的顶点，沿'打分'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('movie').in('directed')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'电影'类型的顶点，沿'导演'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').hasLabel('movie').in('acted_in')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出'电影'类型的顶点，沿'参演'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('write').hasLabel('genre').in('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，过滤出'流派'类型的顶点，沿'has_genre'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('write').hasLabel('movie').in('produce')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，过滤出'电影'类型的顶点，沿'出版'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('movie').in('rate')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'电影'类型的顶点，沿'打分'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('keyword')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'关键字'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('write').hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('write').hasLabel('movie')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，过滤出'电影'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').hasLabel('movie')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出'电影'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').hasLabel('person')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，过滤出'人'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').hasLabel('keyword')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，过滤出'关键字'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').hasLabel('genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出'流派'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').hasLabel('user')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，过滤出'用户'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').hasLabel('movie')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，过滤出'电影'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').hasLabel('keyword')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出'关键字'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').hasLabel('movie')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，过滤出'电影'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').hasLabel('user')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出'用户'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').hasLabel('movie')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，过滤出'电影'类型的顶点"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').dedup().count()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，并对结果进行去重，最后统计结果的总数"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').dedup().count()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，并对结果进行去重，最后统计结果的总数"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').dedup().limit(3).count()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，并对结果进行去重，取前 3 条数据，最后统计结果的总数"
    },
    {
      "query": "g.V().hasLabel('person').out('write').dedup().count()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，并对结果进行去重，最后统计结果的总数"
    },
    {
      "query": "g.V().hasLabel('person').out('write').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').dedup().count()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，并对结果进行去重，最后统计结果的总数"
    },
    {
      "query": "g.V().hasLabel('genre').out().dedup().count()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，沿out方向遍历，并对结果进行去重，最后统计结果的总数"
    },
    {
      "query": "g.V().hasLabel('genre').out().dedup().count().limit(20)",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，沿out方向遍历，并对结果进行去重，最后统计结果的总数，并限制最多返回 20 个结果"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').dedup().count()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，并对结果进行去重，最后统计结果的总数"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').dedup().count()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，并对结果进行去重，最后统计结果的总数"
    },
    {
      "query": "g.V().hasLabel('person').out('write').dedup().count().order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，并对结果进行去重，最后统计结果的总数，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('genre').out().dedup()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，沿out方向遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('movie').in('rate').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'打分'边in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('person').in().groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').in('acted_in').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'参演'边in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('movie').in('rate').groupCount().by('name').limit(1)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'打分'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，取前 1 条数据"
    },
    {
      "query": "g.V().hasLabel('movie').in('produce').groupCount().limit(5).by('name')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'出版'边in方向遍历，分组并统计数量，并限制最多返回 5 个结果，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').in('produce').groupCount().limit(5).by('name').order()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'出版'边in方向遍历，分组并统计数量，并限制最多返回 5 个结果，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').in().groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('movie').in('rate').groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'打分'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').in('directed').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'导演'边in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('movie').in('produce').groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'出版'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').in('acted_in').groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'参演'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').in('produce').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'出版'边in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('movie').in('directed').groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'导演'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').order().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，然后对结果进行排序，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').order().by('title').limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，然后对结果进行排序，通过 '{}' 来进行分组或投影，取前 10 条数据"
    },
    {
      "query": "g.V().hasLabel('person').out('write').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').out('write').dedup().order().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，并对结果进行去重，然后对结果进行排序，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').order().by('title').limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，然后对结果进行排序，通过 '{}' 来进行分组或投影，取前 10 条数据"
    },
    {
      "query": "g.V().hasLabel('keyword').out().order()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿out方向遍历，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').order().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，然后对结果进行排序，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').order().limit(106).by('title')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，然后对结果进行排序，并限制最多返回 106 个结果，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('write').order().by('title').limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，然后对结果进行排序，通过 '{}' 来进行分组或投影，并限制最多返回 10 个结果"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').order().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，然后对结果进行排序，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('keyword').out().order().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿out方向遍历，然后对结果进行排序，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').order().limit(106).by('title').limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，然后对结果进行排序，并限制最多返回 106 个结果，通过 '{}' 来进行分组或投影，取前 10 条数据"
    },
    {
      "query": "g.V().hasLabel('keyword').out().order().limit(10).by('title')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿out方向遍历，然后对结果进行排序，取前 10 条数据，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('keyword').out().order().by('title').limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿out方向遍历，然后对结果进行排序，通过 '{}' 来进行分组或投影，并限制最多返回 10 个结果"
    },
    {
      "query": "g.V().hasLabel('person').out('write').dedup().order().by('title').limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，并对结果进行去重，然后对结果进行排序，通过 '{}' 来进行分组或投影，取前 10 条数据"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').order().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，然后对结果进行排序，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').order()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').order().by('title').limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，然后对结果进行排序，通过 '{}' 来进行分组或投影，并限制最多返回 10 个结果"
    },
    {
      "query": "g.V().hasLabel('person').out('write').dedup().order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，并对结果进行去重，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').order().by('title').limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，然后对结果进行排序，通过 '{}' 来进行分组或投影，并限制最多返回 10 个结果"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').order().by('title').limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，然后对结果进行排序，通过 '{}' 来进行分组或投影，取前 10 条数据"
    },
    {
      "query": "g.V().hasLabel('keyword').out().order().limit(10).by('title').limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿out方向遍历，然后对结果进行排序，取前 10 条数据，通过 '{}' 来进行分组或投影，并限制最多返回 10 个结果"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').order().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，然后对结果进行排序，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('write').order().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，然后对结果进行排序，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').order()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('write').as('m').select('p', 'm').by('name').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'写'边out方向遍历，标记为'm'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('genre').as('p').out()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'p'，沿out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('write').as('m').select('p', 'm')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'写'边out方向遍历，标记为'm'，选择标记的元素多个标记"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').sample(2).as('m')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，随机采样 2 个结果，标记为'm'"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('produce')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'生产'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('keyword').as('p').out()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，标记为'p'，沿out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').as('m')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，标记为'm'"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('write').as('m').select('p', 'm').by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'写'边out方向遍历，标记为'm'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('write')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'写'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('genre').as('p')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'p'"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').sample(2).as('m').select('p', 'm').by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，随机采样 2 个结果，标记为'm'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('write').as('m')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'写'边out方向遍历，标记为'm'"
    },
    {
      "query": "g.V().hasLabel('genre').as('p').out().as('m')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'p'，沿out方向遍历，标记为'm'"
    },
    {
      "query": "g.V().hasLabel('genre').as('p').out().as('m').select('p', 'm').by('name').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'p'，沿out方向遍历，标记为'm'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('produce').as('m').select('p', 'm').by('name').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'生产'边out方向遍历，标记为'm'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('produce').as('m').select('p', 'm').by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'生产'边out方向遍历，标记为'm'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').as('m').select('p', 'm')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，标记为'm'，选择标记的元素多个标记"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('write').as('m').select('p', 'm').by('name').order().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'写'边out方向遍历，标记为'm'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影，然后对结果进行排序，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('write').as('m').select('p', 'm').by('name').by('title').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'写'边out方向遍历，标记为'm'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('genre').as('p').out().as('m').select('p', 'm')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'p'，沿out方向遍历，标记为'm'，选择标记的元素多个标记"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').sample(2).as('m').select('p', 'm').by('name').by('title').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，随机采样 2 个结果，标记为'm'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').as('p')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').as('m').select('p', 'm').by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，标记为'm'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('keyword').as('p').out().as('m').select('p', 'm').by('name').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，标记为'p'，沿out方向遍历，标记为'm'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('genre').as('p').out().as('m').select('p', 'm').by('name')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'p'，沿out方向遍历，标记为'm'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('keyword').as('p')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，标记为'p'"
    },
    {
      "query": "g.V().hasLabel('keyword').as('p').out().as('m')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，标记为'p'，沿out方向遍历，标记为'm'"
    },
    {
      "query": "g.V().hasLabel('keyword').as('p').out().as('m').select('p', 'm')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，标记为'p'，沿out方向遍历，标记为'm'，选择标记的元素多个标记"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').sample(2).as('m').select('p', 'm').by('name').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，随机采样 2 个结果，标记为'm'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('produce').as('m').select('p', 'm')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'生产'边out方向遍历，标记为'm'，选择标记的元素多个标记"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').as('m').select('p', 'm').by('name').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，标记为'm'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').sample(2).as('m').select('p', 'm')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，随机采样 2 个结果，标记为'm'，选择标记的元素多个标记"
    },
    {
      "query": "g.V().hasLabel('keyword').as('p').out().as('m').select('p', 'm').by('name')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，标记为'p'，沿out方向遍历，标记为'm'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('produce').as('m')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'生产'边out方向遍历，标记为'm'"
    },
    {
      "query": "g.V().hasLabel('person').repeat(__.out()).times(2).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点重复遍历重复2次，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').range(1, 10).repeat(__.out()).range(1, 10).times(2)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，取范围内的结果重复遍历，取范围内的结果重复2次"
    },
    {
      "query": "g.V().hasLabel('user').repeat(__.out()).times(2).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点重复遍历重复2次，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('keyword').repeat(__.out()).times(2).dedup().order()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点重复遍历重复2次，并对结果进行去重，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('keyword').repeat(__.out()).times(2).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点重复遍历重复2次，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').range(1, 10).repeat(__.out()).range(1, 10).times(2).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，取范围内的结果重复遍历，取范围内的结果重复2次，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').range(1, 10).repeat(__.out()).times(2)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，取范围内的结果重复遍历重复2次"
    },
    {
      "query": "g.V().hasLabel('person').range(1, 10).repeat(__.out()).times(2).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，取范围内的结果重复遍历重复2次，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').range(1, 10).repeat(__.out())",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，取范围内的结果重复遍历"
    },
    {
      "query": "g.V().hasLabel('person').union(__.in('rate'), __.in('directed')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('keyword').dedup().union(__.in('acted_in'), __.in('directed')).sample(10).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，并对结果进行去重联合多个遍历，随机采样 10 个结果，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').union(__.in('acted_in'), __.in('acted_in')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('keyword').union(__.in('acted_in'), __.in('acted_in')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('movie').union(__.in('acted_in'), __.in('directed')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('keyword').dedup().union(__.in('rate'), __.in('acted_in')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，并对结果进行去重联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('genre').union(__.in('acted_in'), __.in('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('movie').union(__.in('rate'), __.in('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('movie').union(__.in('rate'), __.in('directed')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').union(__.in('rate'), __.in('acted_in')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('keyword').dedup().union(__.in('acted_in'), __.in('directed')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，并对结果进行去重联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('user').union(__.in('acted_in'), __.in('acted_in')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('genre').union(__.in('rate'), __.in('directed'))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('movie').union(__.in('acted_in'), __.in('directed'))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('user').union(__.in('acted_in'), __.in('acted_in')).dedup().sample(5)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点联合多个遍历，并对结果进行去重，随机采样 5 个结果"
    },
    {
      "query": "g.V().hasLabel('keyword').union(__.in('rate'), __.in('directed'))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('genre').union(__.in('rate'), __.in('directed')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('user').union(__.in('acted_in'), __.in('directed')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').union(__.in('acted_in'), __.in('directed')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('keyword').dedup().union(__.in('rate'), __.in('directed')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，并对结果进行去重联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('user').union(__.in('acted_in'), __.in('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('genre').union(__.in('rate'), __.in('acted_in')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('movie').union(__.in('acted_in'), __.in('directed')).dedup().order()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点联合多个遍历，并对结果进行去重，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('keyword').union(__.in('acted_in'), __.in('directed'))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('person').union(__.in('rate'), __.in('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('genre').union(__.in('rate'), __.in('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('user').union(__.in('acted_in'), __.in('directed'))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('user').union(__.in('rate'), __.in('acted_in')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').union(__.in('acted_in'), __.in('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('keyword').dedup().union(__.in('acted_in'), __.in('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，并对结果进行去重联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('movie').union(__.in('acted_in'), __.in('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('user').union(__.in('rate'), __.in('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('keyword').union(__.in('rate'), __.in('directed')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('movie').union(__.in('acted_in'), __.in('acted_in')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('movie').union(__.in('rate'), __.in('acted_in')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('keyword').union(__.in('acted_in'), __.in('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('user').union(__.in('rate'), __.in('directed')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('genre').union(__.in('acted_in'), __.in('directed'))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('genre').union(__.in('acted_in'), __.in('directed')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('keyword').dedup().union(__.in('rate'), __.in('directed'))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，并对结果进行去重联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('person').union(__.in('acted_in'), __.in('directed'))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('genre').union(__.in('acted_in'), __.in('acted_in')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('keyword').union(__.in('acted_in'), __.in('directed')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('keyword').union(__.in('rate'), __.in('acted_in')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('keyword').dedup().union(__.in('rate'), __.in('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，并对结果进行去重联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('person').union(__.in('rate'), __.in('directed')).dedup().limit(100)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历，并对结果进行去重，取前 100 条数据"
    },
    {
      "query": "g.V().hasLabel('keyword').union(__.in('acted_in'), __.in('directed')).dedup().order()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点联合多个遍历，并对结果进行去重，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('keyword').dedup().union(__.in('acted_in'), __.in('acted_in')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，并对结果进行去重联合多个遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('keyword').dedup().union(__.in('acted_in'), __.in('directed'))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，并对结果进行去重联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('user').union(__.in('rate'), __.in('directed'))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('movie').union(__.in('rate'), __.in('directed'))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('person').union(__.in('rate'), __.in('directed'))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('keyword').union(__.in('rate'), __.in('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('keyword').choose(__.has('born', P.gt(1970)), __.out('acted_in'), __.out('directed'))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点条件分支（if-then-else）"
    },
    {
      "query": "g.V().hasLabel('user').choose(__.has('born', P.gt(1970)), __.out('acted_in'), __.out('directed')).order()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点条件分支（if-then-else），然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('keyword').choose(__.has('born', P.gt(1970)), __.out('acted_in'), __.out('directed')).range(0, 10)",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点条件分支（if-then-else），取范围内的结果"
    },
    {
      "query": "g.V().hasLabel('movie').choose(__.has('born', P.gt(1970)), __.out('acted_in'), __.out('directed'))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点条件分支（if-then-else）"
    },
    {
      "query": "g.V().hasLabel('genre').choose(__.has('born', P.gt(1970)), __.out('acted_in'), __.out('directed'))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点条件分支（if-then-else）"
    },
    {
      "query": "g.V().hasLabel('user').choose(__.has('born', P.gt(1970)), __.out('acted_in'), __.out('directed'))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点条件分支（if-then-else）"
    },
    {
      "query": "g.V().hasLabel('person').choose(__.has('born', P.gt(1970)), __.out('acted_in'), __.out('directed'))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点条件分支（if-then-else）"
    },
    {
      "query": "g.V().hasLabel('person').choose(__.has('born', P.gt(1970)), __.out('acted_in'), __.out('directed')).sample(10)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点条件分支（if-then-else），随机采样 10 个结果"
    },
    {
      "query": "g.V().hasLabel('movie').coalesce(__.out('acted_in'), __.out('directed'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('user').coalesce(__.out('acted_in'), __.out('acted_in'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('keyword').coalesce(__.out('acted_in'), __.out('directed'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('genre').coalesce(__.out('acted_in'), __.out('directed'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('person').coalesce(__.out('acted_in'), __.out('acted_in'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('keyword').coalesce(__.out('rate'), __.out('acted_in'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('movie').coalesce(__.out('rate'), __.out('acted_in'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('genre').coalesce(__.out('rate'), __.out('directed'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('user').coalesce(__.out('rate'), __.out('directed'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('person').coalesce(__.out('rate'), __.out('directed'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('user').coalesce(__.out('acted_in'), __.out('acted_in'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('genre').coalesce(__.out('rate'), __.out('acted_in'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('genre').coalesce(__.out('rate'), __.out('directed'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('movie').coalesce(__.out('acted_in'), __.out('acted_in'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('user').coalesce(__.out('acted_in'), __.out('directed'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('person').coalesce(__.out('acted_in'), __.out('acted_in'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('keyword').coalesce(__.out('rate'), __.out('directed'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('movie').coalesce(__.out('rate'), __.out('directed'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('person').coalesce(__.out('rate'), __.out('directed'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('genre').coalesce(__.out('rate'), __.out('directed'), __.out('produce')).order()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点合并遍历（返回第一个非空结果），然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('keyword').coalesce(__.out('acted_in'), __.out('acted_in'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('movie').coalesce(__.out('rate'), __.out('directed'), __.out('acted_in')).limit(100)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点合并遍历（返回第一个非空结果），并限制最多返回 100 个结果"
    },
    {
      "query": "g.V().hasLabel('person').values(\"poster_image\", \"born\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，提取 '海报图片、出生年份' 字段的值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('keyword').values(\"title\", \"duration\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，然后获取它们的 '标题、持续时间' 属性值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('person').values(\"title\", \"duration\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，提取 '标题、持续时间' 字段的值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"tagline\", \"rated\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，提取 '标签、打分' 字段的值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"title\", \"duration\")",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后获取它们的 '标题、持续时间' 属性值"
    },
    {
      "query": "g.V().hasLabel('person').values(\"id\", \"poster_image\").fold().limit(3)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，然后获取它们的 'id、海报图片' 属性值，折叠为列表，并限制最多返回 3 个结果"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"tagline\", \"summary\")",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后获取它们的 '标签、总结' 属性值"
    },
    {
      "query": "g.V().hasLabel('person').values(\"title\", \"duration\")",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，提取 '标题、持续时间' 字段的值"
    },
    {
      "query": "g.V().hasLabel('person').values(\"poster_image\", \"born\")",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，提取 '海报图片、出生年份' 字段的值"
    },
    {
      "query": "g.V().hasLabel('person').values(\"id\", \"poster_image\")",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，然后获取它们的 'id、海报图片' 属性值"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"tagline\", \"rated\")",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，提取 '标签、打分' 字段的值"
    },
    {
      "query": "g.V().hasLabel('genre').values(\"title\", \"duration\")",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，然后获取它们的 '标题、持续时间' 属性值"
    },
    {
      "query": "g.V().hasLabel('user').values(\"title\", \"duration\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，然后获取它们的 '标题、持续时间' 属性值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"tagline\", \"summary\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后获取它们的 '标签、总结' 属性值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('person').values(\"poster_image\", \"name\")",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，然后获取它们的 '海报图片、名字' 属性值"
    },
    {
      "query": "g.V().hasLabel('keyword').values(\"title\", \"duration\")",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，然后获取它们的 '标题、持续时间' 属性值"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"title\", \"duration\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后获取它们的 '标题、持续时间' 属性值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"rated\", \"tagline\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后获取它们的 '评价、标签' 属性值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"rated\", \"tagline\")",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后获取它们的 '评价、标签' 属性值"
    },
    {
      "query": "g.V().hasLabel('user').values(\"title\", \"duration\")",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，然后获取它们的 '标题、持续时间' 属性值"
    },
    {
      "query": "g.V().hasLabel('person').values(\"id\", \"poster_image\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，然后获取它们的 'id、海报图片' 属性值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('genre').values(\"title\", \"duration\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，然后获取它们的 '标题、持续时间' 属性值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('person').values(\"poster_image\", \"name\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，然后获取它们的 '海报图片、名字' 属性值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').path().by('name').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').limit(5).out('has_genre').path().by('name').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，取前 5 条数据，沿'has_genre'边out方向遍历，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').path().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').path().by('name').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').limit(5).out('has_genre').path()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，取前 5 条数据，沿'has_genre'边out方向遍历，然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('person').out('write').path().by('name').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').limit(5).out('has_keyword').path()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，取前 5 条数据，沿'has_keyword'边out方向遍历，然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('person').out('write').path().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').limit(5).out('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，取前 5 条数据，沿'has_genre'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').path().by('name').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').path().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').path().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').path().by('name').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').limit(5).out('has_genre').sample(2).path()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，取前 5 条数据，沿'has_genre'边out方向遍历，随机采样 2 个结果，然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('movie').limit(5).out('has_genre').sample(2).path().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，取前 5 条数据，沿'has_genre'边out方向遍历，随机采样 2 个结果，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').limit(5).out('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，取前 5 条数据，沿'has_keyword'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').path().by('name').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').limit(5).out('has_genre').path().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，取前 5 条数据，沿'has_genre'边out方向遍历，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').path().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').path().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').limit(5).out('has_keyword').path().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，取前 5 条数据，沿'has_keyword'边out方向遍历，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').limit(5).out('has_genre').sample(2).path().by('name').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，取前 5 条数据，沿'has_genre'边out方向遍历，随机采样 2 个结果，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').limit(5).out('has_keyword').path().by('name').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，取前 5 条数据，沿'has_keyword'边out方向遍历，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').aggregate('movies').out('has_genre').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'has_genre'边out方向遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').aggregate('movies').out('rate')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'打分'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').aggregate('movies').out('has_keyword').dedup().where(P.within(['movies'])).sample(3)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'has_keyword'边out方向遍历，并对结果进行去重，条件过滤（within），随机采样 3 个结果"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').aggregate('movies').out('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'has_keyword'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').aggregate('movies')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').aggregate('movies')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').aggregate('movies').out('is_friend').dedup().where(P.within(['movies']))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'是朋友关系'边out方向遍历，并对结果进行去重，条件过滤（within）"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').aggregate('movies').out('has_keyword').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'has_keyword'边out方向遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').aggregate('movies').out('has_keyword').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'has_keyword'边out方向遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').aggregate('movies').out('has_keyword').dedup().where(P.within(['movies']))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'has_keyword'边out方向遍历，并对结果进行去重，条件过滤（within）"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').aggregate('movies').out('has_genre').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'has_genre'边out方向遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').aggregate('movies').out('rate').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'打分'边out方向遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').aggregate('movies').out('has_keyword').dedup().where(P.within(['movies']))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'has_keyword'边out方向遍历，并对结果进行去重，条件过滤（within）"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').aggregate('movies').out('has_genre').dedup().where(P.within(['movies']))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'has_genre'边out方向遍历，并对结果进行去重，条件过滤（within）"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').aggregate('movies')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').aggregate('movies').out('is_friend')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'是朋友关系'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').aggregate('movies').out('has_keyword').dedup().where(P.within(['movies']))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'has_keyword'边out方向遍历，并对结果进行去重，条件过滤（within）"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').aggregate('movies')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').aggregate('movies').out('rate').dedup().dedup().where(P.within(['movies']))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'打分'边out方向遍历，并对结果进行去重，并对结果进行去重，条件过滤（within）"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').aggregate('movies').out('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'has_genre'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').aggregate('movies').out('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'has_genre'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').aggregate('movies').out('has_genre').dedup().where(P.within(['movies']))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'has_genre'边out方向遍历，并对结果进行去重，条件过滤（within）"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').aggregate('movies').out('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'has_genre'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').aggregate('movies').out('has_genre').dedup().where(P.within(['movies']))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'has_genre'边out方向遍历，并对结果进行去重，条件过滤（within）"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').aggregate('movies').out('is_friend').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'是朋友关系'边out方向遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').aggregate('movies').out('rate').dedup().dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'打分'边out方向遍历，并对结果进行去重，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').aggregate('movies').out('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'has_keyword'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').aggregate('movies').out('has_keyword').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'has_keyword'边out方向遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').aggregate('movies').out('has_genre').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'has_genre'边out方向遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').aggregate('movies').out('rate').dedup().where(P.within(['movies']))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'打分'边out方向遍历，并对结果进行去重，条件过滤（within）"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').aggregate('movies').out('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，将它们聚合到名为 'movies' 的侧边变量中，沿'has_keyword'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').outE('acted_in')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边outE方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').outE('is_friend')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边outE方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').outE('rate')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边outE方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').outE('produce')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边outE方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').outE('write')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边outE方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').outE('directed')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边outE方向遍历"
    },
    {
      "query": "g.V().hasLabel('genre').outE()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，沿outE方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').outE('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边outE方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').outE('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边outE方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').inE('acted_in').values(\"role\").mean()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'参演'边inE方向遍历，提取 'role' 字段的值，求平均值"
    },
    {
      "query": "g.V().hasLabel('movie').inE('rate').values(\"stars\").mean()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'打分'边inE方向遍历，提取 'stars' 字段的值，求平均值"
    },
    {
      "query": "g.V().hasLabel('movie').inE('rate')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'打分'边inE方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').inE('is_friend')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边inE方向遍历"
    },
    {
      "query": "g.V().hasLabel('keyword').inE('has_keyword').values()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿'has_keyword'边inE方向遍历，提取属性值"
    },
    {
      "query": "g.V().hasLabel('keyword').inE('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿'has_keyword'边inE方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').inE('is_friend').values().mean()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边inE方向遍历，提取属性值，求平均值"
    },
    {
      "query": "g.V().hasLabel('user').inE('is_friend').values()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边inE方向遍历，提取属性值"
    },
    {
      "query": "g.V().hasLabel('movie').inE('acted_in')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'参演'边inE方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').inE('write').values()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'写'边inE方向遍历，提取属性值"
    },
    {
      "query": "g.V().hasLabel('movie').inE('rate').values(\"stars\")",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'打分'边inE方向遍历，提取 'stars' 字段的值"
    },
    {
      "query": "g.V().hasLabel('movie').inE('write').values().mean()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'写'边inE方向遍历，提取属性值，求平均值"
    },
    {
      "query": "g.V().hasLabel('movie').inE('write')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'写'边inE方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').inE('acted_in').values(\"role\")",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'参演'边inE方向遍历，提取 'role' 字段的值"
    },
    {
      "query": "g.V().hasLabel('keyword').inE('has_keyword').values().mean()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿'has_keyword'边inE方向遍历，提取属性值，求平均值"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').in('write').where(P.neq(person)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'写'边in方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('keyword').out().in().where(P.neq(person)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿out方向遍历，沿in方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('write').in('rate').where(P.neq(person)).dedup().sample(3)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，沿'打分'边in方向遍历，条件过滤（neq），并对结果进行去重，随机采样 3 个结果"
    },
    {
      "query": "g.V().hasLabel('person').out('write').in('acted_in').where(P.neq(person))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，沿'参演'边in方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('write').where(P.neq(person)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'写'边in方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').in('rate').where(P.neq(person)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，沿'打分'边in方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('produce').where(P.neq(person)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'生产'边in方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('rate').where(P.neq(person)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'打分'边in方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('produce').where(P.neq(person))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'生产'边in方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('acted_in').where(P.neq(person))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'参演'边in方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').in('acted_in').where(P.neq(person)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'参演'边in方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').in('rate').where(P.neq(person))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，沿'打分'边in方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('acted_in').where(P.neq(person)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'参演'边in方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('write').where(P.neq(person)).dedup().limit(117)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'写'边in方向遍历，条件过滤（neq），并对结果进行去重，取前 117 条数据"
    },
    {
      "query": "g.V().hasLabel('person').out('write').in('acted_in').where(P.neq(person)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，沿'参演'边in方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').in('directed').where(P.neq(person)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'导演'边in方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').in('directed').where(P.neq(person)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，沿'导演'边in方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('write').where(P.neq(person))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'写'边in方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').in('produce').where(P.neq(person)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，沿'生产'边in方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('write').in('rate').where(P.neq(person)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，沿'打分'边in方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('write').in('write').where(P.neq(person)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，沿'写'边in方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('rate').where(P.neq(person))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'打分'边in方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').in('directed').where(P.neq(person))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，沿'导演'边in方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').in('directed').where(P.neq(person)).dedup().sample(3)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，沿'导演'边in方向遍历，条件过滤（neq），并对结果进行去重，随机采样 3 个结果"
    },
    {
      "query": "g.V().hasLabel('person').out('write').in('rate').where(P.neq(person))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，沿'打分'边in方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').in('write').where(P.neq(person))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'写'边in方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('keyword').out().in().where(P.neq(person))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿out方向遍历，沿in方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').in('acted_in').where(P.neq(person))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，沿'参演'边in方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').in('directed').where(P.neq(person))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'导演'边in方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').in('acted_in').where(P.neq(person)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，沿'参演'边in方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('write').in('write').where(P.neq(person))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，沿'写'边in方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').in('acted_in').where(P.neq(person))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'参演'边in方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('acted_in').where(P.neq(person)).order().dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'参演'边in方向遍历，条件过滤（neq），然后对结果进行排序，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').in('produce').where(P.neq(person))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，沿'生产'边in方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('person').as('m').order().in().out().where(P.neq(m)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'm'，然后对结果进行排序，沿in方向遍历，沿out方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').as('m')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'm'"
    },
    {
      "query": "g.V().hasLabel('genre').as('m').in('has_genre').out('has_keyword').where(P.neq(m))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'm'，沿'has_genre'边in方向遍历，沿'has_keyword'边out方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('produce').out('acted_in').where(P.neq(m))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'生产'边in方向遍历，沿'参演'边out方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('produce').out('write').where(P.neq(m)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'生产'边in方向遍历，沿'写'边out方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').as('m').in().out().where(P.neq(m))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'm'，沿in方向遍历，沿out方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('person').as('m').order().in().out()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'm'，然后对结果进行排序，沿in方向遍历，沿out方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('acted_in').out('acted_in').where(P.neq(m)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'参演'边in方向遍历，沿'参演'边out方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('acted_in').out('directed').where(P.neq(m))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'参演'边in方向遍历，沿'导演'边out方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('genre').as('m').in('has_genre').out('has_genre').where(P.neq(m))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'm'，沿'has_genre'边in方向遍历，沿'has_genre'边out方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('produce').out('write').where(P.neq(m))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'生产'边in方向遍历，沿'写'边out方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('produce').out('write')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'生产'边in方向遍历，沿'写'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('genre').as('m').in('has_genre').out('has_genre').where(P.neq(m)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'm'，沿'has_genre'边in方向遍历，沿'has_genre'边out方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('produce').out('acted_in')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'生产'边in方向遍历，沿'参演'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('genre').as('m')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'm'"
    },
    {
      "query": "g.V().hasLabel('person').as('m').in()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'm'，沿in方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').as('m')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('produce').out('acted_in').where(P.neq(m)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'生产'边in方向遍历，沿'参演'边out方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('genre').as('m').in('has_genre').out('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'm'，沿'has_genre'边in方向遍历，沿'has_genre'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('acted_in')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'参演'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').as('m').in().out().where(P.neq(m)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'm'，沿in方向遍历，沿out方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').as('m').in().out()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'm'，沿in方向遍历，沿out方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('acted_in').out('acted_in')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'参演'边in方向遍历，沿'参演'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('genre').as('m').in('has_genre').out('has_keyword').where(P.neq(m)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'm'，沿'has_genre'边in方向遍历，沿'has_keyword'边out方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('acted_in').out('directed').where(P.neq(m)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'参演'边in方向遍历，沿'导演'边out方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('acted_in').out('directed')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'参演'边in方向遍历，沿'导演'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('genre').as('m').in('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'm'，沿'has_genre'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('acted_in').out('acted_in').where(P.neq(m))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'参演'边in方向遍历，沿'参演'边out方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('person').as('m').order().in().out().where(P.neq(m))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'm'，然后对结果进行排序，沿in方向遍历，沿out方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('produce')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'生产'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').as('m').order().in()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'm'，然后对结果进行排序，沿in方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('produce').out('write').where(P.neq(m)).dedup().order()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'生产'边in方向遍历，沿'写'边out方向遍历，条件过滤（neq），并对结果进行去重，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('genre').as('m').in('has_genre').out('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'm'，沿'has_genre'边in方向遍历，沿'has_keyword'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('write').in('rate').groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，沿'打分'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('directed').in('write')",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'写'边in方向遍历"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('acted_in').in('write')",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'写'边in方向遍历"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('acted_in').in('directed')",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'导演'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').dedup().out('directed').in('write').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，并对结果进行去重，沿'导演'边out方向遍历，沿'写'边in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('person').out('write').in('rate').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，沿'打分'边in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('acted_in').in('write').groupCount()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'写'边in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('directed').in('write').groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'写'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('directed')",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'导演'边out方向遍历"
    },
    {
      "query": "g.V().dedup().hasLabel('genre').out()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'流派'类型的顶点，沿out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').dedup().out('acted_in').in('rate').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，并对结果进行去重，沿'参演'边out方向遍历，沿'打分'边in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('person').out('write').in('rate').groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，沿'打分'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('directed').groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'导演'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('acted_in')",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'参演'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').dedup().out('write').in('produce').groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，并对结果进行去重，沿'写'边out方向遍历，沿'出版'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('genre').out().in().groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，沿out方向遍历，沿in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('person').dedup().out('directed')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，并对结果进行去重，沿'导演'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('produce').groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'出版'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').dedup().out('directed').in('write').groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，并对结果进行去重，沿'导演'边out方向遍历，沿'写'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('genre').out().in().groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，沿out方向遍历，沿in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('acted_in').in('write').groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'写'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().dedup().hasLabel('genre').out().in().groupCount().by('name')",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'流派'类型的顶点，沿out方向遍历，沿in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('directed').in('write').groupCount().by('name')",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'写'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().dedup().hasLabel('genre').out().in().groupCount()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'流派'类型的顶点，沿out方向遍历，沿in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('person').dedup().out('acted_in').in('rate').groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，并对结果进行去重，沿'参演'边out方向遍历，沿'打分'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('produce').in('directed')",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'生产'边out方向遍历，沿'导演'边in方向遍历"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('produce').in('directed').groupCount().by('name')",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'生产'边out方向遍历，沿'导演'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').dedup().out('write')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，并对结果进行去重，沿'写'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('directed').groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'导演'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('acted_in').in('directed').groupCount()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'导演'边in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('produce')",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'生产'边out方向遍历"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('produce').in('directed').groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'生产'边out方向遍历，沿'导演'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('genre').out().in().groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，沿out方向遍历，沿in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('genre').out().in().groupCount().by('name').order().limit(30)",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，沿out方向遍历，沿in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序，并限制最多返回 30 个结果"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('directed').in('rate').groupCount()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'打分'边in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('directed').in('rate').groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'打分'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').dedup().out('write').in('produce')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，并对结果进行去重，沿'写'边out方向遍历，沿'出版'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').dedup().out('directed').in('write')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，并对结果进行去重，沿'导演'边out方向遍历，沿'写'边in方向遍历"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('produce').in('directed').groupCount()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'生产'边out方向遍历，沿'导演'边in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('produce').groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'出版'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('acted_in').in('write').groupCount().by('name')",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'写'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').dedup().out('acted_in')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，并对结果进行去重，沿'参演'边out方向遍历"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('acted_in').in('directed').groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'导演'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('directed').in('rate')",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'打分'边in方向遍历"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('acted_in').in('directed').groupCount().by('name')",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'导演'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('directed').in('write').groupCount()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'写'边in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().dedup().hasLabel('person').out('directed').in('rate').groupCount().by('name')",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'打分'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().dedup().hasLabel('genre').out().in()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'流派'类型的顶点，沿out方向遍历，沿in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').dedup().out('write').in('produce').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，并对结果进行去重，沿'写'边out方向遍历，沿'出版'边in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('person').dedup().out('directed').in('write').groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，并对结果进行去重，沿'导演'边out方向遍历，沿'写'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().dedup().hasLabel('genre').out().in().groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，并对结果进行去重，过滤出'流派'类型的顶点，沿out方向遍历，沿in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').dedup().out('write').in('produce').groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，并对结果进行去重，沿'写'边out方向遍历，沿'出版'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('produce').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'出版'边in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('directed').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'导演'边in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('person').dedup().out('acted_in').in('rate')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，并对结果进行去重，沿'参演'边out方向遍历，沿'打分'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').dedup().out('acted_in').in('rate').groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，并对结果进行去重，沿'参演'边out方向遍历，沿'打分'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').out('write').simplePath().limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，过滤出简单路径，取前 10 条数据"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').simplePath().limit(10).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，过滤出简单路径，取前 10 条数据，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').simplePath().limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，过滤出简单路径，并限制最多返回 10 个结果"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').simplePath().limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，过滤出简单路径，取前 10 条数据"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').simplePath().limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，过滤出简单路径，取前 10 条数据"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').simplePath().limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，过滤出简单路径，并限制最多返回 10 个结果"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').simplePath().limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，过滤出简单路径，取前 10 条数据"
    },
    {
      "query": "g.V().hasLabel('person').repeat(__.out()).until(__.hasLabel('genre')).path()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点重复遍历终止条件（遍历），然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('genre').repeat(__.out()).until(__.hasLabel('person')).path()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点重复遍历终止条件（遍历），然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('genre').repeat(__.out()).until(__.hasLabel('person'))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点重复遍历终止条件（遍历）"
    },
    {
      "query": "g.V().hasLabel('user').repeat(__.out()).until(__.hasLabel('genre')).path()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点重复遍历终止条件（遍历），然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('person').repeat(__.out()).until(__.hasLabel('person'))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点重复遍历终止条件（遍历）"
    },
    {
      "query": "g.V().hasLabel('person').repeat(__.out()).until(__.hasLabel('person')).path()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点重复遍历终止条件（遍历），然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('user').repeat(__.out()).until(__.hasLabel('person'))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点重复遍历终止条件（遍历）"
    },
    {
      "query": "g.V().hasLabel('keyword').repeat(__.out()).until(__.hasLabel('genre')).limit(20).path()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点重复遍历终止条件（遍历），并限制最多返回 20 个结果，然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('user').repeat(__.out()).until(__.hasLabel('person')).path()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点重复遍历终止条件（遍历），然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('genre').repeat(__.out()).until(__.hasLabel('genre'))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点重复遍历终止条件（遍历）"
    },
    {
      "query": "g.V().hasLabel('genre').repeat(__.out()).until(__.hasLabel('genre')).path()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点重复遍历终止条件（遍历），然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('person').repeat(__.out()).until(__.hasLabel('genre'))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点重复遍历终止条件（遍历）"
    },
    {
      "query": "g.V().hasLabel('user').repeat(__.out()).until(__.hasLabel('genre'))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点重复遍历终止条件（遍历）"
    },
    {
      "query": "g.V().hasLabel('keyword').repeat(__.out()).until(__.hasLabel('person'))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点重复遍历终止条件（遍历）"
    },
    {
      "query": "g.V().hasLabel('keyword').repeat(__.out()).until(__.hasLabel('person')).path()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点重复遍历终止条件（遍历），然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('keyword').repeat(__.out()).until(__.hasLabel('genre'))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点重复遍历终止条件（遍历）"
    },
    {
      "query": "g.V().hasLabel('keyword').repeat(__.out()).until(__.hasLabel('genre')).path()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点重复遍历终止条件（遍历），然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('movie').emit()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点发射中间结果"
    },
    {
      "query": "g.V().hasLabel('movie').emit().repeat(__.out()).times(3)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点发射中间结果重复遍历重复3次"
    },
    {
      "query": "g.V().hasLabel('genre').emit().repeat(__.out())",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点发射中间结果重复遍历"
    },
    {
      "query": "g.V().hasLabel('person').emit().repeat(__.out()).times(3).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点发射中间结果重复遍历重复3次，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('genre').emit().repeat(__.out()).times(3).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点发射中间结果重复遍历重复3次，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('movie').emit().repeat(__.out()).times(3).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点发射中间结果重复遍历重复3次，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').emit()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点发射中间结果"
    },
    {
      "query": "g.V().hasLabel('genre').emit()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点发射中间结果"
    },
    {
      "query": "g.V().hasLabel('genre').emit().repeat(__.out()).times(3).dedup().limit(5)",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点发射中间结果重复遍历重复3次，并对结果进行去重，并限制最多返回 5 个结果"
    },
    {
      "query": "g.V().hasLabel('movie').emit().repeat(__.out())",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点发射中间结果重复遍历"
    },
    {
      "query": "g.V().hasLabel('person').emit().repeat(__.out()).times(3)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点发射中间结果重复遍历重复3次"
    },
    {
      "query": "g.V().hasLabel('person').emit().repeat(__.out())",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点发射中间结果重复遍历"
    },
    {
      "query": "g.V().hasLabel('genre').emit().repeat(__.out()).times(3)",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点发射中间结果重复遍历重复3次"
    },
    {
      "query": "g.V().hasLabel('genre').project('title', 'actors', 'genres')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点投影字段"
    },
    {
      "query": "g.V().hasLabel('keyword').project('title', 'actors', 'genres').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点投影字段，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('keyword').project('title', 'actors', 'genres')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点投影字段"
    },
    {
      "query": "g.V().hasLabel('movie').project('title', 'actors', 'genres')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点投影字段"
    },
    {
      "query": "g.V().hasLabel('movie').project('title', 'actors', 'genres').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点投影字段，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('genre').project('title', 'actors', 'genres').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点投影字段，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').optional(__.out('acted_in').has('title', 'The Matrix'))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点可选遍历"
    },
    {
      "query": "g.V().hasLabel('user').optional(__.out('acted_in').has('title', 'The Matrix'))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点可选遍历"
    },
    {
      "query": "g.V().hasLabel('person').optional(__.out('acted_in').has('title', 'The Matrix'))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点可选遍历"
    },
    {
      "query": "g.V().hasLabel('genre').optional(__.out('acted_in').has('title', 'The Matrix'))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点可选遍历"
    },
    {
      "query": "g.V().hasLabel('movie').optional(__.out('acted_in').has('title', 'The Matrix')).order()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点可选遍历，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('keyword').optional(__.out('acted_in').has('title', 'The Matrix'))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点可选遍历"
    },
    {
      "query": "g.V().hasLabel('genre').order().optional(__.out('acted_in').has('title', 'The Matrix'))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，然后对结果进行排序可选遍历"
    },
    {
      "query": "g.V().hasLabel('movie').flatMap(__.union(out('acted_in')))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点扁平映射"
    },
    {
      "query": "g.V().hasLabel('user').dedup().flatMap(__.union(out('directed')))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，并对结果进行去重扁平映射"
    },
    {
      "query": "g.V().hasLabel('user').dedup().flatMap(__.union(out('directed'))).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，并对结果进行去重扁平映射，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('keyword').flatMap(__.union(out('acted_in')))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点扁平映射"
    },
    {
      "query": "g.V().hasLabel('person').flatMap(__.union(out('acted_in'))).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点扁平映射，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('genre').flatMap(__.union(out('acted_in'))).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点扁平映射，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('user').flatMap(__.union(out('acted_in'))).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点扁平映射，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('movie').flatMap(__.union(out('acted_in'))).dedup().range(33, 120)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点扁平映射，并对结果进行去重，取范围内的结果"
    },
    {
      "query": "g.V().hasLabel('person').flatMap(__.union(out('acted_in')))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点扁平映射"
    },
    {
      "query": "g.V().hasLabel('movie').flatMap(__.union(out('acted_in'))).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点扁平映射，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('genre').flatMap(__.union(out('acted_in')))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点扁平映射"
    },
    {
      "query": "g.V().hasLabel('keyword').flatMap(__.union(out('acted_in'))).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点扁平映射，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('keyword').flatMap(__.union(out('acted_in'))).dedup().limit(178)",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点扁平映射，并对结果进行去重，取前 178 条数据"
    },
    {
      "query": "g.V().hasLabel('user').flatMap(__.union(out('acted_in')))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点扁平映射"
    },
    {
      "query": "g.V().hasLabel('keyword').map(__.union(in('acted_in')).dedup().count())",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点映射"
    },
    {
      "query": "g.V().hasLabel('movie').map(__.union(in('acted_in')).dedup().count())",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点映射"
    },
    {
      "query": "g.V().hasLabel('person').map(__.union(in('acted_in')).dedup().count())",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点映射"
    },
    {
      "query": "g.V().hasLabel('genre').map(__.union(in('acted_in')).dedup().count())",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点映射"
    },
    {
      "query": "g.V().hasLabel('user').map(__.union(in('acted_in')).dedup().count())",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点映射"
    },
    {
      "query": "g.V().hasLabel('person').sideEffect(properties().drop())",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，执行附加操作"
    },
    {
      "query": "g.V().hasLabel('person').sideEffect(properties().drop()).out('acted_in')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，执行附加操作，沿'参演'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('keyword').sideEffect(properties().drop())",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，执行附加操作"
    },
    {
      "query": "g.V().hasLabel('person').sideEffect(properties().drop()).out('write').sample(2)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，执行附加操作，沿'写'边out方向遍历，随机采样 2 个结果"
    },
    {
      "query": "g.V().hasLabel('user').sideEffect(properties().drop())",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，执行附加操作"
    },
    {
      "query": "g.V().hasLabel('movie').sideEffect(properties().drop())",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，执行附加操作"
    },
    {
      "query": "g.V().hasLabel('genre').sideEffect(properties().drop()).out()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，执行附加操作，沿out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').sideEffect(properties().drop()).out('produce')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，执行附加操作，沿'生产'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').sideEffect(properties().drop()).out('write')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，执行附加操作，沿'写'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').sideEffect(properties().drop()).out('directed')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，执行附加操作，沿'导演'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('genre').sideEffect(properties().drop())",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，执行附加操作"
    },
    {
      "query": "g.V().hasLabel('keyword').sideEffect(properties().drop()).out()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，执行附加操作，沿out方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').sideEffect(properties().drop()).out('has_genre').range(5, 20)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，执行附加操作，沿'has_genre'边out方向遍历，取范围内的结果"
    },
    {
      "query": "g.V().hasLabel('user').sideEffect(properties().drop()).out('is_friend')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，执行附加操作，沿'是朋友关系'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').sideEffect(properties().drop()).out('rate')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，执行附加操作，沿'打分'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').sideEffect(properties().drop()).out('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，执行附加操作，沿'has_keyword'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').sideEffect(properties().drop()).out('directed').sample(5)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，执行附加操作，沿'导演'边out方向遍历，随机采样 5 个结果"
    },
    {
      "query": "g.V().hasLabel('movie').sideEffect(properties().drop()).out('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，执行附加操作，沿'has_genre'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').tree().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历构建树结构，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').tree().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历构建树结构，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').tree().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历构建树结构，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('write').tree().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历构建树结构，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').tree().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历构建树结构，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').tree().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历构建树结构，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('keyword').out().tree().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿out方向遍历构建树结构，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').where(__.and(has('duration', P.gt(100))))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，条件过滤（嵌套遍历）"
    },
    {
      "query": "g.V().hasLabel('keyword').where(__.and(has('duration', P.gt(100))))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，条件过滤（嵌套遍历）"
    },
    {
      "query": "g.V().hasLabel('genre').where(__.and(has('duration', P.gt(100))))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，条件过滤（嵌套遍历）"
    },
    {
      "query": "g.V().hasLabel('user').where(__.and(has('duration', P.gt(100))))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，条件过滤（嵌套遍历）"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').as('m').out('has_keyword').as('g').select('p', 'm', 'g').by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，标记为'm'，沿'has_keyword'边out方向遍历，标记为'g'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('directed').as('m').out('has_keyword').as('g').select('p', 'm', 'g').by('name').by('title').by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'导演'边out方向遍历，标记为'm'，沿'has_keyword'边out方向遍历，标记为'g'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('genre').as('p').out().as('m').out().as('g').select('p', 'm', 'g').by('name').by('title').by('name')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'p'，沿out方向遍历，标记为'm'，沿out方向遍历，标记为'g'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('directed').as('m').out('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'导演'边out方向遍历，标记为'm'，沿'has_keyword'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('directed').as('m').out('has_keyword').as('g').select('p', 'm', 'g').by('name').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'导演'边out方向遍历，标记为'm'，沿'has_keyword'边out方向遍历，标记为'g'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('genre').as('p').out().as('m').out().as('g').select('p', 'm', 'g').by('name').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'p'，沿out方向遍历，标记为'm'，沿out方向遍历，标记为'g'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').as('m').out('has_genre').as('g').select('p', 'm', 'g').by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，标记为'm'，沿'has_genre'边out方向遍历，标记为'g'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('directed').as('m').out('has_keyword').as('g').select('p', 'm', 'g')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'导演'边out方向遍历，标记为'm'，沿'has_keyword'边out方向遍历，标记为'g'，选择标记的元素多个标记"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').as('m').out('has_keyword').as('g').select('p', 'm', 'g').by('name').by('title').by('name').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，标记为'm'，沿'has_keyword'边out方向遍历，标记为'g'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').as('m').out('has_keyword').as('g').select('p', 'm', 'g')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，标记为'm'，沿'has_keyword'边out方向遍历，标记为'g'，选择标记的元素多个标记"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').as('m').out('has_genre').as('g').select('p', 'm', 'g')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，标记为'm'，沿'has_genre'边out方向遍历，标记为'g'，选择标记的元素多个标记"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').as('m').out('has_genre').as('g').select('p', 'm', 'g').by('name').by('title').by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，标记为'm'，沿'has_genre'边out方向遍历，标记为'g'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('directed').as('m').out('has_genre').as('g').select('p', 'm', 'g').by('name').by('title').by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'导演'边out方向遍历，标记为'm'，沿'has_genre'边out方向遍历，标记为'g'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('directed').as('m').out('has_keyword').as('g').select('p', 'm', 'g').by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'导演'边out方向遍历，标记为'm'，沿'has_keyword'边out方向遍历，标记为'g'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').as('m').out('has_genre').as('g').select('p', 'm', 'g').by('name').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，标记为'm'，沿'has_genre'边out方向遍历，标记为'g'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('directed').as('m').out('has_genre').as('g')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'导演'边out方向遍历，标记为'm'，沿'has_genre'边out方向遍历，标记为'g'"
    },
    {
      "query": "g.V().hasLabel('genre').as('p').out().as('m').out().as('g')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'p'，沿out方向遍历，标记为'm'，沿out方向遍历，标记为'g'"
    },
    {
      "query": "g.V().hasLabel('genre').as('p').out().as('m').out().as('g').select('p', 'm', 'g')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'p'，沿out方向遍历，标记为'm'，沿out方向遍历，标记为'g'，选择标记的元素多个标记"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('directed').as('m')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'导演'边out方向遍历，标记为'm'"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('directed').as('m').out('has_keyword').as('g')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'导演'边out方向遍历，标记为'm'，沿'has_keyword'边out方向遍历，标记为'g'"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('directed').as('m').out('has_genre').as('g').select('p', 'm', 'g')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'导演'边out方向遍历，标记为'm'，沿'has_genre'边out方向遍历，标记为'g'，选择标记的元素多个标记"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').as('m').out('has_genre').as('g')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，标记为'm'，沿'has_genre'边out方向遍历，标记为'g'"
    },
    {
      "query": "g.V().hasLabel('genre').as('p').out().as('m').out()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'p'，沿out方向遍历，标记为'm'，沿out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').as('m').out('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，标记为'm'，沿'has_keyword'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('directed').as('m').out('has_genre').as('g').select('p', 'm', 'g').by('name').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'导演'边out方向遍历，标记为'm'，沿'has_genre'边out方向遍历，标记为'g'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').as('m').out('has_keyword').as('g').select('p', 'm', 'g').by('name').by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，标记为'm'，沿'has_keyword'边out方向遍历，标记为'g'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').as('m').out('has_keyword').as('g').select('p', 'm', 'g').by('name').by('title').by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，标记为'm'，沿'has_keyword'边out方向遍历，标记为'g'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').as('m').out('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，标记为'm'，沿'has_genre'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('acted_in').as('m').out('has_keyword').as('g')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'参演'边out方向遍历，标记为'm'，沿'has_keyword'边out方向遍历，标记为'g'"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('directed').as('m').out('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'导演'边out方向遍历，标记为'm'，沿'has_genre'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('directed').as('m').out('has_genre').as('g').select('p', 'm', 'g').by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'导演'边out方向遍历，标记为'm'，沿'has_genre'边out方向遍历，标记为'g'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('genre').as('p').out().as('m').out().as('g').select('p', 'm', 'g').by('name')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'p'，沿out方向遍历，标记为'm'，沿out方向遍历，标记为'g'，选择标记的元素多个标记，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').as('p').out('directed')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，标记为'p'，沿'导演'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').groupCount().by('title').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').out('write').groupCount().by('title').order().limit(5)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序，取前 5 条数据"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').groupCount().by('title').order()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').groupCount().by('title').order()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').groupCount().by('title').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').groupCount().by('title').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('person').out('write').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').groupCount().by('title').order().dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('write').groupCount().by('title').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').out('write').groupCount().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').groupCount().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').groupCount().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').groupCount().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').groupCount().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').groupCount().by('title').order().dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').groupCount().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').in('acted_in').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'参演'边in方向遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('keyword').in('has_keyword').dedup().groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿'has_keyword'边in方向遍历，并对结果进行去重，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').in('write').dedup().groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'写'边in方向遍历，并对结果进行去重，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('keyword').in('has_keyword').dedup().groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿'has_keyword'边in方向遍历，并对结果进行去重，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('keyword').in('has_keyword').dedup().groupCount().by('name').order().limit(20)",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿'has_keyword'边in方向遍历，并对结果进行去重，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序，取前 20 条数据"
    },
    {
      "query": "g.V().hasLabel('user').in('is_friend').dedup().groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边in方向遍历，并对结果进行去重，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').in('write').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'写'边in方向遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('movie').in('write').dedup().groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'写'边in方向遍历，并对结果进行去重，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('user').in('is_friend').dedup().groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边in方向遍历，并对结果进行去重，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('movie').in('acted_in').dedup().groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'参演'边in方向遍历，并对结果进行去重，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('movie').in('acted_in').dedup().groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'参演'边in方向遍历，并对结果进行去重，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('keyword').in('has_keyword').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿'has_keyword'边in方向遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('keyword').in('has_keyword').dedup().groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿'has_keyword'边in方向遍历，并对结果进行去重，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('movie').in('acted_in').dedup().groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'参演'边in方向遍历，并对结果进行去重，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('user').in('is_friend').dedup().groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边in方向遍历，并对结果进行去重，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('movie').in('write').dedup().groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'写'边in方向遍历，并对结果进行去重，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('user').in('is_friend').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边in方向遍历，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('user').repeat(__.out()).emit().times(3).dedup().path().by('label')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点重复遍历发射中间结果重复3次，并对结果进行去重，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('user').repeat(__.out()).emit().times(3)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点重复遍历发射中间结果重复3次"
    },
    {
      "query": "g.V().hasLabel('person').repeat(__.out()).emit().times(3).dedup().path().by('label')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点重复遍历发射中间结果重复3次，并对结果进行去重，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').repeat(__.out()).emit().range(27, 116).times(3).dedup().path()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点重复遍历发射中间结果，取范围内的结果重复3次，并对结果进行去重，然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('person').repeat(__.out()).emit().times(3)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点重复遍历发射中间结果重复3次"
    },
    {
      "query": "g.V().hasLabel('person').repeat(__.out()).emit().range(27, 116).times(3).dedup().path().by('label')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点重复遍历发射中间结果，取范围内的结果重复3次，并对结果进行去重，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').repeat(__.out()).emit().times(3).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点重复遍历发射中间结果重复3次，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').repeat(__.out()).emit().range(27, 116).times(3).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点重复遍历发射中间结果，取范围内的结果重复3次，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').repeat(__.out()).emit().range(27, 116).times(3)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点重复遍历发射中间结果，取范围内的结果重复3次"
    },
    {
      "query": "g.V().hasLabel('person').repeat(__.out()).emit()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点重复遍历发射中间结果"
    },
    {
      "query": "g.V().hasLabel('user').repeat(__.out()).emit().times(3).dedup().path()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点重复遍历发射中间结果重复3次，并对结果进行去重，然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('user').repeat(__.out()).emit()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点重复遍历发射中间结果"
    },
    {
      "query": "g.V().hasLabel('user').repeat(__.out()).emit().times(3).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点重复遍历发射中间结果重复3次，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').repeat(__.out()).emit().times(3).dedup().path()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点重复遍历发射中间结果重复3次，并对结果进行去重，然后返回完整的遍历路径"
    },
    {
      "query": "g.V().hasLabel('genre').union(__.out('rate'), __.out('directed'), __.out('produce')).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点联合多个遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('movie').union(__.out('rate'), __.out('acted_in'), __.out('acted_in')).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点联合多个遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('genre').union(__.out('rate'), __.out('directed'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('genre').union(__.out('acted_in'), __.out('directed'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('movie').union(__.out('rate'), __.out('directed'), __.out('acted_in')).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点联合多个遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('movie').union(__.out('rate'), __.out('directed'), __.out('produce')).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点联合多个遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('person').union(__.out('rate'), __.out('directed'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('movie').union(__.out('rate'), __.out('acted_in'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('genre').union(__.out('acted_in'), __.out('acted_in'), __.out('acted_in')).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点联合多个遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('person').union(__.out('rate'), __.out('directed'), __.out('produce')).groupCount().by('label')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').union(__.out('rate'), __.out('directed'), __.out('acted_in')).groupCount().by('label')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点联合多个遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').union(__.out('rate'), __.out('directed'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('person').union(__.out('acted_in'), __.out('acted_in'), __.out('produce')).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('person').union(__.out('acted_in'), __.out('directed'), __.out('acted_in')).groupCount().by('label')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('genre').union(__.out('rate'), __.out('directed'), __.out('produce')).groupCount().by('label').order()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点联合多个遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').union(__.out('rate'), __.out('directed'), __.out('produce')).groupCount().by('label').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历，分组并统计数量，通过 '{}' 来进行分组或投影，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('genre').union(__.out('acted_in'), __.out('acted_in'), __.out('acted_in')).groupCount().by('label')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点联合多个遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').union(__.out('rate'), __.out('directed'), __.out('acted_in')).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('movie').union(__.out('acted_in'), __.out('directed'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('genre').union(__.out('rate'), __.out('acted_in'), __.out('produce')).groupCount().by('label')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点联合多个遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('genre').union(__.out('rate'), __.out('acted_in'), __.out('produce')).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点联合多个遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('genre').union(__.out('rate'), __.out('directed'), __.out('produce')).groupCount().by('label')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点联合多个遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').union(__.out('acted_in'), __.out('directed'), __.out('produce')).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点联合多个遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('person').union(__.out('acted_in'), __.out('acted_in'), __.out('produce')).groupCount().by('label')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').union(__.out('acted_in'), __.out('directed'), __.out('acted_in')).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('movie').union(__.out('rate'), __.out('directed'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('person').union(__.out('rate'), __.out('directed'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('person').union(__.out('rate'), __.out('directed'), __.out('acted_in')).groupCount().by('label')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').union(__.out('rate'), __.out('directed'), __.out('produce')).groupCount().by('label')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点联合多个遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('genre').union(__.out('acted_in'), __.out('directed'), __.out('produce')).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点联合多个遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('person').union(__.out('acted_in'), __.out('directed'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('genre').union(__.out('rate'), __.out('acted_in'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('movie').union(__.out('acted_in'), __.out('directed'), __.out('produce')).groupCount().by('label')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点联合多个遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').union(__.out('acted_in'), __.out('acted_in'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('genre').union(__.out('acted_in'), __.out('acted_in'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点联合多个遍历"
    },
    {
      "query": "g.V().hasLabel('person').union(__.out('rate'), __.out('directed'), __.out('produce')).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点联合多个遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('genre').union(__.out('acted_in'), __.out('directed'), __.out('produce')).groupCount().by('label')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点联合多个遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').union(__.out('rate'), __.out('acted_in'), __.out('acted_in')).groupCount().by('label')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点联合多个遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').coalesce(__.out('acted_in').has('title', 'The Matrix'), __.out('directed'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('user').coalesce(__.out('acted_in').has('title', 'The Matrix'), __.out('acted_in'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('user').coalesce(__.out('rate').has('title', 'The Matrix'), __.out('directed'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('movie').coalesce(__.out('rate').has('title', 'The Matrix'), __.out('directed'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('genre').coalesce(__.out('acted_in').has('title', 'The Matrix'), __.out('directed'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('keyword').coalesce(__.out('acted_in').has('title', 'The Matrix'), __.out('acted_in'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('genre').coalesce(__.out('acted_in').has('title', 'The Matrix'), __.out('acted_in'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('keyword').coalesce(__.out('rate').has('title', 'The Matrix'), __.out('acted_in'), __.out('produce')).sample(35)",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点合并遍历（返回第一个非空结果），随机采样 35 个结果"
    },
    {
      "query": "g.V().hasLabel('movie').coalesce(__.out('acted_in').has('title', 'The Matrix'), __.out('directed'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('keyword').coalesce(__.out('rate').has('title', 'The Matrix'), __.out('acted_in'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('user').coalesce(__.out('acted_in').has('title', 'The Matrix'), __.out('directed'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('movie').coalesce(__.out('acted_in').has('title', 'The Matrix'), __.out('acted_in'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('genre').coalesce(__.out('rate').has('title', 'The Matrix'), __.out('directed'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('movie').coalesce(__.out('acted_in').has('title', 'The Matrix'), __.out('acted_in'), __.out('acted_in')).limit(50)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点合并遍历（返回第一个非空结果），并限制最多返回 50 个结果"
    },
    {
      "query": "g.V().hasLabel('user').coalesce(__.out('acted_in').has('title', 'The Matrix'), __.out('acted_in'), __.out('acted_in')).limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点合并遍历（返回第一个非空结果），取前 10 条数据"
    },
    {
      "query": "g.V().hasLabel('movie').coalesce(__.out('acted_in').has('title', 'The Matrix'), __.out('acted_in'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('user').coalesce(__.out('rate').has('title', 'The Matrix'), __.out('acted_in'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('person').coalesce(__.out('acted_in').has('title', 'The Matrix'), __.out('acted_in'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('keyword').coalesce(__.out('acted_in').has('title', 'The Matrix'), __.out('directed'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('person').coalesce(__.out('acted_in').has('title', 'The Matrix'), __.out('directed'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('person').coalesce(__.out('acted_in').has('title', 'The Matrix'), __.out('acted_in'), __.out('acted_in')).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点合并遍历（返回第一个非空结果），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('keyword').coalesce(__.out('rate').has('title', 'The Matrix'), __.out('directed'), __.out('produce'))",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('genre').coalesce(__.out('acted_in').has('title', 'The Matrix'), __.out('acted_in'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('genre').coalesce(__.out('acted_in').has('title', 'The Matrix'), __.out('acted_in'), __.out('produce')).limit(20)",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点合并遍历（返回第一个非空结果），并限制最多返回 20 个结果"
    },
    {
      "query": "g.V().hasLabel('person').coalesce(__.out('acted_in').has('title', 'The Matrix'), __.out('acted_in'), __.out('acted_in'))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点合并遍历（返回第一个非空结果）"
    },
    {
      "query": "g.V().hasLabel('person').values(\"title\", \"duration\", \"rated\")",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，然后获取它们的 '标题、持续时间、评分' 属性值"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"title\", \"duration\", \"rated\")",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，提取 '标题、持续时间、评价' 字段的值"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"title\", \"duration\", \"rated\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，提取 '标题、持续时间、评价' 字段的值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('person').values(\"title\", \"duration\", \"rated\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，然后获取它们的 '标题、持续时间、评分' 属性值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"poster_image\", \"tagline\", \"id\")",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，提取 '海报图片、标签、id' 字段的值"
    },
    {
      "query": "g.V().hasLabel('keyword').values(\"title\", \"duration\", \"rated\")",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，提取 '标题、持续时间、评价' 字段的值"
    },
    {
      "query": "g.V().hasLabel('keyword').values(\"title\", \"duration\", \"rated\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，提取 '标题、持续时间、评价' 字段的值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('genre').values(\"title\", \"duration\", \"rated\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，然后获取它们的 '标题、持续时间、评价' 属性值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('person').values(\"born\", \"poster_image\", \"id\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，提取 '出生年份、海报图片、id' 字段的值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('user').order().values(\"title\", \"duration\", \"rated\")",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，然后对结果进行排序，提取 '标题、持续时间、评价' 字段的值"
    },
    {
      "query": "g.V().hasLabel('user').values(\"title\", \"duration\", \"rated\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，然后获取它们的 '标题、持续时间、评价' 属性值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"id\", \"tagline\", \"summary\")",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后获取它们的 'id、标签、总结' 属性值"
    },
    {
      "query": "g.V().hasLabel('person').values(\"born\", \"name\", \"id\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，然后获取它们的 '出生年份、名、id' 属性值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"poster_image\", \"tagline\", \"id\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，提取 '海报图片、标签、id' 字段的值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('person').values(\"born\", \"poster_image\", \"id\")",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，提取 '出生年份、海报图片、id' 字段的值"
    },
    {
      "query": "g.V().hasLabel('person').values(\"name\", \"poster_image\", \"born\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，提取 '名、海报图片、出生年份' 字段的值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('genre').values(\"title\", \"duration\", \"rated\")",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，然后获取它们的 '标题、持续时间、评价' 属性值"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"id\", \"tagline\", \"summary\").fold().dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后获取它们的 'id、标签、总结' 属性值，折叠为列表，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('user').values(\"title\", \"duration\", \"rated\")",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，然后获取它们的 '标题、持续时间、评价' 属性值"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"poster_image\", \"summary\", \"tagline\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后获取它们的 '海报图片、总结、标签' 属性值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('person').values(\"name\", \"poster_image\", \"born\")",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，提取 '名、海报图片、出生年份' 字段的值"
    },
    {
      "query": "g.V().hasLabel('person').values(\"name\", \"poster_image\", \"born\").fold().dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，提取 '名、海报图片、出生年份' 字段的值，折叠为列表，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').values(\"born\", \"name\", \"id\")",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，然后获取它们的 '出生年份、名、id' 属性值"
    },
    {
      "query": "g.V().hasLabel('user').order().values(\"title\", \"duration\", \"rated\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，然后对结果进行排序，提取 '标题、持续时间、评价' 字段的值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"poster_image\", \"summary\", \"tagline\")",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后获取它们的 '海报图片、总结、标签' 属性值"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"poster_image\", \"tagline\", \"id\").dedup().fold()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，提取 '海报图片、标签、id' 字段的值，并对结果进行去重，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('movie').values(\"id\", \"tagline\", \"summary\").fold()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，然后获取它们的 'id、标签、总结' 属性值，折叠为列表"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').path().by('name').by('title').limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影，并限制最多返回 10 个结果"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').path().by('name').by('title').limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影，并限制最多返回 10 个结果"
    },
    {
      "query": "g.V().hasLabel('person').out('write').path().by('name').by('title').limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影，取前 10 条数据"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').path().by('name').by('title').limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影，取前 10 条数据"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').path().by('name').by('title').limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，然后返回完整的遍历路径，通过 '{}' 来进行分组或投影，通过 '{}' 来进行分组或投影，取前 10 条数据"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').aggregate('all').out('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_keyword'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('write').aggregate('all').out('has_keyword').where(P.within(['all']))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_keyword'边out方向遍历，条件过滤（within）"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').aggregate('all').out('is_friend')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'是朋友关系'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').aggregate('all').out('is_friend').where(P.within(['all'])).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'是朋友关系'边out方向遍历，条件过滤（within），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').aggregate('all').out('has_genre').where(P.within(['all'])).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_genre'边out方向遍历，条件过滤（within），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').aggregate('all').out('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_genre'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').aggregate('all').out('has_keyword').where(P.within(['all']))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_keyword'边out方向遍历，条件过滤（within）"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').aggregate('all').out('has_keyword').where(P.within(['all']))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_keyword'边out方向遍历，条件过滤（within）"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').aggregate('all').out('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_keyword'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').aggregate('all').out('has_genre').where(P.within(['all']))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_genre'边out方向遍历，条件过滤（within）"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').aggregate('all').out('has_genre').where(P.within(['all'])).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_genre'边out方向遍历，条件过滤（within），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').aggregate('all').out('has_genre').where(P.within(['all']))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_genre'边out方向遍历，条件过滤（within）"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').aggregate('all').out('rate').where(P.within(['all'])).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'打分'边out方向遍历，条件过滤（within），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('write').aggregate('all').out('has_genre').where(P.within(['all'])).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_genre'边out方向遍历，条件过滤（within），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').aggregate('all').out()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('write').aggregate('all').out('has_keyword').where(P.within(['all'])).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_keyword'边out方向遍历，条件过滤（within），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').aggregate('all')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').aggregate('all')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').aggregate('all').out('has_keyword').where(P.within(['all'])).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_keyword'边out方向遍历，条件过滤（within），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').aggregate('all')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').aggregate('all').out().where(P.within(['all']))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿out方向遍历，条件过滤（within）"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').aggregate('all').out('has_keyword').where(P.within(['all'])).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_keyword'边out方向遍历，条件过滤（within），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').aggregate('all').out('is_friend').where(P.within(['all']))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'是朋友关系'边out方向遍历，条件过滤（within）"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').aggregate('all')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').aggregate('all').out('has_genre').where(P.within(['all'])).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_genre'边out方向遍历，条件过滤（within），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').aggregate('all').out().where(P.within(['all'])).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿out方向遍历，条件过滤（within），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('write').aggregate('all').out('has_genre').where(P.within(['all']))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_genre'边out方向遍历，条件过滤（within）"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').aggregate('all').out('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_keyword'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('write').aggregate('all').out('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_keyword'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('write').aggregate('all')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').aggregate('all')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').aggregate('all')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中"
    },
    {
      "query": "g.V().hasLabel('person').out('write').aggregate('all').out('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_genre'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').aggregate('all').out().where(P.within(['all']))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿out方向遍历，条件过滤（within）"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').aggregate('all').out().where(P.within(['all'])).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿out方向遍历，条件过滤（within），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').aggregate('all').out('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_genre'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').aggregate('all').out('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_genre'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').aggregate('all').out()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿out方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').aggregate('all').out('rate')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'打分'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').aggregate('all').out('rate').where(P.within(['all']))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'打分'边out方向遍历，条件过滤（within）"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').aggregate('all').out('has_genre').where(P.within(['all']))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_genre'边out方向遍历，条件过滤（within）"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').aggregate('all').out('has_keyword').where(P.within(['all'])).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_keyword'边out方向遍历，条件过滤（within），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').aggregate('all').out('has_keyword').where(P.within(['all']))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'出版'边out方向遍历，将它们聚合到名为 'all' 的侧边变量中，沿'has_keyword'边out方向遍历，条件过滤（within）"
    },
    {
      "query": "g.V().hasLabel('keyword').outE()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿outE方向遍历"
    },
    {
      "query": "g.V().limit(100).hasLabel('person').outE('directed')",
      "description": "从图中开始查找所有顶点，取前 100 条数据，过滤出'人'类型的顶点，沿'导演'边outE方向遍历"
    },
    {
      "query": "g.V().limit(100).hasLabel('user').outE('rate')",
      "description": "从图中开始查找所有顶点，取前 100 条数据，过滤出'用户'类型的顶点，沿'打分'边outE方向遍历"
    },
    {
      "query": "g.V().limit(100).hasLabel('person')",
      "description": "从图中开始查找所有顶点，取前 100 条数据，过滤出'人'类型的顶点"
    },
    {
      "query": "g.V().limit(100).hasLabel('person').outE('produce')",
      "description": "从图中开始查找所有顶点，取前 100 条数据，过滤出'人'类型的顶点，沿'出版'边outE方向遍历"
    },
    {
      "query": "g.V().limit(100).hasLabel('keyword')",
      "description": "从图中开始查找所有顶点，取前 100 条数据，过滤出'关键字'类型的顶点"
    },
    {
      "query": "g.V().limit(100).hasLabel('user').outE('is_friend')",
      "description": "从图中开始查找所有顶点，取前 100 条数据，过滤出'用户'类型的顶点，沿'是朋友关系'边outE方向遍历"
    },
    {
      "query": "g.V().limit(100).hasLabel('person').outE('acted_in')",
      "description": "从图中开始查找所有顶点，取前 100 条数据，过滤出'人'类型的顶点，沿'参演'边outE方向遍历"
    },
    {
      "query": "g.V().limit(100).hasLabel('user')",
      "description": "从图中开始查找所有顶点，取前 100 条数据，过滤出'用户'类型的顶点"
    },
    {
      "query": "g.V().limit(100).hasLabel('person').outE('write')",
      "description": "从图中开始查找所有顶点，取前 100 条数据，过滤出'人'类型的顶点，沿'写'边outE方向遍历"
    },
    {
      "query": "g.V().limit(100).hasLabel('keyword').outE()",
      "description": "从图中开始查找所有顶点，取前 100 条数据，过滤出'关键字'类型的顶点，沿outE方向遍历"
    },
    {
      "query": "g.V().hasLabel('genre').inE('has_genre').group()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，沿'has_genre'边inE方向遍历，然后根据 '{}' 进行分组"
    },
    {
      "query": "g.V().hasLabel('movie').inE('write').group()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'写'边inE方向遍历，然后根据 '{}' 进行分组"
    },
    {
      "query": "g.V().hasLabel('movie').inE('directed')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'导演'边inE方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').inE('directed').group()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'导演'边inE方向遍历，然后根据 '{}' 进行分组"
    },
    {
      "query": "g.V().hasLabel('genre').inE('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，沿'has_genre'边inE方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').inE('rate').group()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'打分'边inE方向遍历，然后根据 '{}' 进行分组"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').in('has_genre').where(P.neq(person)).dedup().limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，沿'has_genre'边in方向遍历，条件过滤（neq），并对结果进行去重，并限制最多返回 10 个结果"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('produce').where(P.neq(person)).dedup().limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'生产'边in方向遍历，条件过滤（neq），并对结果进行去重，并限制最多返回 10 个结果"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').in('has_keyword').where(P.neq(person)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，沿'has_keyword'边in方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('acted_in').where(P.neq(person)).limit(199).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'参演'边in方向遍历，条件过滤（neq），并限制最多返回 199 个结果，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').in('has_genre').where(P.neq(person))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，沿'has_genre'边in方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').in('has_keyword').where(P.neq(person)).dedup().limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，沿'has_keyword'边in方向遍历，条件过滤（neq），并对结果进行去重，并限制最多返回 10 个结果"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('acted_in').where(P.neq(person)).dedup().limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'参演'边in方向遍历，条件过滤（neq），并对结果进行去重，并限制最多返回 10 个结果"
    },
    {
      "query": "g.V().hasLabel('person').out('write').in('acted_in').where(P.neq(person)).dedup().limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，沿'参演'边in方向遍历，条件过滤（neq），并对结果进行去重，取前 10 条数据"
    },
    {
      "query": "g.V().hasLabel('person').out('write').in('directed').where(P.neq(person)).dedup().limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，沿'导演'边in方向遍历，条件过滤（neq），并对结果进行去重，并限制最多返回 10 个结果"
    },
    {
      "query": "g.V().hasLabel('person').out('write').in('directed').where(P.neq(person)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，沿'导演'边in方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_keyword').in('has_keyword').where(P.neq(person))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_keyword'边out方向遍历，沿'has_keyword'边in方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('person').out('write').in('directed').where(P.neq(person))",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，沿'导演'边in方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('movie').out('has_genre').in('has_genre').where(P.neq(person)).dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，沿'has_genre'边out方向遍历，沿'has_genre'边in方向遍历，条件过滤（neq），并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('write').in('directed').where(P.neq(person)).dedup().limit(10).sample(1)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'写'边out方向遍历，沿'导演'边in方向遍历，条件过滤（neq），并对结果进行去重，并限制最多返回 10 个结果，随机采样 1 个结果"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('acted_in').where(P.neq(person)).limit(199).dedup().limit(10)",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'参演'边in方向遍历，条件过滤（neq），并限制最多返回 199 个结果，并对结果进行去重，并限制最多返回 10 个结果"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('rate').out('rate')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'打分'边in方向遍历，沿'打分'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('genre').dedup().as('m').in('has_genre').out('has_genre').where(P.neq(m))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，并对结果进行去重，标记为'm'，沿'has_genre'边in方向遍历，沿'has_genre'边out方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('user').as('m').in('is_friend').out('rate').where(P.neq(m)).groupCount().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，标记为'm'，沿'是朋友关系'边in方向遍历，沿'打分'边out方向遍历，条件过滤（neq），分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('genre').dedup().as('m').in('has_genre').out('has_keyword').where(P.neq(m)).groupCount().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，并对结果进行去重，标记为'm'，沿'has_genre'边in方向遍历，沿'has_keyword'边out方向遍历，条件过滤（neq），分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('rate').out('rate').where(P.neq(m)).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'打分'边in方向遍历，沿'打分'边out方向遍历，条件过滤（neq），分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('write').out('acted_in').where(P.neq(m)).groupCount().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'写'边in方向遍历，沿'参演'边out方向遍历，条件过滤（neq），分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('user').as('m').in('is_friend').out('is_friend').where(P.neq(m)).range(14, 100).groupCount().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，标记为'm'，沿'是朋友关系'边in方向遍历，沿'是朋友关系'边out方向遍历，条件过滤（neq），取范围内的结果，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('acted_in').out('directed').where(P.neq(m)).groupCount().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'参演'边in方向遍历，沿'导演'边out方向遍历，条件过滤（neq），分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('write').out('write').where(P.neq(m))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'写'边in方向遍历，沿'写'边out方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('user').as('m').in('is_friend').out('is_friend').where(P.neq(m)).range(14, 100).groupCount().by('title').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，标记为'm'，沿'是朋友关系'边in方向遍历，沿'是朋友关系'边out方向遍历，条件过滤（neq），取范围内的结果，分组并统计数量，通过 '{}' 来进行分组或投影，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('rate')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'打分'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('genre').dedup().as('m').in('has_genre').out('has_genre').where(P.neq(m)).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，并对结果进行去重，标记为'm'，沿'has_genre'边in方向遍历，沿'has_genre'边out方向遍历，条件过滤（neq），分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('genre').as('m').in('has_genre').out('has_genre').where(P.neq(m)).groupCount().by('title').limit(39)",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'm'，沿'has_genre'边in方向遍历，沿'has_genre'边out方向遍历，条件过滤（neq），分组并统计数量，通过 '{}' 来进行分组或投影，并限制最多返回 39 个结果"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('acted_in').out('acted_in').where(P.neq(m)).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'参演'边in方向遍历，沿'参演'边out方向遍历，条件过滤（neq），分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('write').out('produce').where(P.neq(m)).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'写'边in方向遍历，沿'出版'边out方向遍历，条件过滤（neq），分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('user').as('m')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，标记为'm'"
    },
    {
      "query": "g.V().hasLabel('genre').dedup().as('m').in('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，并对结果进行去重，标记为'm'，沿'has_genre'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').as('m').in('is_friend').out('rate')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，标记为'm'，沿'是朋友关系'边in方向遍历，沿'打分'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('genre').dedup().as('m').in('has_genre').out('has_keyword').where(P.neq(m)).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，并对结果进行去重，标记为'm'，沿'has_genre'边in方向遍历，沿'has_keyword'边out方向遍历，条件过滤（neq），分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('rate').out('rate').where(P.neq(m))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'打分'边in方向遍历，沿'打分'边out方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('write').out('write').where(P.neq(m)).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'写'边in方向遍历，沿'写'边out方向遍历，条件过滤（neq），分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('user').as('m').in('is_friend').out('is_friend').where(P.neq(m)).range(14, 100).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，标记为'm'，沿'是朋友关系'边in方向遍历，沿'是朋友关系'边out方向遍历，条件过滤（neq），取范围内的结果，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('user').as('m').in('is_friend')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，标记为'm'，沿'是朋友关系'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('rate').out('is_friend').where(P.neq(m)).groupCount().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'打分'边in方向遍历，沿'是朋友关系'边out方向遍历，条件过滤（neq），分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('rate').out('is_friend')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'打分'边in方向遍历，沿'是朋友关系'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('write').out('produce').where(P.neq(m)).groupCount().by('title').dedup()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'写'边in方向遍历，沿'出版'边out方向遍历，条件过滤（neq），分组并统计数量，通过 '{}' 来进行分组或投影，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('rate').out('is_friend').where(P.neq(m)).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'打分'边in方向遍历，沿'是朋友关系'边out方向遍历，条件过滤（neq），分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('write').out('acted_in').where(P.neq(m))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'写'边in方向遍历，沿'参演'边out方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('write').out('produce').where(P.neq(m))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'写'边in方向遍历，沿'出版'边out方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('rate').out('rate').where(P.neq(m)).groupCount().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'打分'边in方向遍历，沿'打分'边out方向遍历，条件过滤（neq），分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('write')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'写'边in方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('write').out('write').where(P.neq(m)).groupCount().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'写'边in方向遍历，沿'写'边out方向遍历，条件过滤（neq），分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('user').as('m').in('is_friend').out('is_friend').where(P.neq(m)).groupCount().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，标记为'm'，沿'是朋友关系'边in方向遍历，沿'是朋友关系'边out方向遍历，条件过滤（neq），分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('user').as('m').in('is_friend').out('is_friend')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，标记为'm'，沿'是朋友关系'边in方向遍历，沿'是朋友关系'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('genre').dedup().as('m').in('has_genre').out('has_keyword').where(P.neq(m))",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，并对结果进行去重，标记为'm'，沿'has_genre'边in方向遍历，沿'has_keyword'边out方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('genre').as('m').in('has_genre').out('has_keyword').where(P.neq(m)).groupCount().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'm'，沿'has_genre'边in方向遍历，沿'has_keyword'边out方向遍历，条件过滤（neq），分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('rate').out('is_friend').where(P.neq(m))",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'打分'边in方向遍历，沿'是朋友关系'边out方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('genre').dedup().as('m').in('has_genre').out('has_genre').where(P.neq(m)).groupCount().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，并对结果进行去重，标记为'm'，沿'has_genre'边in方向遍历，沿'has_genre'边out方向遍历，条件过滤（neq），分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('write').out('acted_in').where(P.neq(m)).groupCount().by('title').limit(94)",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'写'边in方向遍历，沿'参演'边out方向遍历，条件过滤（neq），分组并统计数量，通过 '{}' 来进行分组或投影，取前 94 条数据"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('acted_in').out('acted_in').where(P.neq(m)).groupCount().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'参演'边in方向遍历，沿'参演'边out方向遍历，条件过滤（neq），分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('genre').as('m').in('has_genre').out('has_genre').where(P.neq(m)).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'm'，沿'has_genre'边in方向遍历，沿'has_genre'边out方向遍历，条件过滤（neq），分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('user').as('m').in('is_friend').out('rate').where(P.neq(m))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，标记为'm'，沿'是朋友关系'边in方向遍历，沿'打分'边out方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('user').as('m').in('is_friend').out('is_friend').where(P.neq(m)).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，标记为'm'，沿'是朋友关系'边in方向遍历，沿'是朋友关系'边out方向遍历，条件过滤（neq），分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('user').as('m').in('is_friend').out('is_friend').where(P.neq(m))",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，标记为'm'，沿'是朋友关系'边in方向遍历，沿'是朋友关系'边out方向遍历，条件过滤（neq）"
    },
    {
      "query": "g.V().hasLabel('genre').dedup().as('m').in('has_genre').out('has_genre')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，并对结果进行去重，标记为'm'，沿'has_genre'边in方向遍历，沿'has_genre'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('acted_in').out('directed').where(P.neq(m)).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'参演'边in方向遍历，沿'导演'边out方向遍历，条件过滤（neq），分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('write').out('acted_in')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'写'边in方向遍历，沿'参演'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('write').out('acted_in').where(P.neq(m)).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'写'边in方向遍历，沿'参演'边out方向遍历，条件过滤（neq），分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('write').out('produce').where(P.neq(m)).groupCount().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'写'边in方向遍历，沿'出版'边out方向遍历，条件过滤（neq），分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('genre').dedup().as('m')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，并对结果进行去重，标记为'm'"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('write').out('write')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'写'边in方向遍历，沿'写'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('genre').as('m').in('has_genre').out('has_keyword').where(P.neq(m)).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'm'，沿'has_genre'边in方向遍历，沿'has_keyword'边out方向遍历，条件过滤（neq），分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('genre').as('m').in('has_genre').out('has_genre').where(P.neq(m)).groupCount().by('title')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，标记为'm'，沿'has_genre'边in方向遍历，沿'has_genre'边out方向遍历，条件过滤（neq），分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('movie').as('m').in('write').out('produce')",
      "description": "从图中开始查找所有顶点，过滤出'电影'类型的顶点，标记为'm'，沿'写'边in方向遍历，沿'出版'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').as('m').in('is_friend').out('rate').where(P.neq(m)).groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，标记为'm'，沿'是朋友关系'边in方向遍历，沿'打分'边out方向遍历，条件过滤（neq），分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('genre').dedup().as('m').in('has_genre').out('has_keyword')",
      "description": "从图中开始查找所有顶点，过滤出'流派'类型的顶点，并对结果进行去重，标记为'm'，沿'has_genre'边in方向遍历，沿'has_keyword'边out方向遍历"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').in('acted_in').groupCount().by('name').order().dedup()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，沿'参演'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序，并对结果进行去重"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').in('write').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'写'边in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('rate').groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'打分'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').in('directed').groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，沿'导演'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').in('write').groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'写'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('keyword').out().in().groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿out方向遍历，沿in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').in('is_friend').groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，沿'是朋友关系'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('keyword').out().in().groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿out方向遍历，沿in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').in('acted_in').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，沿'参演'边in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').in('directed').groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，沿'导演'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').in('directed').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，沿'导演'边in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').in('is_friend').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，沿'是朋友关系'边in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').in('acted_in').groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，沿'参演'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('directed').groupCount().limit(3).by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'导演'边in方向遍历，分组并统计数量，并限制最多返回 3 个结果，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').in('directed').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，沿'导演'边in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').in('directed').groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，沿'导演'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('user').out('is_friend').in('is_friend').groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'是朋友关系'边out方向遍历，沿'是朋友关系'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('keyword').out().in().groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'关键字'类型的顶点，沿out方向遍历，沿in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('user').out('rate').in('acted_in').groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'用户'类型的顶点，沿'打分'边out方向遍历，沿'参演'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('directed').groupCount().limit(3).by('name').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'导演'边in方向遍历，分组并统计数量，并限制最多返回 3 个结果，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').out('produce').in('directed').groupCount().by('name')",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'生产'边out方向遍历，沿'导演'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('rate').groupCount()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'打分'边in方向遍历，分组并统计数量"
    },
    {
      "query": "g.V().hasLabel('person').out('acted_in').in('rate').groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'参演'边out方向遍历，沿'打分'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    },
    {
      "query": "g.V().hasLabel('person').out('directed').in('write').groupCount().by('name').order()",
      "description": "从图中开始查找所有顶点，过滤出'人'类型的顶点，沿'导演'边out方向遍历，沿'写'边in方向遍历，分组并统计数量，通过 '{}' 来进行分组或投影，然后对结果进行排序"
    }
  ]
}