gremlin_query
"g.V()"
"g.E()"
"g.V().hasLabel('person')"
"g.V().hasLabel('movie')"
"g.V().hasLabel('user')"
"g.V().hasLabel('genre')"
"g.V().hasLabel('keyword')"
"g.V().has('name', 'Tom Hanks')"
"g.V().has('title', 'The Matrix')"
"g.V().has('born', 1960)"
"g.V().has('duration', 120)"
"g.V().has('stars', 5)"
"g.V().has('name', P.eq('Tom Hanks'))"
"g.V().has('born', P.gt(1960))"
"g.V().has('born', P.lt(1980))"
"g.V().has('born', P.gte(1960))"
"g.V().has('born', P.lte(1980))"
"g.V().has('born', P.between(1960, 1980))"
"g.V().has('born', P.inside(1960, 1980))"
"g.V().has('born', P.outside(1950, 1990))"
"g.V().has('name', P.within('Tom Hanks', 'Keanu Reeves'))"
"g.V().has('name', P.without('Tom Hanks', 'Keanu Reeves'))"
"g.V().has('name', TextP.startingWith('Tom'))"
"g.V().has('name', TextP.endingWith('Hanks'))"
"g.V().has('name', TextP.containing('Tom'))"
"g.V().has('title', TextP.regex('Matrix.*'))"
"g.V().hasLabel('person').has('name', 'Tom Hanks')"
"g.V().hasLabel('movie').has('title', 'The Matrix')"
"g.V().hasLabel('person').has('born', P.gt(1960))"
"g.V().hasId(1)"
"g.V().hasKey('name')"
"g.V().hasValue('Tom Hanks')"
"g.V().out('acted_in')"
"g.V().out('directed')"
"g.V().out('produce')"
"g.V().out('write')"
"g.V().in('acted_in')"
"g.V().in('directed')"
"g.V().both('acted_in')"
"g.V().outE('acted_in')"
"g.V().inE('acted_in')"
"g.V().bothE('acted_in')"
"g.V().outE('acted_in').inV()"
"g.V().inE('acted_in').outV()"
"g.V().bothE('acted_in').bothV()"
"g.V().outE('acted_in').otherV()"
"g.V().hasLabel('person').out('acted_in')"
"g.V().hasLabel('movie').in('acted_in')"
"g.V().hasLabel('person').out('acted_in').has('title', 'The Matrix')"
"g.V().has('name', 'Tom Hanks').out('acted_in')"
"g.V().has('title', 'The Matrix').in('acted_in')"
"g.V().hasLabel('person').out('acted_in').in('has_genre')"
"g.V().limit(10)"
"g.V().skip(5)"
"g.V().tail(10)"
"g.V().sample(5)"
"g.V().range(0, 10)"
"g.V().coin(0.5)"
"g.V().hasLabel('person').limit(10)"
"g.V().out('acted_in').limit(5)"
"g.V().values('name')"
"g.V().values('title')"
"g.V().values('born')"
"g.V().values('name', 'born')"
"g.V().properties('name')"
"g.V().valueMap()"
"g.V().valueMap('name', 'born')"
"g.V().elementMap()"
"g.V().hasLabel('person').values('name')"
"g.V().hasLabel('movie').valueMap()"
"g.V().id()"
"g.V().label()"
"g.V().count()"
"g.V().hasLabel('person').count()"
"g.V().out('acted_in').count()"
"g.V().dedup()"
"g.V().hasLabel('person').dedup()"
"g.V().values('name').dedup()"
"g.V().order()"
"g.V().order().by('name')"
"g.V().order().by('born', desc)"
"g.V().hasLabel('person').order().by('born')"
"g.V().simplePath()"
"g.V().cyclicPath()"
"g.V().hasLabel('person').out('acted_in').simplePath()"
"g.V().group()"
"g.V().group().by('name')"
"g.V().groupCount()"
"g.V().groupCount().by(label)"
"g.V().hasLabel('person').groupCount().by('born')"
"g.V().values('born').sum()"
"g.V().values('born').mean()"
"g.V().values('born').min()"
"g.V().values('born').max()"
"g.V().hasLabel('movie').values('duration').sum()"
"g.V().as('a').out('acted_in').as('b').select('a', 'b')"
"g.V().as('person').out('acted_in').as('movie').select('person')"
"g.V().where(out('acted_in'))"
"g.V().where(__.out('acted_in').count().is(P.gt(5)))"
"g.V().not(out('acted_in'))"
"g.V().and(hasLabel('person'), has('born', P.gt(1960)))"
"g.V().or(hasLabel('person'), hasLabel('movie'))"
"g.V().filter(out('acted_in'))"
"g.V().is('Tom Hanks')"
"g.V().constant('value')"
"g.V().identity()"
"g.V().barrier()"
"g.V().fold()"
"g.V().unfold()"
"g.V().path()"
"g.V().hasLabel('person').out('acted_in').path()"
"g.V().project('name', 'born').by('name').by('born')"
"g.V().hasLabel('person').project('name').by('name')"
"g.V().repeat(out('acted_in')).times(2)"
"g.V().repeat(out('acted_in')).until(hasLabel('genre'))"
"g.V().emit().repeat(out('acted_in')).times(2)"
"g.V().hasLabel('person').repeat(out()).times(2)"
"g.V().choose(hasLabel('person'), out('acted_in'), out('has_genre'))"
"g.V().coalesce(out('acted_in'), out('directed'))"
"g.V().optional(out('acted_in'))"
"g.V().union(out('acted_in'), out('directed'))"
"g.V().local(out('acted_in').limit(1))"
"g.V().flatMap(out('acted_in'))"
"g.V().map(out('acted_in'))"
"g.V().aggregate('x').out('acted_in')"
"g.V().store('x').out('acted_in')"
"g.V().aggregate('x').cap('x')"
"g.V().sideEffect(out('acted_in'))"
"g.V().tree()"
"g.V().hasLabel('person').out('acted_in').tree()"
"g.V().drop()"
"g.V().has('name', 'Test').drop()"
"g.V().iterate()"
"g.V().explain()"
"g.V().profile()"
"g.addV('person')"
"g.addV('person').property('name', 'New Person')"
"g.addV('person').property('name', 'New Person').property('born', 1990)"
"g.addV('movie').property('title', 'New Movie')"
"g.V().has('name', 'Tom Hanks').addE('acted_in').to(V().has('title', 'New Movie'))"
"g.V().has('name', 'Tom Hanks').addE('acted_in').to(V().has('title', 'New Movie')).property('role', 'Actor')"
"g.V().has('name', 'Tom Hanks').property('born', 1960)"
"g.V().has('title', 'The Matrix').property('duration', 136)"
"g.V().hasLabel('person').has('name', 'Tom Hanks').property('born', 1960).property('poster_image', 'url')"
"g.V().match(__.as('a').out('acted_in').as('b'), __.as('b').in('directed').as('c'))"
"g.V().hasLabel('person').out('acted_in').hasLabel('movie').in('has_genre').hasLabel('genre')"
"g.V().hasLabel('person').out('acted_in').dedup().count()"
"g.V().hasLabel('movie').in('acted_in').groupCount().by('name')"
"g.V().hasLabel('person').out('acted_in').order().by('title').limit(10)"
"g.V().hasLabel('person').where(out('acted_in').count().is(P.gt(5)))"
"g.V().hasLabel('person').as('p').out('acted_in').as('m').select('p', 'm').by('name').by('title')"
"g.V().hasLabel('person').repeat(out()).times(2).dedup()"
"g.V().hasLabel('movie').union(in('acted_in'), in('directed')).dedup()"
"g.V().hasLabel('person').choose(has('born', P.gt(1970)), out('acted_in'), out('directed'))"
"g.V().hasLabel('person').coalesce(out('acted_in'), out('directed'), out('produce'))"
"g.V().hasLabel('person').local(out('acted_in').limit(1))"
"g.V().hasLabel('movie').values('title', 'duration').fold()"
"g.V().hasLabel('person').out('acted_in').path().by('name').by('title')"
"g.V().hasLabel('person').out('acted_in').aggregate('movies').out('has_genre').dedup().where(within('movies'))"
"g.V().hasLabel('person').outE('acted_in').has('role', 'Neo').inV()"
"g.V().hasLabel('user').outE('rate').has('stars', P.gte(4)).inV()"
"g.V().hasLabel('movie').inE('rate').values('stars').mean()"
"g.V().hasLabel('person').out('acted_in').in('acted_in').where(neq('person')).dedup()"
"g.V().hasLabel('movie').as('m').in('acted_in').out('acted_in').where(neq('m')).dedup()"
"g.V().hasLabel('person').out('acted_in').in('has_genre').groupCount().by('name').order(local).by(values, desc)"
"g.V().hasLabel('person').filter(out('acted_in').count().is(P.gt(10)))"
"g.V().hasLabel('movie').filter(in('acted_in').count().is(P.gt(5)))"
"g.V().hasLabel('person').and(has('born', P.gt(1960)), out('acted_in').count().is(P.gt(5)))"
"g.V().hasLabel('movie').or(has('duration', P.gt(120)), in('rate').values('stars').mean().is(P.gt(4)))"
"g.V().hasLabel('person').out('acted_in').simplePath().limit(10)"
"g.V().hasLabel('person').repeat(out()).until(hasLabel('genre')).path()"
"g.V().hasLabel('person').emit().repeat(out()).times(3).dedup()"
"g.V().hasLabel('movie').project('title', 'actors', 'genres').by('title').by(in('acted_in').count()).by(out('has_genre').values('name').fold())"
"g.V().hasLabel('person').optional(out('acted_in').has('title', 'The Matrix'))"
"g.V().hasLabel('person').flatMap(union(out('acted_in'), out('directed'), out('produce'))).dedup()"
"g.V().hasLabel('movie').map(union(in('acted_in'), in('directed')).dedup().count())"
"g.V().hasLabel('person').sideEffect(properties().drop()).out('acted_in')"
"g.V().hasLabel('person').out('acted_in').tree().by('name')"
"g.V().hasLabel('person').has('born', P.between(1960, 1980)).out('acted_in').has('duration', P.gt(100)).dedup()"
"g.V().hasLabel('movie').where(and(has('duration', P.gt(100)), in('acted_in').count().is(P.gt(5))))"
"g.V().hasLabel('person').where(or(out('acted_in').count().is(P.gt(10)), out('directed').count().is(P.gt(2))))"
"g.V().hasLabel('person').as('p').out('acted_in').as('m').out('has_genre').as('g').select('p', 'm', 'g').by('name').by('title').by('name')"
"g.V().hasLabel('person').out('acted_in').groupCount().by('title').order(local).by(values, desc).limit(local, 10)"
"g.V().hasLabel('movie').in('acted_in').dedup().groupCount().by('name').order(local).by(values, desc)"
"g.V().hasLabel('person').repeat(out()).emit().times(3).dedup().path().by(label)"
"g.V().hasLabel('person').union(out('acted_in'), out('directed'), out('produce')).groupCount().by(label)"
"g.V().hasLabel('movie').choose(has('duration', P.gt(120)), constant('long'), constant('short'))"
"g.V().hasLabel('person').coalesce(out('acted_in').has('title', 'The Matrix'), out('directed'), out('produce'))"
"g.V().hasLabel('person').local(union(out('acted_in'), out('directed')).dedup().limit(5))"
"g.V().hasLabel('movie').values('title', 'duration', 'rated').fold()"
"g.V().hasLabel('person').out('acted_in').path().by('name').by('title').limit(10)"
"g.V().hasLabel('person').out('acted_in').aggregate('all').out('has_genre').where(within('all')).dedup()"
"g.V().hasLabel('person').outE('acted_in').has('role', TextP.containing('Neo')).inV()"
"g.V().hasLabel('user').outE('rate').has('stars', P.between(4, 5)).inV().dedup()"
"g.V().hasLabel('movie').inE('rate').group().by(inV()).by(values('stars').mean())"
"g.V().hasLabel('person').out('acted_in').in('acted_in').where(neq('person')).dedup().limit(10)"
"g.V().hasLabel('movie').as('m').in('acted_in').out('acted_in').where(neq('m')).groupCount().by('title')"
"g.V().hasLabel('person').out('acted_in').in('has_genre').groupCount().by('name').order(local).by(values, desc).limit(local, 5)"
