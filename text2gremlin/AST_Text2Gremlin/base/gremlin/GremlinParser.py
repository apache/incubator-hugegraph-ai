# Generated from /root/lzj/ospp/Gremlin_Antlr4/Gremlin.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,270,3582,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,1,0,1,0,3,0,611,8,0,1,0,5,0,614,8,0,10,0,
        12,0,617,9,0,1,0,3,0,620,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,3,1,636,8,1,1,1,1,1,1,1,1,1,1,1,5,1,643,8,1,
        10,1,12,1,646,9,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,655,8,3,1,3,1,
        3,1,3,5,3,660,8,3,10,3,12,3,663,9,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,686,
        8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,698,8,5,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,3,6,707,8,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
        1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,730,8,9,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,3,10,748,8,10,1,11,1,11,1,11,1,11,1,11,3,11,755,8,
        11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,3,12,764,8,12,1,12,1,12,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,780,
        8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,792,
        8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,804,
        8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,3,16,819,8,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
        1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,851,8,21,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,863,8,22,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,3,23,896,8,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,
        1,25,1,25,1,25,1,25,5,25,909,8,25,10,25,12,25,912,9,25,1,26,1,26,
        1,26,1,26,3,26,918,8,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        3,28,1058,8,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,1080,8,31,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        3,32,1095,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,3,33,1109,8,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,
        1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,3,37,
        1131,8,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,3,39,1147,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,3,40,1162,8,40,1,41,1,41,1,41,1,41,
        1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,
        1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,3,45,1237,8,45,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1267,8,46,1,47,
        1,47,1,47,1,47,1,47,3,47,1274,8,47,1,47,1,47,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,
        1320,8,48,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,51,
        1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,3,52,1342,8,52,1,52,
        1,52,1,52,1,52,1,52,1,52,1,52,3,52,1351,8,52,1,53,1,53,1,53,1,53,
        1,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,3,56,1375,8,56,1,57,1,57,1,57,1,57,1,58,
        1,58,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,3,59,1398,8,59,1,60,1,60,1,60,1,60,1,60,3,60,1405,
        8,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,1414,8,60,1,61,1,61,
        1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,64,
        1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,
        1456,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1466,8,68,
        1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1478,8,69,
        1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,3,71,1495,8,71,1,72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,
        1517,8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,1527,8,74,
        1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1537,8,75,1,76,1,76,
        1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
        1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
        1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
        1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
        1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1604,
        8,76,1,77,1,77,1,77,1,77,1,77,3,77,1611,8,77,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,3,77,1620,8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
        1,78,1,78,1,78,3,78,1632,8,78,1,78,1,78,3,78,1636,8,78,1,79,1,79,
        1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1648,8,79,1,79,1,79,
        3,79,1652,8,79,1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,
        3,81,1664,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1673,8,81,
        1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,
        1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,
        1,87,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,90,1,90,1,90,
        1,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,1721,8,90,1,91,1,91,1,91,
        1,91,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
        3,93,1739,8,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,3,94,1753,8,94,1,95,1,95,1,95,1,95,1,95,1,96,1,96,1,96,
        1,96,1,96,1,96,1,96,1,96,3,96,1768,8,96,1,97,1,97,1,97,1,97,1,97,
        1,97,1,97,1,97,3,97,1778,8,97,1,98,1,98,1,98,1,98,1,98,1,99,1,99,
        1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,101,1,101,1,101,1,
        101,1,101,1,101,1,101,1,101,3,101,1803,8,101,1,102,1,102,1,102,1,
        102,1,102,1,102,1,102,1,102,3,102,1813,8,102,1,103,1,103,1,103,1,
        103,1,103,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,3,104,1833,8,104,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,1848,
        8,105,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,1858,
        8,106,1,107,1,107,1,107,1,107,1,107,1,108,1,108,1,108,1,108,1,108,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,3,109,1912,
        8,109,1,110,1,110,1,110,1,110,1,110,1,111,1,111,1,111,1,111,1,111,
        1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,1932,8,112,
        1,113,1,113,1,113,1,113,1,114,1,114,1,114,1,114,1,114,1,115,1,115,
        1,115,1,115,1,115,1,116,1,116,1,116,1,116,1,117,1,117,1,117,1,117,
        1,117,1,117,1,117,1,117,3,117,1960,8,117,1,118,1,118,1,118,1,118,
        1,119,1,119,1,119,1,119,1,120,1,120,1,120,1,120,1,120,1,121,1,121,
        1,121,1,121,1,121,1,121,1,121,1,121,3,121,1983,8,121,1,122,1,122,
        1,122,1,122,1,122,3,122,1990,8,122,1,122,1,122,1,123,1,123,1,123,
        1,123,1,123,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
        3,124,2008,8,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,2026,8,124,
        1,124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,2035,8,124,1,125,
        1,125,1,125,1,125,1,125,1,126,1,126,1,126,1,126,1,126,1,126,1,126,
        1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,3,126,2058,
        8,126,1,127,1,127,1,127,1,127,1,128,1,128,1,128,1,128,1,128,1,128,
        1,128,1,128,1,128,1,128,1,128,1,128,3,128,2076,8,128,1,129,1,129,
        1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,
        1,129,1,129,1,129,3,129,2094,8,129,1,130,1,130,1,130,1,130,1,131,
        1,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,2108,8,131,1,132,
        1,132,1,132,1,132,1,132,1,132,1,132,1,132,3,132,2118,8,132,1,133,
        1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,
        3,133,2132,8,133,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,
        1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,
        1,134,1,134,3,134,2155,8,134,1,134,1,134,1,134,1,134,1,134,1,134,
        1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,
        1,134,1,134,1,134,1,134,3,134,2178,8,134,1,134,1,134,1,134,1,134,
        1,134,1,134,1,134,3,134,2187,8,134,1,135,1,135,1,135,1,135,1,136,
        1,136,1,136,1,136,1,136,1,137,1,137,1,137,1,137,1,138,1,138,1,138,
        1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,3,138,2214,
        8,138,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
        1,139,1,139,3,139,2228,8,139,1,140,1,140,1,140,1,140,1,140,1,141,
        1,141,1,141,1,141,1,141,1,142,1,142,1,142,1,142,1,142,1,142,1,142,
        1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,
        1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,3,142,
        2268,8,142,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,3,143,
        2278,8,143,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,
        1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,
        3,144,2300,8,144,1,145,1,145,1,145,1,145,1,145,1,146,1,146,1,146,
        1,146,1,146,1,147,1,147,1,147,1,147,1,147,3,147,2317,8,147,1,147,
        1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
        1,147,1,147,1,147,1,147,1,147,3,147,2336,8,147,1,148,1,148,1,148,
        1,148,1,148,3,148,2343,8,148,1,148,1,148,1,149,1,149,1,149,1,149,
        1,149,1,149,1,149,1,149,3,149,2355,8,149,1,150,1,150,1,150,1,150,
        1,150,1,150,1,150,1,150,3,150,2365,8,150,1,151,1,151,1,151,1,151,
        1,151,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,3,152,2380,
        8,152,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,3,153,2390,
        8,153,1,154,1,154,1,154,1,154,1,155,1,155,1,155,1,155,1,155,1,156,
        1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,3,156,2411,
        8,156,1,157,1,157,1,157,1,157,1,158,1,158,1,158,1,158,1,158,1,158,
        1,158,1,158,1,158,1,158,3,158,2427,8,158,1,158,1,158,3,158,2431,
        8,158,1,159,1,159,1,159,1,159,1,159,1,160,1,160,1,160,1,160,1,160,
        1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,
        1,160,3,160,2455,8,160,1,161,1,161,1,161,1,161,3,161,2461,8,161,
        1,161,1,161,1,161,1,161,1,161,1,161,3,161,2469,8,161,1,161,1,161,
        1,161,1,161,3,161,2475,8,161,1,161,1,161,3,161,2479,8,161,1,162,
        1,162,1,162,1,162,1,163,3,163,2486,8,163,1,163,1,163,1,163,1,163,
        1,163,1,163,1,163,1,164,3,164,2496,8,164,1,164,1,164,1,164,1,164,
        1,164,5,164,2503,8,164,10,164,12,164,2506,9,164,3,164,2508,8,164,
        1,164,3,164,2511,8,164,1,165,1,165,3,165,2515,8,165,1,165,1,165,
        1,165,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,3,166,2528,
        8,166,1,167,1,167,1,167,1,167,3,167,2534,8,167,1,168,1,168,3,168,
        2538,8,168,1,169,1,169,1,170,1,170,1,170,1,170,1,170,1,170,1,170,
        1,170,1,170,1,170,1,170,1,170,3,170,2554,8,170,1,171,1,171,1,171,
        1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,
        1,171,1,171,3,171,2572,8,171,1,172,1,172,1,172,1,172,1,172,1,172,
        1,172,1,172,1,172,1,172,1,172,1,172,3,172,2586,8,172,1,173,1,173,
        3,173,2590,8,173,1,174,1,174,1,175,1,175,1,175,1,175,1,175,1,175,
        1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,3,175,2609,
        8,175,1,176,1,176,1,176,1,176,3,176,2615,8,176,1,176,1,176,1,176,
        1,176,1,176,1,176,1,176,1,176,3,176,2625,8,176,1,176,1,176,1,176,
        1,176,1,176,1,176,1,176,1,176,3,176,2635,8,176,1,176,1,176,1,176,
        1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,
        1,176,1,176,3,176,2653,8,176,1,177,1,177,1,177,1,177,1,177,1,177,
        1,177,1,177,3,177,2663,8,177,1,178,1,178,1,178,1,178,1,178,1,178,
        1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,3,178,
        2681,8,178,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,
        1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,
        1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,
        1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,
        1,179,1,179,3,179,2727,8,179,1,180,1,180,1,180,1,180,1,180,1,180,
        1,180,1,180,3,180,2737,8,180,1,181,1,181,1,181,1,181,1,181,1,181,
        1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,3,181,
        2755,8,181,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,
        1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,
        1,182,3,182,2778,8,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,
        1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,
        1,182,5,182,2799,8,182,10,182,12,182,2802,9,182,1,183,1,183,1,183,
        1,183,1,183,1,183,1,183,1,183,3,183,2812,8,183,1,184,1,184,1,185,
        1,185,1,186,1,186,3,186,2820,8,186,1,187,1,187,1,188,1,188,1,188,
        1,188,3,188,2828,8,188,1,188,1,188,1,188,1,188,1,189,1,189,1,189,
        1,189,3,189,2838,8,189,1,189,1,189,1,189,1,189,1,190,1,190,1,190,
        1,190,3,190,2848,8,190,1,190,1,190,1,190,1,190,1,191,1,191,1,191,
        1,191,3,191,2858,8,191,1,191,1,191,1,191,1,191,1,192,1,192,1,192,
        1,192,3,192,2868,8,192,1,192,1,192,1,192,1,192,1,193,1,193,1,193,
        1,193,3,193,2878,8,193,1,193,1,193,1,193,1,193,1,194,1,194,1,194,
        1,194,3,194,2888,8,194,1,194,1,194,1,194,1,194,1,194,1,194,1,195,
        1,195,1,195,1,195,3,195,2900,8,195,1,195,1,195,1,195,1,195,1,195,
        1,195,1,196,1,196,1,196,1,196,3,196,2912,8,196,1,196,1,196,1,196,
        1,196,1,196,1,196,1,197,1,197,1,197,1,197,3,197,2924,8,197,1,197,
        1,197,1,197,1,197,1,197,1,197,3,197,2932,8,197,1,197,1,197,1,197,
        1,197,3,197,2938,8,197,1,198,1,198,1,198,1,198,3,198,2944,8,198,
        1,198,1,198,1,198,1,198,1,198,1,198,3,198,2952,8,198,1,198,1,198,
        1,198,1,198,3,198,2958,8,198,1,199,1,199,1,199,1,199,3,199,2964,
        8,199,1,199,1,199,1,199,1,199,1,200,1,200,1,200,1,200,3,200,2974,
        8,200,1,200,1,200,1,200,1,200,1,201,1,201,1,201,1,201,3,201,2984,
        8,201,1,201,1,201,1,201,1,201,1,202,1,202,1,202,1,202,3,202,2994,
        8,202,1,202,1,202,1,202,1,202,1,203,1,203,1,203,1,203,3,203,3004,
        8,203,1,203,1,203,1,203,1,203,1,204,1,204,1,204,1,204,3,204,3014,
        8,204,1,204,1,204,1,204,1,204,1,205,1,205,1,205,1,205,3,205,3024,
        8,205,1,205,1,205,1,205,1,205,1,206,1,206,1,206,1,206,3,206,3034,
        8,206,1,206,1,206,1,206,1,206,1,207,1,207,1,207,1,207,3,207,3044,
        8,207,1,207,1,207,1,207,1,207,1,208,1,208,1,208,1,208,1,209,1,209,
        1,209,1,209,1,210,1,210,1,210,1,210,1,211,1,211,1,211,1,211,1,212,
        1,212,1,212,1,212,1,212,1,212,1,212,1,212,3,212,3074,8,212,1,213,
        1,213,1,213,1,213,1,214,1,214,1,214,1,214,1,215,1,215,1,215,1,215,
        1,216,1,216,1,216,1,216,1,216,1,216,1,216,3,216,3095,8,216,1,217,
        1,217,1,217,3,217,3100,8,217,1,218,1,218,1,218,3,218,3105,8,218,
        1,219,1,219,1,219,3,219,3110,8,219,1,220,1,220,1,220,1,220,1,220,
        3,220,3117,8,220,1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,
        1,221,3,221,3128,8,221,1,222,1,222,3,222,3132,8,222,1,223,1,223,
        1,223,3,223,3137,8,223,1,224,1,224,1,224,1,224,1,225,1,225,1,225,
        1,225,1,226,1,226,1,226,1,226,1,227,1,227,1,227,1,227,1,228,1,228,
        1,228,1,228,1,229,1,229,1,229,1,229,1,230,1,230,1,230,1,230,1,231,
        1,231,1,231,1,231,1,232,1,232,1,232,1,232,1,233,1,233,1,233,1,233,
        1,234,1,234,1,234,1,234,1,235,1,235,1,235,1,235,1,236,1,236,1,236,
        1,236,1,237,1,237,1,237,1,237,1,238,1,238,1,238,1,238,1,239,1,239,
        1,239,1,239,1,240,1,240,1,240,1,240,1,241,1,241,1,241,1,241,1,242,
        1,242,1,242,1,242,1,243,1,243,1,243,1,243,1,244,1,244,1,244,1,244,
        1,245,1,245,1,245,1,245,1,246,1,246,1,246,1,246,1,247,1,247,1,247,
        1,247,1,248,1,248,1,248,1,248,1,249,1,249,1,249,1,249,1,250,1,250,
        1,250,1,250,1,251,1,251,1,251,1,251,1,252,1,252,1,252,1,252,1,253,
        1,253,1,254,1,254,1,255,1,255,1,256,1,256,1,257,1,257,1,258,1,258,
        1,259,1,259,3,259,3269,8,259,1,260,1,260,3,260,3273,8,260,1,261,
        1,261,3,261,3277,8,261,1,262,1,262,3,262,3281,8,262,1,263,1,263,
        3,263,3285,8,263,1,264,1,264,1,264,5,264,3290,8,264,10,264,12,264,
        3293,9,264,3,264,3295,8,264,1,265,1,265,3,265,3299,8,265,1,266,1,
        266,3,266,3303,8,266,1,267,1,267,1,267,5,267,3308,8,267,10,267,12,
        267,3311,9,267,3,267,3313,8,267,1,268,1,268,3,268,3317,8,268,1,269,
        1,269,3,269,3321,8,269,1,270,1,270,3,270,3325,8,270,1,271,1,271,
        3,271,3329,8,271,1,272,3,272,3332,8,272,1,273,1,273,1,273,5,273,
        3337,8,273,10,273,12,273,3340,9,273,1,274,3,274,3343,8,274,1,275,
        1,275,1,275,5,275,3348,8,275,10,275,12,275,3351,9,275,1,276,3,276,
        3354,8,276,1,277,1,277,1,277,5,277,3359,8,277,10,277,12,277,3362,
        9,277,1,278,1,278,1,278,1,278,5,278,3368,8,278,10,278,12,278,3371,
        9,278,3,278,3373,8,278,1,278,1,278,1,279,3,279,3378,8,279,1,280,
        1,280,1,280,5,280,3383,8,280,10,280,12,280,3386,9,280,1,281,1,281,
        3,281,3390,8,281,1,282,1,282,1,282,1,282,1,282,1,282,1,282,1,282,
        1,282,1,282,3,282,3402,8,282,1,283,1,283,1,283,1,283,5,283,3408,
        8,283,10,283,12,283,3411,9,283,3,283,3413,8,283,1,283,1,283,1,284,
        1,284,1,284,5,284,3420,8,284,10,284,12,284,3423,9,284,3,284,3425,
        8,284,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,
        1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,3,285,3446,
        8,285,1,286,1,286,1,286,1,286,1,286,1,286,1,286,5,286,3455,8,286,
        10,286,12,286,3458,9,286,1,286,1,286,3,286,3462,8,286,1,287,1,287,
        1,287,1,287,1,287,3,287,3469,8,287,1,287,1,287,1,287,1,287,1,287,
        3,287,3476,8,287,1,287,1,287,1,287,1,287,1,287,3,287,3483,8,287,
        1,287,1,287,1,287,1,287,1,287,3,287,3490,8,287,1,287,1,287,1,287,
        1,287,1,287,3,287,3497,8,287,1,287,1,287,1,287,1,287,1,287,3,287,
        3504,8,287,1,287,1,287,1,287,1,287,1,287,3,287,3511,8,287,1,287,
        1,287,3,287,3515,8,287,3,287,3517,8,287,1,288,1,288,1,288,1,288,
        1,289,1,289,1,290,1,290,1,291,1,291,1,292,1,292,1,292,3,292,3532,
        8,292,1,293,1,293,3,293,3536,8,293,1,294,1,294,1,295,1,295,1,295,
        1,295,1,295,1,295,1,295,1,295,1,295,1,295,1,295,1,295,1,295,1,295,
        1,295,1,295,3,295,3556,8,295,1,296,1,296,1,297,1,297,1,298,1,298,
        1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,3,299,3572,8,299,
        1,300,1,300,1,301,1,301,1,302,1,302,1,303,1,303,1,303,0,4,2,6,50,
        364,304,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
        186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
        218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,
        250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
        282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,
        314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,
        346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,
        378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,
        410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,
        442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,
        474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,
        506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,
        538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,
        570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,
        602,604,606,0,8,2,0,181,181,237,237,4,0,89,89,108,108,111,111,236,
        236,5,0,19,19,72,72,93,93,158,158,214,214,1,0,254,255,2,0,148,148,
        254,255,2,0,66,66,226,226,2,0,99,99,253,253,2,0,2,250,266,266,3817,
        0,608,1,0,0,0,2,635,1,0,0,0,4,647,1,0,0,0,6,654,1,0,0,0,8,685,1,
        0,0,0,10,697,1,0,0,0,12,706,1,0,0,0,14,708,1,0,0,0,16,713,1,0,0,
        0,18,729,1,0,0,0,20,747,1,0,0,0,22,749,1,0,0,0,24,758,1,0,0,0,26,
        779,1,0,0,0,28,791,1,0,0,0,30,803,1,0,0,0,32,818,1,0,0,0,34,820,
        1,0,0,0,36,825,1,0,0,0,38,830,1,0,0,0,40,835,1,0,0,0,42,850,1,0,
        0,0,44,862,1,0,0,0,46,895,1,0,0,0,48,897,1,0,0,0,50,902,1,0,0,0,
        52,917,1,0,0,0,54,919,1,0,0,0,56,1057,1,0,0,0,58,1059,1,0,0,0,60,
        1064,1,0,0,0,62,1079,1,0,0,0,64,1094,1,0,0,0,66,1108,1,0,0,0,68,
        1110,1,0,0,0,70,1115,1,0,0,0,72,1120,1,0,0,0,74,1125,1,0,0,0,76,
        1134,1,0,0,0,78,1146,1,0,0,0,80,1161,1,0,0,0,82,1163,1,0,0,0,84,
        1168,1,0,0,0,86,1173,1,0,0,0,88,1177,1,0,0,0,90,1236,1,0,0,0,92,
        1266,1,0,0,0,94,1268,1,0,0,0,96,1319,1,0,0,0,98,1321,1,0,0,0,100,
        1326,1,0,0,0,102,1331,1,0,0,0,104,1350,1,0,0,0,106,1352,1,0,0,0,
        108,1357,1,0,0,0,110,1361,1,0,0,0,112,1374,1,0,0,0,114,1376,1,0,
        0,0,116,1380,1,0,0,0,118,1397,1,0,0,0,120,1413,1,0,0,0,122,1415,
        1,0,0,0,124,1420,1,0,0,0,126,1424,1,0,0,0,128,1429,1,0,0,0,130,1433,
        1,0,0,0,132,1437,1,0,0,0,134,1455,1,0,0,0,136,1465,1,0,0,0,138,1477,
        1,0,0,0,140,1479,1,0,0,0,142,1494,1,0,0,0,144,1496,1,0,0,0,146,1516,
        1,0,0,0,148,1526,1,0,0,0,150,1536,1,0,0,0,152,1603,1,0,0,0,154,1619,
        1,0,0,0,156,1635,1,0,0,0,158,1651,1,0,0,0,160,1653,1,0,0,0,162,1672,
        1,0,0,0,164,1674,1,0,0,0,166,1678,1,0,0,0,168,1682,1,0,0,0,170,1687,
        1,0,0,0,172,1692,1,0,0,0,174,1697,1,0,0,0,176,1701,1,0,0,0,178,1705,
        1,0,0,0,180,1720,1,0,0,0,182,1722,1,0,0,0,184,1726,1,0,0,0,186,1738,
        1,0,0,0,188,1752,1,0,0,0,190,1754,1,0,0,0,192,1767,1,0,0,0,194,1777,
        1,0,0,0,196,1779,1,0,0,0,198,1784,1,0,0,0,200,1789,1,0,0,0,202,1802,
        1,0,0,0,204,1812,1,0,0,0,206,1814,1,0,0,0,208,1832,1,0,0,0,210,1847,
        1,0,0,0,212,1857,1,0,0,0,214,1859,1,0,0,0,216,1864,1,0,0,0,218,1911,
        1,0,0,0,220,1913,1,0,0,0,222,1918,1,0,0,0,224,1931,1,0,0,0,226,1933,
        1,0,0,0,228,1937,1,0,0,0,230,1942,1,0,0,0,232,1947,1,0,0,0,234,1959,
        1,0,0,0,236,1961,1,0,0,0,238,1965,1,0,0,0,240,1969,1,0,0,0,242,1982,
        1,0,0,0,244,1984,1,0,0,0,246,1993,1,0,0,0,248,2034,1,0,0,0,250,2036,
        1,0,0,0,252,2057,1,0,0,0,254,2059,1,0,0,0,256,2075,1,0,0,0,258,2093,
        1,0,0,0,260,2095,1,0,0,0,262,2107,1,0,0,0,264,2117,1,0,0,0,266,2131,
        1,0,0,0,268,2186,1,0,0,0,270,2188,1,0,0,0,272,2192,1,0,0,0,274,2197,
        1,0,0,0,276,2213,1,0,0,0,278,2227,1,0,0,0,280,2229,1,0,0,0,282,2234,
        1,0,0,0,284,2267,1,0,0,0,286,2277,1,0,0,0,288,2299,1,0,0,0,290,2301,
        1,0,0,0,292,2306,1,0,0,0,294,2335,1,0,0,0,296,2337,1,0,0,0,298,2354,
        1,0,0,0,300,2364,1,0,0,0,302,2366,1,0,0,0,304,2379,1,0,0,0,306,2389,
        1,0,0,0,308,2391,1,0,0,0,310,2395,1,0,0,0,312,2410,1,0,0,0,314,2412,
        1,0,0,0,316,2430,1,0,0,0,318,2432,1,0,0,0,320,2454,1,0,0,0,322,2478,
        1,0,0,0,324,2480,1,0,0,0,326,2485,1,0,0,0,328,2495,1,0,0,0,330,2514,
        1,0,0,0,332,2527,1,0,0,0,334,2533,1,0,0,0,336,2537,1,0,0,0,338,2539,
        1,0,0,0,340,2553,1,0,0,0,342,2571,1,0,0,0,344,2585,1,0,0,0,346,2589,
        1,0,0,0,348,2591,1,0,0,0,350,2608,1,0,0,0,352,2652,1,0,0,0,354,2662,
        1,0,0,0,356,2680,1,0,0,0,358,2726,1,0,0,0,360,2736,1,0,0,0,362,2754,
        1,0,0,0,364,2777,1,0,0,0,366,2811,1,0,0,0,368,2813,1,0,0,0,370,2815,
        1,0,0,0,372,2819,1,0,0,0,374,2821,1,0,0,0,376,2827,1,0,0,0,378,2837,
        1,0,0,0,380,2847,1,0,0,0,382,2857,1,0,0,0,384,2867,1,0,0,0,386,2877,
        1,0,0,0,388,2887,1,0,0,0,390,2899,1,0,0,0,392,2911,1,0,0,0,394,2937,
        1,0,0,0,396,2957,1,0,0,0,398,2963,1,0,0,0,400,2973,1,0,0,0,402,2983,
        1,0,0,0,404,2993,1,0,0,0,406,3003,1,0,0,0,408,3013,1,0,0,0,410,3023,
        1,0,0,0,412,3033,1,0,0,0,414,3043,1,0,0,0,416,3049,1,0,0,0,418,3053,
        1,0,0,0,420,3057,1,0,0,0,422,3061,1,0,0,0,424,3073,1,0,0,0,426,3075,
        1,0,0,0,428,3079,1,0,0,0,430,3083,1,0,0,0,432,3094,1,0,0,0,434,3099,
        1,0,0,0,436,3104,1,0,0,0,438,3109,1,0,0,0,440,3116,1,0,0,0,442,3127,
        1,0,0,0,444,3131,1,0,0,0,446,3136,1,0,0,0,448,3138,1,0,0,0,450,3142,
        1,0,0,0,452,3146,1,0,0,0,454,3150,1,0,0,0,456,3154,1,0,0,0,458,3158,
        1,0,0,0,460,3162,1,0,0,0,462,3166,1,0,0,0,464,3170,1,0,0,0,466,3174,
        1,0,0,0,468,3178,1,0,0,0,470,3182,1,0,0,0,472,3186,1,0,0,0,474,3190,
        1,0,0,0,476,3194,1,0,0,0,478,3198,1,0,0,0,480,3202,1,0,0,0,482,3206,
        1,0,0,0,484,3210,1,0,0,0,486,3214,1,0,0,0,488,3218,1,0,0,0,490,3222,
        1,0,0,0,492,3226,1,0,0,0,494,3230,1,0,0,0,496,3234,1,0,0,0,498,3238,
        1,0,0,0,500,3242,1,0,0,0,502,3246,1,0,0,0,504,3250,1,0,0,0,506,3254,
        1,0,0,0,508,3256,1,0,0,0,510,3258,1,0,0,0,512,3260,1,0,0,0,514,3262,
        1,0,0,0,516,3264,1,0,0,0,518,3268,1,0,0,0,520,3272,1,0,0,0,522,3276,
        1,0,0,0,524,3280,1,0,0,0,526,3284,1,0,0,0,528,3294,1,0,0,0,530,3298,
        1,0,0,0,532,3302,1,0,0,0,534,3312,1,0,0,0,536,3316,1,0,0,0,538,3320,
        1,0,0,0,540,3324,1,0,0,0,542,3328,1,0,0,0,544,3331,1,0,0,0,546,3333,
        1,0,0,0,548,3342,1,0,0,0,550,3344,1,0,0,0,552,3353,1,0,0,0,554,3355,
        1,0,0,0,556,3363,1,0,0,0,558,3377,1,0,0,0,560,3379,1,0,0,0,562,3389,
        1,0,0,0,564,3401,1,0,0,0,566,3403,1,0,0,0,568,3424,1,0,0,0,570,3445,
        1,0,0,0,572,3461,1,0,0,0,574,3516,1,0,0,0,576,3518,1,0,0,0,578,3522,
        1,0,0,0,580,3524,1,0,0,0,582,3526,1,0,0,0,584,3531,1,0,0,0,586,3535,
        1,0,0,0,588,3537,1,0,0,0,590,3555,1,0,0,0,592,3557,1,0,0,0,594,3559,
        1,0,0,0,596,3561,1,0,0,0,598,3571,1,0,0,0,600,3573,1,0,0,0,602,3575,
        1,0,0,0,604,3577,1,0,0,0,606,3579,1,0,0,0,608,615,3,2,1,0,609,611,
        5,262,0,0,610,609,1,0,0,0,610,611,1,0,0,0,611,612,1,0,0,0,612,614,
        3,2,1,0,613,610,1,0,0,0,614,617,1,0,0,0,615,613,1,0,0,0,615,616,
        1,0,0,0,616,619,1,0,0,0,617,615,1,0,0,0,618,620,5,262,0,0,619,618,
        1,0,0,0,619,620,1,0,0,0,620,621,1,0,0,0,621,622,5,0,0,1,622,1,1,
        0,0,0,623,624,6,1,-1,0,624,636,3,6,3,0,625,626,3,6,3,0,626,627,5,
        264,0,0,627,628,3,8,4,0,628,636,1,0,0,0,629,636,3,10,5,0,630,631,
        3,10,5,0,631,632,5,264,0,0,632,633,3,366,183,0,633,636,1,0,0,0,634,
        636,3,4,2,0,635,623,1,0,0,0,635,625,1,0,0,0,635,629,1,0,0,0,635,
        630,1,0,0,0,635,634,1,0,0,0,636,644,1,0,0,0,637,638,10,2,0,0,638,
        639,5,264,0,0,639,640,5,220,0,0,640,641,5,256,0,0,641,643,5,257,
        0,0,642,637,1,0,0,0,643,646,1,0,0,0,644,642,1,0,0,0,644,645,1,0,
        0,0,645,3,1,0,0,0,646,644,1,0,0,0,647,648,5,255,0,0,648,5,1,0,0,
        0,649,650,6,3,-1,0,650,655,5,266,0,0,651,652,5,266,0,0,652,653,5,
        264,0,0,653,655,3,12,6,0,654,649,1,0,0,0,654,651,1,0,0,0,655,661,
        1,0,0,0,656,657,10,1,0,0,657,658,5,264,0,0,658,660,3,12,6,0,659,
        656,1,0,0,0,660,663,1,0,0,0,661,659,1,0,0,0,661,662,1,0,0,0,662,
        7,1,0,0,0,663,661,1,0,0,0,664,665,5,228,0,0,665,666,5,256,0,0,666,
        667,5,257,0,0,667,668,5,264,0,0,668,669,5,16,0,0,669,670,5,256,0,
        0,670,686,5,257,0,0,671,672,5,228,0,0,672,673,5,256,0,0,673,674,
        5,257,0,0,674,675,5,264,0,0,675,676,5,32,0,0,676,677,5,256,0,0,677,
        686,5,257,0,0,678,679,5,228,0,0,679,680,5,256,0,0,680,681,5,257,
        0,0,681,682,5,264,0,0,682,683,5,186,0,0,683,684,5,256,0,0,684,686,
        5,257,0,0,685,664,1,0,0,0,685,671,1,0,0,0,685,678,1,0,0,0,686,9,
        1,0,0,0,687,688,3,6,3,0,688,689,5,264,0,0,689,690,3,28,14,0,690,
        698,1,0,0,0,691,692,3,6,3,0,692,693,5,264,0,0,693,694,3,28,14,0,
        694,695,5,264,0,0,695,696,3,50,25,0,696,698,1,0,0,0,697,687,1,0,
        0,0,697,691,1,0,0,0,698,11,1,0,0,0,699,707,3,14,7,0,700,707,3,16,
        8,0,701,707,3,18,9,0,702,707,3,20,10,0,703,707,3,22,11,0,704,707,
        3,24,12,0,705,707,3,26,13,0,706,699,1,0,0,0,706,700,1,0,0,0,706,
        701,1,0,0,0,706,702,1,0,0,0,706,703,1,0,0,0,706,704,1,0,0,0,706,
        705,1,0,0,0,707,13,1,0,0,0,708,709,5,240,0,0,709,710,5,256,0,0,710,
        711,3,518,259,0,711,712,5,257,0,0,712,15,1,0,0,0,713,714,5,245,0,
        0,714,715,5,256,0,0,715,716,5,257,0,0,716,17,1,0,0,0,717,718,5,246,
        0,0,718,719,5,256,0,0,719,720,3,532,266,0,720,721,5,257,0,0,721,
        730,1,0,0,0,722,723,5,246,0,0,723,724,5,256,0,0,724,725,3,532,266,
        0,725,726,5,263,0,0,726,727,3,374,187,0,727,728,5,257,0,0,728,730,
        1,0,0,0,729,717,1,0,0,0,729,722,1,0,0,0,730,19,1,0,0,0,731,732,5,
        247,0,0,732,733,5,256,0,0,733,734,3,578,289,0,734,735,5,263,0,0,
        735,736,3,532,266,0,736,737,5,257,0,0,737,748,1,0,0,0,738,739,5,
        247,0,0,739,740,5,256,0,0,740,741,3,578,289,0,741,742,5,263,0,0,
        742,743,3,532,266,0,743,744,5,263,0,0,744,745,3,374,187,0,745,746,
        5,257,0,0,746,748,1,0,0,0,747,731,1,0,0,0,747,738,1,0,0,0,748,21,
        1,0,0,0,749,750,5,248,0,0,750,751,5,256,0,0,751,754,3,328,164,0,
        752,753,5,263,0,0,753,755,3,544,272,0,754,752,1,0,0,0,754,755,1,
        0,0,0,755,756,1,0,0,0,756,757,5,257,0,0,757,23,1,0,0,0,758,759,5,
        244,0,0,759,760,5,256,0,0,760,763,3,602,301,0,761,762,5,263,0,0,
        762,764,3,548,274,0,763,761,1,0,0,0,763,764,1,0,0,0,764,765,1,0,
        0,0,765,766,5,257,0,0,766,25,1,0,0,0,767,768,5,239,0,0,768,769,5,
        256,0,0,769,770,3,578,289,0,770,771,5,257,0,0,771,780,1,0,0,0,772,
        773,5,239,0,0,773,774,5,256,0,0,774,775,3,578,289,0,775,776,5,263,
        0,0,776,777,3,532,266,0,777,778,5,257,0,0,778,780,1,0,0,0,779,767,
        1,0,0,0,779,772,1,0,0,0,780,27,1,0,0,0,781,792,3,30,15,0,782,792,
        3,32,16,0,783,792,3,34,17,0,784,792,3,36,18,0,785,792,3,44,22,0,
        786,792,3,42,21,0,787,792,3,38,19,0,788,792,3,40,20,0,789,792,3,
        46,23,0,790,792,3,48,24,0,791,781,1,0,0,0,791,782,1,0,0,0,791,783,
        1,0,0,0,791,784,1,0,0,0,791,785,1,0,0,0,791,786,1,0,0,0,791,787,
        1,0,0,0,791,788,1,0,0,0,791,789,1,0,0,0,791,790,1,0,0,0,792,29,1,
        0,0,0,793,794,5,3,0,0,794,795,5,256,0,0,795,796,3,524,262,0,796,
        797,5,257,0,0,797,804,1,0,0,0,798,799,5,3,0,0,799,800,5,256,0,0,
        800,801,3,52,26,0,801,802,5,257,0,0,802,804,1,0,0,0,803,793,1,0,
        0,0,803,798,1,0,0,0,804,31,1,0,0,0,805,806,5,4,0,0,806,807,5,256,
        0,0,807,819,5,257,0,0,808,809,5,4,0,0,809,810,5,256,0,0,810,811,
        3,524,262,0,811,812,5,257,0,0,812,819,1,0,0,0,813,814,5,4,0,0,814,
        815,5,256,0,0,815,816,3,52,26,0,816,817,5,257,0,0,817,819,1,0,0,
        0,818,805,1,0,0,0,818,808,1,0,0,0,818,813,1,0,0,0,819,33,1,0,0,0,
        820,821,5,57,0,0,821,822,5,256,0,0,822,823,3,534,267,0,823,824,5,
        257,0,0,824,35,1,0,0,0,825,826,5,233,0,0,826,827,5,256,0,0,827,828,
        3,534,267,0,828,829,5,257,0,0,829,37,1,0,0,0,830,831,5,100,0,0,831,
        832,5,256,0,0,832,833,3,534,267,0,833,834,5,257,0,0,834,39,1,0,0,
        0,835,836,5,105,0,0,836,837,5,256,0,0,837,838,3,578,289,0,838,839,
        5,257,0,0,839,41,1,0,0,0,840,841,5,130,0,0,841,842,5,256,0,0,842,
        843,3,538,269,0,843,844,5,257,0,0,844,851,1,0,0,0,845,846,5,130,
        0,0,846,847,5,256,0,0,847,848,3,52,26,0,848,849,5,257,0,0,849,851,
        1,0,0,0,850,840,1,0,0,0,850,845,1,0,0,0,851,43,1,0,0,0,852,853,5,
        129,0,0,853,854,5,256,0,0,854,855,3,538,269,0,855,856,5,257,0,0,
        856,863,1,0,0,0,857,858,5,129,0,0,858,859,5,256,0,0,859,860,3,52,
        26,0,860,861,5,257,0,0,861,863,1,0,0,0,862,852,1,0,0,0,862,857,1,
        0,0,0,863,45,1,0,0,0,864,865,5,24,0,0,865,866,5,256,0,0,866,896,
        5,257,0,0,867,868,5,24,0,0,868,869,5,256,0,0,869,870,3,578,289,0,
        870,871,5,257,0,0,871,896,1,0,0,0,872,873,5,24,0,0,873,874,5,256,
        0,0,874,875,3,578,289,0,875,876,5,263,0,0,876,877,3,536,268,0,877,
        878,5,257,0,0,878,896,1,0,0,0,879,880,5,24,0,0,880,881,5,256,0,0,
        881,882,3,578,289,0,882,883,5,263,0,0,883,884,3,52,26,0,884,885,
        5,257,0,0,885,896,1,0,0,0,886,887,5,24,0,0,887,888,5,256,0,0,888,
        889,3,578,289,0,889,890,5,263,0,0,890,891,3,536,268,0,891,892,5,
        263,0,0,892,893,3,52,26,0,893,894,5,257,0,0,894,896,1,0,0,0,895,
        864,1,0,0,0,895,867,1,0,0,0,895,872,1,0,0,0,895,879,1,0,0,0,895,
        886,1,0,0,0,896,47,1,0,0,0,897,898,5,230,0,0,898,899,5,256,0,0,899,
        900,3,552,276,0,900,901,5,257,0,0,901,49,1,0,0,0,902,903,6,25,-1,
        0,903,904,3,56,28,0,904,910,1,0,0,0,905,906,10,1,0,0,906,907,5,264,
        0,0,907,909,3,56,28,0,908,905,1,0,0,0,909,912,1,0,0,0,910,908,1,
        0,0,0,910,911,1,0,0,0,911,51,1,0,0,0,912,910,1,0,0,0,913,918,3,50,
        25,0,914,915,5,267,0,0,915,916,5,264,0,0,916,918,3,50,25,0,917,913,
        1,0,0,0,917,914,1,0,0,0,918,53,1,0,0,0,919,920,3,10,5,0,920,921,
        5,264,0,0,921,922,3,366,183,0,922,55,1,0,0,0,923,1058,3,58,29,0,
        924,1058,3,60,30,0,925,1058,3,62,31,0,926,1058,3,64,32,0,927,1058,
        3,210,105,0,928,1058,3,208,104,0,929,1058,3,66,33,0,930,1058,3,68,
        34,0,931,1058,3,70,35,0,932,1058,3,72,36,0,933,1058,3,74,37,0,934,
        1058,3,80,40,0,935,1058,3,82,41,0,936,1058,3,84,42,0,937,1058,3,
        86,43,0,938,1058,3,88,44,0,939,1058,3,90,45,0,940,1058,3,94,47,0,
        941,1058,3,96,48,0,942,1058,3,98,49,0,943,1058,3,100,50,0,944,1058,
        3,106,53,0,945,1058,3,108,54,0,946,1058,3,110,55,0,947,1058,3,112,
        56,0,948,1058,3,114,57,0,949,1058,3,120,60,0,950,1058,3,122,61,0,
        951,1058,3,124,62,0,952,1058,3,126,63,0,953,1058,3,128,64,0,954,
        1058,3,132,66,0,955,1058,3,134,67,0,956,1058,3,138,69,0,957,1058,
        3,140,70,0,958,1058,3,142,71,0,959,1058,3,146,73,0,960,1058,3,148,
        74,0,961,1058,3,150,75,0,962,1058,3,152,76,0,963,1058,3,154,77,0,
        964,1058,3,156,78,0,965,1058,3,158,79,0,966,1058,3,160,80,0,967,
        1058,3,162,81,0,968,1058,3,164,82,0,969,1058,3,166,83,0,970,1058,
        3,168,84,0,971,1058,3,170,85,0,972,1058,3,172,86,0,973,1058,3,174,
        87,0,974,1058,3,176,88,0,975,1058,3,178,89,0,976,1058,3,180,90,0,
        977,1058,3,182,91,0,978,1058,3,184,92,0,979,1058,3,188,94,0,980,
        1058,3,190,95,0,981,1058,3,192,96,0,982,1058,3,196,98,0,983,1058,
        3,198,99,0,984,1058,3,200,100,0,985,1058,3,202,101,0,986,1058,3,
        204,102,0,987,1058,3,212,106,0,988,1058,3,214,107,0,989,1058,3,216,
        108,0,990,1058,3,218,109,0,991,1058,3,220,110,0,992,1058,3,222,111,
        0,993,1058,3,224,112,0,994,1058,3,226,113,0,995,1058,3,228,114,0,
        996,1058,3,230,115,0,997,1058,3,232,116,0,998,1058,3,234,117,0,999,
        1058,3,236,118,0,1000,1058,3,238,119,0,1001,1058,3,242,121,0,1002,
        1058,3,244,122,0,1003,1058,3,246,123,0,1004,1058,3,248,124,0,1005,
        1058,3,250,125,0,1006,1058,3,252,126,0,1007,1058,3,254,127,0,1008,
        1058,3,256,128,0,1009,1058,3,264,132,0,1010,1058,3,266,133,0,1011,
        1058,3,268,134,0,1012,1058,3,102,51,0,1013,1058,3,240,120,0,1014,
        1058,3,206,103,0,1015,1058,3,270,135,0,1016,1058,3,272,136,0,1017,
        1058,3,274,137,0,1018,1058,3,276,138,0,1019,1058,3,280,140,0,1020,
        1058,3,282,141,0,1021,1058,3,286,143,0,1022,1058,3,288,144,0,1023,
        1058,3,136,68,0,1024,1058,3,290,145,0,1025,1058,3,292,146,0,1026,
        1058,3,294,147,0,1027,1058,3,296,148,0,1028,1058,3,302,151,0,1029,
        1058,3,304,152,0,1030,1058,3,308,154,0,1031,1058,3,310,155,0,1032,
        1058,3,312,156,0,1033,1058,3,314,157,0,1034,1058,3,316,158,0,1035,
        1058,3,318,159,0,1036,1058,3,320,160,0,1037,1058,3,322,161,0,1038,
        1058,3,324,162,0,1039,1058,3,130,65,0,1040,1058,3,92,46,0,1041,1058,
        3,104,52,0,1042,1058,3,78,39,0,1043,1058,3,144,72,0,1044,1058,3,
        300,150,0,1045,1058,3,298,149,0,1046,1058,3,186,93,0,1047,1058,3,
        306,153,0,1048,1058,3,194,97,0,1049,1058,3,262,131,0,1050,1058,3,
        260,130,0,1051,1058,3,258,129,0,1052,1058,3,278,139,0,1053,1058,
        3,284,142,0,1054,1058,3,76,38,0,1055,1058,3,116,58,0,1056,1058,3,
        118,59,0,1057,923,1,0,0,0,1057,924,1,0,0,0,1057,925,1,0,0,0,1057,
        926,1,0,0,0,1057,927,1,0,0,0,1057,928,1,0,0,0,1057,929,1,0,0,0,1057,
        930,1,0,0,0,1057,931,1,0,0,0,1057,932,1,0,0,0,1057,933,1,0,0,0,1057,
        934,1,0,0,0,1057,935,1,0,0,0,1057,936,1,0,0,0,1057,937,1,0,0,0,1057,
        938,1,0,0,0,1057,939,1,0,0,0,1057,940,1,0,0,0,1057,941,1,0,0,0,1057,
        942,1,0,0,0,1057,943,1,0,0,0,1057,944,1,0,0,0,1057,945,1,0,0,0,1057,
        946,1,0,0,0,1057,947,1,0,0,0,1057,948,1,0,0,0,1057,949,1,0,0,0,1057,
        950,1,0,0,0,1057,951,1,0,0,0,1057,952,1,0,0,0,1057,953,1,0,0,0,1057,
        954,1,0,0,0,1057,955,1,0,0,0,1057,956,1,0,0,0,1057,957,1,0,0,0,1057,
        958,1,0,0,0,1057,959,1,0,0,0,1057,960,1,0,0,0,1057,961,1,0,0,0,1057,
        962,1,0,0,0,1057,963,1,0,0,0,1057,964,1,0,0,0,1057,965,1,0,0,0,1057,
        966,1,0,0,0,1057,967,1,0,0,0,1057,968,1,0,0,0,1057,969,1,0,0,0,1057,
        970,1,0,0,0,1057,971,1,0,0,0,1057,972,1,0,0,0,1057,973,1,0,0,0,1057,
        974,1,0,0,0,1057,975,1,0,0,0,1057,976,1,0,0,0,1057,977,1,0,0,0,1057,
        978,1,0,0,0,1057,979,1,0,0,0,1057,980,1,0,0,0,1057,981,1,0,0,0,1057,
        982,1,0,0,0,1057,983,1,0,0,0,1057,984,1,0,0,0,1057,985,1,0,0,0,1057,
        986,1,0,0,0,1057,987,1,0,0,0,1057,988,1,0,0,0,1057,989,1,0,0,0,1057,
        990,1,0,0,0,1057,991,1,0,0,0,1057,992,1,0,0,0,1057,993,1,0,0,0,1057,
        994,1,0,0,0,1057,995,1,0,0,0,1057,996,1,0,0,0,1057,997,1,0,0,0,1057,
        998,1,0,0,0,1057,999,1,0,0,0,1057,1000,1,0,0,0,1057,1001,1,0,0,0,
        1057,1002,1,0,0,0,1057,1003,1,0,0,0,1057,1004,1,0,0,0,1057,1005,
        1,0,0,0,1057,1006,1,0,0,0,1057,1007,1,0,0,0,1057,1008,1,0,0,0,1057,
        1009,1,0,0,0,1057,1010,1,0,0,0,1057,1011,1,0,0,0,1057,1012,1,0,0,
        0,1057,1013,1,0,0,0,1057,1014,1,0,0,0,1057,1015,1,0,0,0,1057,1016,
        1,0,0,0,1057,1017,1,0,0,0,1057,1018,1,0,0,0,1057,1019,1,0,0,0,1057,
        1020,1,0,0,0,1057,1021,1,0,0,0,1057,1022,1,0,0,0,1057,1023,1,0,0,
        0,1057,1024,1,0,0,0,1057,1025,1,0,0,0,1057,1026,1,0,0,0,1057,1027,
        1,0,0,0,1057,1028,1,0,0,0,1057,1029,1,0,0,0,1057,1030,1,0,0,0,1057,
        1031,1,0,0,0,1057,1032,1,0,0,0,1057,1033,1,0,0,0,1057,1034,1,0,0,
        0,1057,1035,1,0,0,0,1057,1036,1,0,0,0,1057,1037,1,0,0,0,1057,1038,
        1,0,0,0,1057,1039,1,0,0,0,1057,1040,1,0,0,0,1057,1041,1,0,0,0,1057,
        1042,1,0,0,0,1057,1043,1,0,0,0,1057,1044,1,0,0,0,1057,1045,1,0,0,
        0,1057,1046,1,0,0,0,1057,1047,1,0,0,0,1057,1048,1,0,0,0,1057,1049,
        1,0,0,0,1057,1050,1,0,0,0,1057,1051,1,0,0,0,1057,1052,1,0,0,0,1057,
        1053,1,0,0,0,1057,1054,1,0,0,0,1057,1055,1,0,0,0,1057,1056,1,0,0,
        0,1058,57,1,0,0,0,1059,1060,5,233,0,0,1060,1061,5,256,0,0,1061,1062,
        3,534,267,0,1062,1063,5,257,0,0,1063,59,1,0,0,0,1064,1065,5,57,0,
        0,1065,1066,5,256,0,0,1066,1067,3,534,267,0,1067,1068,5,257,0,0,
        1068,61,1,0,0,0,1069,1070,5,3,0,0,1070,1071,5,256,0,0,1071,1072,
        3,524,262,0,1072,1073,5,257,0,0,1073,1080,1,0,0,0,1074,1075,5,3,
        0,0,1075,1076,5,256,0,0,1076,1077,3,52,26,0,1077,1078,5,257,0,0,
        1078,1080,1,0,0,0,1079,1069,1,0,0,0,1079,1074,1,0,0,0,1080,63,1,
        0,0,0,1081,1082,5,4,0,0,1082,1083,5,256,0,0,1083,1095,5,257,0,0,
        1084,1085,5,4,0,0,1085,1086,5,256,0,0,1086,1087,3,524,262,0,1087,
        1088,5,257,0,0,1088,1095,1,0,0,0,1089,1090,5,4,0,0,1090,1091,5,256,
        0,0,1091,1092,3,52,26,0,1092,1093,5,257,0,0,1093,1095,1,0,0,0,1094,
        1081,1,0,0,0,1094,1084,1,0,0,0,1094,1089,1,0,0,0,1095,65,1,0,0,0,
        1096,1097,5,5,0,0,1097,1098,5,256,0,0,1098,1099,3,332,166,0,1099,
        1100,5,263,0,0,1100,1101,3,578,289,0,1101,1102,5,257,0,0,1102,1109,
        1,0,0,0,1103,1104,5,5,0,0,1104,1105,5,256,0,0,1105,1106,3,578,289,
        0,1106,1107,5,257,0,0,1107,1109,1,0,0,0,1108,1096,1,0,0,0,1108,1103,
        1,0,0,0,1109,67,1,0,0,0,1110,1111,5,6,0,0,1111,1112,5,256,0,0,1112,
        1113,3,364,182,0,1113,1114,5,257,0,0,1114,69,1,0,0,0,1115,1116,5,
        7,0,0,1116,1117,5,256,0,0,1117,1118,3,552,276,0,1118,1119,5,257,
        0,0,1119,71,1,0,0,0,1120,1121,5,8,0,0,1121,1122,5,256,0,0,1122,1123,
        3,364,182,0,1123,1124,5,257,0,0,1124,73,1,0,0,0,1125,1126,5,9,0,
        0,1126,1127,5,256,0,0,1127,1130,3,578,289,0,1128,1129,5,263,0,0,
        1129,1131,3,568,284,0,1130,1128,1,0,0,0,1130,1131,1,0,0,0,1131,1132,
        1,0,0,0,1132,1133,5,257,0,0,1133,75,1,0,0,0,1134,1135,5,11,0,0,1135,
        1136,5,256,0,0,1136,1137,5,257,0,0,1137,77,1,0,0,0,1138,1139,5,12,
        0,0,1139,1140,5,256,0,0,1140,1147,5,257,0,0,1141,1142,5,12,0,0,1142,
        1143,5,256,0,0,1143,1144,3,332,166,0,1144,1145,5,257,0,0,1145,1147,
        1,0,0,0,1146,1138,1,0,0,0,1146,1141,1,0,0,0,1147,79,1,0,0,0,1148,
        1149,5,14,0,0,1149,1150,5,256,0,0,1150,1151,3,368,184,0,1151,1152,
        5,257,0,0,1152,1162,1,0,0,0,1153,1154,5,14,0,0,1154,1155,5,256,0,
        0,1155,1162,5,257,0,0,1156,1157,5,14,0,0,1157,1158,5,256,0,0,1158,
        1159,3,582,291,0,1159,1160,5,257,0,0,1160,1162,1,0,0,0,1161,1148,
        1,0,0,0,1161,1153,1,0,0,0,1161,1156,1,0,0,0,1162,81,1,0,0,0,1163,
        1164,5,18,0,0,1164,1165,5,256,0,0,1165,1166,3,528,264,0,1166,1167,
        5,257,0,0,1167,83,1,0,0,0,1168,1169,5,20,0,0,1169,1170,5,256,0,0,
        1170,1171,3,528,264,0,1171,1172,5,257,0,0,1172,85,1,0,0,0,1173,1174,
        5,21,0,0,1174,1175,5,256,0,0,1175,1176,5,257,0,0,1176,87,1,0,0,0,
        1177,1178,5,22,0,0,1178,1179,5,256,0,0,1179,1180,3,52,26,0,1180,
        1181,5,257,0,0,1181,89,1,0,0,0,1182,1183,5,23,0,0,1183,1184,5,256,
        0,0,1184,1185,3,370,185,0,1185,1186,5,257,0,0,1186,1237,1,0,0,0,
        1187,1188,5,23,0,0,1188,1189,5,256,0,0,1189,1237,5,257,0,0,1190,
        1191,5,23,0,0,1191,1192,5,256,0,0,1192,1193,3,372,186,0,1193,1194,
        5,257,0,0,1194,1237,1,0,0,0,1195,1196,5,23,0,0,1196,1197,5,256,0,
        0,1197,1198,3,372,186,0,1198,1199,5,263,0,0,1199,1200,3,370,185,
        0,1200,1201,5,257,0,0,1201,1237,1,0,0,0,1202,1203,5,23,0,0,1203,
        1204,5,256,0,0,1204,1205,3,344,172,0,1205,1206,5,257,0,0,1206,1237,
        1,0,0,0,1207,1208,5,23,0,0,1208,1209,5,256,0,0,1209,1210,3,578,289,
        0,1210,1211,5,257,0,0,1211,1237,1,0,0,0,1212,1213,5,23,0,0,1213,
        1214,5,256,0,0,1214,1215,3,578,289,0,1215,1216,5,263,0,0,1216,1217,
        3,370,185,0,1217,1218,5,257,0,0,1218,1237,1,0,0,0,1219,1220,5,23,
        0,0,1220,1221,5,256,0,0,1221,1222,3,336,168,0,1222,1223,5,257,0,
        0,1223,1237,1,0,0,0,1224,1225,5,23,0,0,1225,1226,5,256,0,0,1226,
        1227,3,52,26,0,1227,1228,5,257,0,0,1228,1237,1,0,0,0,1229,1230,5,
        23,0,0,1230,1231,5,256,0,0,1231,1232,3,52,26,0,1232,1233,5,263,0,
        0,1233,1234,3,370,185,0,1234,1235,5,257,0,0,1235,1237,1,0,0,0,1236,
        1182,1,0,0,0,1236,1187,1,0,0,0,1236,1190,1,0,0,0,1236,1195,1,0,0,
        0,1236,1202,1,0,0,0,1236,1207,1,0,0,0,1236,1212,1,0,0,0,1236,1219,
        1,0,0,0,1236,1224,1,0,0,0,1236,1229,1,0,0,0,1237,91,1,0,0,0,1238,
        1239,5,24,0,0,1239,1240,5,256,0,0,1240,1241,3,578,289,0,1241,1242,
        5,257,0,0,1242,1267,1,0,0,0,1243,1244,5,24,0,0,1244,1245,5,256,0,
        0,1245,1246,3,578,289,0,1246,1247,5,263,0,0,1247,1248,3,536,268,
        0,1248,1249,5,257,0,0,1249,1267,1,0,0,0,1250,1251,5,24,0,0,1251,
        1252,5,256,0,0,1252,1253,3,578,289,0,1253,1254,5,263,0,0,1254,1255,
        3,52,26,0,1255,1256,5,257,0,0,1256,1267,1,0,0,0,1257,1258,5,24,0,
        0,1258,1259,5,256,0,0,1259,1260,3,578,289,0,1260,1261,5,263,0,0,
        1261,1262,3,536,268,0,1262,1263,5,263,0,0,1263,1264,3,52,26,0,1264,
        1265,5,257,0,0,1265,1267,1,0,0,0,1266,1238,1,0,0,0,1266,1243,1,0,
        0,0,1266,1250,1,0,0,0,1266,1257,1,0,0,0,1267,93,1,0,0,0,1268,1269,
        5,25,0,0,1269,1270,5,256,0,0,1270,1273,3,578,289,0,1271,1272,5,263,
        0,0,1272,1274,3,568,284,0,1273,1271,1,0,0,0,1273,1274,1,0,0,0,1274,
        1275,1,0,0,0,1275,1276,5,257,0,0,1276,95,1,0,0,0,1277,1278,5,27,
        0,0,1278,1279,5,256,0,0,1279,1280,3,372,186,0,1280,1281,5,257,0,
        0,1281,1320,1,0,0,0,1282,1283,5,27,0,0,1283,1284,5,256,0,0,1284,
        1285,3,364,182,0,1285,1286,5,263,0,0,1286,1287,3,52,26,0,1287,1288,
        5,257,0,0,1288,1320,1,0,0,0,1289,1290,5,27,0,0,1290,1291,5,256,0,
        0,1291,1292,3,364,182,0,1292,1293,5,263,0,0,1293,1294,3,52,26,0,
        1294,1295,5,263,0,0,1295,1296,3,52,26,0,1296,1297,5,257,0,0,1297,
        1320,1,0,0,0,1298,1299,5,27,0,0,1299,1300,5,256,0,0,1300,1301,3,
        52,26,0,1301,1302,5,257,0,0,1302,1320,1,0,0,0,1303,1304,5,27,0,0,
        1304,1305,5,256,0,0,1305,1306,3,52,26,0,1306,1307,5,263,0,0,1307,
        1308,3,52,26,0,1308,1309,5,257,0,0,1309,1320,1,0,0,0,1310,1311,5,
        27,0,0,1311,1312,5,256,0,0,1312,1313,3,52,26,0,1313,1314,5,263,0,
        0,1314,1315,3,52,26,0,1315,1316,5,263,0,0,1316,1317,3,52,26,0,1317,
        1318,5,257,0,0,1318,1320,1,0,0,0,1319,1277,1,0,0,0,1319,1282,1,0,
        0,0,1319,1289,1,0,0,0,1319,1298,1,0,0,0,1319,1303,1,0,0,0,1319,1310,
        1,0,0,0,1320,97,1,0,0,0,1321,1322,5,28,0,0,1322,1323,5,256,0,0,1323,
        1324,3,552,276,0,1324,1325,5,257,0,0,1325,99,1,0,0,0,1326,1327,5,
        29,0,0,1327,1328,5,256,0,0,1328,1329,3,522,261,0,1329,1330,5,257,
        0,0,1330,101,1,0,0,0,1331,1332,5,31,0,0,1332,1333,5,256,0,0,1333,
        1334,3,532,266,0,1334,1335,5,257,0,0,1335,103,1,0,0,0,1336,1337,
        5,34,0,0,1337,1338,5,256,0,0,1338,1341,3,52,26,0,1339,1340,5,263,
        0,0,1340,1342,3,552,276,0,1341,1339,1,0,0,0,1341,1342,1,0,0,0,1342,
        1343,1,0,0,0,1343,1344,5,257,0,0,1344,1351,1,0,0,0,1345,1346,5,34,
        0,0,1346,1347,5,256,0,0,1347,1348,3,568,284,0,1348,1349,5,257,0,
        0,1349,1351,1,0,0,0,1350,1336,1,0,0,0,1350,1345,1,0,0,0,1351,105,
        1,0,0,0,1352,1353,5,35,0,0,1353,1354,5,256,0,0,1354,1355,3,524,262,
        0,1355,1356,5,257,0,0,1356,107,1,0,0,0,1357,1358,5,36,0,0,1358,1359,
        5,256,0,0,1359,1360,5,257,0,0,1360,109,1,0,0,0,1361,1362,5,38,0,
        0,1362,1363,5,256,0,0,1363,1364,3,532,266,0,1364,1365,5,257,0,0,
        1365,111,1,0,0,0,1366,1367,5,40,0,0,1367,1368,5,256,0,0,1368,1375,
        5,257,0,0,1369,1370,5,40,0,0,1370,1371,5,256,0,0,1371,1372,3,332,
        166,0,1372,1373,5,257,0,0,1373,1375,1,0,0,0,1374,1366,1,0,0,0,1374,
        1369,1,0,0,0,1375,113,1,0,0,0,1376,1377,5,41,0,0,1377,1378,5,256,
        0,0,1378,1379,5,257,0,0,1379,115,1,0,0,0,1380,1381,5,43,0,0,1381,
        1382,5,256,0,0,1382,1383,3,362,181,0,1383,1384,5,263,0,0,1384,1385,
        3,582,291,0,1385,1386,5,257,0,0,1386,117,1,0,0,0,1387,1388,5,44,
        0,0,1388,1389,5,256,0,0,1389,1390,3,52,26,0,1390,1391,5,257,0,0,
        1391,1398,1,0,0,0,1392,1393,5,44,0,0,1393,1394,5,256,0,0,1394,1395,
        3,590,295,0,1395,1396,5,257,0,0,1396,1398,1,0,0,0,1397,1387,1,0,
        0,0,1397,1392,1,0,0,0,1398,119,1,0,0,0,1399,1400,5,48,0,0,1400,1401,
        5,256,0,0,1401,1404,3,332,166,0,1402,1403,5,263,0,0,1403,1405,3,
        568,284,0,1404,1402,1,0,0,0,1404,1405,1,0,0,0,1405,1406,1,0,0,0,
        1406,1407,5,257,0,0,1407,1414,1,0,0,0,1408,1409,5,48,0,0,1409,1410,
        5,256,0,0,1410,1411,3,568,284,0,1411,1412,5,257,0,0,1412,1414,1,
        0,0,0,1413,1399,1,0,0,0,1413,1408,1,0,0,0,1414,121,1,0,0,0,1415,
        1416,5,50,0,0,1416,1417,5,256,0,0,1417,1418,3,532,266,0,1418,1419,
        5,257,0,0,1419,123,1,0,0,0,1420,1421,5,1,0,0,1421,1422,5,256,0,0,
        1422,1423,5,257,0,0,1423,125,1,0,0,0,1424,1425,5,52,0,0,1425,1426,
        5,256,0,0,1426,1427,3,532,266,0,1427,1428,5,257,0,0,1428,127,1,0,
        0,0,1429,1430,5,55,0,0,1430,1431,5,256,0,0,1431,1432,5,257,0,0,1432,
        129,1,0,0,0,1433,1434,5,60,0,0,1434,1435,5,256,0,0,1435,1436,5,257,
        0,0,1436,131,1,0,0,0,1437,1438,5,59,0,0,1438,1439,5,256,0,0,1439,
        1440,3,568,284,0,1440,1441,5,257,0,0,1441,133,1,0,0,0,1442,1443,
        5,61,0,0,1443,1444,5,256,0,0,1444,1456,5,257,0,0,1445,1446,5,61,
        0,0,1446,1447,5,256,0,0,1447,1448,3,364,182,0,1448,1449,5,257,0,
        0,1449,1456,1,0,0,0,1450,1451,5,61,0,0,1451,1452,5,256,0,0,1452,
        1453,3,52,26,0,1453,1454,5,257,0,0,1454,1456,1,0,0,0,1455,1442,1,
        0,0,0,1455,1445,1,0,0,0,1455,1450,1,0,0,0,1456,135,1,0,0,0,1457,
        1458,5,65,0,0,1458,1459,5,256,0,0,1459,1466,5,257,0,0,1460,1461,
        5,65,0,0,1461,1462,5,256,0,0,1462,1463,3,578,289,0,1463,1464,5,257,
        0,0,1464,1466,1,0,0,0,1465,1457,1,0,0,0,1465,1460,1,0,0,0,1466,137,
        1,0,0,0,1467,1468,5,67,0,0,1468,1469,5,256,0,0,1469,1470,3,364,182,
        0,1470,1471,5,257,0,0,1471,1478,1,0,0,0,1472,1473,5,67,0,0,1473,
        1474,5,256,0,0,1474,1475,3,52,26,0,1475,1476,5,257,0,0,1476,1478,
        1,0,0,0,1477,1467,1,0,0,0,1477,1472,1,0,0,0,1478,139,1,0,0,0,1479,
        1480,5,69,0,0,1480,1481,5,256,0,0,1481,1482,3,52,26,0,1482,1483,
        5,257,0,0,1483,141,1,0,0,0,1484,1485,5,70,0,0,1485,1486,5,256,0,
        0,1486,1495,5,257,0,0,1487,1488,5,70,0,0,1488,1489,5,256,0,0,1489,
        1490,3,532,266,0,1490,1491,5,263,0,0,1491,1492,3,374,187,0,1492,
        1493,5,257,0,0,1493,1495,1,0,0,0,1494,1484,1,0,0,0,1494,1487,1,0,
        0,0,1495,143,1,0,0,0,1496,1497,5,71,0,0,1497,1498,5,256,0,0,1498,
        1499,3,578,289,0,1499,1500,5,257,0,0,1500,145,1,0,0,0,1501,1502,
        5,72,0,0,1502,1503,5,256,0,0,1503,1504,3,578,289,0,1504,1505,5,257,
        0,0,1505,1517,1,0,0,0,1506,1507,5,72,0,0,1507,1508,5,256,0,0,1508,
        1509,3,542,271,0,1509,1510,5,257,0,0,1510,1517,1,0,0,0,1511,1512,
        5,72,0,0,1512,1513,5,256,0,0,1513,1514,3,52,26,0,1514,1515,5,257,
        0,0,1515,1517,1,0,0,0,1516,1501,1,0,0,0,1516,1506,1,0,0,0,1516,1511,
        1,0,0,0,1517,147,1,0,0,0,1518,1519,5,79,0,0,1519,1520,5,256,0,0,
        1520,1527,5,257,0,0,1521,1522,5,79,0,0,1522,1523,5,256,0,0,1523,
        1524,3,578,289,0,1524,1525,5,257,0,0,1525,1527,1,0,0,0,1526,1518,
        1,0,0,0,1526,1521,1,0,0,0,1527,149,1,0,0,0,1528,1529,5,78,0,0,1529,
        1530,5,256,0,0,1530,1537,5,257,0,0,1531,1532,5,78,0,0,1532,1533,
        5,256,0,0,1533,1534,3,578,289,0,1534,1535,5,257,0,0,1535,1537,1,
        0,0,0,1536,1528,1,0,0,0,1536,1531,1,0,0,0,1537,151,1,0,0,0,1538,
        1539,5,81,0,0,1539,1540,5,256,0,0,1540,1541,3,580,290,0,1541,1542,
        5,257,0,0,1542,1604,1,0,0,0,1543,1544,5,81,0,0,1544,1545,5,256,0,
        0,1545,1546,3,580,290,0,1546,1547,5,263,0,0,1547,1548,3,532,266,
        0,1548,1549,5,257,0,0,1549,1604,1,0,0,0,1550,1551,5,81,0,0,1551,
        1552,5,256,0,0,1552,1553,3,580,290,0,1553,1554,5,263,0,0,1554,1555,
        3,364,182,0,1555,1556,5,257,0,0,1556,1604,1,0,0,0,1557,1558,5,81,
        0,0,1558,1559,5,256,0,0,1559,1560,3,526,263,0,1560,1561,5,263,0,
        0,1561,1562,3,580,290,0,1562,1563,5,263,0,0,1563,1564,3,532,266,
        0,1564,1565,5,257,0,0,1565,1604,1,0,0,0,1566,1567,5,81,0,0,1567,
        1568,5,256,0,0,1568,1569,3,526,263,0,1569,1570,5,263,0,0,1570,1571,
        3,580,290,0,1571,1572,5,263,0,0,1572,1573,3,364,182,0,1573,1574,
        5,257,0,0,1574,1604,1,0,0,0,1575,1576,5,81,0,0,1576,1577,5,256,0,
        0,1577,1578,3,580,290,0,1578,1579,5,263,0,0,1579,1580,3,52,26,0,
        1580,1581,5,257,0,0,1581,1604,1,0,0,0,1582,1583,5,81,0,0,1583,1584,
        5,256,0,0,1584,1585,3,336,168,0,1585,1586,5,263,0,0,1586,1587,3,
        532,266,0,1587,1588,5,257,0,0,1588,1604,1,0,0,0,1589,1590,5,81,0,
        0,1590,1591,5,256,0,0,1591,1592,3,336,168,0,1592,1593,5,263,0,0,
        1593,1594,3,364,182,0,1594,1595,5,257,0,0,1595,1604,1,0,0,0,1596,
        1597,5,81,0,0,1597,1598,5,256,0,0,1598,1599,3,336,168,0,1599,1600,
        5,263,0,0,1600,1601,3,52,26,0,1601,1602,5,257,0,0,1602,1604,1,0,
        0,0,1603,1538,1,0,0,0,1603,1543,1,0,0,0,1603,1550,1,0,0,0,1603,1557,
        1,0,0,0,1603,1566,1,0,0,0,1603,1575,1,0,0,0,1603,1582,1,0,0,0,1603,
        1589,1,0,0,0,1603,1596,1,0,0,0,1604,153,1,0,0,0,1605,1606,5,82,0,
        0,1606,1607,5,256,0,0,1607,1610,3,532,266,0,1608,1609,5,263,0,0,
        1609,1611,3,534,267,0,1610,1608,1,0,0,0,1610,1611,1,0,0,0,1611,1612,
        1,0,0,0,1612,1613,5,257,0,0,1613,1620,1,0,0,0,1614,1615,5,82,0,0,
        1615,1616,5,256,0,0,1616,1617,3,364,182,0,1617,1618,5,257,0,0,1618,
        1620,1,0,0,0,1619,1605,1,0,0,0,1619,1614,1,0,0,0,1620,155,1,0,0,
        0,1621,1622,5,83,0,0,1622,1623,5,256,0,0,1623,1624,3,364,182,0,1624,
        1625,5,257,0,0,1625,1636,1,0,0,0,1626,1627,5,83,0,0,1627,1628,5,
        256,0,0,1628,1631,3,580,290,0,1629,1630,5,263,0,0,1630,1632,3,568,
        284,0,1631,1629,1,0,0,0,1631,1632,1,0,0,0,1632,1633,1,0,0,0,1633,
        1634,5,257,0,0,1634,1636,1,0,0,0,1635,1621,1,0,0,0,1635,1626,1,0,
        0,0,1636,157,1,0,0,0,1637,1638,5,84,0,0,1638,1639,5,256,0,0,1639,
        1640,3,364,182,0,1640,1641,5,257,0,0,1641,1652,1,0,0,0,1642,1643,
        5,84,0,0,1643,1644,5,256,0,0,1644,1647,3,526,263,0,1645,1646,5,263,
        0,0,1646,1648,3,528,264,0,1647,1645,1,0,0,0,1647,1648,1,0,0,0,1648,
        1649,1,0,0,0,1649,1650,5,257,0,0,1650,1652,1,0,0,0,1651,1637,1,0,
        0,0,1651,1642,1,0,0,0,1652,159,1,0,0,0,1653,1654,5,86,0,0,1654,1655,
        5,256,0,0,1655,1656,3,580,290,0,1656,1657,5,257,0,0,1657,161,1,0,
        0,0,1658,1659,5,87,0,0,1659,1660,5,256,0,0,1660,1663,3,532,266,0,
        1661,1662,5,263,0,0,1662,1664,3,534,267,0,1663,1661,1,0,0,0,1663,
        1664,1,0,0,0,1664,1665,1,0,0,0,1665,1666,5,257,0,0,1666,1673,1,0,
        0,0,1667,1668,5,87,0,0,1668,1669,5,256,0,0,1669,1670,3,364,182,0,
        1670,1671,5,257,0,0,1671,1673,1,0,0,0,1672,1658,1,0,0,0,1672,1667,
        1,0,0,0,1673,163,1,0,0,0,1674,1675,5,89,0,0,1675,1676,5,256,0,0,
        1676,1677,5,257,0,0,1677,165,1,0,0,0,1678,1679,5,90,0,0,1679,1680,
        5,256,0,0,1680,1681,5,257,0,0,1681,167,1,0,0,0,1682,1683,5,92,0,
        0,1683,1684,5,256,0,0,1684,1685,3,528,264,0,1685,1686,5,257,0,0,
        1686,169,1,0,0,0,1687,1688,5,94,0,0,1688,1689,5,256,0,0,1689,1690,
        3,528,264,0,1690,1691,5,257,0,0,1691,171,1,0,0,0,1692,1693,5,102,
        0,0,1693,1694,5,256,0,0,1694,1695,3,532,266,0,1695,1696,5,257,0,
        0,1696,173,1,0,0,0,1697,1698,5,103,0,0,1698,1699,5,256,0,0,1699,
        1700,5,257,0,0,1700,175,1,0,0,0,1701,1702,5,98,0,0,1702,1703,5,256,
        0,0,1703,1704,5,257,0,0,1704,177,1,0,0,0,1705,1706,5,100,0,0,1706,
        1707,5,256,0,0,1707,1708,3,534,267,0,1708,1709,5,257,0,0,1709,179,
        1,0,0,0,1710,1711,5,106,0,0,1711,1712,5,256,0,0,1712,1713,3,532,
        266,0,1713,1714,5,257,0,0,1714,1721,1,0,0,0,1715,1716,5,106,0,0,
        1716,1717,5,256,0,0,1717,1718,3,364,182,0,1718,1719,5,257,0,0,1719,
        1721,1,0,0,0,1720,1710,1,0,0,0,1720,1715,1,0,0,0,1721,181,1,0,0,
        0,1722,1723,5,108,0,0,1723,1724,5,256,0,0,1724,1725,5,257,0,0,1725,
        183,1,0,0,0,1726,1727,5,111,0,0,1727,1728,5,256,0,0,1728,1729,5,
        257,0,0,1729,185,1,0,0,0,1730,1731,5,113,0,0,1731,1732,5,256,0,0,
        1732,1739,5,257,0,0,1733,1734,5,113,0,0,1734,1735,5,256,0,0,1735,
        1736,3,332,166,0,1736,1737,5,257,0,0,1737,1739,1,0,0,0,1738,1730,
        1,0,0,0,1738,1733,1,0,0,0,1739,187,1,0,0,0,1740,1741,5,114,0,0,1741,
        1742,5,256,0,0,1742,1743,3,332,166,0,1743,1744,5,263,0,0,1744,1745,
        3,520,260,0,1745,1746,5,257,0,0,1746,1753,1,0,0,0,1747,1748,5,114,
        0,0,1748,1749,5,256,0,0,1749,1750,3,520,260,0,1750,1751,5,257,0,
        0,1751,1753,1,0,0,0,1752,1740,1,0,0,0,1752,1747,1,0,0,0,1753,189,
        1,0,0,0,1754,1755,5,116,0,0,1755,1756,5,256,0,0,1756,1757,3,52,26,
        0,1757,1758,5,257,0,0,1758,191,1,0,0,0,1759,1760,5,117,0,0,1760,
        1761,5,256,0,0,1761,1768,5,257,0,0,1762,1763,5,117,0,0,1763,1764,
        5,256,0,0,1764,1765,3,578,289,0,1765,1766,5,257,0,0,1766,1768,1,
        0,0,0,1767,1759,1,0,0,0,1767,1762,1,0,0,0,1768,193,1,0,0,0,1769,
        1770,5,120,0,0,1770,1771,5,256,0,0,1771,1778,5,257,0,0,1772,1773,
        5,120,0,0,1773,1774,5,256,0,0,1774,1775,3,332,166,0,1775,1776,5,
        257,0,0,1776,1778,1,0,0,0,1777,1769,1,0,0,0,1777,1772,1,0,0,0,1778,
        195,1,0,0,0,1779,1780,5,121,0,0,1780,1781,5,256,0,0,1781,1782,3,
        52,26,0,1782,1783,5,257,0,0,1783,197,1,0,0,0,1784,1785,5,122,0,0,
        1785,1786,5,256,0,0,1786,1787,3,552,276,0,1787,1788,5,257,0,0,1788,
        199,1,0,0,0,1789,1790,5,123,0,0,1790,1791,5,256,0,0,1791,1792,3,
        578,289,0,1792,1793,5,257,0,0,1793,201,1,0,0,0,1794,1795,5,124,0,
        0,1795,1796,5,256,0,0,1796,1803,5,257,0,0,1797,1798,5,124,0,0,1798,
        1799,5,256,0,0,1799,1800,3,332,166,0,1800,1801,5,257,0,0,1801,1803,
        1,0,0,0,1802,1794,1,0,0,0,1802,1797,1,0,0,0,1803,203,1,0,0,0,1804,
        1805,5,126,0,0,1805,1806,5,256,0,0,1806,1813,5,257,0,0,1807,1808,
        5,126,0,0,1808,1809,5,256,0,0,1809,1810,3,332,166,0,1810,1811,5,
        257,0,0,1811,1813,1,0,0,0,1812,1804,1,0,0,0,1812,1807,1,0,0,0,1813,
        205,1,0,0,0,1814,1815,5,128,0,0,1815,1816,5,256,0,0,1816,1817,3,
        532,266,0,1817,1818,5,257,0,0,1818,207,1,0,0,0,1819,1820,5,130,0,
        0,1820,1821,5,256,0,0,1821,1833,5,257,0,0,1822,1823,5,130,0,0,1823,
        1824,5,256,0,0,1824,1825,3,538,269,0,1825,1826,5,257,0,0,1826,1833,
        1,0,0,0,1827,1828,5,130,0,0,1828,1829,5,256,0,0,1829,1830,3,52,26,
        0,1830,1831,5,257,0,0,1831,1833,1,0,0,0,1832,1819,1,0,0,0,1832,1822,
        1,0,0,0,1832,1827,1,0,0,0,1833,209,1,0,0,0,1834,1835,5,129,0,0,1835,
        1836,5,256,0,0,1836,1848,5,257,0,0,1837,1838,5,129,0,0,1838,1839,
        5,256,0,0,1839,1840,3,538,269,0,1840,1841,5,257,0,0,1841,1848,1,
        0,0,0,1842,1843,5,129,0,0,1843,1844,5,256,0,0,1844,1845,3,52,26,
        0,1845,1846,5,257,0,0,1846,1848,1,0,0,0,1847,1834,1,0,0,0,1847,1837,
        1,0,0,0,1847,1842,1,0,0,0,1848,211,1,0,0,0,1849,1850,5,131,0,0,1850,
        1851,5,256,0,0,1851,1858,5,257,0,0,1852,1853,5,131,0,0,1853,1854,
        5,256,0,0,1854,1855,3,332,166,0,1855,1856,5,257,0,0,1856,1858,1,
        0,0,0,1857,1849,1,0,0,0,1857,1852,1,0,0,0,1858,213,1,0,0,0,1859,
        1860,5,139,0,0,1860,1861,5,256,0,0,1861,1862,3,364,182,0,1862,1863,
        5,257,0,0,1863,215,1,0,0,0,1864,1865,5,144,0,0,1865,1866,5,256,0,
        0,1866,1867,3,52,26,0,1867,1868,5,257,0,0,1868,217,1,0,0,0,1869,
        1870,5,152,0,0,1870,1871,5,256,0,0,1871,1872,3,364,182,0,1872,1873,
        5,263,0,0,1873,1874,3,52,26,0,1874,1875,5,257,0,0,1875,1912,1,0,
        0,0,1876,1877,5,152,0,0,1877,1878,5,256,0,0,1878,1879,3,342,171,
        0,1879,1880,5,263,0,0,1880,1881,3,538,269,0,1881,1882,5,257,0,0,
        1882,1912,1,0,0,0,1883,1884,5,152,0,0,1884,1885,5,256,0,0,1885,1886,
        3,342,171,0,1886,1887,5,263,0,0,1887,1888,3,538,269,0,1888,1889,
        5,263,0,0,1889,1890,3,352,176,0,1890,1891,5,257,0,0,1891,1912,1,
        0,0,0,1892,1893,5,152,0,0,1893,1894,5,256,0,0,1894,1895,3,342,171,
        0,1895,1896,5,263,0,0,1896,1897,3,52,26,0,1897,1898,5,257,0,0,1898,
        1912,1,0,0,0,1899,1900,5,152,0,0,1900,1901,5,256,0,0,1901,1902,3,
        532,266,0,1902,1903,5,263,0,0,1903,1904,3,52,26,0,1904,1905,5,257,
        0,0,1905,1912,1,0,0,0,1906,1907,5,152,0,0,1907,1908,5,256,0,0,1908,
        1909,3,52,26,0,1909,1910,5,257,0,0,1910,1912,1,0,0,0,1911,1869,1,
        0,0,0,1911,1876,1,0,0,0,1911,1883,1,0,0,0,1911,1892,1,0,0,0,1911,
        1899,1,0,0,0,1911,1906,1,0,0,0,1912,219,1,0,0,0,1913,1914,5,153,
        0,0,1914,1915,5,256,0,0,1915,1916,3,52,26,0,1916,1917,5,257,0,0,
        1917,221,1,0,0,0,1918,1919,5,156,0,0,1919,1920,5,256,0,0,1920,1921,
        3,552,276,0,1921,1922,5,257,0,0,1922,223,1,0,0,0,1923,1924,5,155,
        0,0,1924,1925,5,256,0,0,1925,1932,5,257,0,0,1926,1927,5,155,0,0,
        1927,1928,5,256,0,0,1928,1929,3,332,166,0,1929,1930,5,257,0,0,1930,
        1932,1,0,0,0,1931,1923,1,0,0,0,1931,1926,1,0,0,0,1932,225,1,0,0,
        0,1933,1934,5,157,0,0,1934,1935,5,256,0,0,1935,1936,5,257,0,0,1936,
        227,1,0,0,0,1937,1938,5,159,0,0,1938,1939,5,256,0,0,1939,1940,3,
        528,264,0,1940,1941,5,257,0,0,1941,229,1,0,0,0,1942,1943,5,160,0,
        0,1943,1944,5,256,0,0,1944,1945,3,528,264,0,1945,1946,5,257,0,0,
        1946,231,1,0,0,0,1947,1948,5,162,0,0,1948,1949,5,256,0,0,1949,1950,
        5,257,0,0,1950,233,1,0,0,0,1951,1952,5,165,0,0,1952,1953,5,256,0,
        0,1953,1960,5,257,0,0,1954,1955,5,165,0,0,1955,1956,5,256,0,0,1956,
        1957,3,522,261,0,1957,1958,5,257,0,0,1958,1960,1,0,0,0,1959,1951,
        1,0,0,0,1959,1954,1,0,0,0,1960,235,1,0,0,0,1961,1962,5,166,0,0,1962,
        1963,5,256,0,0,1963,1964,5,257,0,0,1964,237,1,0,0,0,1965,1966,5,
        168,0,0,1966,1967,5,256,0,0,1967,1968,5,257,0,0,1968,239,1,0,0,0,
        1969,1970,5,177,0,0,1970,1971,5,256,0,0,1971,1972,3,532,266,0,1972,
        1973,5,257,0,0,1973,241,1,0,0,0,1974,1975,5,171,0,0,1975,1976,5,
        256,0,0,1976,1983,5,257,0,0,1977,1978,5,171,0,0,1978,1979,5,256,
        0,0,1979,1980,3,578,289,0,1980,1981,5,257,0,0,1981,1983,1,0,0,0,
        1982,1974,1,0,0,0,1982,1977,1,0,0,0,1983,243,1,0,0,0,1984,1985,5,
        172,0,0,1985,1986,5,256,0,0,1986,1989,3,578,289,0,1987,1988,5,263,
        0,0,1988,1990,3,568,284,0,1989,1987,1,0,0,0,1989,1990,1,0,0,0,1990,
        1991,1,0,0,0,1991,1992,5,257,0,0,1992,245,1,0,0,0,1993,1994,5,173,
        0,0,1994,1995,5,256,0,0,1995,1996,3,568,284,0,1996,1997,5,257,0,
        0,1997,247,1,0,0,0,1998,1999,5,176,0,0,1999,2000,5,256,0,0,2000,
        2001,3,352,176,0,2001,2002,5,263,0,0,2002,2003,3,532,266,0,2003,
        2004,5,263,0,0,2004,2007,3,532,266,0,2005,2006,5,263,0,0,2006,2008,
        3,534,267,0,2007,2005,1,0,0,0,2007,2008,1,0,0,0,2008,2009,1,0,0,
        0,2009,2010,5,257,0,0,2010,2035,1,0,0,0,2011,2012,5,176,0,0,2012,
        2013,5,256,0,0,2013,2014,3,352,176,0,2014,2015,5,263,0,0,2015,2016,
        3,538,269,0,2016,2017,5,257,0,0,2017,2035,1,0,0,0,2018,2019,5,176,
        0,0,2019,2020,5,256,0,0,2020,2021,3,532,266,0,2021,2022,5,263,0,
        0,2022,2025,3,532,266,0,2023,2024,5,263,0,0,2024,2026,3,534,267,
        0,2025,2023,1,0,0,0,2025,2026,1,0,0,0,2026,2027,1,0,0,0,2027,2028,
        5,257,0,0,2028,2035,1,0,0,0,2029,2030,5,176,0,0,2030,2031,5,256,
        0,0,2031,2032,3,538,269,0,2032,2033,5,257,0,0,2033,2035,1,0,0,0,
        2034,1998,1,0,0,0,2034,2011,1,0,0,0,2034,2018,1,0,0,0,2034,2029,
        1,0,0,0,2035,249,1,0,0,0,2036,2037,5,174,0,0,2037,2038,5,256,0,0,
        2038,2039,3,568,284,0,2039,2040,5,257,0,0,2040,251,1,0,0,0,2041,
        2042,5,178,0,0,2042,2043,5,256,0,0,2043,2044,3,332,166,0,2044,2045,
        5,263,0,0,2045,2046,3,520,260,0,2046,2047,5,263,0,0,2047,2048,3,
        520,260,0,2048,2049,5,257,0,0,2049,2058,1,0,0,0,2050,2051,5,178,
        0,0,2051,2052,5,256,0,0,2052,2053,3,520,260,0,2053,2054,5,263,0,
        0,2054,2055,3,520,260,0,2055,2056,5,257,0,0,2056,2058,1,0,0,0,2057,
        2041,1,0,0,0,2057,2050,1,0,0,0,2058,253,1,0,0,0,2059,2060,5,179,
        0,0,2060,2061,5,256,0,0,2061,2062,5,257,0,0,2062,255,1,0,0,0,2063,
        2064,5,184,0,0,2064,2065,5,256,0,0,2065,2066,3,578,289,0,2066,2067,
        5,263,0,0,2067,2068,3,52,26,0,2068,2069,5,257,0,0,2069,2076,1,0,
        0,0,2070,2071,5,184,0,0,2071,2072,5,256,0,0,2072,2073,3,52,26,0,
        2073,2074,5,257,0,0,2074,2076,1,0,0,0,2075,2063,1,0,0,0,2075,2070,
        1,0,0,0,2076,257,1,0,0,0,2077,2078,5,183,0,0,2078,2079,5,256,0,0,
        2079,2080,3,580,290,0,2080,2081,5,263,0,0,2081,2082,3,580,290,0,
        2082,2083,5,257,0,0,2083,2094,1,0,0,0,2084,2085,5,183,0,0,2085,2086,
        5,256,0,0,2086,2087,3,332,166,0,2087,2088,5,263,0,0,2088,2089,3,
        580,290,0,2089,2090,5,263,0,0,2090,2091,3,580,290,0,2091,2092,5,
        257,0,0,2092,2094,1,0,0,0,2093,2077,1,0,0,0,2093,2084,1,0,0,0,2094,
        259,1,0,0,0,2095,2096,5,185,0,0,2096,2097,5,256,0,0,2097,2098,5,
        257,0,0,2098,261,1,0,0,0,2099,2100,5,187,0,0,2100,2101,5,256,0,0,
        2101,2108,5,257,0,0,2102,2103,5,187,0,0,2103,2104,5,256,0,0,2104,
        2105,3,332,166,0,2105,2106,5,257,0,0,2106,2108,1,0,0,0,2107,2099,
        1,0,0,0,2107,2102,1,0,0,0,2108,263,1,0,0,0,2109,2110,5,188,0,0,2110,
        2111,5,256,0,0,2111,2112,3,374,187,0,2112,2113,5,257,0,0,2113,2118,
        1,0,0,0,2114,2115,5,188,0,0,2115,2116,5,256,0,0,2116,2118,5,257,
        0,0,2117,2109,1,0,0,0,2117,2114,1,0,0,0,2118,265,1,0,0,0,2119,2120,
        5,189,0,0,2120,2121,5,256,0,0,2121,2122,3,332,166,0,2122,2123,5,
        263,0,0,2123,2124,3,582,291,0,2124,2125,5,257,0,0,2125,2132,1,0,
        0,0,2126,2127,5,189,0,0,2127,2128,5,256,0,0,2128,2129,3,582,291,
        0,2129,2130,5,257,0,0,2130,2132,1,0,0,0,2131,2119,1,0,0,0,2131,2126,
        1,0,0,0,2132,267,1,0,0,0,2133,2134,5,192,0,0,2134,2135,5,256,0,0,
        2135,2136,3,354,177,0,2136,2137,5,257,0,0,2137,2187,1,0,0,0,2138,
        2139,5,192,0,0,2139,2140,5,256,0,0,2140,2141,3,356,178,0,2141,2142,
        5,263,0,0,2142,2143,3,578,289,0,2143,2144,5,257,0,0,2144,2187,1,
        0,0,0,2145,2146,5,192,0,0,2146,2147,5,256,0,0,2147,2148,3,356,178,
        0,2148,2149,5,263,0,0,2149,2150,3,578,289,0,2150,2151,5,263,0,0,
        2151,2154,3,578,289,0,2152,2153,5,263,0,0,2153,2155,3,568,284,0,
        2154,2152,1,0,0,0,2154,2155,1,0,0,0,2155,2156,1,0,0,0,2156,2157,
        5,257,0,0,2157,2187,1,0,0,0,2158,2159,5,192,0,0,2159,2160,5,256,
        0,0,2160,2161,3,356,178,0,2161,2162,5,263,0,0,2162,2163,3,52,26,
        0,2163,2164,5,257,0,0,2164,2187,1,0,0,0,2165,2166,5,192,0,0,2166,
        2167,5,256,0,0,2167,2168,3,578,289,0,2168,2169,5,257,0,0,2169,2187,
        1,0,0,0,2170,2171,5,192,0,0,2171,2172,5,256,0,0,2172,2173,3,578,
        289,0,2173,2174,5,263,0,0,2174,2177,3,578,289,0,2175,2176,5,263,
        0,0,2176,2178,3,568,284,0,2177,2175,1,0,0,0,2177,2178,1,0,0,0,2178,
        2179,1,0,0,0,2179,2180,5,257,0,0,2180,2187,1,0,0,0,2181,2182,5,192,
        0,0,2182,2183,5,256,0,0,2183,2184,3,52,26,0,2184,2185,5,257,0,0,
        2185,2187,1,0,0,0,2186,2133,1,0,0,0,2186,2138,1,0,0,0,2186,2145,
        1,0,0,0,2186,2158,1,0,0,0,2186,2165,1,0,0,0,2186,2170,1,0,0,0,2186,
        2181,1,0,0,0,2187,269,1,0,0,0,2188,2189,5,195,0,0,2189,2190,5,256,
        0,0,2190,2191,5,257,0,0,2191,271,1,0,0,0,2192,2193,5,197,0,0,2193,
        2194,5,256,0,0,2194,2195,3,52,26,0,2195,2196,5,257,0,0,2196,273,
        1,0,0,0,2197,2198,5,198,0,0,2198,2199,5,256,0,0,2199,2200,5,257,
        0,0,2200,275,1,0,0,0,2201,2202,5,200,0,0,2202,2203,5,256,0,0,2203,
        2204,3,332,166,0,2204,2205,5,263,0,0,2205,2206,3,520,260,0,2206,
        2207,5,257,0,0,2207,2214,1,0,0,0,2208,2209,5,200,0,0,2209,2210,5,
        256,0,0,2210,2211,3,520,260,0,2211,2212,5,257,0,0,2212,2214,1,0,
        0,0,2213,2201,1,0,0,0,2213,2208,1,0,0,0,2214,277,1,0,0,0,2215,2216,
        5,201,0,0,2216,2217,5,256,0,0,2217,2218,3,580,290,0,2218,2219,5,
        257,0,0,2219,2228,1,0,0,0,2220,2221,5,201,0,0,2221,2222,5,256,0,
        0,2222,2223,3,332,166,0,2223,2224,5,263,0,0,2224,2225,3,580,290,
        0,2225,2226,5,257,0,0,2226,2228,1,0,0,0,2227,2215,1,0,0,0,2227,2220,
        1,0,0,0,2228,279,1,0,0,0,2229,2230,5,203,0,0,2230,2231,5,256,0,0,
        2231,2232,3,578,289,0,2232,2233,5,257,0,0,2233,281,1,0,0,0,2234,
        2235,5,204,0,0,2235,2236,5,256,0,0,2236,2237,3,578,289,0,2237,2238,
        5,257,0,0,2238,283,1,0,0,0,2239,2240,5,205,0,0,2240,2241,5,256,0,
        0,2241,2242,3,582,291,0,2242,2243,5,257,0,0,2243,2268,1,0,0,0,2244,
        2245,5,205,0,0,2245,2246,5,256,0,0,2246,2247,3,332,166,0,2247,2248,
        5,263,0,0,2248,2249,3,582,291,0,2249,2250,5,257,0,0,2250,2268,1,
        0,0,0,2251,2252,5,205,0,0,2252,2253,5,256,0,0,2253,2254,3,582,291,
        0,2254,2255,5,263,0,0,2255,2256,3,582,291,0,2256,2257,5,257,0,0,
        2257,2268,1,0,0,0,2258,2259,5,205,0,0,2259,2260,5,256,0,0,2260,2261,
        3,332,166,0,2261,2262,5,263,0,0,2262,2263,3,582,291,0,2263,2264,
        5,263,0,0,2264,2265,3,582,291,0,2265,2266,5,257,0,0,2266,2268,1,
        0,0,0,2267,2239,1,0,0,0,2267,2244,1,0,0,0,2267,2251,1,0,0,0,2267,
        2258,1,0,0,0,2268,285,1,0,0,0,2269,2270,5,206,0,0,2270,2271,5,256,
        0,0,2271,2278,5,257,0,0,2272,2273,5,206,0,0,2273,2274,5,256,0,0,
        2274,2275,3,332,166,0,2275,2276,5,257,0,0,2276,2278,1,0,0,0,2277,
        2269,1,0,0,0,2277,2272,1,0,0,0,2278,287,1,0,0,0,2279,2280,5,209,
        0,0,2280,2281,5,256,0,0,2281,2300,5,257,0,0,2282,2283,5,209,0,0,
        2283,2284,5,256,0,0,2284,2285,3,332,166,0,2285,2286,5,257,0,0,2286,
        2300,1,0,0,0,2287,2288,5,209,0,0,2288,2289,5,256,0,0,2289,2290,3,
        332,166,0,2290,2291,5,263,0,0,2291,2292,3,520,260,0,2292,2293,5,
        257,0,0,2293,2300,1,0,0,0,2294,2295,5,209,0,0,2295,2296,5,256,0,
        0,2296,2297,3,520,260,0,2297,2298,5,257,0,0,2298,2300,1,0,0,0,2299,
        2279,1,0,0,0,2299,2282,1,0,0,0,2299,2287,1,0,0,0,2299,2294,1,0,0,
        0,2300,289,1,0,0,0,2301,2302,5,212,0,0,2302,2303,5,256,0,0,2303,
        2304,3,582,291,0,2304,2305,5,257,0,0,2305,291,1,0,0,0,2306,2307,
        5,213,0,0,2307,2308,5,256,0,0,2308,2309,3,582,291,0,2309,2310,5,
        257,0,0,2310,293,1,0,0,0,2311,2312,5,214,0,0,2312,2313,5,256,0,0,
        2313,2316,3,346,173,0,2314,2315,5,263,0,0,2315,2317,3,568,284,0,
        2316,2314,1,0,0,0,2316,2317,1,0,0,0,2317,2318,1,0,0,0,2318,2319,
        5,257,0,0,2319,2336,1,0,0,0,2320,2321,5,214,0,0,2321,2322,5,256,
        0,0,2322,2323,3,578,289,0,2323,2324,5,257,0,0,2324,2336,1,0,0,0,
        2325,2326,5,214,0,0,2326,2327,5,256,0,0,2327,2328,3,542,271,0,2328,
        2329,5,257,0,0,2329,2336,1,0,0,0,2330,2331,5,214,0,0,2331,2332,5,
        256,0,0,2332,2333,3,52,26,0,2333,2334,5,257,0,0,2334,2336,1,0,0,
        0,2335,2311,1,0,0,0,2335,2320,1,0,0,0,2335,2325,1,0,0,0,2335,2330,
        1,0,0,0,2336,295,1,0,0,0,2337,2338,5,222,0,0,2338,2339,5,256,0,0,
        2339,2342,3,346,173,0,2340,2341,5,263,0,0,2341,2343,3,528,264,0,
        2342,2340,1,0,0,0,2342,2343,1,0,0,0,2343,2344,1,0,0,0,2344,2345,
        5,257,0,0,2345,297,1,0,0,0,2346,2347,5,218,0,0,2347,2348,5,256,0,
        0,2348,2355,5,257,0,0,2349,2350,5,218,0,0,2350,2351,5,256,0,0,2351,
        2352,3,332,166,0,2352,2353,5,257,0,0,2353,2355,1,0,0,0,2354,2346,
        1,0,0,0,2354,2349,1,0,0,0,2355,299,1,0,0,0,2356,2357,5,221,0,0,2357,
        2358,5,256,0,0,2358,2365,5,257,0,0,2359,2360,5,221,0,0,2360,2361,
        5,256,0,0,2361,2362,3,332,166,0,2362,2363,5,257,0,0,2363,2365,1,
        0,0,0,2364,2356,1,0,0,0,2364,2359,1,0,0,0,2365,301,1,0,0,0,2366,
        2367,5,223,0,0,2367,2368,5,256,0,0,2368,2369,3,346,173,0,2369,2370,
        5,257,0,0,2370,303,1,0,0,0,2371,2372,5,224,0,0,2372,2373,5,256,0,
        0,2373,2380,5,257,0,0,2374,2375,5,224,0,0,2375,2376,5,256,0,0,2376,
        2377,3,578,289,0,2377,2378,5,257,0,0,2378,2380,1,0,0,0,2379,2371,
        1,0,0,0,2379,2374,1,0,0,0,2380,305,1,0,0,0,2381,2382,5,225,0,0,2382,
        2383,5,256,0,0,2383,2390,5,257,0,0,2384,2385,5,225,0,0,2385,2386,
        5,256,0,0,2386,2387,3,332,166,0,2387,2388,5,257,0,0,2388,2390,1,
        0,0,0,2389,2381,1,0,0,0,2389,2384,1,0,0,0,2390,307,1,0,0,0,2391,
        2392,5,229,0,0,2392,2393,5,256,0,0,2393,2394,5,257,0,0,2394,309,
        1,0,0,0,2395,2396,5,230,0,0,2396,2397,5,256,0,0,2397,2398,3,552,
        276,0,2398,2399,5,257,0,0,2399,311,1,0,0,0,2400,2401,5,231,0,0,2401,
        2402,5,256,0,0,2402,2403,3,364,182,0,2403,2404,5,257,0,0,2404,2411,
        1,0,0,0,2405,2406,5,231,0,0,2406,2407,5,256,0,0,2407,2408,3,52,26,
        0,2408,2409,5,257,0,0,2409,2411,1,0,0,0,2410,2400,1,0,0,0,2410,2405,
        1,0,0,0,2411,313,1,0,0,0,2412,2413,5,236,0,0,2413,2414,5,256,0,0,
        2414,2415,5,257,0,0,2415,315,1,0,0,0,2416,2417,5,234,0,0,2417,2418,
        5,256,0,0,2418,2419,3,568,284,0,2419,2420,5,257,0,0,2420,2431,1,
        0,0,0,2421,2422,5,234,0,0,2422,2423,5,256,0,0,2423,2426,3,588,294,
        0,2424,2425,5,263,0,0,2425,2427,3,568,284,0,2426,2424,1,0,0,0,2426,
        2427,1,0,0,0,2427,2428,1,0,0,0,2428,2429,5,257,0,0,2429,2431,1,0,
        0,0,2430,2416,1,0,0,0,2430,2421,1,0,0,0,2431,317,1,0,0,0,2432,2433,
        5,235,0,0,2433,2434,5,256,0,0,2434,2435,3,568,284,0,2435,2436,5,
        257,0,0,2436,319,1,0,0,0,2437,2438,5,238,0,0,2438,2439,5,256,0,0,
        2439,2440,3,364,182,0,2440,2441,5,257,0,0,2441,2455,1,0,0,0,2442,
        2443,5,238,0,0,2443,2444,5,256,0,0,2444,2445,3,578,289,0,2445,2446,
        5,263,0,0,2446,2447,3,364,182,0,2447,2448,5,257,0,0,2448,2455,1,
        0,0,0,2449,2450,5,238,0,0,2450,2451,5,256,0,0,2451,2452,3,52,26,
        0,2452,2453,5,257,0,0,2453,2455,1,0,0,0,2454,2437,1,0,0,0,2454,2442,
        1,0,0,0,2454,2449,1,0,0,0,2455,321,1,0,0,0,2456,2457,5,239,0,0,2457,
        2460,5,256,0,0,2458,2461,3,432,216,0,2459,2461,3,578,289,0,2460,
        2458,1,0,0,0,2460,2459,1,0,0,0,2461,2462,1,0,0,0,2462,2463,5,257,
        0,0,2463,2479,1,0,0,0,2464,2465,5,239,0,0,2465,2468,5,256,0,0,2466,
        2469,3,432,216,0,2467,2469,3,578,289,0,2468,2466,1,0,0,0,2468,2467,
        1,0,0,0,2469,2470,1,0,0,0,2470,2474,5,263,0,0,2471,2475,3,442,221,
        0,2472,2475,3,446,223,0,2473,2475,3,532,266,0,2474,2471,1,0,0,0,
        2474,2472,1,0,0,0,2474,2473,1,0,0,0,2475,2476,1,0,0,0,2476,2477,
        5,257,0,0,2477,2479,1,0,0,0,2478,2456,1,0,0,0,2478,2464,1,0,0,0,
        2479,323,1,0,0,0,2480,2481,5,249,0,0,2481,2482,5,256,0,0,2482,2483,
        5,257,0,0,2483,325,1,0,0,0,2484,2486,5,146,0,0,2485,2484,1,0,0,0,
        2485,2486,1,0,0,0,2486,2487,1,0,0,0,2487,2488,7,0,0,0,2488,2489,
        5,256,0,0,2489,2490,3,532,266,0,2490,2491,5,263,0,0,2491,2492,3,
        524,262,0,2492,2493,5,257,0,0,2493,327,1,0,0,0,2494,2496,5,146,0,
        0,2495,2494,1,0,0,0,2495,2496,1,0,0,0,2496,2497,1,0,0,0,2497,2510,
        3,602,301,0,2498,2507,5,256,0,0,2499,2504,3,330,165,0,2500,2501,
        5,263,0,0,2501,2503,3,330,165,0,2502,2500,1,0,0,0,2503,2506,1,0,
        0,0,2504,2502,1,0,0,0,2504,2505,1,0,0,0,2505,2508,1,0,0,0,2506,2504,
        1,0,0,0,2507,2499,1,0,0,0,2507,2508,1,0,0,0,2508,2509,1,0,0,0,2509,
        2511,5,257,0,0,2510,2498,1,0,0,0,2510,2511,1,0,0,0,2511,329,1,0,
        0,0,2512,2515,3,606,303,0,2513,2515,3,600,300,0,2514,2512,1,0,0,
        0,2514,2513,1,0,0,0,2515,2516,1,0,0,0,2516,2517,5,265,0,0,2517,2518,
        3,532,266,0,2518,331,1,0,0,0,2519,2528,5,116,0,0,2520,2521,5,190,
        0,0,2521,2522,5,264,0,0,2522,2528,5,116,0,0,2523,2528,5,73,0,0,2524,
        2525,5,190,0,0,2525,2526,5,264,0,0,2526,2528,5,73,0,0,2527,2519,
        1,0,0,0,2527,2520,1,0,0,0,2527,2523,1,0,0,0,2527,2524,1,0,0,0,2528,
        333,1,0,0,0,2529,2534,5,147,0,0,2530,2531,5,15,0,0,2531,2532,5,264,
        0,0,2532,2534,5,147,0,0,2533,2529,1,0,0,0,2533,2530,1,0,0,0,2534,
        335,1,0,0,0,2535,2538,3,338,169,0,2536,2538,3,340,170,0,2537,2535,
        1,0,0,0,2537,2536,1,0,0,0,2538,337,1,0,0,0,2539,2540,7,1,0,0,2540,
        339,1,0,0,0,2541,2542,5,208,0,0,2542,2543,5,264,0,0,2543,2554,5,
        89,0,0,2544,2545,5,208,0,0,2545,2546,5,264,0,0,2546,2554,5,111,0,
        0,2547,2548,5,208,0,0,2548,2549,5,264,0,0,2549,2554,5,108,0,0,2550,
        2551,5,208,0,0,2551,2552,5,264,0,0,2552,2554,5,236,0,0,2553,2541,
        1,0,0,0,2553,2544,1,0,0,0,2553,2547,1,0,0,0,2553,2550,1,0,0,0,2554,
        341,1,0,0,0,2555,2572,5,149,0,0,2556,2557,5,127,0,0,2557,2558,5,
        264,0,0,2558,2572,5,149,0,0,2559,2572,5,150,0,0,2560,2561,5,127,
        0,0,2561,2562,5,264,0,0,2562,2572,5,150,0,0,2563,2572,5,162,0,0,
        2564,2565,5,127,0,0,2565,2566,5,264,0,0,2566,2572,5,162,0,0,2567,
        2572,5,103,0,0,2568,2569,5,127,0,0,2569,2570,5,264,0,0,2570,2572,
        5,103,0,0,2571,2555,1,0,0,0,2571,2556,1,0,0,0,2571,2559,1,0,0,0,
        2571,2560,1,0,0,0,2571,2563,1,0,0,0,2571,2564,1,0,0,0,2571,2567,
        1,0,0,0,2571,2568,1,0,0,0,2572,343,1,0,0,0,2573,2586,5,10,0,0,2574,
        2575,5,154,0,0,2575,2576,5,264,0,0,2576,2586,5,10,0,0,2577,2586,
        5,49,0,0,2578,2579,5,154,0,0,2579,2580,5,264,0,0,2580,2586,5,49,
        0,0,2581,2586,5,196,0,0,2582,2583,5,154,0,0,2583,2584,5,264,0,0,
        2584,2586,5,196,0,0,2585,2573,1,0,0,0,2585,2574,1,0,0,0,2585,2577,
        1,0,0,0,2585,2578,1,0,0,0,2585,2581,1,0,0,0,2585,2582,1,0,0,0,2586,
        345,1,0,0,0,2587,2590,3,348,174,0,2588,2590,3,350,175,0,2589,2587,
        1,0,0,0,2589,2588,1,0,0,0,2590,347,1,0,0,0,2591,2592,7,2,0,0,2592,
        349,1,0,0,0,2593,2594,5,51,0,0,2594,2595,5,264,0,0,2595,2609,5,93,
        0,0,2596,2597,5,51,0,0,2597,2598,5,264,0,0,2598,2609,5,72,0,0,2599,
        2600,5,51,0,0,2600,2601,5,264,0,0,2601,2609,5,158,0,0,2602,2603,
        5,51,0,0,2603,2604,5,264,0,0,2604,2609,5,214,0,0,2605,2606,5,51,
        0,0,2606,2607,5,264,0,0,2607,2609,5,19,0,0,2608,2593,1,0,0,0,2608,
        2596,1,0,0,0,2608,2599,1,0,0,0,2608,2602,1,0,0,0,2608,2605,1,0,0,
        0,2609,351,1,0,0,0,2610,2611,5,26,0,0,2611,2612,5,264,0,0,2612,2615,
        5,199,0,0,2613,2615,5,199,0,0,2614,2610,1,0,0,0,2614,2613,1,0,0,
        0,2615,2616,1,0,0,0,2616,2617,5,256,0,0,2617,2618,3,570,285,0,2618,
        2619,5,257,0,0,2619,2653,1,0,0,0,2620,2621,5,26,0,0,2621,2622,5,
        264,0,0,2622,2625,5,193,0,0,2623,2625,5,193,0,0,2624,2620,1,0,0,
        0,2624,2623,1,0,0,0,2625,2626,1,0,0,0,2626,2627,5,256,0,0,2627,2628,
        3,570,285,0,2628,2629,5,257,0,0,2629,2653,1,0,0,0,2630,2631,5,26,
        0,0,2631,2632,5,264,0,0,2632,2635,5,115,0,0,2633,2635,5,115,0,0,
        2634,2630,1,0,0,0,2634,2633,1,0,0,0,2635,2636,1,0,0,0,2636,2637,
        5,256,0,0,2637,2638,3,570,285,0,2638,2639,5,257,0,0,2639,2653,1,
        0,0,0,2640,2653,5,199,0,0,2641,2642,5,26,0,0,2642,2643,5,264,0,0,
        2643,2653,5,199,0,0,2644,2653,5,193,0,0,2645,2646,5,26,0,0,2646,
        2647,5,264,0,0,2647,2653,5,193,0,0,2648,2653,5,115,0,0,2649,2650,
        5,26,0,0,2650,2651,5,264,0,0,2651,2653,5,115,0,0,2652,2614,1,0,0,
        0,2652,2624,1,0,0,0,2652,2634,1,0,0,0,2652,2640,1,0,0,0,2652,2641,
        1,0,0,0,2652,2644,1,0,0,0,2652,2645,1,0,0,0,2652,2648,1,0,0,0,2652,
        2649,1,0,0,0,2653,353,1,0,0,0,2654,2663,5,109,0,0,2655,2656,5,30,
        0,0,2656,2657,5,264,0,0,2657,2663,5,109,0,0,2658,2663,5,235,0,0,
        2659,2660,5,30,0,0,2660,2661,5,264,0,0,2661,2663,5,235,0,0,2662,
        2654,1,0,0,0,2662,2655,1,0,0,0,2662,2658,1,0,0,0,2662,2659,1,0,0,
        0,2663,355,1,0,0,0,2664,2681,5,68,0,0,2665,2666,5,170,0,0,2666,2667,
        5,264,0,0,2667,2681,5,68,0,0,2668,2681,5,112,0,0,2669,2670,5,170,
        0,0,2670,2671,5,264,0,0,2671,2681,5,112,0,0,2672,2681,5,6,0,0,2673,
        2674,5,170,0,0,2674,2675,5,264,0,0,2675,2681,5,6,0,0,2676,2681,5,
        134,0,0,2677,2678,5,170,0,0,2678,2679,5,264,0,0,2679,2681,5,134,
        0,0,2680,2664,1,0,0,0,2680,2665,1,0,0,0,2680,2668,1,0,0,0,2680,2669,
        1,0,0,0,2680,2672,1,0,0,0,2680,2673,1,0,0,0,2680,2676,1,0,0,0,2680,
        2677,1,0,0,0,2681,357,1,0,0,0,2682,2727,5,2,0,0,2683,2684,5,151,
        0,0,2684,2685,5,264,0,0,2685,2727,5,2,0,0,2686,2727,5,7,0,0,2687,
        2688,5,151,0,0,2688,2689,5,264,0,0,2689,2727,5,7,0,0,2690,2727,5,
        13,0,0,2691,2692,5,151,0,0,2692,2693,5,264,0,0,2693,2727,5,13,0,
        0,2694,2727,5,54,0,0,2695,2696,5,151,0,0,2696,2697,5,264,0,0,2697,
        2727,5,54,0,0,2698,2727,5,124,0,0,2699,2700,5,151,0,0,2700,2701,
        5,264,0,0,2701,2727,5,124,0,0,2702,2727,5,131,0,0,2703,2704,5,151,
        0,0,2704,2705,5,264,0,0,2705,2727,5,131,0,0,2706,2727,5,133,0,0,
        2707,2708,5,151,0,0,2708,2709,5,264,0,0,2709,2727,5,133,0,0,2710,
        2727,5,135,0,0,2711,2712,5,151,0,0,2712,2713,5,264,0,0,2713,2727,
        5,135,0,0,2714,2727,5,156,0,0,2715,2716,5,151,0,0,2716,2717,5,264,
        0,0,2717,2727,5,156,0,0,2718,2727,5,206,0,0,2719,2720,5,151,0,0,
        2720,2721,5,264,0,0,2721,2727,5,206,0,0,2722,2727,5,207,0,0,2723,
        2724,5,151,0,0,2724,2725,5,264,0,0,2725,2727,5,207,0,0,2726,2682,
        1,0,0,0,2726,2683,1,0,0,0,2726,2686,1,0,0,0,2726,2687,1,0,0,0,2726,
        2690,1,0,0,0,2726,2691,1,0,0,0,2726,2694,1,0,0,0,2726,2695,1,0,0,
        0,2726,2698,1,0,0,0,2726,2699,1,0,0,0,2726,2702,1,0,0,0,2726,2703,
        1,0,0,0,2726,2706,1,0,0,0,2726,2707,1,0,0,0,2726,2710,1,0,0,0,2726,
        2711,1,0,0,0,2726,2714,1,0,0,0,2726,2715,1,0,0,0,2726,2718,1,0,0,
        0,2726,2719,1,0,0,0,2726,2722,1,0,0,0,2726,2723,1,0,0,0,2727,359,
        1,0,0,0,2728,2737,5,8,0,0,2729,2730,5,169,0,0,2730,2731,5,264,0,
        0,2731,2737,5,8,0,0,2732,2737,5,139,0,0,2733,2734,5,169,0,0,2734,
        2735,5,264,0,0,2735,2737,5,139,0,0,2736,2728,1,0,0,0,2736,2729,1,
        0,0,0,2736,2732,1,0,0,0,2736,2733,1,0,0,0,2737,361,1,0,0,0,2738,
        2755,5,191,0,0,2739,2740,5,56,0,0,2740,2741,5,264,0,0,2741,2755,
        5,191,0,0,2742,2755,5,132,0,0,2743,2744,5,56,0,0,2744,2745,5,264,
        0,0,2745,2755,5,132,0,0,2746,2755,5,88,0,0,2747,2748,5,56,0,0,2748,
        2749,5,264,0,0,2749,2755,5,88,0,0,2750,2755,5,42,0,0,2751,2752,5,
        56,0,0,2752,2753,5,264,0,0,2753,2755,5,42,0,0,2754,2738,1,0,0,0,
        2754,2739,1,0,0,0,2754,2742,1,0,0,0,2754,2743,1,0,0,0,2754,2746,
        1,0,0,0,2754,2747,1,0,0,0,2754,2750,1,0,0,0,2754,2751,1,0,0,0,2755,
        363,1,0,0,0,2756,2757,6,182,-1,0,2757,2778,3,376,188,0,2758,2778,
        3,378,189,0,2759,2778,3,380,190,0,2760,2778,3,382,191,0,2761,2778,
        3,384,192,0,2762,2778,3,386,193,0,2763,2778,3,388,194,0,2764,2778,
        3,390,195,0,2765,2778,3,392,196,0,2766,2778,3,394,197,0,2767,2778,
        3,396,198,0,2768,2778,3,398,199,0,2769,2778,3,404,202,0,2770,2778,
        3,406,203,0,2771,2778,3,408,204,0,2772,2778,3,410,205,0,2773,2778,
        3,400,200,0,2774,2778,3,402,201,0,2775,2778,3,412,206,0,2776,2778,
        3,414,207,0,2777,2756,1,0,0,0,2777,2758,1,0,0,0,2777,2759,1,0,0,
        0,2777,2760,1,0,0,0,2777,2761,1,0,0,0,2777,2762,1,0,0,0,2777,2763,
        1,0,0,0,2777,2764,1,0,0,0,2777,2765,1,0,0,0,2777,2766,1,0,0,0,2777,
        2767,1,0,0,0,2777,2768,1,0,0,0,2777,2769,1,0,0,0,2777,2770,1,0,0,
        0,2777,2771,1,0,0,0,2777,2772,1,0,0,0,2777,2773,1,0,0,0,2777,2774,
        1,0,0,0,2777,2775,1,0,0,0,2777,2776,1,0,0,0,2778,2800,1,0,0,0,2779,
        2780,10,3,0,0,2780,2781,5,264,0,0,2781,2782,5,7,0,0,2782,2783,5,
        256,0,0,2783,2784,3,364,182,0,2784,2785,5,257,0,0,2785,2799,1,0,
        0,0,2786,2787,10,2,0,0,2787,2788,5,264,0,0,2788,2789,5,156,0,0,2789,
        2790,5,256,0,0,2790,2791,3,364,182,0,2791,2792,5,257,0,0,2792,2799,
        1,0,0,0,2793,2794,10,1,0,0,2794,2795,5,264,0,0,2795,2796,5,137,0,
        0,2796,2797,5,256,0,0,2797,2799,5,257,0,0,2798,2779,1,0,0,0,2798,
        2786,1,0,0,0,2798,2793,1,0,0,0,2799,2802,1,0,0,0,2800,2798,1,0,0,
        0,2800,2801,1,0,0,0,2801,365,1,0,0,0,2802,2800,1,0,0,0,2803,2812,
        3,416,208,0,2804,2812,3,420,210,0,2805,2812,3,418,209,0,2806,2812,
        3,422,211,0,2807,2812,3,424,212,0,2808,2812,3,426,213,0,2809,2812,
        3,428,214,0,2810,2812,3,430,215,0,2811,2803,1,0,0,0,2811,2804,1,
        0,0,0,2811,2805,1,0,0,0,2811,2806,1,0,0,0,2811,2807,1,0,0,0,2811,
        2808,1,0,0,0,2811,2809,1,0,0,0,2811,2810,1,0,0,0,2812,367,1,0,0,
        0,2813,2814,3,334,167,0,2814,369,1,0,0,0,2815,2816,3,344,172,0,2816,
        371,1,0,0,0,2817,2820,3,336,168,0,2818,2820,3,354,177,0,2819,2817,
        1,0,0,0,2819,2818,1,0,0,0,2820,373,1,0,0,0,2821,2822,3,358,179,0,
        2822,375,1,0,0,0,2823,2824,5,163,0,0,2824,2825,5,264,0,0,2825,2828,
        5,63,0,0,2826,2828,5,63,0,0,2827,2823,1,0,0,0,2827,2826,1,0,0,0,
        2828,2829,1,0,0,0,2829,2830,5,256,0,0,2830,2831,3,532,266,0,2831,
        2832,5,257,0,0,2832,377,1,0,0,0,2833,2834,5,163,0,0,2834,2835,5,
        264,0,0,2835,2838,5,145,0,0,2836,2838,5,145,0,0,2837,2833,1,0,0,
        0,2837,2836,1,0,0,0,2838,2839,1,0,0,0,2839,2840,5,256,0,0,2840,2841,
        3,532,266,0,2841,2842,5,257,0,0,2842,379,1,0,0,0,2843,2844,5,163,
        0,0,2844,2845,5,264,0,0,2845,2848,5,118,0,0,2846,2848,5,118,0,0,
        2847,2843,1,0,0,0,2847,2846,1,0,0,0,2848,2849,1,0,0,0,2849,2850,
        5,256,0,0,2850,2851,3,532,266,0,2851,2852,5,257,0,0,2852,381,1,0,
        0,0,2853,2854,5,163,0,0,2854,2855,5,264,0,0,2855,2858,5,119,0,0,
        2856,2858,5,119,0,0,2857,2853,1,0,0,0,2857,2856,1,0,0,0,2858,2859,
        1,0,0,0,2859,2860,5,256,0,0,2860,2861,3,532,266,0,2861,2862,5,257,
        0,0,2862,383,1,0,0,0,2863,2864,5,163,0,0,2864,2865,5,264,0,0,2865,
        2868,5,74,0,0,2866,2868,5,74,0,0,2867,2863,1,0,0,0,2867,2866,1,0,
        0,0,2868,2869,1,0,0,0,2869,2870,5,256,0,0,2870,2871,3,532,266,0,
        2871,2872,5,257,0,0,2872,385,1,0,0,0,2873,2874,5,163,0,0,2874,2875,
        5,264,0,0,2875,2878,5,75,0,0,2876,2878,5,75,0,0,2877,2873,1,0,0,
        0,2877,2876,1,0,0,0,2878,2879,1,0,0,0,2879,2880,5,256,0,0,2880,2881,
        3,532,266,0,2881,2882,5,257,0,0,2882,387,1,0,0,0,2883,2884,5,163,
        0,0,2884,2885,5,264,0,0,2885,2888,5,101,0,0,2886,2888,5,101,0,0,
        2887,2883,1,0,0,0,2887,2886,1,0,0,0,2888,2889,1,0,0,0,2889,2890,
        5,256,0,0,2890,2891,3,532,266,0,2891,2892,5,263,0,0,2892,2893,3,
        532,266,0,2893,2894,5,257,0,0,2894,389,1,0,0,0,2895,2896,5,163,0,
        0,2896,2897,5,264,0,0,2897,2900,5,161,0,0,2898,2900,5,161,0,0,2899,
        2895,1,0,0,0,2899,2898,1,0,0,0,2900,2901,1,0,0,0,2901,2902,5,256,
        0,0,2902,2903,3,532,266,0,2903,2904,5,263,0,0,2904,2905,3,532,266,
        0,2905,2906,5,257,0,0,2906,391,1,0,0,0,2907,2908,5,163,0,0,2908,
        2909,5,264,0,0,2909,2912,5,17,0,0,2910,2912,5,17,0,0,2911,2907,1,
        0,0,0,2911,2910,1,0,0,0,2912,2913,1,0,0,0,2913,2914,5,256,0,0,2914,
        2915,3,532,266,0,2915,2916,5,263,0,0,2916,2917,3,532,266,0,2917,
        2918,5,257,0,0,2918,393,1,0,0,0,2919,2920,5,163,0,0,2920,2921,5,
        264,0,0,2921,2924,5,241,0,0,2922,2924,5,241,0,0,2923,2919,1,0,0,
        0,2923,2922,1,0,0,0,2924,2925,1,0,0,0,2925,2926,5,256,0,0,2926,2938,
        5,257,0,0,2927,2928,5,163,0,0,2928,2929,5,264,0,0,2929,2932,5,241,
        0,0,2930,2932,5,241,0,0,2931,2927,1,0,0,0,2931,2930,1,0,0,0,2932,
        2933,1,0,0,0,2933,2934,5,256,0,0,2934,2935,3,534,267,0,2935,2936,
        5,257,0,0,2936,2938,1,0,0,0,2937,2923,1,0,0,0,2937,2931,1,0,0,0,
        2938,395,1,0,0,0,2939,2940,5,163,0,0,2940,2941,5,264,0,0,2941,2944,
        5,243,0,0,2942,2944,5,243,0,0,2943,2939,1,0,0,0,2943,2942,1,0,0,
        0,2944,2945,1,0,0,0,2945,2946,5,256,0,0,2946,2958,5,257,0,0,2947,
        2948,5,163,0,0,2948,2949,5,264,0,0,2949,2952,5,243,0,0,2950,2952,
        5,243,0,0,2951,2947,1,0,0,0,2951,2950,1,0,0,0,2952,2953,1,0,0,0,
        2953,2954,5,256,0,0,2954,2955,3,534,267,0,2955,2956,5,257,0,0,2956,
        2958,1,0,0,0,2957,2943,1,0,0,0,2957,2951,1,0,0,0,2958,397,1,0,0,
        0,2959,2960,5,163,0,0,2960,2961,5,264,0,0,2961,2964,5,144,0,0,2962,
        2964,5,144,0,0,2963,2959,1,0,0,0,2963,2962,1,0,0,0,2964,2965,1,0,
        0,0,2965,2966,5,256,0,0,2966,2967,3,364,182,0,2967,2968,5,257,0,
        0,2968,399,1,0,0,0,2969,2970,5,211,0,0,2970,2971,5,264,0,0,2971,
        2974,5,39,0,0,2972,2974,5,39,0,0,2973,2969,1,0,0,0,2973,2972,1,0,
        0,0,2974,2975,1,0,0,0,2975,2976,5,256,0,0,2976,2977,3,524,262,0,
        2977,2978,5,257,0,0,2978,401,1,0,0,0,2979,2980,5,211,0,0,2980,2981,
        5,264,0,0,2981,2984,5,141,0,0,2982,2984,5,141,0,0,2983,2979,1,0,
        0,0,2983,2982,1,0,0,0,2984,2985,1,0,0,0,2985,2986,5,256,0,0,2986,
        2987,3,524,262,0,2987,2988,5,257,0,0,2988,403,1,0,0,0,2989,2990,
        5,211,0,0,2990,2991,5,264,0,0,2991,2994,5,202,0,0,2992,2994,5,202,
        0,0,2993,2989,1,0,0,0,2993,2992,1,0,0,0,2994,2995,1,0,0,0,2995,2996,
        5,256,0,0,2996,2997,3,524,262,0,2997,2998,5,257,0,0,2998,405,1,0,
        0,0,2999,3000,5,211,0,0,3000,3001,5,264,0,0,3001,3004,5,143,0,0,
        3002,3004,5,143,0,0,3003,2999,1,0,0,0,3003,3002,1,0,0,0,3004,3005,
        1,0,0,0,3005,3006,5,256,0,0,3006,3007,3,524,262,0,3007,3008,5,257,
        0,0,3008,407,1,0,0,0,3009,3010,5,211,0,0,3010,3011,5,264,0,0,3011,
        3014,5,62,0,0,3012,3014,5,62,0,0,3013,3009,1,0,0,0,3013,3012,1,0,
        0,0,3014,3015,1,0,0,0,3015,3016,5,256,0,0,3016,3017,3,524,262,0,
        3017,3018,5,257,0,0,3018,409,1,0,0,0,3019,3020,5,211,0,0,3020,3021,
        5,264,0,0,3021,3024,5,142,0,0,3022,3024,5,142,0,0,3023,3019,1,0,
        0,0,3023,3022,1,0,0,0,3024,3025,1,0,0,0,3025,3026,5,256,0,0,3026,
        3027,3,524,262,0,3027,3028,5,257,0,0,3028,411,1,0,0,0,3029,3030,
        5,211,0,0,3030,3031,5,264,0,0,3031,3034,5,182,0,0,3032,3034,5,182,
        0,0,3033,3029,1,0,0,0,3033,3032,1,0,0,0,3034,3035,1,0,0,0,3035,3036,
        5,256,0,0,3036,3037,3,524,262,0,3037,3038,5,257,0,0,3038,413,1,0,
        0,0,3039,3040,5,211,0,0,3040,3041,5,264,0,0,3041,3044,5,140,0,0,
        3042,3044,5,140,0,0,3043,3039,1,0,0,0,3043,3042,1,0,0,0,3044,3045,
        1,0,0,0,3045,3046,5,256,0,0,3046,3047,3,524,262,0,3047,3048,5,257,
        0,0,3048,415,1,0,0,0,3049,3050,5,64,0,0,3050,3051,5,256,0,0,3051,
        3052,5,257,0,0,3052,417,1,0,0,0,3053,3054,5,85,0,0,3054,3055,5,256,
        0,0,3055,3056,5,257,0,0,3056,419,1,0,0,0,3057,3058,5,107,0,0,3058,
        3059,5,256,0,0,3059,3060,5,257,0,0,3060,421,1,0,0,0,3061,3062,5,
        227,0,0,3062,3063,5,256,0,0,3063,3064,5,257,0,0,3064,423,1,0,0,0,
        3065,3066,5,138,0,0,3066,3067,5,256,0,0,3067,3074,5,257,0,0,3068,
        3069,5,138,0,0,3069,3070,5,256,0,0,3070,3071,3,582,291,0,3071,3072,
        5,257,0,0,3072,3074,1,0,0,0,3073,3065,1,0,0,0,3073,3068,1,0,0,0,
        3074,425,1,0,0,0,3075,3076,5,217,0,0,3076,3077,5,256,0,0,3077,3078,
        5,257,0,0,3078,427,1,0,0,0,3079,3080,5,219,0,0,3080,3081,5,256,0,
        0,3081,3082,5,257,0,0,3082,429,1,0,0,0,3083,3084,5,215,0,0,3084,
        3085,5,256,0,0,3085,3086,5,257,0,0,3086,431,1,0,0,0,3087,3095,3,
        440,220,0,3088,3095,3,434,217,0,3089,3095,3,436,218,0,3090,3095,
        3,438,219,0,3091,3095,3,444,222,0,3092,3095,3,476,238,0,3093,3095,
        3,490,245,0,3094,3087,1,0,0,0,3094,3088,1,0,0,0,3094,3089,1,0,0,
        0,3094,3090,1,0,0,0,3094,3091,1,0,0,0,3094,3092,1,0,0,0,3094,3093,
        1,0,0,0,3095,433,1,0,0,0,3096,3100,3,448,224,0,3097,3100,3,450,225,
        0,3098,3100,3,452,226,0,3099,3096,1,0,0,0,3099,3097,1,0,0,0,3099,
        3098,1,0,0,0,3100,435,1,0,0,0,3101,3105,3,454,227,0,3102,3105,3,
        456,228,0,3103,3105,3,458,229,0,3104,3101,1,0,0,0,3104,3102,1,0,
        0,0,3104,3103,1,0,0,0,3105,437,1,0,0,0,3106,3110,3,460,230,0,3107,
        3110,3,462,231,0,3108,3110,3,464,232,0,3109,3106,1,0,0,0,3109,3107,
        1,0,0,0,3109,3108,1,0,0,0,3110,439,1,0,0,0,3111,3117,3,466,233,0,
        3112,3117,3,468,234,0,3113,3117,3,470,235,0,3114,3117,3,472,236,
        0,3115,3117,3,474,237,0,3116,3111,1,0,0,0,3116,3112,1,0,0,0,3116,
        3113,1,0,0,0,3116,3114,1,0,0,0,3116,3115,1,0,0,0,3117,441,1,0,0,
        0,3118,3128,3,476,238,0,3119,3128,3,478,239,0,3120,3128,3,480,240,
        0,3121,3128,3,482,241,0,3122,3128,3,484,242,0,3123,3128,3,486,243,
        0,3124,3128,3,488,244,0,3125,3128,3,492,246,0,3126,3128,3,494,247,
        0,3127,3118,1,0,0,0,3127,3119,1,0,0,0,3127,3120,1,0,0,0,3127,3121,
        1,0,0,0,3127,3122,1,0,0,0,3127,3123,1,0,0,0,3127,3124,1,0,0,0,3127,
        3125,1,0,0,0,3127,3126,1,0,0,0,3128,443,1,0,0,0,3129,3132,3,496,
        248,0,3130,3132,3,498,249,0,3131,3129,1,0,0,0,3131,3130,1,0,0,0,
        3132,445,1,0,0,0,3133,3137,3,500,250,0,3134,3137,3,502,251,0,3135,
        3137,3,504,252,0,3136,3133,1,0,0,0,3136,3134,1,0,0,0,3136,3135,1,
        0,0,0,3137,447,1,0,0,0,3138,3139,3,506,253,0,3139,3140,5,264,0,0,
        3140,3141,5,33,0,0,3141,449,1,0,0,0,3142,3143,3,506,253,0,3143,3144,
        5,264,0,0,3144,3145,5,58,0,0,3145,451,1,0,0,0,3146,3147,3,506,253,
        0,3147,3148,5,264,0,0,3148,3149,5,175,0,0,3149,453,1,0,0,0,3150,
        3151,3,508,254,0,3151,3152,5,264,0,0,3152,3153,5,58,0,0,3153,455,
        1,0,0,0,3154,3155,3,508,254,0,3155,3156,5,264,0,0,3156,3157,5,213,
        0,0,3157,457,1,0,0,0,3158,3159,3,508,254,0,3159,3160,5,264,0,0,3160,
        3161,5,175,0,0,3161,459,1,0,0,0,3162,3163,3,510,255,0,3163,3164,
        5,264,0,0,3164,3165,5,58,0,0,3165,461,1,0,0,0,3166,3167,3,510,255,
        0,3167,3168,5,264,0,0,3168,3169,5,213,0,0,3169,463,1,0,0,0,3170,
        3171,3,510,255,0,3171,3172,5,264,0,0,3172,3173,5,175,0,0,3173,465,
        1,0,0,0,3174,3175,3,512,256,0,3175,3176,5,264,0,0,3176,3177,5,210,
        0,0,3177,467,1,0,0,0,3178,3179,3,512,256,0,3179,3180,5,264,0,0,3180,
        3181,5,58,0,0,3181,469,1,0,0,0,3182,3183,3,512,256,0,3183,3184,5,
        264,0,0,3184,3185,5,53,0,0,3185,471,1,0,0,0,3186,3187,3,512,256,
        0,3187,3188,5,264,0,0,3188,3189,5,125,0,0,3189,473,1,0,0,0,3190,
        3191,3,512,256,0,3191,3192,5,264,0,0,3192,3193,5,95,0,0,3193,475,
        1,0,0,0,3194,3195,3,514,257,0,3195,3196,5,264,0,0,3196,3197,5,216,
        0,0,3197,477,1,0,0,0,3198,3199,3,514,257,0,3199,3200,5,264,0,0,3200,
        3201,5,139,0,0,3201,479,1,0,0,0,3202,3203,3,514,257,0,3203,3204,
        5,264,0,0,3204,3205,5,91,0,0,3205,481,1,0,0,0,3206,3207,3,514,257,
        0,3207,3208,5,264,0,0,3208,3209,5,110,0,0,3209,483,1,0,0,0,3210,
        3211,3,514,257,0,3211,3212,5,264,0,0,3212,3213,5,109,0,0,3213,485,
        1,0,0,0,3214,3215,3,514,257,0,3215,3216,5,264,0,0,3216,3217,5,235,
        0,0,3217,487,1,0,0,0,3218,3219,3,514,257,0,3219,3220,5,264,0,0,3220,
        3221,5,6,0,0,3221,489,1,0,0,0,3222,3223,3,514,257,0,3223,3224,5,
        264,0,0,3224,3225,5,97,0,0,3225,491,1,0,0,0,3226,3227,3,514,257,
        0,3227,3228,5,264,0,0,3228,3229,5,115,0,0,3229,493,1,0,0,0,3230,
        3231,3,514,257,0,3231,3232,5,264,0,0,3232,3233,5,121,0,0,3233,495,
        1,0,0,0,3234,3235,3,516,258,0,3235,3236,5,264,0,0,3236,3237,5,180,
        0,0,3237,497,1,0,0,0,3238,3239,3,516,258,0,3239,3240,5,264,0,0,3240,
        3241,5,250,0,0,3241,499,1,0,0,0,3242,3243,3,516,258,0,3243,3244,
        5,264,0,0,3244,3245,5,80,0,0,3245,501,1,0,0,0,3246,3247,3,516,258,
        0,3247,3248,5,264,0,0,3248,3249,5,77,0,0,3249,503,1,0,0,0,3250,3251,
        3,516,258,0,3251,3252,5,264,0,0,3252,3253,5,76,0,0,3253,505,1,0,
        0,0,3254,3255,5,37,0,0,3255,507,1,0,0,0,3256,3257,5,164,0,0,3257,
        509,1,0,0,0,3258,3259,5,167,0,0,3259,511,1,0,0,0,3260,3261,5,194,
        0,0,3261,513,1,0,0,0,3262,3263,5,242,0,0,3263,515,1,0,0,0,3264,3265,
        5,104,0,0,3265,517,1,0,0,0,3266,3269,3,588,294,0,3267,3269,3,604,
        302,0,3268,3266,1,0,0,0,3268,3267,1,0,0,0,3269,519,1,0,0,0,3270,
        3273,3,582,291,0,3271,3273,3,604,302,0,3272,3270,1,0,0,0,3272,3271,
        1,0,0,0,3273,521,1,0,0,0,3274,3277,3,584,292,0,3275,3277,3,604,302,
        0,3276,3274,1,0,0,0,3276,3275,1,0,0,0,3277,523,1,0,0,0,3278,3281,
        3,578,289,0,3279,3281,3,604,302,0,3280,3278,1,0,0,0,3280,3279,1,
        0,0,0,3281,525,1,0,0,0,3282,3285,3,580,290,0,3283,3285,3,604,302,
        0,3284,3282,1,0,0,0,3284,3283,1,0,0,0,3285,527,1,0,0,0,3286,3291,
        3,526,263,0,3287,3288,5,263,0,0,3288,3290,3,526,263,0,3289,3287,
        1,0,0,0,3290,3293,1,0,0,0,3291,3289,1,0,0,0,3291,3292,1,0,0,0,3292,
        3295,1,0,0,0,3293,3291,1,0,0,0,3294,3286,1,0,0,0,3294,3295,1,0,0,
        0,3295,529,1,0,0,0,3296,3299,3,590,295,0,3297,3299,3,604,302,0,3298,
        3296,1,0,0,0,3298,3297,1,0,0,0,3299,531,1,0,0,0,3300,3303,3,570,
        285,0,3301,3303,3,604,302,0,3302,3300,1,0,0,0,3302,3301,1,0,0,0,
        3303,533,1,0,0,0,3304,3309,3,532,266,0,3305,3306,5,263,0,0,3306,
        3308,3,532,266,0,3307,3305,1,0,0,0,3308,3311,1,0,0,0,3309,3307,1,
        0,0,0,3309,3310,1,0,0,0,3310,3313,1,0,0,0,3311,3309,1,0,0,0,3312,
        3304,1,0,0,0,3312,3313,1,0,0,0,3313,535,1,0,0,0,3314,3317,3,572,
        286,0,3315,3317,3,604,302,0,3316,3314,1,0,0,0,3316,3315,1,0,0,0,
        3317,537,1,0,0,0,3318,3321,3,562,281,0,3319,3321,3,604,302,0,3320,
        3318,1,0,0,0,3320,3319,1,0,0,0,3321,539,1,0,0,0,3322,3325,3,572,
        286,0,3323,3325,3,592,296,0,3324,3322,1,0,0,0,3324,3323,1,0,0,0,
        3325,541,1,0,0,0,3326,3329,3,326,163,0,3327,3329,3,604,302,0,3328,
        3326,1,0,0,0,3328,3327,1,0,0,0,3329,543,1,0,0,0,3330,3332,3,546,
        273,0,3331,3330,1,0,0,0,3331,3332,1,0,0,0,3332,545,1,0,0,0,3333,
        3338,3,328,164,0,3334,3335,5,263,0,0,3335,3337,3,328,164,0,3336,
        3334,1,0,0,0,3337,3340,1,0,0,0,3338,3336,1,0,0,0,3338,3339,1,0,0,
        0,3339,547,1,0,0,0,3340,3338,1,0,0,0,3341,3343,3,550,275,0,3342,
        3341,1,0,0,0,3342,3343,1,0,0,0,3343,549,1,0,0,0,3344,3349,3,602,
        301,0,3345,3346,5,263,0,0,3346,3348,3,602,301,0,3347,3345,1,0,0,
        0,3348,3351,1,0,0,0,3349,3347,1,0,0,0,3349,3350,1,0,0,0,3350,551,
        1,0,0,0,3351,3349,1,0,0,0,3352,3354,3,554,277,0,3353,3352,1,0,0,
        0,3353,3354,1,0,0,0,3354,553,1,0,0,0,3355,3360,3,52,26,0,3356,3357,
        5,263,0,0,3357,3359,3,52,26,0,3358,3356,1,0,0,0,3359,3362,1,0,0,
        0,3360,3358,1,0,0,0,3360,3361,1,0,0,0,3361,555,1,0,0,0,3362,3360,
        1,0,0,0,3363,3372,5,260,0,0,3364,3369,3,570,285,0,3365,3366,5,263,
        0,0,3366,3368,3,570,285,0,3367,3365,1,0,0,0,3368,3371,1,0,0,0,3369,
        3367,1,0,0,0,3369,3370,1,0,0,0,3370,3373,1,0,0,0,3371,3369,1,0,0,
        0,3372,3364,1,0,0,0,3372,3373,1,0,0,0,3373,3374,1,0,0,0,3374,3375,
        5,261,0,0,3375,557,1,0,0,0,3376,3378,3,560,280,0,3377,3376,1,0,0,
        0,3377,3378,1,0,0,0,3378,559,1,0,0,0,3379,3384,3,570,285,0,3380,
        3381,5,263,0,0,3381,3383,3,570,285,0,3382,3380,1,0,0,0,3383,3386,
        1,0,0,0,3384,3382,1,0,0,0,3384,3385,1,0,0,0,3385,561,1,0,0,0,3386,
        3384,1,0,0,0,3387,3390,3,572,286,0,3388,3390,3,592,296,0,3389,3387,
        1,0,0,0,3389,3388,1,0,0,0,3390,563,1,0,0,0,3391,3392,3,582,291,0,
        3392,3393,5,264,0,0,3393,3394,5,264,0,0,3394,3395,3,582,291,0,3395,
        3402,1,0,0,0,3396,3397,3,578,289,0,3397,3398,5,264,0,0,3398,3399,
        5,264,0,0,3399,3400,3,578,289,0,3400,3402,1,0,0,0,3401,3391,1,0,
        0,0,3401,3396,1,0,0,0,3402,565,1,0,0,0,3403,3412,5,258,0,0,3404,
        3409,3,570,285,0,3405,3406,5,263,0,0,3406,3408,3,570,285,0,3407,
        3405,1,0,0,0,3408,3411,1,0,0,0,3409,3407,1,0,0,0,3409,3410,1,0,0,
        0,3410,3413,1,0,0,0,3411,3409,1,0,0,0,3412,3404,1,0,0,0,3412,3413,
        1,0,0,0,3413,3414,1,0,0,0,3414,3415,5,259,0,0,3415,567,1,0,0,0,3416,
        3421,3,580,290,0,3417,3418,5,263,0,0,3418,3420,3,580,290,0,3419,
        3417,1,0,0,0,3420,3423,1,0,0,0,3421,3419,1,0,0,0,3421,3422,1,0,0,
        0,3422,3425,1,0,0,0,3423,3421,1,0,0,0,3424,3416,1,0,0,0,3424,3425,
        1,0,0,0,3425,569,1,0,0,0,3426,3446,3,586,293,0,3427,3446,3,588,294,
        0,3428,3446,3,578,289,0,3429,3446,3,590,295,0,3430,3446,3,592,296,
        0,3431,3446,3,336,168,0,3432,3446,3,352,176,0,3433,3446,3,346,173,
        0,3434,3446,3,342,171,0,3435,3446,3,360,180,0,3436,3446,3,362,181,
        0,3437,3446,3,326,163,0,3438,3446,3,566,283,0,3439,3446,3,556,278,
        0,3440,3446,3,564,282,0,3441,3446,3,52,26,0,3442,3446,3,54,27,0,
        3443,3446,3,598,299,0,3444,3446,3,572,286,0,3445,3426,1,0,0,0,3445,
        3427,1,0,0,0,3445,3428,1,0,0,0,3445,3429,1,0,0,0,3445,3430,1,0,0,
        0,3445,3431,1,0,0,0,3445,3432,1,0,0,0,3445,3433,1,0,0,0,3445,3434,
        1,0,0,0,3445,3435,1,0,0,0,3445,3436,1,0,0,0,3445,3437,1,0,0,0,3445,
        3438,1,0,0,0,3445,3439,1,0,0,0,3445,3440,1,0,0,0,3445,3441,1,0,0,
        0,3445,3442,1,0,0,0,3445,3443,1,0,0,0,3445,3444,1,0,0,0,3446,571,
        1,0,0,0,3447,3448,5,260,0,0,3448,3449,5,265,0,0,3449,3462,5,261,
        0,0,3450,3451,5,260,0,0,3451,3456,3,576,288,0,3452,3453,5,263,0,
        0,3453,3455,3,576,288,0,3454,3452,1,0,0,0,3455,3458,1,0,0,0,3456,
        3454,1,0,0,0,3456,3457,1,0,0,0,3457,3459,1,0,0,0,3458,3456,1,0,0,
        0,3459,3460,5,261,0,0,3460,3462,1,0,0,0,3461,3447,1,0,0,0,3461,3450,
        1,0,0,0,3462,573,1,0,0,0,3463,3464,5,256,0,0,3464,3465,3,336,168,
        0,3465,3466,5,257,0,0,3466,3469,1,0,0,0,3467,3469,3,340,170,0,3468,
        3463,1,0,0,0,3468,3467,1,0,0,0,3469,3517,1,0,0,0,3470,3471,5,256,
        0,0,3471,3472,3,346,173,0,3472,3473,5,257,0,0,3473,3476,1,0,0,0,
        3474,3476,3,350,175,0,3475,3470,1,0,0,0,3475,3474,1,0,0,0,3476,3517,
        1,0,0,0,3477,3478,5,256,0,0,3478,3479,3,566,283,0,3479,3480,5,257,
        0,0,3480,3483,1,0,0,0,3481,3483,3,566,283,0,3482,3477,1,0,0,0,3482,
        3481,1,0,0,0,3483,3517,1,0,0,0,3484,3485,5,256,0,0,3485,3486,3,556,
        278,0,3486,3487,5,257,0,0,3487,3490,1,0,0,0,3488,3490,3,556,278,
        0,3489,3484,1,0,0,0,3489,3488,1,0,0,0,3490,3517,1,0,0,0,3491,3492,
        5,256,0,0,3492,3493,3,572,286,0,3493,3494,5,257,0,0,3494,3497,1,
        0,0,0,3495,3497,3,572,286,0,3496,3491,1,0,0,0,3496,3495,1,0,0,0,
        3497,3517,1,0,0,0,3498,3499,5,256,0,0,3499,3500,3,578,289,0,3500,
        3501,5,257,0,0,3501,3504,1,0,0,0,3502,3504,3,578,289,0,3503,3498,
        1,0,0,0,3503,3502,1,0,0,0,3504,3517,1,0,0,0,3505,3506,5,256,0,0,
        3506,3507,3,586,293,0,3507,3508,5,257,0,0,3508,3511,1,0,0,0,3509,
        3511,3,586,293,0,3510,3505,1,0,0,0,3510,3509,1,0,0,0,3511,3517,1,
        0,0,0,3512,3515,3,606,303,0,3513,3515,3,600,300,0,3514,3512,1,0,
        0,0,3514,3513,1,0,0,0,3515,3517,1,0,0,0,3516,3468,1,0,0,0,3516,3475,
        1,0,0,0,3516,3482,1,0,0,0,3516,3489,1,0,0,0,3516,3496,1,0,0,0,3516,
        3503,1,0,0,0,3516,3510,1,0,0,0,3516,3514,1,0,0,0,3517,575,1,0,0,
        0,3518,3519,3,574,287,0,3519,3520,5,265,0,0,3520,3521,3,570,285,
        0,3521,577,1,0,0,0,3522,3523,7,3,0,0,3523,579,1,0,0,0,3524,3525,
        7,4,0,0,3525,581,1,0,0,0,3526,3527,5,251,0,0,3527,583,1,0,0,0,3528,
        3532,5,252,0,0,3529,3532,3,596,298,0,3530,3532,3,594,297,0,3531,
        3528,1,0,0,0,3531,3529,1,0,0,0,3531,3530,1,0,0,0,3532,585,1,0,0,
        0,3533,3536,3,582,291,0,3534,3536,3,584,292,0,3535,3533,1,0,0,0,
        3535,3534,1,0,0,0,3536,587,1,0,0,0,3537,3538,7,5,0,0,3538,589,1,
        0,0,0,3539,3540,5,45,0,0,3540,3541,5,256,0,0,3541,3542,3,524,262,
        0,3542,3543,5,257,0,0,3543,3556,1,0,0,0,3544,3545,5,45,0,0,3545,
        3546,5,256,0,0,3546,3556,5,257,0,0,3547,3548,5,46,0,0,3548,3549,
        5,256,0,0,3549,3550,3,524,262,0,3550,3551,5,257,0,0,3551,3556,1,
        0,0,0,3552,3553,5,46,0,0,3553,3554,5,256,0,0,3554,3556,5,257,0,0,
        3555,3539,1,0,0,0,3555,3544,1,0,0,0,3555,3547,1,0,0,0,3555,3552,
        1,0,0,0,3556,591,1,0,0,0,3557,3558,5,148,0,0,3558,593,1,0,0,0,3559,
        3560,5,136,0,0,3560,595,1,0,0,0,3561,3562,7,6,0,0,3562,597,1,0,0,
        0,3563,3564,5,232,0,0,3564,3565,5,256,0,0,3565,3572,5,257,0,0,3566,
        3567,5,232,0,0,3567,3568,5,256,0,0,3568,3569,3,578,289,0,3569,3570,
        5,257,0,0,3570,3572,1,0,0,0,3571,3563,1,0,0,0,3571,3566,1,0,0,0,
        3572,599,1,0,0,0,3573,3574,5,270,0,0,3574,601,1,0,0,0,3575,3576,
        5,270,0,0,3576,603,1,0,0,0,3577,3578,5,270,0,0,3578,605,1,0,0,0,
        3579,3580,7,7,0,0,3580,607,1,0,0,0,211,610,615,619,635,644,654,661,
        685,697,706,729,747,754,763,779,791,803,818,850,862,895,910,917,
        1057,1079,1094,1108,1130,1146,1161,1236,1266,1273,1319,1341,1350,
        1374,1397,1404,1413,1455,1465,1477,1494,1516,1526,1536,1603,1610,
        1619,1631,1635,1647,1651,1663,1672,1720,1738,1752,1767,1777,1802,
        1812,1832,1847,1857,1911,1931,1959,1982,1989,2007,2025,2034,2057,
        2075,2093,2107,2117,2131,2154,2177,2186,2213,2227,2267,2277,2299,
        2316,2335,2342,2354,2364,2379,2389,2410,2426,2430,2454,2460,2468,
        2474,2478,2485,2495,2504,2507,2510,2514,2527,2533,2537,2553,2571,
        2585,2589,2608,2614,2624,2634,2652,2662,2680,2726,2736,2754,2777,
        2798,2800,2811,2819,2827,2837,2847,2857,2867,2877,2887,2899,2911,
        2923,2931,2937,2943,2951,2957,2963,2973,2983,2993,3003,3013,3023,
        3033,3043,3073,3094,3099,3104,3109,3116,3127,3131,3136,3268,3272,
        3276,3280,3284,3291,3294,3298,3302,3309,3312,3316,3320,3324,3328,
        3331,3338,3342,3349,3353,3360,3369,3372,3377,3384,3389,3401,3409,
        3412,3421,3424,3445,3456,3461,3468,3475,3482,3489,3496,3503,3510,
        3514,3516,3531,3535,3555,3571
    ]

class GremlinParser ( Parser ):

    grammarFileName = "Gremlin.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'discard'", "'addAll'", "'addE'", "'addV'", 
                     "'aggregate'", "'all'", "'and'", "'any'", "'as'", "'asc'", 
                     "'asDate'", "'asString'", "'assign'", "'barrier'", 
                     "'Barrier'", "'begin'", "'between'", "'both'", "'BOTH'", 
                     "'bothE'", "'bothV'", "'branch'", "'by'", "'call'", 
                     "'cap'", "'Cardinality'", "'choose'", "'coalesce'", 
                     "'coin'", "'Column'", "'combine'", "'commit'", "'component'", 
                     "'concat'", "'conjoin'", "'connectedComponent'", "'ConnectedComponent'", 
                     "'constant'", "'containing'", "'count'", "'cyclicPath'", 
                     "'day'", "'dateAdd'", "'dateDiff'", "'datetime'", "'DateTime'", 
                     "'decr'", "'dedup'", "'desc'", "'difference'", "'Direction'", 
                     "'disjunct'", "'distance'", "'div'", "'drop'", "'DT'", 
                     "'E'", "'edges'", "'elementMap'", "'element'", "'emit'", 
                     "'endingWith'", "'eq'", "'explain'", "'fail'", "'false'", 
                     "'filter'", "'first'", "'flatMap'", "'fold'", "'format'", 
                     "'from'", "'global'", "'gt'", "'gte'", "'graphml'", 
                     "'graphson'", "'groupCount'", "'group'", "'gryo'", 
                     "'has'", "'hasId'", "'hasKey'", "'hasLabel'", "'hasNext'", 
                     "'hasNot'", "'hasValue'", "'hour'", "'id'", "'identity'", 
                     "'ids'", "'in'", "'IN'", "'inE'", "'includeEdges'", 
                     "'incr'", "'indexer'", "'index'", "'Infinity'", "'inject'", 
                     "'inside'", "'intersect'", "'inV'", "'IO'", "'io'", 
                     "'is'", "'iterate'", "'key'", "'keys'", "'labels'", 
                     "'label'", "'last'", "'length'", "'limit'", "'list'", 
                     "'local'", "'loops'", "'lt'", "'lte'", "'lTrim'", "'map'", 
                     "'match'", "'math'", "'max'", "'maxDistance'", "'mean'", 
                     "'Merge'", "'merge'", "'mergeE'", "'mergeV'", "'min'", 
                     "'minute'", "'minus'", "'mixed'", "'mult'", "'NaN'", 
                     "'negate'", "'next'", "'none'", "'notRegex'", "'notContaining'", 
                     "'notEndingWith'", "'notStartingWith'", "'not'", "'neq'", 
                     "'new'", "'normSack'", "'null'", "'onCreate'", "'onMatch'", 
                     "'Operator'", "'option'", "'optional'", "'Order'", 
                     "'order'", "'or'", "'otherV'", "'OUT'", "'out'", "'outE'", 
                     "'outside'", "'outV'", "'P'", "'PageRank'", "'pageRank'", 
                     "'path'", "'PeerPressure'", "'peerPressure'", "'Pick'", 
                     "'Pop'", "'profile'", "'project'", "'properties'", 
                     "'propertyMap'", "'propertyName'", "'property'", "'product'", 
                     "'range'", "'read'", "'reader'", "'ReferenceVertex'", 
                     "'regex'", "'replace'", "'repeat'", "'reverse'", "'rollback'", 
                     "'rTrim'", "'sack'", "'sample'", "'Scope'", "'second'", 
                     "'select'", "'set'", "'ShortestPath'", "'shortestPath'", 
                     "'shuffle'", "'sideEffect'", "'simplePath'", "'single'", 
                     "'skip'", "'split'", "'startingWith'", "'store'", "'subgraph'", 
                     "'substring'", "'sum'", "'sumLong'", "'T'", "'tail'", 
                     "'target'", "'TextP'", "'timeLimit'", "'times'", "'to'", 
                     "'toBulkSet'", "'tokens'", "'toList'", "'toLower'", 
                     "'toSet'", "'toString'", "'toUpper'", "'toE'", "'toV'", 
                     "'tree'", "'trim'", "'true'", "'tryNext'", "'tx'", 
                     "'unfold'", "'union'", "'until'", "'UUID'", "'V'", 
                     "'valueMap'", "'values'", "'value'", "'Vertex'", "'where'", 
                     "'with'", "'withBulk'", "'within'", "'WithOptions'", 
                     "'without'", "'withoutStrategies'", "'withPath'", "'withSack'", 
                     "'withSideEffect'", "'withStrategies'", "'write'", 
                     "'writer'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'('", "')'", "'{'", "'}'", 
                     "'['", "']'", "';'", "','", "'.'", "':'", "'g'", "'__'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "K_ADDALL", "K_ADDE", "K_ADDV", 
                      "K_AGGREGATE", "K_ALL", "K_AND", "K_ANY", "K_AS", 
                      "K_ASC", "K_ASDATE", "K_ASSTRING", "K_ASSIGN", "K_BARRIER", 
                      "K_BARRIERU", "K_BEGIN", "K_BETWEEN", "K_BOTH", "K_BOTHU", 
                      "K_BOTHE", "K_BOTHV", "K_BRANCH", "K_BY", "K_CALL", 
                      "K_CAP", "K_CARDINALITY", "K_CHOOSE", "K_COALESCE", 
                      "K_COIN", "K_COLUMN", "K_COMBINE", "K_COMMIT", "K_COMPONENT", 
                      "K_CONCAT", "K_CONJOIN", "K_CONNECTEDCOMPONENT", "K_CONNECTEDCOMPONENTU", 
                      "K_CONSTANT", "K_CONTAINING", "K_COUNT", "K_CYCLICPATH", 
                      "K_DAY", "K_DATEADD", "K_DATEDIFF", "K_DATETIME", 
                      "K_DATETIMEU", "K_DECR", "K_DEDUP", "K_DESC", "K_DIFFERENCE", 
                      "K_DIRECTION", "K_DISJUNCT", "K_DISTANCE", "K_DIV", 
                      "K_DROP", "K_DT", "K_E", "K_EDGES", "K_ELEMENTMAP", 
                      "K_ELEMENT", "K_EMIT", "K_ENDINGWITH", "K_EQ", "K_EXPLAIN", 
                      "K_FAIL", "K_FALSE", "K_FILTER", "K_FIRST", "K_FLATMAP", 
                      "K_FOLD", "K_FORMAT", "K_FROM", "K_GLOBAL", "K_GT", 
                      "K_GTE", "K_GRAPHML", "K_GRAPHSON", "K_GROUPCOUNT", 
                      "K_GROUP", "K_GRYO", "K_HAS", "K_HASID", "K_HASKEY", 
                      "K_HASLABEL", "K_HASNEXT", "K_HASNOT", "K_HASVALUE", 
                      "K_HOUR", "K_ID", "K_IDENTITY", "K_IDS", "K_IN", "K_INU", 
                      "K_INE", "K_INCLUDEEDGES", "K_INCR", "K_INDEXER", 
                      "K_INDEX", "K_INFINITY", "K_INJECT", "K_INSIDE", "K_INTERSECT", 
                      "K_INV", "K_IOU", "K_IO", "K_IS", "K_ITERATE", "K_KEY", 
                      "K_KEYS", "K_LABELS", "K_LABEL", "K_LAST", "K_LENGTH", 
                      "K_LIMIT", "K_LIST", "K_LOCAL", "K_LOOPS", "K_LT", 
                      "K_LTE", "K_LTRIM", "K_MAP", "K_MATCH", "K_MATH", 
                      "K_MAX", "K_MAXDISTANCE", "K_MEAN", "K_MERGEU", "K_MERGE", 
                      "K_MERGEE", "K_MERGEV", "K_MIN", "K_MINUTE", "K_MINUS", 
                      "K_MIXED", "K_MULT", "K_NAN", "K_NEGATE", "K_NEXT", 
                      "K_NONE", "K_NOTREGEX", "K_NOTCONTAINING", "K_NOTENDINGWITH", 
                      "K_NOTSTARTINGWITH", "K_NOT", "K_NEQ", "K_NEW", "K_NORMSACK", 
                      "K_NULL", "K_ONCREATE", "K_ONMATCH", "K_OPERATOR", 
                      "K_OPTION", "K_OPTIONAL", "K_ORDERU", "K_ORDER", "K_OR", 
                      "K_OTHERV", "K_OUTU", "K_OUT", "K_OUTE", "K_OUTSIDE", 
                      "K_OUTV", "K_P", "K_PAGERANKU", "K_PAGERANK", "K_PATH", 
                      "K_PEERPRESSUREU", "K_PEERPRESSURE", "K_PICK", "K_POP", 
                      "K_PROFILE", "K_PROJECT", "K_PROPERTIES", "K_PROPERTYMAP", 
                      "K_PROPERTYNAME", "K_PROPERTY", "K_PRODUCT", "K_RANGE", 
                      "K_READ", "K_READER", "K_REFERENCEVERTEX", "K_REGEX", 
                      "K_REPLACE", "K_REPEAT", "K_REVERSE", "K_ROLLBACK", 
                      "K_RTRIM", "K_SACK", "K_SAMPLE", "K_SCOPE", "K_SECOND", 
                      "K_SELECT", "K_SET", "K_SHORTESTPATHU", "K_SHORTESTPATH", 
                      "K_SHUFFLE", "K_SIDEEFFECT", "K_SIMPLEPATH", "K_SINGLE", 
                      "K_SKIP", "K_SPLIT", "K_STARTINGWITH", "K_STORE", 
                      "K_SUBGRAPH", "K_SUBSTRING", "K_SUM", "K_SUMLONG", 
                      "K_T", "K_TAIL", "K_TARGET", "K_TEXTP", "K_TIMELIMIT", 
                      "K_TIMES", "K_TO", "K_TOBULKSET", "K_TOKENS", "K_TOLIST", 
                      "K_TOLOWER", "K_TOSET", "K_TOSTRING", "K_TOUPPER", 
                      "K_TOE", "K_TOV", "K_TREE", "K_TRIM", "K_TRUE", "K_TRYNEXT", 
                      "K_TX", "K_UNFOLD", "K_UNION", "K_UNTIL", "K_UUID", 
                      "K_V", "K_VALUEMAP", "K_VALUES", "K_VALUE", "K_VERTEX", 
                      "K_WHERE", "K_WITH", "K_WITHBULK", "K_WITHIN", "K_WITHOPTOPTIONS", 
                      "K_WITHOUT", "K_WITHOUTSTRATEGIES", "K_WITHPATH", 
                      "K_WITHSACK", "K_WITHSIDEEFFECT", "K_WITHSTRATEGIES", 
                      "K_WRITE", "K_WRITER", "IntegerLiteral", "FloatingPointLiteral", 
                      "SignedInfLiteral", "NonEmptyStringLiteral", "EmptyStringLiteral", 
                      "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
                      "RBRACK", "SEMI", "COMMA", "DOT", "COLON", "TRAVERSAL_ROOT", 
                      "ANON_TRAVERSAL_ROOT", "WS", "LINE_COMMENT", "Identifier" ]

    RULE_queryList = 0
    RULE_query = 1
    RULE_emptyQuery = 2
    RULE_traversalSource = 3
    RULE_transactionPart = 4
    RULE_rootTraversal = 5
    RULE_traversalSourceSelfMethod = 6
    RULE_traversalSourceSelfMethod_withBulk = 7
    RULE_traversalSourceSelfMethod_withPath = 8
    RULE_traversalSourceSelfMethod_withSack = 9
    RULE_traversalSourceSelfMethod_withSideEffect = 10
    RULE_traversalSourceSelfMethod_withStrategies = 11
    RULE_traversalSourceSelfMethod_withoutStrategies = 12
    RULE_traversalSourceSelfMethod_with = 13
    RULE_traversalSourceSpawnMethod = 14
    RULE_traversalSourceSpawnMethod_addE = 15
    RULE_traversalSourceSpawnMethod_addV = 16
    RULE_traversalSourceSpawnMethod_E = 17
    RULE_traversalSourceSpawnMethod_V = 18
    RULE_traversalSourceSpawnMethod_inject = 19
    RULE_traversalSourceSpawnMethod_io = 20
    RULE_traversalSourceSpawnMethod_mergeV = 21
    RULE_traversalSourceSpawnMethod_mergeE = 22
    RULE_traversalSourceSpawnMethod_call = 23
    RULE_traversalSourceSpawnMethod_union = 24
    RULE_chainedTraversal = 25
    RULE_nestedTraversal = 26
    RULE_terminatedTraversal = 27
    RULE_traversalMethod = 28
    RULE_traversalMethod_V = 29
    RULE_traversalMethod_E = 30
    RULE_traversalMethod_addE = 31
    RULE_traversalMethod_addV = 32
    RULE_traversalMethod_aggregate = 33
    RULE_traversalMethod_all = 34
    RULE_traversalMethod_and = 35
    RULE_traversalMethod_any = 36
    RULE_traversalMethod_as = 37
    RULE_traversalMethod_asDate = 38
    RULE_traversalMethod_asString = 39
    RULE_traversalMethod_barrier = 40
    RULE_traversalMethod_both = 41
    RULE_traversalMethod_bothE = 42
    RULE_traversalMethod_bothV = 43
    RULE_traversalMethod_branch = 44
    RULE_traversalMethod_by = 45
    RULE_traversalMethod_call = 46
    RULE_traversalMethod_cap = 47
    RULE_traversalMethod_choose = 48
    RULE_traversalMethod_coalesce = 49
    RULE_traversalMethod_coin = 50
    RULE_traversalMethod_combine = 51
    RULE_traversalMethod_concat = 52
    RULE_traversalMethod_conjoin = 53
    RULE_traversalMethod_connectedComponent = 54
    RULE_traversalMethod_constant = 55
    RULE_traversalMethod_count = 56
    RULE_traversalMethod_cyclicPath = 57
    RULE_traversalMethod_dateAdd = 58
    RULE_traversalMethod_dateDiff = 59
    RULE_traversalMethod_dedup = 60
    RULE_traversalMethod_difference = 61
    RULE_traversalMethod_discard = 62
    RULE_traversalMethod_disjunct = 63
    RULE_traversalMethod_drop = 64
    RULE_traversalMethod_element = 65
    RULE_traversalMethod_elementMap = 66
    RULE_traversalMethod_emit = 67
    RULE_traversalMethod_fail = 68
    RULE_traversalMethod_filter = 69
    RULE_traversalMethod_flatMap = 70
    RULE_traversalMethod_fold = 71
    RULE_traversalMethod_format = 72
    RULE_traversalMethod_from = 73
    RULE_traversalMethod_group = 74
    RULE_traversalMethod_groupCount = 75
    RULE_traversalMethod_has = 76
    RULE_traversalMethod_hasId = 77
    RULE_traversalMethod_hasKey = 78
    RULE_traversalMethod_hasLabel = 79
    RULE_traversalMethod_hasNot = 80
    RULE_traversalMethod_hasValue = 81
    RULE_traversalMethod_id = 82
    RULE_traversalMethod_identity = 83
    RULE_traversalMethod_in = 84
    RULE_traversalMethod_inE = 85
    RULE_traversalMethod_intersect = 86
    RULE_traversalMethod_inV = 87
    RULE_traversalMethod_index = 88
    RULE_traversalMethod_inject = 89
    RULE_traversalMethod_is = 90
    RULE_traversalMethod_key = 91
    RULE_traversalMethod_label = 92
    RULE_traversalMethod_length = 93
    RULE_traversalMethod_limit = 94
    RULE_traversalMethod_local = 95
    RULE_traversalMethod_loops = 96
    RULE_traversalMethod_lTrim = 97
    RULE_traversalMethod_map = 98
    RULE_traversalMethod_match = 99
    RULE_traversalMethod_math = 100
    RULE_traversalMethod_max = 101
    RULE_traversalMethod_mean = 102
    RULE_traversalMethod_merge = 103
    RULE_traversalMethod_mergeV = 104
    RULE_traversalMethod_mergeE = 105
    RULE_traversalMethod_min = 106
    RULE_traversalMethod_none = 107
    RULE_traversalMethod_not = 108
    RULE_traversalMethod_option = 109
    RULE_traversalMethod_optional = 110
    RULE_traversalMethod_or = 111
    RULE_traversalMethod_order = 112
    RULE_traversalMethod_otherV = 113
    RULE_traversalMethod_out = 114
    RULE_traversalMethod_outE = 115
    RULE_traversalMethod_outV = 116
    RULE_traversalMethod_pageRank = 117
    RULE_traversalMethod_path = 118
    RULE_traversalMethod_peerPressure = 119
    RULE_traversalMethod_product = 120
    RULE_traversalMethod_profile = 121
    RULE_traversalMethod_project = 122
    RULE_traversalMethod_properties = 123
    RULE_traversalMethod_property = 124
    RULE_traversalMethod_propertyMap = 125
    RULE_traversalMethod_range = 126
    RULE_traversalMethod_read = 127
    RULE_traversalMethod_repeat = 128
    RULE_traversalMethod_replace = 129
    RULE_traversalMethod_reverse = 130
    RULE_traversalMethod_rTrim = 131
    RULE_traversalMethod_sack = 132
    RULE_traversalMethod_sample = 133
    RULE_traversalMethod_select = 134
    RULE_traversalMethod_shortestPath = 135
    RULE_traversalMethod_sideEffect = 136
    RULE_traversalMethod_simplePath = 137
    RULE_traversalMethod_skip = 138
    RULE_traversalMethod_split = 139
    RULE_traversalMethod_store = 140
    RULE_traversalMethod_subgraph = 141
    RULE_traversalMethod_substring = 142
    RULE_traversalMethod_sum = 143
    RULE_traversalMethod_tail = 144
    RULE_traversalMethod_timeLimit = 145
    RULE_traversalMethod_times = 146
    RULE_traversalMethod_to = 147
    RULE_traversalMethod_toE = 148
    RULE_traversalMethod_toLower = 149
    RULE_traversalMethod_toUpper = 150
    RULE_traversalMethod_toV = 151
    RULE_traversalMethod_tree = 152
    RULE_traversalMethod_trim = 153
    RULE_traversalMethod_unfold = 154
    RULE_traversalMethod_union = 155
    RULE_traversalMethod_until = 156
    RULE_traversalMethod_value = 157
    RULE_traversalMethod_valueMap = 158
    RULE_traversalMethod_values = 159
    RULE_traversalMethod_where = 160
    RULE_traversalMethod_with = 161
    RULE_traversalMethod_write = 162
    RULE_structureVertexLiteral = 163
    RULE_traversalStrategy = 164
    RULE_configuration = 165
    RULE_traversalScope = 166
    RULE_traversalBarrier = 167
    RULE_traversalT = 168
    RULE_traversalTShort = 169
    RULE_traversalTLong = 170
    RULE_traversalMerge = 171
    RULE_traversalOrder = 172
    RULE_traversalDirection = 173
    RULE_traversalDirectionShort = 174
    RULE_traversalDirectionLong = 175
    RULE_traversalCardinality = 176
    RULE_traversalColumn = 177
    RULE_traversalPop = 178
    RULE_traversalOperator = 179
    RULE_traversalPick = 180
    RULE_traversalDT = 181
    RULE_traversalPredicate = 182
    RULE_traversalTerminalMethod = 183
    RULE_traversalSackMethod = 184
    RULE_traversalComparator = 185
    RULE_traversalFunction = 186
    RULE_traversalBiFunction = 187
    RULE_traversalPredicate_eq = 188
    RULE_traversalPredicate_neq = 189
    RULE_traversalPredicate_lt = 190
    RULE_traversalPredicate_lte = 191
    RULE_traversalPredicate_gt = 192
    RULE_traversalPredicate_gte = 193
    RULE_traversalPredicate_inside = 194
    RULE_traversalPredicate_outside = 195
    RULE_traversalPredicate_between = 196
    RULE_traversalPredicate_within = 197
    RULE_traversalPredicate_without = 198
    RULE_traversalPredicate_not = 199
    RULE_traversalPredicate_containing = 200
    RULE_traversalPredicate_notContaining = 201
    RULE_traversalPredicate_startingWith = 202
    RULE_traversalPredicate_notStartingWith = 203
    RULE_traversalPredicate_endingWith = 204
    RULE_traversalPredicate_notEndingWith = 205
    RULE_traversalPredicate_regex = 206
    RULE_traversalPredicate_notRegex = 207
    RULE_traversalTerminalMethod_explain = 208
    RULE_traversalTerminalMethod_hasNext = 209
    RULE_traversalTerminalMethod_iterate = 210
    RULE_traversalTerminalMethod_tryNext = 211
    RULE_traversalTerminalMethod_next = 212
    RULE_traversalTerminalMethod_toList = 213
    RULE_traversalTerminalMethod_toSet = 214
    RULE_traversalTerminalMethod_toBulkSet = 215
    RULE_withOptionKeys = 216
    RULE_connectedComponentConstants = 217
    RULE_pageRankConstants = 218
    RULE_peerPressureConstants = 219
    RULE_shortestPathConstants = 220
    RULE_withOptionsValues = 221
    RULE_ioOptionsKeys = 222
    RULE_ioOptionsValues = 223
    RULE_connectedComponentConstants_component = 224
    RULE_connectedComponentConstants_edges = 225
    RULE_connectedComponentConstants_propertyName = 226
    RULE_pageRankConstants_edges = 227
    RULE_pageRankConstants_times = 228
    RULE_pageRankConstants_propertyName = 229
    RULE_peerPressureConstants_edges = 230
    RULE_peerPressureConstants_times = 231
    RULE_peerPressureConstants_propertyName = 232
    RULE_shortestPathConstants_target = 233
    RULE_shortestPathConstants_edges = 234
    RULE_shortestPathConstants_distance = 235
    RULE_shortestPathConstants_maxDistance = 236
    RULE_shortestPathConstants_includeEdges = 237
    RULE_withOptionsConstants_tokens = 238
    RULE_withOptionsConstants_none = 239
    RULE_withOptionsConstants_ids = 240
    RULE_withOptionsConstants_labels = 241
    RULE_withOptionsConstants_keys = 242
    RULE_withOptionsConstants_values = 243
    RULE_withOptionsConstants_all = 244
    RULE_withOptionsConstants_indexer = 245
    RULE_withOptionsConstants_list = 246
    RULE_withOptionsConstants_map = 247
    RULE_ioOptionsConstants_reader = 248
    RULE_ioOptionsConstants_writer = 249
    RULE_ioOptionsConstants_gryo = 250
    RULE_ioOptionsConstants_graphson = 251
    RULE_ioOptionsConstants_graphml = 252
    RULE_connectedComponentStringConstant = 253
    RULE_pageRankStringConstant = 254
    RULE_peerPressureStringConstant = 255
    RULE_shortestPathStringConstant = 256
    RULE_withOptionsStringConstant = 257
    RULE_ioOptionsStringConstant = 258
    RULE_booleanArgument = 259
    RULE_integerArgument = 260
    RULE_floatArgument = 261
    RULE_stringArgument = 262
    RULE_stringNullableArgument = 263
    RULE_stringNullableArgumentVarargs = 264
    RULE_dateArgument = 265
    RULE_genericArgument = 266
    RULE_genericArgumentVarargs = 267
    RULE_genericMapArgument = 268
    RULE_genericMapNullableArgument = 269
    RULE_nullableGenericLiteralMap = 270
    RULE_structureVertexArgument = 271
    RULE_traversalStrategyVarargs = 272
    RULE_traversalStrategyExpr = 273
    RULE_classTypeList = 274
    RULE_classTypeExpr = 275
    RULE_nestedTraversalList = 276
    RULE_nestedTraversalExpr = 277
    RULE_genericCollectionLiteral = 278
    RULE_genericLiteralVarargs = 279
    RULE_genericLiteralExpr = 280
    RULE_genericMapNullableLiteral = 281
    RULE_genericRangeLiteral = 282
    RULE_genericSetLiteral = 283
    RULE_stringNullableLiteralVarargs = 284
    RULE_genericLiteral = 285
    RULE_genericMapLiteral = 286
    RULE_mapKey = 287
    RULE_mapEntry = 288
    RULE_stringLiteral = 289
    RULE_stringNullableLiteral = 290
    RULE_integerLiteral = 291
    RULE_floatLiteral = 292
    RULE_numericLiteral = 293
    RULE_booleanLiteral = 294
    RULE_dateLiteral = 295
    RULE_nullLiteral = 296
    RULE_nanLiteral = 297
    RULE_infLiteral = 298
    RULE_uuidLiteral = 299
    RULE_nakedKey = 300
    RULE_classType = 301
    RULE_variable = 302
    RULE_keyword = 303

    ruleNames =  [ "queryList", "query", "emptyQuery", "traversalSource", 
                   "transactionPart", "rootTraversal", "traversalSourceSelfMethod", 
                   "traversalSourceSelfMethod_withBulk", "traversalSourceSelfMethod_withPath", 
                   "traversalSourceSelfMethod_withSack", "traversalSourceSelfMethod_withSideEffect", 
                   "traversalSourceSelfMethod_withStrategies", "traversalSourceSelfMethod_withoutStrategies", 
                   "traversalSourceSelfMethod_with", "traversalSourceSpawnMethod", 
                   "traversalSourceSpawnMethod_addE", "traversalSourceSpawnMethod_addV", 
                   "traversalSourceSpawnMethod_E", "traversalSourceSpawnMethod_V", 
                   "traversalSourceSpawnMethod_inject", "traversalSourceSpawnMethod_io", 
                   "traversalSourceSpawnMethod_mergeV", "traversalSourceSpawnMethod_mergeE", 
                   "traversalSourceSpawnMethod_call", "traversalSourceSpawnMethod_union", 
                   "chainedTraversal", "nestedTraversal", "terminatedTraversal", 
                   "traversalMethod", "traversalMethod_V", "traversalMethod_E", 
                   "traversalMethod_addE", "traversalMethod_addV", "traversalMethod_aggregate", 
                   "traversalMethod_all", "traversalMethod_and", "traversalMethod_any", 
                   "traversalMethod_as", "traversalMethod_asDate", "traversalMethod_asString", 
                   "traversalMethod_barrier", "traversalMethod_both", "traversalMethod_bothE", 
                   "traversalMethod_bothV", "traversalMethod_branch", "traversalMethod_by", 
                   "traversalMethod_call", "traversalMethod_cap", "traversalMethod_choose", 
                   "traversalMethod_coalesce", "traversalMethod_coin", "traversalMethod_combine", 
                   "traversalMethod_concat", "traversalMethod_conjoin", 
                   "traversalMethod_connectedComponent", "traversalMethod_constant", 
                   "traversalMethod_count", "traversalMethod_cyclicPath", 
                   "traversalMethod_dateAdd", "traversalMethod_dateDiff", 
                   "traversalMethod_dedup", "traversalMethod_difference", 
                   "traversalMethod_discard", "traversalMethod_disjunct", 
                   "traversalMethod_drop", "traversalMethod_element", "traversalMethod_elementMap", 
                   "traversalMethod_emit", "traversalMethod_fail", "traversalMethod_filter", 
                   "traversalMethod_flatMap", "traversalMethod_fold", "traversalMethod_format", 
                   "traversalMethod_from", "traversalMethod_group", "traversalMethod_groupCount", 
                   "traversalMethod_has", "traversalMethod_hasId", "traversalMethod_hasKey", 
                   "traversalMethod_hasLabel", "traversalMethod_hasNot", 
                   "traversalMethod_hasValue", "traversalMethod_id", "traversalMethod_identity", 
                   "traversalMethod_in", "traversalMethod_inE", "traversalMethod_intersect", 
                   "traversalMethod_inV", "traversalMethod_index", "traversalMethod_inject", 
                   "traversalMethod_is", "traversalMethod_key", "traversalMethod_label", 
                   "traversalMethod_length", "traversalMethod_limit", "traversalMethod_local", 
                   "traversalMethod_loops", "traversalMethod_lTrim", "traversalMethod_map", 
                   "traversalMethod_match", "traversalMethod_math", "traversalMethod_max", 
                   "traversalMethod_mean", "traversalMethod_merge", "traversalMethod_mergeV", 
                   "traversalMethod_mergeE", "traversalMethod_min", "traversalMethod_none", 
                   "traversalMethod_not", "traversalMethod_option", "traversalMethod_optional", 
                   "traversalMethod_or", "traversalMethod_order", "traversalMethod_otherV", 
                   "traversalMethod_out", "traversalMethod_outE", "traversalMethod_outV", 
                   "traversalMethod_pageRank", "traversalMethod_path", "traversalMethod_peerPressure", 
                   "traversalMethod_product", "traversalMethod_profile", 
                   "traversalMethod_project", "traversalMethod_properties", 
                   "traversalMethod_property", "traversalMethod_propertyMap", 
                   "traversalMethod_range", "traversalMethod_read", "traversalMethod_repeat", 
                   "traversalMethod_replace", "traversalMethod_reverse", 
                   "traversalMethod_rTrim", "traversalMethod_sack", "traversalMethod_sample", 
                   "traversalMethod_select", "traversalMethod_shortestPath", 
                   "traversalMethod_sideEffect", "traversalMethod_simplePath", 
                   "traversalMethod_skip", "traversalMethod_split", "traversalMethod_store", 
                   "traversalMethod_subgraph", "traversalMethod_substring", 
                   "traversalMethod_sum", "traversalMethod_tail", "traversalMethod_timeLimit", 
                   "traversalMethod_times", "traversalMethod_to", "traversalMethod_toE", 
                   "traversalMethod_toLower", "traversalMethod_toUpper", 
                   "traversalMethod_toV", "traversalMethod_tree", "traversalMethod_trim", 
                   "traversalMethod_unfold", "traversalMethod_union", "traversalMethod_until", 
                   "traversalMethod_value", "traversalMethod_valueMap", 
                   "traversalMethod_values", "traversalMethod_where", "traversalMethod_with", 
                   "traversalMethod_write", "structureVertexLiteral", "traversalStrategy", 
                   "configuration", "traversalScope", "traversalBarrier", 
                   "traversalT", "traversalTShort", "traversalTLong", "traversalMerge", 
                   "traversalOrder", "traversalDirection", "traversalDirectionShort", 
                   "traversalDirectionLong", "traversalCardinality", "traversalColumn", 
                   "traversalPop", "traversalOperator", "traversalPick", 
                   "traversalDT", "traversalPredicate", "traversalTerminalMethod", 
                   "traversalSackMethod", "traversalComparator", "traversalFunction", 
                   "traversalBiFunction", "traversalPredicate_eq", "traversalPredicate_neq", 
                   "traversalPredicate_lt", "traversalPredicate_lte", "traversalPredicate_gt", 
                   "traversalPredicate_gte", "traversalPredicate_inside", 
                   "traversalPredicate_outside", "traversalPredicate_between", 
                   "traversalPredicate_within", "traversalPredicate_without", 
                   "traversalPredicate_not", "traversalPredicate_containing", 
                   "traversalPredicate_notContaining", "traversalPredicate_startingWith", 
                   "traversalPredicate_notStartingWith", "traversalPredicate_endingWith", 
                   "traversalPredicate_notEndingWith", "traversalPredicate_regex", 
                   "traversalPredicate_notRegex", "traversalTerminalMethod_explain", 
                   "traversalTerminalMethod_hasNext", "traversalTerminalMethod_iterate", 
                   "traversalTerminalMethod_tryNext", "traversalTerminalMethod_next", 
                   "traversalTerminalMethod_toList", "traversalTerminalMethod_toSet", 
                   "traversalTerminalMethod_toBulkSet", "withOptionKeys", 
                   "connectedComponentConstants", "pageRankConstants", "peerPressureConstants", 
                   "shortestPathConstants", "withOptionsValues", "ioOptionsKeys", 
                   "ioOptionsValues", "connectedComponentConstants_component", 
                   "connectedComponentConstants_edges", "connectedComponentConstants_propertyName", 
                   "pageRankConstants_edges", "pageRankConstants_times", 
                   "pageRankConstants_propertyName", "peerPressureConstants_edges", 
                   "peerPressureConstants_times", "peerPressureConstants_propertyName", 
                   "shortestPathConstants_target", "shortestPathConstants_edges", 
                   "shortestPathConstants_distance", "shortestPathConstants_maxDistance", 
                   "shortestPathConstants_includeEdges", "withOptionsConstants_tokens", 
                   "withOptionsConstants_none", "withOptionsConstants_ids", 
                   "withOptionsConstants_labels", "withOptionsConstants_keys", 
                   "withOptionsConstants_values", "withOptionsConstants_all", 
                   "withOptionsConstants_indexer", "withOptionsConstants_list", 
                   "withOptionsConstants_map", "ioOptionsConstants_reader", 
                   "ioOptionsConstants_writer", "ioOptionsConstants_gryo", 
                   "ioOptionsConstants_graphson", "ioOptionsConstants_graphml", 
                   "connectedComponentStringConstant", "pageRankStringConstant", 
                   "peerPressureStringConstant", "shortestPathStringConstant", 
                   "withOptionsStringConstant", "ioOptionsStringConstant", 
                   "booleanArgument", "integerArgument", "floatArgument", 
                   "stringArgument", "stringNullableArgument", "stringNullableArgumentVarargs", 
                   "dateArgument", "genericArgument", "genericArgumentVarargs", 
                   "genericMapArgument", "genericMapNullableArgument", "nullableGenericLiteralMap", 
                   "structureVertexArgument", "traversalStrategyVarargs", 
                   "traversalStrategyExpr", "classTypeList", "classTypeExpr", 
                   "nestedTraversalList", "nestedTraversalExpr", "genericCollectionLiteral", 
                   "genericLiteralVarargs", "genericLiteralExpr", "genericMapNullableLiteral", 
                   "genericRangeLiteral", "genericSetLiteral", "stringNullableLiteralVarargs", 
                   "genericLiteral", "genericMapLiteral", "mapKey", "mapEntry", 
                   "stringLiteral", "stringNullableLiteral", "integerLiteral", 
                   "floatLiteral", "numericLiteral", "booleanLiteral", "dateLiteral", 
                   "nullLiteral", "nanLiteral", "infLiteral", "uuidLiteral", 
                   "nakedKey", "classType", "variable", "keyword" ]

    EOF = Token.EOF
    T__0=1
    K_ADDALL=2
    K_ADDE=3
    K_ADDV=4
    K_AGGREGATE=5
    K_ALL=6
    K_AND=7
    K_ANY=8
    K_AS=9
    K_ASC=10
    K_ASDATE=11
    K_ASSTRING=12
    K_ASSIGN=13
    K_BARRIER=14
    K_BARRIERU=15
    K_BEGIN=16
    K_BETWEEN=17
    K_BOTH=18
    K_BOTHU=19
    K_BOTHE=20
    K_BOTHV=21
    K_BRANCH=22
    K_BY=23
    K_CALL=24
    K_CAP=25
    K_CARDINALITY=26
    K_CHOOSE=27
    K_COALESCE=28
    K_COIN=29
    K_COLUMN=30
    K_COMBINE=31
    K_COMMIT=32
    K_COMPONENT=33
    K_CONCAT=34
    K_CONJOIN=35
    K_CONNECTEDCOMPONENT=36
    K_CONNECTEDCOMPONENTU=37
    K_CONSTANT=38
    K_CONTAINING=39
    K_COUNT=40
    K_CYCLICPATH=41
    K_DAY=42
    K_DATEADD=43
    K_DATEDIFF=44
    K_DATETIME=45
    K_DATETIMEU=46
    K_DECR=47
    K_DEDUP=48
    K_DESC=49
    K_DIFFERENCE=50
    K_DIRECTION=51
    K_DISJUNCT=52
    K_DISTANCE=53
    K_DIV=54
    K_DROP=55
    K_DT=56
    K_E=57
    K_EDGES=58
    K_ELEMENTMAP=59
    K_ELEMENT=60
    K_EMIT=61
    K_ENDINGWITH=62
    K_EQ=63
    K_EXPLAIN=64
    K_FAIL=65
    K_FALSE=66
    K_FILTER=67
    K_FIRST=68
    K_FLATMAP=69
    K_FOLD=70
    K_FORMAT=71
    K_FROM=72
    K_GLOBAL=73
    K_GT=74
    K_GTE=75
    K_GRAPHML=76
    K_GRAPHSON=77
    K_GROUPCOUNT=78
    K_GROUP=79
    K_GRYO=80
    K_HAS=81
    K_HASID=82
    K_HASKEY=83
    K_HASLABEL=84
    K_HASNEXT=85
    K_HASNOT=86
    K_HASVALUE=87
    K_HOUR=88
    K_ID=89
    K_IDENTITY=90
    K_IDS=91
    K_IN=92
    K_INU=93
    K_INE=94
    K_INCLUDEEDGES=95
    K_INCR=96
    K_INDEXER=97
    K_INDEX=98
    K_INFINITY=99
    K_INJECT=100
    K_INSIDE=101
    K_INTERSECT=102
    K_INV=103
    K_IOU=104
    K_IO=105
    K_IS=106
    K_ITERATE=107
    K_KEY=108
    K_KEYS=109
    K_LABELS=110
    K_LABEL=111
    K_LAST=112
    K_LENGTH=113
    K_LIMIT=114
    K_LIST=115
    K_LOCAL=116
    K_LOOPS=117
    K_LT=118
    K_LTE=119
    K_LTRIM=120
    K_MAP=121
    K_MATCH=122
    K_MATH=123
    K_MAX=124
    K_MAXDISTANCE=125
    K_MEAN=126
    K_MERGEU=127
    K_MERGE=128
    K_MERGEE=129
    K_MERGEV=130
    K_MIN=131
    K_MINUTE=132
    K_MINUS=133
    K_MIXED=134
    K_MULT=135
    K_NAN=136
    K_NEGATE=137
    K_NEXT=138
    K_NONE=139
    K_NOTREGEX=140
    K_NOTCONTAINING=141
    K_NOTENDINGWITH=142
    K_NOTSTARTINGWITH=143
    K_NOT=144
    K_NEQ=145
    K_NEW=146
    K_NORMSACK=147
    K_NULL=148
    K_ONCREATE=149
    K_ONMATCH=150
    K_OPERATOR=151
    K_OPTION=152
    K_OPTIONAL=153
    K_ORDERU=154
    K_ORDER=155
    K_OR=156
    K_OTHERV=157
    K_OUTU=158
    K_OUT=159
    K_OUTE=160
    K_OUTSIDE=161
    K_OUTV=162
    K_P=163
    K_PAGERANKU=164
    K_PAGERANK=165
    K_PATH=166
    K_PEERPRESSUREU=167
    K_PEERPRESSURE=168
    K_PICK=169
    K_POP=170
    K_PROFILE=171
    K_PROJECT=172
    K_PROPERTIES=173
    K_PROPERTYMAP=174
    K_PROPERTYNAME=175
    K_PROPERTY=176
    K_PRODUCT=177
    K_RANGE=178
    K_READ=179
    K_READER=180
    K_REFERENCEVERTEX=181
    K_REGEX=182
    K_REPLACE=183
    K_REPEAT=184
    K_REVERSE=185
    K_ROLLBACK=186
    K_RTRIM=187
    K_SACK=188
    K_SAMPLE=189
    K_SCOPE=190
    K_SECOND=191
    K_SELECT=192
    K_SET=193
    K_SHORTESTPATHU=194
    K_SHORTESTPATH=195
    K_SHUFFLE=196
    K_SIDEEFFECT=197
    K_SIMPLEPATH=198
    K_SINGLE=199
    K_SKIP=200
    K_SPLIT=201
    K_STARTINGWITH=202
    K_STORE=203
    K_SUBGRAPH=204
    K_SUBSTRING=205
    K_SUM=206
    K_SUMLONG=207
    K_T=208
    K_TAIL=209
    K_TARGET=210
    K_TEXTP=211
    K_TIMELIMIT=212
    K_TIMES=213
    K_TO=214
    K_TOBULKSET=215
    K_TOKENS=216
    K_TOLIST=217
    K_TOLOWER=218
    K_TOSET=219
    K_TOSTRING=220
    K_TOUPPER=221
    K_TOE=222
    K_TOV=223
    K_TREE=224
    K_TRIM=225
    K_TRUE=226
    K_TRYNEXT=227
    K_TX=228
    K_UNFOLD=229
    K_UNION=230
    K_UNTIL=231
    K_UUID=232
    K_V=233
    K_VALUEMAP=234
    K_VALUES=235
    K_VALUE=236
    K_VERTEX=237
    K_WHERE=238
    K_WITH=239
    K_WITHBULK=240
    K_WITHIN=241
    K_WITHOPTOPTIONS=242
    K_WITHOUT=243
    K_WITHOUTSTRATEGIES=244
    K_WITHPATH=245
    K_WITHSACK=246
    K_WITHSIDEEFFECT=247
    K_WITHSTRATEGIES=248
    K_WRITE=249
    K_WRITER=250
    IntegerLiteral=251
    FloatingPointLiteral=252
    SignedInfLiteral=253
    NonEmptyStringLiteral=254
    EmptyStringLiteral=255
    LPAREN=256
    RPAREN=257
    LBRACE=258
    RBRACE=259
    LBRACK=260
    RBRACK=261
    SEMI=262
    COMMA=263
    DOT=264
    COLON=265
    TRAVERSAL_ROOT=266
    ANON_TRAVERSAL_ROOT=267
    WS=268
    LINE_COMMENT=269
    Identifier=270

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class QueryListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.QueryContext)
            else:
                return self.getTypedRuleContext(GremlinParser.QueryContext,i)


        def EOF(self):
            return self.getToken(GremlinParser.EOF, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.SEMI)
            else:
                return self.getToken(GremlinParser.SEMI, i)

        def getRuleIndex(self):
            return GremlinParser.RULE_queryList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryList" ):
                listener.enterQueryList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryList" ):
                listener.exitQueryList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryList" ):
                return visitor.visitQueryList(self)
            else:
                return visitor.visitChildren(self)




    def queryList(self):

        localctx = GremlinParser.QueryListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_queryList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.query(0)
            self.state = 615
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 610
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==262:
                        self.state = 609
                        self.match(GremlinParser.SEMI)


                    self.state = 612
                    self.query(0) 
                self.state = 617
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==262:
                self.state = 618
                self.match(GremlinParser.SEMI)


            self.state = 621
            self.match(GremlinParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traversalSource(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def transactionPart(self):
            return self.getTypedRuleContext(GremlinParser.TransactionPartContext,0)


        def rootTraversal(self):
            return self.getTypedRuleContext(GremlinParser.RootTraversalContext,0)


        def traversalTerminalMethod(self):
            return self.getTypedRuleContext(GremlinParser.TraversalTerminalMethodContext,0)


        def emptyQuery(self):
            return self.getTypedRuleContext(GremlinParser.EmptyQueryContext,0)


        def query(self):
            return self.getTypedRuleContext(GremlinParser.QueryContext,0)


        def K_TOSTRING(self):
            return self.getToken(GremlinParser.K_TOSTRING, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)



    def query(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GremlinParser.QueryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 2
        self.enterRecursionRule(localctx, 2, self.RULE_query, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 624
                self.traversalSource(0)
                pass

            elif la_ == 2:
                self.state = 625
                self.traversalSource(0)
                self.state = 626
                self.match(GremlinParser.DOT)
                self.state = 627
                self.transactionPart()
                pass

            elif la_ == 3:
                self.state = 629
                self.rootTraversal()
                pass

            elif la_ == 4:
                self.state = 630
                self.rootTraversal()
                self.state = 631
                self.match(GremlinParser.DOT)
                self.state = 632
                self.traversalTerminalMethod()
                pass

            elif la_ == 5:
                self.state = 634
                self.emptyQuery()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 644
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = GremlinParser.QueryContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                    self.state = 637
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 638
                    self.match(GremlinParser.DOT)
                    self.state = 639
                    self.match(GremlinParser.K_TOSTRING)
                    self.state = 640
                    self.match(GremlinParser.LPAREN)
                    self.state = 641
                    self.match(GremlinParser.RPAREN) 
                self.state = 646
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EmptyQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EmptyStringLiteral(self):
            return self.getToken(GremlinParser.EmptyStringLiteral, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_emptyQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyQuery" ):
                listener.enterEmptyQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyQuery" ):
                listener.exitEmptyQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyQuery" ):
                return visitor.visitEmptyQuery(self)
            else:
                return visitor.visitChildren(self)




    def emptyQuery(self):

        localctx = GremlinParser.EmptyQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_emptyQuery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(GremlinParser.EmptyStringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRAVERSAL_ROOT(self):
            return self.getToken(GremlinParser.TRAVERSAL_ROOT, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def traversalSourceSelfMethod(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceSelfMethodContext,0)


        def traversalSource(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSource" ):
                listener.enterTraversalSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSource" ):
                listener.exitTraversalSource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSource" ):
                return visitor.visitTraversalSource(self)
            else:
                return visitor.visitChildren(self)



    def traversalSource(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GremlinParser.TraversalSourceContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 6
        self.enterRecursionRule(localctx, 6, self.RULE_traversalSource, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 650
                self.match(GremlinParser.TRAVERSAL_ROOT)
                pass

            elif la_ == 2:
                self.state = 651
                self.match(GremlinParser.TRAVERSAL_ROOT)
                self.state = 652
                self.match(GremlinParser.DOT)
                self.state = 653
                self.traversalSourceSelfMethod()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 661
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = GremlinParser.TraversalSourceContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_traversalSource)
                    self.state = 656
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 657
                    self.match(GremlinParser.DOT)
                    self.state = 658
                    self.traversalSourceSelfMethod() 
                self.state = 663
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TransactionPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_TX(self):
            return self.getToken(GremlinParser.K_TX, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.LPAREN)
            else:
                return self.getToken(GremlinParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.RPAREN)
            else:
                return self.getToken(GremlinParser.RPAREN, i)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_BEGIN(self):
            return self.getToken(GremlinParser.K_BEGIN, 0)

        def K_COMMIT(self):
            return self.getToken(GremlinParser.K_COMMIT, 0)

        def K_ROLLBACK(self):
            return self.getToken(GremlinParser.K_ROLLBACK, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_transactionPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionPart" ):
                listener.enterTransactionPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionPart" ):
                listener.exitTransactionPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionPart" ):
                return visitor.visitTransactionPart(self)
            else:
                return visitor.visitChildren(self)




    def transactionPart(self):

        localctx = GremlinParser.TransactionPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_transactionPart)
        try:
            self.state = 685
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 664
                self.match(GremlinParser.K_TX)
                self.state = 665
                self.match(GremlinParser.LPAREN)
                self.state = 666
                self.match(GremlinParser.RPAREN)
                self.state = 667
                self.match(GremlinParser.DOT)
                self.state = 668
                self.match(GremlinParser.K_BEGIN)
                self.state = 669
                self.match(GremlinParser.LPAREN)
                self.state = 670
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 671
                self.match(GremlinParser.K_TX)
                self.state = 672
                self.match(GremlinParser.LPAREN)
                self.state = 673
                self.match(GremlinParser.RPAREN)
                self.state = 674
                self.match(GremlinParser.DOT)
                self.state = 675
                self.match(GremlinParser.K_COMMIT)
                self.state = 676
                self.match(GremlinParser.LPAREN)
                self.state = 677
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 678
                self.match(GremlinParser.K_TX)
                self.state = 679
                self.match(GremlinParser.LPAREN)
                self.state = 680
                self.match(GremlinParser.RPAREN)
                self.state = 681
                self.match(GremlinParser.DOT)
                self.state = 682
                self.match(GremlinParser.K_ROLLBACK)
                self.state = 683
                self.match(GremlinParser.LPAREN)
                self.state = 684
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RootTraversalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traversalSource(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.DOT)
            else:
                return self.getToken(GremlinParser.DOT, i)

        def traversalSourceSpawnMethod(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceSpawnMethodContext,0)


        def chainedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.ChainedTraversalContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_rootTraversal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRootTraversal" ):
                listener.enterRootTraversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRootTraversal" ):
                listener.exitRootTraversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRootTraversal" ):
                return visitor.visitRootTraversal(self)
            else:
                return visitor.visitChildren(self)




    def rootTraversal(self):

        localctx = GremlinParser.RootTraversalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_rootTraversal)
        try:
            self.state = 697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 687
                self.traversalSource(0)
                self.state = 688
                self.match(GremlinParser.DOT)
                self.state = 689
                self.traversalSourceSpawnMethod()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 691
                self.traversalSource(0)
                self.state = 692
                self.match(GremlinParser.DOT)
                self.state = 693
                self.traversalSourceSpawnMethod()
                self.state = 694
                self.match(GremlinParser.DOT)
                self.state = 695
                self.chainedTraversal(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalSourceSelfMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traversalSourceSelfMethod_withBulk(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceSelfMethod_withBulkContext,0)


        def traversalSourceSelfMethod_withPath(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceSelfMethod_withPathContext,0)


        def traversalSourceSelfMethod_withSack(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceSelfMethod_withSackContext,0)


        def traversalSourceSelfMethod_withSideEffect(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceSelfMethod_withSideEffectContext,0)


        def traversalSourceSelfMethod_withStrategies(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceSelfMethod_withStrategiesContext,0)


        def traversalSourceSelfMethod_withoutStrategies(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceSelfMethod_withoutStrategiesContext,0)


        def traversalSourceSelfMethod_with(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceSelfMethod_withContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalSourceSelfMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSelfMethod" ):
                listener.enterTraversalSourceSelfMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSelfMethod" ):
                listener.exitTraversalSourceSelfMethod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSelfMethod" ):
                return visitor.visitTraversalSourceSelfMethod(self)
            else:
                return visitor.visitChildren(self)




    def traversalSourceSelfMethod(self):

        localctx = GremlinParser.TraversalSourceSelfMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_traversalSourceSelfMethod)
        try:
            self.state = 706
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [240]:
                self.enterOuterAlt(localctx, 1)
                self.state = 699
                self.traversalSourceSelfMethod_withBulk()
                pass
            elif token in [245]:
                self.enterOuterAlt(localctx, 2)
                self.state = 700
                self.traversalSourceSelfMethod_withPath()
                pass
            elif token in [246]:
                self.enterOuterAlt(localctx, 3)
                self.state = 701
                self.traversalSourceSelfMethod_withSack()
                pass
            elif token in [247]:
                self.enterOuterAlt(localctx, 4)
                self.state = 702
                self.traversalSourceSelfMethod_withSideEffect()
                pass
            elif token in [248]:
                self.enterOuterAlt(localctx, 5)
                self.state = 703
                self.traversalSourceSelfMethod_withStrategies()
                pass
            elif token in [244]:
                self.enterOuterAlt(localctx, 6)
                self.state = 704
                self.traversalSourceSelfMethod_withoutStrategies()
                pass
            elif token in [239]:
                self.enterOuterAlt(localctx, 7)
                self.state = 705
                self.traversalSourceSelfMethod_with()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalSourceSelfMethod_withBulkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_WITHBULK(self):
            return self.getToken(GremlinParser.K_WITHBULK, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def booleanArgument(self):
            return self.getTypedRuleContext(GremlinParser.BooleanArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalSourceSelfMethod_withBulk

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSelfMethod_withBulk" ):
                listener.enterTraversalSourceSelfMethod_withBulk(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSelfMethod_withBulk" ):
                listener.exitTraversalSourceSelfMethod_withBulk(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSelfMethod_withBulk" ):
                return visitor.visitTraversalSourceSelfMethod_withBulk(self)
            else:
                return visitor.visitChildren(self)




    def traversalSourceSelfMethod_withBulk(self):

        localctx = GremlinParser.TraversalSourceSelfMethod_withBulkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_traversalSourceSelfMethod_withBulk)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(GremlinParser.K_WITHBULK)
            self.state = 709
            self.match(GremlinParser.LPAREN)
            self.state = 710
            self.booleanArgument()
            self.state = 711
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalSourceSelfMethod_withPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_WITHPATH(self):
            return self.getToken(GremlinParser.K_WITHPATH, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalSourceSelfMethod_withPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSelfMethod_withPath" ):
                listener.enterTraversalSourceSelfMethod_withPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSelfMethod_withPath" ):
                listener.exitTraversalSourceSelfMethod_withPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSelfMethod_withPath" ):
                return visitor.visitTraversalSourceSelfMethod_withPath(self)
            else:
                return visitor.visitChildren(self)




    def traversalSourceSelfMethod_withPath(self):

        localctx = GremlinParser.TraversalSourceSelfMethod_withPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_traversalSourceSelfMethod_withPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.match(GremlinParser.K_WITHPATH)
            self.state = 714
            self.match(GremlinParser.LPAREN)
            self.state = 715
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalSourceSelfMethod_withSackContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_WITHSACK(self):
            return self.getToken(GremlinParser.K_WITHSACK, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)

        def traversalBiFunction(self):
            return self.getTypedRuleContext(GremlinParser.TraversalBiFunctionContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalSourceSelfMethod_withSack

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSelfMethod_withSack" ):
                listener.enterTraversalSourceSelfMethod_withSack(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSelfMethod_withSack" ):
                listener.exitTraversalSourceSelfMethod_withSack(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSelfMethod_withSack" ):
                return visitor.visitTraversalSourceSelfMethod_withSack(self)
            else:
                return visitor.visitChildren(self)




    def traversalSourceSelfMethod_withSack(self):

        localctx = GremlinParser.TraversalSourceSelfMethod_withSackContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_traversalSourceSelfMethod_withSack)
        try:
            self.state = 729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 717
                self.match(GremlinParser.K_WITHSACK)
                self.state = 718
                self.match(GremlinParser.LPAREN)
                self.state = 719
                self.genericArgument()
                self.state = 720
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 722
                self.match(GremlinParser.K_WITHSACK)
                self.state = 723
                self.match(GremlinParser.LPAREN)
                self.state = 724
                self.genericArgument()
                self.state = 725
                self.match(GremlinParser.COMMA)
                self.state = 726
                self.traversalBiFunction()
                self.state = 727
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalSourceSelfMethod_withSideEffectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_WITHSIDEEFFECT(self):
            return self.getToken(GremlinParser.K_WITHSIDEEFFECT, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)

        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def traversalBiFunction(self):
            return self.getTypedRuleContext(GremlinParser.TraversalBiFunctionContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalSourceSelfMethod_withSideEffect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSelfMethod_withSideEffect" ):
                listener.enterTraversalSourceSelfMethod_withSideEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSelfMethod_withSideEffect" ):
                listener.exitTraversalSourceSelfMethod_withSideEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSelfMethod_withSideEffect" ):
                return visitor.visitTraversalSourceSelfMethod_withSideEffect(self)
            else:
                return visitor.visitChildren(self)




    def traversalSourceSelfMethod_withSideEffect(self):

        localctx = GremlinParser.TraversalSourceSelfMethod_withSideEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_traversalSourceSelfMethod_withSideEffect)
        try:
            self.state = 747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 731
                self.match(GremlinParser.K_WITHSIDEEFFECT)
                self.state = 732
                self.match(GremlinParser.LPAREN)
                self.state = 733
                self.stringLiteral()
                self.state = 734
                self.match(GremlinParser.COMMA)
                self.state = 735
                self.genericArgument()
                self.state = 736
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 738
                self.match(GremlinParser.K_WITHSIDEEFFECT)
                self.state = 739
                self.match(GremlinParser.LPAREN)
                self.state = 740
                self.stringLiteral()
                self.state = 741
                self.match(GremlinParser.COMMA)
                self.state = 742
                self.genericArgument()
                self.state = 743
                self.match(GremlinParser.COMMA)
                self.state = 744
                self.traversalBiFunction()
                self.state = 745
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalSourceSelfMethod_withStrategiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_WITHSTRATEGIES(self):
            return self.getToken(GremlinParser.K_WITHSTRATEGIES, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def traversalStrategy(self):
            return self.getTypedRuleContext(GremlinParser.TraversalStrategyContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)

        def traversalStrategyVarargs(self):
            return self.getTypedRuleContext(GremlinParser.TraversalStrategyVarargsContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalSourceSelfMethod_withStrategies

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSelfMethod_withStrategies" ):
                listener.enterTraversalSourceSelfMethod_withStrategies(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSelfMethod_withStrategies" ):
                listener.exitTraversalSourceSelfMethod_withStrategies(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSelfMethod_withStrategies" ):
                return visitor.visitTraversalSourceSelfMethod_withStrategies(self)
            else:
                return visitor.visitChildren(self)




    def traversalSourceSelfMethod_withStrategies(self):

        localctx = GremlinParser.TraversalSourceSelfMethod_withStrategiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_traversalSourceSelfMethod_withStrategies)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.match(GremlinParser.K_WITHSTRATEGIES)
            self.state = 750
            self.match(GremlinParser.LPAREN)
            self.state = 751
            self.traversalStrategy()
            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==263:
                self.state = 752
                self.match(GremlinParser.COMMA)
                self.state = 753
                self.traversalStrategyVarargs()


            self.state = 756
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalSourceSelfMethod_withoutStrategiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_WITHOUTSTRATEGIES(self):
            return self.getToken(GremlinParser.K_WITHOUTSTRATEGIES, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def classType(self):
            return self.getTypedRuleContext(GremlinParser.ClassTypeContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)

        def classTypeList(self):
            return self.getTypedRuleContext(GremlinParser.ClassTypeListContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalSourceSelfMethod_withoutStrategies

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSelfMethod_withoutStrategies" ):
                listener.enterTraversalSourceSelfMethod_withoutStrategies(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSelfMethod_withoutStrategies" ):
                listener.exitTraversalSourceSelfMethod_withoutStrategies(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSelfMethod_withoutStrategies" ):
                return visitor.visitTraversalSourceSelfMethod_withoutStrategies(self)
            else:
                return visitor.visitChildren(self)




    def traversalSourceSelfMethod_withoutStrategies(self):

        localctx = GremlinParser.TraversalSourceSelfMethod_withoutStrategiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_traversalSourceSelfMethod_withoutStrategies)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(GremlinParser.K_WITHOUTSTRATEGIES)
            self.state = 759
            self.match(GremlinParser.LPAREN)
            self.state = 760
            self.classType()
            self.state = 763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==263:
                self.state = 761
                self.match(GremlinParser.COMMA)
                self.state = 762
                self.classTypeList()


            self.state = 765
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalSourceSelfMethod_withContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_WITH(self):
            return self.getToken(GremlinParser.K_WITH, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)

        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalSourceSelfMethod_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSelfMethod_with" ):
                listener.enterTraversalSourceSelfMethod_with(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSelfMethod_with" ):
                listener.exitTraversalSourceSelfMethod_with(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSelfMethod_with" ):
                return visitor.visitTraversalSourceSelfMethod_with(self)
            else:
                return visitor.visitChildren(self)




    def traversalSourceSelfMethod_with(self):

        localctx = GremlinParser.TraversalSourceSelfMethod_withContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_traversalSourceSelfMethod_with)
        try:
            self.state = 779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 767
                self.match(GremlinParser.K_WITH)
                self.state = 768
                self.match(GremlinParser.LPAREN)
                self.state = 769
                self.stringLiteral()
                self.state = 770
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 772
                self.match(GremlinParser.K_WITH)
                self.state = 773
                self.match(GremlinParser.LPAREN)
                self.state = 774
                self.stringLiteral()
                self.state = 775
                self.match(GremlinParser.COMMA)
                self.state = 776
                self.genericArgument()
                self.state = 777
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalSourceSpawnMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traversalSourceSpawnMethod_addE(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceSpawnMethod_addEContext,0)


        def traversalSourceSpawnMethod_addV(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceSpawnMethod_addVContext,0)


        def traversalSourceSpawnMethod_E(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceSpawnMethod_EContext,0)


        def traversalSourceSpawnMethod_V(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceSpawnMethod_VContext,0)


        def traversalSourceSpawnMethod_mergeE(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceSpawnMethod_mergeEContext,0)


        def traversalSourceSpawnMethod_mergeV(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceSpawnMethod_mergeVContext,0)


        def traversalSourceSpawnMethod_inject(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceSpawnMethod_injectContext,0)


        def traversalSourceSpawnMethod_io(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceSpawnMethod_ioContext,0)


        def traversalSourceSpawnMethod_call(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceSpawnMethod_callContext,0)


        def traversalSourceSpawnMethod_union(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSourceSpawnMethod_unionContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalSourceSpawnMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSpawnMethod" ):
                listener.enterTraversalSourceSpawnMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSpawnMethod" ):
                listener.exitTraversalSourceSpawnMethod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSpawnMethod" ):
                return visitor.visitTraversalSourceSpawnMethod(self)
            else:
                return visitor.visitChildren(self)




    def traversalSourceSpawnMethod(self):

        localctx = GremlinParser.TraversalSourceSpawnMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_traversalSourceSpawnMethod)
        try:
            self.state = 791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 781
                self.traversalSourceSpawnMethod_addE()
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 782
                self.traversalSourceSpawnMethod_addV()
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 3)
                self.state = 783
                self.traversalSourceSpawnMethod_E()
                pass
            elif token in [233]:
                self.enterOuterAlt(localctx, 4)
                self.state = 784
                self.traversalSourceSpawnMethod_V()
                pass
            elif token in [129]:
                self.enterOuterAlt(localctx, 5)
                self.state = 785
                self.traversalSourceSpawnMethod_mergeE()
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 6)
                self.state = 786
                self.traversalSourceSpawnMethod_mergeV()
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 7)
                self.state = 787
                self.traversalSourceSpawnMethod_inject()
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 8)
                self.state = 788
                self.traversalSourceSpawnMethod_io()
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 9)
                self.state = 789
                self.traversalSourceSpawnMethod_call()
                pass
            elif token in [230]:
                self.enterOuterAlt(localctx, 10)
                self.state = 790
                self.traversalSourceSpawnMethod_union()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalSourceSpawnMethod_addEContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ADDE(self):
            return self.getToken(GremlinParser.K_ADDE, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringArgument(self):
            return self.getTypedRuleContext(GremlinParser.StringArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalSourceSpawnMethod_addE

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSpawnMethod_addE" ):
                listener.enterTraversalSourceSpawnMethod_addE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSpawnMethod_addE" ):
                listener.exitTraversalSourceSpawnMethod_addE(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSpawnMethod_addE" ):
                return visitor.visitTraversalSourceSpawnMethod_addE(self)
            else:
                return visitor.visitChildren(self)




    def traversalSourceSpawnMethod_addE(self):

        localctx = GremlinParser.TraversalSourceSpawnMethod_addEContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_traversalSourceSpawnMethod_addE)
        try:
            self.state = 803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 793
                self.match(GremlinParser.K_ADDE)
                self.state = 794
                self.match(GremlinParser.LPAREN)
                self.state = 795
                self.stringArgument()
                self.state = 796
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 798
                self.match(GremlinParser.K_ADDE)
                self.state = 799
                self.match(GremlinParser.LPAREN)
                self.state = 800
                self.nestedTraversal()
                self.state = 801
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalSourceSpawnMethod_addVContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ADDV(self):
            return self.getToken(GremlinParser.K_ADDV, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def stringArgument(self):
            return self.getTypedRuleContext(GremlinParser.StringArgumentContext,0)


        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalSourceSpawnMethod_addV

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSpawnMethod_addV" ):
                listener.enterTraversalSourceSpawnMethod_addV(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSpawnMethod_addV" ):
                listener.exitTraversalSourceSpawnMethod_addV(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSpawnMethod_addV" ):
                return visitor.visitTraversalSourceSpawnMethod_addV(self)
            else:
                return visitor.visitChildren(self)




    def traversalSourceSpawnMethod_addV(self):

        localctx = GremlinParser.TraversalSourceSpawnMethod_addVContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_traversalSourceSpawnMethod_addV)
        try:
            self.state = 818
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 805
                self.match(GremlinParser.K_ADDV)
                self.state = 806
                self.match(GremlinParser.LPAREN)
                self.state = 807
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 808
                self.match(GremlinParser.K_ADDV)
                self.state = 809
                self.match(GremlinParser.LPAREN)
                self.state = 810
                self.stringArgument()
                self.state = 811
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 813
                self.match(GremlinParser.K_ADDV)
                self.state = 814
                self.match(GremlinParser.LPAREN)
                self.state = 815
                self.nestedTraversal()
                self.state = 816
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalSourceSpawnMethod_EContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_E(self):
            return self.getToken(GremlinParser.K_E, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def genericArgumentVarargs(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentVarargsContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalSourceSpawnMethod_E

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSpawnMethod_E" ):
                listener.enterTraversalSourceSpawnMethod_E(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSpawnMethod_E" ):
                listener.exitTraversalSourceSpawnMethod_E(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSpawnMethod_E" ):
                return visitor.visitTraversalSourceSpawnMethod_E(self)
            else:
                return visitor.visitChildren(self)




    def traversalSourceSpawnMethod_E(self):

        localctx = GremlinParser.TraversalSourceSpawnMethod_EContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_traversalSourceSpawnMethod_E)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.match(GremlinParser.K_E)
            self.state = 821
            self.match(GremlinParser.LPAREN)
            self.state = 822
            self.genericArgumentVarargs()
            self.state = 823
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalSourceSpawnMethod_VContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_V(self):
            return self.getToken(GremlinParser.K_V, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def genericArgumentVarargs(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentVarargsContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalSourceSpawnMethod_V

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSpawnMethod_V" ):
                listener.enterTraversalSourceSpawnMethod_V(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSpawnMethod_V" ):
                listener.exitTraversalSourceSpawnMethod_V(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSpawnMethod_V" ):
                return visitor.visitTraversalSourceSpawnMethod_V(self)
            else:
                return visitor.visitChildren(self)




    def traversalSourceSpawnMethod_V(self):

        localctx = GremlinParser.TraversalSourceSpawnMethod_VContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_traversalSourceSpawnMethod_V)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(GremlinParser.K_V)
            self.state = 826
            self.match(GremlinParser.LPAREN)
            self.state = 827
            self.genericArgumentVarargs()
            self.state = 828
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalSourceSpawnMethod_injectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_INJECT(self):
            return self.getToken(GremlinParser.K_INJECT, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def genericArgumentVarargs(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentVarargsContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalSourceSpawnMethod_inject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSpawnMethod_inject" ):
                listener.enterTraversalSourceSpawnMethod_inject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSpawnMethod_inject" ):
                listener.exitTraversalSourceSpawnMethod_inject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSpawnMethod_inject" ):
                return visitor.visitTraversalSourceSpawnMethod_inject(self)
            else:
                return visitor.visitChildren(self)




    def traversalSourceSpawnMethod_inject(self):

        localctx = GremlinParser.TraversalSourceSpawnMethod_injectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_traversalSourceSpawnMethod_inject)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.match(GremlinParser.K_INJECT)
            self.state = 831
            self.match(GremlinParser.LPAREN)
            self.state = 832
            self.genericArgumentVarargs()
            self.state = 833
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalSourceSpawnMethod_ioContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_IO(self):
            return self.getToken(GremlinParser.K_IO, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalSourceSpawnMethod_io

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSpawnMethod_io" ):
                listener.enterTraversalSourceSpawnMethod_io(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSpawnMethod_io" ):
                listener.exitTraversalSourceSpawnMethod_io(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSpawnMethod_io" ):
                return visitor.visitTraversalSourceSpawnMethod_io(self)
            else:
                return visitor.visitChildren(self)




    def traversalSourceSpawnMethod_io(self):

        localctx = GremlinParser.TraversalSourceSpawnMethod_ioContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_traversalSourceSpawnMethod_io)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(GremlinParser.K_IO)
            self.state = 836
            self.match(GremlinParser.LPAREN)
            self.state = 837
            self.stringLiteral()
            self.state = 838
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalSourceSpawnMethod_mergeVContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalSourceSpawnMethod_mergeV

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalSourceSpawnMethod_mergeV_TraversalContext(TraversalSourceSpawnMethod_mergeVContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalSourceSpawnMethod_mergeVContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_MERGEV(self):
            return self.getToken(GremlinParser.K_MERGEV, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSpawnMethod_mergeV_Traversal" ):
                listener.enterTraversalSourceSpawnMethod_mergeV_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSpawnMethod_mergeV_Traversal" ):
                listener.exitTraversalSourceSpawnMethod_mergeV_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSpawnMethod_mergeV_Traversal" ):
                return visitor.visitTraversalSourceSpawnMethod_mergeV_Traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalSourceSpawnMethod_mergeV_MapContext(TraversalSourceSpawnMethod_mergeVContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalSourceSpawnMethod_mergeVContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_MERGEV(self):
            return self.getToken(GremlinParser.K_MERGEV, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def genericMapNullableArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericMapNullableArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSpawnMethod_mergeV_Map" ):
                listener.enterTraversalSourceSpawnMethod_mergeV_Map(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSpawnMethod_mergeV_Map" ):
                listener.exitTraversalSourceSpawnMethod_mergeV_Map(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSpawnMethod_mergeV_Map" ):
                return visitor.visitTraversalSourceSpawnMethod_mergeV_Map(self)
            else:
                return visitor.visitChildren(self)



    def traversalSourceSpawnMethod_mergeV(self):

        localctx = GremlinParser.TraversalSourceSpawnMethod_mergeVContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_traversalSourceSpawnMethod_mergeV)
        try:
            self.state = 850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalSourceSpawnMethod_mergeV_MapContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 840
                self.match(GremlinParser.K_MERGEV)
                self.state = 841
                self.match(GremlinParser.LPAREN)
                self.state = 842
                self.genericMapNullableArgument()
                self.state = 843
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalSourceSpawnMethod_mergeV_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 845
                self.match(GremlinParser.K_MERGEV)
                self.state = 846
                self.match(GremlinParser.LPAREN)
                self.state = 847
                self.nestedTraversal()
                self.state = 848
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalSourceSpawnMethod_mergeEContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalSourceSpawnMethod_mergeE

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalSourceSpawnMethod_mergeE_TraversalContext(TraversalSourceSpawnMethod_mergeEContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalSourceSpawnMethod_mergeEContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_MERGEE(self):
            return self.getToken(GremlinParser.K_MERGEE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSpawnMethod_mergeE_Traversal" ):
                listener.enterTraversalSourceSpawnMethod_mergeE_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSpawnMethod_mergeE_Traversal" ):
                listener.exitTraversalSourceSpawnMethod_mergeE_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSpawnMethod_mergeE_Traversal" ):
                return visitor.visitTraversalSourceSpawnMethod_mergeE_Traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalSourceSpawnMethod_mergeE_MapContext(TraversalSourceSpawnMethod_mergeEContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalSourceSpawnMethod_mergeEContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_MERGEE(self):
            return self.getToken(GremlinParser.K_MERGEE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def genericMapNullableArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericMapNullableArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSpawnMethod_mergeE_Map" ):
                listener.enterTraversalSourceSpawnMethod_mergeE_Map(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSpawnMethod_mergeE_Map" ):
                listener.exitTraversalSourceSpawnMethod_mergeE_Map(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSpawnMethod_mergeE_Map" ):
                return visitor.visitTraversalSourceSpawnMethod_mergeE_Map(self)
            else:
                return visitor.visitChildren(self)



    def traversalSourceSpawnMethod_mergeE(self):

        localctx = GremlinParser.TraversalSourceSpawnMethod_mergeEContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_traversalSourceSpawnMethod_mergeE)
        try:
            self.state = 862
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalSourceSpawnMethod_mergeE_MapContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 852
                self.match(GremlinParser.K_MERGEE)
                self.state = 853
                self.match(GremlinParser.LPAREN)
                self.state = 854
                self.genericMapNullableArgument()
                self.state = 855
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalSourceSpawnMethod_mergeE_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 857
                self.match(GremlinParser.K_MERGEE)
                self.state = 858
                self.match(GremlinParser.LPAREN)
                self.state = 859
                self.nestedTraversal()
                self.state = 860
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalSourceSpawnMethod_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalSourceSpawnMethod_call

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalSourceSpawnMethod_call_emptyContext(TraversalSourceSpawnMethod_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalSourceSpawnMethod_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_CALL(self):
            return self.getToken(GremlinParser.K_CALL, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSpawnMethod_call_empty" ):
                listener.enterTraversalSourceSpawnMethod_call_empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSpawnMethod_call_empty" ):
                listener.exitTraversalSourceSpawnMethod_call_empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSpawnMethod_call_empty" ):
                return visitor.visitTraversalSourceSpawnMethod_call_empty(self)
            else:
                return visitor.visitChildren(self)


    class TraversalSourceSpawnMethod_call_string_traversalContext(TraversalSourceSpawnMethod_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalSourceSpawnMethod_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_CALL(self):
            return self.getToken(GremlinParser.K_CALL, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSpawnMethod_call_string_traversal" ):
                listener.enterTraversalSourceSpawnMethod_call_string_traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSpawnMethod_call_string_traversal" ):
                listener.exitTraversalSourceSpawnMethod_call_string_traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSpawnMethod_call_string_traversal" ):
                return visitor.visitTraversalSourceSpawnMethod_call_string_traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalSourceSpawnMethod_call_string_mapContext(TraversalSourceSpawnMethod_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalSourceSpawnMethod_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_CALL(self):
            return self.getToken(GremlinParser.K_CALL, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def genericMapArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericMapArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSpawnMethod_call_string_map" ):
                listener.enterTraversalSourceSpawnMethod_call_string_map(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSpawnMethod_call_string_map" ):
                listener.exitTraversalSourceSpawnMethod_call_string_map(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSpawnMethod_call_string_map" ):
                return visitor.visitTraversalSourceSpawnMethod_call_string_map(self)
            else:
                return visitor.visitChildren(self)


    class TraversalSourceSpawnMethod_call_stringContext(TraversalSourceSpawnMethod_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalSourceSpawnMethod_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_CALL(self):
            return self.getToken(GremlinParser.K_CALL, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSpawnMethod_call_string" ):
                listener.enterTraversalSourceSpawnMethod_call_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSpawnMethod_call_string" ):
                listener.exitTraversalSourceSpawnMethod_call_string(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSpawnMethod_call_string" ):
                return visitor.visitTraversalSourceSpawnMethod_call_string(self)
            else:
                return visitor.visitChildren(self)


    class TraversalSourceSpawnMethod_call_string_map_traversalContext(TraversalSourceSpawnMethod_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalSourceSpawnMethod_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_CALL(self):
            return self.getToken(GremlinParser.K_CALL, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)
        def genericMapArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericMapArgumentContext,0)

        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSpawnMethod_call_string_map_traversal" ):
                listener.enterTraversalSourceSpawnMethod_call_string_map_traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSpawnMethod_call_string_map_traversal" ):
                listener.exitTraversalSourceSpawnMethod_call_string_map_traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSpawnMethod_call_string_map_traversal" ):
                return visitor.visitTraversalSourceSpawnMethod_call_string_map_traversal(self)
            else:
                return visitor.visitChildren(self)



    def traversalSourceSpawnMethod_call(self):

        localctx = GremlinParser.TraversalSourceSpawnMethod_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_traversalSourceSpawnMethod_call)
        try:
            self.state = 895
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalSourceSpawnMethod_call_emptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 864
                self.match(GremlinParser.K_CALL)
                self.state = 865
                self.match(GremlinParser.LPAREN)
                self.state = 866
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalSourceSpawnMethod_call_stringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 867
                self.match(GremlinParser.K_CALL)
                self.state = 868
                self.match(GremlinParser.LPAREN)
                self.state = 869
                self.stringLiteral()
                self.state = 870
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = GremlinParser.TraversalSourceSpawnMethod_call_string_mapContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 872
                self.match(GremlinParser.K_CALL)
                self.state = 873
                self.match(GremlinParser.LPAREN)
                self.state = 874
                self.stringLiteral()
                self.state = 875
                self.match(GremlinParser.COMMA)
                self.state = 876
                self.genericMapArgument()
                self.state = 877
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = GremlinParser.TraversalSourceSpawnMethod_call_string_traversalContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 879
                self.match(GremlinParser.K_CALL)
                self.state = 880
                self.match(GremlinParser.LPAREN)
                self.state = 881
                self.stringLiteral()
                self.state = 882
                self.match(GremlinParser.COMMA)
                self.state = 883
                self.nestedTraversal()
                self.state = 884
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = GremlinParser.TraversalSourceSpawnMethod_call_string_map_traversalContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 886
                self.match(GremlinParser.K_CALL)
                self.state = 887
                self.match(GremlinParser.LPAREN)
                self.state = 888
                self.stringLiteral()
                self.state = 889
                self.match(GremlinParser.COMMA)
                self.state = 890
                self.genericMapArgument()
                self.state = 891
                self.match(GremlinParser.COMMA)
                self.state = 892
                self.nestedTraversal()
                self.state = 893
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalSourceSpawnMethod_unionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UNION(self):
            return self.getToken(GremlinParser.K_UNION, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def nestedTraversalList(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalListContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalSourceSpawnMethod_union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSourceSpawnMethod_union" ):
                listener.enterTraversalSourceSpawnMethod_union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSourceSpawnMethod_union" ):
                listener.exitTraversalSourceSpawnMethod_union(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSourceSpawnMethod_union" ):
                return visitor.visitTraversalSourceSpawnMethod_union(self)
            else:
                return visitor.visitChildren(self)




    def traversalSourceSpawnMethod_union(self):

        localctx = GremlinParser.TraversalSourceSpawnMethod_unionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_traversalSourceSpawnMethod_union)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(GremlinParser.K_UNION)
            self.state = 898
            self.match(GremlinParser.LPAREN)
            self.state = 899
            self.nestedTraversalList()
            self.state = 900
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChainedTraversalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traversalMethod(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethodContext,0)


        def chainedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.ChainedTraversalContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_chainedTraversal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChainedTraversal" ):
                listener.enterChainedTraversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChainedTraversal" ):
                listener.exitChainedTraversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChainedTraversal" ):
                return visitor.visitChainedTraversal(self)
            else:
                return visitor.visitChildren(self)



    def chainedTraversal(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GremlinParser.ChainedTraversalContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 50
        self.enterRecursionRule(localctx, 50, self.RULE_chainedTraversal, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.traversalMethod()
            self._ctx.stop = self._input.LT(-1)
            self.state = 910
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = GremlinParser.ChainedTraversalContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_chainedTraversal)
                    self.state = 905
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 906
                    self.match(GremlinParser.DOT)
                    self.state = 907
                    self.traversalMethod() 
                self.state = 912
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NestedTraversalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chainedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.ChainedTraversalContext,0)


        def ANON_TRAVERSAL_ROOT(self):
            return self.getToken(GremlinParser.ANON_TRAVERSAL_ROOT, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_nestedTraversal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedTraversal" ):
                listener.enterNestedTraversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedTraversal" ):
                listener.exitNestedTraversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedTraversal" ):
                return visitor.visitNestedTraversal(self)
            else:
                return visitor.visitChildren(self)




    def nestedTraversal(self):

        localctx = GremlinParser.NestedTraversalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_nestedTraversal)
        try:
            self.state = 917
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 18, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 34, 35, 36, 38, 40, 41, 43, 44, 48, 50, 52, 55, 57, 59, 60, 61, 65, 67, 69, 70, 71, 72, 78, 79, 81, 82, 83, 84, 86, 87, 89, 90, 92, 94, 98, 100, 102, 103, 106, 108, 111, 113, 114, 116, 117, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 139, 144, 152, 153, 155, 156, 157, 159, 160, 162, 165, 166, 168, 171, 172, 173, 174, 176, 177, 178, 179, 183, 184, 185, 187, 188, 189, 192, 195, 197, 198, 200, 201, 203, 204, 205, 206, 209, 212, 213, 214, 218, 221, 222, 223, 224, 225, 229, 230, 231, 233, 234, 235, 236, 238, 239, 249]:
                self.enterOuterAlt(localctx, 1)
                self.state = 913
                self.chainedTraversal(0)
                pass
            elif token in [267]:
                self.enterOuterAlt(localctx, 2)
                self.state = 914
                self.match(GremlinParser.ANON_TRAVERSAL_ROOT)
                self.state = 915
                self.match(GremlinParser.DOT)
                self.state = 916
                self.chainedTraversal(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TerminatedTraversalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rootTraversal(self):
            return self.getTypedRuleContext(GremlinParser.RootTraversalContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def traversalTerminalMethod(self):
            return self.getTypedRuleContext(GremlinParser.TraversalTerminalMethodContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_terminatedTraversal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerminatedTraversal" ):
                listener.enterTerminatedTraversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerminatedTraversal" ):
                listener.exitTerminatedTraversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerminatedTraversal" ):
                return visitor.visitTerminatedTraversal(self)
            else:
                return visitor.visitChildren(self)




    def terminatedTraversal(self):

        localctx = GremlinParser.TerminatedTraversalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_terminatedTraversal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.rootTraversal()
            self.state = 920
            self.match(GremlinParser.DOT)
            self.state = 921
            self.traversalTerminalMethod()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traversalMethod_V(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_VContext,0)


        def traversalMethod_E(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_EContext,0)


        def traversalMethod_addE(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_addEContext,0)


        def traversalMethod_addV(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_addVContext,0)


        def traversalMethod_mergeE(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_mergeEContext,0)


        def traversalMethod_mergeV(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_mergeVContext,0)


        def traversalMethod_aggregate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_aggregateContext,0)


        def traversalMethod_all(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_allContext,0)


        def traversalMethod_and(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_andContext,0)


        def traversalMethod_any(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_anyContext,0)


        def traversalMethod_as(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_asContext,0)


        def traversalMethod_barrier(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_barrierContext,0)


        def traversalMethod_both(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_bothContext,0)


        def traversalMethod_bothE(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_bothEContext,0)


        def traversalMethod_bothV(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_bothVContext,0)


        def traversalMethod_branch(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_branchContext,0)


        def traversalMethod_by(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_byContext,0)


        def traversalMethod_cap(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_capContext,0)


        def traversalMethod_choose(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_chooseContext,0)


        def traversalMethod_coalesce(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_coalesceContext,0)


        def traversalMethod_coin(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_coinContext,0)


        def traversalMethod_conjoin(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_conjoinContext,0)


        def traversalMethod_connectedComponent(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_connectedComponentContext,0)


        def traversalMethod_constant(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_constantContext,0)


        def traversalMethod_count(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_countContext,0)


        def traversalMethod_cyclicPath(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_cyclicPathContext,0)


        def traversalMethod_dedup(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_dedupContext,0)


        def traversalMethod_difference(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_differenceContext,0)


        def traversalMethod_discard(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_discardContext,0)


        def traversalMethod_disjunct(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_disjunctContext,0)


        def traversalMethod_drop(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_dropContext,0)


        def traversalMethod_elementMap(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_elementMapContext,0)


        def traversalMethod_emit(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_emitContext,0)


        def traversalMethod_filter(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_filterContext,0)


        def traversalMethod_flatMap(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_flatMapContext,0)


        def traversalMethod_fold(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_foldContext,0)


        def traversalMethod_from(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_fromContext,0)


        def traversalMethod_group(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_groupContext,0)


        def traversalMethod_groupCount(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_groupCountContext,0)


        def traversalMethod_has(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_hasContext,0)


        def traversalMethod_hasId(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_hasIdContext,0)


        def traversalMethod_hasKey(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_hasKeyContext,0)


        def traversalMethod_hasLabel(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_hasLabelContext,0)


        def traversalMethod_hasNot(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_hasNotContext,0)


        def traversalMethod_hasValue(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_hasValueContext,0)


        def traversalMethod_id(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_idContext,0)


        def traversalMethod_identity(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_identityContext,0)


        def traversalMethod_in(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_inContext,0)


        def traversalMethod_inE(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_inEContext,0)


        def traversalMethod_intersect(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_intersectContext,0)


        def traversalMethod_inV(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_inVContext,0)


        def traversalMethod_index(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_indexContext,0)


        def traversalMethod_inject(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_injectContext,0)


        def traversalMethod_is(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_isContext,0)


        def traversalMethod_key(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_keyContext,0)


        def traversalMethod_label(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_labelContext,0)


        def traversalMethod_limit(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_limitContext,0)


        def traversalMethod_local(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_localContext,0)


        def traversalMethod_loops(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_loopsContext,0)


        def traversalMethod_map(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_mapContext,0)


        def traversalMethod_match(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_matchContext,0)


        def traversalMethod_math(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_mathContext,0)


        def traversalMethod_max(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_maxContext,0)


        def traversalMethod_mean(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_meanContext,0)


        def traversalMethod_min(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_minContext,0)


        def traversalMethod_none(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_noneContext,0)


        def traversalMethod_not(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_notContext,0)


        def traversalMethod_option(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_optionContext,0)


        def traversalMethod_optional(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_optionalContext,0)


        def traversalMethod_or(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_orContext,0)


        def traversalMethod_order(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_orderContext,0)


        def traversalMethod_otherV(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_otherVContext,0)


        def traversalMethod_out(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_outContext,0)


        def traversalMethod_outE(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_outEContext,0)


        def traversalMethod_outV(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_outVContext,0)


        def traversalMethod_pageRank(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_pageRankContext,0)


        def traversalMethod_path(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_pathContext,0)


        def traversalMethod_peerPressure(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_peerPressureContext,0)


        def traversalMethod_profile(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_profileContext,0)


        def traversalMethod_project(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_projectContext,0)


        def traversalMethod_properties(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_propertiesContext,0)


        def traversalMethod_property(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_propertyContext,0)


        def traversalMethod_propertyMap(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_propertyMapContext,0)


        def traversalMethod_range(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_rangeContext,0)


        def traversalMethod_read(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_readContext,0)


        def traversalMethod_repeat(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_repeatContext,0)


        def traversalMethod_sack(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_sackContext,0)


        def traversalMethod_sample(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_sampleContext,0)


        def traversalMethod_select(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_selectContext,0)


        def traversalMethod_combine(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_combineContext,0)


        def traversalMethod_product(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_productContext,0)


        def traversalMethod_merge(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_mergeContext,0)


        def traversalMethod_shortestPath(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_shortestPathContext,0)


        def traversalMethod_sideEffect(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_sideEffectContext,0)


        def traversalMethod_simplePath(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_simplePathContext,0)


        def traversalMethod_skip(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_skipContext,0)


        def traversalMethod_store(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_storeContext,0)


        def traversalMethod_subgraph(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_subgraphContext,0)


        def traversalMethod_sum(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_sumContext,0)


        def traversalMethod_tail(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_tailContext,0)


        def traversalMethod_fail(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_failContext,0)


        def traversalMethod_timeLimit(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_timeLimitContext,0)


        def traversalMethod_times(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_timesContext,0)


        def traversalMethod_to(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_toContext,0)


        def traversalMethod_toE(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_toEContext,0)


        def traversalMethod_toV(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_toVContext,0)


        def traversalMethod_tree(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_treeContext,0)


        def traversalMethod_unfold(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_unfoldContext,0)


        def traversalMethod_union(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_unionContext,0)


        def traversalMethod_until(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_untilContext,0)


        def traversalMethod_value(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_valueContext,0)


        def traversalMethod_valueMap(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_valueMapContext,0)


        def traversalMethod_values(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_valuesContext,0)


        def traversalMethod_where(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_whereContext,0)


        def traversalMethod_with(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_withContext,0)


        def traversalMethod_write(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_writeContext,0)


        def traversalMethod_element(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_elementContext,0)


        def traversalMethod_call(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_callContext,0)


        def traversalMethod_concat(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_concatContext,0)


        def traversalMethod_asString(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_asStringContext,0)


        def traversalMethod_format(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_formatContext,0)


        def traversalMethod_toUpper(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_toUpperContext,0)


        def traversalMethod_toLower(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_toLowerContext,0)


        def traversalMethod_length(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_lengthContext,0)


        def traversalMethod_trim(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_trimContext,0)


        def traversalMethod_lTrim(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_lTrimContext,0)


        def traversalMethod_rTrim(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_rTrimContext,0)


        def traversalMethod_reverse(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_reverseContext,0)


        def traversalMethod_replace(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_replaceContext,0)


        def traversalMethod_split(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_splitContext,0)


        def traversalMethod_substring(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_substringContext,0)


        def traversalMethod_asDate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_asDateContext,0)


        def traversalMethod_dateAdd(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_dateAddContext,0)


        def traversalMethod_dateDiff(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMethod_dateDiffContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod" ):
                listener.enterTraversalMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod" ):
                listener.exitTraversalMethod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod" ):
                return visitor.visitTraversalMethod(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod(self):

        localctx = GremlinParser.TraversalMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_traversalMethod)
        try:
            self.state = 1057
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [233]:
                self.enterOuterAlt(localctx, 1)
                self.state = 923
                self.traversalMethod_V()
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 2)
                self.state = 924
                self.traversalMethod_E()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 3)
                self.state = 925
                self.traversalMethod_addE()
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 4)
                self.state = 926
                self.traversalMethod_addV()
                pass
            elif token in [129]:
                self.enterOuterAlt(localctx, 5)
                self.state = 927
                self.traversalMethod_mergeE()
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 6)
                self.state = 928
                self.traversalMethod_mergeV()
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 7)
                self.state = 929
                self.traversalMethod_aggregate()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 8)
                self.state = 930
                self.traversalMethod_all()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 9)
                self.state = 931
                self.traversalMethod_and()
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 10)
                self.state = 932
                self.traversalMethod_any()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 11)
                self.state = 933
                self.traversalMethod_as()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 12)
                self.state = 934
                self.traversalMethod_barrier()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 13)
                self.state = 935
                self.traversalMethod_both()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 14)
                self.state = 936
                self.traversalMethod_bothE()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 15)
                self.state = 937
                self.traversalMethod_bothV()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 16)
                self.state = 938
                self.traversalMethod_branch()
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 17)
                self.state = 939
                self.traversalMethod_by()
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 18)
                self.state = 940
                self.traversalMethod_cap()
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 19)
                self.state = 941
                self.traversalMethod_choose()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 20)
                self.state = 942
                self.traversalMethod_coalesce()
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 21)
                self.state = 943
                self.traversalMethod_coin()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 22)
                self.state = 944
                self.traversalMethod_conjoin()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 23)
                self.state = 945
                self.traversalMethod_connectedComponent()
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 24)
                self.state = 946
                self.traversalMethod_constant()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 25)
                self.state = 947
                self.traversalMethod_count()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 26)
                self.state = 948
                self.traversalMethod_cyclicPath()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 27)
                self.state = 949
                self.traversalMethod_dedup()
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 28)
                self.state = 950
                self.traversalMethod_difference()
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 29)
                self.state = 951
                self.traversalMethod_discard()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 30)
                self.state = 952
                self.traversalMethod_disjunct()
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 31)
                self.state = 953
                self.traversalMethod_drop()
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 32)
                self.state = 954
                self.traversalMethod_elementMap()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 33)
                self.state = 955
                self.traversalMethod_emit()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 34)
                self.state = 956
                self.traversalMethod_filter()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 35)
                self.state = 957
                self.traversalMethod_flatMap()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 36)
                self.state = 958
                self.traversalMethod_fold()
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 37)
                self.state = 959
                self.traversalMethod_from()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 38)
                self.state = 960
                self.traversalMethod_group()
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 39)
                self.state = 961
                self.traversalMethod_groupCount()
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 40)
                self.state = 962
                self.traversalMethod_has()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 41)
                self.state = 963
                self.traversalMethod_hasId()
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 42)
                self.state = 964
                self.traversalMethod_hasKey()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 43)
                self.state = 965
                self.traversalMethod_hasLabel()
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 44)
                self.state = 966
                self.traversalMethod_hasNot()
                pass
            elif token in [87]:
                self.enterOuterAlt(localctx, 45)
                self.state = 967
                self.traversalMethod_hasValue()
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 46)
                self.state = 968
                self.traversalMethod_id()
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 47)
                self.state = 969
                self.traversalMethod_identity()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 48)
                self.state = 970
                self.traversalMethod_in()
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 49)
                self.state = 971
                self.traversalMethod_inE()
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 50)
                self.state = 972
                self.traversalMethod_intersect()
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 51)
                self.state = 973
                self.traversalMethod_inV()
                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 52)
                self.state = 974
                self.traversalMethod_index()
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 53)
                self.state = 975
                self.traversalMethod_inject()
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 54)
                self.state = 976
                self.traversalMethod_is()
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 55)
                self.state = 977
                self.traversalMethod_key()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 56)
                self.state = 978
                self.traversalMethod_label()
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 57)
                self.state = 979
                self.traversalMethod_limit()
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 58)
                self.state = 980
                self.traversalMethod_local()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 59)
                self.state = 981
                self.traversalMethod_loops()
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 60)
                self.state = 982
                self.traversalMethod_map()
                pass
            elif token in [122]:
                self.enterOuterAlt(localctx, 61)
                self.state = 983
                self.traversalMethod_match()
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 62)
                self.state = 984
                self.traversalMethod_math()
                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 63)
                self.state = 985
                self.traversalMethod_max()
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 64)
                self.state = 986
                self.traversalMethod_mean()
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 65)
                self.state = 987
                self.traversalMethod_min()
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 66)
                self.state = 988
                self.traversalMethod_none()
                pass
            elif token in [144]:
                self.enterOuterAlt(localctx, 67)
                self.state = 989
                self.traversalMethod_not()
                pass
            elif token in [152]:
                self.enterOuterAlt(localctx, 68)
                self.state = 990
                self.traversalMethod_option()
                pass
            elif token in [153]:
                self.enterOuterAlt(localctx, 69)
                self.state = 991
                self.traversalMethod_optional()
                pass
            elif token in [156]:
                self.enterOuterAlt(localctx, 70)
                self.state = 992
                self.traversalMethod_or()
                pass
            elif token in [155]:
                self.enterOuterAlt(localctx, 71)
                self.state = 993
                self.traversalMethod_order()
                pass
            elif token in [157]:
                self.enterOuterAlt(localctx, 72)
                self.state = 994
                self.traversalMethod_otherV()
                pass
            elif token in [159]:
                self.enterOuterAlt(localctx, 73)
                self.state = 995
                self.traversalMethod_out()
                pass
            elif token in [160]:
                self.enterOuterAlt(localctx, 74)
                self.state = 996
                self.traversalMethod_outE()
                pass
            elif token in [162]:
                self.enterOuterAlt(localctx, 75)
                self.state = 997
                self.traversalMethod_outV()
                pass
            elif token in [165]:
                self.enterOuterAlt(localctx, 76)
                self.state = 998
                self.traversalMethod_pageRank()
                pass
            elif token in [166]:
                self.enterOuterAlt(localctx, 77)
                self.state = 999
                self.traversalMethod_path()
                pass
            elif token in [168]:
                self.enterOuterAlt(localctx, 78)
                self.state = 1000
                self.traversalMethod_peerPressure()
                pass
            elif token in [171]:
                self.enterOuterAlt(localctx, 79)
                self.state = 1001
                self.traversalMethod_profile()
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 80)
                self.state = 1002
                self.traversalMethod_project()
                pass
            elif token in [173]:
                self.enterOuterAlt(localctx, 81)
                self.state = 1003
                self.traversalMethod_properties()
                pass
            elif token in [176]:
                self.enterOuterAlt(localctx, 82)
                self.state = 1004
                self.traversalMethod_property()
                pass
            elif token in [174]:
                self.enterOuterAlt(localctx, 83)
                self.state = 1005
                self.traversalMethod_propertyMap()
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 84)
                self.state = 1006
                self.traversalMethod_range()
                pass
            elif token in [179]:
                self.enterOuterAlt(localctx, 85)
                self.state = 1007
                self.traversalMethod_read()
                pass
            elif token in [184]:
                self.enterOuterAlt(localctx, 86)
                self.state = 1008
                self.traversalMethod_repeat()
                pass
            elif token in [188]:
                self.enterOuterAlt(localctx, 87)
                self.state = 1009
                self.traversalMethod_sack()
                pass
            elif token in [189]:
                self.enterOuterAlt(localctx, 88)
                self.state = 1010
                self.traversalMethod_sample()
                pass
            elif token in [192]:
                self.enterOuterAlt(localctx, 89)
                self.state = 1011
                self.traversalMethod_select()
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 90)
                self.state = 1012
                self.traversalMethod_combine()
                pass
            elif token in [177]:
                self.enterOuterAlt(localctx, 91)
                self.state = 1013
                self.traversalMethod_product()
                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 92)
                self.state = 1014
                self.traversalMethod_merge()
                pass
            elif token in [195]:
                self.enterOuterAlt(localctx, 93)
                self.state = 1015
                self.traversalMethod_shortestPath()
                pass
            elif token in [197]:
                self.enterOuterAlt(localctx, 94)
                self.state = 1016
                self.traversalMethod_sideEffect()
                pass
            elif token in [198]:
                self.enterOuterAlt(localctx, 95)
                self.state = 1017
                self.traversalMethod_simplePath()
                pass
            elif token in [200]:
                self.enterOuterAlt(localctx, 96)
                self.state = 1018
                self.traversalMethod_skip()
                pass
            elif token in [203]:
                self.enterOuterAlt(localctx, 97)
                self.state = 1019
                self.traversalMethod_store()
                pass
            elif token in [204]:
                self.enterOuterAlt(localctx, 98)
                self.state = 1020
                self.traversalMethod_subgraph()
                pass
            elif token in [206]:
                self.enterOuterAlt(localctx, 99)
                self.state = 1021
                self.traversalMethod_sum()
                pass
            elif token in [209]:
                self.enterOuterAlt(localctx, 100)
                self.state = 1022
                self.traversalMethod_tail()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 101)
                self.state = 1023
                self.traversalMethod_fail()
                pass
            elif token in [212]:
                self.enterOuterAlt(localctx, 102)
                self.state = 1024
                self.traversalMethod_timeLimit()
                pass
            elif token in [213]:
                self.enterOuterAlt(localctx, 103)
                self.state = 1025
                self.traversalMethod_times()
                pass
            elif token in [214]:
                self.enterOuterAlt(localctx, 104)
                self.state = 1026
                self.traversalMethod_to()
                pass
            elif token in [222]:
                self.enterOuterAlt(localctx, 105)
                self.state = 1027
                self.traversalMethod_toE()
                pass
            elif token in [223]:
                self.enterOuterAlt(localctx, 106)
                self.state = 1028
                self.traversalMethod_toV()
                pass
            elif token in [224]:
                self.enterOuterAlt(localctx, 107)
                self.state = 1029
                self.traversalMethod_tree()
                pass
            elif token in [229]:
                self.enterOuterAlt(localctx, 108)
                self.state = 1030
                self.traversalMethod_unfold()
                pass
            elif token in [230]:
                self.enterOuterAlt(localctx, 109)
                self.state = 1031
                self.traversalMethod_union()
                pass
            elif token in [231]:
                self.enterOuterAlt(localctx, 110)
                self.state = 1032
                self.traversalMethod_until()
                pass
            elif token in [236]:
                self.enterOuterAlt(localctx, 111)
                self.state = 1033
                self.traversalMethod_value()
                pass
            elif token in [234]:
                self.enterOuterAlt(localctx, 112)
                self.state = 1034
                self.traversalMethod_valueMap()
                pass
            elif token in [235]:
                self.enterOuterAlt(localctx, 113)
                self.state = 1035
                self.traversalMethod_values()
                pass
            elif token in [238]:
                self.enterOuterAlt(localctx, 114)
                self.state = 1036
                self.traversalMethod_where()
                pass
            elif token in [239]:
                self.enterOuterAlt(localctx, 115)
                self.state = 1037
                self.traversalMethod_with()
                pass
            elif token in [249]:
                self.enterOuterAlt(localctx, 116)
                self.state = 1038
                self.traversalMethod_write()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 117)
                self.state = 1039
                self.traversalMethod_element()
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 118)
                self.state = 1040
                self.traversalMethod_call()
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 119)
                self.state = 1041
                self.traversalMethod_concat()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 120)
                self.state = 1042
                self.traversalMethod_asString()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 121)
                self.state = 1043
                self.traversalMethod_format()
                pass
            elif token in [221]:
                self.enterOuterAlt(localctx, 122)
                self.state = 1044
                self.traversalMethod_toUpper()
                pass
            elif token in [218]:
                self.enterOuterAlt(localctx, 123)
                self.state = 1045
                self.traversalMethod_toLower()
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 124)
                self.state = 1046
                self.traversalMethod_length()
                pass
            elif token in [225]:
                self.enterOuterAlt(localctx, 125)
                self.state = 1047
                self.traversalMethod_trim()
                pass
            elif token in [120]:
                self.enterOuterAlt(localctx, 126)
                self.state = 1048
                self.traversalMethod_lTrim()
                pass
            elif token in [187]:
                self.enterOuterAlt(localctx, 127)
                self.state = 1049
                self.traversalMethod_rTrim()
                pass
            elif token in [185]:
                self.enterOuterAlt(localctx, 128)
                self.state = 1050
                self.traversalMethod_reverse()
                pass
            elif token in [183]:
                self.enterOuterAlt(localctx, 129)
                self.state = 1051
                self.traversalMethod_replace()
                pass
            elif token in [201]:
                self.enterOuterAlt(localctx, 130)
                self.state = 1052
                self.traversalMethod_split()
                pass
            elif token in [205]:
                self.enterOuterAlt(localctx, 131)
                self.state = 1053
                self.traversalMethod_substring()
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 132)
                self.state = 1054
                self.traversalMethod_asDate()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 133)
                self.state = 1055
                self.traversalMethod_dateAdd()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 134)
                self.state = 1056
                self.traversalMethod_dateDiff()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_VContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_V(self):
            return self.getToken(GremlinParser.K_V, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def genericArgumentVarargs(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentVarargsContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_V

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_V" ):
                listener.enterTraversalMethod_V(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_V" ):
                listener.exitTraversalMethod_V(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_V" ):
                return visitor.visitTraversalMethod_V(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_V(self):

        localctx = GremlinParser.TraversalMethod_VContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_traversalMethod_V)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.match(GremlinParser.K_V)
            self.state = 1060
            self.match(GremlinParser.LPAREN)
            self.state = 1061
            self.genericArgumentVarargs()
            self.state = 1062
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_EContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_E(self):
            return self.getToken(GremlinParser.K_E, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def genericArgumentVarargs(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentVarargsContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_E

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_E" ):
                listener.enterTraversalMethod_E(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_E" ):
                listener.exitTraversalMethod_E(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_E" ):
                return visitor.visitTraversalMethod_E(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_E(self):

        localctx = GremlinParser.TraversalMethod_EContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_traversalMethod_E)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.match(GremlinParser.K_E)
            self.state = 1065
            self.match(GremlinParser.LPAREN)
            self.state = 1066
            self.genericArgumentVarargs()
            self.state = 1067
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_addEContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_addE

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_addE_TraversalContext(TraversalMethod_addEContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_addEContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_ADDE(self):
            return self.getToken(GremlinParser.K_ADDE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_addE_Traversal" ):
                listener.enterTraversalMethod_addE_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_addE_Traversal" ):
                listener.exitTraversalMethod_addE_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_addE_Traversal" ):
                return visitor.visitTraversalMethod_addE_Traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_addE_StringContext(TraversalMethod_addEContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_addEContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_ADDE(self):
            return self.getToken(GremlinParser.K_ADDE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringArgument(self):
            return self.getTypedRuleContext(GremlinParser.StringArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_addE_String" ):
                listener.enterTraversalMethod_addE_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_addE_String" ):
                listener.exitTraversalMethod_addE_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_addE_String" ):
                return visitor.visitTraversalMethod_addE_String(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_addE(self):

        localctx = GremlinParser.TraversalMethod_addEContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_traversalMethod_addE)
        try:
            self.state = 1079
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_addE_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1069
                self.match(GremlinParser.K_ADDE)
                self.state = 1070
                self.match(GremlinParser.LPAREN)
                self.state = 1071
                self.stringArgument()
                self.state = 1072
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_addE_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1074
                self.match(GremlinParser.K_ADDE)
                self.state = 1075
                self.match(GremlinParser.LPAREN)
                self.state = 1076
                self.nestedTraversal()
                self.state = 1077
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_addVContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_addV

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_addV_EmptyContext(TraversalMethod_addVContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_addVContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_ADDV(self):
            return self.getToken(GremlinParser.K_ADDV, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_addV_Empty" ):
                listener.enterTraversalMethod_addV_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_addV_Empty" ):
                listener.exitTraversalMethod_addV_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_addV_Empty" ):
                return visitor.visitTraversalMethod_addV_Empty(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_addV_StringContext(TraversalMethod_addVContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_addVContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_ADDV(self):
            return self.getToken(GremlinParser.K_ADDV, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringArgument(self):
            return self.getTypedRuleContext(GremlinParser.StringArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_addV_String" ):
                listener.enterTraversalMethod_addV_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_addV_String" ):
                listener.exitTraversalMethod_addV_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_addV_String" ):
                return visitor.visitTraversalMethod_addV_String(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_addV_TraversalContext(TraversalMethod_addVContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_addVContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_ADDV(self):
            return self.getToken(GremlinParser.K_ADDV, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_addV_Traversal" ):
                listener.enterTraversalMethod_addV_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_addV_Traversal" ):
                listener.exitTraversalMethod_addV_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_addV_Traversal" ):
                return visitor.visitTraversalMethod_addV_Traversal(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_addV(self):

        localctx = GremlinParser.TraversalMethod_addVContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_traversalMethod_addV)
        try:
            self.state = 1094
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_addV_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1081
                self.match(GremlinParser.K_ADDV)
                self.state = 1082
                self.match(GremlinParser.LPAREN)
                self.state = 1083
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_addV_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1084
                self.match(GremlinParser.K_ADDV)
                self.state = 1085
                self.match(GremlinParser.LPAREN)
                self.state = 1086
                self.stringArgument()
                self.state = 1087
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = GremlinParser.TraversalMethod_addV_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1089
                self.match(GremlinParser.K_ADDV)
                self.state = 1090
                self.match(GremlinParser.LPAREN)
                self.state = 1091
                self.nestedTraversal()
                self.state = 1092
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_aggregateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_aggregate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_aggregate_StringContext(TraversalMethod_aggregateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_aggregateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_AGGREGATE(self):
            return self.getToken(GremlinParser.K_AGGREGATE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_aggregate_String" ):
                listener.enterTraversalMethod_aggregate_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_aggregate_String" ):
                listener.exitTraversalMethod_aggregate_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_aggregate_String" ):
                return visitor.visitTraversalMethod_aggregate_String(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_aggregate_Scope_StringContext(TraversalMethod_aggregateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_aggregateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_AGGREGATE(self):
            return self.getToken(GremlinParser.K_AGGREGATE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_aggregate_Scope_String" ):
                listener.enterTraversalMethod_aggregate_Scope_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_aggregate_Scope_String" ):
                listener.exitTraversalMethod_aggregate_Scope_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_aggregate_Scope_String" ):
                return visitor.visitTraversalMethod_aggregate_Scope_String(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_aggregate(self):

        localctx = GremlinParser.TraversalMethod_aggregateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_traversalMethod_aggregate)
        try:
            self.state = 1108
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_aggregate_Scope_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1096
                self.match(GremlinParser.K_AGGREGATE)
                self.state = 1097
                self.match(GremlinParser.LPAREN)
                self.state = 1098
                self.traversalScope()
                self.state = 1099
                self.match(GremlinParser.COMMA)
                self.state = 1100
                self.stringLiteral()
                self.state = 1101
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_aggregate_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1103
                self.match(GremlinParser.K_AGGREGATE)
                self.state = 1104
                self.match(GremlinParser.LPAREN)
                self.state = 1105
                self.stringLiteral()
                self.state = 1106
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_allContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_all

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_all_PContext(TraversalMethod_allContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_allContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_ALL(self):
            return self.getToken(GremlinParser.K_ALL, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalPredicate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicateContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_all_P" ):
                listener.enterTraversalMethod_all_P(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_all_P" ):
                listener.exitTraversalMethod_all_P(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_all_P" ):
                return visitor.visitTraversalMethod_all_P(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_all(self):

        localctx = GremlinParser.TraversalMethod_allContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_traversalMethod_all)
        try:
            localctx = GremlinParser.TraversalMethod_all_PContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.match(GremlinParser.K_ALL)
            self.state = 1111
            self.match(GremlinParser.LPAREN)
            self.state = 1112
            self.traversalPredicate(0)
            self.state = 1113
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_andContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_AND(self):
            return self.getToken(GremlinParser.K_AND, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def nestedTraversalList(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalListContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_and" ):
                listener.enterTraversalMethod_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_and" ):
                listener.exitTraversalMethod_and(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_and" ):
                return visitor.visitTraversalMethod_and(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_and(self):

        localctx = GremlinParser.TraversalMethod_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_traversalMethod_and)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            self.match(GremlinParser.K_AND)
            self.state = 1116
            self.match(GremlinParser.LPAREN)
            self.state = 1117
            self.nestedTraversalList()
            self.state = 1118
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_anyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_any

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_any_PContext(TraversalMethod_anyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_anyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_ANY(self):
            return self.getToken(GremlinParser.K_ANY, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalPredicate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicateContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_any_P" ):
                listener.enterTraversalMethod_any_P(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_any_P" ):
                listener.exitTraversalMethod_any_P(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_any_P" ):
                return visitor.visitTraversalMethod_any_P(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_any(self):

        localctx = GremlinParser.TraversalMethod_anyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_traversalMethod_any)
        try:
            localctx = GremlinParser.TraversalMethod_any_PContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self.match(GremlinParser.K_ANY)
            self.state = 1121
            self.match(GremlinParser.LPAREN)
            self.state = 1122
            self.traversalPredicate(0)
            self.state = 1123
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_asContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_AS(self):
            return self.getToken(GremlinParser.K_AS, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)

        def stringNullableLiteralVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralVarargsContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_as

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_as" ):
                listener.enterTraversalMethod_as(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_as" ):
                listener.exitTraversalMethod_as(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_as" ):
                return visitor.visitTraversalMethod_as(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_as(self):

        localctx = GremlinParser.TraversalMethod_asContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_traversalMethod_as)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(GremlinParser.K_AS)
            self.state = 1126
            self.match(GremlinParser.LPAREN)
            self.state = 1127
            self.stringLiteral()
            self.state = 1130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==263:
                self.state = 1128
                self.match(GremlinParser.COMMA)
                self.state = 1129
                self.stringNullableLiteralVarargs()


            self.state = 1132
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_asDateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ASDATE(self):
            return self.getToken(GremlinParser.K_ASDATE, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_asDate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_asDate" ):
                listener.enterTraversalMethod_asDate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_asDate" ):
                listener.exitTraversalMethod_asDate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_asDate" ):
                return visitor.visitTraversalMethod_asDate(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_asDate(self):

        localctx = GremlinParser.TraversalMethod_asDateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_traversalMethod_asDate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.match(GremlinParser.K_ASDATE)
            self.state = 1135
            self.match(GremlinParser.LPAREN)
            self.state = 1136
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_asStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_asString

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_asString_EmptyContext(TraversalMethod_asStringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_asStringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_ASSTRING(self):
            return self.getToken(GremlinParser.K_ASSTRING, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_asString_Empty" ):
                listener.enterTraversalMethod_asString_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_asString_Empty" ):
                listener.exitTraversalMethod_asString_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_asString_Empty" ):
                return visitor.visitTraversalMethod_asString_Empty(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_asString_ScopeContext(TraversalMethod_asStringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_asStringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_ASSTRING(self):
            return self.getToken(GremlinParser.K_ASSTRING, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_asString_Scope" ):
                listener.enterTraversalMethod_asString_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_asString_Scope" ):
                listener.exitTraversalMethod_asString_Scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_asString_Scope" ):
                return visitor.visitTraversalMethod_asString_Scope(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_asString(self):

        localctx = GremlinParser.TraversalMethod_asStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_traversalMethod_asString)
        try:
            self.state = 1146
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_asString_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1138
                self.match(GremlinParser.K_ASSTRING)
                self.state = 1139
                self.match(GremlinParser.LPAREN)
                self.state = 1140
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_asString_ScopeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1141
                self.match(GremlinParser.K_ASSTRING)
                self.state = 1142
                self.match(GremlinParser.LPAREN)
                self.state = 1143
                self.traversalScope()
                self.state = 1144
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_barrierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_barrier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_barrier_ConsumerContext(TraversalMethod_barrierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_barrierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_BARRIER(self):
            return self.getToken(GremlinParser.K_BARRIER, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalSackMethod(self):
            return self.getTypedRuleContext(GremlinParser.TraversalSackMethodContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_barrier_Consumer" ):
                listener.enterTraversalMethod_barrier_Consumer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_barrier_Consumer" ):
                listener.exitTraversalMethod_barrier_Consumer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_barrier_Consumer" ):
                return visitor.visitTraversalMethod_barrier_Consumer(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_barrier_intContext(TraversalMethod_barrierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_barrierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_BARRIER(self):
            return self.getToken(GremlinParser.K_BARRIER, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def integerLiteral(self):
            return self.getTypedRuleContext(GremlinParser.IntegerLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_barrier_int" ):
                listener.enterTraversalMethod_barrier_int(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_barrier_int" ):
                listener.exitTraversalMethod_barrier_int(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_barrier_int" ):
                return visitor.visitTraversalMethod_barrier_int(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_barrier_EmptyContext(TraversalMethod_barrierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_barrierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_BARRIER(self):
            return self.getToken(GremlinParser.K_BARRIER, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_barrier_Empty" ):
                listener.enterTraversalMethod_barrier_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_barrier_Empty" ):
                listener.exitTraversalMethod_barrier_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_barrier_Empty" ):
                return visitor.visitTraversalMethod_barrier_Empty(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_barrier(self):

        localctx = GremlinParser.TraversalMethod_barrierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_traversalMethod_barrier)
        try:
            self.state = 1161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_barrier_ConsumerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1148
                self.match(GremlinParser.K_BARRIER)
                self.state = 1149
                self.match(GremlinParser.LPAREN)
                self.state = 1150
                self.traversalSackMethod()
                self.state = 1151
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_barrier_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1153
                self.match(GremlinParser.K_BARRIER)
                self.state = 1154
                self.match(GremlinParser.LPAREN)
                self.state = 1155
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = GremlinParser.TraversalMethod_barrier_intContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1156
                self.match(GremlinParser.K_BARRIER)
                self.state = 1157
                self.match(GremlinParser.LPAREN)
                self.state = 1158
                self.integerLiteral()
                self.state = 1159
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_bothContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_BOTH(self):
            return self.getToken(GremlinParser.K_BOTH, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringNullableArgumentVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableArgumentVarargsContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_both

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_both" ):
                listener.enterTraversalMethod_both(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_both" ):
                listener.exitTraversalMethod_both(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_both" ):
                return visitor.visitTraversalMethod_both(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_both(self):

        localctx = GremlinParser.TraversalMethod_bothContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_traversalMethod_both)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            self.match(GremlinParser.K_BOTH)
            self.state = 1164
            self.match(GremlinParser.LPAREN)
            self.state = 1165
            self.stringNullableArgumentVarargs()
            self.state = 1166
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_bothEContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_BOTHE(self):
            return self.getToken(GremlinParser.K_BOTHE, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringNullableArgumentVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableArgumentVarargsContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_bothE

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_bothE" ):
                listener.enterTraversalMethod_bothE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_bothE" ):
                listener.exitTraversalMethod_bothE(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_bothE" ):
                return visitor.visitTraversalMethod_bothE(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_bothE(self):

        localctx = GremlinParser.TraversalMethod_bothEContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_traversalMethod_bothE)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            self.match(GremlinParser.K_BOTHE)
            self.state = 1169
            self.match(GremlinParser.LPAREN)
            self.state = 1170
            self.stringNullableArgumentVarargs()
            self.state = 1171
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_bothVContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_BOTHV(self):
            return self.getToken(GremlinParser.K_BOTHV, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_bothV

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_bothV" ):
                listener.enterTraversalMethod_bothV(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_bothV" ):
                listener.exitTraversalMethod_bothV(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_bothV" ):
                return visitor.visitTraversalMethod_bothV(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_bothV(self):

        localctx = GremlinParser.TraversalMethod_bothVContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_traversalMethod_bothV)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1173
            self.match(GremlinParser.K_BOTHV)
            self.state = 1174
            self.match(GremlinParser.LPAREN)
            self.state = 1175
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_branchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_BRANCH(self):
            return self.getToken(GremlinParser.K_BRANCH, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_branch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_branch" ):
                listener.enterTraversalMethod_branch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_branch" ):
                listener.exitTraversalMethod_branch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_branch" ):
                return visitor.visitTraversalMethod_branch(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_branch(self):

        localctx = GremlinParser.TraversalMethod_branchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_traversalMethod_branch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self.match(GremlinParser.K_BRANCH)
            self.state = 1178
            self.match(GremlinParser.LPAREN)
            self.state = 1179
            self.nestedTraversal()
            self.state = 1180
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_by

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_by_StringContext(TraversalMethod_byContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_byContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_BY(self):
            return self.getToken(GremlinParser.K_BY, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_by_String" ):
                listener.enterTraversalMethod_by_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_by_String" ):
                listener.exitTraversalMethod_by_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_by_String" ):
                return visitor.visitTraversalMethod_by_String(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_by_String_ComparatorContext(TraversalMethod_byContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_byContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_BY(self):
            return self.getToken(GremlinParser.K_BY, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def traversalComparator(self):
            return self.getTypedRuleContext(GremlinParser.TraversalComparatorContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_by_String_Comparator" ):
                listener.enterTraversalMethod_by_String_Comparator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_by_String_Comparator" ):
                listener.exitTraversalMethod_by_String_Comparator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_by_String_Comparator" ):
                return visitor.visitTraversalMethod_by_String_Comparator(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_by_FunctionContext(TraversalMethod_byContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_byContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_BY(self):
            return self.getToken(GremlinParser.K_BY, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalFunction(self):
            return self.getTypedRuleContext(GremlinParser.TraversalFunctionContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_by_Function" ):
                listener.enterTraversalMethod_by_Function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_by_Function" ):
                listener.exitTraversalMethod_by_Function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_by_Function" ):
                return visitor.visitTraversalMethod_by_Function(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_by_TraversalContext(TraversalMethod_byContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_byContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_BY(self):
            return self.getToken(GremlinParser.K_BY, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_by_Traversal" ):
                listener.enterTraversalMethod_by_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_by_Traversal" ):
                listener.exitTraversalMethod_by_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_by_Traversal" ):
                return visitor.visitTraversalMethod_by_Traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_by_EmptyContext(TraversalMethod_byContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_byContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_BY(self):
            return self.getToken(GremlinParser.K_BY, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_by_Empty" ):
                listener.enterTraversalMethod_by_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_by_Empty" ):
                listener.exitTraversalMethod_by_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_by_Empty" ):
                return visitor.visitTraversalMethod_by_Empty(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_by_ComparatorContext(TraversalMethod_byContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_byContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_BY(self):
            return self.getToken(GremlinParser.K_BY, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalComparator(self):
            return self.getTypedRuleContext(GremlinParser.TraversalComparatorContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_by_Comparator" ):
                listener.enterTraversalMethod_by_Comparator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_by_Comparator" ):
                listener.exitTraversalMethod_by_Comparator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_by_Comparator" ):
                return visitor.visitTraversalMethod_by_Comparator(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_by_OrderContext(TraversalMethod_byContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_byContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_BY(self):
            return self.getToken(GremlinParser.K_BY, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalOrder(self):
            return self.getTypedRuleContext(GremlinParser.TraversalOrderContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_by_Order" ):
                listener.enterTraversalMethod_by_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_by_Order" ):
                listener.exitTraversalMethod_by_Order(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_by_Order" ):
                return visitor.visitTraversalMethod_by_Order(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_by_Function_ComparatorContext(TraversalMethod_byContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_byContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_BY(self):
            return self.getToken(GremlinParser.K_BY, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalFunction(self):
            return self.getTypedRuleContext(GremlinParser.TraversalFunctionContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def traversalComparator(self):
            return self.getTypedRuleContext(GremlinParser.TraversalComparatorContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_by_Function_Comparator" ):
                listener.enterTraversalMethod_by_Function_Comparator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_by_Function_Comparator" ):
                listener.exitTraversalMethod_by_Function_Comparator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_by_Function_Comparator" ):
                return visitor.visitTraversalMethod_by_Function_Comparator(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_by_TContext(TraversalMethod_byContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_byContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_BY(self):
            return self.getToken(GremlinParser.K_BY, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalT(self):
            return self.getTypedRuleContext(GremlinParser.TraversalTContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_by_T" ):
                listener.enterTraversalMethod_by_T(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_by_T" ):
                listener.exitTraversalMethod_by_T(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_by_T" ):
                return visitor.visitTraversalMethod_by_T(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_by_Traversal_ComparatorContext(TraversalMethod_byContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_byContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_BY(self):
            return self.getToken(GremlinParser.K_BY, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def traversalComparator(self):
            return self.getTypedRuleContext(GremlinParser.TraversalComparatorContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_by_Traversal_Comparator" ):
                listener.enterTraversalMethod_by_Traversal_Comparator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_by_Traversal_Comparator" ):
                listener.exitTraversalMethod_by_Traversal_Comparator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_by_Traversal_Comparator" ):
                return visitor.visitTraversalMethod_by_Traversal_Comparator(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_by(self):

        localctx = GremlinParser.TraversalMethod_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_traversalMethod_by)
        try:
            self.state = 1236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_by_ComparatorContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1182
                self.match(GremlinParser.K_BY)
                self.state = 1183
                self.match(GremlinParser.LPAREN)
                self.state = 1184
                self.traversalComparator()
                self.state = 1185
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_by_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1187
                self.match(GremlinParser.K_BY)
                self.state = 1188
                self.match(GremlinParser.LPAREN)
                self.state = 1189
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = GremlinParser.TraversalMethod_by_FunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1190
                self.match(GremlinParser.K_BY)
                self.state = 1191
                self.match(GremlinParser.LPAREN)
                self.state = 1192
                self.traversalFunction()
                self.state = 1193
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = GremlinParser.TraversalMethod_by_Function_ComparatorContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1195
                self.match(GremlinParser.K_BY)
                self.state = 1196
                self.match(GremlinParser.LPAREN)
                self.state = 1197
                self.traversalFunction()
                self.state = 1198
                self.match(GremlinParser.COMMA)
                self.state = 1199
                self.traversalComparator()
                self.state = 1200
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = GremlinParser.TraversalMethod_by_OrderContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1202
                self.match(GremlinParser.K_BY)
                self.state = 1203
                self.match(GremlinParser.LPAREN)
                self.state = 1204
                self.traversalOrder()
                self.state = 1205
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 6:
                localctx = GremlinParser.TraversalMethod_by_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1207
                self.match(GremlinParser.K_BY)
                self.state = 1208
                self.match(GremlinParser.LPAREN)
                self.state = 1209
                self.stringLiteral()
                self.state = 1210
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 7:
                localctx = GremlinParser.TraversalMethod_by_String_ComparatorContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1212
                self.match(GremlinParser.K_BY)
                self.state = 1213
                self.match(GremlinParser.LPAREN)
                self.state = 1214
                self.stringLiteral()
                self.state = 1215
                self.match(GremlinParser.COMMA)
                self.state = 1216
                self.traversalComparator()
                self.state = 1217
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 8:
                localctx = GremlinParser.TraversalMethod_by_TContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1219
                self.match(GremlinParser.K_BY)
                self.state = 1220
                self.match(GremlinParser.LPAREN)
                self.state = 1221
                self.traversalT()
                self.state = 1222
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 9:
                localctx = GremlinParser.TraversalMethod_by_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1224
                self.match(GremlinParser.K_BY)
                self.state = 1225
                self.match(GremlinParser.LPAREN)
                self.state = 1226
                self.nestedTraversal()
                self.state = 1227
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 10:
                localctx = GremlinParser.TraversalMethod_by_Traversal_ComparatorContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1229
                self.match(GremlinParser.K_BY)
                self.state = 1230
                self.match(GremlinParser.LPAREN)
                self.state = 1231
                self.nestedTraversal()
                self.state = 1232
                self.match(GremlinParser.COMMA)
                self.state = 1233
                self.traversalComparator()
                self.state = 1234
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_call

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_call_string_mapContext(TraversalMethod_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_CALL(self):
            return self.getToken(GremlinParser.K_CALL, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def genericMapArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericMapArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_call_string_map" ):
                listener.enterTraversalMethod_call_string_map(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_call_string_map" ):
                listener.exitTraversalMethod_call_string_map(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_call_string_map" ):
                return visitor.visitTraversalMethod_call_string_map(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_call_string_map_traversalContext(TraversalMethod_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_CALL(self):
            return self.getToken(GremlinParser.K_CALL, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)
        def genericMapArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericMapArgumentContext,0)

        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_call_string_map_traversal" ):
                listener.enterTraversalMethod_call_string_map_traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_call_string_map_traversal" ):
                listener.exitTraversalMethod_call_string_map_traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_call_string_map_traversal" ):
                return visitor.visitTraversalMethod_call_string_map_traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_call_string_traversalContext(TraversalMethod_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_CALL(self):
            return self.getToken(GremlinParser.K_CALL, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_call_string_traversal" ):
                listener.enterTraversalMethod_call_string_traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_call_string_traversal" ):
                listener.exitTraversalMethod_call_string_traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_call_string_traversal" ):
                return visitor.visitTraversalMethod_call_string_traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_call_stringContext(TraversalMethod_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_CALL(self):
            return self.getToken(GremlinParser.K_CALL, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_call_string" ):
                listener.enterTraversalMethod_call_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_call_string" ):
                listener.exitTraversalMethod_call_string(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_call_string" ):
                return visitor.visitTraversalMethod_call_string(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_call(self):

        localctx = GremlinParser.TraversalMethod_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_traversalMethod_call)
        try:
            self.state = 1266
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_call_stringContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1238
                self.match(GremlinParser.K_CALL)
                self.state = 1239
                self.match(GremlinParser.LPAREN)
                self.state = 1240
                self.stringLiteral()
                self.state = 1241
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_call_string_mapContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1243
                self.match(GremlinParser.K_CALL)
                self.state = 1244
                self.match(GremlinParser.LPAREN)
                self.state = 1245
                self.stringLiteral()
                self.state = 1246
                self.match(GremlinParser.COMMA)
                self.state = 1247
                self.genericMapArgument()
                self.state = 1248
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = GremlinParser.TraversalMethod_call_string_traversalContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1250
                self.match(GremlinParser.K_CALL)
                self.state = 1251
                self.match(GremlinParser.LPAREN)
                self.state = 1252
                self.stringLiteral()
                self.state = 1253
                self.match(GremlinParser.COMMA)
                self.state = 1254
                self.nestedTraversal()
                self.state = 1255
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = GremlinParser.TraversalMethod_call_string_map_traversalContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1257
                self.match(GremlinParser.K_CALL)
                self.state = 1258
                self.match(GremlinParser.LPAREN)
                self.state = 1259
                self.stringLiteral()
                self.state = 1260
                self.match(GremlinParser.COMMA)
                self.state = 1261
                self.genericMapArgument()
                self.state = 1262
                self.match(GremlinParser.COMMA)
                self.state = 1263
                self.nestedTraversal()
                self.state = 1264
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_capContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CAP(self):
            return self.getToken(GremlinParser.K_CAP, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)

        def stringNullableLiteralVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralVarargsContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_cap

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_cap" ):
                listener.enterTraversalMethod_cap(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_cap" ):
                listener.exitTraversalMethod_cap(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_cap" ):
                return visitor.visitTraversalMethod_cap(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_cap(self):

        localctx = GremlinParser.TraversalMethod_capContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_traversalMethod_cap)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1268
            self.match(GremlinParser.K_CAP)
            self.state = 1269
            self.match(GremlinParser.LPAREN)
            self.state = 1270
            self.stringLiteral()
            self.state = 1273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==263:
                self.state = 1271
                self.match(GremlinParser.COMMA)
                self.state = 1272
                self.stringNullableLiteralVarargs()


            self.state = 1275
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_chooseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_choose

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_choose_TraversalContext(TraversalMethod_chooseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_chooseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_CHOOSE(self):
            return self.getToken(GremlinParser.K_CHOOSE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_choose_Traversal" ):
                listener.enterTraversalMethod_choose_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_choose_Traversal" ):
                listener.exitTraversalMethod_choose_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_choose_Traversal" ):
                return visitor.visitTraversalMethod_choose_Traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_choose_FunctionContext(TraversalMethod_chooseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_chooseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_CHOOSE(self):
            return self.getToken(GremlinParser.K_CHOOSE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalFunction(self):
            return self.getTypedRuleContext(GremlinParser.TraversalFunctionContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_choose_Function" ):
                listener.enterTraversalMethod_choose_Function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_choose_Function" ):
                listener.exitTraversalMethod_choose_Function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_choose_Function" ):
                return visitor.visitTraversalMethod_choose_Function(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_choose_Traversal_TraversalContext(TraversalMethod_chooseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_chooseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_CHOOSE(self):
            return self.getToken(GremlinParser.K_CHOOSE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.NestedTraversalContext)
            else:
                return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,i)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_choose_Traversal_Traversal" ):
                listener.enterTraversalMethod_choose_Traversal_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_choose_Traversal_Traversal" ):
                listener.exitTraversalMethod_choose_Traversal_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_choose_Traversal_Traversal" ):
                return visitor.visitTraversalMethod_choose_Traversal_Traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_choose_Predicate_TraversalContext(TraversalMethod_chooseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_chooseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_CHOOSE(self):
            return self.getToken(GremlinParser.K_CHOOSE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalPredicate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicateContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_choose_Predicate_Traversal" ):
                listener.enterTraversalMethod_choose_Predicate_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_choose_Predicate_Traversal" ):
                listener.exitTraversalMethod_choose_Predicate_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_choose_Predicate_Traversal" ):
                return visitor.visitTraversalMethod_choose_Predicate_Traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_choose_Predicate_Traversal_TraversalContext(TraversalMethod_chooseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_chooseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_CHOOSE(self):
            return self.getToken(GremlinParser.K_CHOOSE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalPredicate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicateContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)
        def nestedTraversal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.NestedTraversalContext)
            else:
                return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,i)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_choose_Predicate_Traversal_Traversal" ):
                listener.enterTraversalMethod_choose_Predicate_Traversal_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_choose_Predicate_Traversal_Traversal" ):
                listener.exitTraversalMethod_choose_Predicate_Traversal_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_choose_Predicate_Traversal_Traversal" ):
                return visitor.visitTraversalMethod_choose_Predicate_Traversal_Traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_choose_Traversal_Traversal_TraversalContext(TraversalMethod_chooseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_chooseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_CHOOSE(self):
            return self.getToken(GremlinParser.K_CHOOSE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.NestedTraversalContext)
            else:
                return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_choose_Traversal_Traversal_Traversal" ):
                listener.enterTraversalMethod_choose_Traversal_Traversal_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_choose_Traversal_Traversal_Traversal" ):
                listener.exitTraversalMethod_choose_Traversal_Traversal_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_choose_Traversal_Traversal_Traversal" ):
                return visitor.visitTraversalMethod_choose_Traversal_Traversal_Traversal(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_choose(self):

        localctx = GremlinParser.TraversalMethod_chooseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_traversalMethod_choose)
        try:
            self.state = 1319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_choose_FunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1277
                self.match(GremlinParser.K_CHOOSE)
                self.state = 1278
                self.match(GremlinParser.LPAREN)
                self.state = 1279
                self.traversalFunction()
                self.state = 1280
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_choose_Predicate_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1282
                self.match(GremlinParser.K_CHOOSE)
                self.state = 1283
                self.match(GremlinParser.LPAREN)
                self.state = 1284
                self.traversalPredicate(0)
                self.state = 1285
                self.match(GremlinParser.COMMA)
                self.state = 1286
                self.nestedTraversal()
                self.state = 1287
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = GremlinParser.TraversalMethod_choose_Predicate_Traversal_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1289
                self.match(GremlinParser.K_CHOOSE)
                self.state = 1290
                self.match(GremlinParser.LPAREN)
                self.state = 1291
                self.traversalPredicate(0)
                self.state = 1292
                self.match(GremlinParser.COMMA)
                self.state = 1293
                self.nestedTraversal()
                self.state = 1294
                self.match(GremlinParser.COMMA)
                self.state = 1295
                self.nestedTraversal()
                self.state = 1296
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = GremlinParser.TraversalMethod_choose_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1298
                self.match(GremlinParser.K_CHOOSE)
                self.state = 1299
                self.match(GremlinParser.LPAREN)
                self.state = 1300
                self.nestedTraversal()
                self.state = 1301
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = GremlinParser.TraversalMethod_choose_Traversal_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1303
                self.match(GremlinParser.K_CHOOSE)
                self.state = 1304
                self.match(GremlinParser.LPAREN)
                self.state = 1305
                self.nestedTraversal()
                self.state = 1306
                self.match(GremlinParser.COMMA)
                self.state = 1307
                self.nestedTraversal()
                self.state = 1308
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 6:
                localctx = GremlinParser.TraversalMethod_choose_Traversal_Traversal_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1310
                self.match(GremlinParser.K_CHOOSE)
                self.state = 1311
                self.match(GremlinParser.LPAREN)
                self.state = 1312
                self.nestedTraversal()
                self.state = 1313
                self.match(GremlinParser.COMMA)
                self.state = 1314
                self.nestedTraversal()
                self.state = 1315
                self.match(GremlinParser.COMMA)
                self.state = 1316
                self.nestedTraversal()
                self.state = 1317
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_coalesceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_COALESCE(self):
            return self.getToken(GremlinParser.K_COALESCE, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def nestedTraversalList(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalListContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_coalesce

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_coalesce" ):
                listener.enterTraversalMethod_coalesce(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_coalesce" ):
                listener.exitTraversalMethod_coalesce(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_coalesce" ):
                return visitor.visitTraversalMethod_coalesce(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_coalesce(self):

        localctx = GremlinParser.TraversalMethod_coalesceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_traversalMethod_coalesce)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self.match(GremlinParser.K_COALESCE)
            self.state = 1322
            self.match(GremlinParser.LPAREN)
            self.state = 1323
            self.nestedTraversalList()
            self.state = 1324
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_coinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_COIN(self):
            return self.getToken(GremlinParser.K_COIN, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def floatArgument(self):
            return self.getTypedRuleContext(GremlinParser.FloatArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_coin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_coin" ):
                listener.enterTraversalMethod_coin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_coin" ):
                listener.exitTraversalMethod_coin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_coin" ):
                return visitor.visitTraversalMethod_coin(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_coin(self):

        localctx = GremlinParser.TraversalMethod_coinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_traversalMethod_coin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self.match(GremlinParser.K_COIN)
            self.state = 1327
            self.match(GremlinParser.LPAREN)
            self.state = 1328
            self.floatArgument()
            self.state = 1329
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_combineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_combine

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_combine_ObjectContext(TraversalMethod_combineContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_combineContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_COMBINE(self):
            return self.getToken(GremlinParser.K_COMBINE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_combine_Object" ):
                listener.enterTraversalMethod_combine_Object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_combine_Object" ):
                listener.exitTraversalMethod_combine_Object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_combine_Object" ):
                return visitor.visitTraversalMethod_combine_Object(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_combine(self):

        localctx = GremlinParser.TraversalMethod_combineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_traversalMethod_combine)
        try:
            localctx = GremlinParser.TraversalMethod_combine_ObjectContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1331
            self.match(GremlinParser.K_COMBINE)
            self.state = 1332
            self.match(GremlinParser.LPAREN)
            self.state = 1333
            self.genericArgument()
            self.state = 1334
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_concatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_concat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_concat_Traversal_TraversalContext(TraversalMethod_concatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_concatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_CONCAT(self):
            return self.getToken(GremlinParser.K_CONCAT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)
        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def nestedTraversalList(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_concat_Traversal_Traversal" ):
                listener.enterTraversalMethod_concat_Traversal_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_concat_Traversal_Traversal" ):
                listener.exitTraversalMethod_concat_Traversal_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_concat_Traversal_Traversal" ):
                return visitor.visitTraversalMethod_concat_Traversal_Traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_concat_StringContext(TraversalMethod_concatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_concatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_CONCAT(self):
            return self.getToken(GremlinParser.K_CONCAT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringNullableLiteralVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralVarargsContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_concat_String" ):
                listener.enterTraversalMethod_concat_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_concat_String" ):
                listener.exitTraversalMethod_concat_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_concat_String" ):
                return visitor.visitTraversalMethod_concat_String(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_concat(self):

        localctx = GremlinParser.TraversalMethod_concatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_traversalMethod_concat)
        self._la = 0 # Token type
        try:
            self.state = 1350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_concat_Traversal_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1336
                self.match(GremlinParser.K_CONCAT)
                self.state = 1337
                self.match(GremlinParser.LPAREN)
                self.state = 1338
                self.nestedTraversal()
                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 1339
                    self.match(GremlinParser.COMMA)
                    self.state = 1340
                    self.nestedTraversalList()


                self.state = 1343
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_concat_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1345
                self.match(GremlinParser.K_CONCAT)
                self.state = 1346
                self.match(GremlinParser.LPAREN)
                self.state = 1347
                self.stringNullableLiteralVarargs()
                self.state = 1348
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_conjoinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_conjoin

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_conjoin_StringContext(TraversalMethod_conjoinContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_conjoinContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_CONJOIN(self):
            return self.getToken(GremlinParser.K_CONJOIN, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringArgument(self):
            return self.getTypedRuleContext(GremlinParser.StringArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_conjoin_String" ):
                listener.enterTraversalMethod_conjoin_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_conjoin_String" ):
                listener.exitTraversalMethod_conjoin_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_conjoin_String" ):
                return visitor.visitTraversalMethod_conjoin_String(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_conjoin(self):

        localctx = GremlinParser.TraversalMethod_conjoinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_traversalMethod_conjoin)
        try:
            localctx = GremlinParser.TraversalMethod_conjoin_StringContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1352
            self.match(GremlinParser.K_CONJOIN)
            self.state = 1353
            self.match(GremlinParser.LPAREN)
            self.state = 1354
            self.stringArgument()
            self.state = 1355
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_connectedComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CONNECTEDCOMPONENT(self):
            return self.getToken(GremlinParser.K_CONNECTEDCOMPONENT, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_connectedComponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_connectedComponent" ):
                listener.enterTraversalMethod_connectedComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_connectedComponent" ):
                listener.exitTraversalMethod_connectedComponent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_connectedComponent" ):
                return visitor.visitTraversalMethod_connectedComponent(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_connectedComponent(self):

        localctx = GremlinParser.TraversalMethod_connectedComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_traversalMethod_connectedComponent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1357
            self.match(GremlinParser.K_CONNECTEDCOMPONENT)
            self.state = 1358
            self.match(GremlinParser.LPAREN)
            self.state = 1359
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_constantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CONSTANT(self):
            return self.getToken(GremlinParser.K_CONSTANT, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_constant" ):
                listener.enterTraversalMethod_constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_constant" ):
                listener.exitTraversalMethod_constant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_constant" ):
                return visitor.visitTraversalMethod_constant(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_constant(self):

        localctx = GremlinParser.TraversalMethod_constantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_traversalMethod_constant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            self.match(GremlinParser.K_CONSTANT)
            self.state = 1362
            self.match(GremlinParser.LPAREN)
            self.state = 1363
            self.genericArgument()
            self.state = 1364
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_countContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_count

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_count_ScopeContext(TraversalMethod_countContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_countContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_COUNT(self):
            return self.getToken(GremlinParser.K_COUNT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_count_Scope" ):
                listener.enterTraversalMethod_count_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_count_Scope" ):
                listener.exitTraversalMethod_count_Scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_count_Scope" ):
                return visitor.visitTraversalMethod_count_Scope(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_count_EmptyContext(TraversalMethod_countContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_countContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_COUNT(self):
            return self.getToken(GremlinParser.K_COUNT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_count_Empty" ):
                listener.enterTraversalMethod_count_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_count_Empty" ):
                listener.exitTraversalMethod_count_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_count_Empty" ):
                return visitor.visitTraversalMethod_count_Empty(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_count(self):

        localctx = GremlinParser.TraversalMethod_countContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_traversalMethod_count)
        try:
            self.state = 1374
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_count_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1366
                self.match(GremlinParser.K_COUNT)
                self.state = 1367
                self.match(GremlinParser.LPAREN)
                self.state = 1368
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_count_ScopeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1369
                self.match(GremlinParser.K_COUNT)
                self.state = 1370
                self.match(GremlinParser.LPAREN)
                self.state = 1371
                self.traversalScope()
                self.state = 1372
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_cyclicPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CYCLICPATH(self):
            return self.getToken(GremlinParser.K_CYCLICPATH, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_cyclicPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_cyclicPath" ):
                listener.enterTraversalMethod_cyclicPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_cyclicPath" ):
                listener.exitTraversalMethod_cyclicPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_cyclicPath" ):
                return visitor.visitTraversalMethod_cyclicPath(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_cyclicPath(self):

        localctx = GremlinParser.TraversalMethod_cyclicPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_traversalMethod_cyclicPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1376
            self.match(GremlinParser.K_CYCLICPATH)
            self.state = 1377
            self.match(GremlinParser.LPAREN)
            self.state = 1378
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_dateAddContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DATEADD(self):
            return self.getToken(GremlinParser.K_DATEADD, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def traversalDT(self):
            return self.getTypedRuleContext(GremlinParser.TraversalDTContext,0)


        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(GremlinParser.IntegerLiteralContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_dateAdd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_dateAdd" ):
                listener.enterTraversalMethod_dateAdd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_dateAdd" ):
                listener.exitTraversalMethod_dateAdd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_dateAdd" ):
                return visitor.visitTraversalMethod_dateAdd(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_dateAdd(self):

        localctx = GremlinParser.TraversalMethod_dateAddContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_traversalMethod_dateAdd)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1380
            self.match(GremlinParser.K_DATEADD)
            self.state = 1381
            self.match(GremlinParser.LPAREN)
            self.state = 1382
            self.traversalDT()
            self.state = 1383
            self.match(GremlinParser.COMMA)
            self.state = 1384
            self.integerLiteral()
            self.state = 1385
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_dateDiffContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_dateDiff

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_dateDiff_TraversalContext(TraversalMethod_dateDiffContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_dateDiffContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_DATEDIFF(self):
            return self.getToken(GremlinParser.K_DATEDIFF, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_dateDiff_Traversal" ):
                listener.enterTraversalMethod_dateDiff_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_dateDiff_Traversal" ):
                listener.exitTraversalMethod_dateDiff_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_dateDiff_Traversal" ):
                return visitor.visitTraversalMethod_dateDiff_Traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_dateDiff_DateContext(TraversalMethod_dateDiffContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_dateDiffContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_DATEDIFF(self):
            return self.getToken(GremlinParser.K_DATEDIFF, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def dateLiteral(self):
            return self.getTypedRuleContext(GremlinParser.DateLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_dateDiff_Date" ):
                listener.enterTraversalMethod_dateDiff_Date(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_dateDiff_Date" ):
                listener.exitTraversalMethod_dateDiff_Date(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_dateDiff_Date" ):
                return visitor.visitTraversalMethod_dateDiff_Date(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_dateDiff(self):

        localctx = GremlinParser.TraversalMethod_dateDiffContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_traversalMethod_dateDiff)
        try:
            self.state = 1397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_dateDiff_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1387
                self.match(GremlinParser.K_DATEDIFF)
                self.state = 1388
                self.match(GremlinParser.LPAREN)
                self.state = 1389
                self.nestedTraversal()
                self.state = 1390
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_dateDiff_DateContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1392
                self.match(GremlinParser.K_DATEDIFF)
                self.state = 1393
                self.match(GremlinParser.LPAREN)
                self.state = 1394
                self.dateLiteral()
                self.state = 1395
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_dedupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_dedup

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_dedup_Scope_StringContext(TraversalMethod_dedupContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_dedupContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_DEDUP(self):
            return self.getToken(GremlinParser.K_DEDUP, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)
        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def stringNullableLiteralVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralVarargsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_dedup_Scope_String" ):
                listener.enterTraversalMethod_dedup_Scope_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_dedup_Scope_String" ):
                listener.exitTraversalMethod_dedup_Scope_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_dedup_Scope_String" ):
                return visitor.visitTraversalMethod_dedup_Scope_String(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_dedup_StringContext(TraversalMethod_dedupContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_dedupContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_DEDUP(self):
            return self.getToken(GremlinParser.K_DEDUP, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringNullableLiteralVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralVarargsContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_dedup_String" ):
                listener.enterTraversalMethod_dedup_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_dedup_String" ):
                listener.exitTraversalMethod_dedup_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_dedup_String" ):
                return visitor.visitTraversalMethod_dedup_String(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_dedup(self):

        localctx = GremlinParser.TraversalMethod_dedupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_traversalMethod_dedup)
        self._la = 0 # Token type
        try:
            self.state = 1413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_dedup_Scope_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1399
                self.match(GremlinParser.K_DEDUP)
                self.state = 1400
                self.match(GremlinParser.LPAREN)
                self.state = 1401
                self.traversalScope()
                self.state = 1404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 1402
                    self.match(GremlinParser.COMMA)
                    self.state = 1403
                    self.stringNullableLiteralVarargs()


                self.state = 1406
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_dedup_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1408
                self.match(GremlinParser.K_DEDUP)
                self.state = 1409
                self.match(GremlinParser.LPAREN)
                self.state = 1410
                self.stringNullableLiteralVarargs()
                self.state = 1411
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_differenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_difference

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_difference_ObjectContext(TraversalMethod_differenceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_differenceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_DIFFERENCE(self):
            return self.getToken(GremlinParser.K_DIFFERENCE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_difference_Object" ):
                listener.enterTraversalMethod_difference_Object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_difference_Object" ):
                listener.exitTraversalMethod_difference_Object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_difference_Object" ):
                return visitor.visitTraversalMethod_difference_Object(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_difference(self):

        localctx = GremlinParser.TraversalMethod_differenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_traversalMethod_difference)
        try:
            localctx = GremlinParser.TraversalMethod_difference_ObjectContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1415
            self.match(GremlinParser.K_DIFFERENCE)
            self.state = 1416
            self.match(GremlinParser.LPAREN)
            self.state = 1417
            self.genericArgument()
            self.state = 1418
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_discardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_discard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_discard" ):
                listener.enterTraversalMethod_discard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_discard" ):
                listener.exitTraversalMethod_discard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_discard" ):
                return visitor.visitTraversalMethod_discard(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_discard(self):

        localctx = GremlinParser.TraversalMethod_discardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_traversalMethod_discard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1420
            self.match(GremlinParser.T__0)
            self.state = 1421
            self.match(GremlinParser.LPAREN)
            self.state = 1422
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_disjunctContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_disjunct

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_disjunct_ObjectContext(TraversalMethod_disjunctContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_disjunctContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_DISJUNCT(self):
            return self.getToken(GremlinParser.K_DISJUNCT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_disjunct_Object" ):
                listener.enterTraversalMethod_disjunct_Object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_disjunct_Object" ):
                listener.exitTraversalMethod_disjunct_Object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_disjunct_Object" ):
                return visitor.visitTraversalMethod_disjunct_Object(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_disjunct(self):

        localctx = GremlinParser.TraversalMethod_disjunctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_traversalMethod_disjunct)
        try:
            localctx = GremlinParser.TraversalMethod_disjunct_ObjectContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1424
            self.match(GremlinParser.K_DISJUNCT)
            self.state = 1425
            self.match(GremlinParser.LPAREN)
            self.state = 1426
            self.genericArgument()
            self.state = 1427
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_dropContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(GremlinParser.K_DROP, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_drop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_drop" ):
                listener.enterTraversalMethod_drop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_drop" ):
                listener.exitTraversalMethod_drop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_drop" ):
                return visitor.visitTraversalMethod_drop(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_drop(self):

        localctx = GremlinParser.TraversalMethod_dropContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_traversalMethod_drop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1429
            self.match(GremlinParser.K_DROP)
            self.state = 1430
            self.match(GremlinParser.LPAREN)
            self.state = 1431
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ELEMENT(self):
            return self.getToken(GremlinParser.K_ELEMENT, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_element" ):
                listener.enterTraversalMethod_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_element" ):
                listener.exitTraversalMethod_element(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_element" ):
                return visitor.visitTraversalMethod_element(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_element(self):

        localctx = GremlinParser.TraversalMethod_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_traversalMethod_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            self.match(GremlinParser.K_ELEMENT)
            self.state = 1434
            self.match(GremlinParser.LPAREN)
            self.state = 1435
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_elementMapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ELEMENTMAP(self):
            return self.getToken(GremlinParser.K_ELEMENTMAP, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringNullableLiteralVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralVarargsContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_elementMap

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_elementMap" ):
                listener.enterTraversalMethod_elementMap(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_elementMap" ):
                listener.exitTraversalMethod_elementMap(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_elementMap" ):
                return visitor.visitTraversalMethod_elementMap(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_elementMap(self):

        localctx = GremlinParser.TraversalMethod_elementMapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_traversalMethod_elementMap)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1437
            self.match(GremlinParser.K_ELEMENTMAP)
            self.state = 1438
            self.match(GremlinParser.LPAREN)
            self.state = 1439
            self.stringNullableLiteralVarargs()
            self.state = 1440
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_emitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_emit

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_emit_EmptyContext(TraversalMethod_emitContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_emitContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_EMIT(self):
            return self.getToken(GremlinParser.K_EMIT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_emit_Empty" ):
                listener.enterTraversalMethod_emit_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_emit_Empty" ):
                listener.exitTraversalMethod_emit_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_emit_Empty" ):
                return visitor.visitTraversalMethod_emit_Empty(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_emit_PredicateContext(TraversalMethod_emitContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_emitContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_EMIT(self):
            return self.getToken(GremlinParser.K_EMIT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalPredicate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicateContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_emit_Predicate" ):
                listener.enterTraversalMethod_emit_Predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_emit_Predicate" ):
                listener.exitTraversalMethod_emit_Predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_emit_Predicate" ):
                return visitor.visitTraversalMethod_emit_Predicate(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_emit_TraversalContext(TraversalMethod_emitContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_emitContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_EMIT(self):
            return self.getToken(GremlinParser.K_EMIT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_emit_Traversal" ):
                listener.enterTraversalMethod_emit_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_emit_Traversal" ):
                listener.exitTraversalMethod_emit_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_emit_Traversal" ):
                return visitor.visitTraversalMethod_emit_Traversal(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_emit(self):

        localctx = GremlinParser.TraversalMethod_emitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_traversalMethod_emit)
        try:
            self.state = 1455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_emit_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1442
                self.match(GremlinParser.K_EMIT)
                self.state = 1443
                self.match(GremlinParser.LPAREN)
                self.state = 1444
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_emit_PredicateContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1445
                self.match(GremlinParser.K_EMIT)
                self.state = 1446
                self.match(GremlinParser.LPAREN)
                self.state = 1447
                self.traversalPredicate(0)
                self.state = 1448
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = GremlinParser.TraversalMethod_emit_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1450
                self.match(GremlinParser.K_EMIT)
                self.state = 1451
                self.match(GremlinParser.LPAREN)
                self.state = 1452
                self.nestedTraversal()
                self.state = 1453
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_failContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_fail

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_fail_StringContext(TraversalMethod_failContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_failContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_FAIL(self):
            return self.getToken(GremlinParser.K_FAIL, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_fail_String" ):
                listener.enterTraversalMethod_fail_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_fail_String" ):
                listener.exitTraversalMethod_fail_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_fail_String" ):
                return visitor.visitTraversalMethod_fail_String(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_fail_EmptyContext(TraversalMethod_failContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_failContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_FAIL(self):
            return self.getToken(GremlinParser.K_FAIL, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_fail_Empty" ):
                listener.enterTraversalMethod_fail_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_fail_Empty" ):
                listener.exitTraversalMethod_fail_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_fail_Empty" ):
                return visitor.visitTraversalMethod_fail_Empty(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_fail(self):

        localctx = GremlinParser.TraversalMethod_failContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_traversalMethod_fail)
        try:
            self.state = 1465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_fail_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1457
                self.match(GremlinParser.K_FAIL)
                self.state = 1458
                self.match(GremlinParser.LPAREN)
                self.state = 1459
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_fail_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1460
                self.match(GremlinParser.K_FAIL)
                self.state = 1461
                self.match(GremlinParser.LPAREN)
                self.state = 1462
                self.stringLiteral()
                self.state = 1463
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_filterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_filter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_filter_PredicateContext(TraversalMethod_filterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_filterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_FILTER(self):
            return self.getToken(GremlinParser.K_FILTER, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalPredicate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicateContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_filter_Predicate" ):
                listener.enterTraversalMethod_filter_Predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_filter_Predicate" ):
                listener.exitTraversalMethod_filter_Predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_filter_Predicate" ):
                return visitor.visitTraversalMethod_filter_Predicate(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_filter_TraversalContext(TraversalMethod_filterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_filterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_FILTER(self):
            return self.getToken(GremlinParser.K_FILTER, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_filter_Traversal" ):
                listener.enterTraversalMethod_filter_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_filter_Traversal" ):
                listener.exitTraversalMethod_filter_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_filter_Traversal" ):
                return visitor.visitTraversalMethod_filter_Traversal(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_filter(self):

        localctx = GremlinParser.TraversalMethod_filterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_traversalMethod_filter)
        try:
            self.state = 1477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_filter_PredicateContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1467
                self.match(GremlinParser.K_FILTER)
                self.state = 1468
                self.match(GremlinParser.LPAREN)
                self.state = 1469
                self.traversalPredicate(0)
                self.state = 1470
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_filter_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1472
                self.match(GremlinParser.K_FILTER)
                self.state = 1473
                self.match(GremlinParser.LPAREN)
                self.state = 1474
                self.nestedTraversal()
                self.state = 1475
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_flatMapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_FLATMAP(self):
            return self.getToken(GremlinParser.K_FLATMAP, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_flatMap

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_flatMap" ):
                listener.enterTraversalMethod_flatMap(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_flatMap" ):
                listener.exitTraversalMethod_flatMap(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_flatMap" ):
                return visitor.visitTraversalMethod_flatMap(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_flatMap(self):

        localctx = GremlinParser.TraversalMethod_flatMapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_traversalMethod_flatMap)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1479
            self.match(GremlinParser.K_FLATMAP)
            self.state = 1480
            self.match(GremlinParser.LPAREN)
            self.state = 1481
            self.nestedTraversal()
            self.state = 1482
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_foldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_fold

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_fold_Object_BiFunctionContext(TraversalMethod_foldContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_foldContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_FOLD(self):
            return self.getToken(GremlinParser.K_FOLD, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def traversalBiFunction(self):
            return self.getTypedRuleContext(GremlinParser.TraversalBiFunctionContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_fold_Object_BiFunction" ):
                listener.enterTraversalMethod_fold_Object_BiFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_fold_Object_BiFunction" ):
                listener.exitTraversalMethod_fold_Object_BiFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_fold_Object_BiFunction" ):
                return visitor.visitTraversalMethod_fold_Object_BiFunction(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_fold_EmptyContext(TraversalMethod_foldContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_foldContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_FOLD(self):
            return self.getToken(GremlinParser.K_FOLD, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_fold_Empty" ):
                listener.enterTraversalMethod_fold_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_fold_Empty" ):
                listener.exitTraversalMethod_fold_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_fold_Empty" ):
                return visitor.visitTraversalMethod_fold_Empty(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_fold(self):

        localctx = GremlinParser.TraversalMethod_foldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_traversalMethod_fold)
        try:
            self.state = 1494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_fold_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1484
                self.match(GremlinParser.K_FOLD)
                self.state = 1485
                self.match(GremlinParser.LPAREN)
                self.state = 1486
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_fold_Object_BiFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1487
                self.match(GremlinParser.K_FOLD)
                self.state = 1488
                self.match(GremlinParser.LPAREN)
                self.state = 1489
                self.genericArgument()
                self.state = 1490
                self.match(GremlinParser.COMMA)
                self.state = 1491
                self.traversalBiFunction()
                self.state = 1492
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_format

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_format_StringContext(TraversalMethod_formatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_formatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_FORMAT(self):
            return self.getToken(GremlinParser.K_FORMAT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_format_String" ):
                listener.enterTraversalMethod_format_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_format_String" ):
                listener.exitTraversalMethod_format_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_format_String" ):
                return visitor.visitTraversalMethod_format_String(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_format(self):

        localctx = GremlinParser.TraversalMethod_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_traversalMethod_format)
        try:
            localctx = GremlinParser.TraversalMethod_format_StringContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1496
            self.match(GremlinParser.K_FORMAT)
            self.state = 1497
            self.match(GremlinParser.LPAREN)
            self.state = 1498
            self.stringLiteral()
            self.state = 1499
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_fromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_from

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_from_VertexContext(TraversalMethod_fromContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_fromContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_FROM(self):
            return self.getToken(GremlinParser.K_FROM, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def structureVertexArgument(self):
            return self.getTypedRuleContext(GremlinParser.StructureVertexArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_from_Vertex" ):
                listener.enterTraversalMethod_from_Vertex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_from_Vertex" ):
                listener.exitTraversalMethod_from_Vertex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_from_Vertex" ):
                return visitor.visitTraversalMethod_from_Vertex(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_from_StringContext(TraversalMethod_fromContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_fromContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_FROM(self):
            return self.getToken(GremlinParser.K_FROM, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_from_String" ):
                listener.enterTraversalMethod_from_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_from_String" ):
                listener.exitTraversalMethod_from_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_from_String" ):
                return visitor.visitTraversalMethod_from_String(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_from_TraversalContext(TraversalMethod_fromContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_fromContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_FROM(self):
            return self.getToken(GremlinParser.K_FROM, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_from_Traversal" ):
                listener.enterTraversalMethod_from_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_from_Traversal" ):
                listener.exitTraversalMethod_from_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_from_Traversal" ):
                return visitor.visitTraversalMethod_from_Traversal(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_from(self):

        localctx = GremlinParser.TraversalMethod_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_traversalMethod_from)
        try:
            self.state = 1516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_from_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1501
                self.match(GremlinParser.K_FROM)
                self.state = 1502
                self.match(GremlinParser.LPAREN)
                self.state = 1503
                self.stringLiteral()
                self.state = 1504
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_from_VertexContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1506
                self.match(GremlinParser.K_FROM)
                self.state = 1507
                self.match(GremlinParser.LPAREN)
                self.state = 1508
                self.structureVertexArgument()
                self.state = 1509
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = GremlinParser.TraversalMethod_from_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1511
                self.match(GremlinParser.K_FROM)
                self.state = 1512
                self.match(GremlinParser.LPAREN)
                self.state = 1513
                self.nestedTraversal()
                self.state = 1514
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_group

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_group_EmptyContext(TraversalMethod_groupContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_groupContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_GROUP(self):
            return self.getToken(GremlinParser.K_GROUP, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_group_Empty" ):
                listener.enterTraversalMethod_group_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_group_Empty" ):
                listener.exitTraversalMethod_group_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_group_Empty" ):
                return visitor.visitTraversalMethod_group_Empty(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_group_StringContext(TraversalMethod_groupContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_groupContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_GROUP(self):
            return self.getToken(GremlinParser.K_GROUP, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_group_String" ):
                listener.enterTraversalMethod_group_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_group_String" ):
                listener.exitTraversalMethod_group_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_group_String" ):
                return visitor.visitTraversalMethod_group_String(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_group(self):

        localctx = GremlinParser.TraversalMethod_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_traversalMethod_group)
        try:
            self.state = 1526
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_group_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1518
                self.match(GremlinParser.K_GROUP)
                self.state = 1519
                self.match(GremlinParser.LPAREN)
                self.state = 1520
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_group_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1521
                self.match(GremlinParser.K_GROUP)
                self.state = 1522
                self.match(GremlinParser.LPAREN)
                self.state = 1523
                self.stringLiteral()
                self.state = 1524
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_groupCountContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_groupCount

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_groupCount_StringContext(TraversalMethod_groupCountContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_groupCountContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_GROUPCOUNT(self):
            return self.getToken(GremlinParser.K_GROUPCOUNT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_groupCount_String" ):
                listener.enterTraversalMethod_groupCount_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_groupCount_String" ):
                listener.exitTraversalMethod_groupCount_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_groupCount_String" ):
                return visitor.visitTraversalMethod_groupCount_String(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_groupCount_EmptyContext(TraversalMethod_groupCountContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_groupCountContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_GROUPCOUNT(self):
            return self.getToken(GremlinParser.K_GROUPCOUNT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_groupCount_Empty" ):
                listener.enterTraversalMethod_groupCount_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_groupCount_Empty" ):
                listener.exitTraversalMethod_groupCount_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_groupCount_Empty" ):
                return visitor.visitTraversalMethod_groupCount_Empty(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_groupCount(self):

        localctx = GremlinParser.TraversalMethod_groupCountContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_traversalMethod_groupCount)
        try:
            self.state = 1536
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_groupCount_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1528
                self.match(GremlinParser.K_GROUPCOUNT)
                self.state = 1529
                self.match(GremlinParser.LPAREN)
                self.state = 1530
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_groupCount_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1531
                self.match(GremlinParser.K_GROUPCOUNT)
                self.state = 1532
                self.match(GremlinParser.LPAREN)
                self.state = 1533
                self.stringLiteral()
                self.state = 1534
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_hasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_has

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_has_T_ObjectContext(TraversalMethod_hasContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_hasContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_HAS(self):
            return self.getToken(GremlinParser.K_HAS, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalT(self):
            return self.getTypedRuleContext(GremlinParser.TraversalTContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_has_T_Object" ):
                listener.enterTraversalMethod_has_T_Object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_has_T_Object" ):
                listener.exitTraversalMethod_has_T_Object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_has_T_Object" ):
                return visitor.visitTraversalMethod_has_T_Object(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_has_T_TraversalContext(TraversalMethod_hasContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_hasContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_HAS(self):
            return self.getToken(GremlinParser.K_HAS, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalT(self):
            return self.getTypedRuleContext(GremlinParser.TraversalTContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_has_T_Traversal" ):
                listener.enterTraversalMethod_has_T_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_has_T_Traversal" ):
                listener.exitTraversalMethod_has_T_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_has_T_Traversal" ):
                return visitor.visitTraversalMethod_has_T_Traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_has_String_String_ObjectContext(TraversalMethod_hasContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_hasContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_HAS(self):
            return self.getToken(GremlinParser.K_HAS, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringNullableArgument(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableArgumentContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)
        def stringNullableLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralContext,0)

        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_has_String_String_Object" ):
                listener.enterTraversalMethod_has_String_String_Object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_has_String_String_Object" ):
                listener.exitTraversalMethod_has_String_String_Object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_has_String_String_Object" ):
                return visitor.visitTraversalMethod_has_String_String_Object(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_has_String_TraversalContext(TraversalMethod_hasContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_hasContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_HAS(self):
            return self.getToken(GremlinParser.K_HAS, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringNullableLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_has_String_Traversal" ):
                listener.enterTraversalMethod_has_String_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_has_String_Traversal" ):
                listener.exitTraversalMethod_has_String_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_has_String_Traversal" ):
                return visitor.visitTraversalMethod_has_String_Traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_has_StringContext(TraversalMethod_hasContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_hasContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_HAS(self):
            return self.getToken(GremlinParser.K_HAS, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringNullableLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_has_String" ):
                listener.enterTraversalMethod_has_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_has_String" ):
                listener.exitTraversalMethod_has_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_has_String" ):
                return visitor.visitTraversalMethod_has_String(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_has_T_PContext(TraversalMethod_hasContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_hasContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_HAS(self):
            return self.getToken(GremlinParser.K_HAS, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalT(self):
            return self.getTypedRuleContext(GremlinParser.TraversalTContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def traversalPredicate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicateContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_has_T_P" ):
                listener.enterTraversalMethod_has_T_P(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_has_T_P" ):
                listener.exitTraversalMethod_has_T_P(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_has_T_P" ):
                return visitor.visitTraversalMethod_has_T_P(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_has_String_PContext(TraversalMethod_hasContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_hasContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_HAS(self):
            return self.getToken(GremlinParser.K_HAS, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringNullableLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def traversalPredicate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicateContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_has_String_P" ):
                listener.enterTraversalMethod_has_String_P(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_has_String_P" ):
                listener.exitTraversalMethod_has_String_P(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_has_String_P" ):
                return visitor.visitTraversalMethod_has_String_P(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_has_String_ObjectContext(TraversalMethod_hasContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_hasContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_HAS(self):
            return self.getToken(GremlinParser.K_HAS, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringNullableLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_has_String_Object" ):
                listener.enterTraversalMethod_has_String_Object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_has_String_Object" ):
                listener.exitTraversalMethod_has_String_Object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_has_String_Object" ):
                return visitor.visitTraversalMethod_has_String_Object(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_has_String_String_PContext(TraversalMethod_hasContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_hasContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_HAS(self):
            return self.getToken(GremlinParser.K_HAS, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringNullableArgument(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableArgumentContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)
        def stringNullableLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralContext,0)

        def traversalPredicate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicateContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_has_String_String_P" ):
                listener.enterTraversalMethod_has_String_String_P(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_has_String_String_P" ):
                listener.exitTraversalMethod_has_String_String_P(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_has_String_String_P" ):
                return visitor.visitTraversalMethod_has_String_String_P(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_has(self):

        localctx = GremlinParser.TraversalMethod_hasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_traversalMethod_has)
        try:
            self.state = 1603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_has_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1538
                self.match(GremlinParser.K_HAS)
                self.state = 1539
                self.match(GremlinParser.LPAREN)
                self.state = 1540
                self.stringNullableLiteral()
                self.state = 1541
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_has_String_ObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1543
                self.match(GremlinParser.K_HAS)
                self.state = 1544
                self.match(GremlinParser.LPAREN)
                self.state = 1545
                self.stringNullableLiteral()
                self.state = 1546
                self.match(GremlinParser.COMMA)
                self.state = 1547
                self.genericArgument()
                self.state = 1548
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = GremlinParser.TraversalMethod_has_String_PContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1550
                self.match(GremlinParser.K_HAS)
                self.state = 1551
                self.match(GremlinParser.LPAREN)
                self.state = 1552
                self.stringNullableLiteral()
                self.state = 1553
                self.match(GremlinParser.COMMA)
                self.state = 1554
                self.traversalPredicate(0)
                self.state = 1555
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = GremlinParser.TraversalMethod_has_String_String_ObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1557
                self.match(GremlinParser.K_HAS)
                self.state = 1558
                self.match(GremlinParser.LPAREN)
                self.state = 1559
                self.stringNullableArgument()
                self.state = 1560
                self.match(GremlinParser.COMMA)
                self.state = 1561
                self.stringNullableLiteral()
                self.state = 1562
                self.match(GremlinParser.COMMA)
                self.state = 1563
                self.genericArgument()
                self.state = 1564
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = GremlinParser.TraversalMethod_has_String_String_PContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1566
                self.match(GremlinParser.K_HAS)
                self.state = 1567
                self.match(GremlinParser.LPAREN)
                self.state = 1568
                self.stringNullableArgument()
                self.state = 1569
                self.match(GremlinParser.COMMA)
                self.state = 1570
                self.stringNullableLiteral()
                self.state = 1571
                self.match(GremlinParser.COMMA)
                self.state = 1572
                self.traversalPredicate(0)
                self.state = 1573
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 6:
                localctx = GremlinParser.TraversalMethod_has_String_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1575
                self.match(GremlinParser.K_HAS)
                self.state = 1576
                self.match(GremlinParser.LPAREN)
                self.state = 1577
                self.stringNullableLiteral()
                self.state = 1578
                self.match(GremlinParser.COMMA)
                self.state = 1579
                self.nestedTraversal()
                self.state = 1580
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 7:
                localctx = GremlinParser.TraversalMethod_has_T_ObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1582
                self.match(GremlinParser.K_HAS)
                self.state = 1583
                self.match(GremlinParser.LPAREN)
                self.state = 1584
                self.traversalT()
                self.state = 1585
                self.match(GremlinParser.COMMA)
                self.state = 1586
                self.genericArgument()
                self.state = 1587
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 8:
                localctx = GremlinParser.TraversalMethod_has_T_PContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1589
                self.match(GremlinParser.K_HAS)
                self.state = 1590
                self.match(GremlinParser.LPAREN)
                self.state = 1591
                self.traversalT()
                self.state = 1592
                self.match(GremlinParser.COMMA)
                self.state = 1593
                self.traversalPredicate(0)
                self.state = 1594
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 9:
                localctx = GremlinParser.TraversalMethod_has_T_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1596
                self.match(GremlinParser.K_HAS)
                self.state = 1597
                self.match(GremlinParser.LPAREN)
                self.state = 1598
                self.traversalT()
                self.state = 1599
                self.match(GremlinParser.COMMA)
                self.state = 1600
                self.nestedTraversal()
                self.state = 1601
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_hasIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_hasId

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_hasId_PContext(TraversalMethod_hasIdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_hasIdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_HASID(self):
            return self.getToken(GremlinParser.K_HASID, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalPredicate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicateContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_hasId_P" ):
                listener.enterTraversalMethod_hasId_P(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_hasId_P" ):
                listener.exitTraversalMethod_hasId_P(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_hasId_P" ):
                return visitor.visitTraversalMethod_hasId_P(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_hasId_Object_ObjectContext(TraversalMethod_hasIdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_hasIdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_HASID(self):
            return self.getToken(GremlinParser.K_HASID, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)
        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def genericArgumentVarargs(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentVarargsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_hasId_Object_Object" ):
                listener.enterTraversalMethod_hasId_Object_Object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_hasId_Object_Object" ):
                listener.exitTraversalMethod_hasId_Object_Object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_hasId_Object_Object" ):
                return visitor.visitTraversalMethod_hasId_Object_Object(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_hasId(self):

        localctx = GremlinParser.TraversalMethod_hasIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_traversalMethod_hasId)
        self._la = 0 # Token type
        try:
            self.state = 1619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_hasId_Object_ObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1605
                self.match(GremlinParser.K_HASID)
                self.state = 1606
                self.match(GremlinParser.LPAREN)
                self.state = 1607
                self.genericArgument()
                self.state = 1610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 1608
                    self.match(GremlinParser.COMMA)
                    self.state = 1609
                    self.genericArgumentVarargs()


                self.state = 1612
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_hasId_PContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1614
                self.match(GremlinParser.K_HASID)
                self.state = 1615
                self.match(GremlinParser.LPAREN)
                self.state = 1616
                self.traversalPredicate(0)
                self.state = 1617
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_hasKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_hasKey

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_hasKey_PContext(TraversalMethod_hasKeyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_hasKeyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_HASKEY(self):
            return self.getToken(GremlinParser.K_HASKEY, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalPredicate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicateContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_hasKey_P" ):
                listener.enterTraversalMethod_hasKey_P(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_hasKey_P" ):
                listener.exitTraversalMethod_hasKey_P(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_hasKey_P" ):
                return visitor.visitTraversalMethod_hasKey_P(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_hasKey_String_StringContext(TraversalMethod_hasKeyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_hasKeyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_HASKEY(self):
            return self.getToken(GremlinParser.K_HASKEY, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringNullableLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)
        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def stringNullableLiteralVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralVarargsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_hasKey_String_String" ):
                listener.enterTraversalMethod_hasKey_String_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_hasKey_String_String" ):
                listener.exitTraversalMethod_hasKey_String_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_hasKey_String_String" ):
                return visitor.visitTraversalMethod_hasKey_String_String(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_hasKey(self):

        localctx = GremlinParser.TraversalMethod_hasKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_traversalMethod_hasKey)
        self._la = 0 # Token type
        try:
            self.state = 1635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_hasKey_PContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1621
                self.match(GremlinParser.K_HASKEY)
                self.state = 1622
                self.match(GremlinParser.LPAREN)
                self.state = 1623
                self.traversalPredicate(0)
                self.state = 1624
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_hasKey_String_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1626
                self.match(GremlinParser.K_HASKEY)
                self.state = 1627
                self.match(GremlinParser.LPAREN)
                self.state = 1628
                self.stringNullableLiteral()
                self.state = 1631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 1629
                    self.match(GremlinParser.COMMA)
                    self.state = 1630
                    self.stringNullableLiteralVarargs()


                self.state = 1633
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_hasLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_hasLabel

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_hasLabel_String_StringContext(TraversalMethod_hasLabelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_hasLabelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_HASLABEL(self):
            return self.getToken(GremlinParser.K_HASLABEL, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringNullableArgument(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)
        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def stringNullableArgumentVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableArgumentVarargsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_hasLabel_String_String" ):
                listener.enterTraversalMethod_hasLabel_String_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_hasLabel_String_String" ):
                listener.exitTraversalMethod_hasLabel_String_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_hasLabel_String_String" ):
                return visitor.visitTraversalMethod_hasLabel_String_String(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_hasLabel_PContext(TraversalMethod_hasLabelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_hasLabelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_HASLABEL(self):
            return self.getToken(GremlinParser.K_HASLABEL, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalPredicate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicateContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_hasLabel_P" ):
                listener.enterTraversalMethod_hasLabel_P(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_hasLabel_P" ):
                listener.exitTraversalMethod_hasLabel_P(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_hasLabel_P" ):
                return visitor.visitTraversalMethod_hasLabel_P(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_hasLabel(self):

        localctx = GremlinParser.TraversalMethod_hasLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_traversalMethod_hasLabel)
        self._la = 0 # Token type
        try:
            self.state = 1651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_hasLabel_PContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1637
                self.match(GremlinParser.K_HASLABEL)
                self.state = 1638
                self.match(GremlinParser.LPAREN)
                self.state = 1639
                self.traversalPredicate(0)
                self.state = 1640
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_hasLabel_String_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1642
                self.match(GremlinParser.K_HASLABEL)
                self.state = 1643
                self.match(GremlinParser.LPAREN)
                self.state = 1644
                self.stringNullableArgument()
                self.state = 1647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 1645
                    self.match(GremlinParser.COMMA)
                    self.state = 1646
                    self.stringNullableArgumentVarargs()


                self.state = 1649
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_hasNotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_HASNOT(self):
            return self.getToken(GremlinParser.K_HASNOT, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringNullableLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_hasNot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_hasNot" ):
                listener.enterTraversalMethod_hasNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_hasNot" ):
                listener.exitTraversalMethod_hasNot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_hasNot" ):
                return visitor.visitTraversalMethod_hasNot(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_hasNot(self):

        localctx = GremlinParser.TraversalMethod_hasNotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_traversalMethod_hasNot)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1653
            self.match(GremlinParser.K_HASNOT)
            self.state = 1654
            self.match(GremlinParser.LPAREN)
            self.state = 1655
            self.stringNullableLiteral()
            self.state = 1656
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_hasValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_hasValue

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_hasValue_PContext(TraversalMethod_hasValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_hasValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_HASVALUE(self):
            return self.getToken(GremlinParser.K_HASVALUE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalPredicate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicateContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_hasValue_P" ):
                listener.enterTraversalMethod_hasValue_P(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_hasValue_P" ):
                listener.exitTraversalMethod_hasValue_P(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_hasValue_P" ):
                return visitor.visitTraversalMethod_hasValue_P(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_hasValue_Object_ObjectContext(TraversalMethod_hasValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_hasValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_HASVALUE(self):
            return self.getToken(GremlinParser.K_HASVALUE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)
        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def genericArgumentVarargs(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentVarargsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_hasValue_Object_Object" ):
                listener.enterTraversalMethod_hasValue_Object_Object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_hasValue_Object_Object" ):
                listener.exitTraversalMethod_hasValue_Object_Object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_hasValue_Object_Object" ):
                return visitor.visitTraversalMethod_hasValue_Object_Object(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_hasValue(self):

        localctx = GremlinParser.TraversalMethod_hasValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_traversalMethod_hasValue)
        self._la = 0 # Token type
        try:
            self.state = 1672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_hasValue_Object_ObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1658
                self.match(GremlinParser.K_HASVALUE)
                self.state = 1659
                self.match(GremlinParser.LPAREN)
                self.state = 1660
                self.genericArgument()
                self.state = 1663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 1661
                    self.match(GremlinParser.COMMA)
                    self.state = 1662
                    self.genericArgumentVarargs()


                self.state = 1665
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_hasValue_PContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1667
                self.match(GremlinParser.K_HASVALUE)
                self.state = 1668
                self.match(GremlinParser.LPAREN)
                self.state = 1669
                self.traversalPredicate(0)
                self.state = 1670
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ID(self):
            return self.getToken(GremlinParser.K_ID, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_id" ):
                listener.enterTraversalMethod_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_id" ):
                listener.exitTraversalMethod_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_id" ):
                return visitor.visitTraversalMethod_id(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_id(self):

        localctx = GremlinParser.TraversalMethod_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_traversalMethod_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1674
            self.match(GremlinParser.K_ID)
            self.state = 1675
            self.match(GremlinParser.LPAREN)
            self.state = 1676
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_identityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_IDENTITY(self):
            return self.getToken(GremlinParser.K_IDENTITY, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_identity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_identity" ):
                listener.enterTraversalMethod_identity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_identity" ):
                listener.exitTraversalMethod_identity(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_identity" ):
                return visitor.visitTraversalMethod_identity(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_identity(self):

        localctx = GremlinParser.TraversalMethod_identityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_traversalMethod_identity)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1678
            self.match(GremlinParser.K_IDENTITY)
            self.state = 1679
            self.match(GremlinParser.LPAREN)
            self.state = 1680
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_inContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_IN(self):
            return self.getToken(GremlinParser.K_IN, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringNullableArgumentVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableArgumentVarargsContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_in

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_in" ):
                listener.enterTraversalMethod_in(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_in" ):
                listener.exitTraversalMethod_in(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_in" ):
                return visitor.visitTraversalMethod_in(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_in(self):

        localctx = GremlinParser.TraversalMethod_inContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_traversalMethod_in)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1682
            self.match(GremlinParser.K_IN)
            self.state = 1683
            self.match(GremlinParser.LPAREN)
            self.state = 1684
            self.stringNullableArgumentVarargs()
            self.state = 1685
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_inEContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_INE(self):
            return self.getToken(GremlinParser.K_INE, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringNullableArgumentVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableArgumentVarargsContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_inE

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_inE" ):
                listener.enterTraversalMethod_inE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_inE" ):
                listener.exitTraversalMethod_inE(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_inE" ):
                return visitor.visitTraversalMethod_inE(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_inE(self):

        localctx = GremlinParser.TraversalMethod_inEContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_traversalMethod_inE)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1687
            self.match(GremlinParser.K_INE)
            self.state = 1688
            self.match(GremlinParser.LPAREN)
            self.state = 1689
            self.stringNullableArgumentVarargs()
            self.state = 1690
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_intersectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_intersect

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_intersect_ObjectContext(TraversalMethod_intersectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_intersectContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_INTERSECT(self):
            return self.getToken(GremlinParser.K_INTERSECT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_intersect_Object" ):
                listener.enterTraversalMethod_intersect_Object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_intersect_Object" ):
                listener.exitTraversalMethod_intersect_Object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_intersect_Object" ):
                return visitor.visitTraversalMethod_intersect_Object(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_intersect(self):

        localctx = GremlinParser.TraversalMethod_intersectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_traversalMethod_intersect)
        try:
            localctx = GremlinParser.TraversalMethod_intersect_ObjectContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            self.match(GremlinParser.K_INTERSECT)
            self.state = 1693
            self.match(GremlinParser.LPAREN)
            self.state = 1694
            self.genericArgument()
            self.state = 1695
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_inVContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_INV(self):
            return self.getToken(GremlinParser.K_INV, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_inV

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_inV" ):
                listener.enterTraversalMethod_inV(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_inV" ):
                listener.exitTraversalMethod_inV(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_inV" ):
                return visitor.visitTraversalMethod_inV(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_inV(self):

        localctx = GremlinParser.TraversalMethod_inVContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_traversalMethod_inV)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1697
            self.match(GremlinParser.K_INV)
            self.state = 1698
            self.match(GremlinParser.LPAREN)
            self.state = 1699
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_INDEX(self):
            return self.getToken(GremlinParser.K_INDEX, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_index" ):
                listener.enterTraversalMethod_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_index" ):
                listener.exitTraversalMethod_index(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_index" ):
                return visitor.visitTraversalMethod_index(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_index(self):

        localctx = GremlinParser.TraversalMethod_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_traversalMethod_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1701
            self.match(GremlinParser.K_INDEX)
            self.state = 1702
            self.match(GremlinParser.LPAREN)
            self.state = 1703
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_injectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_INJECT(self):
            return self.getToken(GremlinParser.K_INJECT, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def genericArgumentVarargs(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentVarargsContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_inject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_inject" ):
                listener.enterTraversalMethod_inject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_inject" ):
                listener.exitTraversalMethod_inject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_inject" ):
                return visitor.visitTraversalMethod_inject(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_inject(self):

        localctx = GremlinParser.TraversalMethod_injectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_traversalMethod_inject)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1705
            self.match(GremlinParser.K_INJECT)
            self.state = 1706
            self.match(GremlinParser.LPAREN)
            self.state = 1707
            self.genericArgumentVarargs()
            self.state = 1708
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_isContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_is

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_is_ObjectContext(TraversalMethod_isContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_isContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_IS(self):
            return self.getToken(GremlinParser.K_IS, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_is_Object" ):
                listener.enterTraversalMethod_is_Object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_is_Object" ):
                listener.exitTraversalMethod_is_Object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_is_Object" ):
                return visitor.visitTraversalMethod_is_Object(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_is_PContext(TraversalMethod_isContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_isContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_IS(self):
            return self.getToken(GremlinParser.K_IS, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalPredicate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicateContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_is_P" ):
                listener.enterTraversalMethod_is_P(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_is_P" ):
                listener.exitTraversalMethod_is_P(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_is_P" ):
                return visitor.visitTraversalMethod_is_P(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_is(self):

        localctx = GremlinParser.TraversalMethod_isContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_traversalMethod_is)
        try:
            self.state = 1720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_is_ObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1710
                self.match(GremlinParser.K_IS)
                self.state = 1711
                self.match(GremlinParser.LPAREN)
                self.state = 1712
                self.genericArgument()
                self.state = 1713
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_is_PContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1715
                self.match(GremlinParser.K_IS)
                self.state = 1716
                self.match(GremlinParser.LPAREN)
                self.state = 1717
                self.traversalPredicate(0)
                self.state = 1718
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_KEY(self):
            return self.getToken(GremlinParser.K_KEY, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_key" ):
                listener.enterTraversalMethod_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_key" ):
                listener.exitTraversalMethod_key(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_key" ):
                return visitor.visitTraversalMethod_key(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_key(self):

        localctx = GremlinParser.TraversalMethod_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_traversalMethod_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1722
            self.match(GremlinParser.K_KEY)
            self.state = 1723
            self.match(GremlinParser.LPAREN)
            self.state = 1724
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_LABEL(self):
            return self.getToken(GremlinParser.K_LABEL, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_label" ):
                listener.enterTraversalMethod_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_label" ):
                listener.exitTraversalMethod_label(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_label" ):
                return visitor.visitTraversalMethod_label(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_label(self):

        localctx = GremlinParser.TraversalMethod_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_traversalMethod_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1726
            self.match(GremlinParser.K_LABEL)
            self.state = 1727
            self.match(GremlinParser.LPAREN)
            self.state = 1728
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_lengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_length

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_length_ScopeContext(TraversalMethod_lengthContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_lengthContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_LENGTH(self):
            return self.getToken(GremlinParser.K_LENGTH, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_length_Scope" ):
                listener.enterTraversalMethod_length_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_length_Scope" ):
                listener.exitTraversalMethod_length_Scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_length_Scope" ):
                return visitor.visitTraversalMethod_length_Scope(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_length_EmptyContext(TraversalMethod_lengthContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_lengthContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_LENGTH(self):
            return self.getToken(GremlinParser.K_LENGTH, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_length_Empty" ):
                listener.enterTraversalMethod_length_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_length_Empty" ):
                listener.exitTraversalMethod_length_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_length_Empty" ):
                return visitor.visitTraversalMethod_length_Empty(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_length(self):

        localctx = GremlinParser.TraversalMethod_lengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_traversalMethod_length)
        try:
            self.state = 1738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_length_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1730
                self.match(GremlinParser.K_LENGTH)
                self.state = 1731
                self.match(GremlinParser.LPAREN)
                self.state = 1732
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_length_ScopeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1733
                self.match(GremlinParser.K_LENGTH)
                self.state = 1734
                self.match(GremlinParser.LPAREN)
                self.state = 1735
                self.traversalScope()
                self.state = 1736
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_limitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_limit

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_limit_Scope_longContext(TraversalMethod_limitContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_limitContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_LIMIT(self):
            return self.getToken(GremlinParser.K_LIMIT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def integerArgument(self):
            return self.getTypedRuleContext(GremlinParser.IntegerArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_limit_Scope_long" ):
                listener.enterTraversalMethod_limit_Scope_long(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_limit_Scope_long" ):
                listener.exitTraversalMethod_limit_Scope_long(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_limit_Scope_long" ):
                return visitor.visitTraversalMethod_limit_Scope_long(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_limit_longContext(TraversalMethod_limitContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_limitContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_LIMIT(self):
            return self.getToken(GremlinParser.K_LIMIT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def integerArgument(self):
            return self.getTypedRuleContext(GremlinParser.IntegerArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_limit_long" ):
                listener.enterTraversalMethod_limit_long(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_limit_long" ):
                listener.exitTraversalMethod_limit_long(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_limit_long" ):
                return visitor.visitTraversalMethod_limit_long(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_limit(self):

        localctx = GremlinParser.TraversalMethod_limitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_traversalMethod_limit)
        try:
            self.state = 1752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_limit_Scope_longContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1740
                self.match(GremlinParser.K_LIMIT)
                self.state = 1741
                self.match(GremlinParser.LPAREN)
                self.state = 1742
                self.traversalScope()
                self.state = 1743
                self.match(GremlinParser.COMMA)
                self.state = 1744
                self.integerArgument()
                self.state = 1745
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_limit_longContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1747
                self.match(GremlinParser.K_LIMIT)
                self.state = 1748
                self.match(GremlinParser.LPAREN)
                self.state = 1749
                self.integerArgument()
                self.state = 1750
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_localContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_LOCAL(self):
            return self.getToken(GremlinParser.K_LOCAL, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_local

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_local" ):
                listener.enterTraversalMethod_local(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_local" ):
                listener.exitTraversalMethod_local(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_local" ):
                return visitor.visitTraversalMethod_local(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_local(self):

        localctx = GremlinParser.TraversalMethod_localContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_traversalMethod_local)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1754
            self.match(GremlinParser.K_LOCAL)
            self.state = 1755
            self.match(GremlinParser.LPAREN)
            self.state = 1756
            self.nestedTraversal()
            self.state = 1757
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_loopsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_loops

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_loops_StringContext(TraversalMethod_loopsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_loopsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_LOOPS(self):
            return self.getToken(GremlinParser.K_LOOPS, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_loops_String" ):
                listener.enterTraversalMethod_loops_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_loops_String" ):
                listener.exitTraversalMethod_loops_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_loops_String" ):
                return visitor.visitTraversalMethod_loops_String(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_loops_EmptyContext(TraversalMethod_loopsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_loopsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_LOOPS(self):
            return self.getToken(GremlinParser.K_LOOPS, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_loops_Empty" ):
                listener.enterTraversalMethod_loops_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_loops_Empty" ):
                listener.exitTraversalMethod_loops_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_loops_Empty" ):
                return visitor.visitTraversalMethod_loops_Empty(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_loops(self):

        localctx = GremlinParser.TraversalMethod_loopsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_traversalMethod_loops)
        try:
            self.state = 1767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_loops_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1759
                self.match(GremlinParser.K_LOOPS)
                self.state = 1760
                self.match(GremlinParser.LPAREN)
                self.state = 1761
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_loops_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1762
                self.match(GremlinParser.K_LOOPS)
                self.state = 1763
                self.match(GremlinParser.LPAREN)
                self.state = 1764
                self.stringLiteral()
                self.state = 1765
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_lTrimContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_lTrim

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_lTrim_ScopeContext(TraversalMethod_lTrimContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_lTrimContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_LTRIM(self):
            return self.getToken(GremlinParser.K_LTRIM, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_lTrim_Scope" ):
                listener.enterTraversalMethod_lTrim_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_lTrim_Scope" ):
                listener.exitTraversalMethod_lTrim_Scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_lTrim_Scope" ):
                return visitor.visitTraversalMethod_lTrim_Scope(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_lTrim_EmptyContext(TraversalMethod_lTrimContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_lTrimContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_LTRIM(self):
            return self.getToken(GremlinParser.K_LTRIM, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_lTrim_Empty" ):
                listener.enterTraversalMethod_lTrim_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_lTrim_Empty" ):
                listener.exitTraversalMethod_lTrim_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_lTrim_Empty" ):
                return visitor.visitTraversalMethod_lTrim_Empty(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_lTrim(self):

        localctx = GremlinParser.TraversalMethod_lTrimContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_traversalMethod_lTrim)
        try:
            self.state = 1777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_lTrim_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1769
                self.match(GremlinParser.K_LTRIM)
                self.state = 1770
                self.match(GremlinParser.LPAREN)
                self.state = 1771
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_lTrim_ScopeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1772
                self.match(GremlinParser.K_LTRIM)
                self.state = 1773
                self.match(GremlinParser.LPAREN)
                self.state = 1774
                self.traversalScope()
                self.state = 1775
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_mapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_MAP(self):
            return self.getToken(GremlinParser.K_MAP, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_map

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_map" ):
                listener.enterTraversalMethod_map(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_map" ):
                listener.exitTraversalMethod_map(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_map" ):
                return visitor.visitTraversalMethod_map(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_map(self):

        localctx = GremlinParser.TraversalMethod_mapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_traversalMethod_map)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1779
            self.match(GremlinParser.K_MAP)
            self.state = 1780
            self.match(GremlinParser.LPAREN)
            self.state = 1781
            self.nestedTraversal()
            self.state = 1782
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_matchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_MATCH(self):
            return self.getToken(GremlinParser.K_MATCH, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def nestedTraversalList(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalListContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_match" ):
                listener.enterTraversalMethod_match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_match" ):
                listener.exitTraversalMethod_match(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_match" ):
                return visitor.visitTraversalMethod_match(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_match(self):

        localctx = GremlinParser.TraversalMethod_matchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_traversalMethod_match)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1784
            self.match(GremlinParser.K_MATCH)
            self.state = 1785
            self.match(GremlinParser.LPAREN)
            self.state = 1786
            self.nestedTraversalList()
            self.state = 1787
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_mathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_MATH(self):
            return self.getToken(GremlinParser.K_MATH, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_math

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_math" ):
                listener.enterTraversalMethod_math(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_math" ):
                listener.exitTraversalMethod_math(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_math" ):
                return visitor.visitTraversalMethod_math(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_math(self):

        localctx = GremlinParser.TraversalMethod_mathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_traversalMethod_math)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1789
            self.match(GremlinParser.K_MATH)
            self.state = 1790
            self.match(GremlinParser.LPAREN)
            self.state = 1791
            self.stringLiteral()
            self.state = 1792
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_maxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_max

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_max_ScopeContext(TraversalMethod_maxContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_maxContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_MAX(self):
            return self.getToken(GremlinParser.K_MAX, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_max_Scope" ):
                listener.enterTraversalMethod_max_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_max_Scope" ):
                listener.exitTraversalMethod_max_Scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_max_Scope" ):
                return visitor.visitTraversalMethod_max_Scope(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_max_EmptyContext(TraversalMethod_maxContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_maxContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_MAX(self):
            return self.getToken(GremlinParser.K_MAX, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_max_Empty" ):
                listener.enterTraversalMethod_max_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_max_Empty" ):
                listener.exitTraversalMethod_max_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_max_Empty" ):
                return visitor.visitTraversalMethod_max_Empty(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_max(self):

        localctx = GremlinParser.TraversalMethod_maxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_traversalMethod_max)
        try:
            self.state = 1802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_max_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1794
                self.match(GremlinParser.K_MAX)
                self.state = 1795
                self.match(GremlinParser.LPAREN)
                self.state = 1796
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_max_ScopeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1797
                self.match(GremlinParser.K_MAX)
                self.state = 1798
                self.match(GremlinParser.LPAREN)
                self.state = 1799
                self.traversalScope()
                self.state = 1800
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_meanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_mean

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_mean_ScopeContext(TraversalMethod_meanContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_meanContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_MEAN(self):
            return self.getToken(GremlinParser.K_MEAN, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_mean_Scope" ):
                listener.enterTraversalMethod_mean_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_mean_Scope" ):
                listener.exitTraversalMethod_mean_Scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_mean_Scope" ):
                return visitor.visitTraversalMethod_mean_Scope(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_mean_EmptyContext(TraversalMethod_meanContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_meanContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_MEAN(self):
            return self.getToken(GremlinParser.K_MEAN, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_mean_Empty" ):
                listener.enterTraversalMethod_mean_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_mean_Empty" ):
                listener.exitTraversalMethod_mean_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_mean_Empty" ):
                return visitor.visitTraversalMethod_mean_Empty(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_mean(self):

        localctx = GremlinParser.TraversalMethod_meanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_traversalMethod_mean)
        try:
            self.state = 1812
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_mean_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1804
                self.match(GremlinParser.K_MEAN)
                self.state = 1805
                self.match(GremlinParser.LPAREN)
                self.state = 1806
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_mean_ScopeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1807
                self.match(GremlinParser.K_MEAN)
                self.state = 1808
                self.match(GremlinParser.LPAREN)
                self.state = 1809
                self.traversalScope()
                self.state = 1810
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_mergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_merge

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_merge_ObjectContext(TraversalMethod_mergeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_mergeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_MERGE(self):
            return self.getToken(GremlinParser.K_MERGE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_merge_Object" ):
                listener.enterTraversalMethod_merge_Object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_merge_Object" ):
                listener.exitTraversalMethod_merge_Object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_merge_Object" ):
                return visitor.visitTraversalMethod_merge_Object(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_merge(self):

        localctx = GremlinParser.TraversalMethod_mergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_traversalMethod_merge)
        try:
            localctx = GremlinParser.TraversalMethod_merge_ObjectContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1814
            self.match(GremlinParser.K_MERGE)
            self.state = 1815
            self.match(GremlinParser.LPAREN)
            self.state = 1816
            self.genericArgument()
            self.state = 1817
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_mergeVContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_mergeV

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_mergeV_MapContext(TraversalMethod_mergeVContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_mergeVContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_MERGEV(self):
            return self.getToken(GremlinParser.K_MERGEV, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def genericMapNullableArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericMapNullableArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_mergeV_Map" ):
                listener.enterTraversalMethod_mergeV_Map(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_mergeV_Map" ):
                listener.exitTraversalMethod_mergeV_Map(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_mergeV_Map" ):
                return visitor.visitTraversalMethod_mergeV_Map(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_mergeV_TraversalContext(TraversalMethod_mergeVContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_mergeVContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_MERGEV(self):
            return self.getToken(GremlinParser.K_MERGEV, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_mergeV_Traversal" ):
                listener.enterTraversalMethod_mergeV_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_mergeV_Traversal" ):
                listener.exitTraversalMethod_mergeV_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_mergeV_Traversal" ):
                return visitor.visitTraversalMethod_mergeV_Traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_mergeV_emptyContext(TraversalMethod_mergeVContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_mergeVContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_MERGEV(self):
            return self.getToken(GremlinParser.K_MERGEV, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_mergeV_empty" ):
                listener.enterTraversalMethod_mergeV_empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_mergeV_empty" ):
                listener.exitTraversalMethod_mergeV_empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_mergeV_empty" ):
                return visitor.visitTraversalMethod_mergeV_empty(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_mergeV(self):

        localctx = GremlinParser.TraversalMethod_mergeVContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_traversalMethod_mergeV)
        try:
            self.state = 1832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_mergeV_emptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1819
                self.match(GremlinParser.K_MERGEV)
                self.state = 1820
                self.match(GremlinParser.LPAREN)
                self.state = 1821
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_mergeV_MapContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1822
                self.match(GremlinParser.K_MERGEV)
                self.state = 1823
                self.match(GremlinParser.LPAREN)
                self.state = 1824
                self.genericMapNullableArgument()
                self.state = 1825
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = GremlinParser.TraversalMethod_mergeV_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1827
                self.match(GremlinParser.K_MERGEV)
                self.state = 1828
                self.match(GremlinParser.LPAREN)
                self.state = 1829
                self.nestedTraversal()
                self.state = 1830
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_mergeEContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_mergeE

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_mergeE_emptyContext(TraversalMethod_mergeEContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_mergeEContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_MERGEE(self):
            return self.getToken(GremlinParser.K_MERGEE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_mergeE_empty" ):
                listener.enterTraversalMethod_mergeE_empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_mergeE_empty" ):
                listener.exitTraversalMethod_mergeE_empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_mergeE_empty" ):
                return visitor.visitTraversalMethod_mergeE_empty(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_mergeE_MapContext(TraversalMethod_mergeEContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_mergeEContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_MERGEE(self):
            return self.getToken(GremlinParser.K_MERGEE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def genericMapNullableArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericMapNullableArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_mergeE_Map" ):
                listener.enterTraversalMethod_mergeE_Map(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_mergeE_Map" ):
                listener.exitTraversalMethod_mergeE_Map(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_mergeE_Map" ):
                return visitor.visitTraversalMethod_mergeE_Map(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_mergeE_TraversalContext(TraversalMethod_mergeEContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_mergeEContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_MERGEE(self):
            return self.getToken(GremlinParser.K_MERGEE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_mergeE_Traversal" ):
                listener.enterTraversalMethod_mergeE_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_mergeE_Traversal" ):
                listener.exitTraversalMethod_mergeE_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_mergeE_Traversal" ):
                return visitor.visitTraversalMethod_mergeE_Traversal(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_mergeE(self):

        localctx = GremlinParser.TraversalMethod_mergeEContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_traversalMethod_mergeE)
        try:
            self.state = 1847
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_mergeE_emptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1834
                self.match(GremlinParser.K_MERGEE)
                self.state = 1835
                self.match(GremlinParser.LPAREN)
                self.state = 1836
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_mergeE_MapContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1837
                self.match(GremlinParser.K_MERGEE)
                self.state = 1838
                self.match(GremlinParser.LPAREN)
                self.state = 1839
                self.genericMapNullableArgument()
                self.state = 1840
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = GremlinParser.TraversalMethod_mergeE_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1842
                self.match(GremlinParser.K_MERGEE)
                self.state = 1843
                self.match(GremlinParser.LPAREN)
                self.state = 1844
                self.nestedTraversal()
                self.state = 1845
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_minContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_min

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_min_EmptyContext(TraversalMethod_minContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_minContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_MIN(self):
            return self.getToken(GremlinParser.K_MIN, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_min_Empty" ):
                listener.enterTraversalMethod_min_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_min_Empty" ):
                listener.exitTraversalMethod_min_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_min_Empty" ):
                return visitor.visitTraversalMethod_min_Empty(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_min_ScopeContext(TraversalMethod_minContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_minContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_MIN(self):
            return self.getToken(GremlinParser.K_MIN, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_min_Scope" ):
                listener.enterTraversalMethod_min_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_min_Scope" ):
                listener.exitTraversalMethod_min_Scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_min_Scope" ):
                return visitor.visitTraversalMethod_min_Scope(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_min(self):

        localctx = GremlinParser.TraversalMethod_minContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_traversalMethod_min)
        try:
            self.state = 1857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_min_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1849
                self.match(GremlinParser.K_MIN)
                self.state = 1850
                self.match(GremlinParser.LPAREN)
                self.state = 1851
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_min_ScopeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1852
                self.match(GremlinParser.K_MIN)
                self.state = 1853
                self.match(GremlinParser.LPAREN)
                self.state = 1854
                self.traversalScope()
                self.state = 1855
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_noneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_none

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_none_PContext(TraversalMethod_noneContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_noneContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_NONE(self):
            return self.getToken(GremlinParser.K_NONE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalPredicate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicateContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_none_P" ):
                listener.enterTraversalMethod_none_P(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_none_P" ):
                listener.exitTraversalMethod_none_P(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_none_P" ):
                return visitor.visitTraversalMethod_none_P(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_none(self):

        localctx = GremlinParser.TraversalMethod_noneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_traversalMethod_none)
        try:
            localctx = GremlinParser.TraversalMethod_none_PContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1859
            self.match(GremlinParser.K_NONE)
            self.state = 1860
            self.match(GremlinParser.LPAREN)
            self.state = 1861
            self.traversalPredicate(0)
            self.state = 1862
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_notContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_NOT(self):
            return self.getToken(GremlinParser.K_NOT, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_not

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_not" ):
                listener.enterTraversalMethod_not(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_not" ):
                listener.exitTraversalMethod_not(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_not" ):
                return visitor.visitTraversalMethod_not(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_not(self):

        localctx = GremlinParser.TraversalMethod_notContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_traversalMethod_not)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1864
            self.match(GremlinParser.K_NOT)
            self.state = 1865
            self.match(GremlinParser.LPAREN)
            self.state = 1866
            self.nestedTraversal()
            self.state = 1867
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_option

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_option_Merge_MapContext(TraversalMethod_optionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_optionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_OPTION(self):
            return self.getToken(GremlinParser.K_OPTION, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalMerge(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMergeContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def genericMapNullableArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericMapNullableArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_option_Merge_Map" ):
                listener.enterTraversalMethod_option_Merge_Map(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_option_Merge_Map" ):
                listener.exitTraversalMethod_option_Merge_Map(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_option_Merge_Map" ):
                return visitor.visitTraversalMethod_option_Merge_Map(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_option_Merge_Map_CardinalityContext(TraversalMethod_optionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_optionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_OPTION(self):
            return self.getToken(GremlinParser.K_OPTION, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalMerge(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMergeContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)
        def genericMapNullableArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericMapNullableArgumentContext,0)

        def traversalCardinality(self):
            return self.getTypedRuleContext(GremlinParser.TraversalCardinalityContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_option_Merge_Map_Cardinality" ):
                listener.enterTraversalMethod_option_Merge_Map_Cardinality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_option_Merge_Map_Cardinality" ):
                listener.exitTraversalMethod_option_Merge_Map_Cardinality(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_option_Merge_Map_Cardinality" ):
                return visitor.visitTraversalMethod_option_Merge_Map_Cardinality(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_option_Merge_TraversalContext(TraversalMethod_optionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_optionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_OPTION(self):
            return self.getToken(GremlinParser.K_OPTION, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalMerge(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMergeContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_option_Merge_Traversal" ):
                listener.enterTraversalMethod_option_Merge_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_option_Merge_Traversal" ):
                listener.exitTraversalMethod_option_Merge_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_option_Merge_Traversal" ):
                return visitor.visitTraversalMethod_option_Merge_Traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_option_Object_TraversalContext(TraversalMethod_optionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_optionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_OPTION(self):
            return self.getToken(GremlinParser.K_OPTION, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_option_Object_Traversal" ):
                listener.enterTraversalMethod_option_Object_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_option_Object_Traversal" ):
                listener.exitTraversalMethod_option_Object_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_option_Object_Traversal" ):
                return visitor.visitTraversalMethod_option_Object_Traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_option_Predicate_TraversalContext(TraversalMethod_optionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_optionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_OPTION(self):
            return self.getToken(GremlinParser.K_OPTION, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalPredicate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicateContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_option_Predicate_Traversal" ):
                listener.enterTraversalMethod_option_Predicate_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_option_Predicate_Traversal" ):
                listener.exitTraversalMethod_option_Predicate_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_option_Predicate_Traversal" ):
                return visitor.visitTraversalMethod_option_Predicate_Traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_option_TraversalContext(TraversalMethod_optionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_optionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_OPTION(self):
            return self.getToken(GremlinParser.K_OPTION, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_option_Traversal" ):
                listener.enterTraversalMethod_option_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_option_Traversal" ):
                listener.exitTraversalMethod_option_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_option_Traversal" ):
                return visitor.visitTraversalMethod_option_Traversal(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_option(self):

        localctx = GremlinParser.TraversalMethod_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_traversalMethod_option)
        try:
            self.state = 1911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_option_Predicate_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1869
                self.match(GremlinParser.K_OPTION)
                self.state = 1870
                self.match(GremlinParser.LPAREN)
                self.state = 1871
                self.traversalPredicate(0)
                self.state = 1872
                self.match(GremlinParser.COMMA)
                self.state = 1873
                self.nestedTraversal()
                self.state = 1874
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_option_Merge_MapContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1876
                self.match(GremlinParser.K_OPTION)
                self.state = 1877
                self.match(GremlinParser.LPAREN)
                self.state = 1878
                self.traversalMerge()
                self.state = 1879
                self.match(GremlinParser.COMMA)
                self.state = 1880
                self.genericMapNullableArgument()
                self.state = 1881
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = GremlinParser.TraversalMethod_option_Merge_Map_CardinalityContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1883
                self.match(GremlinParser.K_OPTION)
                self.state = 1884
                self.match(GremlinParser.LPAREN)
                self.state = 1885
                self.traversalMerge()
                self.state = 1886
                self.match(GremlinParser.COMMA)
                self.state = 1887
                self.genericMapNullableArgument()
                self.state = 1888
                self.match(GremlinParser.COMMA)
                self.state = 1889
                self.traversalCardinality()
                self.state = 1890
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = GremlinParser.TraversalMethod_option_Merge_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1892
                self.match(GremlinParser.K_OPTION)
                self.state = 1893
                self.match(GremlinParser.LPAREN)
                self.state = 1894
                self.traversalMerge()
                self.state = 1895
                self.match(GremlinParser.COMMA)
                self.state = 1896
                self.nestedTraversal()
                self.state = 1897
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = GremlinParser.TraversalMethod_option_Object_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1899
                self.match(GremlinParser.K_OPTION)
                self.state = 1900
                self.match(GremlinParser.LPAREN)
                self.state = 1901
                self.genericArgument()
                self.state = 1902
                self.match(GremlinParser.COMMA)
                self.state = 1903
                self.nestedTraversal()
                self.state = 1904
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 6:
                localctx = GremlinParser.TraversalMethod_option_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1906
                self.match(GremlinParser.K_OPTION)
                self.state = 1907
                self.match(GremlinParser.LPAREN)
                self.state = 1908
                self.nestedTraversal()
                self.state = 1909
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_optionalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_OPTIONAL(self):
            return self.getToken(GremlinParser.K_OPTIONAL, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_optional

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_optional" ):
                listener.enterTraversalMethod_optional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_optional" ):
                listener.exitTraversalMethod_optional(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_optional" ):
                return visitor.visitTraversalMethod_optional(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_optional(self):

        localctx = GremlinParser.TraversalMethod_optionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_traversalMethod_optional)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1913
            self.match(GremlinParser.K_OPTIONAL)
            self.state = 1914
            self.match(GremlinParser.LPAREN)
            self.state = 1915
            self.nestedTraversal()
            self.state = 1916
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_OR(self):
            return self.getToken(GremlinParser.K_OR, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def nestedTraversalList(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalListContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_or" ):
                listener.enterTraversalMethod_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_or" ):
                listener.exitTraversalMethod_or(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_or" ):
                return visitor.visitTraversalMethod_or(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_or(self):

        localctx = GremlinParser.TraversalMethod_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_traversalMethod_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1918
            self.match(GremlinParser.K_OR)
            self.state = 1919
            self.match(GremlinParser.LPAREN)
            self.state = 1920
            self.nestedTraversalList()
            self.state = 1921
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_orderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_order

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_order_EmptyContext(TraversalMethod_orderContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_orderContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_ORDER(self):
            return self.getToken(GremlinParser.K_ORDER, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_order_Empty" ):
                listener.enterTraversalMethod_order_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_order_Empty" ):
                listener.exitTraversalMethod_order_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_order_Empty" ):
                return visitor.visitTraversalMethod_order_Empty(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_order_ScopeContext(TraversalMethod_orderContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_orderContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_ORDER(self):
            return self.getToken(GremlinParser.K_ORDER, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_order_Scope" ):
                listener.enterTraversalMethod_order_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_order_Scope" ):
                listener.exitTraversalMethod_order_Scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_order_Scope" ):
                return visitor.visitTraversalMethod_order_Scope(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_order(self):

        localctx = GremlinParser.TraversalMethod_orderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_traversalMethod_order)
        try:
            self.state = 1931
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_order_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1923
                self.match(GremlinParser.K_ORDER)
                self.state = 1924
                self.match(GremlinParser.LPAREN)
                self.state = 1925
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_order_ScopeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1926
                self.match(GremlinParser.K_ORDER)
                self.state = 1927
                self.match(GremlinParser.LPAREN)
                self.state = 1928
                self.traversalScope()
                self.state = 1929
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_otherVContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_OTHERV(self):
            return self.getToken(GremlinParser.K_OTHERV, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_otherV

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_otherV" ):
                listener.enterTraversalMethod_otherV(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_otherV" ):
                listener.exitTraversalMethod_otherV(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_otherV" ):
                return visitor.visitTraversalMethod_otherV(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_otherV(self):

        localctx = GremlinParser.TraversalMethod_otherVContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_traversalMethod_otherV)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1933
            self.match(GremlinParser.K_OTHERV)
            self.state = 1934
            self.match(GremlinParser.LPAREN)
            self.state = 1935
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_outContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_OUT(self):
            return self.getToken(GremlinParser.K_OUT, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringNullableArgumentVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableArgumentVarargsContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_out

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_out" ):
                listener.enterTraversalMethod_out(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_out" ):
                listener.exitTraversalMethod_out(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_out" ):
                return visitor.visitTraversalMethod_out(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_out(self):

        localctx = GremlinParser.TraversalMethod_outContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_traversalMethod_out)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1937
            self.match(GremlinParser.K_OUT)
            self.state = 1938
            self.match(GremlinParser.LPAREN)
            self.state = 1939
            self.stringNullableArgumentVarargs()
            self.state = 1940
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_outEContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_OUTE(self):
            return self.getToken(GremlinParser.K_OUTE, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringNullableArgumentVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableArgumentVarargsContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_outE

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_outE" ):
                listener.enterTraversalMethod_outE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_outE" ):
                listener.exitTraversalMethod_outE(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_outE" ):
                return visitor.visitTraversalMethod_outE(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_outE(self):

        localctx = GremlinParser.TraversalMethod_outEContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_traversalMethod_outE)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1942
            self.match(GremlinParser.K_OUTE)
            self.state = 1943
            self.match(GremlinParser.LPAREN)
            self.state = 1944
            self.stringNullableArgumentVarargs()
            self.state = 1945
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_outVContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_OUTV(self):
            return self.getToken(GremlinParser.K_OUTV, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_outV

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_outV" ):
                listener.enterTraversalMethod_outV(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_outV" ):
                listener.exitTraversalMethod_outV(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_outV" ):
                return visitor.visitTraversalMethod_outV(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_outV(self):

        localctx = GremlinParser.TraversalMethod_outVContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_traversalMethod_outV)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1947
            self.match(GremlinParser.K_OUTV)
            self.state = 1948
            self.match(GremlinParser.LPAREN)
            self.state = 1949
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_pageRankContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_pageRank

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_pageRank_EmptyContext(TraversalMethod_pageRankContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_pageRankContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_PAGERANK(self):
            return self.getToken(GremlinParser.K_PAGERANK, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_pageRank_Empty" ):
                listener.enterTraversalMethod_pageRank_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_pageRank_Empty" ):
                listener.exitTraversalMethod_pageRank_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_pageRank_Empty" ):
                return visitor.visitTraversalMethod_pageRank_Empty(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_pageRank_doubleContext(TraversalMethod_pageRankContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_pageRankContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_PAGERANK(self):
            return self.getToken(GremlinParser.K_PAGERANK, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def floatArgument(self):
            return self.getTypedRuleContext(GremlinParser.FloatArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_pageRank_double" ):
                listener.enterTraversalMethod_pageRank_double(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_pageRank_double" ):
                listener.exitTraversalMethod_pageRank_double(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_pageRank_double" ):
                return visitor.visitTraversalMethod_pageRank_double(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_pageRank(self):

        localctx = GremlinParser.TraversalMethod_pageRankContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_traversalMethod_pageRank)
        try:
            self.state = 1959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_pageRank_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1951
                self.match(GremlinParser.K_PAGERANK)
                self.state = 1952
                self.match(GremlinParser.LPAREN)
                self.state = 1953
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_pageRank_doubleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1954
                self.match(GremlinParser.K_PAGERANK)
                self.state = 1955
                self.match(GremlinParser.LPAREN)
                self.state = 1956
                self.floatArgument()
                self.state = 1957
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PATH(self):
            return self.getToken(GremlinParser.K_PATH, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_path" ):
                listener.enterTraversalMethod_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_path" ):
                listener.exitTraversalMethod_path(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_path" ):
                return visitor.visitTraversalMethod_path(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_path(self):

        localctx = GremlinParser.TraversalMethod_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_traversalMethod_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1961
            self.match(GremlinParser.K_PATH)
            self.state = 1962
            self.match(GremlinParser.LPAREN)
            self.state = 1963
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_peerPressureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PEERPRESSURE(self):
            return self.getToken(GremlinParser.K_PEERPRESSURE, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_peerPressure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_peerPressure" ):
                listener.enterTraversalMethod_peerPressure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_peerPressure" ):
                listener.exitTraversalMethod_peerPressure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_peerPressure" ):
                return visitor.visitTraversalMethod_peerPressure(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_peerPressure(self):

        localctx = GremlinParser.TraversalMethod_peerPressureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_traversalMethod_peerPressure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1965
            self.match(GremlinParser.K_PEERPRESSURE)
            self.state = 1966
            self.match(GremlinParser.LPAREN)
            self.state = 1967
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_productContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_product

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_product_ObjectContext(TraversalMethod_productContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_productContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_PRODUCT(self):
            return self.getToken(GremlinParser.K_PRODUCT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_product_Object" ):
                listener.enterTraversalMethod_product_Object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_product_Object" ):
                listener.exitTraversalMethod_product_Object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_product_Object" ):
                return visitor.visitTraversalMethod_product_Object(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_product(self):

        localctx = GremlinParser.TraversalMethod_productContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_traversalMethod_product)
        try:
            localctx = GremlinParser.TraversalMethod_product_ObjectContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1969
            self.match(GremlinParser.K_PRODUCT)
            self.state = 1970
            self.match(GremlinParser.LPAREN)
            self.state = 1971
            self.genericArgument()
            self.state = 1972
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_profileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_profile

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_profile_StringContext(TraversalMethod_profileContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_profileContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_PROFILE(self):
            return self.getToken(GremlinParser.K_PROFILE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_profile_String" ):
                listener.enterTraversalMethod_profile_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_profile_String" ):
                listener.exitTraversalMethod_profile_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_profile_String" ):
                return visitor.visitTraversalMethod_profile_String(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_profile_EmptyContext(TraversalMethod_profileContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_profileContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_PROFILE(self):
            return self.getToken(GremlinParser.K_PROFILE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_profile_Empty" ):
                listener.enterTraversalMethod_profile_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_profile_Empty" ):
                listener.exitTraversalMethod_profile_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_profile_Empty" ):
                return visitor.visitTraversalMethod_profile_Empty(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_profile(self):

        localctx = GremlinParser.TraversalMethod_profileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_traversalMethod_profile)
        try:
            self.state = 1982
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_profile_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1974
                self.match(GremlinParser.K_PROFILE)
                self.state = 1975
                self.match(GremlinParser.LPAREN)
                self.state = 1976
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_profile_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1977
                self.match(GremlinParser.K_PROFILE)
                self.state = 1978
                self.match(GremlinParser.LPAREN)
                self.state = 1979
                self.stringLiteral()
                self.state = 1980
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_projectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PROJECT(self):
            return self.getToken(GremlinParser.K_PROJECT, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)

        def stringNullableLiteralVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralVarargsContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_project

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_project" ):
                listener.enterTraversalMethod_project(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_project" ):
                listener.exitTraversalMethod_project(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_project" ):
                return visitor.visitTraversalMethod_project(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_project(self):

        localctx = GremlinParser.TraversalMethod_projectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_traversalMethod_project)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1984
            self.match(GremlinParser.K_PROJECT)
            self.state = 1985
            self.match(GremlinParser.LPAREN)
            self.state = 1986
            self.stringLiteral()
            self.state = 1989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==263:
                self.state = 1987
                self.match(GremlinParser.COMMA)
                self.state = 1988
                self.stringNullableLiteralVarargs()


            self.state = 1991
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_propertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PROPERTIES(self):
            return self.getToken(GremlinParser.K_PROPERTIES, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringNullableLiteralVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralVarargsContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_properties" ):
                listener.enterTraversalMethod_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_properties" ):
                listener.exitTraversalMethod_properties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_properties" ):
                return visitor.visitTraversalMethod_properties(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_properties(self):

        localctx = GremlinParser.TraversalMethod_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_traversalMethod_properties)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1993
            self.match(GremlinParser.K_PROPERTIES)
            self.state = 1994
            self.match(GremlinParser.LPAREN)
            self.state = 1995
            self.stringNullableLiteralVarargs()
            self.state = 1996
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_property

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_property_Cardinality_Object_Object_ObjectContext(TraversalMethod_propertyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_propertyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_PROPERTY(self):
            return self.getToken(GremlinParser.K_PROPERTY, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalCardinality(self):
            return self.getTypedRuleContext(GremlinParser.TraversalCardinalityContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)
        def genericArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.GenericArgumentContext)
            else:
                return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,i)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)
        def genericArgumentVarargs(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentVarargsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_property_Cardinality_Object_Object_Object" ):
                listener.enterTraversalMethod_property_Cardinality_Object_Object_Object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_property_Cardinality_Object_Object_Object" ):
                listener.exitTraversalMethod_property_Cardinality_Object_Object_Object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_property_Cardinality_Object_Object_Object" ):
                return visitor.visitTraversalMethod_property_Cardinality_Object_Object_Object(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_property_Object_Object_ObjectContext(TraversalMethod_propertyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_propertyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_PROPERTY(self):
            return self.getToken(GremlinParser.K_PROPERTY, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def genericArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.GenericArgumentContext)
            else:
                return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)
        def genericArgumentVarargs(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentVarargsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_property_Object_Object_Object" ):
                listener.enterTraversalMethod_property_Object_Object_Object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_property_Object_Object_Object" ):
                listener.exitTraversalMethod_property_Object_Object_Object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_property_Object_Object_Object" ):
                return visitor.visitTraversalMethod_property_Object_Object_Object(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_property_ObjectContext(TraversalMethod_propertyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_propertyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_PROPERTY(self):
            return self.getToken(GremlinParser.K_PROPERTY, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def genericMapNullableArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericMapNullableArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_property_Object" ):
                listener.enterTraversalMethod_property_Object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_property_Object" ):
                listener.exitTraversalMethod_property_Object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_property_Object" ):
                return visitor.visitTraversalMethod_property_Object(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_property_Cardinality_ObjectContext(TraversalMethod_propertyContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_propertyContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_PROPERTY(self):
            return self.getToken(GremlinParser.K_PROPERTY, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalCardinality(self):
            return self.getTypedRuleContext(GremlinParser.TraversalCardinalityContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def genericMapNullableArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericMapNullableArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_property_Cardinality_Object" ):
                listener.enterTraversalMethod_property_Cardinality_Object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_property_Cardinality_Object" ):
                listener.exitTraversalMethod_property_Cardinality_Object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_property_Cardinality_Object" ):
                return visitor.visitTraversalMethod_property_Cardinality_Object(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_property(self):

        localctx = GremlinParser.TraversalMethod_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_traversalMethod_property)
        self._la = 0 # Token type
        try:
            self.state = 2034
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_property_Cardinality_Object_Object_ObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1998
                self.match(GremlinParser.K_PROPERTY)
                self.state = 1999
                self.match(GremlinParser.LPAREN)
                self.state = 2000
                self.traversalCardinality()
                self.state = 2001
                self.match(GremlinParser.COMMA)
                self.state = 2002
                self.genericArgument()
                self.state = 2003
                self.match(GremlinParser.COMMA)
                self.state = 2004
                self.genericArgument()
                self.state = 2007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 2005
                    self.match(GremlinParser.COMMA)
                    self.state = 2006
                    self.genericArgumentVarargs()


                self.state = 2009
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_property_Cardinality_ObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2011
                self.match(GremlinParser.K_PROPERTY)
                self.state = 2012
                self.match(GremlinParser.LPAREN)
                self.state = 2013
                self.traversalCardinality()
                self.state = 2014
                self.match(GremlinParser.COMMA)
                self.state = 2015
                self.genericMapNullableArgument()
                self.state = 2016
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = GremlinParser.TraversalMethod_property_Object_Object_ObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2018
                self.match(GremlinParser.K_PROPERTY)
                self.state = 2019
                self.match(GremlinParser.LPAREN)
                self.state = 2020
                self.genericArgument()
                self.state = 2021
                self.match(GremlinParser.COMMA)
                self.state = 2022
                self.genericArgument()
                self.state = 2025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 2023
                    self.match(GremlinParser.COMMA)
                    self.state = 2024
                    self.genericArgumentVarargs()


                self.state = 2027
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = GremlinParser.TraversalMethod_property_ObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2029
                self.match(GremlinParser.K_PROPERTY)
                self.state = 2030
                self.match(GremlinParser.LPAREN)
                self.state = 2031
                self.genericMapNullableArgument()
                self.state = 2032
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_propertyMapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PROPERTYMAP(self):
            return self.getToken(GremlinParser.K_PROPERTYMAP, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringNullableLiteralVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralVarargsContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_propertyMap

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_propertyMap" ):
                listener.enterTraversalMethod_propertyMap(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_propertyMap" ):
                listener.exitTraversalMethod_propertyMap(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_propertyMap" ):
                return visitor.visitTraversalMethod_propertyMap(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_propertyMap(self):

        localctx = GremlinParser.TraversalMethod_propertyMapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_traversalMethod_propertyMap)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2036
            self.match(GremlinParser.K_PROPERTYMAP)
            self.state = 2037
            self.match(GremlinParser.LPAREN)
            self.state = 2038
            self.stringNullableLiteralVarargs()
            self.state = 2039
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_rangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_range

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_range_Scope_long_longContext(TraversalMethod_rangeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_rangeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_RANGE(self):
            return self.getToken(GremlinParser.K_RANGE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)
        def integerArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.IntegerArgumentContext)
            else:
                return self.getTypedRuleContext(GremlinParser.IntegerArgumentContext,i)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_range_Scope_long_long" ):
                listener.enterTraversalMethod_range_Scope_long_long(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_range_Scope_long_long" ):
                listener.exitTraversalMethod_range_Scope_long_long(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_range_Scope_long_long" ):
                return visitor.visitTraversalMethod_range_Scope_long_long(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_range_long_longContext(TraversalMethod_rangeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_rangeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_RANGE(self):
            return self.getToken(GremlinParser.K_RANGE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def integerArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.IntegerArgumentContext)
            else:
                return self.getTypedRuleContext(GremlinParser.IntegerArgumentContext,i)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_range_long_long" ):
                listener.enterTraversalMethod_range_long_long(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_range_long_long" ):
                listener.exitTraversalMethod_range_long_long(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_range_long_long" ):
                return visitor.visitTraversalMethod_range_long_long(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_range(self):

        localctx = GremlinParser.TraversalMethod_rangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_traversalMethod_range)
        try:
            self.state = 2057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_range_Scope_long_longContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2041
                self.match(GremlinParser.K_RANGE)
                self.state = 2042
                self.match(GremlinParser.LPAREN)
                self.state = 2043
                self.traversalScope()
                self.state = 2044
                self.match(GremlinParser.COMMA)
                self.state = 2045
                self.integerArgument()
                self.state = 2046
                self.match(GremlinParser.COMMA)
                self.state = 2047
                self.integerArgument()
                self.state = 2048
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_range_long_longContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2050
                self.match(GremlinParser.K_RANGE)
                self.state = 2051
                self.match(GremlinParser.LPAREN)
                self.state = 2052
                self.integerArgument()
                self.state = 2053
                self.match(GremlinParser.COMMA)
                self.state = 2054
                self.integerArgument()
                self.state = 2055
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_readContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_READ(self):
            return self.getToken(GremlinParser.K_READ, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_read

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_read" ):
                listener.enterTraversalMethod_read(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_read" ):
                listener.exitTraversalMethod_read(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_read" ):
                return visitor.visitTraversalMethod_read(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_read(self):

        localctx = GremlinParser.TraversalMethod_readContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_traversalMethod_read)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2059
            self.match(GremlinParser.K_READ)
            self.state = 2060
            self.match(GremlinParser.LPAREN)
            self.state = 2061
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_repeatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_repeat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_repeat_String_TraversalContext(TraversalMethod_repeatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_repeatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_REPEAT(self):
            return self.getToken(GremlinParser.K_REPEAT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_repeat_String_Traversal" ):
                listener.enterTraversalMethod_repeat_String_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_repeat_String_Traversal" ):
                listener.exitTraversalMethod_repeat_String_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_repeat_String_Traversal" ):
                return visitor.visitTraversalMethod_repeat_String_Traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_repeat_TraversalContext(TraversalMethod_repeatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_repeatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_REPEAT(self):
            return self.getToken(GremlinParser.K_REPEAT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_repeat_Traversal" ):
                listener.enterTraversalMethod_repeat_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_repeat_Traversal" ):
                listener.exitTraversalMethod_repeat_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_repeat_Traversal" ):
                return visitor.visitTraversalMethod_repeat_Traversal(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_repeat(self):

        localctx = GremlinParser.TraversalMethod_repeatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_traversalMethod_repeat)
        try:
            self.state = 2075
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_repeat_String_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2063
                self.match(GremlinParser.K_REPEAT)
                self.state = 2064
                self.match(GremlinParser.LPAREN)
                self.state = 2065
                self.stringLiteral()
                self.state = 2066
                self.match(GremlinParser.COMMA)
                self.state = 2067
                self.nestedTraversal()
                self.state = 2068
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_repeat_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2070
                self.match(GremlinParser.K_REPEAT)
                self.state = 2071
                self.match(GremlinParser.LPAREN)
                self.state = 2072
                self.nestedTraversal()
                self.state = 2073
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_replaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_replace

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_replace_String_StringContext(TraversalMethod_replaceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_replaceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_REPLACE(self):
            return self.getToken(GremlinParser.K_REPLACE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringNullableLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.StringNullableLiteralContext)
            else:
                return self.getTypedRuleContext(GremlinParser.StringNullableLiteralContext,i)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_replace_String_String" ):
                listener.enterTraversalMethod_replace_String_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_replace_String_String" ):
                listener.exitTraversalMethod_replace_String_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_replace_String_String" ):
                return visitor.visitTraversalMethod_replace_String_String(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_replace_Scope_String_StringContext(TraversalMethod_replaceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_replaceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_REPLACE(self):
            return self.getToken(GremlinParser.K_REPLACE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)
        def stringNullableLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.StringNullableLiteralContext)
            else:
                return self.getTypedRuleContext(GremlinParser.StringNullableLiteralContext,i)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_replace_Scope_String_String" ):
                listener.enterTraversalMethod_replace_Scope_String_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_replace_Scope_String_String" ):
                listener.exitTraversalMethod_replace_Scope_String_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_replace_Scope_String_String" ):
                return visitor.visitTraversalMethod_replace_Scope_String_String(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_replace(self):

        localctx = GremlinParser.TraversalMethod_replaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_traversalMethod_replace)
        try:
            self.state = 2093
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_replace_String_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2077
                self.match(GremlinParser.K_REPLACE)
                self.state = 2078
                self.match(GremlinParser.LPAREN)
                self.state = 2079
                self.stringNullableLiteral()
                self.state = 2080
                self.match(GremlinParser.COMMA)
                self.state = 2081
                self.stringNullableLiteral()
                self.state = 2082
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_replace_Scope_String_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2084
                self.match(GremlinParser.K_REPLACE)
                self.state = 2085
                self.match(GremlinParser.LPAREN)
                self.state = 2086
                self.traversalScope()
                self.state = 2087
                self.match(GremlinParser.COMMA)
                self.state = 2088
                self.stringNullableLiteral()
                self.state = 2089
                self.match(GremlinParser.COMMA)
                self.state = 2090
                self.stringNullableLiteral()
                self.state = 2091
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_reverseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_reverse

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_reverse_EmptyContext(TraversalMethod_reverseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_reverseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_REVERSE(self):
            return self.getToken(GremlinParser.K_REVERSE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_reverse_Empty" ):
                listener.enterTraversalMethod_reverse_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_reverse_Empty" ):
                listener.exitTraversalMethod_reverse_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_reverse_Empty" ):
                return visitor.visitTraversalMethod_reverse_Empty(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_reverse(self):

        localctx = GremlinParser.TraversalMethod_reverseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_traversalMethod_reverse)
        try:
            localctx = GremlinParser.TraversalMethod_reverse_EmptyContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 2095
            self.match(GremlinParser.K_REVERSE)
            self.state = 2096
            self.match(GremlinParser.LPAREN)
            self.state = 2097
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_rTrimContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_rTrim

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_rTrim_ScopeContext(TraversalMethod_rTrimContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_rTrimContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_RTRIM(self):
            return self.getToken(GremlinParser.K_RTRIM, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_rTrim_Scope" ):
                listener.enterTraversalMethod_rTrim_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_rTrim_Scope" ):
                listener.exitTraversalMethod_rTrim_Scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_rTrim_Scope" ):
                return visitor.visitTraversalMethod_rTrim_Scope(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_rTrim_EmptyContext(TraversalMethod_rTrimContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_rTrimContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_RTRIM(self):
            return self.getToken(GremlinParser.K_RTRIM, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_rTrim_Empty" ):
                listener.enterTraversalMethod_rTrim_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_rTrim_Empty" ):
                listener.exitTraversalMethod_rTrim_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_rTrim_Empty" ):
                return visitor.visitTraversalMethod_rTrim_Empty(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_rTrim(self):

        localctx = GremlinParser.TraversalMethod_rTrimContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_traversalMethod_rTrim)
        try:
            self.state = 2107
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_rTrim_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2099
                self.match(GremlinParser.K_RTRIM)
                self.state = 2100
                self.match(GremlinParser.LPAREN)
                self.state = 2101
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_rTrim_ScopeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2102
                self.match(GremlinParser.K_RTRIM)
                self.state = 2103
                self.match(GremlinParser.LPAREN)
                self.state = 2104
                self.traversalScope()
                self.state = 2105
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_sackContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_sack

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_sack_EmptyContext(TraversalMethod_sackContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_sackContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SACK(self):
            return self.getToken(GremlinParser.K_SACK, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_sack_Empty" ):
                listener.enterTraversalMethod_sack_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_sack_Empty" ):
                listener.exitTraversalMethod_sack_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_sack_Empty" ):
                return visitor.visitTraversalMethod_sack_Empty(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_sack_BiFunctionContext(TraversalMethod_sackContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_sackContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SACK(self):
            return self.getToken(GremlinParser.K_SACK, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalBiFunction(self):
            return self.getTypedRuleContext(GremlinParser.TraversalBiFunctionContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_sack_BiFunction" ):
                listener.enterTraversalMethod_sack_BiFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_sack_BiFunction" ):
                listener.exitTraversalMethod_sack_BiFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_sack_BiFunction" ):
                return visitor.visitTraversalMethod_sack_BiFunction(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_sack(self):

        localctx = GremlinParser.TraversalMethod_sackContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_traversalMethod_sack)
        try:
            self.state = 2117
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_sack_BiFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2109
                self.match(GremlinParser.K_SACK)
                self.state = 2110
                self.match(GremlinParser.LPAREN)
                self.state = 2111
                self.traversalBiFunction()
                self.state = 2112
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_sack_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2114
                self.match(GremlinParser.K_SACK)
                self.state = 2115
                self.match(GremlinParser.LPAREN)
                self.state = 2116
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_sampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_sample

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_sample_Scope_intContext(TraversalMethod_sampleContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_sampleContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SAMPLE(self):
            return self.getToken(GremlinParser.K_SAMPLE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def integerLiteral(self):
            return self.getTypedRuleContext(GremlinParser.IntegerLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_sample_Scope_int" ):
                listener.enterTraversalMethod_sample_Scope_int(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_sample_Scope_int" ):
                listener.exitTraversalMethod_sample_Scope_int(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_sample_Scope_int" ):
                return visitor.visitTraversalMethod_sample_Scope_int(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_sample_intContext(TraversalMethod_sampleContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_sampleContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SAMPLE(self):
            return self.getToken(GremlinParser.K_SAMPLE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def integerLiteral(self):
            return self.getTypedRuleContext(GremlinParser.IntegerLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_sample_int" ):
                listener.enterTraversalMethod_sample_int(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_sample_int" ):
                listener.exitTraversalMethod_sample_int(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_sample_int" ):
                return visitor.visitTraversalMethod_sample_int(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_sample(self):

        localctx = GremlinParser.TraversalMethod_sampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_traversalMethod_sample)
        try:
            self.state = 2131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_sample_Scope_intContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2119
                self.match(GremlinParser.K_SAMPLE)
                self.state = 2120
                self.match(GremlinParser.LPAREN)
                self.state = 2121
                self.traversalScope()
                self.state = 2122
                self.match(GremlinParser.COMMA)
                self.state = 2123
                self.integerLiteral()
                self.state = 2124
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_sample_intContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2126
                self.match(GremlinParser.K_SAMPLE)
                self.state = 2127
                self.match(GremlinParser.LPAREN)
                self.state = 2128
                self.integerLiteral()
                self.state = 2129
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_selectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_select

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_select_String_String_StringContext(TraversalMethod_selectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_selectContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SELECT(self):
            return self.getToken(GremlinParser.K_SELECT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(GremlinParser.StringLiteralContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)
        def stringNullableLiteralVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralVarargsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_select_String_String_String" ):
                listener.enterTraversalMethod_select_String_String_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_select_String_String_String" ):
                listener.exitTraversalMethod_select_String_String_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_select_String_String_String" ):
                return visitor.visitTraversalMethod_select_String_String_String(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_select_Pop_String_String_StringContext(TraversalMethod_selectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_selectContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SELECT(self):
            return self.getToken(GremlinParser.K_SELECT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalPop(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPopContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)
        def stringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(GremlinParser.StringLiteralContext,i)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)
        def stringNullableLiteralVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralVarargsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_select_Pop_String_String_String" ):
                listener.enterTraversalMethod_select_Pop_String_String_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_select_Pop_String_String_String" ):
                listener.exitTraversalMethod_select_Pop_String_String_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_select_Pop_String_String_String" ):
                return visitor.visitTraversalMethod_select_Pop_String_String_String(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_select_StringContext(TraversalMethod_selectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_selectContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SELECT(self):
            return self.getToken(GremlinParser.K_SELECT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_select_String" ):
                listener.enterTraversalMethod_select_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_select_String" ):
                listener.exitTraversalMethod_select_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_select_String" ):
                return visitor.visitTraversalMethod_select_String(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_select_Pop_TraversalContext(TraversalMethod_selectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_selectContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SELECT(self):
            return self.getToken(GremlinParser.K_SELECT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalPop(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPopContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_select_Pop_Traversal" ):
                listener.enterTraversalMethod_select_Pop_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_select_Pop_Traversal" ):
                listener.exitTraversalMethod_select_Pop_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_select_Pop_Traversal" ):
                return visitor.visitTraversalMethod_select_Pop_Traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_select_TraversalContext(TraversalMethod_selectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_selectContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SELECT(self):
            return self.getToken(GremlinParser.K_SELECT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_select_Traversal" ):
                listener.enterTraversalMethod_select_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_select_Traversal" ):
                listener.exitTraversalMethod_select_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_select_Traversal" ):
                return visitor.visitTraversalMethod_select_Traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_select_ColumnContext(TraversalMethod_selectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_selectContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SELECT(self):
            return self.getToken(GremlinParser.K_SELECT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalColumn(self):
            return self.getTypedRuleContext(GremlinParser.TraversalColumnContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_select_Column" ):
                listener.enterTraversalMethod_select_Column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_select_Column" ):
                listener.exitTraversalMethod_select_Column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_select_Column" ):
                return visitor.visitTraversalMethod_select_Column(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_select_Pop_StringContext(TraversalMethod_selectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_selectContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SELECT(self):
            return self.getToken(GremlinParser.K_SELECT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalPop(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPopContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_select_Pop_String" ):
                listener.enterTraversalMethod_select_Pop_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_select_Pop_String" ):
                listener.exitTraversalMethod_select_Pop_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_select_Pop_String" ):
                return visitor.visitTraversalMethod_select_Pop_String(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_select(self):

        localctx = GremlinParser.TraversalMethod_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_traversalMethod_select)
        self._la = 0 # Token type
        try:
            self.state = 2186
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_select_ColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2133
                self.match(GremlinParser.K_SELECT)
                self.state = 2134
                self.match(GremlinParser.LPAREN)
                self.state = 2135
                self.traversalColumn()
                self.state = 2136
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_select_Pop_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2138
                self.match(GremlinParser.K_SELECT)
                self.state = 2139
                self.match(GremlinParser.LPAREN)
                self.state = 2140
                self.traversalPop()
                self.state = 2141
                self.match(GremlinParser.COMMA)
                self.state = 2142
                self.stringLiteral()
                self.state = 2143
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = GremlinParser.TraversalMethod_select_Pop_String_String_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2145
                self.match(GremlinParser.K_SELECT)
                self.state = 2146
                self.match(GremlinParser.LPAREN)
                self.state = 2147
                self.traversalPop()
                self.state = 2148
                self.match(GremlinParser.COMMA)
                self.state = 2149
                self.stringLiteral()
                self.state = 2150
                self.match(GremlinParser.COMMA)
                self.state = 2151
                self.stringLiteral()
                self.state = 2154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 2152
                    self.match(GremlinParser.COMMA)
                    self.state = 2153
                    self.stringNullableLiteralVarargs()


                self.state = 2156
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = GremlinParser.TraversalMethod_select_Pop_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2158
                self.match(GremlinParser.K_SELECT)
                self.state = 2159
                self.match(GremlinParser.LPAREN)
                self.state = 2160
                self.traversalPop()
                self.state = 2161
                self.match(GremlinParser.COMMA)
                self.state = 2162
                self.nestedTraversal()
                self.state = 2163
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = GremlinParser.TraversalMethod_select_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2165
                self.match(GremlinParser.K_SELECT)
                self.state = 2166
                self.match(GremlinParser.LPAREN)
                self.state = 2167
                self.stringLiteral()
                self.state = 2168
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 6:
                localctx = GremlinParser.TraversalMethod_select_String_String_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2170
                self.match(GremlinParser.K_SELECT)
                self.state = 2171
                self.match(GremlinParser.LPAREN)
                self.state = 2172
                self.stringLiteral()
                self.state = 2173
                self.match(GremlinParser.COMMA)
                self.state = 2174
                self.stringLiteral()
                self.state = 2177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 2175
                    self.match(GremlinParser.COMMA)
                    self.state = 2176
                    self.stringNullableLiteralVarargs()


                self.state = 2179
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 7:
                localctx = GremlinParser.TraversalMethod_select_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2181
                self.match(GremlinParser.K_SELECT)
                self.state = 2182
                self.match(GremlinParser.LPAREN)
                self.state = 2183
                self.nestedTraversal()
                self.state = 2184
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_shortestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SHORTESTPATH(self):
            return self.getToken(GremlinParser.K_SHORTESTPATH, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_shortestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_shortestPath" ):
                listener.enterTraversalMethod_shortestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_shortestPath" ):
                listener.exitTraversalMethod_shortestPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_shortestPath" ):
                return visitor.visitTraversalMethod_shortestPath(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_shortestPath(self):

        localctx = GremlinParser.TraversalMethod_shortestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_traversalMethod_shortestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2188
            self.match(GremlinParser.K_SHORTESTPATH)
            self.state = 2189
            self.match(GremlinParser.LPAREN)
            self.state = 2190
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_sideEffectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SIDEEFFECT(self):
            return self.getToken(GremlinParser.K_SIDEEFFECT, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_sideEffect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_sideEffect" ):
                listener.enterTraversalMethod_sideEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_sideEffect" ):
                listener.exitTraversalMethod_sideEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_sideEffect" ):
                return visitor.visitTraversalMethod_sideEffect(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_sideEffect(self):

        localctx = GremlinParser.TraversalMethod_sideEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_traversalMethod_sideEffect)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2192
            self.match(GremlinParser.K_SIDEEFFECT)
            self.state = 2193
            self.match(GremlinParser.LPAREN)
            self.state = 2194
            self.nestedTraversal()
            self.state = 2195
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_simplePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SIMPLEPATH(self):
            return self.getToken(GremlinParser.K_SIMPLEPATH, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_simplePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_simplePath" ):
                listener.enterTraversalMethod_simplePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_simplePath" ):
                listener.exitTraversalMethod_simplePath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_simplePath" ):
                return visitor.visitTraversalMethod_simplePath(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_simplePath(self):

        localctx = GremlinParser.TraversalMethod_simplePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_traversalMethod_simplePath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2197
            self.match(GremlinParser.K_SIMPLEPATH)
            self.state = 2198
            self.match(GremlinParser.LPAREN)
            self.state = 2199
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_skipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_skip

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_skip_Scope_longContext(TraversalMethod_skipContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_skipContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SKIP(self):
            return self.getToken(GremlinParser.K_SKIP, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def integerArgument(self):
            return self.getTypedRuleContext(GremlinParser.IntegerArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_skip_Scope_long" ):
                listener.enterTraversalMethod_skip_Scope_long(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_skip_Scope_long" ):
                listener.exitTraversalMethod_skip_Scope_long(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_skip_Scope_long" ):
                return visitor.visitTraversalMethod_skip_Scope_long(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_skip_longContext(TraversalMethod_skipContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_skipContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SKIP(self):
            return self.getToken(GremlinParser.K_SKIP, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def integerArgument(self):
            return self.getTypedRuleContext(GremlinParser.IntegerArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_skip_long" ):
                listener.enterTraversalMethod_skip_long(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_skip_long" ):
                listener.exitTraversalMethod_skip_long(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_skip_long" ):
                return visitor.visitTraversalMethod_skip_long(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_skip(self):

        localctx = GremlinParser.TraversalMethod_skipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_traversalMethod_skip)
        try:
            self.state = 2213
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_skip_Scope_longContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2201
                self.match(GremlinParser.K_SKIP)
                self.state = 2202
                self.match(GremlinParser.LPAREN)
                self.state = 2203
                self.traversalScope()
                self.state = 2204
                self.match(GremlinParser.COMMA)
                self.state = 2205
                self.integerArgument()
                self.state = 2206
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_skip_longContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2208
                self.match(GremlinParser.K_SKIP)
                self.state = 2209
                self.match(GremlinParser.LPAREN)
                self.state = 2210
                self.integerArgument()
                self.state = 2211
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_splitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_split

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_split_StringContext(TraversalMethod_splitContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_splitContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SPLIT(self):
            return self.getToken(GremlinParser.K_SPLIT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringNullableLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_split_String" ):
                listener.enterTraversalMethod_split_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_split_String" ):
                listener.exitTraversalMethod_split_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_split_String" ):
                return visitor.visitTraversalMethod_split_String(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_split_Scope_StringContext(TraversalMethod_splitContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_splitContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SPLIT(self):
            return self.getToken(GremlinParser.K_SPLIT, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def stringNullableLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_split_Scope_String" ):
                listener.enterTraversalMethod_split_Scope_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_split_Scope_String" ):
                listener.exitTraversalMethod_split_Scope_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_split_Scope_String" ):
                return visitor.visitTraversalMethod_split_Scope_String(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_split(self):

        localctx = GremlinParser.TraversalMethod_splitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_traversalMethod_split)
        try:
            self.state = 2227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_split_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2215
                self.match(GremlinParser.K_SPLIT)
                self.state = 2216
                self.match(GremlinParser.LPAREN)
                self.state = 2217
                self.stringNullableLiteral()
                self.state = 2218
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_split_Scope_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2220
                self.match(GremlinParser.K_SPLIT)
                self.state = 2221
                self.match(GremlinParser.LPAREN)
                self.state = 2222
                self.traversalScope()
                self.state = 2223
                self.match(GremlinParser.COMMA)
                self.state = 2224
                self.stringNullableLiteral()
                self.state = 2225
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_storeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_STORE(self):
            return self.getToken(GremlinParser.K_STORE, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_store

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_store" ):
                listener.enterTraversalMethod_store(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_store" ):
                listener.exitTraversalMethod_store(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_store" ):
                return visitor.visitTraversalMethod_store(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_store(self):

        localctx = GremlinParser.TraversalMethod_storeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_traversalMethod_store)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2229
            self.match(GremlinParser.K_STORE)
            self.state = 2230
            self.match(GremlinParser.LPAREN)
            self.state = 2231
            self.stringLiteral()
            self.state = 2232
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_subgraphContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SUBGRAPH(self):
            return self.getToken(GremlinParser.K_SUBGRAPH, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_subgraph

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_subgraph" ):
                listener.enterTraversalMethod_subgraph(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_subgraph" ):
                listener.exitTraversalMethod_subgraph(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_subgraph" ):
                return visitor.visitTraversalMethod_subgraph(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_subgraph(self):

        localctx = GremlinParser.TraversalMethod_subgraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_traversalMethod_subgraph)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2234
            self.match(GremlinParser.K_SUBGRAPH)
            self.state = 2235
            self.match(GremlinParser.LPAREN)
            self.state = 2236
            self.stringLiteral()
            self.state = 2237
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_substringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_substring

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_substring_int_intContext(TraversalMethod_substringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_substringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SUBSTRING(self):
            return self.getToken(GremlinParser.K_SUBSTRING, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def integerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(GremlinParser.IntegerLiteralContext,i)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_substring_int_int" ):
                listener.enterTraversalMethod_substring_int_int(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_substring_int_int" ):
                listener.exitTraversalMethod_substring_int_int(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_substring_int_int" ):
                return visitor.visitTraversalMethod_substring_int_int(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_substring_intContext(TraversalMethod_substringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_substringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SUBSTRING(self):
            return self.getToken(GremlinParser.K_SUBSTRING, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def integerLiteral(self):
            return self.getTypedRuleContext(GremlinParser.IntegerLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_substring_int" ):
                listener.enterTraversalMethod_substring_int(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_substring_int" ):
                listener.exitTraversalMethod_substring_int(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_substring_int" ):
                return visitor.visitTraversalMethod_substring_int(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_substring_Scope_intContext(TraversalMethod_substringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_substringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SUBSTRING(self):
            return self.getToken(GremlinParser.K_SUBSTRING, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def integerLiteral(self):
            return self.getTypedRuleContext(GremlinParser.IntegerLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_substring_Scope_int" ):
                listener.enterTraversalMethod_substring_Scope_int(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_substring_Scope_int" ):
                listener.exitTraversalMethod_substring_Scope_int(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_substring_Scope_int" ):
                return visitor.visitTraversalMethod_substring_Scope_int(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_substring_Scope_int_intContext(TraversalMethod_substringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_substringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SUBSTRING(self):
            return self.getToken(GremlinParser.K_SUBSTRING, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)
        def integerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(GremlinParser.IntegerLiteralContext,i)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_substring_Scope_int_int" ):
                listener.enterTraversalMethod_substring_Scope_int_int(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_substring_Scope_int_int" ):
                listener.exitTraversalMethod_substring_Scope_int_int(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_substring_Scope_int_int" ):
                return visitor.visitTraversalMethod_substring_Scope_int_int(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_substring(self):

        localctx = GremlinParser.TraversalMethod_substringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_traversalMethod_substring)
        try:
            self.state = 2267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_substring_intContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2239
                self.match(GremlinParser.K_SUBSTRING)
                self.state = 2240
                self.match(GremlinParser.LPAREN)
                self.state = 2241
                self.integerLiteral()
                self.state = 2242
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_substring_Scope_intContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2244
                self.match(GremlinParser.K_SUBSTRING)
                self.state = 2245
                self.match(GremlinParser.LPAREN)
                self.state = 2246
                self.traversalScope()
                self.state = 2247
                self.match(GremlinParser.COMMA)
                self.state = 2248
                self.integerLiteral()
                self.state = 2249
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = GremlinParser.TraversalMethod_substring_int_intContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2251
                self.match(GremlinParser.K_SUBSTRING)
                self.state = 2252
                self.match(GremlinParser.LPAREN)
                self.state = 2253
                self.integerLiteral()
                self.state = 2254
                self.match(GremlinParser.COMMA)
                self.state = 2255
                self.integerLiteral()
                self.state = 2256
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = GremlinParser.TraversalMethod_substring_Scope_int_intContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2258
                self.match(GremlinParser.K_SUBSTRING)
                self.state = 2259
                self.match(GremlinParser.LPAREN)
                self.state = 2260
                self.traversalScope()
                self.state = 2261
                self.match(GremlinParser.COMMA)
                self.state = 2262
                self.integerLiteral()
                self.state = 2263
                self.match(GremlinParser.COMMA)
                self.state = 2264
                self.integerLiteral()
                self.state = 2265
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_sumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_sum

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_sum_EmptyContext(TraversalMethod_sumContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_sumContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SUM(self):
            return self.getToken(GremlinParser.K_SUM, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_sum_Empty" ):
                listener.enterTraversalMethod_sum_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_sum_Empty" ):
                listener.exitTraversalMethod_sum_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_sum_Empty" ):
                return visitor.visitTraversalMethod_sum_Empty(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_sum_ScopeContext(TraversalMethod_sumContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_sumContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_SUM(self):
            return self.getToken(GremlinParser.K_SUM, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_sum_Scope" ):
                listener.enterTraversalMethod_sum_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_sum_Scope" ):
                listener.exitTraversalMethod_sum_Scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_sum_Scope" ):
                return visitor.visitTraversalMethod_sum_Scope(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_sum(self):

        localctx = GremlinParser.TraversalMethod_sumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_traversalMethod_sum)
        try:
            self.state = 2277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_sum_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2269
                self.match(GremlinParser.K_SUM)
                self.state = 2270
                self.match(GremlinParser.LPAREN)
                self.state = 2271
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_sum_ScopeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2272
                self.match(GremlinParser.K_SUM)
                self.state = 2273
                self.match(GremlinParser.LPAREN)
                self.state = 2274
                self.traversalScope()
                self.state = 2275
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_tailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_tail

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_tail_longContext(TraversalMethod_tailContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_tailContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_TAIL(self):
            return self.getToken(GremlinParser.K_TAIL, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def integerArgument(self):
            return self.getTypedRuleContext(GremlinParser.IntegerArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_tail_long" ):
                listener.enterTraversalMethod_tail_long(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_tail_long" ):
                listener.exitTraversalMethod_tail_long(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_tail_long" ):
                return visitor.visitTraversalMethod_tail_long(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_tail_EmptyContext(TraversalMethod_tailContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_tailContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_TAIL(self):
            return self.getToken(GremlinParser.K_TAIL, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_tail_Empty" ):
                listener.enterTraversalMethod_tail_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_tail_Empty" ):
                listener.exitTraversalMethod_tail_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_tail_Empty" ):
                return visitor.visitTraversalMethod_tail_Empty(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_tail_Scope_longContext(TraversalMethod_tailContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_tailContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_TAIL(self):
            return self.getToken(GremlinParser.K_TAIL, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def integerArgument(self):
            return self.getTypedRuleContext(GremlinParser.IntegerArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_tail_Scope_long" ):
                listener.enterTraversalMethod_tail_Scope_long(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_tail_Scope_long" ):
                listener.exitTraversalMethod_tail_Scope_long(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_tail_Scope_long" ):
                return visitor.visitTraversalMethod_tail_Scope_long(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_tail_ScopeContext(TraversalMethod_tailContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_tailContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_TAIL(self):
            return self.getToken(GremlinParser.K_TAIL, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_tail_Scope" ):
                listener.enterTraversalMethod_tail_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_tail_Scope" ):
                listener.exitTraversalMethod_tail_Scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_tail_Scope" ):
                return visitor.visitTraversalMethod_tail_Scope(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_tail(self):

        localctx = GremlinParser.TraversalMethod_tailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_traversalMethod_tail)
        try:
            self.state = 2299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_tail_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2279
                self.match(GremlinParser.K_TAIL)
                self.state = 2280
                self.match(GremlinParser.LPAREN)
                self.state = 2281
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_tail_ScopeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2282
                self.match(GremlinParser.K_TAIL)
                self.state = 2283
                self.match(GremlinParser.LPAREN)
                self.state = 2284
                self.traversalScope()
                self.state = 2285
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = GremlinParser.TraversalMethod_tail_Scope_longContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2287
                self.match(GremlinParser.K_TAIL)
                self.state = 2288
                self.match(GremlinParser.LPAREN)
                self.state = 2289
                self.traversalScope()
                self.state = 2290
                self.match(GremlinParser.COMMA)
                self.state = 2291
                self.integerArgument()
                self.state = 2292
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = GremlinParser.TraversalMethod_tail_longContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2294
                self.match(GremlinParser.K_TAIL)
                self.state = 2295
                self.match(GremlinParser.LPAREN)
                self.state = 2296
                self.integerArgument()
                self.state = 2297
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_timeLimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_TIMELIMIT(self):
            return self.getToken(GremlinParser.K_TIMELIMIT, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(GremlinParser.IntegerLiteralContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_timeLimit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_timeLimit" ):
                listener.enterTraversalMethod_timeLimit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_timeLimit" ):
                listener.exitTraversalMethod_timeLimit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_timeLimit" ):
                return visitor.visitTraversalMethod_timeLimit(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_timeLimit(self):

        localctx = GremlinParser.TraversalMethod_timeLimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_traversalMethod_timeLimit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2301
            self.match(GremlinParser.K_TIMELIMIT)
            self.state = 2302
            self.match(GremlinParser.LPAREN)
            self.state = 2303
            self.integerLiteral()
            self.state = 2304
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_timesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_TIMES(self):
            return self.getToken(GremlinParser.K_TIMES, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(GremlinParser.IntegerLiteralContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_times

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_times" ):
                listener.enterTraversalMethod_times(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_times" ):
                listener.exitTraversalMethod_times(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_times" ):
                return visitor.visitTraversalMethod_times(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_times(self):

        localctx = GremlinParser.TraversalMethod_timesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_traversalMethod_times)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2306
            self.match(GremlinParser.K_TIMES)
            self.state = 2307
            self.match(GremlinParser.LPAREN)
            self.state = 2308
            self.integerLiteral()
            self.state = 2309
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_toContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_to

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_to_VertexContext(TraversalMethod_toContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_toContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_TO(self):
            return self.getToken(GremlinParser.K_TO, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def structureVertexArgument(self):
            return self.getTypedRuleContext(GremlinParser.StructureVertexArgumentContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_to_Vertex" ):
                listener.enterTraversalMethod_to_Vertex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_to_Vertex" ):
                listener.exitTraversalMethod_to_Vertex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_to_Vertex" ):
                return visitor.visitTraversalMethod_to_Vertex(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_to_TraversalContext(TraversalMethod_toContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_toContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_TO(self):
            return self.getToken(GremlinParser.K_TO, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_to_Traversal" ):
                listener.enterTraversalMethod_to_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_to_Traversal" ):
                listener.exitTraversalMethod_to_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_to_Traversal" ):
                return visitor.visitTraversalMethod_to_Traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_to_Direction_StringContext(TraversalMethod_toContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_toContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_TO(self):
            return self.getToken(GremlinParser.K_TO, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalDirection(self):
            return self.getTypedRuleContext(GremlinParser.TraversalDirectionContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)
        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def stringNullableLiteralVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralVarargsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_to_Direction_String" ):
                listener.enterTraversalMethod_to_Direction_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_to_Direction_String" ):
                listener.exitTraversalMethod_to_Direction_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_to_Direction_String" ):
                return visitor.visitTraversalMethod_to_Direction_String(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_to_StringContext(TraversalMethod_toContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_toContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_TO(self):
            return self.getToken(GremlinParser.K_TO, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_to_String" ):
                listener.enterTraversalMethod_to_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_to_String" ):
                listener.exitTraversalMethod_to_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_to_String" ):
                return visitor.visitTraversalMethod_to_String(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_to(self):

        localctx = GremlinParser.TraversalMethod_toContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_traversalMethod_to)
        self._la = 0 # Token type
        try:
            self.state = 2335
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_to_Direction_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2311
                self.match(GremlinParser.K_TO)
                self.state = 2312
                self.match(GremlinParser.LPAREN)
                self.state = 2313
                self.traversalDirection()
                self.state = 2316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 2314
                    self.match(GremlinParser.COMMA)
                    self.state = 2315
                    self.stringNullableLiteralVarargs()


                self.state = 2318
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_to_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2320
                self.match(GremlinParser.K_TO)
                self.state = 2321
                self.match(GremlinParser.LPAREN)
                self.state = 2322
                self.stringLiteral()
                self.state = 2323
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = GremlinParser.TraversalMethod_to_VertexContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2325
                self.match(GremlinParser.K_TO)
                self.state = 2326
                self.match(GremlinParser.LPAREN)
                self.state = 2327
                self.structureVertexArgument()
                self.state = 2328
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = GremlinParser.TraversalMethod_to_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2330
                self.match(GremlinParser.K_TO)
                self.state = 2331
                self.match(GremlinParser.LPAREN)
                self.state = 2332
                self.nestedTraversal()
                self.state = 2333
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_toEContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_TOE(self):
            return self.getToken(GremlinParser.K_TOE, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def traversalDirection(self):
            return self.getTypedRuleContext(GremlinParser.TraversalDirectionContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)

        def stringNullableArgumentVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableArgumentVarargsContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_toE

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_toE" ):
                listener.enterTraversalMethod_toE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_toE" ):
                listener.exitTraversalMethod_toE(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_toE" ):
                return visitor.visitTraversalMethod_toE(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_toE(self):

        localctx = GremlinParser.TraversalMethod_toEContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_traversalMethod_toE)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2337
            self.match(GremlinParser.K_TOE)
            self.state = 2338
            self.match(GremlinParser.LPAREN)
            self.state = 2339
            self.traversalDirection()
            self.state = 2342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==263:
                self.state = 2340
                self.match(GremlinParser.COMMA)
                self.state = 2341
                self.stringNullableArgumentVarargs()


            self.state = 2344
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_toLowerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_toLower

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_toLower_ScopeContext(TraversalMethod_toLowerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_toLowerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_TOLOWER(self):
            return self.getToken(GremlinParser.K_TOLOWER, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_toLower_Scope" ):
                listener.enterTraversalMethod_toLower_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_toLower_Scope" ):
                listener.exitTraversalMethod_toLower_Scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_toLower_Scope" ):
                return visitor.visitTraversalMethod_toLower_Scope(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_toLower_EmptyContext(TraversalMethod_toLowerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_toLowerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_TOLOWER(self):
            return self.getToken(GremlinParser.K_TOLOWER, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_toLower_Empty" ):
                listener.enterTraversalMethod_toLower_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_toLower_Empty" ):
                listener.exitTraversalMethod_toLower_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_toLower_Empty" ):
                return visitor.visitTraversalMethod_toLower_Empty(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_toLower(self):

        localctx = GremlinParser.TraversalMethod_toLowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_traversalMethod_toLower)
        try:
            self.state = 2354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_toLower_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2346
                self.match(GremlinParser.K_TOLOWER)
                self.state = 2347
                self.match(GremlinParser.LPAREN)
                self.state = 2348
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_toLower_ScopeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2349
                self.match(GremlinParser.K_TOLOWER)
                self.state = 2350
                self.match(GremlinParser.LPAREN)
                self.state = 2351
                self.traversalScope()
                self.state = 2352
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_toUpperContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_toUpper

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_toUpper_ScopeContext(TraversalMethod_toUpperContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_toUpperContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_TOUPPER(self):
            return self.getToken(GremlinParser.K_TOUPPER, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_toUpper_Scope" ):
                listener.enterTraversalMethod_toUpper_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_toUpper_Scope" ):
                listener.exitTraversalMethod_toUpper_Scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_toUpper_Scope" ):
                return visitor.visitTraversalMethod_toUpper_Scope(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_toUpper_EmptyContext(TraversalMethod_toUpperContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_toUpperContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_TOUPPER(self):
            return self.getToken(GremlinParser.K_TOUPPER, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_toUpper_Empty" ):
                listener.enterTraversalMethod_toUpper_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_toUpper_Empty" ):
                listener.exitTraversalMethod_toUpper_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_toUpper_Empty" ):
                return visitor.visitTraversalMethod_toUpper_Empty(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_toUpper(self):

        localctx = GremlinParser.TraversalMethod_toUpperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_traversalMethod_toUpper)
        try:
            self.state = 2364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_toUpper_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2356
                self.match(GremlinParser.K_TOUPPER)
                self.state = 2357
                self.match(GremlinParser.LPAREN)
                self.state = 2358
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_toUpper_ScopeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2359
                self.match(GremlinParser.K_TOUPPER)
                self.state = 2360
                self.match(GremlinParser.LPAREN)
                self.state = 2361
                self.traversalScope()
                self.state = 2362
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_toVContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_TOV(self):
            return self.getToken(GremlinParser.K_TOV, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def traversalDirection(self):
            return self.getTypedRuleContext(GremlinParser.TraversalDirectionContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_toV

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_toV" ):
                listener.enterTraversalMethod_toV(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_toV" ):
                listener.exitTraversalMethod_toV(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_toV" ):
                return visitor.visitTraversalMethod_toV(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_toV(self):

        localctx = GremlinParser.TraversalMethod_toVContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_traversalMethod_toV)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2366
            self.match(GremlinParser.K_TOV)
            self.state = 2367
            self.match(GremlinParser.LPAREN)
            self.state = 2368
            self.traversalDirection()
            self.state = 2369
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_treeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_tree

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_tree_StringContext(TraversalMethod_treeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_treeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_TREE(self):
            return self.getToken(GremlinParser.K_TREE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_tree_String" ):
                listener.enterTraversalMethod_tree_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_tree_String" ):
                listener.exitTraversalMethod_tree_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_tree_String" ):
                return visitor.visitTraversalMethod_tree_String(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_tree_EmptyContext(TraversalMethod_treeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_treeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_TREE(self):
            return self.getToken(GremlinParser.K_TREE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_tree_Empty" ):
                listener.enterTraversalMethod_tree_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_tree_Empty" ):
                listener.exitTraversalMethod_tree_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_tree_Empty" ):
                return visitor.visitTraversalMethod_tree_Empty(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_tree(self):

        localctx = GremlinParser.TraversalMethod_treeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_traversalMethod_tree)
        try:
            self.state = 2379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_tree_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2371
                self.match(GremlinParser.K_TREE)
                self.state = 2372
                self.match(GremlinParser.LPAREN)
                self.state = 2373
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_tree_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2374
                self.match(GremlinParser.K_TREE)
                self.state = 2375
                self.match(GremlinParser.LPAREN)
                self.state = 2376
                self.stringLiteral()
                self.state = 2377
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_trimContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_trim

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_trim_EmptyContext(TraversalMethod_trimContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_trimContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_TRIM(self):
            return self.getToken(GremlinParser.K_TRIM, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_trim_Empty" ):
                listener.enterTraversalMethod_trim_Empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_trim_Empty" ):
                listener.exitTraversalMethod_trim_Empty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_trim_Empty" ):
                return visitor.visitTraversalMethod_trim_Empty(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_trim_ScopeContext(TraversalMethod_trimContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_trimContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_TRIM(self):
            return self.getToken(GremlinParser.K_TRIM, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalScope(self):
            return self.getTypedRuleContext(GremlinParser.TraversalScopeContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_trim_Scope" ):
                listener.enterTraversalMethod_trim_Scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_trim_Scope" ):
                listener.exitTraversalMethod_trim_Scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_trim_Scope" ):
                return visitor.visitTraversalMethod_trim_Scope(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_trim(self):

        localctx = GremlinParser.TraversalMethod_trimContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_traversalMethod_trim)
        try:
            self.state = 2389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_trim_EmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2381
                self.match(GremlinParser.K_TRIM)
                self.state = 2382
                self.match(GremlinParser.LPAREN)
                self.state = 2383
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_trim_ScopeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2384
                self.match(GremlinParser.K_TRIM)
                self.state = 2385
                self.match(GremlinParser.LPAREN)
                self.state = 2386
                self.traversalScope()
                self.state = 2387
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_unfoldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UNFOLD(self):
            return self.getToken(GremlinParser.K_UNFOLD, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_unfold

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_unfold" ):
                listener.enterTraversalMethod_unfold(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_unfold" ):
                listener.exitTraversalMethod_unfold(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_unfold" ):
                return visitor.visitTraversalMethod_unfold(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_unfold(self):

        localctx = GremlinParser.TraversalMethod_unfoldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_traversalMethod_unfold)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2391
            self.match(GremlinParser.K_UNFOLD)
            self.state = 2392
            self.match(GremlinParser.LPAREN)
            self.state = 2393
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_unionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UNION(self):
            return self.getToken(GremlinParser.K_UNION, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def nestedTraversalList(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalListContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_union" ):
                listener.enterTraversalMethod_union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_union" ):
                listener.exitTraversalMethod_union(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_union" ):
                return visitor.visitTraversalMethod_union(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_union(self):

        localctx = GremlinParser.TraversalMethod_unionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_traversalMethod_union)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2395
            self.match(GremlinParser.K_UNION)
            self.state = 2396
            self.match(GremlinParser.LPAREN)
            self.state = 2397
            self.nestedTraversalList()
            self.state = 2398
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_untilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_until

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_until_TraversalContext(TraversalMethod_untilContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_untilContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_UNTIL(self):
            return self.getToken(GremlinParser.K_UNTIL, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_until_Traversal" ):
                listener.enterTraversalMethod_until_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_until_Traversal" ):
                listener.exitTraversalMethod_until_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_until_Traversal" ):
                return visitor.visitTraversalMethod_until_Traversal(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_until_PredicateContext(TraversalMethod_untilContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_untilContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_UNTIL(self):
            return self.getToken(GremlinParser.K_UNTIL, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalPredicate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicateContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_until_Predicate" ):
                listener.enterTraversalMethod_until_Predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_until_Predicate" ):
                listener.exitTraversalMethod_until_Predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_until_Predicate" ):
                return visitor.visitTraversalMethod_until_Predicate(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_until(self):

        localctx = GremlinParser.TraversalMethod_untilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_traversalMethod_until)
        try:
            self.state = 2410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_until_PredicateContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2400
                self.match(GremlinParser.K_UNTIL)
                self.state = 2401
                self.match(GremlinParser.LPAREN)
                self.state = 2402
                self.traversalPredicate(0)
                self.state = 2403
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_until_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2405
                self.match(GremlinParser.K_UNTIL)
                self.state = 2406
                self.match(GremlinParser.LPAREN)
                self.state = 2407
                self.nestedTraversal()
                self.state = 2408
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_VALUE(self):
            return self.getToken(GremlinParser.K_VALUE, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_value" ):
                listener.enterTraversalMethod_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_value" ):
                listener.exitTraversalMethod_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_value" ):
                return visitor.visitTraversalMethod_value(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_value(self):

        localctx = GremlinParser.TraversalMethod_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_traversalMethod_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2412
            self.match(GremlinParser.K_VALUE)
            self.state = 2413
            self.match(GremlinParser.LPAREN)
            self.state = 2414
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_valueMapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_valueMap

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_valueMap_StringContext(TraversalMethod_valueMapContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_valueMapContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_VALUEMAP(self):
            return self.getToken(GremlinParser.K_VALUEMAP, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringNullableLiteralVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralVarargsContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_valueMap_String" ):
                listener.enterTraversalMethod_valueMap_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_valueMap_String" ):
                listener.exitTraversalMethod_valueMap_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_valueMap_String" ):
                return visitor.visitTraversalMethod_valueMap_String(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_valueMap_boolean_StringContext(TraversalMethod_valueMapContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_valueMapContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_VALUEMAP(self):
            return self.getToken(GremlinParser.K_VALUEMAP, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def booleanLiteral(self):
            return self.getTypedRuleContext(GremlinParser.BooleanLiteralContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)
        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def stringNullableLiteralVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralVarargsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_valueMap_boolean_String" ):
                listener.enterTraversalMethod_valueMap_boolean_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_valueMap_boolean_String" ):
                listener.exitTraversalMethod_valueMap_boolean_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_valueMap_boolean_String" ):
                return visitor.visitTraversalMethod_valueMap_boolean_String(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_valueMap(self):

        localctx = GremlinParser.TraversalMethod_valueMapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_traversalMethod_valueMap)
        self._la = 0 # Token type
        try:
            self.state = 2430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_valueMap_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2416
                self.match(GremlinParser.K_VALUEMAP)
                self.state = 2417
                self.match(GremlinParser.LPAREN)
                self.state = 2418
                self.stringNullableLiteralVarargs()
                self.state = 2419
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_valueMap_boolean_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2421
                self.match(GremlinParser.K_VALUEMAP)
                self.state = 2422
                self.match(GremlinParser.LPAREN)
                self.state = 2423
                self.booleanLiteral()
                self.state = 2426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 2424
                    self.match(GremlinParser.COMMA)
                    self.state = 2425
                    self.stringNullableLiteralVarargs()


                self.state = 2428
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_valuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_VALUES(self):
            return self.getToken(GremlinParser.K_VALUES, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringNullableLiteralVarargs(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralVarargsContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_values" ):
                listener.enterTraversalMethod_values(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_values" ):
                listener.exitTraversalMethod_values(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_values" ):
                return visitor.visitTraversalMethod_values(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_values(self):

        localctx = GremlinParser.TraversalMethod_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_traversalMethod_values)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2432
            self.match(GremlinParser.K_VALUES)
            self.state = 2433
            self.match(GremlinParser.LPAREN)
            self.state = 2434
            self.stringNullableLiteralVarargs()
            self.state = 2435
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_whereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_where

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_where_PContext(TraversalMethod_whereContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_whereContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_WHERE(self):
            return self.getToken(GremlinParser.K_WHERE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def traversalPredicate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicateContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_where_P" ):
                listener.enterTraversalMethod_where_P(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_where_P" ):
                listener.exitTraversalMethod_where_P(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_where_P" ):
                return visitor.visitTraversalMethod_where_P(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_where_String_PContext(TraversalMethod_whereContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_whereContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_WHERE(self):
            return self.getToken(GremlinParser.K_WHERE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def traversalPredicate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicateContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_where_String_P" ):
                listener.enterTraversalMethod_where_String_P(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_where_String_P" ):
                listener.exitTraversalMethod_where_String_P(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_where_String_P" ):
                return visitor.visitTraversalMethod_where_String_P(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_where_TraversalContext(TraversalMethod_whereContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_whereContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_WHERE(self):
            return self.getToken(GremlinParser.K_WHERE, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_where_Traversal" ):
                listener.enterTraversalMethod_where_Traversal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_where_Traversal" ):
                listener.exitTraversalMethod_where_Traversal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_where_Traversal" ):
                return visitor.visitTraversalMethod_where_Traversal(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_where(self):

        localctx = GremlinParser.TraversalMethod_whereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_traversalMethod_where)
        try:
            self.state = 2454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_where_PContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2437
                self.match(GremlinParser.K_WHERE)
                self.state = 2438
                self.match(GremlinParser.LPAREN)
                self.state = 2439
                self.traversalPredicate(0)
                self.state = 2440
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_where_String_PContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2442
                self.match(GremlinParser.K_WHERE)
                self.state = 2443
                self.match(GremlinParser.LPAREN)
                self.state = 2444
                self.stringLiteral()
                self.state = 2445
                self.match(GremlinParser.COMMA)
                self.state = 2446
                self.traversalPredicate(0)
                self.state = 2447
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = GremlinParser.TraversalMethod_where_TraversalContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2449
                self.match(GremlinParser.K_WHERE)
                self.state = 2450
                self.match(GremlinParser.LPAREN)
                self.state = 2451
                self.nestedTraversal()
                self.state = 2452
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_withContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_with

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TraversalMethod_with_StringContext(TraversalMethod_withContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_withContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_WITH(self):
            return self.getToken(GremlinParser.K_WITH, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)
        def withOptionKeys(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionKeysContext,0)

        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_with_String" ):
                listener.enterTraversalMethod_with_String(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_with_String" ):
                listener.exitTraversalMethod_with_String(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_with_String" ):
                return visitor.visitTraversalMethod_with_String(self)
            else:
                return visitor.visitChildren(self)


    class TraversalMethod_with_String_ObjectContext(TraversalMethod_withContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GremlinParser.TraversalMethod_withContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def K_WITH(self):
            return self.getToken(GremlinParser.K_WITH, 0)
        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)
        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)
        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)
        def withOptionKeys(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionKeysContext,0)

        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)

        def withOptionsValues(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsValuesContext,0)

        def ioOptionsValues(self):
            return self.getTypedRuleContext(GremlinParser.IoOptionsValuesContext,0)

        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_with_String_Object" ):
                listener.enterTraversalMethod_with_String_Object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_with_String_Object" ):
                listener.exitTraversalMethod_with_String_Object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_with_String_Object" ):
                return visitor.visitTraversalMethod_with_String_Object(self)
            else:
                return visitor.visitChildren(self)



    def traversalMethod_with(self):

        localctx = GremlinParser.TraversalMethod_withContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_traversalMethod_with)
        try:
            self.state = 2478
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                localctx = GremlinParser.TraversalMethod_with_StringContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2456
                self.match(GremlinParser.K_WITH)
                self.state = 2457
                self.match(GremlinParser.LPAREN)
                self.state = 2460
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [37, 104, 164, 167, 194, 242]:
                    self.state = 2458
                    self.withOptionKeys()
                    pass
                elif token in [254, 255]:
                    self.state = 2459
                    self.stringLiteral()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2462
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = GremlinParser.TraversalMethod_with_String_ObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2464
                self.match(GremlinParser.K_WITH)
                self.state = 2465
                self.match(GremlinParser.LPAREN)
                self.state = 2468
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [37, 104, 164, 167, 194, 242]:
                    self.state = 2466
                    self.withOptionKeys()
                    pass
                elif token in [254, 255]:
                    self.state = 2467
                    self.stringLiteral()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2470
                self.match(GremlinParser.COMMA)
                self.state = 2474
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [242]:
                    self.state = 2471
                    self.withOptionsValues()
                    pass
                elif token in [104]:
                    self.state = 2472
                    self.ioOptionsValues()
                    pass
                elif token in [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 55, 56, 57, 59, 60, 61, 65, 66, 67, 69, 70, 71, 72, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 92, 93, 94, 98, 99, 100, 102, 103, 106, 108, 111, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 136, 139, 144, 146, 148, 149, 150, 152, 153, 155, 156, 157, 158, 159, 160, 162, 165, 166, 168, 169, 171, 172, 173, 174, 176, 177, 178, 179, 181, 183, 184, 185, 187, 188, 189, 191, 192, 193, 195, 197, 198, 199, 200, 201, 203, 204, 205, 206, 208, 209, 212, 213, 214, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 249, 251, 252, 253, 254, 255, 258, 260, 266, 267, 270]:
                    self.state = 2473
                    self.genericArgument()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2476
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMethod_writeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_WRITE(self):
            return self.getToken(GremlinParser.K_WRITE, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMethod_write

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMethod_write" ):
                listener.enterTraversalMethod_write(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMethod_write" ):
                listener.exitTraversalMethod_write(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMethod_write" ):
                return visitor.visitTraversalMethod_write(self)
            else:
                return visitor.visitChildren(self)




    def traversalMethod_write(self):

        localctx = GremlinParser.TraversalMethod_writeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_traversalMethod_write)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2480
            self.match(GremlinParser.K_WRITE)
            self.state = 2481
            self.match(GremlinParser.LPAREN)
            self.state = 2482
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructureVertexLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)


        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)

        def stringArgument(self):
            return self.getTypedRuleContext(GremlinParser.StringArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_VERTEX(self):
            return self.getToken(GremlinParser.K_VERTEX, 0)

        def K_REFERENCEVERTEX(self):
            return self.getToken(GremlinParser.K_REFERENCEVERTEX, 0)

        def K_NEW(self):
            return self.getToken(GremlinParser.K_NEW, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_structureVertexLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructureVertexLiteral" ):
                listener.enterStructureVertexLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructureVertexLiteral" ):
                listener.exitStructureVertexLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructureVertexLiteral" ):
                return visitor.visitStructureVertexLiteral(self)
            else:
                return visitor.visitChildren(self)




    def structureVertexLiteral(self):

        localctx = GremlinParser.StructureVertexLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_structureVertexLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 2484
                self.match(GremlinParser.K_NEW)


            self.state = 2487
            _la = self._input.LA(1)
            if not(_la==181 or _la==237):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2488
            self.match(GremlinParser.LPAREN)
            self.state = 2489
            self.genericArgument()
            self.state = 2490
            self.match(GremlinParser.COMMA)
            self.state = 2491
            self.stringArgument()
            self.state = 2492
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalStrategyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classType(self):
            return self.getTypedRuleContext(GremlinParser.ClassTypeContext,0)


        def K_NEW(self):
            return self.getToken(GremlinParser.K_NEW, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def configuration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.ConfigurationContext)
            else:
                return self.getTypedRuleContext(GremlinParser.ConfigurationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalStrategy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalStrategy" ):
                listener.enterTraversalStrategy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalStrategy" ):
                listener.exitTraversalStrategy(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalStrategy" ):
                return visitor.visitTraversalStrategy(self)
            else:
                return visitor.visitChildren(self)




    def traversalStrategy(self):

        localctx = GremlinParser.TraversalStrategyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_traversalStrategy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 2494
                self.match(GremlinParser.K_NEW)


            self.state = 2497
            self.classType()
            self.state = 2510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==256:
                self.state = 2498
                self.match(GremlinParser.LPAREN)
                self.state = 2507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 576460752303423487) != 0) or _la==266 or _la==270:
                    self.state = 2499
                    self.configuration()
                    self.state = 2504
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==263:
                        self.state = 2500
                        self.match(GremlinParser.COMMA)
                        self.state = 2501
                        self.configuration()
                        self.state = 2506
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2509
                self.match(GremlinParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigurationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(GremlinParser.COLON, 0)

        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)


        def keyword(self):
            return self.getTypedRuleContext(GremlinParser.KeywordContext,0)


        def nakedKey(self):
            return self.getTypedRuleContext(GremlinParser.NakedKeyContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_configuration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfiguration" ):
                listener.enterConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfiguration" ):
                listener.exitConfiguration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConfiguration" ):
                return visitor.visitConfiguration(self)
            else:
                return visitor.visitChildren(self)




    def configuration(self):

        localctx = GremlinParser.ConfigurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_configuration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2514
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 266]:
                self.state = 2512
                self.keyword()
                pass
            elif token in [270]:
                self.state = 2513
                self.nakedKey()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2516
            self.match(GremlinParser.COLON)
            self.state = 2517
            self.genericArgument()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_LOCAL(self):
            return self.getToken(GremlinParser.K_LOCAL, 0)

        def K_SCOPE(self):
            return self.getToken(GremlinParser.K_SCOPE, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_GLOBAL(self):
            return self.getToken(GremlinParser.K_GLOBAL, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalScope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalScope" ):
                listener.enterTraversalScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalScope" ):
                listener.exitTraversalScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalScope" ):
                return visitor.visitTraversalScope(self)
            else:
                return visitor.visitChildren(self)




    def traversalScope(self):

        localctx = GremlinParser.TraversalScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_traversalScope)
        try:
            self.state = 2527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2519
                self.match(GremlinParser.K_LOCAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2520
                self.match(GremlinParser.K_SCOPE)
                self.state = 2521
                self.match(GremlinParser.DOT)
                self.state = 2522
                self.match(GremlinParser.K_LOCAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2523
                self.match(GremlinParser.K_GLOBAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2524
                self.match(GremlinParser.K_SCOPE)
                self.state = 2525
                self.match(GremlinParser.DOT)
                self.state = 2526
                self.match(GremlinParser.K_GLOBAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalBarrierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_NORMSACK(self):
            return self.getToken(GremlinParser.K_NORMSACK, 0)

        def K_BARRIERU(self):
            return self.getToken(GremlinParser.K_BARRIERU, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalBarrier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalBarrier" ):
                listener.enterTraversalBarrier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalBarrier" ):
                listener.exitTraversalBarrier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalBarrier" ):
                return visitor.visitTraversalBarrier(self)
            else:
                return visitor.visitChildren(self)




    def traversalBarrier(self):

        localctx = GremlinParser.TraversalBarrierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_traversalBarrier)
        try:
            self.state = 2533
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [147]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2529
                self.match(GremlinParser.K_NORMSACK)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2530
                self.match(GremlinParser.K_BARRIERU)
                self.state = 2531
                self.match(GremlinParser.DOT)
                self.state = 2532
                self.match(GremlinParser.K_NORMSACK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalTContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traversalTShort(self):
            return self.getTypedRuleContext(GremlinParser.TraversalTShortContext,0)


        def traversalTLong(self):
            return self.getTypedRuleContext(GremlinParser.TraversalTLongContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalT

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalT" ):
                listener.enterTraversalT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalT" ):
                listener.exitTraversalT(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalT" ):
                return visitor.visitTraversalT(self)
            else:
                return visitor.visitChildren(self)




    def traversalT(self):

        localctx = GremlinParser.TraversalTContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_traversalT)
        try:
            self.state = 2537
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89, 108, 111, 236]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2535
                self.traversalTShort()
                pass
            elif token in [208]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2536
                self.traversalTLong()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalTShortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ID(self):
            return self.getToken(GremlinParser.K_ID, 0)

        def K_LABEL(self):
            return self.getToken(GremlinParser.K_LABEL, 0)

        def K_KEY(self):
            return self.getToken(GremlinParser.K_KEY, 0)

        def K_VALUE(self):
            return self.getToken(GremlinParser.K_VALUE, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalTShort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalTShort" ):
                listener.enterTraversalTShort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalTShort" ):
                listener.exitTraversalTShort(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalTShort" ):
                return visitor.visitTraversalTShort(self)
            else:
                return visitor.visitChildren(self)




    def traversalTShort(self):

        localctx = GremlinParser.TraversalTShortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_traversalTShort)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2539
            _la = self._input.LA(1)
            if not(((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 4718593) != 0) or _la==236):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalTLongContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_T(self):
            return self.getToken(GremlinParser.K_T, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_ID(self):
            return self.getToken(GremlinParser.K_ID, 0)

        def K_LABEL(self):
            return self.getToken(GremlinParser.K_LABEL, 0)

        def K_KEY(self):
            return self.getToken(GremlinParser.K_KEY, 0)

        def K_VALUE(self):
            return self.getToken(GremlinParser.K_VALUE, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalTLong

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalTLong" ):
                listener.enterTraversalTLong(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalTLong" ):
                listener.exitTraversalTLong(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalTLong" ):
                return visitor.visitTraversalTLong(self)
            else:
                return visitor.visitChildren(self)




    def traversalTLong(self):

        localctx = GremlinParser.TraversalTLongContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_traversalTLong)
        try:
            self.state = 2553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2541
                self.match(GremlinParser.K_T)
                self.state = 2542
                self.match(GremlinParser.DOT)
                self.state = 2543
                self.match(GremlinParser.K_ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2544
                self.match(GremlinParser.K_T)
                self.state = 2545
                self.match(GremlinParser.DOT)
                self.state = 2546
                self.match(GremlinParser.K_LABEL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2547
                self.match(GremlinParser.K_T)
                self.state = 2548
                self.match(GremlinParser.DOT)
                self.state = 2549
                self.match(GremlinParser.K_KEY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2550
                self.match(GremlinParser.K_T)
                self.state = 2551
                self.match(GremlinParser.DOT)
                self.state = 2552
                self.match(GremlinParser.K_VALUE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalMergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ONCREATE(self):
            return self.getToken(GremlinParser.K_ONCREATE, 0)

        def K_MERGEU(self):
            return self.getToken(GremlinParser.K_MERGEU, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_ONMATCH(self):
            return self.getToken(GremlinParser.K_ONMATCH, 0)

        def K_OUTV(self):
            return self.getToken(GremlinParser.K_OUTV, 0)

        def K_INV(self):
            return self.getToken(GremlinParser.K_INV, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalMerge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalMerge" ):
                listener.enterTraversalMerge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalMerge" ):
                listener.exitTraversalMerge(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalMerge" ):
                return visitor.visitTraversalMerge(self)
            else:
                return visitor.visitChildren(self)




    def traversalMerge(self):

        localctx = GremlinParser.TraversalMergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_traversalMerge)
        try:
            self.state = 2571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2555
                self.match(GremlinParser.K_ONCREATE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2556
                self.match(GremlinParser.K_MERGEU)
                self.state = 2557
                self.match(GremlinParser.DOT)
                self.state = 2558
                self.match(GremlinParser.K_ONCREATE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2559
                self.match(GremlinParser.K_ONMATCH)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2560
                self.match(GremlinParser.K_MERGEU)
                self.state = 2561
                self.match(GremlinParser.DOT)
                self.state = 2562
                self.match(GremlinParser.K_ONMATCH)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2563
                self.match(GremlinParser.K_OUTV)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2564
                self.match(GremlinParser.K_MERGEU)
                self.state = 2565
                self.match(GremlinParser.DOT)
                self.state = 2566
                self.match(GremlinParser.K_OUTV)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2567
                self.match(GremlinParser.K_INV)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2568
                self.match(GremlinParser.K_MERGEU)
                self.state = 2569
                self.match(GremlinParser.DOT)
                self.state = 2570
                self.match(GremlinParser.K_INV)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalOrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ASC(self):
            return self.getToken(GremlinParser.K_ASC, 0)

        def K_ORDERU(self):
            return self.getToken(GremlinParser.K_ORDERU, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_DESC(self):
            return self.getToken(GremlinParser.K_DESC, 0)

        def K_SHUFFLE(self):
            return self.getToken(GremlinParser.K_SHUFFLE, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalOrder

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalOrder" ):
                listener.enterTraversalOrder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalOrder" ):
                listener.exitTraversalOrder(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalOrder" ):
                return visitor.visitTraversalOrder(self)
            else:
                return visitor.visitChildren(self)




    def traversalOrder(self):

        localctx = GremlinParser.TraversalOrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_traversalOrder)
        try:
            self.state = 2585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2573
                self.match(GremlinParser.K_ASC)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2574
                self.match(GremlinParser.K_ORDERU)
                self.state = 2575
                self.match(GremlinParser.DOT)
                self.state = 2576
                self.match(GremlinParser.K_ASC)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2577
                self.match(GremlinParser.K_DESC)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2578
                self.match(GremlinParser.K_ORDERU)
                self.state = 2579
                self.match(GremlinParser.DOT)
                self.state = 2580
                self.match(GremlinParser.K_DESC)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2581
                self.match(GremlinParser.K_SHUFFLE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2582
                self.match(GremlinParser.K_ORDERU)
                self.state = 2583
                self.match(GremlinParser.DOT)
                self.state = 2584
                self.match(GremlinParser.K_SHUFFLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalDirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traversalDirectionShort(self):
            return self.getTypedRuleContext(GremlinParser.TraversalDirectionShortContext,0)


        def traversalDirectionLong(self):
            return self.getTypedRuleContext(GremlinParser.TraversalDirectionLongContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalDirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalDirection" ):
                listener.enterTraversalDirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalDirection" ):
                listener.exitTraversalDirection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalDirection" ):
                return visitor.visitTraversalDirection(self)
            else:
                return visitor.visitChildren(self)




    def traversalDirection(self):

        localctx = GremlinParser.TraversalDirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_traversalDirection)
        try:
            self.state = 2589
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 72, 93, 158, 214]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2587
                self.traversalDirectionShort()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2588
                self.traversalDirectionLong()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalDirectionShortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_INU(self):
            return self.getToken(GremlinParser.K_INU, 0)

        def K_FROM(self):
            return self.getToken(GremlinParser.K_FROM, 0)

        def K_OUTU(self):
            return self.getToken(GremlinParser.K_OUTU, 0)

        def K_TO(self):
            return self.getToken(GremlinParser.K_TO, 0)

        def K_BOTHU(self):
            return self.getToken(GremlinParser.K_BOTHU, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalDirectionShort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalDirectionShort" ):
                listener.enterTraversalDirectionShort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalDirectionShort" ):
                listener.exitTraversalDirectionShort(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalDirectionShort" ):
                return visitor.visitTraversalDirectionShort(self)
            else:
                return visitor.visitChildren(self)




    def traversalDirectionShort(self):

        localctx = GremlinParser.TraversalDirectionShortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_traversalDirectionShort)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2591
            _la = self._input.LA(1)
            if not(_la==19 or _la==72 or _la==93 or _la==158 or _la==214):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalDirectionLongContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DIRECTION(self):
            return self.getToken(GremlinParser.K_DIRECTION, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_INU(self):
            return self.getToken(GremlinParser.K_INU, 0)

        def K_FROM(self):
            return self.getToken(GremlinParser.K_FROM, 0)

        def K_OUTU(self):
            return self.getToken(GremlinParser.K_OUTU, 0)

        def K_TO(self):
            return self.getToken(GremlinParser.K_TO, 0)

        def K_BOTHU(self):
            return self.getToken(GremlinParser.K_BOTHU, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalDirectionLong

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalDirectionLong" ):
                listener.enterTraversalDirectionLong(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalDirectionLong" ):
                listener.exitTraversalDirectionLong(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalDirectionLong" ):
                return visitor.visitTraversalDirectionLong(self)
            else:
                return visitor.visitChildren(self)




    def traversalDirectionLong(self):

        localctx = GremlinParser.TraversalDirectionLongContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_traversalDirectionLong)
        try:
            self.state = 2608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2593
                self.match(GremlinParser.K_DIRECTION)
                self.state = 2594
                self.match(GremlinParser.DOT)
                self.state = 2595
                self.match(GremlinParser.K_INU)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2596
                self.match(GremlinParser.K_DIRECTION)
                self.state = 2597
                self.match(GremlinParser.DOT)
                self.state = 2598
                self.match(GremlinParser.K_FROM)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2599
                self.match(GremlinParser.K_DIRECTION)
                self.state = 2600
                self.match(GremlinParser.DOT)
                self.state = 2601
                self.match(GremlinParser.K_OUTU)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2602
                self.match(GremlinParser.K_DIRECTION)
                self.state = 2603
                self.match(GremlinParser.DOT)
                self.state = 2604
                self.match(GremlinParser.K_TO)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2605
                self.match(GremlinParser.K_DIRECTION)
                self.state = 2606
                self.match(GremlinParser.DOT)
                self.state = 2607
                self.match(GremlinParser.K_BOTHU)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalCardinalityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def genericLiteral(self):
            return self.getTypedRuleContext(GremlinParser.GenericLiteralContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_CARDINALITY(self):
            return self.getToken(GremlinParser.K_CARDINALITY, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_SINGLE(self):
            return self.getToken(GremlinParser.K_SINGLE, 0)

        def K_SET(self):
            return self.getToken(GremlinParser.K_SET, 0)

        def K_LIST(self):
            return self.getToken(GremlinParser.K_LIST, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalCardinality

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalCardinality" ):
                listener.enterTraversalCardinality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalCardinality" ):
                listener.exitTraversalCardinality(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalCardinality" ):
                return visitor.visitTraversalCardinality(self)
            else:
                return visitor.visitChildren(self)




    def traversalCardinality(self):

        localctx = GremlinParser.TraversalCardinalityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_traversalCardinality)
        try:
            self.state = 2652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2614
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [26]:
                    self.state = 2610
                    self.match(GremlinParser.K_CARDINALITY)
                    self.state = 2611
                    self.match(GremlinParser.DOT)
                    self.state = 2612
                    self.match(GremlinParser.K_SINGLE)
                    pass
                elif token in [199]:
                    self.state = 2613
                    self.match(GremlinParser.K_SINGLE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2616
                self.match(GremlinParser.LPAREN)
                self.state = 2617
                self.genericLiteral()
                self.state = 2618
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2624
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [26]:
                    self.state = 2620
                    self.match(GremlinParser.K_CARDINALITY)
                    self.state = 2621
                    self.match(GremlinParser.DOT)
                    self.state = 2622
                    self.match(GremlinParser.K_SET)
                    pass
                elif token in [193]:
                    self.state = 2623
                    self.match(GremlinParser.K_SET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2626
                self.match(GremlinParser.LPAREN)
                self.state = 2627
                self.genericLiteral()
                self.state = 2628
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2634
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [26]:
                    self.state = 2630
                    self.match(GremlinParser.K_CARDINALITY)
                    self.state = 2631
                    self.match(GremlinParser.DOT)
                    self.state = 2632
                    self.match(GremlinParser.K_LIST)
                    pass
                elif token in [115]:
                    self.state = 2633
                    self.match(GremlinParser.K_LIST)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2636
                self.match(GremlinParser.LPAREN)
                self.state = 2637
                self.genericLiteral()
                self.state = 2638
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2640
                self.match(GremlinParser.K_SINGLE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2641
                self.match(GremlinParser.K_CARDINALITY)
                self.state = 2642
                self.match(GremlinParser.DOT)
                self.state = 2643
                self.match(GremlinParser.K_SINGLE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2644
                self.match(GremlinParser.K_SET)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2645
                self.match(GremlinParser.K_CARDINALITY)
                self.state = 2646
                self.match(GremlinParser.DOT)
                self.state = 2647
                self.match(GremlinParser.K_SET)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2648
                self.match(GremlinParser.K_LIST)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2649
                self.match(GremlinParser.K_CARDINALITY)
                self.state = 2650
                self.match(GremlinParser.DOT)
                self.state = 2651
                self.match(GremlinParser.K_LIST)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_KEYS(self):
            return self.getToken(GremlinParser.K_KEYS, 0)

        def K_COLUMN(self):
            return self.getToken(GremlinParser.K_COLUMN, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_VALUES(self):
            return self.getToken(GremlinParser.K_VALUES, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalColumn" ):
                listener.enterTraversalColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalColumn" ):
                listener.exitTraversalColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalColumn" ):
                return visitor.visitTraversalColumn(self)
            else:
                return visitor.visitChildren(self)




    def traversalColumn(self):

        localctx = GremlinParser.TraversalColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_traversalColumn)
        try:
            self.state = 2662
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2654
                self.match(GremlinParser.K_KEYS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2655
                self.match(GremlinParser.K_COLUMN)
                self.state = 2656
                self.match(GremlinParser.DOT)
                self.state = 2657
                self.match(GremlinParser.K_KEYS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2658
                self.match(GremlinParser.K_VALUES)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2659
                self.match(GremlinParser.K_COLUMN)
                self.state = 2660
                self.match(GremlinParser.DOT)
                self.state = 2661
                self.match(GremlinParser.K_VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_FIRST(self):
            return self.getToken(GremlinParser.K_FIRST, 0)

        def K_POP(self):
            return self.getToken(GremlinParser.K_POP, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_LAST(self):
            return self.getToken(GremlinParser.K_LAST, 0)

        def K_ALL(self):
            return self.getToken(GremlinParser.K_ALL, 0)

        def K_MIXED(self):
            return self.getToken(GremlinParser.K_MIXED, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPop" ):
                listener.enterTraversalPop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPop" ):
                listener.exitTraversalPop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPop" ):
                return visitor.visitTraversalPop(self)
            else:
                return visitor.visitChildren(self)




    def traversalPop(self):

        localctx = GremlinParser.TraversalPopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_traversalPop)
        try:
            self.state = 2680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2664
                self.match(GremlinParser.K_FIRST)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2665
                self.match(GremlinParser.K_POP)
                self.state = 2666
                self.match(GremlinParser.DOT)
                self.state = 2667
                self.match(GremlinParser.K_FIRST)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2668
                self.match(GremlinParser.K_LAST)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2669
                self.match(GremlinParser.K_POP)
                self.state = 2670
                self.match(GremlinParser.DOT)
                self.state = 2671
                self.match(GremlinParser.K_LAST)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2672
                self.match(GremlinParser.K_ALL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2673
                self.match(GremlinParser.K_POP)
                self.state = 2674
                self.match(GremlinParser.DOT)
                self.state = 2675
                self.match(GremlinParser.K_ALL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2676
                self.match(GremlinParser.K_MIXED)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2677
                self.match(GremlinParser.K_POP)
                self.state = 2678
                self.match(GremlinParser.DOT)
                self.state = 2679
                self.match(GremlinParser.K_MIXED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ADDALL(self):
            return self.getToken(GremlinParser.K_ADDALL, 0)

        def K_OPERATOR(self):
            return self.getToken(GremlinParser.K_OPERATOR, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_AND(self):
            return self.getToken(GremlinParser.K_AND, 0)

        def K_ASSIGN(self):
            return self.getToken(GremlinParser.K_ASSIGN, 0)

        def K_DIV(self):
            return self.getToken(GremlinParser.K_DIV, 0)

        def K_MAX(self):
            return self.getToken(GremlinParser.K_MAX, 0)

        def K_MIN(self):
            return self.getToken(GremlinParser.K_MIN, 0)

        def K_MINUS(self):
            return self.getToken(GremlinParser.K_MINUS, 0)

        def K_MULT(self):
            return self.getToken(GremlinParser.K_MULT, 0)

        def K_OR(self):
            return self.getToken(GremlinParser.K_OR, 0)

        def K_SUM(self):
            return self.getToken(GremlinParser.K_SUM, 0)

        def K_SUMLONG(self):
            return self.getToken(GremlinParser.K_SUMLONG, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalOperator" ):
                listener.enterTraversalOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalOperator" ):
                listener.exitTraversalOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalOperator" ):
                return visitor.visitTraversalOperator(self)
            else:
                return visitor.visitChildren(self)




    def traversalOperator(self):

        localctx = GremlinParser.TraversalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_traversalOperator)
        try:
            self.state = 2726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2682
                self.match(GremlinParser.K_ADDALL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2683
                self.match(GremlinParser.K_OPERATOR)
                self.state = 2684
                self.match(GremlinParser.DOT)
                self.state = 2685
                self.match(GremlinParser.K_ADDALL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2686
                self.match(GremlinParser.K_AND)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2687
                self.match(GremlinParser.K_OPERATOR)
                self.state = 2688
                self.match(GremlinParser.DOT)
                self.state = 2689
                self.match(GremlinParser.K_AND)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2690
                self.match(GremlinParser.K_ASSIGN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2691
                self.match(GremlinParser.K_OPERATOR)
                self.state = 2692
                self.match(GremlinParser.DOT)
                self.state = 2693
                self.match(GremlinParser.K_ASSIGN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2694
                self.match(GremlinParser.K_DIV)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2695
                self.match(GremlinParser.K_OPERATOR)
                self.state = 2696
                self.match(GremlinParser.DOT)
                self.state = 2697
                self.match(GremlinParser.K_DIV)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2698
                self.match(GremlinParser.K_MAX)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2699
                self.match(GremlinParser.K_OPERATOR)
                self.state = 2700
                self.match(GremlinParser.DOT)
                self.state = 2701
                self.match(GremlinParser.K_MAX)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2702
                self.match(GremlinParser.K_MIN)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2703
                self.match(GremlinParser.K_OPERATOR)
                self.state = 2704
                self.match(GremlinParser.DOT)
                self.state = 2705
                self.match(GremlinParser.K_MIN)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2706
                self.match(GremlinParser.K_MINUS)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2707
                self.match(GremlinParser.K_OPERATOR)
                self.state = 2708
                self.match(GremlinParser.DOT)
                self.state = 2709
                self.match(GremlinParser.K_MINUS)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2710
                self.match(GremlinParser.K_MULT)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2711
                self.match(GremlinParser.K_OPERATOR)
                self.state = 2712
                self.match(GremlinParser.DOT)
                self.state = 2713
                self.match(GremlinParser.K_MULT)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2714
                self.match(GremlinParser.K_OR)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2715
                self.match(GremlinParser.K_OPERATOR)
                self.state = 2716
                self.match(GremlinParser.DOT)
                self.state = 2717
                self.match(GremlinParser.K_OR)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2718
                self.match(GremlinParser.K_SUM)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2719
                self.match(GremlinParser.K_OPERATOR)
                self.state = 2720
                self.match(GremlinParser.DOT)
                self.state = 2721
                self.match(GremlinParser.K_SUM)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2722
                self.match(GremlinParser.K_SUMLONG)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2723
                self.match(GremlinParser.K_OPERATOR)
                self.state = 2724
                self.match(GremlinParser.DOT)
                self.state = 2725
                self.match(GremlinParser.K_SUMLONG)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPickContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ANY(self):
            return self.getToken(GremlinParser.K_ANY, 0)

        def K_PICK(self):
            return self.getToken(GremlinParser.K_PICK, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_NONE(self):
            return self.getToken(GremlinParser.K_NONE, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPick

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPick" ):
                listener.enterTraversalPick(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPick" ):
                listener.exitTraversalPick(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPick" ):
                return visitor.visitTraversalPick(self)
            else:
                return visitor.visitChildren(self)




    def traversalPick(self):

        localctx = GremlinParser.TraversalPickContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_traversalPick)
        try:
            self.state = 2736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2728
                self.match(GremlinParser.K_ANY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2729
                self.match(GremlinParser.K_PICK)
                self.state = 2730
                self.match(GremlinParser.DOT)
                self.state = 2731
                self.match(GremlinParser.K_ANY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2732
                self.match(GremlinParser.K_NONE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2733
                self.match(GremlinParser.K_PICK)
                self.state = 2734
                self.match(GremlinParser.DOT)
                self.state = 2735
                self.match(GremlinParser.K_NONE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalDTContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SECOND(self):
            return self.getToken(GremlinParser.K_SECOND, 0)

        def K_DT(self):
            return self.getToken(GremlinParser.K_DT, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_MINUTE(self):
            return self.getToken(GremlinParser.K_MINUTE, 0)

        def K_HOUR(self):
            return self.getToken(GremlinParser.K_HOUR, 0)

        def K_DAY(self):
            return self.getToken(GremlinParser.K_DAY, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalDT

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalDT" ):
                listener.enterTraversalDT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalDT" ):
                listener.exitTraversalDT(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalDT" ):
                return visitor.visitTraversalDT(self)
            else:
                return visitor.visitChildren(self)




    def traversalDT(self):

        localctx = GremlinParser.TraversalDTContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_traversalDT)
        try:
            self.state = 2754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2738
                self.match(GremlinParser.K_SECOND)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2739
                self.match(GremlinParser.K_DT)
                self.state = 2740
                self.match(GremlinParser.DOT)
                self.state = 2741
                self.match(GremlinParser.K_SECOND)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2742
                self.match(GremlinParser.K_MINUTE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2743
                self.match(GremlinParser.K_DT)
                self.state = 2744
                self.match(GremlinParser.DOT)
                self.state = 2745
                self.match(GremlinParser.K_MINUTE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2746
                self.match(GremlinParser.K_HOUR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2747
                self.match(GremlinParser.K_DT)
                self.state = 2748
                self.match(GremlinParser.DOT)
                self.state = 2749
                self.match(GremlinParser.K_HOUR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2750
                self.match(GremlinParser.K_DAY)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2751
                self.match(GremlinParser.K_DT)
                self.state = 2752
                self.match(GremlinParser.DOT)
                self.state = 2753
                self.match(GremlinParser.K_DAY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traversalPredicate_eq(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicate_eqContext,0)


        def traversalPredicate_neq(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicate_neqContext,0)


        def traversalPredicate_lt(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicate_ltContext,0)


        def traversalPredicate_lte(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicate_lteContext,0)


        def traversalPredicate_gt(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicate_gtContext,0)


        def traversalPredicate_gte(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicate_gteContext,0)


        def traversalPredicate_inside(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicate_insideContext,0)


        def traversalPredicate_outside(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicate_outsideContext,0)


        def traversalPredicate_between(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicate_betweenContext,0)


        def traversalPredicate_within(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicate_withinContext,0)


        def traversalPredicate_without(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicate_withoutContext,0)


        def traversalPredicate_not(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicate_notContext,0)


        def traversalPredicate_startingWith(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicate_startingWithContext,0)


        def traversalPredicate_notStartingWith(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicate_notStartingWithContext,0)


        def traversalPredicate_endingWith(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicate_endingWithContext,0)


        def traversalPredicate_notEndingWith(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicate_notEndingWithContext,0)


        def traversalPredicate_containing(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicate_containingContext,0)


        def traversalPredicate_notContaining(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicate_notContainingContext,0)


        def traversalPredicate_regex(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicate_regexContext,0)


        def traversalPredicate_notRegex(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicate_notRegexContext,0)


        def traversalPredicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.TraversalPredicateContext)
            else:
                return self.getTypedRuleContext(GremlinParser.TraversalPredicateContext,i)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_AND(self):
            return self.getToken(GremlinParser.K_AND, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_OR(self):
            return self.getToken(GremlinParser.K_OR, 0)

        def K_NEGATE(self):
            return self.getToken(GremlinParser.K_NEGATE, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPredicate" ):
                listener.enterTraversalPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPredicate" ):
                listener.exitTraversalPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPredicate" ):
                return visitor.visitTraversalPredicate(self)
            else:
                return visitor.visitChildren(self)



    def traversalPredicate(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GremlinParser.TraversalPredicateContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 364
        self.enterRecursionRule(localctx, 364, self.RULE_traversalPredicate, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 2757
                self.traversalPredicate_eq()
                pass

            elif la_ == 2:
                self.state = 2758
                self.traversalPredicate_neq()
                pass

            elif la_ == 3:
                self.state = 2759
                self.traversalPredicate_lt()
                pass

            elif la_ == 4:
                self.state = 2760
                self.traversalPredicate_lte()
                pass

            elif la_ == 5:
                self.state = 2761
                self.traversalPredicate_gt()
                pass

            elif la_ == 6:
                self.state = 2762
                self.traversalPredicate_gte()
                pass

            elif la_ == 7:
                self.state = 2763
                self.traversalPredicate_inside()
                pass

            elif la_ == 8:
                self.state = 2764
                self.traversalPredicate_outside()
                pass

            elif la_ == 9:
                self.state = 2765
                self.traversalPredicate_between()
                pass

            elif la_ == 10:
                self.state = 2766
                self.traversalPredicate_within()
                pass

            elif la_ == 11:
                self.state = 2767
                self.traversalPredicate_without()
                pass

            elif la_ == 12:
                self.state = 2768
                self.traversalPredicate_not()
                pass

            elif la_ == 13:
                self.state = 2769
                self.traversalPredicate_startingWith()
                pass

            elif la_ == 14:
                self.state = 2770
                self.traversalPredicate_notStartingWith()
                pass

            elif la_ == 15:
                self.state = 2771
                self.traversalPredicate_endingWith()
                pass

            elif la_ == 16:
                self.state = 2772
                self.traversalPredicate_notEndingWith()
                pass

            elif la_ == 17:
                self.state = 2773
                self.traversalPredicate_containing()
                pass

            elif la_ == 18:
                self.state = 2774
                self.traversalPredicate_notContaining()
                pass

            elif la_ == 19:
                self.state = 2775
                self.traversalPredicate_regex()
                pass

            elif la_ == 20:
                self.state = 2776
                self.traversalPredicate_notRegex()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2800
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2798
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                    if la_ == 1:
                        localctx = GremlinParser.TraversalPredicateContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_traversalPredicate)
                        self.state = 2779
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2780
                        self.match(GremlinParser.DOT)
                        self.state = 2781
                        self.match(GremlinParser.K_AND)
                        self.state = 2782
                        self.match(GremlinParser.LPAREN)
                        self.state = 2783
                        self.traversalPredicate(0)
                        self.state = 2784
                        self.match(GremlinParser.RPAREN)
                        pass

                    elif la_ == 2:
                        localctx = GremlinParser.TraversalPredicateContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_traversalPredicate)
                        self.state = 2786
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2787
                        self.match(GremlinParser.DOT)
                        self.state = 2788
                        self.match(GremlinParser.K_OR)
                        self.state = 2789
                        self.match(GremlinParser.LPAREN)
                        self.state = 2790
                        self.traversalPredicate(0)
                        self.state = 2791
                        self.match(GremlinParser.RPAREN)
                        pass

                    elif la_ == 3:
                        localctx = GremlinParser.TraversalPredicateContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_traversalPredicate)
                        self.state = 2793
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2794
                        self.match(GremlinParser.DOT)
                        self.state = 2795
                        self.match(GremlinParser.K_NEGATE)
                        self.state = 2796
                        self.match(GremlinParser.LPAREN)
                        self.state = 2797
                        self.match(GremlinParser.RPAREN)
                        pass

             
                self.state = 2802
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TraversalTerminalMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traversalTerminalMethod_explain(self):
            return self.getTypedRuleContext(GremlinParser.TraversalTerminalMethod_explainContext,0)


        def traversalTerminalMethod_iterate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalTerminalMethod_iterateContext,0)


        def traversalTerminalMethod_hasNext(self):
            return self.getTypedRuleContext(GremlinParser.TraversalTerminalMethod_hasNextContext,0)


        def traversalTerminalMethod_tryNext(self):
            return self.getTypedRuleContext(GremlinParser.TraversalTerminalMethod_tryNextContext,0)


        def traversalTerminalMethod_next(self):
            return self.getTypedRuleContext(GremlinParser.TraversalTerminalMethod_nextContext,0)


        def traversalTerminalMethod_toList(self):
            return self.getTypedRuleContext(GremlinParser.TraversalTerminalMethod_toListContext,0)


        def traversalTerminalMethod_toSet(self):
            return self.getTypedRuleContext(GremlinParser.TraversalTerminalMethod_toSetContext,0)


        def traversalTerminalMethod_toBulkSet(self):
            return self.getTypedRuleContext(GremlinParser.TraversalTerminalMethod_toBulkSetContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalTerminalMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalTerminalMethod" ):
                listener.enterTraversalTerminalMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalTerminalMethod" ):
                listener.exitTraversalTerminalMethod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalTerminalMethod" ):
                return visitor.visitTraversalTerminalMethod(self)
            else:
                return visitor.visitChildren(self)




    def traversalTerminalMethod(self):

        localctx = GremlinParser.TraversalTerminalMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_traversalTerminalMethod)
        try:
            self.state = 2811
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2803
                self.traversalTerminalMethod_explain()
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2804
                self.traversalTerminalMethod_iterate()
                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2805
                self.traversalTerminalMethod_hasNext()
                pass
            elif token in [227]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2806
                self.traversalTerminalMethod_tryNext()
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2807
                self.traversalTerminalMethod_next()
                pass
            elif token in [217]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2808
                self.traversalTerminalMethod_toList()
                pass
            elif token in [219]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2809
                self.traversalTerminalMethod_toSet()
                pass
            elif token in [215]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2810
                self.traversalTerminalMethod_toBulkSet()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalSackMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traversalBarrier(self):
            return self.getTypedRuleContext(GremlinParser.TraversalBarrierContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalSackMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalSackMethod" ):
                listener.enterTraversalSackMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalSackMethod" ):
                listener.exitTraversalSackMethod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalSackMethod" ):
                return visitor.visitTraversalSackMethod(self)
            else:
                return visitor.visitChildren(self)




    def traversalSackMethod(self):

        localctx = GremlinParser.TraversalSackMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_traversalSackMethod)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2813
            self.traversalBarrier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalComparatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traversalOrder(self):
            return self.getTypedRuleContext(GremlinParser.TraversalOrderContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalComparator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalComparator" ):
                listener.enterTraversalComparator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalComparator" ):
                listener.exitTraversalComparator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalComparator" ):
                return visitor.visitTraversalComparator(self)
            else:
                return visitor.visitChildren(self)




    def traversalComparator(self):

        localctx = GremlinParser.TraversalComparatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_traversalComparator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2815
            self.traversalOrder()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traversalT(self):
            return self.getTypedRuleContext(GremlinParser.TraversalTContext,0)


        def traversalColumn(self):
            return self.getTypedRuleContext(GremlinParser.TraversalColumnContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalFunction" ):
                listener.enterTraversalFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalFunction" ):
                listener.exitTraversalFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalFunction" ):
                return visitor.visitTraversalFunction(self)
            else:
                return visitor.visitChildren(self)




    def traversalFunction(self):

        localctx = GremlinParser.TraversalFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_traversalFunction)
        try:
            self.state = 2819
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89, 108, 111, 208, 236]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2817
                self.traversalT()
                pass
            elif token in [30, 109, 235]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2818
                self.traversalColumn()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalBiFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traversalOperator(self):
            return self.getTypedRuleContext(GremlinParser.TraversalOperatorContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalBiFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalBiFunction" ):
                listener.enterTraversalBiFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalBiFunction" ):
                listener.exitTraversalBiFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalBiFunction" ):
                return visitor.visitTraversalBiFunction(self)
            else:
                return visitor.visitChildren(self)




    def traversalBiFunction(self):

        localctx = GremlinParser.TraversalBiFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_traversalBiFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2821
            self.traversalOperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPredicate_eqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_P(self):
            return self.getToken(GremlinParser.K_P, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_EQ(self):
            return self.getToken(GremlinParser.K_EQ, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPredicate_eq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPredicate_eq" ):
                listener.enterTraversalPredicate_eq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPredicate_eq" ):
                listener.exitTraversalPredicate_eq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPredicate_eq" ):
                return visitor.visitTraversalPredicate_eq(self)
            else:
                return visitor.visitChildren(self)




    def traversalPredicate_eq(self):

        localctx = GremlinParser.TraversalPredicate_eqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_traversalPredicate_eq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2827
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [163]:
                self.state = 2823
                self.match(GremlinParser.K_P)
                self.state = 2824
                self.match(GremlinParser.DOT)
                self.state = 2825
                self.match(GremlinParser.K_EQ)
                pass
            elif token in [63]:
                self.state = 2826
                self.match(GremlinParser.K_EQ)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2829
            self.match(GremlinParser.LPAREN)
            self.state = 2830
            self.genericArgument()
            self.state = 2831
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPredicate_neqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_P(self):
            return self.getToken(GremlinParser.K_P, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_NEQ(self):
            return self.getToken(GremlinParser.K_NEQ, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPredicate_neq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPredicate_neq" ):
                listener.enterTraversalPredicate_neq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPredicate_neq" ):
                listener.exitTraversalPredicate_neq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPredicate_neq" ):
                return visitor.visitTraversalPredicate_neq(self)
            else:
                return visitor.visitChildren(self)




    def traversalPredicate_neq(self):

        localctx = GremlinParser.TraversalPredicate_neqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_traversalPredicate_neq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2837
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [163]:
                self.state = 2833
                self.match(GremlinParser.K_P)
                self.state = 2834
                self.match(GremlinParser.DOT)
                self.state = 2835
                self.match(GremlinParser.K_NEQ)
                pass
            elif token in [145]:
                self.state = 2836
                self.match(GremlinParser.K_NEQ)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2839
            self.match(GremlinParser.LPAREN)
            self.state = 2840
            self.genericArgument()
            self.state = 2841
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPredicate_ltContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_P(self):
            return self.getToken(GremlinParser.K_P, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_LT(self):
            return self.getToken(GremlinParser.K_LT, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPredicate_lt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPredicate_lt" ):
                listener.enterTraversalPredicate_lt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPredicate_lt" ):
                listener.exitTraversalPredicate_lt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPredicate_lt" ):
                return visitor.visitTraversalPredicate_lt(self)
            else:
                return visitor.visitChildren(self)




    def traversalPredicate_lt(self):

        localctx = GremlinParser.TraversalPredicate_ltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_traversalPredicate_lt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2847
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [163]:
                self.state = 2843
                self.match(GremlinParser.K_P)
                self.state = 2844
                self.match(GremlinParser.DOT)
                self.state = 2845
                self.match(GremlinParser.K_LT)
                pass
            elif token in [118]:
                self.state = 2846
                self.match(GremlinParser.K_LT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2849
            self.match(GremlinParser.LPAREN)
            self.state = 2850
            self.genericArgument()
            self.state = 2851
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPredicate_lteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_P(self):
            return self.getToken(GremlinParser.K_P, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_LTE(self):
            return self.getToken(GremlinParser.K_LTE, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPredicate_lte

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPredicate_lte" ):
                listener.enterTraversalPredicate_lte(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPredicate_lte" ):
                listener.exitTraversalPredicate_lte(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPredicate_lte" ):
                return visitor.visitTraversalPredicate_lte(self)
            else:
                return visitor.visitChildren(self)




    def traversalPredicate_lte(self):

        localctx = GremlinParser.TraversalPredicate_lteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_traversalPredicate_lte)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2857
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [163]:
                self.state = 2853
                self.match(GremlinParser.K_P)
                self.state = 2854
                self.match(GremlinParser.DOT)
                self.state = 2855
                self.match(GremlinParser.K_LTE)
                pass
            elif token in [119]:
                self.state = 2856
                self.match(GremlinParser.K_LTE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2859
            self.match(GremlinParser.LPAREN)
            self.state = 2860
            self.genericArgument()
            self.state = 2861
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPredicate_gtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_P(self):
            return self.getToken(GremlinParser.K_P, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_GT(self):
            return self.getToken(GremlinParser.K_GT, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPredicate_gt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPredicate_gt" ):
                listener.enterTraversalPredicate_gt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPredicate_gt" ):
                listener.exitTraversalPredicate_gt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPredicate_gt" ):
                return visitor.visitTraversalPredicate_gt(self)
            else:
                return visitor.visitChildren(self)




    def traversalPredicate_gt(self):

        localctx = GremlinParser.TraversalPredicate_gtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_traversalPredicate_gt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2867
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [163]:
                self.state = 2863
                self.match(GremlinParser.K_P)
                self.state = 2864
                self.match(GremlinParser.DOT)
                self.state = 2865
                self.match(GremlinParser.K_GT)
                pass
            elif token in [74]:
                self.state = 2866
                self.match(GremlinParser.K_GT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2869
            self.match(GremlinParser.LPAREN)
            self.state = 2870
            self.genericArgument()
            self.state = 2871
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPredicate_gteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def genericArgument(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_P(self):
            return self.getToken(GremlinParser.K_P, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_GTE(self):
            return self.getToken(GremlinParser.K_GTE, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPredicate_gte

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPredicate_gte" ):
                listener.enterTraversalPredicate_gte(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPredicate_gte" ):
                listener.exitTraversalPredicate_gte(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPredicate_gte" ):
                return visitor.visitTraversalPredicate_gte(self)
            else:
                return visitor.visitChildren(self)




    def traversalPredicate_gte(self):

        localctx = GremlinParser.TraversalPredicate_gteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_traversalPredicate_gte)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2877
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [163]:
                self.state = 2873
                self.match(GremlinParser.K_P)
                self.state = 2874
                self.match(GremlinParser.DOT)
                self.state = 2875
                self.match(GremlinParser.K_GTE)
                pass
            elif token in [75]:
                self.state = 2876
                self.match(GremlinParser.K_GTE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2879
            self.match(GremlinParser.LPAREN)
            self.state = 2880
            self.genericArgument()
            self.state = 2881
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPredicate_insideContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def genericArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.GenericArgumentContext)
            else:
                return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,i)


        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_P(self):
            return self.getToken(GremlinParser.K_P, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_INSIDE(self):
            return self.getToken(GremlinParser.K_INSIDE, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPredicate_inside

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPredicate_inside" ):
                listener.enterTraversalPredicate_inside(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPredicate_inside" ):
                listener.exitTraversalPredicate_inside(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPredicate_inside" ):
                return visitor.visitTraversalPredicate_inside(self)
            else:
                return visitor.visitChildren(self)




    def traversalPredicate_inside(self):

        localctx = GremlinParser.TraversalPredicate_insideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_traversalPredicate_inside)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2887
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [163]:
                self.state = 2883
                self.match(GremlinParser.K_P)
                self.state = 2884
                self.match(GremlinParser.DOT)
                self.state = 2885
                self.match(GremlinParser.K_INSIDE)
                pass
            elif token in [101]:
                self.state = 2886
                self.match(GremlinParser.K_INSIDE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2889
            self.match(GremlinParser.LPAREN)
            self.state = 2890
            self.genericArgument()
            self.state = 2891
            self.match(GremlinParser.COMMA)
            self.state = 2892
            self.genericArgument()
            self.state = 2893
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPredicate_outsideContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def genericArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.GenericArgumentContext)
            else:
                return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,i)


        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_P(self):
            return self.getToken(GremlinParser.K_P, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_OUTSIDE(self):
            return self.getToken(GremlinParser.K_OUTSIDE, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPredicate_outside

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPredicate_outside" ):
                listener.enterTraversalPredicate_outside(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPredicate_outside" ):
                listener.exitTraversalPredicate_outside(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPredicate_outside" ):
                return visitor.visitTraversalPredicate_outside(self)
            else:
                return visitor.visitChildren(self)




    def traversalPredicate_outside(self):

        localctx = GremlinParser.TraversalPredicate_outsideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_traversalPredicate_outside)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2899
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [163]:
                self.state = 2895
                self.match(GremlinParser.K_P)
                self.state = 2896
                self.match(GremlinParser.DOT)
                self.state = 2897
                self.match(GremlinParser.K_OUTSIDE)
                pass
            elif token in [161]:
                self.state = 2898
                self.match(GremlinParser.K_OUTSIDE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2901
            self.match(GremlinParser.LPAREN)
            self.state = 2902
            self.genericArgument()
            self.state = 2903
            self.match(GremlinParser.COMMA)
            self.state = 2904
            self.genericArgument()
            self.state = 2905
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPredicate_betweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def genericArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.GenericArgumentContext)
            else:
                return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,i)


        def COMMA(self):
            return self.getToken(GremlinParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_P(self):
            return self.getToken(GremlinParser.K_P, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_BETWEEN(self):
            return self.getToken(GremlinParser.K_BETWEEN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPredicate_between

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPredicate_between" ):
                listener.enterTraversalPredicate_between(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPredicate_between" ):
                listener.exitTraversalPredicate_between(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPredicate_between" ):
                return visitor.visitTraversalPredicate_between(self)
            else:
                return visitor.visitChildren(self)




    def traversalPredicate_between(self):

        localctx = GremlinParser.TraversalPredicate_betweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_traversalPredicate_between)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2911
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [163]:
                self.state = 2907
                self.match(GremlinParser.K_P)
                self.state = 2908
                self.match(GremlinParser.DOT)
                self.state = 2909
                self.match(GremlinParser.K_BETWEEN)
                pass
            elif token in [17]:
                self.state = 2910
                self.match(GremlinParser.K_BETWEEN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2913
            self.match(GremlinParser.LPAREN)
            self.state = 2914
            self.genericArgument()
            self.state = 2915
            self.match(GremlinParser.COMMA)
            self.state = 2916
            self.genericArgument()
            self.state = 2917
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPredicate_withinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_P(self):
            return self.getToken(GremlinParser.K_P, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_WITHIN(self):
            return self.getToken(GremlinParser.K_WITHIN, 0)

        def genericArgumentVarargs(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentVarargsContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPredicate_within

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPredicate_within" ):
                listener.enterTraversalPredicate_within(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPredicate_within" ):
                listener.exitTraversalPredicate_within(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPredicate_within" ):
                return visitor.visitTraversalPredicate_within(self)
            else:
                return visitor.visitChildren(self)




    def traversalPredicate_within(self):

        localctx = GremlinParser.TraversalPredicate_withinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_traversalPredicate_within)
        try:
            self.state = 2937
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2923
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [163]:
                    self.state = 2919
                    self.match(GremlinParser.K_P)
                    self.state = 2920
                    self.match(GremlinParser.DOT)
                    self.state = 2921
                    self.match(GremlinParser.K_WITHIN)
                    pass
                elif token in [241]:
                    self.state = 2922
                    self.match(GremlinParser.K_WITHIN)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2925
                self.match(GremlinParser.LPAREN)
                self.state = 2926
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2931
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [163]:
                    self.state = 2927
                    self.match(GremlinParser.K_P)
                    self.state = 2928
                    self.match(GremlinParser.DOT)
                    self.state = 2929
                    self.match(GremlinParser.K_WITHIN)
                    pass
                elif token in [241]:
                    self.state = 2930
                    self.match(GremlinParser.K_WITHIN)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2933
                self.match(GremlinParser.LPAREN)
                self.state = 2934
                self.genericArgumentVarargs()
                self.state = 2935
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPredicate_withoutContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_P(self):
            return self.getToken(GremlinParser.K_P, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_WITHOUT(self):
            return self.getToken(GremlinParser.K_WITHOUT, 0)

        def genericArgumentVarargs(self):
            return self.getTypedRuleContext(GremlinParser.GenericArgumentVarargsContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPredicate_without

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPredicate_without" ):
                listener.enterTraversalPredicate_without(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPredicate_without" ):
                listener.exitTraversalPredicate_without(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPredicate_without" ):
                return visitor.visitTraversalPredicate_without(self)
            else:
                return visitor.visitChildren(self)




    def traversalPredicate_without(self):

        localctx = GremlinParser.TraversalPredicate_withoutContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_traversalPredicate_without)
        try:
            self.state = 2957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2943
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [163]:
                    self.state = 2939
                    self.match(GremlinParser.K_P)
                    self.state = 2940
                    self.match(GremlinParser.DOT)
                    self.state = 2941
                    self.match(GremlinParser.K_WITHOUT)
                    pass
                elif token in [243]:
                    self.state = 2942
                    self.match(GremlinParser.K_WITHOUT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2945
                self.match(GremlinParser.LPAREN)
                self.state = 2946
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2951
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [163]:
                    self.state = 2947
                    self.match(GremlinParser.K_P)
                    self.state = 2948
                    self.match(GremlinParser.DOT)
                    self.state = 2949
                    self.match(GremlinParser.K_WITHOUT)
                    pass
                elif token in [243]:
                    self.state = 2950
                    self.match(GremlinParser.K_WITHOUT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2953
                self.match(GremlinParser.LPAREN)
                self.state = 2954
                self.genericArgumentVarargs()
                self.state = 2955
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPredicate_notContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def traversalPredicate(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPredicateContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_P(self):
            return self.getToken(GremlinParser.K_P, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_NOT(self):
            return self.getToken(GremlinParser.K_NOT, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPredicate_not

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPredicate_not" ):
                listener.enterTraversalPredicate_not(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPredicate_not" ):
                listener.exitTraversalPredicate_not(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPredicate_not" ):
                return visitor.visitTraversalPredicate_not(self)
            else:
                return visitor.visitChildren(self)




    def traversalPredicate_not(self):

        localctx = GremlinParser.TraversalPredicate_notContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_traversalPredicate_not)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2963
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [163]:
                self.state = 2959
                self.match(GremlinParser.K_P)
                self.state = 2960
                self.match(GremlinParser.DOT)
                self.state = 2961
                self.match(GremlinParser.K_NOT)
                pass
            elif token in [144]:
                self.state = 2962
                self.match(GremlinParser.K_NOT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2965
            self.match(GremlinParser.LPAREN)
            self.state = 2966
            self.traversalPredicate(0)
            self.state = 2967
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPredicate_containingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringArgument(self):
            return self.getTypedRuleContext(GremlinParser.StringArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_TEXTP(self):
            return self.getToken(GremlinParser.K_TEXTP, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_CONTAINING(self):
            return self.getToken(GremlinParser.K_CONTAINING, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPredicate_containing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPredicate_containing" ):
                listener.enterTraversalPredicate_containing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPredicate_containing" ):
                listener.exitTraversalPredicate_containing(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPredicate_containing" ):
                return visitor.visitTraversalPredicate_containing(self)
            else:
                return visitor.visitChildren(self)




    def traversalPredicate_containing(self):

        localctx = GremlinParser.TraversalPredicate_containingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_traversalPredicate_containing)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2973
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [211]:
                self.state = 2969
                self.match(GremlinParser.K_TEXTP)
                self.state = 2970
                self.match(GremlinParser.DOT)
                self.state = 2971
                self.match(GremlinParser.K_CONTAINING)
                pass
            elif token in [39]:
                self.state = 2972
                self.match(GremlinParser.K_CONTAINING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2975
            self.match(GremlinParser.LPAREN)
            self.state = 2976
            self.stringArgument()
            self.state = 2977
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPredicate_notContainingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringArgument(self):
            return self.getTypedRuleContext(GremlinParser.StringArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_TEXTP(self):
            return self.getToken(GremlinParser.K_TEXTP, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_NOTCONTAINING(self):
            return self.getToken(GremlinParser.K_NOTCONTAINING, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPredicate_notContaining

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPredicate_notContaining" ):
                listener.enterTraversalPredicate_notContaining(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPredicate_notContaining" ):
                listener.exitTraversalPredicate_notContaining(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPredicate_notContaining" ):
                return visitor.visitTraversalPredicate_notContaining(self)
            else:
                return visitor.visitChildren(self)




    def traversalPredicate_notContaining(self):

        localctx = GremlinParser.TraversalPredicate_notContainingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_traversalPredicate_notContaining)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [211]:
                self.state = 2979
                self.match(GremlinParser.K_TEXTP)
                self.state = 2980
                self.match(GremlinParser.DOT)
                self.state = 2981
                self.match(GremlinParser.K_NOTCONTAINING)
                pass
            elif token in [141]:
                self.state = 2982
                self.match(GremlinParser.K_NOTCONTAINING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2985
            self.match(GremlinParser.LPAREN)
            self.state = 2986
            self.stringArgument()
            self.state = 2987
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPredicate_startingWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringArgument(self):
            return self.getTypedRuleContext(GremlinParser.StringArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_TEXTP(self):
            return self.getToken(GremlinParser.K_TEXTP, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_STARTINGWITH(self):
            return self.getToken(GremlinParser.K_STARTINGWITH, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPredicate_startingWith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPredicate_startingWith" ):
                listener.enterTraversalPredicate_startingWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPredicate_startingWith" ):
                listener.exitTraversalPredicate_startingWith(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPredicate_startingWith" ):
                return visitor.visitTraversalPredicate_startingWith(self)
            else:
                return visitor.visitChildren(self)




    def traversalPredicate_startingWith(self):

        localctx = GremlinParser.TraversalPredicate_startingWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_traversalPredicate_startingWith)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2993
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [211]:
                self.state = 2989
                self.match(GremlinParser.K_TEXTP)
                self.state = 2990
                self.match(GremlinParser.DOT)
                self.state = 2991
                self.match(GremlinParser.K_STARTINGWITH)
                pass
            elif token in [202]:
                self.state = 2992
                self.match(GremlinParser.K_STARTINGWITH)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2995
            self.match(GremlinParser.LPAREN)
            self.state = 2996
            self.stringArgument()
            self.state = 2997
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPredicate_notStartingWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringArgument(self):
            return self.getTypedRuleContext(GremlinParser.StringArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_TEXTP(self):
            return self.getToken(GremlinParser.K_TEXTP, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_NOTSTARTINGWITH(self):
            return self.getToken(GremlinParser.K_NOTSTARTINGWITH, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPredicate_notStartingWith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPredicate_notStartingWith" ):
                listener.enterTraversalPredicate_notStartingWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPredicate_notStartingWith" ):
                listener.exitTraversalPredicate_notStartingWith(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPredicate_notStartingWith" ):
                return visitor.visitTraversalPredicate_notStartingWith(self)
            else:
                return visitor.visitChildren(self)




    def traversalPredicate_notStartingWith(self):

        localctx = GremlinParser.TraversalPredicate_notStartingWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_traversalPredicate_notStartingWith)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3003
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [211]:
                self.state = 2999
                self.match(GremlinParser.K_TEXTP)
                self.state = 3000
                self.match(GremlinParser.DOT)
                self.state = 3001
                self.match(GremlinParser.K_NOTSTARTINGWITH)
                pass
            elif token in [143]:
                self.state = 3002
                self.match(GremlinParser.K_NOTSTARTINGWITH)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3005
            self.match(GremlinParser.LPAREN)
            self.state = 3006
            self.stringArgument()
            self.state = 3007
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPredicate_endingWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringArgument(self):
            return self.getTypedRuleContext(GremlinParser.StringArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_TEXTP(self):
            return self.getToken(GremlinParser.K_TEXTP, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_ENDINGWITH(self):
            return self.getToken(GremlinParser.K_ENDINGWITH, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPredicate_endingWith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPredicate_endingWith" ):
                listener.enterTraversalPredicate_endingWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPredicate_endingWith" ):
                listener.exitTraversalPredicate_endingWith(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPredicate_endingWith" ):
                return visitor.visitTraversalPredicate_endingWith(self)
            else:
                return visitor.visitChildren(self)




    def traversalPredicate_endingWith(self):

        localctx = GremlinParser.TraversalPredicate_endingWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_traversalPredicate_endingWith)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3013
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [211]:
                self.state = 3009
                self.match(GremlinParser.K_TEXTP)
                self.state = 3010
                self.match(GremlinParser.DOT)
                self.state = 3011
                self.match(GremlinParser.K_ENDINGWITH)
                pass
            elif token in [62]:
                self.state = 3012
                self.match(GremlinParser.K_ENDINGWITH)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3015
            self.match(GremlinParser.LPAREN)
            self.state = 3016
            self.stringArgument()
            self.state = 3017
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPredicate_notEndingWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringArgument(self):
            return self.getTypedRuleContext(GremlinParser.StringArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_TEXTP(self):
            return self.getToken(GremlinParser.K_TEXTP, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_NOTENDINGWITH(self):
            return self.getToken(GremlinParser.K_NOTENDINGWITH, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPredicate_notEndingWith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPredicate_notEndingWith" ):
                listener.enterTraversalPredicate_notEndingWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPredicate_notEndingWith" ):
                listener.exitTraversalPredicate_notEndingWith(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPredicate_notEndingWith" ):
                return visitor.visitTraversalPredicate_notEndingWith(self)
            else:
                return visitor.visitChildren(self)




    def traversalPredicate_notEndingWith(self):

        localctx = GremlinParser.TraversalPredicate_notEndingWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_traversalPredicate_notEndingWith)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3023
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [211]:
                self.state = 3019
                self.match(GremlinParser.K_TEXTP)
                self.state = 3020
                self.match(GremlinParser.DOT)
                self.state = 3021
                self.match(GremlinParser.K_NOTENDINGWITH)
                pass
            elif token in [142]:
                self.state = 3022
                self.match(GremlinParser.K_NOTENDINGWITH)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3025
            self.match(GremlinParser.LPAREN)
            self.state = 3026
            self.stringArgument()
            self.state = 3027
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPredicate_regexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringArgument(self):
            return self.getTypedRuleContext(GremlinParser.StringArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_TEXTP(self):
            return self.getToken(GremlinParser.K_TEXTP, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_REGEX(self):
            return self.getToken(GremlinParser.K_REGEX, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPredicate_regex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPredicate_regex" ):
                listener.enterTraversalPredicate_regex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPredicate_regex" ):
                listener.exitTraversalPredicate_regex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPredicate_regex" ):
                return visitor.visitTraversalPredicate_regex(self)
            else:
                return visitor.visitChildren(self)




    def traversalPredicate_regex(self):

        localctx = GremlinParser.TraversalPredicate_regexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_traversalPredicate_regex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3033
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [211]:
                self.state = 3029
                self.match(GremlinParser.K_TEXTP)
                self.state = 3030
                self.match(GremlinParser.DOT)
                self.state = 3031
                self.match(GremlinParser.K_REGEX)
                pass
            elif token in [182]:
                self.state = 3032
                self.match(GremlinParser.K_REGEX)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3035
            self.match(GremlinParser.LPAREN)
            self.state = 3036
            self.stringArgument()
            self.state = 3037
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalPredicate_notRegexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringArgument(self):
            return self.getTypedRuleContext(GremlinParser.StringArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_TEXTP(self):
            return self.getToken(GremlinParser.K_TEXTP, 0)

        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_NOTREGEX(self):
            return self.getToken(GremlinParser.K_NOTREGEX, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalPredicate_notRegex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalPredicate_notRegex" ):
                listener.enterTraversalPredicate_notRegex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalPredicate_notRegex" ):
                listener.exitTraversalPredicate_notRegex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalPredicate_notRegex" ):
                return visitor.visitTraversalPredicate_notRegex(self)
            else:
                return visitor.visitChildren(self)




    def traversalPredicate_notRegex(self):

        localctx = GremlinParser.TraversalPredicate_notRegexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_traversalPredicate_notRegex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3043
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [211]:
                self.state = 3039
                self.match(GremlinParser.K_TEXTP)
                self.state = 3040
                self.match(GremlinParser.DOT)
                self.state = 3041
                self.match(GremlinParser.K_NOTREGEX)
                pass
            elif token in [140]:
                self.state = 3042
                self.match(GremlinParser.K_NOTREGEX)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3045
            self.match(GremlinParser.LPAREN)
            self.state = 3046
            self.stringArgument()
            self.state = 3047
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalTerminalMethod_explainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_EXPLAIN(self):
            return self.getToken(GremlinParser.K_EXPLAIN, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalTerminalMethod_explain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalTerminalMethod_explain" ):
                listener.enterTraversalTerminalMethod_explain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalTerminalMethod_explain" ):
                listener.exitTraversalTerminalMethod_explain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalTerminalMethod_explain" ):
                return visitor.visitTraversalTerminalMethod_explain(self)
            else:
                return visitor.visitChildren(self)




    def traversalTerminalMethod_explain(self):

        localctx = GremlinParser.TraversalTerminalMethod_explainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_traversalTerminalMethod_explain)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3049
            self.match(GremlinParser.K_EXPLAIN)
            self.state = 3050
            self.match(GremlinParser.LPAREN)
            self.state = 3051
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalTerminalMethod_hasNextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_HASNEXT(self):
            return self.getToken(GremlinParser.K_HASNEXT, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalTerminalMethod_hasNext

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalTerminalMethod_hasNext" ):
                listener.enterTraversalTerminalMethod_hasNext(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalTerminalMethod_hasNext" ):
                listener.exitTraversalTerminalMethod_hasNext(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalTerminalMethod_hasNext" ):
                return visitor.visitTraversalTerminalMethod_hasNext(self)
            else:
                return visitor.visitChildren(self)




    def traversalTerminalMethod_hasNext(self):

        localctx = GremlinParser.TraversalTerminalMethod_hasNextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_traversalTerminalMethod_hasNext)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3053
            self.match(GremlinParser.K_HASNEXT)
            self.state = 3054
            self.match(GremlinParser.LPAREN)
            self.state = 3055
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalTerminalMethod_iterateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ITERATE(self):
            return self.getToken(GremlinParser.K_ITERATE, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalTerminalMethod_iterate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalTerminalMethod_iterate" ):
                listener.enterTraversalTerminalMethod_iterate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalTerminalMethod_iterate" ):
                listener.exitTraversalTerminalMethod_iterate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalTerminalMethod_iterate" ):
                return visitor.visitTraversalTerminalMethod_iterate(self)
            else:
                return visitor.visitChildren(self)




    def traversalTerminalMethod_iterate(self):

        localctx = GremlinParser.TraversalTerminalMethod_iterateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_traversalTerminalMethod_iterate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3057
            self.match(GremlinParser.K_ITERATE)
            self.state = 3058
            self.match(GremlinParser.LPAREN)
            self.state = 3059
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalTerminalMethod_tryNextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_TRYNEXT(self):
            return self.getToken(GremlinParser.K_TRYNEXT, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalTerminalMethod_tryNext

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalTerminalMethod_tryNext" ):
                listener.enterTraversalTerminalMethod_tryNext(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalTerminalMethod_tryNext" ):
                listener.exitTraversalTerminalMethod_tryNext(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalTerminalMethod_tryNext" ):
                return visitor.visitTraversalTerminalMethod_tryNext(self)
            else:
                return visitor.visitChildren(self)




    def traversalTerminalMethod_tryNext(self):

        localctx = GremlinParser.TraversalTerminalMethod_tryNextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_traversalTerminalMethod_tryNext)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3061
            self.match(GremlinParser.K_TRYNEXT)
            self.state = 3062
            self.match(GremlinParser.LPAREN)
            self.state = 3063
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalTerminalMethod_nextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_NEXT(self):
            return self.getToken(GremlinParser.K_NEXT, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(GremlinParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalTerminalMethod_next

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalTerminalMethod_next" ):
                listener.enterTraversalTerminalMethod_next(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalTerminalMethod_next" ):
                listener.exitTraversalTerminalMethod_next(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalTerminalMethod_next" ):
                return visitor.visitTraversalTerminalMethod_next(self)
            else:
                return visitor.visitChildren(self)




    def traversalTerminalMethod_next(self):

        localctx = GremlinParser.TraversalTerminalMethod_nextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_traversalTerminalMethod_next)
        try:
            self.state = 3073
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3065
                self.match(GremlinParser.K_NEXT)
                self.state = 3066
                self.match(GremlinParser.LPAREN)
                self.state = 3067
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3068
                self.match(GremlinParser.K_NEXT)
                self.state = 3069
                self.match(GremlinParser.LPAREN)
                self.state = 3070
                self.integerLiteral()
                self.state = 3071
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalTerminalMethod_toListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_TOLIST(self):
            return self.getToken(GremlinParser.K_TOLIST, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalTerminalMethod_toList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalTerminalMethod_toList" ):
                listener.enterTraversalTerminalMethod_toList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalTerminalMethod_toList" ):
                listener.exitTraversalTerminalMethod_toList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalTerminalMethod_toList" ):
                return visitor.visitTraversalTerminalMethod_toList(self)
            else:
                return visitor.visitChildren(self)




    def traversalTerminalMethod_toList(self):

        localctx = GremlinParser.TraversalTerminalMethod_toListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_traversalTerminalMethod_toList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3075
            self.match(GremlinParser.K_TOLIST)
            self.state = 3076
            self.match(GremlinParser.LPAREN)
            self.state = 3077
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalTerminalMethod_toSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_TOSET(self):
            return self.getToken(GremlinParser.K_TOSET, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalTerminalMethod_toSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalTerminalMethod_toSet" ):
                listener.enterTraversalTerminalMethod_toSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalTerminalMethod_toSet" ):
                listener.exitTraversalTerminalMethod_toSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalTerminalMethod_toSet" ):
                return visitor.visitTraversalTerminalMethod_toSet(self)
            else:
                return visitor.visitChildren(self)




    def traversalTerminalMethod_toSet(self):

        localctx = GremlinParser.TraversalTerminalMethod_toSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_traversalTerminalMethod_toSet)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3079
            self.match(GremlinParser.K_TOSET)
            self.state = 3080
            self.match(GremlinParser.LPAREN)
            self.state = 3081
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalTerminalMethod_toBulkSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_TOBULKSET(self):
            return self.getToken(GremlinParser.K_TOBULKSET, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalTerminalMethod_toBulkSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalTerminalMethod_toBulkSet" ):
                listener.enterTraversalTerminalMethod_toBulkSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalTerminalMethod_toBulkSet" ):
                listener.exitTraversalTerminalMethod_toBulkSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalTerminalMethod_toBulkSet" ):
                return visitor.visitTraversalTerminalMethod_toBulkSet(self)
            else:
                return visitor.visitChildren(self)




    def traversalTerminalMethod_toBulkSet(self):

        localctx = GremlinParser.TraversalTerminalMethod_toBulkSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_traversalTerminalMethod_toBulkSet)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3083
            self.match(GremlinParser.K_TOBULKSET)
            self.state = 3084
            self.match(GremlinParser.LPAREN)
            self.state = 3085
            self.match(GremlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithOptionKeysContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shortestPathConstants(self):
            return self.getTypedRuleContext(GremlinParser.ShortestPathConstantsContext,0)


        def connectedComponentConstants(self):
            return self.getTypedRuleContext(GremlinParser.ConnectedComponentConstantsContext,0)


        def pageRankConstants(self):
            return self.getTypedRuleContext(GremlinParser.PageRankConstantsContext,0)


        def peerPressureConstants(self):
            return self.getTypedRuleContext(GremlinParser.PeerPressureConstantsContext,0)


        def ioOptionsKeys(self):
            return self.getTypedRuleContext(GremlinParser.IoOptionsKeysContext,0)


        def withOptionsConstants_tokens(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsConstants_tokensContext,0)


        def withOptionsConstants_indexer(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsConstants_indexerContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_withOptionKeys

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithOptionKeys" ):
                listener.enterWithOptionKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithOptionKeys" ):
                listener.exitWithOptionKeys(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithOptionKeys" ):
                return visitor.visitWithOptionKeys(self)
            else:
                return visitor.visitChildren(self)




    def withOptionKeys(self):

        localctx = GremlinParser.WithOptionKeysContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_withOptionKeys)
        try:
            self.state = 3094
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3087
                self.shortestPathConstants()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3088
                self.connectedComponentConstants()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3089
                self.pageRankConstants()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3090
                self.peerPressureConstants()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3091
                self.ioOptionsKeys()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3092
                self.withOptionsConstants_tokens()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3093
                self.withOptionsConstants_indexer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectedComponentConstantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connectedComponentConstants_component(self):
            return self.getTypedRuleContext(GremlinParser.ConnectedComponentConstants_componentContext,0)


        def connectedComponentConstants_edges(self):
            return self.getTypedRuleContext(GremlinParser.ConnectedComponentConstants_edgesContext,0)


        def connectedComponentConstants_propertyName(self):
            return self.getTypedRuleContext(GremlinParser.ConnectedComponentConstants_propertyNameContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_connectedComponentConstants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConnectedComponentConstants" ):
                listener.enterConnectedComponentConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConnectedComponentConstants" ):
                listener.exitConnectedComponentConstants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectedComponentConstants" ):
                return visitor.visitConnectedComponentConstants(self)
            else:
                return visitor.visitChildren(self)




    def connectedComponentConstants(self):

        localctx = GremlinParser.ConnectedComponentConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_connectedComponentConstants)
        try:
            self.state = 3099
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3096
                self.connectedComponentConstants_component()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3097
                self.connectedComponentConstants_edges()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3098
                self.connectedComponentConstants_propertyName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PageRankConstantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pageRankConstants_edges(self):
            return self.getTypedRuleContext(GremlinParser.PageRankConstants_edgesContext,0)


        def pageRankConstants_times(self):
            return self.getTypedRuleContext(GremlinParser.PageRankConstants_timesContext,0)


        def pageRankConstants_propertyName(self):
            return self.getTypedRuleContext(GremlinParser.PageRankConstants_propertyNameContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_pageRankConstants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPageRankConstants" ):
                listener.enterPageRankConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPageRankConstants" ):
                listener.exitPageRankConstants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPageRankConstants" ):
                return visitor.visitPageRankConstants(self)
            else:
                return visitor.visitChildren(self)




    def pageRankConstants(self):

        localctx = GremlinParser.PageRankConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_pageRankConstants)
        try:
            self.state = 3104
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3101
                self.pageRankConstants_edges()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3102
                self.pageRankConstants_times()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3103
                self.pageRankConstants_propertyName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PeerPressureConstantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def peerPressureConstants_edges(self):
            return self.getTypedRuleContext(GremlinParser.PeerPressureConstants_edgesContext,0)


        def peerPressureConstants_times(self):
            return self.getTypedRuleContext(GremlinParser.PeerPressureConstants_timesContext,0)


        def peerPressureConstants_propertyName(self):
            return self.getTypedRuleContext(GremlinParser.PeerPressureConstants_propertyNameContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_peerPressureConstants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeerPressureConstants" ):
                listener.enterPeerPressureConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeerPressureConstants" ):
                listener.exitPeerPressureConstants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPeerPressureConstants" ):
                return visitor.visitPeerPressureConstants(self)
            else:
                return visitor.visitChildren(self)




    def peerPressureConstants(self):

        localctx = GremlinParser.PeerPressureConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_peerPressureConstants)
        try:
            self.state = 3109
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3106
                self.peerPressureConstants_edges()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3107
                self.peerPressureConstants_times()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3108
                self.peerPressureConstants_propertyName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShortestPathConstantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shortestPathConstants_target(self):
            return self.getTypedRuleContext(GremlinParser.ShortestPathConstants_targetContext,0)


        def shortestPathConstants_edges(self):
            return self.getTypedRuleContext(GremlinParser.ShortestPathConstants_edgesContext,0)


        def shortestPathConstants_distance(self):
            return self.getTypedRuleContext(GremlinParser.ShortestPathConstants_distanceContext,0)


        def shortestPathConstants_maxDistance(self):
            return self.getTypedRuleContext(GremlinParser.ShortestPathConstants_maxDistanceContext,0)


        def shortestPathConstants_includeEdges(self):
            return self.getTypedRuleContext(GremlinParser.ShortestPathConstants_includeEdgesContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_shortestPathConstants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShortestPathConstants" ):
                listener.enterShortestPathConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShortestPathConstants" ):
                listener.exitShortestPathConstants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShortestPathConstants" ):
                return visitor.visitShortestPathConstants(self)
            else:
                return visitor.visitChildren(self)




    def shortestPathConstants(self):

        localctx = GremlinParser.ShortestPathConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_shortestPathConstants)
        try:
            self.state = 3116
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3111
                self.shortestPathConstants_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3112
                self.shortestPathConstants_edges()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3113
                self.shortestPathConstants_distance()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3114
                self.shortestPathConstants_maxDistance()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3115
                self.shortestPathConstants_includeEdges()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithOptionsValuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withOptionsConstants_tokens(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsConstants_tokensContext,0)


        def withOptionsConstants_none(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsConstants_noneContext,0)


        def withOptionsConstants_ids(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsConstants_idsContext,0)


        def withOptionsConstants_labels(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsConstants_labelsContext,0)


        def withOptionsConstants_keys(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsConstants_keysContext,0)


        def withOptionsConstants_values(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsConstants_valuesContext,0)


        def withOptionsConstants_all(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsConstants_allContext,0)


        def withOptionsConstants_list(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsConstants_listContext,0)


        def withOptionsConstants_map(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsConstants_mapContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_withOptionsValues

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithOptionsValues" ):
                listener.enterWithOptionsValues(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithOptionsValues" ):
                listener.exitWithOptionsValues(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithOptionsValues" ):
                return visitor.visitWithOptionsValues(self)
            else:
                return visitor.visitChildren(self)




    def withOptionsValues(self):

        localctx = GremlinParser.WithOptionsValuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_withOptionsValues)
        try:
            self.state = 3127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3118
                self.withOptionsConstants_tokens()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3119
                self.withOptionsConstants_none()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3120
                self.withOptionsConstants_ids()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3121
                self.withOptionsConstants_labels()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3122
                self.withOptionsConstants_keys()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3123
                self.withOptionsConstants_values()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3124
                self.withOptionsConstants_all()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3125
                self.withOptionsConstants_list()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3126
                self.withOptionsConstants_map()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IoOptionsKeysContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ioOptionsConstants_reader(self):
            return self.getTypedRuleContext(GremlinParser.IoOptionsConstants_readerContext,0)


        def ioOptionsConstants_writer(self):
            return self.getTypedRuleContext(GremlinParser.IoOptionsConstants_writerContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_ioOptionsKeys

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIoOptionsKeys" ):
                listener.enterIoOptionsKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIoOptionsKeys" ):
                listener.exitIoOptionsKeys(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIoOptionsKeys" ):
                return visitor.visitIoOptionsKeys(self)
            else:
                return visitor.visitChildren(self)




    def ioOptionsKeys(self):

        localctx = GremlinParser.IoOptionsKeysContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_ioOptionsKeys)
        try:
            self.state = 3131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3129
                self.ioOptionsConstants_reader()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3130
                self.ioOptionsConstants_writer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IoOptionsValuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ioOptionsConstants_gryo(self):
            return self.getTypedRuleContext(GremlinParser.IoOptionsConstants_gryoContext,0)


        def ioOptionsConstants_graphson(self):
            return self.getTypedRuleContext(GremlinParser.IoOptionsConstants_graphsonContext,0)


        def ioOptionsConstants_graphml(self):
            return self.getTypedRuleContext(GremlinParser.IoOptionsConstants_graphmlContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_ioOptionsValues

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIoOptionsValues" ):
                listener.enterIoOptionsValues(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIoOptionsValues" ):
                listener.exitIoOptionsValues(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIoOptionsValues" ):
                return visitor.visitIoOptionsValues(self)
            else:
                return visitor.visitChildren(self)




    def ioOptionsValues(self):

        localctx = GremlinParser.IoOptionsValuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_ioOptionsValues)
        try:
            self.state = 3136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3133
                self.ioOptionsConstants_gryo()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3134
                self.ioOptionsConstants_graphson()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3135
                self.ioOptionsConstants_graphml()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectedComponentConstants_componentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connectedComponentStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.ConnectedComponentStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_COMPONENT(self):
            return self.getToken(GremlinParser.K_COMPONENT, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_connectedComponentConstants_component

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConnectedComponentConstants_component" ):
                listener.enterConnectedComponentConstants_component(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConnectedComponentConstants_component" ):
                listener.exitConnectedComponentConstants_component(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectedComponentConstants_component" ):
                return visitor.visitConnectedComponentConstants_component(self)
            else:
                return visitor.visitChildren(self)




    def connectedComponentConstants_component(self):

        localctx = GremlinParser.ConnectedComponentConstants_componentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_connectedComponentConstants_component)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3138
            self.connectedComponentStringConstant()
            self.state = 3139
            self.match(GremlinParser.DOT)
            self.state = 3140
            self.match(GremlinParser.K_COMPONENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectedComponentConstants_edgesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connectedComponentStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.ConnectedComponentStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_EDGES(self):
            return self.getToken(GremlinParser.K_EDGES, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_connectedComponentConstants_edges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConnectedComponentConstants_edges" ):
                listener.enterConnectedComponentConstants_edges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConnectedComponentConstants_edges" ):
                listener.exitConnectedComponentConstants_edges(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectedComponentConstants_edges" ):
                return visitor.visitConnectedComponentConstants_edges(self)
            else:
                return visitor.visitChildren(self)




    def connectedComponentConstants_edges(self):

        localctx = GremlinParser.ConnectedComponentConstants_edgesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_connectedComponentConstants_edges)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3142
            self.connectedComponentStringConstant()
            self.state = 3143
            self.match(GremlinParser.DOT)
            self.state = 3144
            self.match(GremlinParser.K_EDGES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectedComponentConstants_propertyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connectedComponentStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.ConnectedComponentStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_PROPERTYNAME(self):
            return self.getToken(GremlinParser.K_PROPERTYNAME, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_connectedComponentConstants_propertyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConnectedComponentConstants_propertyName" ):
                listener.enterConnectedComponentConstants_propertyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConnectedComponentConstants_propertyName" ):
                listener.exitConnectedComponentConstants_propertyName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectedComponentConstants_propertyName" ):
                return visitor.visitConnectedComponentConstants_propertyName(self)
            else:
                return visitor.visitChildren(self)




    def connectedComponentConstants_propertyName(self):

        localctx = GremlinParser.ConnectedComponentConstants_propertyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_connectedComponentConstants_propertyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3146
            self.connectedComponentStringConstant()
            self.state = 3147
            self.match(GremlinParser.DOT)
            self.state = 3148
            self.match(GremlinParser.K_PROPERTYNAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PageRankConstants_edgesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pageRankStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.PageRankStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_EDGES(self):
            return self.getToken(GremlinParser.K_EDGES, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_pageRankConstants_edges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPageRankConstants_edges" ):
                listener.enterPageRankConstants_edges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPageRankConstants_edges" ):
                listener.exitPageRankConstants_edges(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPageRankConstants_edges" ):
                return visitor.visitPageRankConstants_edges(self)
            else:
                return visitor.visitChildren(self)




    def pageRankConstants_edges(self):

        localctx = GremlinParser.PageRankConstants_edgesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_pageRankConstants_edges)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3150
            self.pageRankStringConstant()
            self.state = 3151
            self.match(GremlinParser.DOT)
            self.state = 3152
            self.match(GremlinParser.K_EDGES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PageRankConstants_timesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pageRankStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.PageRankStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_TIMES(self):
            return self.getToken(GremlinParser.K_TIMES, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_pageRankConstants_times

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPageRankConstants_times" ):
                listener.enterPageRankConstants_times(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPageRankConstants_times" ):
                listener.exitPageRankConstants_times(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPageRankConstants_times" ):
                return visitor.visitPageRankConstants_times(self)
            else:
                return visitor.visitChildren(self)




    def pageRankConstants_times(self):

        localctx = GremlinParser.PageRankConstants_timesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_pageRankConstants_times)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3154
            self.pageRankStringConstant()
            self.state = 3155
            self.match(GremlinParser.DOT)
            self.state = 3156
            self.match(GremlinParser.K_TIMES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PageRankConstants_propertyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pageRankStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.PageRankStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_PROPERTYNAME(self):
            return self.getToken(GremlinParser.K_PROPERTYNAME, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_pageRankConstants_propertyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPageRankConstants_propertyName" ):
                listener.enterPageRankConstants_propertyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPageRankConstants_propertyName" ):
                listener.exitPageRankConstants_propertyName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPageRankConstants_propertyName" ):
                return visitor.visitPageRankConstants_propertyName(self)
            else:
                return visitor.visitChildren(self)




    def pageRankConstants_propertyName(self):

        localctx = GremlinParser.PageRankConstants_propertyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_pageRankConstants_propertyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3158
            self.pageRankStringConstant()
            self.state = 3159
            self.match(GremlinParser.DOT)
            self.state = 3160
            self.match(GremlinParser.K_PROPERTYNAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PeerPressureConstants_edgesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def peerPressureStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.PeerPressureStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_EDGES(self):
            return self.getToken(GremlinParser.K_EDGES, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_peerPressureConstants_edges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeerPressureConstants_edges" ):
                listener.enterPeerPressureConstants_edges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeerPressureConstants_edges" ):
                listener.exitPeerPressureConstants_edges(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPeerPressureConstants_edges" ):
                return visitor.visitPeerPressureConstants_edges(self)
            else:
                return visitor.visitChildren(self)




    def peerPressureConstants_edges(self):

        localctx = GremlinParser.PeerPressureConstants_edgesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_peerPressureConstants_edges)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3162
            self.peerPressureStringConstant()
            self.state = 3163
            self.match(GremlinParser.DOT)
            self.state = 3164
            self.match(GremlinParser.K_EDGES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PeerPressureConstants_timesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def peerPressureStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.PeerPressureStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_TIMES(self):
            return self.getToken(GremlinParser.K_TIMES, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_peerPressureConstants_times

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeerPressureConstants_times" ):
                listener.enterPeerPressureConstants_times(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeerPressureConstants_times" ):
                listener.exitPeerPressureConstants_times(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPeerPressureConstants_times" ):
                return visitor.visitPeerPressureConstants_times(self)
            else:
                return visitor.visitChildren(self)




    def peerPressureConstants_times(self):

        localctx = GremlinParser.PeerPressureConstants_timesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_peerPressureConstants_times)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3166
            self.peerPressureStringConstant()
            self.state = 3167
            self.match(GremlinParser.DOT)
            self.state = 3168
            self.match(GremlinParser.K_TIMES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PeerPressureConstants_propertyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def peerPressureStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.PeerPressureStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_PROPERTYNAME(self):
            return self.getToken(GremlinParser.K_PROPERTYNAME, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_peerPressureConstants_propertyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeerPressureConstants_propertyName" ):
                listener.enterPeerPressureConstants_propertyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeerPressureConstants_propertyName" ):
                listener.exitPeerPressureConstants_propertyName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPeerPressureConstants_propertyName" ):
                return visitor.visitPeerPressureConstants_propertyName(self)
            else:
                return visitor.visitChildren(self)




    def peerPressureConstants_propertyName(self):

        localctx = GremlinParser.PeerPressureConstants_propertyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_peerPressureConstants_propertyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3170
            self.peerPressureStringConstant()
            self.state = 3171
            self.match(GremlinParser.DOT)
            self.state = 3172
            self.match(GremlinParser.K_PROPERTYNAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShortestPathConstants_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shortestPathStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.ShortestPathStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_TARGET(self):
            return self.getToken(GremlinParser.K_TARGET, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_shortestPathConstants_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShortestPathConstants_target" ):
                listener.enterShortestPathConstants_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShortestPathConstants_target" ):
                listener.exitShortestPathConstants_target(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShortestPathConstants_target" ):
                return visitor.visitShortestPathConstants_target(self)
            else:
                return visitor.visitChildren(self)




    def shortestPathConstants_target(self):

        localctx = GremlinParser.ShortestPathConstants_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_shortestPathConstants_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3174
            self.shortestPathStringConstant()
            self.state = 3175
            self.match(GremlinParser.DOT)
            self.state = 3176
            self.match(GremlinParser.K_TARGET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShortestPathConstants_edgesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shortestPathStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.ShortestPathStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_EDGES(self):
            return self.getToken(GremlinParser.K_EDGES, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_shortestPathConstants_edges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShortestPathConstants_edges" ):
                listener.enterShortestPathConstants_edges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShortestPathConstants_edges" ):
                listener.exitShortestPathConstants_edges(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShortestPathConstants_edges" ):
                return visitor.visitShortestPathConstants_edges(self)
            else:
                return visitor.visitChildren(self)




    def shortestPathConstants_edges(self):

        localctx = GremlinParser.ShortestPathConstants_edgesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_shortestPathConstants_edges)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3178
            self.shortestPathStringConstant()
            self.state = 3179
            self.match(GremlinParser.DOT)
            self.state = 3180
            self.match(GremlinParser.K_EDGES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShortestPathConstants_distanceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shortestPathStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.ShortestPathStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_DISTANCE(self):
            return self.getToken(GremlinParser.K_DISTANCE, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_shortestPathConstants_distance

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShortestPathConstants_distance" ):
                listener.enterShortestPathConstants_distance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShortestPathConstants_distance" ):
                listener.exitShortestPathConstants_distance(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShortestPathConstants_distance" ):
                return visitor.visitShortestPathConstants_distance(self)
            else:
                return visitor.visitChildren(self)




    def shortestPathConstants_distance(self):

        localctx = GremlinParser.ShortestPathConstants_distanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_shortestPathConstants_distance)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3182
            self.shortestPathStringConstant()
            self.state = 3183
            self.match(GremlinParser.DOT)
            self.state = 3184
            self.match(GremlinParser.K_DISTANCE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShortestPathConstants_maxDistanceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shortestPathStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.ShortestPathStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_MAXDISTANCE(self):
            return self.getToken(GremlinParser.K_MAXDISTANCE, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_shortestPathConstants_maxDistance

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShortestPathConstants_maxDistance" ):
                listener.enterShortestPathConstants_maxDistance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShortestPathConstants_maxDistance" ):
                listener.exitShortestPathConstants_maxDistance(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShortestPathConstants_maxDistance" ):
                return visitor.visitShortestPathConstants_maxDistance(self)
            else:
                return visitor.visitChildren(self)




    def shortestPathConstants_maxDistance(self):

        localctx = GremlinParser.ShortestPathConstants_maxDistanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_shortestPathConstants_maxDistance)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3186
            self.shortestPathStringConstant()
            self.state = 3187
            self.match(GremlinParser.DOT)
            self.state = 3188
            self.match(GremlinParser.K_MAXDISTANCE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShortestPathConstants_includeEdgesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shortestPathStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.ShortestPathStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_INCLUDEEDGES(self):
            return self.getToken(GremlinParser.K_INCLUDEEDGES, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_shortestPathConstants_includeEdges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShortestPathConstants_includeEdges" ):
                listener.enterShortestPathConstants_includeEdges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShortestPathConstants_includeEdges" ):
                listener.exitShortestPathConstants_includeEdges(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShortestPathConstants_includeEdges" ):
                return visitor.visitShortestPathConstants_includeEdges(self)
            else:
                return visitor.visitChildren(self)




    def shortestPathConstants_includeEdges(self):

        localctx = GremlinParser.ShortestPathConstants_includeEdgesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_shortestPathConstants_includeEdges)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3190
            self.shortestPathStringConstant()
            self.state = 3191
            self.match(GremlinParser.DOT)
            self.state = 3192
            self.match(GremlinParser.K_INCLUDEEDGES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithOptionsConstants_tokensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withOptionsStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_TOKENS(self):
            return self.getToken(GremlinParser.K_TOKENS, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_withOptionsConstants_tokens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithOptionsConstants_tokens" ):
                listener.enterWithOptionsConstants_tokens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithOptionsConstants_tokens" ):
                listener.exitWithOptionsConstants_tokens(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithOptionsConstants_tokens" ):
                return visitor.visitWithOptionsConstants_tokens(self)
            else:
                return visitor.visitChildren(self)




    def withOptionsConstants_tokens(self):

        localctx = GremlinParser.WithOptionsConstants_tokensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_withOptionsConstants_tokens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3194
            self.withOptionsStringConstant()
            self.state = 3195
            self.match(GremlinParser.DOT)
            self.state = 3196
            self.match(GremlinParser.K_TOKENS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithOptionsConstants_noneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withOptionsStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_NONE(self):
            return self.getToken(GremlinParser.K_NONE, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_withOptionsConstants_none

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithOptionsConstants_none" ):
                listener.enterWithOptionsConstants_none(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithOptionsConstants_none" ):
                listener.exitWithOptionsConstants_none(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithOptionsConstants_none" ):
                return visitor.visitWithOptionsConstants_none(self)
            else:
                return visitor.visitChildren(self)




    def withOptionsConstants_none(self):

        localctx = GremlinParser.WithOptionsConstants_noneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_withOptionsConstants_none)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3198
            self.withOptionsStringConstant()
            self.state = 3199
            self.match(GremlinParser.DOT)
            self.state = 3200
            self.match(GremlinParser.K_NONE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithOptionsConstants_idsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withOptionsStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_IDS(self):
            return self.getToken(GremlinParser.K_IDS, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_withOptionsConstants_ids

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithOptionsConstants_ids" ):
                listener.enterWithOptionsConstants_ids(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithOptionsConstants_ids" ):
                listener.exitWithOptionsConstants_ids(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithOptionsConstants_ids" ):
                return visitor.visitWithOptionsConstants_ids(self)
            else:
                return visitor.visitChildren(self)




    def withOptionsConstants_ids(self):

        localctx = GremlinParser.WithOptionsConstants_idsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_withOptionsConstants_ids)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3202
            self.withOptionsStringConstant()
            self.state = 3203
            self.match(GremlinParser.DOT)
            self.state = 3204
            self.match(GremlinParser.K_IDS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithOptionsConstants_labelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withOptionsStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_LABELS(self):
            return self.getToken(GremlinParser.K_LABELS, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_withOptionsConstants_labels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithOptionsConstants_labels" ):
                listener.enterWithOptionsConstants_labels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithOptionsConstants_labels" ):
                listener.exitWithOptionsConstants_labels(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithOptionsConstants_labels" ):
                return visitor.visitWithOptionsConstants_labels(self)
            else:
                return visitor.visitChildren(self)




    def withOptionsConstants_labels(self):

        localctx = GremlinParser.WithOptionsConstants_labelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_withOptionsConstants_labels)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3206
            self.withOptionsStringConstant()
            self.state = 3207
            self.match(GremlinParser.DOT)
            self.state = 3208
            self.match(GremlinParser.K_LABELS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithOptionsConstants_keysContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withOptionsStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_KEYS(self):
            return self.getToken(GremlinParser.K_KEYS, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_withOptionsConstants_keys

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithOptionsConstants_keys" ):
                listener.enterWithOptionsConstants_keys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithOptionsConstants_keys" ):
                listener.exitWithOptionsConstants_keys(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithOptionsConstants_keys" ):
                return visitor.visitWithOptionsConstants_keys(self)
            else:
                return visitor.visitChildren(self)




    def withOptionsConstants_keys(self):

        localctx = GremlinParser.WithOptionsConstants_keysContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_withOptionsConstants_keys)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3210
            self.withOptionsStringConstant()
            self.state = 3211
            self.match(GremlinParser.DOT)
            self.state = 3212
            self.match(GremlinParser.K_KEYS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithOptionsConstants_valuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withOptionsStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_VALUES(self):
            return self.getToken(GremlinParser.K_VALUES, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_withOptionsConstants_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithOptionsConstants_values" ):
                listener.enterWithOptionsConstants_values(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithOptionsConstants_values" ):
                listener.exitWithOptionsConstants_values(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithOptionsConstants_values" ):
                return visitor.visitWithOptionsConstants_values(self)
            else:
                return visitor.visitChildren(self)




    def withOptionsConstants_values(self):

        localctx = GremlinParser.WithOptionsConstants_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_withOptionsConstants_values)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3214
            self.withOptionsStringConstant()
            self.state = 3215
            self.match(GremlinParser.DOT)
            self.state = 3216
            self.match(GremlinParser.K_VALUES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithOptionsConstants_allContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withOptionsStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_ALL(self):
            return self.getToken(GremlinParser.K_ALL, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_withOptionsConstants_all

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithOptionsConstants_all" ):
                listener.enterWithOptionsConstants_all(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithOptionsConstants_all" ):
                listener.exitWithOptionsConstants_all(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithOptionsConstants_all" ):
                return visitor.visitWithOptionsConstants_all(self)
            else:
                return visitor.visitChildren(self)




    def withOptionsConstants_all(self):

        localctx = GremlinParser.WithOptionsConstants_allContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_withOptionsConstants_all)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3218
            self.withOptionsStringConstant()
            self.state = 3219
            self.match(GremlinParser.DOT)
            self.state = 3220
            self.match(GremlinParser.K_ALL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithOptionsConstants_indexerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withOptionsStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_INDEXER(self):
            return self.getToken(GremlinParser.K_INDEXER, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_withOptionsConstants_indexer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithOptionsConstants_indexer" ):
                listener.enterWithOptionsConstants_indexer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithOptionsConstants_indexer" ):
                listener.exitWithOptionsConstants_indexer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithOptionsConstants_indexer" ):
                return visitor.visitWithOptionsConstants_indexer(self)
            else:
                return visitor.visitChildren(self)




    def withOptionsConstants_indexer(self):

        localctx = GremlinParser.WithOptionsConstants_indexerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_withOptionsConstants_indexer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3222
            self.withOptionsStringConstant()
            self.state = 3223
            self.match(GremlinParser.DOT)
            self.state = 3224
            self.match(GremlinParser.K_INDEXER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithOptionsConstants_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withOptionsStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_LIST(self):
            return self.getToken(GremlinParser.K_LIST, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_withOptionsConstants_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithOptionsConstants_list" ):
                listener.enterWithOptionsConstants_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithOptionsConstants_list" ):
                listener.exitWithOptionsConstants_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithOptionsConstants_list" ):
                return visitor.visitWithOptionsConstants_list(self)
            else:
                return visitor.visitChildren(self)




    def withOptionsConstants_list(self):

        localctx = GremlinParser.WithOptionsConstants_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_withOptionsConstants_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3226
            self.withOptionsStringConstant()
            self.state = 3227
            self.match(GremlinParser.DOT)
            self.state = 3228
            self.match(GremlinParser.K_LIST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithOptionsConstants_mapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withOptionsStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.WithOptionsStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_MAP(self):
            return self.getToken(GremlinParser.K_MAP, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_withOptionsConstants_map

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithOptionsConstants_map" ):
                listener.enterWithOptionsConstants_map(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithOptionsConstants_map" ):
                listener.exitWithOptionsConstants_map(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithOptionsConstants_map" ):
                return visitor.visitWithOptionsConstants_map(self)
            else:
                return visitor.visitChildren(self)




    def withOptionsConstants_map(self):

        localctx = GremlinParser.WithOptionsConstants_mapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_withOptionsConstants_map)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3230
            self.withOptionsStringConstant()
            self.state = 3231
            self.match(GremlinParser.DOT)
            self.state = 3232
            self.match(GremlinParser.K_MAP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IoOptionsConstants_readerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ioOptionsStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.IoOptionsStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_READER(self):
            return self.getToken(GremlinParser.K_READER, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_ioOptionsConstants_reader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIoOptionsConstants_reader" ):
                listener.enterIoOptionsConstants_reader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIoOptionsConstants_reader" ):
                listener.exitIoOptionsConstants_reader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIoOptionsConstants_reader" ):
                return visitor.visitIoOptionsConstants_reader(self)
            else:
                return visitor.visitChildren(self)




    def ioOptionsConstants_reader(self):

        localctx = GremlinParser.IoOptionsConstants_readerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_ioOptionsConstants_reader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3234
            self.ioOptionsStringConstant()
            self.state = 3235
            self.match(GremlinParser.DOT)
            self.state = 3236
            self.match(GremlinParser.K_READER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IoOptionsConstants_writerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ioOptionsStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.IoOptionsStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_WRITER(self):
            return self.getToken(GremlinParser.K_WRITER, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_ioOptionsConstants_writer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIoOptionsConstants_writer" ):
                listener.enterIoOptionsConstants_writer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIoOptionsConstants_writer" ):
                listener.exitIoOptionsConstants_writer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIoOptionsConstants_writer" ):
                return visitor.visitIoOptionsConstants_writer(self)
            else:
                return visitor.visitChildren(self)




    def ioOptionsConstants_writer(self):

        localctx = GremlinParser.IoOptionsConstants_writerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_ioOptionsConstants_writer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3238
            self.ioOptionsStringConstant()
            self.state = 3239
            self.match(GremlinParser.DOT)
            self.state = 3240
            self.match(GremlinParser.K_WRITER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IoOptionsConstants_gryoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ioOptionsStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.IoOptionsStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_GRYO(self):
            return self.getToken(GremlinParser.K_GRYO, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_ioOptionsConstants_gryo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIoOptionsConstants_gryo" ):
                listener.enterIoOptionsConstants_gryo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIoOptionsConstants_gryo" ):
                listener.exitIoOptionsConstants_gryo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIoOptionsConstants_gryo" ):
                return visitor.visitIoOptionsConstants_gryo(self)
            else:
                return visitor.visitChildren(self)




    def ioOptionsConstants_gryo(self):

        localctx = GremlinParser.IoOptionsConstants_gryoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_ioOptionsConstants_gryo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3242
            self.ioOptionsStringConstant()
            self.state = 3243
            self.match(GremlinParser.DOT)
            self.state = 3244
            self.match(GremlinParser.K_GRYO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IoOptionsConstants_graphsonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ioOptionsStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.IoOptionsStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_GRAPHSON(self):
            return self.getToken(GremlinParser.K_GRAPHSON, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_ioOptionsConstants_graphson

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIoOptionsConstants_graphson" ):
                listener.enterIoOptionsConstants_graphson(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIoOptionsConstants_graphson" ):
                listener.exitIoOptionsConstants_graphson(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIoOptionsConstants_graphson" ):
                return visitor.visitIoOptionsConstants_graphson(self)
            else:
                return visitor.visitChildren(self)




    def ioOptionsConstants_graphson(self):

        localctx = GremlinParser.IoOptionsConstants_graphsonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_ioOptionsConstants_graphson)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3246
            self.ioOptionsStringConstant()
            self.state = 3247
            self.match(GremlinParser.DOT)
            self.state = 3248
            self.match(GremlinParser.K_GRAPHSON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IoOptionsConstants_graphmlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ioOptionsStringConstant(self):
            return self.getTypedRuleContext(GremlinParser.IoOptionsStringConstantContext,0)


        def DOT(self):
            return self.getToken(GremlinParser.DOT, 0)

        def K_GRAPHML(self):
            return self.getToken(GremlinParser.K_GRAPHML, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_ioOptionsConstants_graphml

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIoOptionsConstants_graphml" ):
                listener.enterIoOptionsConstants_graphml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIoOptionsConstants_graphml" ):
                listener.exitIoOptionsConstants_graphml(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIoOptionsConstants_graphml" ):
                return visitor.visitIoOptionsConstants_graphml(self)
            else:
                return visitor.visitChildren(self)




    def ioOptionsConstants_graphml(self):

        localctx = GremlinParser.IoOptionsConstants_graphmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_ioOptionsConstants_graphml)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3250
            self.ioOptionsStringConstant()
            self.state = 3251
            self.match(GremlinParser.DOT)
            self.state = 3252
            self.match(GremlinParser.K_GRAPHML)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectedComponentStringConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CONNECTEDCOMPONENTU(self):
            return self.getToken(GremlinParser.K_CONNECTEDCOMPONENTU, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_connectedComponentStringConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConnectedComponentStringConstant" ):
                listener.enterConnectedComponentStringConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConnectedComponentStringConstant" ):
                listener.exitConnectedComponentStringConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectedComponentStringConstant" ):
                return visitor.visitConnectedComponentStringConstant(self)
            else:
                return visitor.visitChildren(self)




    def connectedComponentStringConstant(self):

        localctx = GremlinParser.ConnectedComponentStringConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_connectedComponentStringConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3254
            self.match(GremlinParser.K_CONNECTEDCOMPONENTU)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PageRankStringConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PAGERANKU(self):
            return self.getToken(GremlinParser.K_PAGERANKU, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_pageRankStringConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPageRankStringConstant" ):
                listener.enterPageRankStringConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPageRankStringConstant" ):
                listener.exitPageRankStringConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPageRankStringConstant" ):
                return visitor.visitPageRankStringConstant(self)
            else:
                return visitor.visitChildren(self)




    def pageRankStringConstant(self):

        localctx = GremlinParser.PageRankStringConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_pageRankStringConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3256
            self.match(GremlinParser.K_PAGERANKU)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PeerPressureStringConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PEERPRESSUREU(self):
            return self.getToken(GremlinParser.K_PEERPRESSUREU, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_peerPressureStringConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeerPressureStringConstant" ):
                listener.enterPeerPressureStringConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeerPressureStringConstant" ):
                listener.exitPeerPressureStringConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPeerPressureStringConstant" ):
                return visitor.visitPeerPressureStringConstant(self)
            else:
                return visitor.visitChildren(self)




    def peerPressureStringConstant(self):

        localctx = GremlinParser.PeerPressureStringConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_peerPressureStringConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3258
            self.match(GremlinParser.K_PEERPRESSUREU)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShortestPathStringConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SHORTESTPATHU(self):
            return self.getToken(GremlinParser.K_SHORTESTPATHU, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_shortestPathStringConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShortestPathStringConstant" ):
                listener.enterShortestPathStringConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShortestPathStringConstant" ):
                listener.exitShortestPathStringConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShortestPathStringConstant" ):
                return visitor.visitShortestPathStringConstant(self)
            else:
                return visitor.visitChildren(self)




    def shortestPathStringConstant(self):

        localctx = GremlinParser.ShortestPathStringConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_shortestPathStringConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3260
            self.match(GremlinParser.K_SHORTESTPATHU)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithOptionsStringConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_WITHOPTOPTIONS(self):
            return self.getToken(GremlinParser.K_WITHOPTOPTIONS, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_withOptionsStringConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithOptionsStringConstant" ):
                listener.enterWithOptionsStringConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithOptionsStringConstant" ):
                listener.exitWithOptionsStringConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithOptionsStringConstant" ):
                return visitor.visitWithOptionsStringConstant(self)
            else:
                return visitor.visitChildren(self)




    def withOptionsStringConstant(self):

        localctx = GremlinParser.WithOptionsStringConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_withOptionsStringConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3262
            self.match(GremlinParser.K_WITHOPTOPTIONS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IoOptionsStringConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_IOU(self):
            return self.getToken(GremlinParser.K_IOU, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_ioOptionsStringConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIoOptionsStringConstant" ):
                listener.enterIoOptionsStringConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIoOptionsStringConstant" ):
                listener.exitIoOptionsStringConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIoOptionsStringConstant" ):
                return visitor.visitIoOptionsStringConstant(self)
            else:
                return visitor.visitChildren(self)




    def ioOptionsStringConstant(self):

        localctx = GremlinParser.IoOptionsStringConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_ioOptionsStringConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3264
            self.match(GremlinParser.K_IOU)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanLiteral(self):
            return self.getTypedRuleContext(GremlinParser.BooleanLiteralContext,0)


        def variable(self):
            return self.getTypedRuleContext(GremlinParser.VariableContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_booleanArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanArgument" ):
                listener.enterBooleanArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanArgument" ):
                listener.exitBooleanArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanArgument" ):
                return visitor.visitBooleanArgument(self)
            else:
                return visitor.visitChildren(self)




    def booleanArgument(self):

        localctx = GremlinParser.BooleanArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_booleanArgument)
        try:
            self.state = 3268
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66, 226]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3266
                self.booleanLiteral()
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3267
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(GremlinParser.IntegerLiteralContext,0)


        def variable(self):
            return self.getTypedRuleContext(GremlinParser.VariableContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_integerArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerArgument" ):
                listener.enterIntegerArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerArgument" ):
                listener.exitIntegerArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerArgument" ):
                return visitor.visitIntegerArgument(self)
            else:
                return visitor.visitChildren(self)




    def integerArgument(self):

        localctx = GremlinParser.IntegerArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_integerArgument)
        try:
            self.state = 3272
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [251]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3270
                self.integerLiteral()
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3271
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floatLiteral(self):
            return self.getTypedRuleContext(GremlinParser.FloatLiteralContext,0)


        def variable(self):
            return self.getTypedRuleContext(GremlinParser.VariableContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_floatArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatArgument" ):
                listener.enterFloatArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatArgument" ):
                listener.exitFloatArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatArgument" ):
                return visitor.visitFloatArgument(self)
            else:
                return visitor.visitChildren(self)




    def floatArgument(self):

        localctx = GremlinParser.FloatArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_floatArgument)
        try:
            self.state = 3276
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [99, 136, 252, 253]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3274
                self.floatLiteral()
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3275
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)


        def variable(self):
            return self.getTypedRuleContext(GremlinParser.VariableContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_stringArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringArgument" ):
                listener.enterStringArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringArgument" ):
                listener.exitStringArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringArgument" ):
                return visitor.visitStringArgument(self)
            else:
                return visitor.visitChildren(self)




    def stringArgument(self):

        localctx = GremlinParser.StringArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_stringArgument)
        try:
            self.state = 3280
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [254, 255]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3278
                self.stringLiteral()
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3279
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringNullableArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringNullableLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringNullableLiteralContext,0)


        def variable(self):
            return self.getTypedRuleContext(GremlinParser.VariableContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_stringNullableArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringNullableArgument" ):
                listener.enterStringNullableArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringNullableArgument" ):
                listener.exitStringNullableArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringNullableArgument" ):
                return visitor.visitStringNullableArgument(self)
            else:
                return visitor.visitChildren(self)




    def stringNullableArgument(self):

        localctx = GremlinParser.StringNullableArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_stringNullableArgument)
        try:
            self.state = 3284
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [148, 254, 255]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3282
                self.stringNullableLiteral()
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3283
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringNullableArgumentVarargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringNullableArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.StringNullableArgumentContext)
            else:
                return self.getTypedRuleContext(GremlinParser.StringNullableArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)

        def getRuleIndex(self):
            return GremlinParser.RULE_stringNullableArgumentVarargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringNullableArgumentVarargs" ):
                listener.enterStringNullableArgumentVarargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringNullableArgumentVarargs" ):
                listener.exitStringNullableArgumentVarargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringNullableArgumentVarargs" ):
                return visitor.visitStringNullableArgumentVarargs(self)
            else:
                return visitor.visitChildren(self)




    def stringNullableArgumentVarargs(self):

        localctx = GremlinParser.StringNullableArgumentVarargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_stringNullableArgumentVarargs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148 or ((((_la - 254)) & ~0x3f) == 0 and ((1 << (_la - 254)) & 65539) != 0):
                self.state = 3286
                self.stringNullableArgument()
                self.state = 3291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==263:
                    self.state = 3287
                    self.match(GremlinParser.COMMA)
                    self.state = 3288
                    self.stringNullableArgument()
                    self.state = 3293
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dateLiteral(self):
            return self.getTypedRuleContext(GremlinParser.DateLiteralContext,0)


        def variable(self):
            return self.getTypedRuleContext(GremlinParser.VariableContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_dateArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateArgument" ):
                listener.enterDateArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateArgument" ):
                listener.exitDateArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateArgument" ):
                return visitor.visitDateArgument(self)
            else:
                return visitor.visitChildren(self)




    def dateArgument(self):

        localctx = GremlinParser.DateArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_dateArgument)
        try:
            self.state = 3298
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45, 46]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3296
                self.dateLiteral()
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3297
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericLiteral(self):
            return self.getTypedRuleContext(GremlinParser.GenericLiteralContext,0)


        def variable(self):
            return self.getTypedRuleContext(GremlinParser.VariableContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_genericArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericArgument" ):
                listener.enterGenericArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericArgument" ):
                listener.exitGenericArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericArgument" ):
                return visitor.visitGenericArgument(self)
            else:
                return visitor.visitChildren(self)




    def genericArgument(self):

        localctx = GremlinParser.GenericArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_genericArgument)
        try:
            self.state = 3302
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 55, 56, 57, 59, 60, 61, 65, 66, 67, 69, 70, 71, 72, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 92, 93, 94, 98, 99, 100, 102, 103, 106, 108, 111, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 136, 139, 144, 146, 148, 149, 150, 152, 153, 155, 156, 157, 158, 159, 160, 162, 165, 166, 168, 169, 171, 172, 173, 174, 176, 177, 178, 179, 181, 183, 184, 185, 187, 188, 189, 191, 192, 193, 195, 197, 198, 199, 200, 201, 203, 204, 205, 206, 208, 209, 212, 213, 214, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 249, 251, 252, 253, 254, 255, 258, 260, 266, 267]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3300
                self.genericLiteral()
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3301
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericArgumentVarargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.GenericArgumentContext)
            else:
                return self.getTypedRuleContext(GremlinParser.GenericArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)

        def getRuleIndex(self):
            return GremlinParser.RULE_genericArgumentVarargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericArgumentVarargs" ):
                listener.enterGenericArgumentVarargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericArgumentVarargs" ):
                listener.exitGenericArgumentVarargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericArgumentVarargs" ):
                return visitor.visitGenericArgumentVarargs(self)
            else:
                return visitor.visitChildren(self)




    def genericArgumentVarargs(self):

        localctx = GremlinParser.GenericArgumentVarargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_genericArgumentVarargs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4295729655916026874) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -1180142740035378953) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -2461290094875999089) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9007339940458642933) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 4869) != 0):
                self.state = 3304
                self.genericArgument()
                self.state = 3309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==263:
                    self.state = 3305
                    self.match(GremlinParser.COMMA)
                    self.state = 3306
                    self.genericArgument()
                    self.state = 3311
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericMapArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericMapLiteral(self):
            return self.getTypedRuleContext(GremlinParser.GenericMapLiteralContext,0)


        def variable(self):
            return self.getTypedRuleContext(GremlinParser.VariableContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_genericMapArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericMapArgument" ):
                listener.enterGenericMapArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericMapArgument" ):
                listener.exitGenericMapArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericMapArgument" ):
                return visitor.visitGenericMapArgument(self)
            else:
                return visitor.visitChildren(self)




    def genericMapArgument(self):

        localctx = GremlinParser.GenericMapArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_genericMapArgument)
        try:
            self.state = 3316
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [260]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3314
                self.genericMapLiteral()
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3315
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericMapNullableArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericMapNullableLiteral(self):
            return self.getTypedRuleContext(GremlinParser.GenericMapNullableLiteralContext,0)


        def variable(self):
            return self.getTypedRuleContext(GremlinParser.VariableContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_genericMapNullableArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericMapNullableArgument" ):
                listener.enterGenericMapNullableArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericMapNullableArgument" ):
                listener.exitGenericMapNullableArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericMapNullableArgument" ):
                return visitor.visitGenericMapNullableArgument(self)
            else:
                return visitor.visitChildren(self)




    def genericMapNullableArgument(self):

        localctx = GremlinParser.GenericMapNullableArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_genericMapNullableArgument)
        try:
            self.state = 3320
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [148, 260]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3318
                self.genericMapNullableLiteral()
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3319
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullableGenericLiteralMapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericMapLiteral(self):
            return self.getTypedRuleContext(GremlinParser.GenericMapLiteralContext,0)


        def nullLiteral(self):
            return self.getTypedRuleContext(GremlinParser.NullLiteralContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_nullableGenericLiteralMap

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullableGenericLiteralMap" ):
                listener.enterNullableGenericLiteralMap(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullableGenericLiteralMap" ):
                listener.exitNullableGenericLiteralMap(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullableGenericLiteralMap" ):
                return visitor.visitNullableGenericLiteralMap(self)
            else:
                return visitor.visitChildren(self)




    def nullableGenericLiteralMap(self):

        localctx = GremlinParser.NullableGenericLiteralMapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_nullableGenericLiteralMap)
        try:
            self.state = 3324
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [260]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3322
                self.genericMapLiteral()
                pass
            elif token in [148]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3323
                self.nullLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructureVertexArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structureVertexLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StructureVertexLiteralContext,0)


        def variable(self):
            return self.getTypedRuleContext(GremlinParser.VariableContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_structureVertexArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructureVertexArgument" ):
                listener.enterStructureVertexArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructureVertexArgument" ):
                listener.exitStructureVertexArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructureVertexArgument" ):
                return visitor.visitStructureVertexArgument(self)
            else:
                return visitor.visitChildren(self)




    def structureVertexArgument(self):

        localctx = GremlinParser.StructureVertexArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_structureVertexArgument)
        try:
            self.state = 3328
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [146, 181, 237]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3326
                self.structureVertexLiteral()
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3327
                self.variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalStrategyVarargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traversalStrategyExpr(self):
            return self.getTypedRuleContext(GremlinParser.TraversalStrategyExprContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_traversalStrategyVarargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalStrategyVarargs" ):
                listener.enterTraversalStrategyVarargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalStrategyVarargs" ):
                listener.exitTraversalStrategyVarargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalStrategyVarargs" ):
                return visitor.visitTraversalStrategyVarargs(self)
            else:
                return visitor.visitChildren(self)




    def traversalStrategyVarargs(self):

        localctx = GremlinParser.TraversalStrategyVarargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_traversalStrategyVarargs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146 or _la==270:
                self.state = 3330
                self.traversalStrategyExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraversalStrategyExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traversalStrategy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.TraversalStrategyContext)
            else:
                return self.getTypedRuleContext(GremlinParser.TraversalStrategyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)

        def getRuleIndex(self):
            return GremlinParser.RULE_traversalStrategyExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraversalStrategyExpr" ):
                listener.enterTraversalStrategyExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraversalStrategyExpr" ):
                listener.exitTraversalStrategyExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraversalStrategyExpr" ):
                return visitor.visitTraversalStrategyExpr(self)
            else:
                return visitor.visitChildren(self)




    def traversalStrategyExpr(self):

        localctx = GremlinParser.TraversalStrategyExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_traversalStrategyExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3333
            self.traversalStrategy()
            self.state = 3338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==263:
                self.state = 3334
                self.match(GremlinParser.COMMA)
                self.state = 3335
                self.traversalStrategy()
                self.state = 3340
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classTypeExpr(self):
            return self.getTypedRuleContext(GremlinParser.ClassTypeExprContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_classTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassTypeList" ):
                listener.enterClassTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassTypeList" ):
                listener.exitClassTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassTypeList" ):
                return visitor.visitClassTypeList(self)
            else:
                return visitor.visitChildren(self)




    def classTypeList(self):

        localctx = GremlinParser.ClassTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_classTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==270:
                self.state = 3341
                self.classTypeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.ClassTypeContext)
            else:
                return self.getTypedRuleContext(GremlinParser.ClassTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)

        def getRuleIndex(self):
            return GremlinParser.RULE_classTypeExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassTypeExpr" ):
                listener.enterClassTypeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassTypeExpr" ):
                listener.exitClassTypeExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassTypeExpr" ):
                return visitor.visitClassTypeExpr(self)
            else:
                return visitor.visitChildren(self)




    def classTypeExpr(self):

        localctx = GremlinParser.ClassTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_classTypeExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3344
            self.classType()
            self.state = 3349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==263:
                self.state = 3345
                self.match(GremlinParser.COMMA)
                self.state = 3346
                self.classType()
                self.state = 3351
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedTraversalListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedTraversalExpr(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalExprContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_nestedTraversalList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedTraversalList" ):
                listener.enterNestedTraversalList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedTraversalList" ):
                listener.exitNestedTraversalList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedTraversalList" ):
                return visitor.visitNestedTraversalList(self)
            else:
                return visitor.visitChildren(self)




    def nestedTraversalList(self):

        localctx = GremlinParser.NestedTraversalListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_nestedTraversalList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4221310310834002938) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -5792954675826302731) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -7077480812983057401) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & 18045032305938285) != 0) or _la==267:
                self.state = 3352
                self.nestedTraversalExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedTraversalExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedTraversal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.NestedTraversalContext)
            else:
                return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)

        def getRuleIndex(self):
            return GremlinParser.RULE_nestedTraversalExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedTraversalExpr" ):
                listener.enterNestedTraversalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedTraversalExpr" ):
                listener.exitNestedTraversalExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedTraversalExpr" ):
                return visitor.visitNestedTraversalExpr(self)
            else:
                return visitor.visitChildren(self)




    def nestedTraversalExpr(self):

        localctx = GremlinParser.NestedTraversalExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_nestedTraversalExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3355
            self.nestedTraversal()
            self.state = 3360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==263:
                self.state = 3356
                self.match(GremlinParser.COMMA)
                self.state = 3357
                self.nestedTraversal()
                self.state = 3362
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericCollectionLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(GremlinParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(GremlinParser.RBRACK, 0)

        def genericLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.GenericLiteralContext)
            else:
                return self.getTypedRuleContext(GremlinParser.GenericLiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)

        def getRuleIndex(self):
            return GremlinParser.RULE_genericCollectionLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericCollectionLiteral" ):
                listener.enterGenericCollectionLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericCollectionLiteral" ):
                listener.exitGenericCollectionLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericCollectionLiteral" ):
                return visitor.visitGenericCollectionLiteral(self)
            else:
                return visitor.visitChildren(self)




    def genericCollectionLiteral(self):

        localctx = GremlinParser.GenericCollectionLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_genericCollectionLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3363
            self.match(GremlinParser.LBRACK)
            self.state = 3372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4295729655916026874) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -1180142740035378953) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -2461290094875999089) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9007339940458642933) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 773) != 0):
                self.state = 3364
                self.genericLiteral()
                self.state = 3369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==263:
                    self.state = 3365
                    self.match(GremlinParser.COMMA)
                    self.state = 3366
                    self.genericLiteral()
                    self.state = 3371
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3374
            self.match(GremlinParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericLiteralVarargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericLiteralExpr(self):
            return self.getTypedRuleContext(GremlinParser.GenericLiteralExprContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_genericLiteralVarargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericLiteralVarargs" ):
                listener.enterGenericLiteralVarargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericLiteralVarargs" ):
                listener.exitGenericLiteralVarargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericLiteralVarargs" ):
                return visitor.visitGenericLiteralVarargs(self)
            else:
                return visitor.visitChildren(self)




    def genericLiteralVarargs(self):

        localctx = GremlinParser.GenericLiteralVarargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_genericLiteralVarargs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4295729655916026874) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -1180142740035378953) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -2461290094875999089) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9007339940458642933) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 773) != 0):
                self.state = 3376
                self.genericLiteralExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericLiteralExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.GenericLiteralContext)
            else:
                return self.getTypedRuleContext(GremlinParser.GenericLiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)

        def getRuleIndex(self):
            return GremlinParser.RULE_genericLiteralExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericLiteralExpr" ):
                listener.enterGenericLiteralExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericLiteralExpr" ):
                listener.exitGenericLiteralExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericLiteralExpr" ):
                return visitor.visitGenericLiteralExpr(self)
            else:
                return visitor.visitChildren(self)




    def genericLiteralExpr(self):

        localctx = GremlinParser.GenericLiteralExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_genericLiteralExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3379
            self.genericLiteral()
            self.state = 3384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==263:
                self.state = 3380
                self.match(GremlinParser.COMMA)
                self.state = 3381
                self.genericLiteral()
                self.state = 3386
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericMapNullableLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericMapLiteral(self):
            return self.getTypedRuleContext(GremlinParser.GenericMapLiteralContext,0)


        def nullLiteral(self):
            return self.getTypedRuleContext(GremlinParser.NullLiteralContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_genericMapNullableLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericMapNullableLiteral" ):
                listener.enterGenericMapNullableLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericMapNullableLiteral" ):
                listener.exitGenericMapNullableLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericMapNullableLiteral" ):
                return visitor.visitGenericMapNullableLiteral(self)
            else:
                return visitor.visitChildren(self)




    def genericMapNullableLiteral(self):

        localctx = GremlinParser.GenericMapNullableLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_genericMapNullableLiteral)
        try:
            self.state = 3389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [260]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3387
                self.genericMapLiteral()
                pass
            elif token in [148]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3388
                self.nullLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericRangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(GremlinParser.IntegerLiteralContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.DOT)
            else:
                return self.getToken(GremlinParser.DOT, i)

        def stringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(GremlinParser.StringLiteralContext,i)


        def getRuleIndex(self):
            return GremlinParser.RULE_genericRangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericRangeLiteral" ):
                listener.enterGenericRangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericRangeLiteral" ):
                listener.exitGenericRangeLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericRangeLiteral" ):
                return visitor.visitGenericRangeLiteral(self)
            else:
                return visitor.visitChildren(self)




    def genericRangeLiteral(self):

        localctx = GremlinParser.GenericRangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_genericRangeLiteral)
        try:
            self.state = 3401
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [251]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3391
                self.integerLiteral()
                self.state = 3392
                self.match(GremlinParser.DOT)
                self.state = 3393
                self.match(GremlinParser.DOT)
                self.state = 3394
                self.integerLiteral()
                pass
            elif token in [254, 255]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3396
                self.stringLiteral()
                self.state = 3397
                self.match(GremlinParser.DOT)
                self.state = 3398
                self.match(GremlinParser.DOT)
                self.state = 3399
                self.stringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericSetLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(GremlinParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(GremlinParser.RBRACE, 0)

        def genericLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.GenericLiteralContext)
            else:
                return self.getTypedRuleContext(GremlinParser.GenericLiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)

        def getRuleIndex(self):
            return GremlinParser.RULE_genericSetLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericSetLiteral" ):
                listener.enterGenericSetLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericSetLiteral" ):
                listener.exitGenericSetLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericSetLiteral" ):
                return visitor.visitGenericSetLiteral(self)
            else:
                return visitor.visitChildren(self)




    def genericSetLiteral(self):

        localctx = GremlinParser.GenericSetLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_genericSetLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3403
            self.match(GremlinParser.LBRACE)
            self.state = 3412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4295729655916026874) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -1180142740035378953) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -2461290094875999089) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 9007339940458642933) != 0) or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 773) != 0):
                self.state = 3404
                self.genericLiteral()
                self.state = 3409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==263:
                    self.state = 3405
                    self.match(GremlinParser.COMMA)
                    self.state = 3406
                    self.genericLiteral()
                    self.state = 3411
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3414
            self.match(GremlinParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringNullableLiteralVarargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringNullableLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.StringNullableLiteralContext)
            else:
                return self.getTypedRuleContext(GremlinParser.StringNullableLiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)

        def getRuleIndex(self):
            return GremlinParser.RULE_stringNullableLiteralVarargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringNullableLiteralVarargs" ):
                listener.enterStringNullableLiteralVarargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringNullableLiteralVarargs" ):
                listener.exitStringNullableLiteralVarargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringNullableLiteralVarargs" ):
                return visitor.visitStringNullableLiteralVarargs(self)
            else:
                return visitor.visitChildren(self)




    def stringNullableLiteralVarargs(self):

        localctx = GremlinParser.StringNullableLiteralVarargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_stringNullableLiteralVarargs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148 or _la==254 or _la==255:
                self.state = 3416
                self.stringNullableLiteral()
                self.state = 3421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==263:
                    self.state = 3417
                    self.match(GremlinParser.COMMA)
                    self.state = 3418
                    self.stringNullableLiteral()
                    self.state = 3423
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericLiteral(self):
            return self.getTypedRuleContext(GremlinParser.NumericLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(GremlinParser.BooleanLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)


        def dateLiteral(self):
            return self.getTypedRuleContext(GremlinParser.DateLiteralContext,0)


        def nullLiteral(self):
            return self.getTypedRuleContext(GremlinParser.NullLiteralContext,0)


        def traversalT(self):
            return self.getTypedRuleContext(GremlinParser.TraversalTContext,0)


        def traversalCardinality(self):
            return self.getTypedRuleContext(GremlinParser.TraversalCardinalityContext,0)


        def traversalDirection(self):
            return self.getTypedRuleContext(GremlinParser.TraversalDirectionContext,0)


        def traversalMerge(self):
            return self.getTypedRuleContext(GremlinParser.TraversalMergeContext,0)


        def traversalPick(self):
            return self.getTypedRuleContext(GremlinParser.TraversalPickContext,0)


        def traversalDT(self):
            return self.getTypedRuleContext(GremlinParser.TraversalDTContext,0)


        def structureVertexLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StructureVertexLiteralContext,0)


        def genericSetLiteral(self):
            return self.getTypedRuleContext(GremlinParser.GenericSetLiteralContext,0)


        def genericCollectionLiteral(self):
            return self.getTypedRuleContext(GremlinParser.GenericCollectionLiteralContext,0)


        def genericRangeLiteral(self):
            return self.getTypedRuleContext(GremlinParser.GenericRangeLiteralContext,0)


        def nestedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.NestedTraversalContext,0)


        def terminatedTraversal(self):
            return self.getTypedRuleContext(GremlinParser.TerminatedTraversalContext,0)


        def uuidLiteral(self):
            return self.getTypedRuleContext(GremlinParser.UuidLiteralContext,0)


        def genericMapLiteral(self):
            return self.getTypedRuleContext(GremlinParser.GenericMapLiteralContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_genericLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericLiteral" ):
                listener.enterGenericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericLiteral" ):
                listener.exitGenericLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericLiteral" ):
                return visitor.visitGenericLiteral(self)
            else:
                return visitor.visitChildren(self)




    def genericLiteral(self):

        localctx = GremlinParser.GenericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_genericLiteral)
        try:
            self.state = 3445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3426
                self.numericLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3427
                self.booleanLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3428
                self.stringLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3429
                self.dateLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3430
                self.nullLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3431
                self.traversalT()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3432
                self.traversalCardinality()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3433
                self.traversalDirection()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3434
                self.traversalMerge()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3435
                self.traversalPick()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3436
                self.traversalDT()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3437
                self.structureVertexLiteral()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3438
                self.genericSetLiteral()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3439
                self.genericCollectionLiteral()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3440
                self.genericRangeLiteral()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 3441
                self.nestedTraversal()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 3442
                self.terminatedTraversal()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 3443
                self.uuidLiteral()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 3444
                self.genericMapLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericMapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(GremlinParser.LBRACK, 0)

        def COLON(self):
            return self.getToken(GremlinParser.COLON, 0)

        def RBRACK(self):
            return self.getToken(GremlinParser.RBRACK, 0)

        def mapEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GremlinParser.MapEntryContext)
            else:
                return self.getTypedRuleContext(GremlinParser.MapEntryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GremlinParser.COMMA)
            else:
                return self.getToken(GremlinParser.COMMA, i)

        def getRuleIndex(self):
            return GremlinParser.RULE_genericMapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericMapLiteral" ):
                listener.enterGenericMapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericMapLiteral" ):
                listener.exitGenericMapLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericMapLiteral" ):
                return visitor.visitGenericMapLiteral(self)
            else:
                return visitor.visitChildren(self)




    def genericMapLiteral(self):

        localctx = GremlinParser.GenericMapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_genericMapLiteral)
        self._la = 0 # Token type
        try:
            self.state = 3461
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3447
                self.match(GremlinParser.LBRACK)
                self.state = 3448
                self.match(GremlinParser.COLON)
                self.state = 3449
                self.match(GremlinParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3450
                self.match(GremlinParser.LBRACK)
                self.state = 3451
                self.mapEntry()
                self.state = 3456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==263:
                    self.state = 3452
                    self.match(GremlinParser.COMMA)
                    self.state = 3453
                    self.mapEntry()
                    self.state = 3458
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3459
                self.match(GremlinParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def traversalT(self):
            return self.getTypedRuleContext(GremlinParser.TraversalTContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def traversalTLong(self):
            return self.getTypedRuleContext(GremlinParser.TraversalTLongContext,0)


        def traversalDirection(self):
            return self.getTypedRuleContext(GremlinParser.TraversalDirectionContext,0)


        def traversalDirectionLong(self):
            return self.getTypedRuleContext(GremlinParser.TraversalDirectionLongContext,0)


        def genericSetLiteral(self):
            return self.getTypedRuleContext(GremlinParser.GenericSetLiteralContext,0)


        def genericCollectionLiteral(self):
            return self.getTypedRuleContext(GremlinParser.GenericCollectionLiteralContext,0)


        def genericMapLiteral(self):
            return self.getTypedRuleContext(GremlinParser.GenericMapLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)


        def numericLiteral(self):
            return self.getTypedRuleContext(GremlinParser.NumericLiteralContext,0)


        def keyword(self):
            return self.getTypedRuleContext(GremlinParser.KeywordContext,0)


        def nakedKey(self):
            return self.getTypedRuleContext(GremlinParser.NakedKeyContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_mapKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapKey" ):
                listener.enterMapKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapKey" ):
                listener.exitMapKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapKey" ):
                return visitor.visitMapKey(self)
            else:
                return visitor.visitChildren(self)




    def mapKey(self):

        localctx = GremlinParser.MapKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_mapKey)
        try:
            self.state = 3516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3468
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [256]:
                    self.state = 3463
                    self.match(GremlinParser.LPAREN)
                    self.state = 3464
                    self.traversalT()
                    self.state = 3465
                    self.match(GremlinParser.RPAREN)
                    pass
                elif token in [208]:
                    self.state = 3467
                    self.traversalTLong()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3475
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [256]:
                    self.state = 3470
                    self.match(GremlinParser.LPAREN)
                    self.state = 3471
                    self.traversalDirection()
                    self.state = 3472
                    self.match(GremlinParser.RPAREN)
                    pass
                elif token in [51]:
                    self.state = 3474
                    self.traversalDirectionLong()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3482
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [256]:
                    self.state = 3477
                    self.match(GremlinParser.LPAREN)
                    self.state = 3478
                    self.genericSetLiteral()
                    self.state = 3479
                    self.match(GremlinParser.RPAREN)
                    pass
                elif token in [258]:
                    self.state = 3481
                    self.genericSetLiteral()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3489
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [256]:
                    self.state = 3484
                    self.match(GremlinParser.LPAREN)
                    self.state = 3485
                    self.genericCollectionLiteral()
                    self.state = 3486
                    self.match(GremlinParser.RPAREN)
                    pass
                elif token in [260]:
                    self.state = 3488
                    self.genericCollectionLiteral()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3496
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [256]:
                    self.state = 3491
                    self.match(GremlinParser.LPAREN)
                    self.state = 3492
                    self.genericMapLiteral()
                    self.state = 3493
                    self.match(GremlinParser.RPAREN)
                    pass
                elif token in [260]:
                    self.state = 3495
                    self.genericMapLiteral()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3503
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [256]:
                    self.state = 3498
                    self.match(GremlinParser.LPAREN)
                    self.state = 3499
                    self.stringLiteral()
                    self.state = 3500
                    self.match(GremlinParser.RPAREN)
                    pass
                elif token in [254, 255]:
                    self.state = 3502
                    self.stringLiteral()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3510
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [256]:
                    self.state = 3505
                    self.match(GremlinParser.LPAREN)
                    self.state = 3506
                    self.numericLiteral()
                    self.state = 3507
                    self.match(GremlinParser.RPAREN)
                    pass
                elif token in [99, 136, 251, 252, 253]:
                    self.state = 3509
                    self.numericLiteral()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3514
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 266]:
                    self.state = 3512
                    self.keyword()
                    pass
                elif token in [270]:
                    self.state = 3513
                    self.nakedKey()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapEntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapKey(self):
            return self.getTypedRuleContext(GremlinParser.MapKeyContext,0)


        def COLON(self):
            return self.getToken(GremlinParser.COLON, 0)

        def genericLiteral(self):
            return self.getTypedRuleContext(GremlinParser.GenericLiteralContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_mapEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapEntry" ):
                listener.enterMapEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapEntry" ):
                listener.exitMapEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapEntry" ):
                return visitor.visitMapEntry(self)
            else:
                return visitor.visitChildren(self)




    def mapEntry(self):

        localctx = GremlinParser.MapEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_mapEntry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3518
            self.mapKey()
            self.state = 3519
            self.match(GremlinParser.COLON)
            self.state = 3520
            self.genericLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EmptyStringLiteral(self):
            return self.getToken(GremlinParser.EmptyStringLiteral, 0)

        def NonEmptyStringLiteral(self):
            return self.getToken(GremlinParser.NonEmptyStringLiteral, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = GremlinParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_stringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3522
            _la = self._input.LA(1)
            if not(_la==254 or _la==255):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringNullableLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EmptyStringLiteral(self):
            return self.getToken(GremlinParser.EmptyStringLiteral, 0)

        def NonEmptyStringLiteral(self):
            return self.getToken(GremlinParser.NonEmptyStringLiteral, 0)

        def K_NULL(self):
            return self.getToken(GremlinParser.K_NULL, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_stringNullableLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringNullableLiteral" ):
                listener.enterStringNullableLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringNullableLiteral" ):
                listener.exitStringNullableLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringNullableLiteral" ):
                return visitor.visitStringNullableLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringNullableLiteral(self):

        localctx = GremlinParser.StringNullableLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_stringNullableLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3524
            _la = self._input.LA(1)
            if not(_la==148 or _la==254 or _la==255):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntegerLiteral(self):
            return self.getToken(GremlinParser.IntegerLiteral, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_integerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)




    def integerLiteral(self):

        localctx = GremlinParser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_integerLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3526
            self.match(GremlinParser.IntegerLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FloatingPointLiteral(self):
            return self.getToken(GremlinParser.FloatingPointLiteral, 0)

        def infLiteral(self):
            return self.getTypedRuleContext(GremlinParser.InfLiteralContext,0)


        def nanLiteral(self):
            return self.getTypedRuleContext(GremlinParser.NanLiteralContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_floatLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatLiteral" ):
                listener.enterFloatLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatLiteral" ):
                listener.exitFloatLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatLiteral" ):
                return visitor.visitFloatLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatLiteral(self):

        localctx = GremlinParser.FloatLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_floatLiteral)
        try:
            self.state = 3531
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [252]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3528
                self.match(GremlinParser.FloatingPointLiteral)
                pass
            elif token in [99, 253]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3529
                self.infLiteral()
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3530
                self.nanLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(GremlinParser.IntegerLiteralContext,0)


        def floatLiteral(self):
            return self.getTypedRuleContext(GremlinParser.FloatLiteralContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_numericLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericLiteral" ):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numericLiteral(self):

        localctx = GremlinParser.NumericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_numericLiteral)
        try:
            self.state = 3535
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [251]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3533
                self.integerLiteral()
                pass
            elif token in [99, 136, 252, 253]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3534
                self.floatLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_TRUE(self):
            return self.getToken(GremlinParser.K_TRUE, 0)

        def K_FALSE(self):
            return self.getToken(GremlinParser.K_FALSE, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = GremlinParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3537
            _la = self._input.LA(1)
            if not(_la==66 or _la==226):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DATETIME(self):
            return self.getToken(GremlinParser.K_DATETIME, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def stringArgument(self):
            return self.getTypedRuleContext(GremlinParser.StringArgumentContext,0)


        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def K_DATETIMEU(self):
            return self.getToken(GremlinParser.K_DATETIMEU, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_dateLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateLiteral" ):
                listener.enterDateLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateLiteral" ):
                listener.exitDateLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateLiteral" ):
                return visitor.visitDateLiteral(self)
            else:
                return visitor.visitChildren(self)




    def dateLiteral(self):

        localctx = GremlinParser.DateLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_dateLiteral)
        try:
            self.state = 3555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3539
                self.match(GremlinParser.K_DATETIME)
                self.state = 3540
                self.match(GremlinParser.LPAREN)
                self.state = 3541
                self.stringArgument()
                self.state = 3542
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3544
                self.match(GremlinParser.K_DATETIME)
                self.state = 3545
                self.match(GremlinParser.LPAREN)
                self.state = 3546
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3547
                self.match(GremlinParser.K_DATETIMEU)
                self.state = 3548
                self.match(GremlinParser.LPAREN)
                self.state = 3549
                self.stringArgument()
                self.state = 3550
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3552
                self.match(GremlinParser.K_DATETIMEU)
                self.state = 3553
                self.match(GremlinParser.LPAREN)
                self.state = 3554
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_NULL(self):
            return self.getToken(GremlinParser.K_NULL, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_nullLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullLiteral" ):
                return visitor.visitNullLiteral(self)
            else:
                return visitor.visitChildren(self)




    def nullLiteral(self):

        localctx = GremlinParser.NullLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_nullLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3557
            self.match(GremlinParser.K_NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_NAN(self):
            return self.getToken(GremlinParser.K_NAN, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_nanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNanLiteral" ):
                listener.enterNanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNanLiteral" ):
                listener.exitNanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNanLiteral" ):
                return visitor.visitNanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def nanLiteral(self):

        localctx = GremlinParser.NanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_nanLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3559
            self.match(GremlinParser.K_NAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InfLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_INFINITY(self):
            return self.getToken(GremlinParser.K_INFINITY, 0)

        def SignedInfLiteral(self):
            return self.getToken(GremlinParser.SignedInfLiteral, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_infLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfLiteral" ):
                listener.enterInfLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfLiteral" ):
                listener.exitInfLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInfLiteral" ):
                return visitor.visitInfLiteral(self)
            else:
                return visitor.visitChildren(self)




    def infLiteral(self):

        localctx = GremlinParser.InfLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_infLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3561
            _la = self._input.LA(1)
            if not(_la==99 or _la==253):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UuidLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UUID(self):
            return self.getToken(GremlinParser.K_UUID, 0)

        def LPAREN(self):
            return self.getToken(GremlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(GremlinParser.RPAREN, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(GremlinParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return GremlinParser.RULE_uuidLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUuidLiteral" ):
                listener.enterUuidLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUuidLiteral" ):
                listener.exitUuidLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUuidLiteral" ):
                return visitor.visitUuidLiteral(self)
            else:
                return visitor.visitChildren(self)




    def uuidLiteral(self):

        localctx = GremlinParser.UuidLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_uuidLiteral)
        try:
            self.state = 3571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3563
                self.match(GremlinParser.K_UUID)
                self.state = 3564
                self.match(GremlinParser.LPAREN)
                self.state = 3565
                self.match(GremlinParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3566
                self.match(GremlinParser.K_UUID)
                self.state = 3567
                self.match(GremlinParser.LPAREN)
                self.state = 3568
                self.stringLiteral()
                self.state = 3569
                self.match(GremlinParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NakedKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(GremlinParser.Identifier, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_nakedKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNakedKey" ):
                listener.enterNakedKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNakedKey" ):
                listener.exitNakedKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNakedKey" ):
                return visitor.visitNakedKey(self)
            else:
                return visitor.visitChildren(self)




    def nakedKey(self):

        localctx = GremlinParser.NakedKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_nakedKey)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3573
            self.match(GremlinParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(GremlinParser.Identifier, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_classType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassType" ):
                listener.enterClassType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassType" ):
                listener.exitClassType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassType" ):
                return visitor.visitClassType(self)
            else:
                return visitor.visitChildren(self)




    def classType(self):

        localctx = GremlinParser.ClassTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_classType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3575
            self.match(GremlinParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(GremlinParser.Identifier, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable" ):
                return visitor.visitVariable(self)
            else:
                return visitor.visitChildren(self)




    def variable(self):

        localctx = GremlinParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3577
            self.match(GremlinParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRAVERSAL_ROOT(self):
            return self.getToken(GremlinParser.TRAVERSAL_ROOT, 0)

        def K_ADDALL(self):
            return self.getToken(GremlinParser.K_ADDALL, 0)

        def K_ADDE(self):
            return self.getToken(GremlinParser.K_ADDE, 0)

        def K_ADDV(self):
            return self.getToken(GremlinParser.K_ADDV, 0)

        def K_AGGREGATE(self):
            return self.getToken(GremlinParser.K_AGGREGATE, 0)

        def K_ALL(self):
            return self.getToken(GremlinParser.K_ALL, 0)

        def K_AND(self):
            return self.getToken(GremlinParser.K_AND, 0)

        def K_ANY(self):
            return self.getToken(GremlinParser.K_ANY, 0)

        def K_AS(self):
            return self.getToken(GremlinParser.K_AS, 0)

        def K_ASC(self):
            return self.getToken(GremlinParser.K_ASC, 0)

        def K_ASDATE(self):
            return self.getToken(GremlinParser.K_ASDATE, 0)

        def K_ASSTRING(self):
            return self.getToken(GremlinParser.K_ASSTRING, 0)

        def K_ASSIGN(self):
            return self.getToken(GremlinParser.K_ASSIGN, 0)

        def K_BARRIER(self):
            return self.getToken(GremlinParser.K_BARRIER, 0)

        def K_BARRIERU(self):
            return self.getToken(GremlinParser.K_BARRIERU, 0)

        def K_BEGIN(self):
            return self.getToken(GremlinParser.K_BEGIN, 0)

        def K_BETWEEN(self):
            return self.getToken(GremlinParser.K_BETWEEN, 0)

        def K_BOTH(self):
            return self.getToken(GremlinParser.K_BOTH, 0)

        def K_BOTHU(self):
            return self.getToken(GremlinParser.K_BOTHU, 0)

        def K_BOTHE(self):
            return self.getToken(GremlinParser.K_BOTHE, 0)

        def K_BOTHV(self):
            return self.getToken(GremlinParser.K_BOTHV, 0)

        def K_BRANCH(self):
            return self.getToken(GremlinParser.K_BRANCH, 0)

        def K_BY(self):
            return self.getToken(GremlinParser.K_BY, 0)

        def K_CALL(self):
            return self.getToken(GremlinParser.K_CALL, 0)

        def K_CAP(self):
            return self.getToken(GremlinParser.K_CAP, 0)

        def K_CARDINALITY(self):
            return self.getToken(GremlinParser.K_CARDINALITY, 0)

        def K_CHOOSE(self):
            return self.getToken(GremlinParser.K_CHOOSE, 0)

        def K_COALESCE(self):
            return self.getToken(GremlinParser.K_COALESCE, 0)

        def K_COIN(self):
            return self.getToken(GremlinParser.K_COIN, 0)

        def K_COLUMN(self):
            return self.getToken(GremlinParser.K_COLUMN, 0)

        def K_COMBINE(self):
            return self.getToken(GremlinParser.K_COMBINE, 0)

        def K_CONCAT(self):
            return self.getToken(GremlinParser.K_CONCAT, 0)

        def K_COMMIT(self):
            return self.getToken(GremlinParser.K_COMMIT, 0)

        def K_COMPONENT(self):
            return self.getToken(GremlinParser.K_COMPONENT, 0)

        def K_CONJOIN(self):
            return self.getToken(GremlinParser.K_CONJOIN, 0)

        def K_CONNECTEDCOMPONENT(self):
            return self.getToken(GremlinParser.K_CONNECTEDCOMPONENT, 0)

        def K_CONNECTEDCOMPONENTU(self):
            return self.getToken(GremlinParser.K_CONNECTEDCOMPONENTU, 0)

        def K_CONSTANT(self):
            return self.getToken(GremlinParser.K_CONSTANT, 0)

        def K_CONTAINING(self):
            return self.getToken(GremlinParser.K_CONTAINING, 0)

        def K_COUNT(self):
            return self.getToken(GremlinParser.K_COUNT, 0)

        def K_CYCLICPATH(self):
            return self.getToken(GremlinParser.K_CYCLICPATH, 0)

        def K_DAY(self):
            return self.getToken(GremlinParser.K_DAY, 0)

        def K_DATEADD(self):
            return self.getToken(GremlinParser.K_DATEADD, 0)

        def K_DATEDIFF(self):
            return self.getToken(GremlinParser.K_DATEDIFF, 0)

        def K_DATETIME(self):
            return self.getToken(GremlinParser.K_DATETIME, 0)

        def K_DATETIMEU(self):
            return self.getToken(GremlinParser.K_DATETIMEU, 0)

        def K_DECR(self):
            return self.getToken(GremlinParser.K_DECR, 0)

        def K_DEDUP(self):
            return self.getToken(GremlinParser.K_DEDUP, 0)

        def K_DESC(self):
            return self.getToken(GremlinParser.K_DESC, 0)

        def K_DIFFERENCE(self):
            return self.getToken(GremlinParser.K_DIFFERENCE, 0)

        def K_DIRECTION(self):
            return self.getToken(GremlinParser.K_DIRECTION, 0)

        def K_DISJUNCT(self):
            return self.getToken(GremlinParser.K_DISJUNCT, 0)

        def K_DISTANCE(self):
            return self.getToken(GremlinParser.K_DISTANCE, 0)

        def K_DIV(self):
            return self.getToken(GremlinParser.K_DIV, 0)

        def K_DROP(self):
            return self.getToken(GremlinParser.K_DROP, 0)

        def K_DT(self):
            return self.getToken(GremlinParser.K_DT, 0)

        def K_E(self):
            return self.getToken(GremlinParser.K_E, 0)

        def K_EDGES(self):
            return self.getToken(GremlinParser.K_EDGES, 0)

        def K_ELEMENTMAP(self):
            return self.getToken(GremlinParser.K_ELEMENTMAP, 0)

        def K_ELEMENT(self):
            return self.getToken(GremlinParser.K_ELEMENT, 0)

        def K_EMIT(self):
            return self.getToken(GremlinParser.K_EMIT, 0)

        def K_ENDINGWITH(self):
            return self.getToken(GremlinParser.K_ENDINGWITH, 0)

        def K_EQ(self):
            return self.getToken(GremlinParser.K_EQ, 0)

        def K_EXPLAIN(self):
            return self.getToken(GremlinParser.K_EXPLAIN, 0)

        def K_FAIL(self):
            return self.getToken(GremlinParser.K_FAIL, 0)

        def K_FALSE(self):
            return self.getToken(GremlinParser.K_FALSE, 0)

        def K_FILTER(self):
            return self.getToken(GremlinParser.K_FILTER, 0)

        def K_FIRST(self):
            return self.getToken(GremlinParser.K_FIRST, 0)

        def K_FLATMAP(self):
            return self.getToken(GremlinParser.K_FLATMAP, 0)

        def K_FOLD(self):
            return self.getToken(GremlinParser.K_FOLD, 0)

        def K_FORMAT(self):
            return self.getToken(GremlinParser.K_FORMAT, 0)

        def K_FROM(self):
            return self.getToken(GremlinParser.K_FROM, 0)

        def K_GLOBAL(self):
            return self.getToken(GremlinParser.K_GLOBAL, 0)

        def K_GT(self):
            return self.getToken(GremlinParser.K_GT, 0)

        def K_GTE(self):
            return self.getToken(GremlinParser.K_GTE, 0)

        def K_GRAPHML(self):
            return self.getToken(GremlinParser.K_GRAPHML, 0)

        def K_GRAPHSON(self):
            return self.getToken(GremlinParser.K_GRAPHSON, 0)

        def K_GROUP(self):
            return self.getToken(GremlinParser.K_GROUP, 0)

        def K_GROUPCOUNT(self):
            return self.getToken(GremlinParser.K_GROUPCOUNT, 0)

        def K_GRYO(self):
            return self.getToken(GremlinParser.K_GRYO, 0)

        def K_HAS(self):
            return self.getToken(GremlinParser.K_HAS, 0)

        def K_HASID(self):
            return self.getToken(GremlinParser.K_HASID, 0)

        def K_HASKEY(self):
            return self.getToken(GremlinParser.K_HASKEY, 0)

        def K_HASLABEL(self):
            return self.getToken(GremlinParser.K_HASLABEL, 0)

        def K_HASNEXT(self):
            return self.getToken(GremlinParser.K_HASNEXT, 0)

        def K_HASNOT(self):
            return self.getToken(GremlinParser.K_HASNOT, 0)

        def K_HASVALUE(self):
            return self.getToken(GremlinParser.K_HASVALUE, 0)

        def K_HOUR(self):
            return self.getToken(GremlinParser.K_HOUR, 0)

        def K_ID(self):
            return self.getToken(GremlinParser.K_ID, 0)

        def K_IDENTITY(self):
            return self.getToken(GremlinParser.K_IDENTITY, 0)

        def K_IDS(self):
            return self.getToken(GremlinParser.K_IDS, 0)

        def K_IN(self):
            return self.getToken(GremlinParser.K_IN, 0)

        def K_INU(self):
            return self.getToken(GremlinParser.K_INU, 0)

        def K_INCLUDEEDGES(self):
            return self.getToken(GremlinParser.K_INCLUDEEDGES, 0)

        def K_INCR(self):
            return self.getToken(GremlinParser.K_INCR, 0)

        def K_INDEXER(self):
            return self.getToken(GremlinParser.K_INDEXER, 0)

        def K_INE(self):
            return self.getToken(GremlinParser.K_INE, 0)

        def K_INDEX(self):
            return self.getToken(GremlinParser.K_INDEX, 0)

        def K_INFINITY(self):
            return self.getToken(GremlinParser.K_INFINITY, 0)

        def K_INJECT(self):
            return self.getToken(GremlinParser.K_INJECT, 0)

        def K_INSIDE(self):
            return self.getToken(GremlinParser.K_INSIDE, 0)

        def K_INTERSECT(self):
            return self.getToken(GremlinParser.K_INTERSECT, 0)

        def K_INV(self):
            return self.getToken(GremlinParser.K_INV, 0)

        def K_IO(self):
            return self.getToken(GremlinParser.K_IO, 0)

        def K_IOU(self):
            return self.getToken(GremlinParser.K_IOU, 0)

        def K_IS(self):
            return self.getToken(GremlinParser.K_IS, 0)

        def K_ITERATE(self):
            return self.getToken(GremlinParser.K_ITERATE, 0)

        def K_KEY(self):
            return self.getToken(GremlinParser.K_KEY, 0)

        def K_KEYS(self):
            return self.getToken(GremlinParser.K_KEYS, 0)

        def K_LABELS(self):
            return self.getToken(GremlinParser.K_LABELS, 0)

        def K_LABEL(self):
            return self.getToken(GremlinParser.K_LABEL, 0)

        def K_LAST(self):
            return self.getToken(GremlinParser.K_LAST, 0)

        def K_LENGTH(self):
            return self.getToken(GremlinParser.K_LENGTH, 0)

        def K_LIMIT(self):
            return self.getToken(GremlinParser.K_LIMIT, 0)

        def K_LIST(self):
            return self.getToken(GremlinParser.K_LIST, 0)

        def K_LOCAL(self):
            return self.getToken(GremlinParser.K_LOCAL, 0)

        def K_LOOPS(self):
            return self.getToken(GremlinParser.K_LOOPS, 0)

        def K_LT(self):
            return self.getToken(GremlinParser.K_LT, 0)

        def K_LTE(self):
            return self.getToken(GremlinParser.K_LTE, 0)

        def K_LTRIM(self):
            return self.getToken(GremlinParser.K_LTRIM, 0)

        def K_MAP(self):
            return self.getToken(GremlinParser.K_MAP, 0)

        def K_MATCH(self):
            return self.getToken(GremlinParser.K_MATCH, 0)

        def K_MATH(self):
            return self.getToken(GremlinParser.K_MATH, 0)

        def K_MAX(self):
            return self.getToken(GremlinParser.K_MAX, 0)

        def K_MAXDISTANCE(self):
            return self.getToken(GremlinParser.K_MAXDISTANCE, 0)

        def K_MEAN(self):
            return self.getToken(GremlinParser.K_MEAN, 0)

        def K_MERGE(self):
            return self.getToken(GremlinParser.K_MERGE, 0)

        def K_MERGEU(self):
            return self.getToken(GremlinParser.K_MERGEU, 0)

        def K_MERGEE(self):
            return self.getToken(GremlinParser.K_MERGEE, 0)

        def K_MERGEV(self):
            return self.getToken(GremlinParser.K_MERGEV, 0)

        def K_MIN(self):
            return self.getToken(GremlinParser.K_MIN, 0)

        def K_MINUTE(self):
            return self.getToken(GremlinParser.K_MINUTE, 0)

        def K_MINUS(self):
            return self.getToken(GremlinParser.K_MINUS, 0)

        def K_MIXED(self):
            return self.getToken(GremlinParser.K_MIXED, 0)

        def K_MULT(self):
            return self.getToken(GremlinParser.K_MULT, 0)

        def K_NAN(self):
            return self.getToken(GremlinParser.K_NAN, 0)

        def K_NEGATE(self):
            return self.getToken(GremlinParser.K_NEGATE, 0)

        def K_NEW(self):
            return self.getToken(GremlinParser.K_NEW, 0)

        def K_NONE(self):
            return self.getToken(GremlinParser.K_NONE, 0)

        def K_NOTCONTAINING(self):
            return self.getToken(GremlinParser.K_NOTCONTAINING, 0)

        def K_NOTENDINGWITH(self):
            return self.getToken(GremlinParser.K_NOTENDINGWITH, 0)

        def K_NOTREGEX(self):
            return self.getToken(GremlinParser.K_NOTREGEX, 0)

        def K_NOTSTARTINGWITH(self):
            return self.getToken(GremlinParser.K_NOTSTARTINGWITH, 0)

        def K_NOT(self):
            return self.getToken(GremlinParser.K_NOT, 0)

        def K_NEQ(self):
            return self.getToken(GremlinParser.K_NEQ, 0)

        def K_NEXT(self):
            return self.getToken(GremlinParser.K_NEXT, 0)

        def K_NULL(self):
            return self.getToken(GremlinParser.K_NULL, 0)

        def K_NORMSACK(self):
            return self.getToken(GremlinParser.K_NORMSACK, 0)

        def K_ONCREATE(self):
            return self.getToken(GremlinParser.K_ONCREATE, 0)

        def K_ONMATCH(self):
            return self.getToken(GremlinParser.K_ONMATCH, 0)

        def K_OPERATOR(self):
            return self.getToken(GremlinParser.K_OPERATOR, 0)

        def K_OPTION(self):
            return self.getToken(GremlinParser.K_OPTION, 0)

        def K_OPTIONAL(self):
            return self.getToken(GremlinParser.K_OPTIONAL, 0)

        def K_ORDER(self):
            return self.getToken(GremlinParser.K_ORDER, 0)

        def K_ORDERU(self):
            return self.getToken(GremlinParser.K_ORDERU, 0)

        def K_OR(self):
            return self.getToken(GremlinParser.K_OR, 0)

        def K_OTHERV(self):
            return self.getToken(GremlinParser.K_OTHERV, 0)

        def K_OUT(self):
            return self.getToken(GremlinParser.K_OUT, 0)

        def K_OUTU(self):
            return self.getToken(GremlinParser.K_OUTU, 0)

        def K_OUTE(self):
            return self.getToken(GremlinParser.K_OUTE, 0)

        def K_OUTSIDE(self):
            return self.getToken(GremlinParser.K_OUTSIDE, 0)

        def K_OUTV(self):
            return self.getToken(GremlinParser.K_OUTV, 0)

        def K_P(self):
            return self.getToken(GremlinParser.K_P, 0)

        def K_PAGERANK(self):
            return self.getToken(GremlinParser.K_PAGERANK, 0)

        def K_PAGERANKU(self):
            return self.getToken(GremlinParser.K_PAGERANKU, 0)

        def K_PATH(self):
            return self.getToken(GremlinParser.K_PATH, 0)

        def K_PEERPRESSURE(self):
            return self.getToken(GremlinParser.K_PEERPRESSURE, 0)

        def K_PEERPRESSUREU(self):
            return self.getToken(GremlinParser.K_PEERPRESSUREU, 0)

        def K_PICK(self):
            return self.getToken(GremlinParser.K_PICK, 0)

        def K_POP(self):
            return self.getToken(GremlinParser.K_POP, 0)

        def K_PROFILE(self):
            return self.getToken(GremlinParser.K_PROFILE, 0)

        def K_PROJECT(self):
            return self.getToken(GremlinParser.K_PROJECT, 0)

        def K_PROPERTIES(self):
            return self.getToken(GremlinParser.K_PROPERTIES, 0)

        def K_PROPERTYMAP(self):
            return self.getToken(GremlinParser.K_PROPERTYMAP, 0)

        def K_PROPERTYNAME(self):
            return self.getToken(GremlinParser.K_PROPERTYNAME, 0)

        def K_PROPERTY(self):
            return self.getToken(GremlinParser.K_PROPERTY, 0)

        def K_PRODUCT(self):
            return self.getToken(GremlinParser.K_PRODUCT, 0)

        def K_RANGE(self):
            return self.getToken(GremlinParser.K_RANGE, 0)

        def K_READ(self):
            return self.getToken(GremlinParser.K_READ, 0)

        def K_READER(self):
            return self.getToken(GremlinParser.K_READER, 0)

        def K_REFERENCEVERTEX(self):
            return self.getToken(GremlinParser.K_REFERENCEVERTEX, 0)

        def K_REGEX(self):
            return self.getToken(GremlinParser.K_REGEX, 0)

        def K_REPLACE(self):
            return self.getToken(GremlinParser.K_REPLACE, 0)

        def K_REPEAT(self):
            return self.getToken(GremlinParser.K_REPEAT, 0)

        def K_REVERSE(self):
            return self.getToken(GremlinParser.K_REVERSE, 0)

        def K_ROLLBACK(self):
            return self.getToken(GremlinParser.K_ROLLBACK, 0)

        def K_RTRIM(self):
            return self.getToken(GremlinParser.K_RTRIM, 0)

        def K_SACK(self):
            return self.getToken(GremlinParser.K_SACK, 0)

        def K_SAMPLE(self):
            return self.getToken(GremlinParser.K_SAMPLE, 0)

        def K_SCOPE(self):
            return self.getToken(GremlinParser.K_SCOPE, 0)

        def K_SECOND(self):
            return self.getToken(GremlinParser.K_SECOND, 0)

        def K_SELECT(self):
            return self.getToken(GremlinParser.K_SELECT, 0)

        def K_SET(self):
            return self.getToken(GremlinParser.K_SET, 0)

        def K_SHORTESTPATH(self):
            return self.getToken(GremlinParser.K_SHORTESTPATH, 0)

        def K_SHORTESTPATHU(self):
            return self.getToken(GremlinParser.K_SHORTESTPATHU, 0)

        def K_SHUFFLE(self):
            return self.getToken(GremlinParser.K_SHUFFLE, 0)

        def K_SIDEEFFECT(self):
            return self.getToken(GremlinParser.K_SIDEEFFECT, 0)

        def K_SIMPLEPATH(self):
            return self.getToken(GremlinParser.K_SIMPLEPATH, 0)

        def K_SINGLE(self):
            return self.getToken(GremlinParser.K_SINGLE, 0)

        def K_SKIP(self):
            return self.getToken(GremlinParser.K_SKIP, 0)

        def K_SPLIT(self):
            return self.getToken(GremlinParser.K_SPLIT, 0)

        def K_STARTINGWITH(self):
            return self.getToken(GremlinParser.K_STARTINGWITH, 0)

        def K_STORE(self):
            return self.getToken(GremlinParser.K_STORE, 0)

        def K_SUBGRAPH(self):
            return self.getToken(GremlinParser.K_SUBGRAPH, 0)

        def K_SUBSTRING(self):
            return self.getToken(GremlinParser.K_SUBSTRING, 0)

        def K_SUM(self):
            return self.getToken(GremlinParser.K_SUM, 0)

        def K_SUMLONG(self):
            return self.getToken(GremlinParser.K_SUMLONG, 0)

        def K_T(self):
            return self.getToken(GremlinParser.K_T, 0)

        def K_TAIL(self):
            return self.getToken(GremlinParser.K_TAIL, 0)

        def K_TARGET(self):
            return self.getToken(GremlinParser.K_TARGET, 0)

        def K_TEXTP(self):
            return self.getToken(GremlinParser.K_TEXTP, 0)

        def K_TIMELIMIT(self):
            return self.getToken(GremlinParser.K_TIMELIMIT, 0)

        def K_TIMES(self):
            return self.getToken(GremlinParser.K_TIMES, 0)

        def K_TO(self):
            return self.getToken(GremlinParser.K_TO, 0)

        def K_TOBULKSET(self):
            return self.getToken(GremlinParser.K_TOBULKSET, 0)

        def K_TOKENS(self):
            return self.getToken(GremlinParser.K_TOKENS, 0)

        def K_TOLIST(self):
            return self.getToken(GremlinParser.K_TOLIST, 0)

        def K_TOLOWER(self):
            return self.getToken(GremlinParser.K_TOLOWER, 0)

        def K_TOSET(self):
            return self.getToken(GremlinParser.K_TOSET, 0)

        def K_TOSTRING(self):
            return self.getToken(GremlinParser.K_TOSTRING, 0)

        def K_TOUPPER(self):
            return self.getToken(GremlinParser.K_TOUPPER, 0)

        def K_TOE(self):
            return self.getToken(GremlinParser.K_TOE, 0)

        def K_TOV(self):
            return self.getToken(GremlinParser.K_TOV, 0)

        def K_TREE(self):
            return self.getToken(GremlinParser.K_TREE, 0)

        def K_TRIM(self):
            return self.getToken(GremlinParser.K_TRIM, 0)

        def K_TRUE(self):
            return self.getToken(GremlinParser.K_TRUE, 0)

        def K_TRYNEXT(self):
            return self.getToken(GremlinParser.K_TRYNEXT, 0)

        def K_TX(self):
            return self.getToken(GremlinParser.K_TX, 0)

        def K_UNFOLD(self):
            return self.getToken(GremlinParser.K_UNFOLD, 0)

        def K_UNION(self):
            return self.getToken(GremlinParser.K_UNION, 0)

        def K_UNTIL(self):
            return self.getToken(GremlinParser.K_UNTIL, 0)

        def K_UUID(self):
            return self.getToken(GremlinParser.K_UUID, 0)

        def K_V(self):
            return self.getToken(GremlinParser.K_V, 0)

        def K_VALUEMAP(self):
            return self.getToken(GremlinParser.K_VALUEMAP, 0)

        def K_VALUES(self):
            return self.getToken(GremlinParser.K_VALUES, 0)

        def K_VALUE(self):
            return self.getToken(GremlinParser.K_VALUE, 0)

        def K_VERTEX(self):
            return self.getToken(GremlinParser.K_VERTEX, 0)

        def K_WHERE(self):
            return self.getToken(GremlinParser.K_WHERE, 0)

        def K_WITH(self):
            return self.getToken(GremlinParser.K_WITH, 0)

        def K_WITHBULK(self):
            return self.getToken(GremlinParser.K_WITHBULK, 0)

        def K_WITHIN(self):
            return self.getToken(GremlinParser.K_WITHIN, 0)

        def K_WITHOPTOPTIONS(self):
            return self.getToken(GremlinParser.K_WITHOPTOPTIONS, 0)

        def K_WITHOUT(self):
            return self.getToken(GremlinParser.K_WITHOUT, 0)

        def K_WITHOUTSTRATEGIES(self):
            return self.getToken(GremlinParser.K_WITHOUTSTRATEGIES, 0)

        def K_WITHPATH(self):
            return self.getToken(GremlinParser.K_WITHPATH, 0)

        def K_WITHSACK(self):
            return self.getToken(GremlinParser.K_WITHSACK, 0)

        def K_WITHSIDEEFFECT(self):
            return self.getToken(GremlinParser.K_WITHSIDEEFFECT, 0)

        def K_WITHSTRATEGIES(self):
            return self.getToken(GremlinParser.K_WITHSTRATEGIES, 0)

        def K_WRITE(self):
            return self.getToken(GremlinParser.K_WRITE, 0)

        def K_WRITER(self):
            return self.getToken(GremlinParser.K_WRITER, 0)

        def getRuleIndex(self):
            return GremlinParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = GremlinParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3579
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 576460752303423487) != 0) or _la==266):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[1] = self.query_sempred
        self._predicates[3] = self.traversalSource_sempred
        self._predicates[25] = self.chainedTraversal_sempred
        self._predicates[182] = self.traversalPredicate_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def query_sempred(self, localctx:QueryContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def traversalSource_sempred(self, localctx:TraversalSourceContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def chainedTraversal_sempred(self, localctx:ChainedTraversalContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def traversalPredicate_sempred(self, localctx:TraversalPredicateContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         




