question,gremlin_query
请帮我找出与名为李思思和何思思的用户标签相同的节点,"g.V().has('user', 'name', '李思思').outE('relation').inV().as('b').inE('relation').outV().has('user', 'name', '何思思').select('b').values('name')"
"查找所有名为赵伟的点的,性别为famale或名字不是韩科的伙伴,返回这些伙伴的薪资,和边的权重,f0,源点id","g.V().has('name', '赵伟').as('a').outE('partner').as('e').inV().as('b').where(or(__.has('gender', 'famale'), __.has('name', neq('韩科')))).select('b', 'e').by(select('salary')).by(union(select('weight'), select('f0'), select('srcId')).fold())"
"输入请求点id的列表564,146,328,762,428, 以属性id作为相等条件,帮我查询author write的book,返回其源点的height对height取余的平均值,以及目标点的wordCount的求和值对24取余的求和值","g.inject([564, 146, 328, 762, 428]).as('p').unfold().as('id').V().hasLabel('author').has('id', __.select('id')).as('a').outE('author_write_book').as('e').inV().hasLabel('book').as('b').select('a', 'b').by().project('height_mod', 'wordCount_sum').by(__.select('a').values('height').math('_ % _')).by(__.select('b').values('wordCount').sum()).select('wordCount_sum').math('_ % 24').as('wordCount_mod').select('height_mod', 'wordCount_mod').fold().project('avg_height_mod', 'sum_wordCount_mod').by(__.unfold().select('height_mod').mean()).by(__.unfold().select('wordCount_mod').sum())"
请找出赵梅和吴强共同创建的点,"g.V().has('person', 'name', '赵梅').outE('creates').inV().as('b').inE('creates').outV().has('person', 'name', '吴强').select('b')"
 查询同时拥有标签和名称为Post_179和Post_340的节点的信息。,"g.V().has('name', 'Post_179').outE('has').inV().hasLabel('tag').as('b').inE('has').outV().has('name', 'Post_340').select('b')"
"查询184个处方Prescription_359和Prescription_151,共同的伙伴","g.V().has('prescription', 'name', 'Prescription_359').outE('partner').inV().as('b').inE('partner').outV().has('prescription', 'name', 'Prescription_151').select('b').limit(184)"
"请帮我找出雇佣person郑国强认识的person,的公司","g.V().has('person', 'name', '郑国强').out('knows').as('b').in('employee').hasLabel('company').as('c').select('b', 'c')"
"给出全部和person吴国强有关系的person,返回这些点的id,height,salary","g.V().hasLabel('person').has('name', '吴国强').bothE().otherV().hasLabel('person').project('id', 'height', 'salary').by('id').by('height').by('salary')"
 请帮我查找郑伟的点接受的处方，以及郑伟被诊断的医生，然后一起回复我。,"g.V().has('name', '郑伟').as('a').outE('accept').inV().hasLabel('prescription').as('b').select('a').inE('diagnose').outV().hasLabel('doctor').as('c').select('a', 'b', 'c')"
"输入请求点id的列表648,730,297,123,151, 以属性id作为相等条件,查询和label为person的点有person_likes_person关系的person,且和这些person有person_knows_person关系的person,且和这些person有person_pay_person关系的person","g.inject([648, 730, 297, 123, 151]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).as('a').outE('person_likes_person').inV().hasLabel('person').as('b').outE('person_knows_person').inV().hasLabel('person').as('c').outE('person_pay_person').inV().hasLabel('person').as('d').select('d')"
"给出被城市上海包含的公司,和上海属于的国家","g.V().hasLabel('city').has('name', '上海').as('b').outE('belong').inV().hasLabel('country').as('c').select('b').inE('contain').outV().hasLabel('company').as('a').select('a', 'b', 'c')"
找出标签为'person'且同时属于杜雪和吴思思的relation节点列表。,"g.V().hasLabel('person').has('name', '杜雪').outE('relation').inV().as('b').inE('relation').outV().hasLabel('person').has('name', '吴思思').select('b').values('name')"
"以(60,'其他',184),(58,'喜剧',59)作为请求表数据,属性分别为id,name,value, 以属性value作为相等条件,查找和forum有关联的post节点,并根据其value,name分组,返回value,name,以及wordCount对366取余的值","g.inject([['id':60,'name':'其他','value':184],['id':58,'name':'喜剧','value':59]]).as('p').unfold().as('p_row').select('p_row').by(values).as('p_val').V().hasLabel('forum').as('a').where(eq('p_val')).by('value').bothE('forum_contain_post').otherV().hasLabel('post').as('b').select('b').by(valueMap('value','name','wordCount')).as('b_map').select('b_map').by(project('value','name','wordCount_mod').by(select('value')).by(select('name')).by(select('wordCount').math('_ % 366'))).dedup().by(select('value','name')).select('value','name','wordCount_mod')"
返回与腾讯和电子科技大学都有关联的公司的信息，包括规格、人数和名称。,"g.V().has('company', 'name', '腾讯').outE().inV().hasLabel('company').as('b').inE().outV().has('university', 'name', '电子科技大学').select('b').values('scale', 'peopleNumber', 'name')"
"请帮我查找74个买家马梅和何思琪,共同的伙伴","g.V().has('buyer', 'name', '马梅').as('a').outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().has('buyer', 'name', '何思琪').as('c').select('b').limit(74)"
"使用列为name,area,value, 数据为('俄罗斯',85309,222),('美国',72565,631),('韩国',91756,454)的子查询作为输入表, 源点的area等于输入表area,请帮我找出city深圳的friend的friend的partner","g.withSideEffect('p', [['俄罗斯', 85309, 222], ['美国', 72565, 631], ['韩国', 91756, 454]]).V().hasLabel('city').has('name', '深圳').where(__.values('area').is(within(__.select('p').unfold().tail(2).limit(1)))).out('friend').out('friend').out('partner')"
 找出南京大学中类型为university的地点，返回它们的ID、名称和级别。,"g.V().hasLabel('university').has('name', '南京大学').project('a.id', 'a.name', 'a.level').by(values('id')).by(values('name')).by(values('level'))"
给出与读者杜梅有喜欢关系的2度以内的环,"g.V().has('reader', 'name', '杜梅').as('a').bothE('likes').otherV().as('b').where(__.as('b').both().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"请帮我找出和company阿里有关的company,再请帮我找出和阿里creates的其他software,返回它们","g.V().hasLabel('company').has('name', '阿里').as('a').bothE().otherV().hasLabel('company').as('b').select('a').outE('creates').inV().hasLabel('software').as('c').select('a', 'b', 'c')"
找出与马梅和孙思琪都相关联的161位用户,"g.V().has('user', 'name', '马梅').outE('relation').inV().as('b').inE('relation').outV().has('user', 'name', '孙思琪').select('b').limit(161)"
"给出所有与美国存在包含关系的城市,城市与国家存在属于关系的点,返回这些点的面积","g.V().has('name', '美国').out('contain').hasLabel('city').out('belong').hasLabel('country').values('area')"
"查询状态是Running且id小于37的事项属于的仓库的名称,以及这些仓库 拥有的事项的名称","g.V().hasLabel('issue').has('status', 'Running').has('id', lt(37)).outE('belong').inV().hasLabel('repository').as('b').outE('has').inV().hasLabel('issue').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
请帮我找出性别不是女性或者身高不超过193的用户喜欢的帖子的名称，以及这些帖子所带的标签的名称。,"g.V().hasLabel('user').has('gender', neq('famale')).or().has('height', lte(193)).outE('likes').inV().hasLabel('post').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我找出名为赵雪的,salary等于3160的relation,返回这些relation的height,和边的targetId,weight,srcId","g.V().has('name', '赵雪').outE('relation').as('e').inV().has('salary', 3160).as('b').select('b', 'e').by('height').by(values('targetId', 'weight', 'srcId'))"
请帮我找出重庆大学和南京大学共同的167个合作伙伴。,"g.V().has('university', 'name', '重庆大学').outE('partner').inV().as('b').inE('partner').outV().has('university', 'name', '南京大学').select('b').limit(167)"
查询与作家相关的书籍节点，按创建时间和ID分组，并返回创建时间和ID。,"g.V().hasLabel('author').as('a').outE('write').as('e').inV().hasLabel('book').as('b').select('b').values('createTime', 'id').group().by().by(fold())"
查询名为Jimmy的节点knows的company或software,"g.V().has('name', 'Jimmy').outE('knows').inV().or(hasLabel('company'), hasLabel('software')).values('name')"
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出和软件Mysql有关的公司,称为X,再请帮我找出和这个X有关联的其他公司,以及和X有关联的公司","g.V().has('software', 'name', 'Mysql').as('a').bothE().otherV().hasLabel('company').as('b').bothE().otherV().hasLabel('company').as('c').select('b').bothE().otherV().hasLabel('company').as('d').select('a', 'b', 'c', 'd')"
"返回23个名为杜科的点购买的标签等于软件的节点,且节点价值小于604,语言不是c","g.V().has('name', '杜科').outE('buy').inV().hasLabel('software').has('value', lt(604)).has('lang', neq('c')).limit(23)"
"帮我查询和论坛有关联的用户节点,并根据其性别分组,返回性别,以及salary的最小值减6355的和",g.V().hasLabel('forum').as('a').bothE('contain').otherV().hasLabel('user').as('b').group().by('b.gender').by(__.select('b').values('salary').min().is(neq(null)).math('_ - 6355').sum())
"以('Comment_343',2001-06-05,36)作为请求表数据,属性分别为name,createTime,id, 以属性name作为相等条件,找出名为何雪和周红的,标签为person的点公共的朋友节点的名单","g.withSideEffect('p', [['name':'Comment_343','createTime':'2001-06-05','id':36]]).V().hasLabel('person').as('a').where(and(__.select('a').values('name').is(eq(constant('何雪'))), __.select('a').values('name').is(eq(__.select('p').unfold().select('name'))))).outE('friend').inV().as('b').inE('friend').outV().hasLabel('person').as('c').where(__.select('c').values('name').is(eq(constant('周红')))).select('b').values('name')"
找出张建聪和韩思琪这两位买家之间的关系。,"g.V().hasLabel('buyer').has('name', '张建聪').as('a').outE('relation').as('e').inV().as('b').inE('relation').as('e2').outV().hasLabel('buyer').has('name', '韩思琪').as('c').select('b').limit(103)"
"查询与大学浙江大学有关,且与公司腾讯有关系的城市节点","g.V().has('university', 'name', '浙江大学').bothE('belong').otherV().hasLabel('city').bothE('contain').otherV().has('company', 'name', '腾讯').path().by(__.choose(__.hasLabel('city'), __.identity(), __.otherV())).unfold().filter(__.hasLabel('city')).dedup()"
找出77个与loan_74和loan_7都存在关系的company或loan或person节点,"g.V().has('name', 'loan_74').outE().inV().hasLabel(within('company', 'loan', 'person')).as('b').inE().outV().has('name', 'loan_7').select('b').limit(77)"
"找出名为腾讯的点合作的全部大学,并对这些大学的名字进行求和","g.V().has('name', '腾讯').outE('cooperate').inV().hasLabel('university').values('name').sum()"
"以441,34,566,617作为请求点id, 以属性id作为相等条件,帮我查询名为郑梅和徐建国的,标签等于buyer的点公共的friend节点的名单","g.inject([441, 34, 566, 617]).as('p').unfold().as('id').V().hasLabel('buyer').has('id', __.select('id')).has('name', '郑梅').as('a').out('friend').as('b').in('friend').hasLabel('buyer').has('name', '徐建国').as('c').select('b').values('name').dedup()"
 查找与王若涵有关且出售短袖商品的卖家。,"g.V().has('buyer', 'name', '王若涵').bothE('consult').otherV().hasLabel('seller').bothE('has').otherV().has('goods', 'name', '短袖').select('b')"
"帮我查询141个person郑若涵和杜思思,共同的父母","g.V().has('person', 'name', '郑若涵').outE('parent').inV().as('b').inE('parent').as('e2').outV().has('person', 'name', '杜思思').select('b').limit(141)"
"帮我查询person赵月relates的person,以及knows这些person的person","g.V().has('person', 'name', '赵月').outE('relates').inV().hasLabel('person').as('b').inE('knows').outV().hasLabel('person').as('c').select('b', 'c')"
请帮我找出所有和部门法学院有1跳关系的课程,"g.V().has('department', 'name', '法学院').out().hasLabel('course')"
"帮我查询拥有学生李强的部门,和这些部门拥有的学生","g.V().hasLabel('student').has('name', '李强').as('a').in('has').hasLabel('department').as('b').out('has').hasLabel('student').as('c').select('b', 'c')"
"以554,690,754,643,689作为请求点id, 源点的id等于输入表id,请帮我找出所有和论坛百度贴吧有关系的论坛节点,返回这些点的名字","g.inject([554, 690, 754, 643, 689]).as('p').V().hasLabel('forum').has('id', within('p')).has('name', '百度贴吧').bothE().otherV().hasLabel('forum').values('name')"
"帮我查询用户王伟喜欢的帖子,以及包含这些帖子的论坛, 令论坛的薪资等于用户的年龄,令论坛的名字等于论坛的创建时间, 返回用户的名字,帖子的价值,论坛的人数","g.V().has('user', 'name', '王伟').as('a').outE('likes').inV().hasLabel('post').as('b').inE('contain').outV().hasLabel('forum').as('c').sideEffect(select('c').property('salary', select('a').values('age'))).sideEffect(select('c').property('name', select('c').values('createTime'))).select('a', 'b', 'c').by('name').by('value').by('peopleNumber')"
"给出公司合作的大学,返回其源点的人数对770取余加911除24乘758对32取余的数量,以及目标点的id乘id加3的值","g.V().hasLabel('company').as('a').outE('cooperate').as('e').inV().hasLabel('university').as('b').project('expr1', 'expr2').by(__.select('a').values('peopleNumber').math('_ % 770').math('_ + 911').math('_ / 24').math('_ * 758').math('_ % 32').count(local)).by(__.select('b').values('id').math('_ * _').math('_ + 3'))"
"返回20个age减80大于等于28的author,根据age升序排列","g.V().hasLabel('author').has('age', P.gte(108)).order().by('age', Order.asc).limit(20)"
查找所有名为韩红的节点购买的person,"g.V().has('name', '韩红').outE('buy').inV().hasLabel('person')"
"用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查找标签等于teacher的点,返回17个",g.V().hasLabel('teacher').limit(17)
请帮我找出与医生郑月有创造关系的3度的环,"g.V().has('doctor', 'name', '郑月').as('a').repeat(bothE().otherV().simplePath()).times(2).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
 先查找与ID为15的人有关联的人，再查找这些人的人际关系。,"g.V().has('person', 'id', '15').as('a').bothE().otherV().hasLabel('person').as('b').both().hasLabel('person').as('c').select('b').bothE('friend').otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"给出仓库拥有的事项, 令事项的状态的值等于创造事项的用户的名字的平均值, 再查找事项属于的仓库","g.V().hasLabel('repository').as('a').outE('has').hasLabel('has').inV().hasLabel('issue').as('b').sideEffect(__.project('status').by(__.select('b').inE('creates').hasLabel('creates').outV().hasLabel('user').values('name').mean())).select('b').outE('belong').hasLabel('belong').inV().hasLabel('repository').as('d').select('b', 'd').by('status').by()"
"返回company employee的person,返回其源点的peopleNumber加552的值,以及目标点的salary减9753的最小值","g.V().hasLabel('company').as('a').outE('employee').as('e').inV().hasLabel('person').as('b').project('peopleNumber_plus_552', 'min_salary_minus_9753').by(select('a').values('peopleNumber').math('_ + 552')).by(select('b').values('salary').math('_ - 9753').min())"
请帮我找出那些与'cinema好视影院'有'releases'关系，并且与'tag文艺'有'has'关系的'film'节点。请返回这些'film'的'value'、'id'、'category'以及'cinema好视影院'的'address'和'tag文艺'的'value'。,"g.V().hasLabel('cinema').has('name', '好视影院').as('a').outE('releases').inV().hasLabel('film').as('b').inE('has').outV().hasLabel('tag').has('name', '文艺').as('c').select('a', 'b', 'c').by('address').by(values('value', 'id', 'category')).by('value')"
找到所有源点标签为'book'，边标签为'refers'的边。返回这些边的srcId除以srcId的结果，以及targetId对32取余后加124.85的最大值。,"g.E().hasLabel('refers').where(outV().hasLabel('book')).project('expr1', 'expr2').by(values('srcId').math('_ / _')).by(values('targetId').math('_ % 32').math('_ + 124.85')).select(values).select('expr2').max()"
"请帮我找出所有源点类型为country,边类型为contain,且srcId大于等于120且srcId为14且f0大于787的边","g.V().hasLabel('country').as('a').outE('contain').has('srcId', gte(120)).has('srcId', 14).has('f0', gt(787)).as('e').select('e')"
"查询源点名字不是周雪,年龄在15到33之间,目标点年龄小于30,年龄小于3,且类型是家人的边","g.V().has('name', neq('周雪')).has('age', between(15, 33)).outE('family').as('e').inV().has('age', lt(30)).has('age', lt(3)).select('e')"
找出与22个买家类型的点存在关联关系的订单，并且这些订单中包含的商品。,g.V().hasLabel('buyer').limit(22).out('creates').hasLabel('orders').out('contain').hasLabel('goods')
"用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出前170个标签为person_pay_person的边",g.E().hasLabel('person_pay_person').limit(170)
请帮我找出与'呐喊'和'罪与罚'都有关联，并返回它们各自的id、wordCount、price以及'呐喊'和'罪与罚'的名称。,"g.V().has('book', 'name', '呐喊').as('a').outE('refers').inV().hasLabel('book').as('b').inE('refers').outV().has('book', 'name', '罪与罚').as('c').select('a', 'b', 'c').by('name').by(values('id', 'wordCount', 'price')).by('id')"
"查找与person杜强有关,且与person黄建国有关系的person节点","g.V().has('person', 'name', '杜强').bothE('parent').otherV().hasLabel('person').bothE('lover').otherV().has('person', 'name', '黄建国').select('b')"
"以('我不是药神',1,815),('少年足球',27,502)作为请求表数据,属性分别为name,id,value, 以属性id作为相等条件,给出label为cinema的点,返回103个","g.inject([['我不是药神', 1, 815], ['少年足球', 27, 502]]).as('p').unfold().as('row').select('p').unfold().as('p_row').V().hasLabel('cinema').has('id', __.select('p_row').select('id')).limit(103)"
查找所有和评论Comment_480之间有属于关系的电影,"g.V().hasLabel('comment').has('name', 'Comment_480').outE('belong').inV().hasLabel('film')"
"查找所有名为赵科的,身高不等于183的朋友,返回这些朋友的年龄,和边的权重","g.V().has('name', '赵科').outE('friend').as('e').inV().has('height', neq(183)).project('b.age', 'e.weight').by('age').by(select('e').values('weight'))"
"找出账号的朋友,或其朋友的朋友","g.V().hasLabel('account').as('a').outE('friend').inV().hasLabel('account').range(1, 2).as('b').select('b')"
 搜索四川大学的大学。,"g.V().hasLabel('university').has('name', '四川大学')"
"用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));找出书呐喊的所有类型为引用的边,并根据f0从小到大排列,返回153个","g.V().has('book', 'name', '呐喊').outE('book_refers_book').as('e').inV().as('b').select('e', 'b').order().by(select('e').values('f0'), asc).limit(153).select('b')"
"帮我查询8个和类型是软件的点有使用关系的软件,且和这些软件有使用关系的软件",g.V().hasLabel('software').as('a').out('uses').hasLabel('software').as('b').out('uses').hasLabel('software').as('c').select('c').limit(8)
"请帮我查找和名为Tom的person有相关者关系,或有相关者的相关者关系的person","g.V().hasLabel('person').has('name', 'Tom').outE('relation').inV().hasLabel('person').simplePath().times(2).emit().dedup().values('name')"
给出88个与吴月和韩科都存在关系的书或读者节点,"g.V().has('name', '吴月').as('a').outE().as('e').inV().as('b').or(hasLabel('book'), hasLabel('reader')).as('b').inE().as('e2').outV().as('c').has('name', '韩科').select('b').limit(88)"
请找出与病人周建聪和李轩都有关联的药品节点，并返回它们的名字、价格和ID。,"g.V().has('patient', 'name', '周建聪').outE().inV().hasLabel('medicine').as('b').inE().outV().has('patient', 'name', '李轩').select('b').values('name', 'price', 'id')"
 请问有没有一个叫马宏和马思思的人，他们之间是否有共同的友人？,"g.V().has('user', 'name', '马宏').outE('friend').inV().as('b').inE('friend').outV().has('user', 'name', '马思思').select('b').limit(176)"
"查找喜欢用户周若涵发布的帖子,的用户","g.V().has('user', 'name', '周若涵').outE('publish').inV().hasLabel('post').as('b').inE('likes').outV().hasLabel('user').as('c').select('b', 'c')"
"请帮我找出label为课程的点,返回67个",g.V().hasLabel('course').limit(67)
"查询和标签等于论坛的点有包含关系的用户,且和这些用户有喜欢关系的帖子,且和这些帖子有拥有关系的标签",g.V().hasLabel('forum').as('a').out('contain').hasLabel('user').as('b').out('likes').hasLabel('post').as('c').out('has').hasLabel('tag').as('d').select('d')
"以('famale',50,2518),('famale',10,6721),('male',33,1330),('famale',64,1125)作为请求表数据,属性分别为gender,id,salary, 以属性id作为相等条件,给出158个名为艺术学院的点拥有的类型是学生的节点,且其性别不是male","g.withSideEffect('p', [['gender': 'famale', 'id': 50, 'salary': 2518], ['gender': 'famale', 'id': 10, 'salary': 6721], ['gender': 'male', 'id': 33, 'salary': 1330], ['gender': 'famale', 'id': 64, 'salary': 1125]]).V().has('name', '艺术学院').where(__.in('department_has_student').has('id', within(__.select('p').unfold().select('id')))).out('department_has_student').hasLabel('student').has('gender', neq('male')).limit(158)"
查询全部和university重庆大学之间有has关系的department,"g.V().hasLabel('university').has('name', '重庆大学').outE('has').inV().hasLabel('department')"
"返回城市包含的公司, 令公司的规格的值等于合作公司的大学的名字的平均值, 再查找公司合作的大学","g.V().hasLabel('city').as('a').outE('contain').inV().hasLabel('company').as('b').sideEffect(__.select('b').aggregate('companies')).barrier().select('companies').unfold().as('b').project('scale', 'd').by(__.select('b').inE('cooperate').outV().hasLabel('university').values('name').mean()).by(__.select('b').outE('cooperate').inV().hasLabel('university').as('d').select('d'))"
找出事项的2跳以内的环,"g.V().hasLabel('issue').as('a').repeat(both().simplePath()).times(2).where(loops().is(gt(0))).where(path().unfold().tail(1).is(eq('a'))).dedup().project('a.id', 'b_id').by(select('a').id()).by(tail(local, 1).id())"
"请帮我查找所有和user点有creates关系的pullRequest节点,且边满足条件timeStamp大于11,目标pullRequest节点createTime不是2004年08月24日","g.V().hasLabel('user').as('a').outE('creates').has('timeStamp', gt(11)).as('e').inV().hasLabel('pullRequest').has('createTime', neq('2004-08-24')).as('b').select('b')"
"查找和prescription Prescription_159有关系的department,返回这些点的name,weight,price","g.V().hasLabel('prescription').has('name', 'Prescription_159').bothE().otherV().hasLabel('department').project('name', 'weight', 'price').by(values('name')).by(values('weight')).by(values('price'))"
 请帮我查找与医生韩国强有诊断关系的患者，再帮我查找与韩国强的处方创建关系。,"g.V().hasLabel('doctor').has('name', '韩国强').as('a').outE('diagnose').inV().hasLabel('patient').as('b').select('a').inE('creates').outV().hasLabel('prescription').as('c').select('a', 'b', 'c')"
"请帮我查找和类型是person的点有likes关系的person,以及和这些person有pay关系的person,以及和这些person有pay关系的person",g.V().hasLabel('person').as('a').outE('likes').inV().hasLabel('person').as('b').outE('pay').inV().hasLabel('person').as('c').outE('pay').inV().hasLabel('person').as('d').select('d')
帮我查询全部和publisher郑若涵之间有publish关系的book,"g.V().hasLabel('publisher').has('name', '郑若涵').outE('publish').inV().hasLabel('book')"
"请帮我找出id为37的person有关的person的parent, 再请帮我找出和person有关系的lover","g.V().has('person', 'id', 37).as('a').bothE().otherV().hasLabel('person').as('b').both().hasLabel('person').as('temp').select('b').outE('parent').inV().hasLabel('person').as('c').select('b').outE('lover').inV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"以290作为请求点id, 以属性id作为相等条件,帮我查询city伦敦contain的university,被其他city contain的数量","g.withSideEffect('p_id', 290).V().hasLabel('city').has('id', 'p_id').has('name', '伦敦').out('city_contain_university').in('city_contain_university').where(neq('p_id')).dedup().count()"
返回作者陈轩和张宏有关系的所有作者节点，以及他们的薪水和姓名。,"g.V().has('author', 'name', '陈轩').as('a').outE().as('e').inV().hasLabel('author').as('b').inE().as('e2').outV().has('author', 'name', '张宏').as('c').select('b').values('salary', 'name')"
查询全部名为loan_23的节点存款的账号或贷款,"g.V().has('name', 'loan_23').outE('deposit').inV().hasLabel(within('account', 'loan')).dedup()"
"查找名为武汉的公司或城市或大学,以及与其有关的国家,并返回武汉的id和这些国家的名字","g.V().has('name', '武汉').hasLabel(within('company', 'city', 'university')).bothE().otherV().hasLabel('country').project('a_id', 'b_name').by(select(all, 'a').by('id')).by('name')"
"用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找名为马思思的,name等于陈月的family,返回这些family的name,和边的f1","g.V().has('person', 'name', '马思思').outE('person_family_person').as('e').inV().has('person', 'name', '陈月').select('e').project('b_name', 'e_f1').by(__.inV().values('name')).by(values('f1'))"
"找出30个和类型是书的点有引用关系的书,且和这些书有引用关系的书",g.V().hasLabel('book').as('a').out('refers').hasLabel('book').as('b').out('refers').hasLabel('book').as('c').select('c').limit(30)
"给出和标签为编辑的点有发布关系的书,以及和这些书有引用关系的书,以及和这些书有引用关系的书",g.V().hasLabel('publisher').as('a').out('publish').hasLabel('book').as('b').out('refers').hasLabel('book').as('c').out('refers').hasLabel('book').as('d').select('d')
"查找61个和label为author的点有knows关系的author,以及和这些author有knows关系的author",g.V().hasLabel('author').as('a').out('knows').hasLabel('author').as('b').out('knows').hasLabel('author').as('c').select('c').limit(61)
 找出所有读者和书之间的喜欢边。,g.V().hasLabel('reader').outE('likes').as('e').inV().hasLabel('book').select('e')
"查找id为32的person申请的贷款, 并将贷款有关的person的薪资的个数赋值给贷款的权重, 接着查询贷款的权重小于32的贷款存款的账号","g.V().has('person', 'id', 32).as('a').outE('apply').inV().hasLabel('loan').as('b').sideEffect(__.select('b').aggregate('b_agg')).select('b').as('b_temp').inE().outV().hasLabel('person').values('salary').dedup().count().as('weight').select('b_temp').sideEffect(__.property('weight', __.select('weight'))).select('b_agg').unfold().as('b').has('weight', lt(32)).outE('deposit').inV().hasLabel('account').as('d').select('b', 'd').by('weight').by()"
"给出与名为韩建聪和何科的点共同支付的,类型是person的节点","g.V().has('name', '韩建聪').outE('pay').inV().hasLabel('person').as('b').inE('pay').outV().has('name', '何科').select('b')"
找出id为62的点的名字,"g.V().has('id', 62).values('name')"
"给出和商品杯子有关的订单,称为X,再给出和这个X有关联的其他卖家,以及和X有关联的买家","g.V().has('goods', 'name', '杯子').as('a').bothE().otherV().hasLabel('orders').as('b').bothE().otherV().hasLabel('seller').as('c').select('b').bothE().otherV().hasLabel('buyer').as('d').select('a', 'b', 'c', 'd')"
"请帮我查找部门的三角的环,边类型是拥有, 并返回这些点的id","g.V().hasLabel('department').as('a').outE('has').inV().as('b').outE('has').inV().as('c').where(__.out('has').as('a')).select('a', 'b', 'c').by().by(id).by(id).project('a', 'b_id', 'c_id').by().by(select('b').id()).by(select('c').id())"
"帮我查询被部门生物学院拥有的学生,和生物学院拥有的教师","g.V().hasLabel('department').has('name', '生物学院').as('b').bothE('has').otherV().hasLabel('student').as('a').select('b').bothE('has').otherV().hasLabel('teacher').as('c').select('a', 'b', 'c')"
"请帮我查找与名为XXD和Geaflow123的点共同repay的,label为loan的节点","g.V().has('name', 'XXD').outE('repay').inV().hasLabel('loan').as('b').inE('repay').outV().has('name', 'Geaflow123').select('b')"
"找出35个名为孙科的点likes的label为post的节点,且节点createTime等于2008年06月05日,createTime不等于2031年11月06日","g.V().has('name', '孙科').outE('likes').inV().hasLabel('post').has('createTime', '2008-06-05').has('createTime', neq('2031-11-06')).limit(35)"
 找出与person节点有关联的person节点，按其salary分组并返回。,g.V().hasLabel('person').as('a').bothE('likes').otherV().hasLabel('person').as('b').select('b').values('salary').groupCount()
查询所有与company美团有关系的company的scale,"g.V().has('company', 'name', '美团').bothE().otherV().hasLabel('company').values('scale')"
查找全部和person杜伟之间有朋友关系的person,"g.V().has('person', 'name', '杜伟').out('friend').hasLabel('person')"
 请帮我查找李宏的父母的家庭背景。,"g.V().has('person', 'name', '李宏').out('parent').out('family').out('parent')"
从'Faker'点获取账户，然后返回这些点是否是块。,"g.V().hasLabel('account').has('name', 'Faker').values('isBlock')"
"查询和书白夜行有关的编辑,再查询和白夜行引用的其他书,返回它们","g.V().hasLabel('book').has('name', '白夜行').as('a').bothE().as('e').otherV().hasLabel('publisher').as('b').select('a').outE('refers').as('e2').inV().hasLabel('book').as('c').select('a', 'b', 'c')"
"以995,598,379,149作为请求点id, 源点的id等于输入表id,查找标签等于user的点,返回87个","g.inject([995, 598, 379, 149]).unfold().as('p').V().hasLabel('user').has('id', __.select('p')).limit(87)"
找出所有标签为学生或大学的点,"g.V().hasLabel(within('student', 'university'))"
找出属于类型为film且同时与Comment_228和Comment_176两点都相关的所有节点。,"g.V().has('name', 'Comment_228').outE('belong').inV().hasLabel('film').as('b').inE('belong').outV().has('name', 'Comment_176').select('b')"
帮我查询全部与person郑红有关系的person的身高,"g.V().hasLabel('person').has('name', '郑红').bothE().otherV().hasLabel('person').values('height')"
"使用列为f0,f1,srcId, 数据为(953,true,45)的子查询作为输入表, 源点的f0等于输入表f0,帮我查询所有id为103的medicine关联的patient,和以diagnose关系关联了这些patient的其他doctor","g.withSideEffect('p', [[953, true, 45]]).V().hasLabel('medicine').has('f0', __.select('p').unfold().select('f0')).has('id', '103').bothE().otherV().hasLabel('patient').as('b').inE('doctor_diagnose_patient').otherV().hasLabel('doctor').as('c').select('b', 'c')"
查询贷款defaultName的相关者及其伙伴,"g.V().hasLabel('loan').has('name', 'defaultName').outE('relation').inV().outE('relation').inV().outE('partner').inV()"
"请帮我找出从department内科出发,经过label为has的边,走3到6度到达的doctor点","g.V().has('department', 'name', '内科').repeat(outE('has').otherV()).times(3).emit().repeat(outE('has').otherV()).times(3).hasLabel('doctor').dedup()"
找出与部门艺术学院和土木学院都存在拥有关系的点,"g.V().hasLabel('department').has('name', '艺术学院').outE('has').inV().as('b').inE('has').outV().hasLabel('department').has('name', '土木学院').select('b')"
返回与person韩思琪和张建国都存在likes关系的点,"g.V().has('person', 'name', '韩思琪').out('likes').as('b').in('likes').has('person', 'name', '张建国').select('b')"
查询label为person的点,g.V().hasLabel('person')
 请帮我查找买家张伟和订单Order_198之间的关联订单，并返回它们的价格和ID。,"g.V().has('buyer', 'name', '张伟').outE().inV().has('orders').as('b').inE().outV().has('orders', 'name', 'Order_198').select('b').values('price', 'id')"
"找出类型是大学,名为重庆大学的点,返回这些点的价值,等级,名字","g.V().hasLabel('university').has('name', '重庆大学').project('a.value', 'a.level', 'a.name').by(values('value')).by(values('level')).by(values('name'))"
找出全部和account BIN之间有repay关系的loan,"g.V().hasLabel('account').has('name', 'BIN').outE('repay').inV().hasLabel('loan')"
"帮我查询和用户王建聪有关的用户,称为X,再帮我查询和这个X有关联的其他论坛,以及和X有关联的帖子","g.V().has('user', 'name', '王建聪').as('a').bothE().otherV().hasLabel('user').as('b').bothE().otherV().hasLabel('forum').as('c').select('b').bothE().otherV().hasLabel('post').as('d').select('a', 'b', 'c', 'd')"
 给出与知乎和推特相关的106个论坛节点。,"g.V().has('name', '知乎').outE().as('e').inV().hasLabel('forum').as('b').inE().as('e2').outV().has('name', '推特').select('b').limit(106)"
请帮我查找buyer郑科consult的seller节点ask的buyer,"g.V().hasLabel('buyer').has('name', '郑科').out('consult').hasLabel('seller').out('ask').hasLabel('buyer')"
"找出全部和university清华大学有关系的company或city,返回这些点的area","g.V().has('university', 'name', '清华大学').bothE().otherV().hasLabel(within('company', 'city')).values('area')"
"查询用户孙思思的所有相关者,的源点id减124除83的值","g.V().has('user', 'name', '孙思思').outE('relation').project('result').by(math('(srcId - 124) / 83'))"
"请帮我查找所有陈若涵的点认识的person,然后请帮我查找陈若涵被喜欢的person,一起返回","g.V().has('name', '陈若涵').as('a').outE('knows').inV().as('b').select('a').inE('likes').outV().as('c').select('a', 'b', 'c')"
"返回peopleNumber为空且area为空的city contain的company的名称,以及这些company belong的city的名称","g.V().hasLabel('city').has('peopleNumber', null).has('area', null).out('contain').hasLabel('company').as('b').out('belong').hasLabel('city').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
帮我查询被department放射科has的doctor,"g.V().hasLabel('department').has('name', '放射科').inE('has').outV().hasLabel('doctor').as('b').outE('has').inV().hasLabel('doctor').as('a').select('a', 'b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出所有和账号点有转账关系的账号节点,且边满足条件f0大于961,目标账号节点满足条件创建时间不是2003年04月08日","g.V().hasLabel('account').as('a').outE('account_transfer_account').has('f0', gt(961)).as('e').inV().hasLabel('account').has('createTime', neq('2003-04-08')).as('b').select('b')"
帮我找出所有医生的朋友，或者他们朋友的朋友,g.V().hasLabel('doctor').repeat(out('friend')).times(2).dedup()
 请帮我查询与ID为65的教师有关系的其他教师，然后再帮我查询与这些教师有关系的其他伙伴。,"g.V().has('teacher', 'id', '65').as('a').bothE().otherV().hasLabel('teacher').as('b').bothE('partner').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"帮我查询146个名为吴强的点knows的类型是person的节点,且节点height大于等于162","g.V().has('name', '吴强').outE('knows').inV().hasLabel('person').has('height', gte(162)).limit(146)"
"请帮我找出拥有标签悬疑的帖子,和这些帖子拥有的标签","g.V().hasLabel('tag').has('name', '悬疑').inE('has').outV().as('b').outE('has').inV().as('c').select('b', 'c')"
帮我找一下徐伟的病人的关系伙伴的朋友,"g.V().has('patient', 'name', '徐伟').out('relation').out('partner').out('friend')"
查找与author徐伟有knows关系的3度的环,"g.V().has('author', 'name', '徐伟').as('a').repeat(bothE('knows').otherV().simplePath()).times(2).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
 请帮我找出university的朋友，或者是朋友的朋友。,"g.V().hasLabel('university').out('friend').range(1, 2).dedup()"
找出与标签为publisher的点有publish关系的112本书，以及这些书有refers关系的其他书籍。,g.V().hasLabel('publisher').as('a').out('publish').hasLabel('book').as('b').out('refers').hasLabel('book').as('c').select('c').limit(112)
请帮我查找以属于关系关联了电影功夫的评论,"g.V().hasLabel('film').has('name', '功夫').inE('belong').outV().hasLabel('comment')"
 查询与周思琪有关的公司，再查询周思琪购买的其他软件，返回它们。,"g.V().has('person', 'name', '周思琪').as('a').bothE().otherV().hasLabel('company').as('b').select('a').outE('buy').inV().hasLabel('software').as('c').select('a', 'b', 'c')"
查询全部名为Faker的节点还款的公司或账号,"g.V().has('name', 'Faker').outE('repay').inV().or(hasLabel('company'), hasLabel('account'))"
 请帮我查找40个与用户类型为'user'的点有'likes'关系的帖子，并且这些帖子与相应的标签有'has'关系。,g.V().hasLabel('user').out('likes').hasLabel('post').out('has').hasLabel('tag').limit(40)
帮我查询医生韩雪创造的处方节点包含的药品,"g.V().hasLabel('doctor').has('name', '韩雪').outE('creates').inV().hasLabel('prescription').outE('contain').inV().hasLabel('medicine')"
帮我找出与我相关的帖子，以及发布这些帖子的其他用户,"g.V().has('user', 'id', '173').bothE().otherV().hasLabel('post').as('b').inE('publish').otherV().hasLabel('user').as('c').select('b', 'c')"
请找出与微软公司有归属关系，并且与滴滴公司有包含关系的城市节点。返回这些城市的名称、微软公司的名称以及滴滴公司的员工人数。,"g.V().has('company', 'name', '微软').as('a').outE('belong').inV().hasLabel('city').as('b').inE('contain').outV().has('company', 'name', '滴滴').as('c').select('a', 'b', 'c').by('name').by('name').by('peopleNumber')"
"帮我查询id为16的用户有关的仓库的伙伴, 再帮我查询和仓库有关系的朋友","g.V().has('user', 'id', 16).as('a').bothE().as('e').otherV().hasLabel('repository').as('b').bothE('partner').as('e2').otherV().as('c').select('b').bothE('friend').as('e3').otherV().as('d').select('a', 'b', 'c', 'd')"
查找和person李轩之间有属于关系的公司,"g.V().has('person', 'name', '李轩').outE('belong').inV().hasLabel('company')"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找person吴强喜欢的person,被其他person喜欢的数量","g.V().has('person', 'name', '吴强').out('person_likes_person').in('person_likes_person').where(neq('吴强')).count()"
"找出146个名为谷歌的点雇佣的标签为person的节点,且其id大于64","g.V().has('name', '谷歌').outE('employee').inV().hasLabel('person').has('id', gt(64)).limit(146)"
"查找id为7的仓库有关的用户的伙伴, 再查找和用户有关系的伙伴","g.V().has('repository', 'id', 7).as('a').bothE().otherV().hasLabel('user').as('b').bothE('partner').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"请帮我找出id为85的person关联的comment,和以creates关系关联了这些comment的其他person","g.V().has('person', 'id', 85).bothE().otherV().hasLabel('comment').as('b').inE('creates').otherV().hasLabel('person').as('c').select('b', 'c')"
请帮我查找前23个满足条件名字为推特的论坛,"g.V().hasLabel('forum').has('name', '推特').limit(23)"
"返回前169个价值不等于70且人数等于5303,或价值小于57的城市","g.V().hasLabel('city').or(and(has('value', neq(70)), has('peopleNumber', 5303)), has('value', lt(57))).limit(169)"
 查询所有Post_419中包含标签的元素，并返回这些元素所关联的用户。,"g.V().has('name', 'Post_419').as('a').outE('has').inV().hasLabel('tag').as('b').select('a').inE('publish').outV().hasLabel('user').as('c').select('a', 'b', 'c')"
"给出从电影院横店影院出发,经过标签等于上映的边,走2跳到达的电影点","g.V().has('cinema', 'name', '横店影院').outE('releases').inV().outE('releases').inV().hasLabel('film')"
"请帮我找出id为14的company有关的software的partner, 再请帮我找出和software有关系的relation","g.V().has('company', 'id', 14).as('a').bothE().otherV().hasLabel('software').as('b').bothE('partner').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
找出id小于25且id为空的电影院上映的电影的名称和它们拥有的标签的名称,"g.V().hasLabel('cinema').has('id', lt(25)).has('id', null).outE('releases').inV().hasLabel('film').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"给出138个名为ISSUE-77的点belong的类型为repository的节点,且节点name不是Tugraph","g.V().has('name', 'ISSUE-77').outE('belong').inV().hasLabel('repository').has('name', neq('Tugraph')).limit(138)"
 请帮我找出与重庆大学合作的company。,"g.V().hasLabel('university').has('name', '重庆大学').as('b').outE('cooperate').as('e').inV().hasLabel('company').as('a').select('a', 'b')"
"帮我查询用户孙思琪发布的帖子,以及包含这些帖子的论坛, 令论坛的字数等于帖子的id, 返回用户的薪资,帖子的语言,论坛的价值","g.V().hasLabel('user').has('name', '孙思琪').as('a').outE('publish').inV().hasLabel('post').as('b').inE('contain').outV().hasLabel('forum').as('c').sideEffect(select('c').property('wordCount', select('b').values('id'))).select('a', 'b', 'c').by('salary').by('lang').by('value')"
"用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));找出源点gender不等于famale或salary小于等于1233,且id为空,边label为author_write_book,且srcId不为空的边,返回这些边的f0减f0的最小值","g.V().hasLabel('author').and(has('gender', neq('famale')).or().has('salary', lte(1233))).has('id', eq(null)).outE('author_write_book').has('srcId', neq(null)).project('diff').by(values('f0', 'f0').math('_ - _')).select('diff').min()"
找出id为161的doctor的关系，再找出与该doctor相关的其他关系。,"g.V().has('doctor', 'id', '161').as('a').bothE().otherV().hasLabel('doctor').as('b').bothE('relation').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"找出名为陈红和张强的,标签为person的点公共的朋友节点的名单","g.V().has('person', 'name', '陈红').out('friend').as('b').in('friend').has('person', 'name', '张强').select('b').values('name')"
"给出标签为拥有,并且f1不等于true或f1不等于false的边","g.E().hasLabel('has').or(has('f1', neq(true)), has('f1', neq(false)))"
"请帮我找出名为传染部的prescription,以及与其有关的medicine,并返回传染部的id和这些medicine的id","g.V().hasLabel('prescription').has('name', '传染部').as('a').bothE().otherV().hasLabel('medicine').as('b').select('a', 'b').by('id').by('id')"
"给出和orders Order_245有关系的seller,返回这些点的gender","g.V().hasLabel('orders').has('name', 'Order_245').bothE().otherV().hasLabel('seller').values('gender')"
"给出143个名为中国的点contain的类型是city的节点,且其name为巴黎且peopleNumber为空","g.V().has('name', '中国').outE('contain').inV().hasLabel('city').has('name', '巴黎').hasNot('peopleNumber').limit(143)"
"查找和国家澳大利亚有关的城市,称为X,再查找和这个X有关联的其他大学,以及和X有关联的国家","g.V().has('country', 'name', '澳大利亚').as('a').bothE().otherV().hasLabel('city').as('b').bothE().otherV().hasLabel('university').as('c').select('b').bothE().otherV().hasLabel('country').as('d').select('a', 'b', 'c', 'd')"
请帮我查找名为JavaGuid的节点拥有的合并请求或用户或仓库,"g.V().has('name', 'JavaGuid').out('has').hasLabel(within('pullRequest', 'user', 'repository'))"
请帮我查找与person王思思有关系的person的薪资,"g.V().has('person', 'name', '王思思').bothE().otherV().hasLabel('person').values('salary')"
"帮我查询名为李雪的点观看的所有电影,并对这些电影的价值进行求和","g.V().has('name', '李雪').outE('watch').inV().hasLabel('film').values('value').sum()"
"返回全部吴建聪的点relates的person,然后返回吴建聪被relates的person,一起返回","g.V().has('name', '吴建聪').as('a').bothE('relates').otherV().hasLabel('person').as('b').select('a', 'b')"
 查找孙科接受的处方，返回处方中包含的药物的价格。,"g.V().has('patient', 'name', '孙科').outE('accept').inV().hasLabel('prescription').outE('contain').inV().hasLabel('medicine').values('price')"
"帮我查询标签等于person,名为黄红的点,返回这些点的薪资,id,年龄","g.V().hasLabel('person').has('name', '黄红').project('salary', 'id', 'age').by('salary').by('id').by('age')"
"找出与蚂蚁集团存在雇佣关系的person,person与公司存在属于关系的点,返回这些点的名字","g.V().has('name', '蚂蚁集团').out('employee').hasLabel('person').out('belong').hasLabel('company').values('name')"
 找出与处方ID为93的医生有伙伴关系的相关者。,"g.V().has('prescription', 'id', '93').as('a').bothE().otherV().hasLabel('doctor').as('b').bothE('partner').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"帮我查询person马国强购买的软件, 令软件的星数等于软件的星数乘577的最小值, 返回person的名字, 软件的价值","g.V().has('person', 'name', '马国强').as('a').outE('buy').inV().hasLabel('software').as('b').project('a_name', 'b_value').by(select('a').values('name')).by(select('b').values('value')).dedup()"
"查找person周红的所有朋友,的f0对f0取余的值","g.V().has('person', 'name', '周红').outE('friend').inV().project('result').by(values('f0').math('_ % _'))"
"请帮我查找和公司美团有申请关系的贷款,再请帮我查找以申请关系关联了美团的贷款","g.V().has('company', 'name', '美团').as('a').outE('apply').inV().as('b').select('a').inE('apply').outV().as('c').select('a', 'b', 'c')"
"找出与名为黄红和何月的点共同认识的,label为person的节点","g.V().has('name', '黄红').out('knows').as('b').in('knows').has('name', '何月').select('b')"
"给出全部名为马国强的,名字等于阿里的朋友,返回这些朋友的名字,和边的f0","g.V().has('name', '马国强').outE('friend').as('e').inV().has('name', '阿里').select('e', 'b').by('f0').by('name')"
"找出拥有用户黄强创造的合并请求,的仓库","g.V().hasLabel('user').has('name', '黄强').outE('creates').inV().hasLabel('pullRequest').as('b').inE('has').outV().hasLabel('repository').as('c').select('b', 'c')"
查找部门急诊部拥有的医生节点创造的处方,"g.V().hasLabel('department').has('name', '急诊部').out('has').hasLabel('doctor').out('creates').hasLabel('prescription')"
帮我查询名为Post_291的节点拥有的标签或论坛或用户,"g.V().has('name', 'Post_291').out('has').hasLabel(within('tag', 'forum', 'user'))"
帮我查询department外科has的doctor节点belong的department,"g.V().hasLabel('department').has('name', '外科').out('has').hasLabel('doctor').out('belong').hasLabel('department')"
"查找person的relation,或其relation的relation",g.V().hasLabel('person').outE('relation').inV().outE('relation').inV().dedup()
给出前98个价值小于581或名字不等于572或规格不是large的公司,"g.V().hasLabel('company').or(has('value', lt(581)), has('name', neq(572)), has('scale', neq('large'))).limit(98)"
"以740,740作为请求点id, 以属性id作为相等条件,查找所有和company点有apply关系的loan节点,且边满足条件f1等于true,目标loan节点满足条件id大于52","g.withSideEffect('p', [740, 740]).V().hasLabel('company').as('a').where(__.select('a').values('id').is(within(select('p')))).outE('company_apply_loan').has('f1', true).inV().hasLabel('loan').has('id', gt(52)).dedup()"
 查询与谷歌公司合作的大学,"g.V().hasLabel('company').has('name', '谷歌').inE('cooperate').outV().hasLabel('university')"
 查询认识王轩的人。,"g.V().hasLabel('person').has('name', '王轩').as('b').outE('knows').inV().hasLabel('person').as('a').select('a', 'b')"
"使用列为id,name,value, 数据为(41,'动作',769),(12,'历史',932),(25,'动作',76),(16,'文艺',94)的子查询作为输入表, 源点的value等于输入表value,查找22个名为郑轩的点喜欢的标签等于评论的节点,且其字数在367到673之间","g.withSideEffect('p', [[41, '动作', 769], [12, '历史', 932], [25, '动作', 76], [16, '文艺', 94]]).V().has('value', within(__.select('p').unfold().tail(2))).has('name', '郑轩').outE('person_likes_comment').inV().hasLabel('comment').has('wordCount', between(367, 673)).limit(22)"
 查询154个名称不为伦敦且人口数小于等于6362或人口数为空的城市的名称，并按人口数从小到大地排序。,"g.V().hasLabel('city').has('name', neq('伦敦')).has('peopleNumber', lte(6362)).or(__.has('peopleNumber', null)).order().by('peopleNumber', asc).limit(154)"
"以219作为请求点id, 以属性id作为相等条件,找出和forum有关联的post节点,并根据其id分组,返回id,以及id乘26加892的值","g.withSideEffect('p', [219]).V().hasLabel('forum').has('id', select('p')).outE('forum_contain_post').inV().hasLabel('post').group().by('id').by(project('id', 'calc').by(select('id')).by(math('id * 26 + 892')).select(values).unfold().select('id', 'calc'))"
请帮我找出与病人李伟和杜思琪都存在接受关系的点,"g.V().has('patient', 'name', '李伟').outE('accept').inV().as('b').inE('accept').outV().has('patient', 'name', '杜思琪').select('b')"
"帮我查询和合并请求PR-122有关的用户,再帮我查询和PR-122属于的其他仓库,返回它们","g.V().hasLabel('pullRequest').has('name', 'PR-122').as('a').bothE().otherV().hasLabel('user').as('b').select('a').outE('belong').inV().hasLabel('repository').as('c').select('a', 'b', 'c')"
"找出26个和类型为forum的点有contain关系的user,以及和这些user有publish关系的post",g.V().hasLabel('forum').as('a').outE('contain').inV().hasLabel('user').as('b').outE('publish').inV().hasLabel('post').as('c').select('c').limit(26)
返回所有和用户王国强之间有发布关系的帖子,"g.V().has('user', 'name', '王国强').outE('publish').inV().hasLabel('post')"
"以280,624作为请求点id, 以属性id作为相等条件,请帮我查找86个和类型为person的点有person_knows_person关系的person,并且和这些person有person_likes_person关系的person","g.withSideEffect('p', [280, 624]).V().hasLabel('person').where(__.values('id').is(within('p'))).as('a').outE('person_knows_person').inV().hasLabel('person').as('b').outE('person_likes_person').inV().hasLabel('person').as('c').select('c').limit(86)"
"查询与数学学院存在拥有关系的教师,教师与课程存在教关系的点,返回这些点的价值","g.V().has('name', '数学学院').out('has').hasLabel('teacher').out('teach').hasLabel('course').values('value')"
" 请帮我找出149个软件，其中一些软件的Stars值在486到951之间或小于等于198,并且它们的ID是45,然后按Stars值从小到大排序。","g.V().hasLabel('software').has('id', 45).or(has('stars', between(486, 951)), has('stars', lte(198))).order().by('stars', asc).limit(149)"
"输入请求点id的列表55, 源点的id等于输入表id,给出病人的1跳以内的环","g.withSideEffect('p', [55]).V().hasLabel('patient').has('id', within('p')).as('a').both().as('b').where(__.select('b').both().where(eq('a'))).select('a', 'b').by('id').by('id')"
"找出和公司蚂蚁集团有关系的person或公司或账号,返回这些点的id,性别,名字","g.V().hasLabel('company').has('name', '蚂蚁集团').bothE().otherV().hasLabel(within('person', 'company', 'account')).project('b.id', 'b.gender', 'b.name').by(values('id')).by(values('gender')).by(values('name'))"
 找出与标签为'person'的点有隶属关系的公司，以及与这些公司有雇佣关系的个人，以及与这些个人有认识关系的个人。,g.V().hasLabel('person').as('a').outE('belong').hasLabel('belong').as('e').inV().hasLabel('company').as('b').outE('employee').hasLabel('employee').as('e2').inV().hasLabel('person').as('c').outE('knows').hasLabel('knows').as('e3').inV().hasLabel('person').as('d').select('d')
"找出大学合作的公司,返回其源点的id除id的值,以及目标点的id对57取余的最小值","g.V().hasLabel('university').as('a').outE('cooperate').as('e').inV().hasLabel('company').as('b').select('a', 'b').by(id()).by(id()).project('a.id_div_a.id', 'min_b.id_mod_57').by(select('a').math('_ / _')).by(select('b').math('_ % 57').min())"
 请帮我查询和医生相关的处方节点，并按重量分组，返回重量。,g.V().hasLabel('doctor').bothE('creates').otherV().hasLabel('prescription').values('weight').groupCount()
"返回与论坛知乎有关,且与标签文艺有关系的帖子节点","g.V().hasLabel('forum').has('name', '知乎').outE('contain').inV().hasLabel('post').as('b').inE('has').outV().hasLabel('tag').has('name', '文艺').select('b')"
"找出标签为cancel,且满足条件targetId在111到198之间,timeStamp不等于2003年05月12日,或srcId小于57的边","g.E().hasLabel('cancel').or(and(has('targetId', between(111, 198)), has('timeStamp', neq('2003-05-12'))), has('srcId', lt(57)))"
找出郑伟喜欢的所有人，以及郑伟认识的所有人，并将它们一起返回。,"g.V().has('name', '郑伟').as('a').outE('likes').inV().hasLabel('person').as('b').select('a').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
 找出某人或其父母的父母。,"g.V().hasLabel('person').as('a').outE('parent').inV().hasLabel('person').range(1, 2).as('b').select('b')"
"找出76个forum中国军事论坛和CSDN,共同的partner","g.V().hasLabel('forum').has('name', '中国军事论坛').outE('partner').inV().as('b').inE('partner').outV().hasLabel('forum').has('name', 'CSDN').select('b').limit(76)"
"查询与名为Order_329和Order_394的点共同contain的,类型是goods的节点","g.V().has('name', 'Order_329').out('contain').hasLabel('goods').as('b').in('contain').has('name', 'Order_394').select('b')"
"查找被person杜梅认识的person,和杜梅认识的person","g.V().hasLabel('person').has('name', '杜梅').as('b').outE('knows').inV().as('a').select('b').outE('knows').inV().as('c').select('a', 'b', 'c')"
找出与标签为'person'且有同事关系的44个'person'，以及与这些'person'有父母关系的'person'。,g.V().hasLabel('person').as('a').outE('colleague').as('e').inV().hasLabel('person').as('b').outE('parent').as('e2').inV().hasLabel('person').as('c').select('c').limit(44)
"请帮我查找id为87的comment有关的film的relation, 再请帮我查找和film有关系的relation","g.V().has('comment', 'id', 87).as('a').bothE().otherV().hasLabel('film').as('b').bothE('relation').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
返回全部名为天涯论坛的节点包含的用户或帖子或标签,"g.V().has('name', '天涯论坛').outE('contain').inV().hasLabel(within('user', 'post', 'tag')).dedup()"
"给出127个名为郑月的点关联的标签等于person的节点,且其名字不是黄梅","g.V().has('name', '郑月').outE('relates').inV().hasLabel('person').has('name', neq('黄梅')).limit(127)"
"返回label为issue的点,返回104个",g.V().hasLabel('issue').limit(104)
"请帮我找出被电影拥有数量大于90的标签,记为relationCount,再查询这些标签拥有的电影院","g.V().hasLabel('tag').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('has').hasLabel('film').count()).where(__.select('relationCount').is(gt(90))).select('a').out('has').hasLabel('cinema')"
"查找person马国强pay的person, 令person(a)的id等于person(b)的id, 返回person(a)的age, person(b)的id","g.V().hasLabel('person').has('name', '马国强').as('a').outE('pay').inV().hasLabel('person').as('b').select('a', 'b').by(choose(values('id')).option(none, select('b').values('id')).option(none, identity())).by(values('id')).project('a.age', 'b.id').by(select('a').values('age')).by(select('b').values('id'))"
"帮我查询125个名为重庆的点属于的类型是国家的节点,且其价值大于75","g.V().has('name', '重庆').outE('belong').inV().hasLabel('country').has('value', gt(75)).limit(125)"
"查找与person何月有关,且与标签文艺有关系的电影节点","g.V().has('person', 'name', '何月').bothE('watch').otherV().hasLabel('film').bothE('has').otherV().has('tag', 'name', '文艺').select('film')"
"帮我查询id为177的person关联的评论,和以喜欢关系关联了这些评论的其他person","g.V().has('person', 'id', 177).bothE().otherV().hasLabel('comment').as('b').inE('likes').outV().hasLabel('person').as('c').select('b', 'c')"
"帮我查询与医生周思思有关,且与医生张思思有关系的部门节点","g.V().hasLabel('doctor').has('name', '周思思').as('a').outE('belong').inV().hasLabel('department').as('b').inE('has').outV().hasLabel('doctor').has('name', '张思思').select('b')"
"输入表的列为age,name,salary, 数据为(51,'郑轩',4575), 以属性salary作为相等条件,查找名为黄宏和杜强的,标签等于person的点公共的friend节点的名单","g.withSideEffect('p', [['age': 51, 'name': '郑轩', 'salary': 4575]]).V().hasLabel('person').has('salary', select('p').unfold().values('salary')).has('name', '黄宏').outE('friend').inV().as('b').inE('friend').outV().hasLabel('person').has('name', '杜强').select('b').values('name')"
返回与department标签相关的74个点，它们与doctor有has关系，并且这些doctor与prescription有creates关系。,g.V().hasLabel('department').out('has').hasLabel('doctor').out('creates').hasLabel('prescription').limit(74)
 找到45个杜宏和孙梅的共同作家朋友。,"g.V().has('author', 'name', '杜宏').outE('relation').inV().as('b').inE('relation').outV().has('author', 'name', '孙梅').select('b').limit(45)"
 按照性别从小到大排序，搜索所有person类型的数据。,"g.V().hasLabel('person').order().by('gender', asc)"
给出以申请关系关联了贷款loan_56的公司,"g.V().hasLabel('loan').has('name', 'loan_56').in('apply').hasLabel('company')"
请帮我查找所有与电影院相关的评论，以及创建这些评论与其他人的关系。,"g.V().hasLabel('cinema').has('id', '182').bothE().otherV().hasLabel('comment').as('b').inE('creates').otherV().hasLabel('person').as('c').select('b', 'c')"
查询与周科和徐科都有关联的person节点,"g.V().has('person', 'name', '周科').bothE('likes').otherV().hasLabel('person').as('b').bothE('knows').otherV().has('person', 'name', '徐科').select('b')"
"查找person提交的软件, 令软件(b)的id的值等于使用软件的软件的价值的最大值, 再查找软件使用的软件","g.V().hasLabel('person').as('a').outE('commits').inV().hasLabel('software').as('b').sideEffect(__.select('b').inE('uses').outV().hasLabel('software').values('value').max().as('maxValue').select('b').property('id', __.select('maxValue'))).outE('uses').inV().hasLabel('software').as('d').select('b', 'd').by('id').by()"
请帮我查询名为何建国或者name字段小于91的author写的所有book的名称，以及这些book认识的所有book的名称。,"g.V().hasLabel('author').or(has('name', '何建国'), has('name', lt(91))).out('write').hasLabel('book').as('b').out('knows').hasLabel('book').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"找出seller的relation,或其relation的relation",g.V().hasLabel('seller').outE('relation').inV().outE('relation').inV().dedup()
"给出作家认识的作家, 令作家(b)的年龄的值等于认识作家的作家的id的个数, 再查找作家撰写的书","g.V().hasLabel('author').as('a').outE('knows').inV().hasLabel('author').as('b').select('b').as('b_node').project('age', 'd').by(__.select('b_node').inE('knows').outV().hasLabel('author').values('id').count()).by(__.select('b_node').outE('write').inV().hasLabel('book').fold())"
"以58,159,658,456作为请求点id, 源点的id等于输入表id,请帮我找出被用户王建国发布的帖子","g.inject([58, 159, 658, 456]).unfold().as('p').V().hasLabel('post').has('id', __.select('p')).as('a').in('user_publish_post').hasLabel('user').has('name', '王建国').as('b').select('a', 'b')"
"帮我查询名为日本的,id小于等于32,value不是160的friend,返回这些friend的area,和边的weight","g.V().has('name', '日本').outE('friend').as('e').inV().has('id', lte(32)).has('value', neq(160)).project('area', 'weight').by('area').by(select('e').values('weight'))"
"帮我查询病人接受的处方,返回其源点的id减8的值,以及目标点的权重除权重乘84的最大值","g.V().hasLabel('patient').as('a').outE('accept').as('e').inV().hasLabel('prescription').as('b').project('a_id_minus_8', 'max_expr').by(select('a').values('id').math('_ - 8')).by(select('b').values('weight').math('_ / _ * 84').max())"
"输入表的列为name,age,height, 数据为('赵建聪',45,183),('张强',55,191), 以属性age作为相等条件,查找编辑王轩发布的书,被其他编辑发布的数量","g.withSideEffect('p', [['name':'赵建聪','age':45,'height':183], ['name':'张强','age':55,'height':191]]).V().hasLabel('publisher').has('name','王轩').as('a').bothE('publisher_publish_book').otherV().hasLabel('book').as('b').inE('publisher_publish_book').otherV().hasLabel('publisher').as('c').where(and(__.select('a').values('age').is(eq(__.select('p').unfold().values('age'))), __.select('c').values('age').is(eq(__.select('p').unfold().values('age'))))).select('c').dedup().count()"
"返回公司美团属于的城市, 令公司的人数等于公司的价值,令城市的人数等于城市的价值,令公司的名字等于公司的id减67, 返回公司的名字, 城市的人数","g.V().hasLabel('company').has('name', '美团').as('a').outE('belong').inV().hasLabel('city').as('b').select('a', 'b').by(__.project('name', 'peopleNumber').by(__.values('id').is(neq(null)).math('_ - 67')).by(__.values('value'))).by(__.project('peopleNumber').by(__.values('value'))).select(values).unfold().project('a.name', 'b.peopleNumber').by(select('name')).by(select('peopleNumber'))"
找出91个与孙强和陈思思都存在关系的person节点,"g.V().has('name', '孙强').as('a').outE().as('e').inV().hasLabel('person').as('b').inE().as('e2').outV().has('name', '陈思思').as('c').select('b').limit(91)"
"根据address分组,计算size除164除505减805的值",g.V().hasLabel('a').group().by('address').by(values('size').math('_ / 164 / 505 - 805'))
"请帮我查找名为徐宏的person,以及与其有关的person,并返回徐宏的身高和这些person的id","g.V().has('person', 'name', '徐宏').as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a', 'b').by('height').by('id')"
查找所有和person赵轩有3度关系的软件,"g.V().has('person', 'name', '赵轩').repeat(out()).times(3).hasLabel('software')"
找出类型为person的点,g.V().hasLabel('person')
请帮我查找所有和贷款loan_68之间有存款关系的账号,"g.V().hasLabel('loan').has('name', 'loan_68').outE('deposit').inV().hasLabel('account')"
获取与person节点相关的account节点，并按其value进行分组，最后返回这些group。,g.V().hasLabel('person').bothE('own').bothV().hasLabel('account').values('value').groupCount()
 介绍一下名叫黄雪的人。,"g.V().hasLabel('person').has('name', '黄雪')"
 请帮我查询陈若涵女士的账户，并告诉我她需要还多少钱。,"g.V().has('person', 'name', '陈若涵').outE('own').inV().hasLabel('account').outE('repay').inV().hasLabel('loan').values('amount')"
"帮我查询韩建聪的点认识的person,然后帮我查询韩建聪被雇佣的公司,一起返回","g.V().has('name', '韩建聪').as('a').out('knows').hasLabel('person').as('b').select('a').in('employee').hasLabel('company').as('c').select('a', 'b', 'c')"
"查找所有和名为徐强的用户有伙伴关系,或有伙伴的伙伴关系的事项","g.V().has('user', 'name', '徐强').outE('partner').inV().hasLabel('issue').union(__.identity(), __.outE('partner').inV().hasLabel('issue')).dedup()"
找出与澳大利亚相关的城市，然后列出澳大利亚包含的其他城市，并将它们全部返回。,"g.V().has('country', 'name', '澳大利亚').as('a').bothE().otherV().hasLabel('city').as('b').select('a').outE('contain').inV().hasLabel('city').as('c').select('a', 'b', 'c')"
"请帮我查找被用户杜建国创造的合并请求,和杜建国创造的事项","g.V().hasLabel('user').has('name', '杜建国').as('b').outE('creates').as('e').inV().hasLabel('pullRequest').as('a').select('b').outE('creates').as('e2').inV().hasLabel('issue').as('c').select('a', 'b', 'c')"
"查找被卖家回答数量大于173的买家,记为relationCount,再查询这些买家回答的订单","g.V().hasLabel('buyer').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('ask').hasLabel('seller').values('id').min()).select('a', 'relationCount').as('b').where(__.select('relationCount').is(gt(173))).select('a').out('ask').hasLabel('orders').as('c').select('c')"
"给出所有源点label为account,边label为repay,并且满足条件f1等于false且f0在532到564之间,或targetId大于等于5的边","g.V().hasLabel('account').outE('repay').where(or(and(has('f1', false), has('f0', between(532, 564))), has('targetId', gte(5))))"
"以(2032-11-05,31,727),(2015-08-25,68,442),(2004-03-24,44,81),(2004-11-03,38,357)作为请求表数据,属性分别为createTime,id,weight, 源点的createTime等于输入表createTime,请帮我查找id为143的点的类别,权重","g.inject([['createTime': '2032-11-05', 'id': 31, 'weight': 727], ['createTime': '2015-08-25', 'id': 68, 'weight': 442], ['createTime': '2004-03-24', 'id': 44, 'weight': 81], ['createTime': '2004-11-03', 'id': 38, 'weight': 357]]).as('p').V().as('a').where(and(__.select('a').values('createTime').as('a_createTime'), __.select('p').unfold().values('createTime').as('p_createTime'), __.select('a_createTime').where(eq('p_createTime')), __.select('a').values('id').is(eq('143')))).select('a').project('category', 'weight').by(values('category')).by(values('weight'))"
"查询被教师马轩教的课程,和马轩教的课程","g.V().hasLabel('teacher').has('name', '马轩').as('b').outE('teach').inV().hasLabel('course').as('a').select('b').outE('teach').inV().hasLabel('course').as('c').select('a', 'b', 'c')"
找出全部名为何建国的节点观看的评论或电影或标签,"g.V().has('name', '何建国').outE('watch').inV().hasLabel(within('comment', 'film', 'tag')).dedup()"
 找出与软件Spark有使用关系，以及与赵思思有关键提交的软件。,"g.V().has('software', 'name', 'Spark').as('a').outE('uses').inV().as('b').V().has('person', 'name', '赵思思').as('c').outE('commits').inV().as('d').select('a', 'b', 'c', 'd')"
查找被repository Mybatis has的pullRequest,"g.V().hasLabel('repository').has('name', 'Mybatis').outE('has').inV().hasLabel('pullRequest').as('b', 'a').select('a', 'b')"
"返回公司申请的贷款, 令贷款的权重的值等于申请贷款的公司的id的最小值, 再查找贷款存款的账号","g.V().hasLabel('company').as('a').outE('apply').as('e').inV().hasLabel('loan').as('b').project('b', 'weight').by(identity()).by(__.in('apply').hasLabel('company').values('id').min()).select('b', 'weight').as('b_weight').select('b').outE('deposit').as('e3').inV().hasLabel('account').as('d').select('b_weight', 'd')"
找出以喜欢关系关联了帖子Post_392的用户,"g.V().hasLabel('post').has('name', 'Post_392').inE('likes').outV().dedup()"
请帮我找出与账号XiaoHu有存款和还款关系的贷款节点，并返回它们的权重、金额以及XiaoHu账号的创建日期。,"g.V().hasLabel('account').has('name', 'XiaoHu').as('a').outE('repay').inV().hasLabel('loan').as('b').inE('deposit').outV().hasLabel('account').has('name', 'XiaoHu').as('c').select('a', 'b', 'c').by('createTime').by(values('weight', 'amount').fold()).by('createTime')"
 请问文学院有哪些教师与您有亲友关系？,"g.V().has('department', 'name', '文学院').outE('friend').has('weight', within(1, 2)).inV().hasLabel('teacher')"
 请问能否帮我查询一个与标签为'大学'的点有has关系的部门，以及与这些部门有has关系的学生？,g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('student').limit(1)
"找出名为陈强的点的,salary不等于2084的parent,返回这些parent的height,和边的srcId,f0,targetId","g.V().has('name', '陈强').outE('parent').as('e').inV().has('salary', neq(2084)).as('b').select('b', 'e').by('height').by(project('srcId', 'f0', 'targetId').by(__.select('e').id()).by(__.select('e').values('f0')).by(__.select('e').inV().id()))"
"调用SSSP函数,以'DW', 55作为输入,返回id, distance","g.withSideEffect('DW', 55).V().has('id', 'DW').shortestPath().with('target', 55).path().by('id').by('distance')"
"使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部tag以id,name,value分组的name, 根据name降序排序","g.V().hasLabel('tag').group().by(project('id', 'name', 'value').by('id').by('name').by('value')).by(values('name').fold()).order(local).by(keys, desc)"
"输入请求点id的列表164, 源点的id等于输入表id,返回person的三角的环,边类型为person_pay_person, 并返回这些点的id","g.withSideEffect('p', [164]).V().has('person', 'id', __.select('p')).as('a').outE('person_pay_person').inV().as('b').outE('person_pay_person').inV().as('c').where(outE('person_pay_person').inV().as('a')).select('a', 'b', 'c').by().by(__.id()).by(__.id())"
返回物理学院的所有教师及其所教课程的ID和名称。,"g.V().has('department', 'name', '物理学院').out('has').hasLabel('teacher').out('teach').hasLabel('course').project('id', 'value').by('id').by('value')"
 找到郑若涵和周科都提交过的内容。,"g.V().has('person', 'name', '郑若涵').outE('commits').inV().as('b').inE('commits').outV().has('person', 'name', '周科').select('b')"
"查询所有名为内科的,薪资的最小值为181或性别不是male的朋友,返回这些朋友的性别,和边的f0,源点id,权重","g.V().has('name', '内科').as('a').outE('friend').as('e').inV().as('b').where(or(__.select('b').values('salary').min().is(181), __.select('b').has('gender', neq('male')))).select('b', 'e').by('gender').by(union(values('f0'), values('srcId'), values('weight')).fold())"
请帮我找出赵思琪和杜国强这两位人士的家族关系,"g.V().has('person', 'name', '赵思琪').outE('family').inV().as('b').inE('family').as('e2').outV().has('person', 'name', '杜国强').select('b').limit(102)"
 请帮我查找订单Order_120中，与买家郑宏有关联的买家节点，并返回他们的薪资和姓名。,"g.V().hasLabel('orders').has('name', 'Order_120').outE().as('e').inV().hasLabel('buyer').as('b').inE().as('e2').outV().hasLabel('buyer').has('name', '郑宏').as('c').select('b').values('salary', 'name')"
"以591作为请求点id, 源点的id等于输入表id,帮我查询全部orders以value,name分组的value, 根据value降序排序","g.inject(591).as('p').V().hasLabel('orders').as('a').where(eq('p')).by().by('id').select('a').group().by(union(values('value'), values('name')).fold()).by().order(local).by(keys, desc)"
请帮我找出与教师张建聪有关的课程，以及属于体育学院的教师，并将这些信息全部返回。,"g.V().has('teacher', 'name', '张建聪').as('a').outE('teach').inV().as('b').select('a').V().has('department', 'name', '体育学院').as('c').outE('has').inV().hasLabel('teacher').as('d').select('a', 'b', 'c', 'd')"
帮我查询身高等于153的节点,"g.V().has('height', 153)"
查询名为徐建聪且标签为seller的点的id、height和name。,"g.V().hasLabel('seller').has('name', '徐建聪').project('a.id', 'a.height', 'a.name').by('id').by('height').by('name')"
请帮我找出所有与贷款相关的账号，以及这些账号之间的转账关系,"g.V().has('loan', 'id', '150').bothE().otherV().hasLabel('account').as('b').inE('transfer').outV().hasLabel('account').as('c').select('b', 'c')"
"返回所有谷歌的点employee的person,然后返回谷歌被belong的person,一起返回","g.V().has('name', '谷歌').as('a').outE('employee').inV().hasLabel('person').as('b').select('a').inE('belong').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找person赵轩的朋友的朋友的相关者","g.V().has('person', 'name', '赵轩').out('friend').out('friend').out('relation').dedup()"
"根据age分组,计算height减198的值",g.V().hasLabel('a').group().by('age').by(values('height').math('_ - 198'))
"请帮我找出全部company以peopleNumber分组的scale, 根据scale升序排序","g.V().hasLabel('company').group().by('peopleNumber').by(values('scale').fold()).order(local).by(values, asc)"
"以504作为请求点id, 源点的id等于输入表id,帮我查询id为87的city有关的university的partner, 再帮我查询和university有关系的relation","g.withSideEffect('p', [504]).V().hasLabel('city').has('id', within('p')).has('id', '87').as('a').bothE().otherV().hasLabel('university').as('b').bothE().hasLabel('partner').otherV().as('c').select('b').bothE().hasLabel('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
请找出与吴红是同事的人，以及与吴思思是父母关系的人，并将他们全部返回。,"g.V().has('person', 'name', '吴红').as('a').out('colleague').hasLabel('person').as('b').select('a').V().has('person', 'name', '吴思思').as('c').out('parent').hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"返回buyer杜雪creates的orders,以及creates这些orders的buyer","g.V().hasLabel('buyer').has('name', '杜雪').outE('creates').inV().hasLabel('orders').as('b').inE('creates').outV().hasLabel('buyer').as('c').select('b', 'c')"
"帮我查询和仓库Tugraph有关的仓库,称为X,再帮我查询和这个X有关联的其他合并请求,以及和X有关联的事项","g.V().has('repository', 'name', 'Tugraph').as('a').bothE().otherV().hasLabel('repository').as('b').bothE().otherV().hasLabel('pullRequest').as('c').select('b').bothE().otherV().hasLabel('issue').as('d').select('a', 'b', 'c', 'd')"
"请帮我找出标签为包含,以及f0小于793且权重小于150.28,或目标点id不是131的边","g.E().hasLabel('contain').or(and(has('f0', lt(793)), has('weight', lt(150.28))), has('targetId', neq(131)))"
"帮我查询与department生物学院有关,且与course数据结构有关系的teacher节点","g.V().has('department', 'name', '生物学院').out('has').hasLabel('teacher').as('b').out('teach').has('course', 'name', '数据结构').select('b')"
 请帮我查询韩雪和Jack的读者节点公共合作伙伴名单。,"g.V().has('reader', 'name', '韩雪').as('a').outE('partner').inV().as('b').inE('partner').outV().has('reader', 'name', 'Jack').as('c').select('b').values('name')"
"查询所有与韩月存在认识关系的person,person与软件存在提交关系的点,返回这些点的id","g.V().has('name', '韩月').out('knows').hasLabel('person').out('commits').hasLabel('software').id()"
"请帮我查找所有与person有关系的person节点,且person节点的身高不为空,并返回这些person的age的平均值减91除年龄的最大值,以及person的薪资乘8624的值","g.V().hasLabel('person').as('a').outE().inV().hasLabel('person').has('height', neq(null)).as('b').select('b').dedup().project('expr1', 'expr2').by(__.values('age').mean().is(neq(null)).math('(_ - 91) / _').max()).by(__.values('salary').math('_ * 8624'))"
"返回person relates的person, 令person(b)的age的值等于relatesperson的person的height的最小值, 再查找person relates的person","g.V().hasLabel('person').as('a').outE('relates').inV().hasLabel('person').as('b').select('b').as('b_node').select('b').inE('relates').outV().hasLabel('person').values('height').min().as('min_height').select('b_node').sideEffect(__.property('age', __.select('min_height'))).select('b_node').outE('relates').inV().hasLabel('person').as('d').select('b_node').values('age').as('b_age').select('b_age', 'd')"
"请帮我查找repository has的pullRequest,返回其源点的stars除857加weight加284的值,以及目标点的changeFileNumber除167的值","g.V().hasLabel('repository').as('a').outE('has').as('e').inV().hasLabel('pullRequest').as('b').project('expr1', 'expr2').by(__.select('a').values('stars').math('_ / 857').math('_ + a.weight').math('_ + 284')).by(__.select('b').values('changeFileNumber').math('_ / 167'))"
"查询所有与韩科存在父母关系的person,person与person存在恋人关系的点,返回这些点的性别","g.V().has('name', '韩科').as('a').outE('parent').inV().hasLabel('person').as('b').outE('lover').inV().hasLabel('person').as('c').select('c').values('gender')"
"给出person何月属于的公司, 令公司的年龄等于person的薪资, 返回person的性别, 公司的人数","g.V().has('person', 'name', '何月').as('a').outE('belong').inV().hasLabel('company').as('b').sideEffect(__.select('b').property('age', __.select('a').values('salary'))).select('a', 'b').by('gender').by('peopleNumber')"
"以701,387作为请求点id, 源点的id等于输入表id,返回与person Tom有关,且与person陈若涵有关系的person节点","g.withSideEffect('p', [[701], [387]]).V().hasLabel('person').where(__.as('a').has('id', within('p')).has('name', 'Tom')).as('a').outE('person_likes_person').inV().hasLabel('person').as('b').outE('person_knows_person').inV().hasLabel('person').has('name', '陈若涵').select('b')"
请帮我查找以认识关系关联了书孤城的书,"g.V().hasLabel('book').has('name', '孤城').inE('knows').outV().hasLabel('book')"
age减age的最小值,"g.V().hasLabel('a').project('ageMinusAge').by(values('age').fold().project('age1', 'age2').by(unfold()).by(unfold()).select(values).math('age1 - age2').min())"
"给出所有和编辑李伟有关系的书或读者或编辑,返回这些点的id,创建时间","g.V().has('publisher', 'name', '李伟').bothE().otherV().hasLabel(within('book', 'reader', 'publisher')).project('id', 'createTime').by(values('id')).by(values('createTime'))"
找出与贷款defaultName有存款和还款关系的账号，并返回它们的上次登录时间、贷款defaultName的id以及权重。,"g.V().has('loan', 'name', 'defaultName').as('a').outE('deposit').inV().hasLabel('account').as('b').inE('repay').outV().has('loan', 'name', 'defaultName').as('c').select('a', 'b', 'c').by('id').by('lastLoginTime').by('weight')"
"找出department has的teacher, 令teacher的age的值等于hasteacher的department的name的求和值, 再查找teacher teach的course","g.V().hasLabel('department').as('a').outE('has').inV().hasLabel('teacher').as('b').select('b').sideEffect(__.as('b').inE('has').outV().hasLabel('department').values('name').sum().as('age')).select('b').outE('teach').inV().hasLabel('course').as('d').select('b', 'd').by('age').by()"
"输入请求点id的列表550,901,336,963,641, 以属性id作为相等条件,请帮我找出以拥有关系关联了标签文艺的电影","g.withSideEffect('p', [550, 901, 336, 963, 641]).V().hasLabel('tag').has('id', within('p')).has('name', '文艺').in('film_has_tag').hasLabel('film')"
返回周建国和王宏这两位医生共同的伙伴信息，共有101条。,"g.V().has('doctor', 'name', '周建国').outE('partner').inV().as('b').inE('partner').outV().has('doctor', 'name', '王宏').select('b').limit(101)"
请帮我查找49个与Bob和郑建国都存在关系的software节点,"g.V().has('name', 'Bob').outE().inV().hasLabel('software').as('b').inE().outV().has('name', '郑建国').select('b').limit(49)"
"查找名为赵建聪的person,以及与其有关的person,并返回赵建聪的薪资和这些person的年龄","g.V().has('person', 'name', '赵建聪').as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a', 'b').by('salary').by('age')"
给出194个与Order_446和Order_284都存在关系的买家节点,"g.V().has('name', 'Order_446').outE().inV().hasLabel('buyer').as('b').inE().outV().has('name', 'Order_284').select('b').limit(194)"
返回名为何科的节点创造的卖家或订单,"g.V().has('name', '何科').outE('creates').inV().hasLabel(within('seller', 'orders')).dedup()"
请帮我查找全部与订单Order_411有关系的订单的价值,"g.V().hasLabel('orders').has('name', 'Order_411').bothE().otherV().hasLabel('orders').values('value')"
"输入表的列为value,name,id, 数据为(87,'中国军事论坛',70), 源点的id等于输入表id,请帮我查找名为知网和天涯论坛的,label为forum的点公共的friend节点的名单","g.withSideEffect('p', [['value', 87], ['name', '中国军事论坛'], ['id', 70]]).V().hasLabel('forum').has('id', __.select('p').select('id')).has('name', '知网').out('friend').as('b').in('friend').hasLabel('forum').has('name', '天涯论坛').select('b').values('name')"
"给定图的schema如下:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出论坛天涯论坛包含的person,被其他论坛包含的数量","g.V().has('forum', 'name', '天涯论坛').out('forum_contain_person').in('forum_contain_person').hasLabel('forum').dedup().count()"
"返回和类型是person的点有likes关系的person,且和这些person有knows关系的person,且和这些person有knows关系的person",g.V().hasLabel('person').as('a').out('likes').hasLabel('person').as('b').out('knows').hasLabel('person').as('c').out('knows').hasLabel('person').as('d').select('d')
 找出与标签11相关的用户的朋友，再找出这些用户的朋友。,"g.V().has('tag', 'id', '11').as('a').bothE().otherV().hasLabel('user').as('b').bothE('friend').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
找出赵月出版的并且他知道的书,"g.V().has('publisher', 'name', '赵月').out('publish').as('b').out('knows').as('c').select('c')"
"请帮我查找名为李伟和Sam的,类型是student的点公共的partner节点的名单","g.V().has('student', 'name', '李伟').outE('partner').inV().as('b').inE('partner').outV().has('student', 'name', 'Sam').select('b').values('name')"
请帮我找出所有与person陈月有关系的person的id,"g.V().hasLabel('person').has('name', '陈月').bothE().otherV().hasLabel('person').id()"
"请帮我找出孙雪的点发布的帖子,然后请帮我找出孙雪被包含的论坛,一起返回","g.V().has('name', '孙雪').as('a').outE('publish').inV().hasLabel('post').as('b').select('a').inE('contain').outV().hasLabel('forum').as('c').select('a', 'b', 'c')"
获取所有源点为forum，边类型为contain的边。返回这些边的targetId减去776后的值，以及srcId除以160的余数。,"g.V().hasLabel('forum').outE('contain').project('targetId_minus_776', 'srcId_mod_160').by(values('targetId').math('_ - 776')).by(values('srcId').math('_ % 160'))"
"查找性别是male或名字不等于李宏的编辑发布的书的名称,以及这些书 认识的书的名称","g.V().hasLabel('publisher').has('gender', 'male').or().has('name', neq('李宏')).outE('publish').inV().hasLabel('book').as('b').outE('knows').inV().hasLabel('book').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"输入请求点id的列表156,811,662,137,682, 源点的id等于输入表id,帮我查询名为Order_178的,类别不等于水果或销量小于1704.21的朋友,返回这些朋友的名字,和边的权重,目标点id","g.inject([156, 811, 662, 137, 682]).unfold().as('p').V().has('id', __.as('p')).has('name', 'Order_178').outE('friend').as('e').inV().as('b').where(__.or(__.not(__.has('category', '水果')), __.has('sellerNumber', lt(1704.21)))).select('b', 'e').by('name').by(__.project('weight', 'targetId').by('weight').by(__.select('e').inV().id())).select(values)"
"给出和部门有关联的教师节点,并根据其薪资,性别,身高分组,返回薪资,性别,身高,以及薪资对4059取余的值","g.V().hasLabel('department').bothE('has').otherV().hasLabel('teacher').project('salary', 'gender', 'height', 'salary_mod').by(values('salary')).by(values('gender')).by(values('height')).by(math('salary % 4059')).dedup().group().by(project('salary', 'gender', 'height').by(values('salary')).by(values('gender')).by(values('height'))).by(fold())"
"给出名为马宏的点支付的所有person,并对这些person的性别进行求和","g.V().has('name', '马宏').outE('pay').inV().hasLabel('person').values('gender').sum()"
查询与李雪和马建国都有关系的所有 person 节点。,"g.V().has('name', '李雪').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '马建国').select('b').limit(83)"
"以(191,31,7132)作为请求表数据,属性分别为height,id,salary, 以属性height作为相等条件,请帮我找出与用户孙轩有user_creates_issue关系的1跳的环","g.withSideEffect('p', [['height':191, 'id':31, 'salary':7132]]).V().hasLabel('user').has('height', __.select('p').unfold().select('height')).has('name', '孙轩').as('a').bothE('user_creates_issue').bothV().where(eq('a')).as('b').select('a', 'b').by('id').by('id').select(values)"
找出同时与电影《我不是药神》和《复仇者联盟》有关系的点。,"g.V().has('film', 'name', '我不是药神').out('has').as('b').in('has').has('film', 'name', '复仇者联盟').select('b')"
"输入请求点id的列表835,855,163,418,295, 源点的id等于输入表id,请帮我找出和电影有关联的标签节点,并根据其名字分组,返回名字,以及id的最大值加69的值","g.withSideEffect('p', [835, 855, 163, 418, 295]).V().hasLabel('film').has('id', within('p')).outE('film_has_tag').inV().hasLabel('tag').group().by('name').by(__.values('id').max().math('_ + 69')).select(values).unfold().project('b.name', 'MAX(b.id) + 69').by(select(keys)).by(select(values))"
给出事项ISSUE-402属于的仓库节点拥有的用户,"g.V().hasLabel('issue').has('name', 'ISSUE-402').out('belong').hasLabel('repository').out('has').hasLabel('user')"
查找goods的1度的环,"g.V().hasLabel('goods').as('a').out().as('b').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
请找出与郑雪有关的账户，以及与徐月有关的投资公司，并将它们全部返回。,"g.V().has('person', 'name', '郑雪').as('a').out('own').as('b').select('a').V().has('person', 'name', '徐月').as('c').out('invest').as('d').select('a', 'b', 'c', 'd')"
"查找id为63的person关联的person,和以关联关系关联了这些person的其他person","g.V().has('person', 'id', 63).bothE().otherV().hasLabel('person').as('b').inE('relates').otherV().hasLabel('person').as('c').select('b', 'c')"
"输入表的列为height,gender,age, 数据为(172,'famale',30), 源点的age等于输入表age,请帮我查找全部id为172的person关联的person,和以pay关系关联了这些person的其他person","g.withSideEffect('p', [['height': 172, 'gender': 'famale', 'age': 30]]).V().hasLabel('person').has('age', __.select('p').unfold().select('age')).has('id', '172').bothE().otherV().hasLabel('person').as('b').inE('person_pay_person').otherV().hasLabel('person').as('c').select('b', 'c')"
"请帮我查找与person陈建聪有关,且与person徐建国有关系的person节点","g.V().has('person', 'name', '陈建聪').bothE('pay').bothV().hasLabel('person').where(__.bothE('knows').bothV().has('person', 'name', '徐建国')).dedup()"
"请帮我找出post Post_466 has的tag,以及has这些tag的post","g.V().hasLabel('post').has('name', 'Post_466').out('has').as('b').in('has').as('c').select('b', 'c')"
"以(8,186,'感冒药')作为请求表数据,属性分别为id,price,category, 以属性category作为相等条件,请帮我查找与部门放射科和呼吸科都存在department_has_doctor关系的点","g.withSideEffect('p', [['id':8, 'price':186, 'category':'感冒药']]).V().hasLabel('department').has('category', __.select('p').unfold().select('category')).has('name', '放射科').out('department_has_doctor').as('b').in('department_has_doctor').hasLabel('department').has('name', '呼吸科').select('b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找24个与杜宏和李国强都存在关系的orders节点","g.V().has('name', '杜宏').outE().inV().hasLabel('orders').as('b').inE().outV().has('name', '李国强').select('b').limit(24)"
"输入请求点id的列表564,73,539, 以属性id作为相等条件,找出与publisher郑梅和杜红都存在publisher_publish_book关系的点","g.withSideEffect('p', [564, 73, 539]).V().hasLabel('publisher').where(within('p')).by('id').has('name', '郑梅').outE('publisher_publish_book').inV().as('b').inE('publisher_publish_book').outV().hasLabel('publisher').has('name', '杜红').select('b').dedup()"
请帮我找出与张建聪存在咨询关系的卖家，以及这些卖家拥有的商品，并返回这些商品的名字。,"g.V().has('name', '张建聪').out('consult').hasLabel('seller').out('has').hasLabel('goods').values('name')"
"输入请求点id的列表11,174,331,142, 源点的id等于输入表id,查找全部教师的相关者,或其相关者的相关者","g.inject([11, 174, 331, 142]).unfold().as('p').V().has('teacher', 'id', __.select('p')).repeat(out('relation')).times(2).emit().dedup()"
 请帮我查找吴伟创建的评论，并统计其他人喜欢的数量。,"g.V().has('person', 'name', '吴伟').outE('creates').inV().hasLabel('comment').inE('likes').outV().hasLabel('person').count()"
"请帮我找出类型是city的所有点,并根据name从小到大排列","g.V().hasLabel('city').order().by('name', asc)"
"查找和仓库有关联的用户节点,并根据其id,身高,性别分组,返回id,身高,性别,以及age的数量除47的值","g.V().hasLabel('repository').as('a').bothE('has').as('e').otherV().hasLabel('user').as('b').group().by(select('b').values('id', 'height', 'gender')).by(select('b').values('age').count().math('_ / 47')).select(values).unfold().project('b.id', 'b.height', 'b.gender', 'COUNT(b.age) / 47').by(select(keys).select('id')).by(select(keys).select('height')).by(select(keys).select('gender')).by(select(values))"
请帮我查找并编辑与徐宏相关的作家信息，同时查询徐宏发布的其他书籍，并将结果返回。,"g.V().hasLabel('publisher').has('name', '徐宏').as('a').bothE().otherV().hasLabel('author').as('b').select('a').outE('publish').otherV().hasLabel('book').as('c').select('a', 'b', 'c')"
"返回类型是person,名为杜轩的点,返回这些点的height,salary,gender","g.V().hasLabel('person').has('name', '杜轩').project('height', 'salary', 'gender').by('height').by('salary').by('gender')"
"用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));查找所有和城市深圳之间有city_contain_company关系的公司","g.V().hasLabel('city').has('name', '深圳').outE('city_contain_company').inV().hasLabel('company')"
"返回和病人陈宏有关的病人,称为X,再返回和这个X有关联的其他处方,以及和X有关联的药品","g.V().has('patient', 'name', '陈宏').as('a').bothE().otherV().hasLabel('patient').as('b').bothE().otherV().hasLabel('prescription').as('c').select('b').bothE().otherV().hasLabel('medicine').as('d').select('a', 'b', 'c', 'd')"
"请帮我找出course的friend,或其friend的friend","g.V().hasLabel('course').out('friend').range(1, 2).dedup()"
"查找所有买家的相关者,或其相关者的相关者",g.V().hasLabel('buyer').outE('relation').inV().hasLabel('buyer').simplePath().by(T.id).times(2).emit().dedup().project('b').by()
返回buyer的3度的环,"g.V().hasLabel('buyer').as('a').repeat(both().simplePath()).times(3).where(loops().is(3)).where(__.both().where(eq('a'))).dedup().project('a.id', 'b_id').by(__.select('a').id()).by(id())"
"查找全部与张宏存在colleague关系的person,person与person存在parent关系的点,返回这些点的salary","g.V().has('name', '张宏').out('colleague').hasLabel('person').out('parent').hasLabel('person').values('salary')"
"输入表的列为price,id,name, 数据为(118,25,'阿司匹林'),(112,55,'999感冒灵'),(50,69,'阿司匹林'),(209,51,'布洛芬'), 以属性name作为相等条件,请帮我找出id为153的patient关联的prescription,和以creates关系关联了这些prescription的其他doctor","g.inject([['price':118,'id':25,'name':'阿司匹林'],['price':112,'id':55,'name':'999感冒灵'],['price':50,'id':69,'name':'阿司匹林'],['price':209,'id':51,'name':'布洛芬']]).as('p').V().hasLabel('patient').has('name', within(select('p').unfold().values('name'))).has('id', '153').as('a').bothE().as('e').otherV().hasLabel('prescription').as('b').inE('doctor_creates_prescription').as('e2').outV().hasLabel('doctor').as('c').select('b', 'c')"
"查找大学南京大学合作的公司,以及合作这些公司的大学","g.V().has('university', 'name', '南京大学').outE('cooperate').inV().hasLabel('company').as('b').inE('cooperate').outV().hasLabel('university').as('c').select('b', 'c')"
"帮我查询全部id为61的film关联的comment,和以likes关系关联了这些comment的其他person","g.V().has('film', 'id', 61).bothE().otherV().hasLabel('comment').as('b').inE('likes').otherV().hasLabel('person').as('c').select('b', 'c')"
"找出和医生点有诊断关系的病人节点,且边满足条件f0小于513,目标病人节点满足条件薪资小于1613","g.V().hasLabel('doctor').as('a').outE('diagnose').has('f0', lt(513)).as('e').inV().hasLabel('patient').has('salary', lt(1613)).as('b').select('b')"
查找前142个满足条件gender不是famale的person,"g.V().hasLabel('person').has('gender', neq('famale')).limit(142)"
"请帮我查找源点标签为大学,边标签为拥有,并且权重的最大值大于77的边",g.V().hasLabel('university').as('a').outE('has').as('e').group().by().by(values('weight').max()).unfold().filter(select(values).is(gt(77))).select('e')
 查找孙思思合作伙伴的朋友的朋友,"g.V().has('seller', 'name', '孙思思').outE('partner').inV().outE('friend').inV().outE('friend').inV()"
"返回user creates的pullRequest, 令pullRequest的createTime的值等于haspullRequest的repository的name的平均值, 再查找pullRequest belong的repository","g.V().hasLabel('user').as('a').outE('creates').inV().hasLabel('pullRequest').as('b').sideEffect(__.select('b').coalesce(__.inE('has').outV().hasLabel('repository').values('name').mean(), __.constant(0)).property('createTime', __.select('b').coalesce(__.inE('has').outV().hasLabel('repository').values('name').mean(), __.constant(0)))).select('b').outE('belong').inV().hasLabel('repository').as('d').select('b', 'd').by('createTime').by()"
"查找公司微软属于的城市,以及包含这些城市的国家, 令国家的面积等于国家的价值的最大值,令国家的人数等于公司的id对id取余的最大值,令城市的规格等于公司的人数, 返回公司的名字,城市的人数,国家的名字","g.V().has('company', 'name', '微软').as('a').outE('belong').inV().hasLabel('city').as('b').inE('contain').outV().hasLabel('country').as('c').project('a_name', 'b_peopleNumber', 'c_name').by(select('a').values('name')).by(select('b').values('peopleNumber')).by(select('c').values('name'))"
"帮我查询183个名为陈雪的点拥有的类型为商品的节点,且节点类别是电子产品","g.V().has('name', '陈雪').outE('has').inV().hasLabel('goods').has('category', '电子产品').limit(183)"
"查找person王强的全部标签为伙伴的边,并根据目标点id升序排列,返回6个","g.V().has('person', 'name', '王强').outE('partner').as('e').inV().as('b').select('e', 'b').order().by(select('e').values('targetId'), asc).limit(6).select('b')"
"帮我查询120个名为华中科技大学的点合作的类型是公司的节点,且其人数大于740,名字等于腾讯","g.V().has('name', '华中科技大学').outE('cooperate').inV().hasLabel('company').has('peopleNumber', gt(740)).has('name', '腾讯').limit(120)"
"给出doctor赵若涵 creates的prescription,返回prescription contain的medicine的weight的和除weight的值","g.V().hasLabel('doctor').has('name', '赵若涵').outE('creates').inV().hasLabel('prescription').outE('contain').inV().hasLabel('medicine').group().by(identity()).by(values('weight').sum()).unfold().select(values).as('sum_weight').select(keys).values('weight').as('weight').select('sum_weight', 'weight').by().by().math('sum_weight / weight')"
"帮我查询31个和标签等于person的点有同事关系的person,且和这些person有同事关系的person",g.V().hasLabel('person').as('a').outE('colleague').inV().hasLabel('person').as('b').outE('colleague').inV().hasLabel('person').as('c').select('c').limit(31)
"使用列为name,height,age, 数据为('吴国强',159,66),('孙轩',177,69)的子查询作为输入表, 以属性age作为相等条件,找出与person马雪和马月都存在person_lover_person关系的点","g.withSideEffect('p', [['name': '吴国强', 'height': 159, 'age': 66], ['name': '孙轩', 'height': 177, 'age': 69]]).V().hasLabel('person').has('name', '马雪').as('a').outE('person_lover_person').inV().as('b').where(__.inE('person_lover_person').outV().hasLabel('person').has('name', '马月')).select('b')"
"给出公司蚂蚁集团雇佣的person,以及雇佣这些person的公司, 令person的价值等于公司的名字, 返回公司(a)的价值,person(b)的id,公司(c)的人数","g.V().has('company', 'name', '蚂蚁集团').as('a').outE('employee').inV().hasLabel('person').as('b').inE('employee').outV().hasLabel('company').as('c').project('a.value', 'b.id', 'c.peopleNumber').by(select('a').values('name')).by(select('b').id()).by(select('c').values('peopleNumber'))"
"用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查找所有名为黄科的点认识的作家","g.V().has('author', 'name', '黄科').out('author_knows_author').hasLabel('author')"
"给出从城市伦敦出发,经过类型是属于的边,走2跳到达的国家点","g.V().has('city', 'name', '伦敦').repeat(outE('belong').inV()).times(2).hasLabel('country')"
查询与指定出版商有关联的所有书籍，以及通过'knows'关系与其他这些书籍相关联的其他所有书籍。,"g.V().has('publisher', 'id', '47').bothE().otherV().hasLabel('book').as('b').inE('knows').otherV().hasLabel('book').as('c').select('b', 'c')"
"给出和医生韩若涵有创造关系的处方,再给出以诊断关系关联了韩若涵的病人","g.V().hasLabel('doctor').has('name', '韩若涵').as('a').outE('creates').inV().as('b').select('a').inE('diagnose').outV().as('c').select('a', 'b', 'c')"
请帮我找出与person节点相关的所有person节点，然后按照它们的id进行分组，并返回这些id。,g.V().hasLabel('person').as('a').bothE('parent').otherV().hasLabel('person').as('b').select('b').values('id').group().by(identity()).by(count())
找出前94个标签为包含的边,g.E().hasLabel('contain').limit(94)
 找出教授高等数学的教师，他们之间存在teach关系。,"g.V().hasLabel('course').has('name', '高等数学').inE('teach').outV().dedup()"
 查询张轩点支付的人和被认识的人，一起返回。,"g.V().has('name', '张轩').as('a').outE('pay').inV().hasLabel('person').as('b').select('a').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部person以薪资,id分组的薪资, 根据薪资降序排序","g.V().hasLabel('person').group().by(values('salary', 'id')).order(local).by(keys, desc)"
请帮我找出属于department外科的doctor节点,"g.V().hasLabel('department').has('name', '外科').out('has').hasLabel('doctor').out('belong').hasLabel('department').dedup()"
请帮我查找与用户陈建聪有喜欢关系的3跳以内的环,"g.V().has('user', 'name', '陈建聪').as('a').repeat(bothE('likes').otherV().simplePath()).times(3).where(cyclicPath()).path().by('id')"
"以667,525,15,941作为请求点id, 以属性id作为相等条件,找出和person黄月有关的person,再找出和黄月person_likes_person的其他person,返回它们","g.withSideEffect('p', [667, 525, 15, 941]).V().hasLabel('person').has('id', within('p')).has('name', '黄月').as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a').outE('person_likes_person').as('e2').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
"以('陈强',81,'male'),('孙红',12,'male'),('何思思',86,'famale'),('周若涵',5,'male')作为请求表数据,属性分别为name,age,gender, 以属性age作为相等条件,请帮我查找id为119的person有关的person的伙伴, 再请帮我查找和person有关系的相关者","g.withSideEffect('p', [['name': '陈强', 'age': 81, 'gender': 'male'], ['name': '孙红', 'age': 12, 'gender': 'male'], ['name': '何思思', 'age': 86, 'gender': 'famale'], ['name': '周若涵', 'age': 5, 'gender': 'male']]).V().hasLabel('person').has('id', '119').as('a').filter(__.select('a').values('age').is(within(__.select('p').unfold().values('age')))).bothE().otherV().hasLabel('person').as('b').outE('partner').otherV().as('c').select('b').outE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"以355,59,314,727作为请求点id, 以属性id作为相等条件,请帮我查找所有名为Bilibili的点雇佣的person","g.inject([355, 59, 314, 727]).unfold().as('p').V().has('id', __.where(eq('p'))).has('name', 'Bilibili').outE('company_employee_person').inV().hasLabel('person').dedup()"
请帮我查找名字是英国的节点,"g.V().has('name', '英国')"
从医生黄强出发，通过归属关系的边，走三步到达的部门。,"g.V().hasLabel('doctor').has('name', '黄强').repeat(outE('belong').inV().simplePath()).times(3).hasLabel('department').dedup()"
 请问CSDN论坛中某个帖子被其他用户喜欢的数量是多少？,"g.V().has('forum', 'name', 'CSDN').outE('contain').inV().hasLabel('post').inE('likes').outV().hasLabel('user').count()"
"查找拥有合并请求PR-232的仓库,和这些仓库拥有的事项","g.V().hasLabel('pullRequest').has('name', 'PR-232').as('a').inE('has').outV().hasLabel('repository').as('b').outE('has').inV().hasLabel('issue').as('c').select('b', 'c')"
"以113作为请求点id, 以属性id作为相等条件,给出user黄建国likes的post节点has的tag","g.V().hasLabel('user').has('id', 113).has('name', '黄建国').out('user_likes_post').out('post_has_tag')"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找名为徐宏的person","g.V().hasLabel('person').has('name', '徐宏')"
 找韩宏的出版社。,"g.V().hasLabel('publisher').has('name', '韩宏')"
给出168个与程序设计和高等数学都存在关系的教师或学生或大学节点,"g.V().has('name', '程序设计').bothE().otherV().hasLabel(within('teacher', 'student', 'university')).where(__.bothE().otherV().has('name', '高等数学')).limit(168)"
"查询与名为Prescription_297和Prescription_491的点共同contain的,label为medicine的节点","g.V().has('name', 'Prescription_297').out('contain').hasLabel('medicine').as('b').in('contain').has('name', 'Prescription_491').select('b')"
"使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出与名为吴梅和孙红的点共同invest的,类型为company的节点","g.V().has('person', 'name', '吴梅').out('person_invest_company').hasLabel('company').as('b').in('person_invest_company').has('person', 'name', '孙红').select('b')"
请帮我找出陈思琪发布的，被喜欢过的，走过1到3步的帖子,"g.V().hasLabel('user').has('name', '陈思琪').outE('likes').inV().hasLabel('post').range(1, 3).values('name')"
提供所有与药品相关的药品，以及包含这些药品的其他处方。,"g.V().hasLabel('medicine').has('id', '33').bothE().otherV().hasLabel('medicine').as('b').inE('contain').outV().hasLabel('prescription').as('c').select('b', 'c')"
 找出与账户Faker有转移关系的账户。,"g.V().has('account', 'name', 'Faker').inE('transfer').outV()"
"查找label为person的点,返回127个",g.V().hasLabel('person').limit(127)
"帮我查询所有源点标签为大学,目标点标签为部门,标签为教师的边",g.V().hasLabel('university').outE('teacher').where(inV().hasLabel('department'))
"查找所有id为139的处方关联的病人,和以诊断关系关联了这些病人的其他医生","g.V().has('prescription', 'id', 139).bothE().otherV().hasLabel('patient').as('b').inE('diagnose').otherV().hasLabel('doctor').as('c').select('b', 'c')"
 找出Comment的朋友，或者找到Comment朋友的朋友。,"g.V().hasLabel('comment').outE('friend').inV().range(1, 2).dedup()"
 请帮我查找Kate和吴国强共同取消的orders节点。,"g.V().has('name', 'kate').outE('cancel').inV().hasLabel('orders').as('b').inE('cancel').outV().has('name', '吴国强').select('b')"
"请帮我找出与买家王轩有关,且与商品电脑有关系的卖家节点","g.V().hasLabel('buyer').has('name', '王轩').bothE('consult').otherV().hasLabel('seller').bothE('has').otherV().hasLabel('goods').has('name', '电脑').select('b')"
"返回所有和person陈红有关系的person,返回这些点的身高,年龄","g.V().has('person', 'name', '陈红').bothE().otherV().hasLabel('person').project('b.height', 'b.age').by(values('height')).by(values('age'))"
"使用这个图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询85个公司美团和华为,共同的朋友","g.V().has('company', 'name', '美团').out('friend').as('b').in('friend').has('company', 'name', '华为').select('b').limit(85)"
"请帮我找出全部源点标签等于公司,目标点标签等于person,标签等于person或公司或软件的边","g.V().hasLabel('company').outE('person', 'company', 'software').as('e').inV().hasLabel('person').select('e')"
"查询label为作家的点,返回6个",g.V().hasLabel('author').limit(6)
"请帮我查找源点标签为用户,边标签为创造的边,返回这些边的权重加权重的值,和权重加124.86的值","g.V().hasLabel('user').outE('creates').project('expr1', 'expr2').by(values('weight').math('_ + _')).by(values('weight').math('_ + 124.86'))"
"帮我查询id在27到58之间且性别等于male的person认识的person的名称,以及这些person 认识的person的名称","g.V().hasLabel('person').has('id', between(27, 58)).has('gender', 'male').out('knows').as('b').out('knows').as('c').select('b', 'c').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"以958,879,198,945,624作为请求点id, 源点的id等于输入表id,查询所有部门的朋友,或其朋友的朋友","g.inject([958, 879, 198, 945, 624]).unfold().as('p').V().has('department', 'id', __.as('p')).repeat(out('friend')).times(2).emit().dedup()"
 请帮我查找和Spark相关的公司，以及与Spark使用的其他软件，并返回它们。,"g.V().hasLabel('software').has('name', 'Spark').as('a').bothE().otherV().hasLabel('company').as('b').select('a').outE('uses').inV().hasLabel('software').as('c').select('a', 'b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部源点类型是person,边类型是person_knows_person,以及f1是true且权重对165.41取余减561大于682,或目标点id的最小值小于等于118.99的边","g.V().hasLabel('person').as('a').outE('person_knows_person').as('e').inV().as('b').where(or(and(__.select('e').has('f1', true), __.select('e').values('weight').math('_ % 165.41 - 561').is(gt(682))), __.select('e').values('targetId').min().is(lte(118.99)))).select('e')"
"输入表的列为id,gender,height, 数据为(84,'male',159),(86,'male',156),(77,'male',194),(19,'famale',154), 源点的gender等于输入表gender,找出与person徐建国和Alice都存在person_knows_person关系的点","g.withSideEffect('p', [['id':84, 'gender':'male', 'height':159], ['id':86, 'gender':'male', 'height':156], ['id':77, 'gender':'male', 'height':194], ['id':19, 'gender':'famale', 'height':154]]).V().hasLabel('person').has('name', '徐建国').as('a').bothE('person_knows_person').otherV().as('b').bothE('person_knows_person').otherV().hasLabel('person').has('name', 'Alice').as('c').select('b').dedup()"
 请帮我查找所有医生（源点）到处方（目标）的边，并且这些边都带有'creates'标签。,g.V().hasLabel('doctor').outE('creates').as('e').inV().hasLabel('prescription').select('e')
 找到一个同时与徐国强和吴伟存在父母关系的点。,"g.V().has('person', 'name', '徐国强').out('parent').as('b').in('parent').has('person', 'name', '吴伟').select('b')"
"查找所有源点label为作家,目标点label为书,label为读者的边",g.V().hasLabel('author').outE('reader').inV().hasLabel('book').select('e')
给出以拥有关系关联了合并请求PR-221的仓库,"g.V().hasLabel('pullRequest').has('name', 'PR-221').in('has').hasLabel('repository')"
"找出名为loan_68的,isBlock不等于false的friend,返回这些friend的isBlock,和边的timeStamp","g.V().has('name', 'loan_68').outE('friend').as('e').inV().has('isBlock', neq(false)).as('b').select('b', 'e').by('isBlock').by('timeStamp')"
"帮我查询全部和名为Post_276的post有friend关系,或有friend的friend关系的tag","g.V().hasLabel('post').has('name', 'Post_276').out('friend').out('friend').hasLabel('tag').dedup()"
"根据名字,id分组,计算价值除价值的值",g.V().hasLabel('a').group().by('name').by('id').by(values('value').fold().mean())
"帮我查询用户的相关者,或其相关者的相关者","g.V().hasLabel('user').as('a').outE('relation').inV().hasLabel('user').range(1, 2).as('b').select('b')"
"用这个schema:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询user的三角的环,边类型是user_likes_repository, 并返回这些点的id","g.V().hasLabel('user').as('a').outE('user_likes_repository').inV().as('b').outE('user_likes_repository').inV().as('c').where('a', eq('c')).select('a', 'b', 'c').by(id()).by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
"给出全部源点价值小于等于636,目标点价值为空,且标签等于合作的边","g.V().has('value', lte(636)).outE('cooperate').as('e').inV().has('value', eq(null)).select('e')"
请帮我查找被person吴月knows的person,"g.V().hasLabel('person').has('name', '吴月').as('b').outE('knows').as('e').inV().as('a').select('a', 'b')"
返回全部和电影院人人影城之间有上映关系的电影,"g.V().has('cinema', 'name', '人人影城').out('releases').hasLabel('film')"
"输入请求点id的列表583,632,901,368, 源点的id等于输入表id,给出全部书的引用,或其引用的引用","g.inject([583, 632, 901, 368]).unfold().as('p').V().has('book', 'id', __.select('p')).repeat(out('book_refers_book')).times(2).dedup()"
查找论坛的2跳以内的环,"g.V().hasLabel('forum').as('a').repeat(both().simplePath()).times(2).where(loops().is(1).or().loops().is(2)).as('b').where(__.select('a').where(eq('b'))).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
请帮我找出与TheShy和LX001账号都有repay关系的点,"g.V().hasLabel('account').has('name', 'TheShy').outE('repay').inV().as('b').inE('repay').outV().hasLabel('account').has('name', 'LX001').select('b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出满足条件scale等于medium,scale等于large的节点","g.V().has('scale', 'medium').has('scale', 'large')"
请帮我查找id为113的点的课时,"g.V().has('id', 113).values('courseHour')"
"请帮我查找与university中国科技大学有关,且与teacher何若涵有关系的department节点","g.V().has('university', 'name', '中国科技大学').out('has').as('b').in('has').has('teacher', 'name', '何若涵').select('b')"
"请帮我查找认识person郑红的person,和这些person家人的person","g.V().hasLabel('person').has('name', '郑红').as('a').inE('knows').as('e').outV().as('b').hasLabel('person').outE('family').as('e2').inV().as('c').hasLabel('person').select('b', 'c')"
"给出全部名为陈伟的,名字等于Hadoop或语言等于java的朋友,返回这些朋友的星数,和边的f1,目标点id","g.V().has('name', '陈伟').outE('friend').as('e').inV().has('name', 'Hadoop').or().has('lang', 'java').project('b.stars', 'e.f1', 'e.targetId').by(values('stars')).by(select('e').values('f1')).by(select('e').values('targetId'))"
"查找和评论Comment_413有关的person,再查找和Comment_413属于的其他电影,返回它们","g.V().hasLabel('comment').has('name', 'Comment_413').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('belong').inV().hasLabel('film').as('c').select('a', 'b', 'c')"
"使用列为name,id,salary, 数据为('徐强',56,2054),('陈思思',33,3542)的子查询作为输入表, 源点的id等于输入表id,查询源点类型为公司,目标点类型为person,类型为company_employee_person的边","g.inject(['徐强',56,2054], ['陈思思',33,3542]).as('p').select('p').unfold().as('row').select('row').by(limit(3)).as('name','id','salary').select('id').as('inputId').V().hasLabel('company').has('id', __.where(eq('inputId'))).outE('company_employee_person').as('e').inV().hasLabel('person').select('e')"
"输入表的列为age,salary,gender, 数据为(47,9751,'male'),(73,5310,'male'), 源点的age等于输入表age,找出与person黄轩有关系的person, 返回和这些person有关联的person的,身高乘身高的值","g.inject([['age': 47, 'salary': 9751, 'gender': 'male'], ['age': 73, 'salary': 5310, 'gender': 'male']]).as('p').unfold().as('p_row').select('p_row').by(__.values('age', 'salary', 'gender').fold()).V().hasLabel('person').has('age', __.select('p_row').unfold().limit(1)).has('name', '黄轩').as('a').bothE().as('e').otherV().hasLabel('person').as('b').bothE().as('e2').otherV().hasLabel('person').as('c').select('c').by('height').math('_ * _').as('result').select('result')"
"以164作为请求点id, 以属性id作为相等条件,找出所有和country法国有关系的university节点,返回这些点的value","g.withSideEffect('p', [164]).V().hasLabel('country').has('id', __.select('p')).has('name', '法国').bothE().otherV().hasLabel('university').values('value')"
找出与CSDN有包含关系的帖子，以及这些帖子与标签有'has'关系的点，并返回这些点的名称。,"g.V().has('name', 'CSDN').out('contain').hasLabel('post').out('has').values('name')"
 查找33号读者与作家之间的朋友，然后再查找作家与这些朋友之间的关系。,"g.V().has('reader', 'id', '33').as('a').bothE().otherV().hasLabel('author').as('b').bothE('partner').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
"查询与buyer周国强存在consult关系,且与goods椅子存在has关系的seller节点，返回这些seller的salary,id,及buyer周国强的name,及goods椅子的value","g.V().hasLabel('buyer').has('name', '周国强').as('a').outE('consult').inV().hasLabel('seller').as('b').inE('has').outV().hasLabel('goods').has('name', '椅子').as('c').select('a', 'b', 'c').by('name').by(values('salary', 'id')).by('value')"
找出孙国强投资的公司,"g.V().hasLabel('person').has('name', '孙国强').as('b').outE('invest').as('e').inV().hasLabel('company').as('a').select('a', 'b')"
 帮我找陈轩这个人。,"g.V().hasLabel('person').has('name', '陈轩')"
查询全部标签等于university或teacher或student的点,"g.V().hasLabel(within('university', 'teacher', 'student'))"
"查找city广州contain的university,以及cooperate这些university的company, 令university的name等于city的peopleNumber除2625的最大值,令city的peopleNumber等于company的name的最大值, 返回city的value,university的level,company的peopleNumber","g.V().has('city', 'name', '广州').as('a').outE('contain').inV().hasLabel('university').as('b').inE('cooperate').outV().hasLabel('company').as('c').select('a', 'b', 'c').by('value').by('level').by('peopleNumber')"
"使用列为category,wordCount,createTime, 数据为('诗集',182,2001-11-18),('科普',317,2025-04-30),('科普',974,2014-09-19)的子查询作为输入表, 以属性category作为相等条件,帮我查询类型是book_refers_book,且目标点id不为空,目标点id不是104的边","g.inject(['诗集', 182, '2001-11-18'], ['科普', 317, '2025-04-30'], ['科普', 974, '2014-09-19']).as('p').flatMap(select('p').unfold().as('row').select('row').limit(1).as('category').select('row').skip(1).as('wordCount').select('row').skip(2).as('createTime')).V().has('category', select('category').select('category')).as('a').outE('book_refers_book').has('targetId', neq(null)).has('targetId', neq(104)).as('e').inV().as('b').select('e')"
"查找和software Mysql有关的person,再查找和Mysql uses的其他software,返回它们","g.V().hasLabel('software').has('name', 'Mysql').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('uses').inV().hasLabel('software').as('c').select('a', 'b', 'c')"
请帮我按医生点的名字分组，查询相关的处方节点。,g.V().hasLabel('doctor').bothE('creates').bothV().hasLabel('prescription').values('name').group().by(identity()).select(values)
"找出与名为李月和周月的点共同投资的,label为公司的节点","g.V().has('name', '李月').as('a').outE('invest').inV().hasLabel('company').as('b').inE('invest').outV().has('name', '周月').as('c').select('b')"
"帮我查询标签等于包含,且源点id的个数是112.80,f0大于682的边","g.E().hasLabel('contain').where(__.outV().id().count().is(eq(112.80))).has('f0', gt(682))"
返回与reader张国强有likes关系的3跳以内的环,"g.V().has('reader', 'name', '张国强').as('a').repeat(bothE().otherV().simplePath()).times(3).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id')"
"返回全部名为中国的点的,面积不为空或人数不等于34254的朋友,返回这些朋友的名字,和边的f1,权重","g.V().has('name', '中国').outE('friend').as('e').inV().as('b').where(or(__.has('area', neq(null)), __.has('peopleNumber', neq(34254)))).select('b', 'e').by('name').by(project('f1', 'weight').by('f1').by('weight'))"
"找出和person郑国强有关的person,称为X,再找出和这个X有关联的其他person,以及和X有关联的person","g.V().has('person', 'name', '郑国强').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
返回191个与孙思思和王若涵都存在关系的订单或商品节点,"g.V().has('name', '孙思思').as('a').outE().as('e').inV().has(label, within('orders', 'goods')).as('b').inE().as('e2').outV().has('name', '王若涵').as('c').select('b').limit(191)"
 查询与类型为'country'的节点有'contain'关系的节点，以及与这些节点有'belongs'关系的节点，以及与这些节点有'contain'关系的节点。,g.V().hasLabel('country').out('contain').out('belong').out('contain')
"使用列为value,createTime,name, 数据为(202,1997-12-29,'百度贴吧'),(593,1999-10-27,'知乎'),(210,2019-05-08,'天涯论坛'),(738,2009-12-09,'中国诗词论坛')的子查询作为输入表, 源点的createTime等于输入表createTime,返回和user有关联的post节点,并根据其lang,value分组,返回lang,value,以及id对0取余的平均值","g.inject([['value':202,'createTime':'1997-12-29','name':'百度贴吧'],['value':593,'createTime':'1999-10-27','name':'知乎'],['value':210,'createTime':'2019-05-08','name':'天涯论坛'],['value':738,'createTime':'2009-12-09','name':'中国诗词论坛']]).as('p').unfold().as('row').select('row').by(__.values('createTime')).as('createTime').V().hasLabel('user').has('createTime', __.select('createTime')).bothE('user_publish_post').otherV().hasLabel('post').as('b').select('b').by(__.values('lang')).as('lang').select('b').by(__.values('value')).as('value').select('b').by(__.values('id')).as('id').select('lang','value','id').group().by(__.select('lang','value')).by(__.select('id').fold().map(__.math('_ / 0').fold().mean())).unfold().project('lang','value','avg_id_mod_0').by(__.select(keys).select('lang')).by(__.select(keys).select('value')).by(__.select(values))"
"找出label为person,名为赵若涵的点,返回这些点的age,gender,height","g.V().hasLabel('person').has('name', '赵若涵').project('age', 'gender', 'height').by('age').by('gender').by('height')"
"给出源点类型是account,边类型是transfer,以及srcId不为空且weight不是169,或f0小于等于851的边","g.V().hasLabel('account').as('a').outE('transfer').as('e').where(or(and(has('srcId', neq(null)), has('weight', neq(169))), has('f0', lte(851)))).inV().as('b').select('e')"
 给出所有和名为Comment_472的评论有伴侣关系，或者有伴侣的伴侣关系的电影。,"g.V().hasLabel('comment').has('name', 'Comment_472').repeat(out('partner')).times(2).emit().hasLabel('film').dedup()"
"请帮我查找全部和公司点有创造关系的软件节点,且边满足条件f1是false,目标软件节点名字为SprintBoot","g.V().hasLabel('company').as('a').outE('creates').has('f1', false).as('e').inV().hasLabel('software').has('name', 'SprintBoot').as('b').select('b')"
"查找id为178的点的createTime,name,changeFileNumber","g.V().has('id', 178).project('createTime', 'name', 'changeFileNumber').by(values('createTime')).by(values('name')).by(values('changeFileNumber'))"
查询杜思琪咨询的卖家的商品,"g.V().hasLabel('buyer').has('name', '杜思琪').out('consult').hasLabel('seller').out('has').hasLabel('goods')"
给出全部名为张若涵的节点likes的issue,"g.V().has('name', '张若涵').outE('likes').inV().hasLabel('issue')"
"用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出和用户马建国有关系的论坛节点,返回这些点的id,名字","g.V().hasLabel('user').has('name', '马建国').bothE().otherV().hasLabel('forum').project('b.id', 'b.name').by('id').by('name')"
找出与贷款defaultName有申请关系的公司,"g.V().hasLabel('loan').has('name', 'defaultName').inE('apply').outV().hasLabel('company')"
"输入表的列为address,weight,id, 数据为('C栋',632,2),('东区',892,62), 以属性address作为相等条件,帮我查询id为114的药品有关的医生的朋友, 再帮我查询和医生有关系的相关者","g.withSideEffect('p', [['C栋',632,2],['东区',892,62]]).V().hasLabel('medicine').has('address', within('C栋','东区')).has('id', '114').as('a').bothE().as('e').otherV().hasLabel('doctor').as('b').outE('friend').as('e2').inV().as('c').select('b').outE('relation').as('e3').inV().as('d').select('a','b','c','d')"
"查找id为102的点的id,name,value","g.V().has('id', 102).project('id', 'name', 'value').by('id').by('name').by('value')"
"请帮我查找大学四川大学拥有的部门,以及拥有这些部门的大学","g.V().has('university', 'name', '四川大学').out('has').as('b').in('has').hasLabel('university').as('c').select('b', 'c')"
"请帮我找出所有源点标签为账号,目标点标签为贷款,标签为贷款或person或账号的边","g.V().hasLabel('account').outE('loan', 'person', 'account').as('e').inV().hasLabel('loan').select('e')"
"输入请求点id的列表831,474,132,304, 源点的id等于输入表id,查找论坛包含的帖子,返回其源点的价值减444的最大值,以及目标点的value的最小值乘价值的最小值","g.withSideEffect('p', [831, 474, 132, 304]).V().hasLabel('forum').has('id', within('p')).as('a').outE('forum_contain_post').inV().hasLabel('post').as('b').select('a', 'b').by('value').project('max_a_minus_444', 'min_b_times_min_b').by(select('a').math('_ - 444').max()).by(select('b').min().math('_ * _').min())"
id的数量减id的数量,g.V().hasLabel('a').project('count_minus_id').by(count()).by(values('id').sum()).select('count_minus_id').math('_ - _')
找出医生李思思创造的处方节点包含的药品,"g.V().hasLabel('doctor').has('name', '李思思').outE('creates').inV().hasLabel('prescription').outE('contain').inV().hasLabel('medicine')"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找person杜梅认识的person,被其他person认识的数量","g.V().has('person', 'name', '杜梅').as('a').outE('person_knows_person').inV().hasLabel('person').as('b').inE('person_knows_person').outV().hasLabel('person').as('c').where(neq('a')).select('c').count()"
"以839,436作为请求点id, 以属性id作为相等条件,给出所有id为23的person关联的account,和以transfer关系关联了这些account的其他account","g.inject([839, 436]).as('p').select('p').unfold().as('id').V().hasLabel('person').has('id', '23').as('a').bothE().as('e').otherV().hasLabel('account').as('b').inE('account_transfer_account').as('e2').outV().hasLabel('account').as('c').select('b', 'c')"
"给出id为180的user有关的user的partner, 再给出和user有关系的partner","g.V().has('user', 'id', 180).as('a').bothE().otherV().hasLabel('user').as('b').bothE('partner').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"根据name分组,计算size减67的值",g.V().hasLabel('a').group().by('name').by(values('size').math('_ - 67'))
找出以提交关系关联了软件Hadoop的person,"g.V().hasLabel('software').has('name', 'Hadoop').inE('commits').outV().hasLabel('person')"
"使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));找出40个教师杜建聪和李科,共同的朋友","g.V().has('teacher', 'name', '杜建聪').outE('friend').inV().where(__.inE('friend').outV().has('teacher', 'name', '李科')).limit(40)"
请帮我找出所有徐思琪喜欢的书，并且这些书之间有引用关系，返回这些引用关系中的点名。,"g.V().has('name', '徐思琪').out('likes').hasLabel('book').out('refers').hasLabel('book').values('name')"
"请帮我查找和person马月有认识关系的person,再请帮我查找以支付关系关联了马月的person","g.V().has('person', 'name', '马月').as('a').outE('knows').inV().hasLabel('person').as('b').select('a').inE('pay').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
 找到张思琪和马轩之间共同的购买对象。,"g.V().hasLabel('person').has('name', '张思琪').as('a').outE('buy').as('e').inV().as('b').inE('buy').as('e2').outV().hasLabel('person').has('name', '马轩').as('c').select('b').dedup()"
 查找57个学院，按名称升序排序，其中57个学院中包括艺术和物理学院。,"g.V().hasLabel('department').has('name', within('艺术学院', '物理学院')).order().by('name', asc).limit(57)"
查询名为徐科的点关联的person,"g.V().has('name', '徐科').outE('relates').inV().hasLabel('person')"
 查询周思琪的伴侣的伴侣关系。,"g.V().has('person', 'name', '周思琪').out('partner').out('partner').out('relation')"
"帮我查询和公司有关联的person节点,并根据其性别分组,返回性别,以及年龄除91乘9128的值",g.V().hasLabel('company').as('a').bothE('employee').otherV().hasLabel('person').as('b').select('b').group().by('gender').by(__.values('age').math('_ / 91 * 9128').fold())
"给出所有与论坛有关系的论坛节点,且论坛节点的创建时间不等于2027年10月18日,并返回这些论坛的价值对171取余的值,以及论坛的id对89取余的值","g.V().hasLabel('forum').as('a').outE().inV().hasLabel('forum').has('createTime', neq('2027-10-18')).as('b').select('b').project('value_mod', 'id_mod').by(values('value').math('_ % 171')).by(values('id').math('_ % 89'))"
 请问张月写的所有书籍节点，它们所知道的书籍。,"g.V().hasLabel('author').has('name', '张月').out('write').as('b').out('knows').as('c').select('c')"
"返回和读者周月有关的读者,称为X,再返回和这个X有关联的其他编辑,以及和X有关联的书","g.V().hasLabel('reader').has('name', '周月').as('a').bothE().otherV().hasLabel('reader').as('b').bothE().otherV().hasLabel('publisher').as('c').select('b').bothE().otherV().hasLabel('book').as('d').select('a', 'b', 'c', 'd')"
"帮我查询所有源点label为person,边label为家人的边,返回这些边的f0乘f0的值,和weight的和对120.34取余的最小值","g.V().hasLabel('person').outE('family').as('e').project('f0_squared', 'weight_sum_mod').by(select('e').values('f0').math('_ * _')).by(values('weight').sum().math('_ % 120.34')).select('weight_sum_mod').min()"
"输入表的列为gender,salary,age, 数据为('male',5628,49),('male',1340,45),('famale',5065,46),('famale',2350,83), 源点的age等于输入表age,请帮我找出所有和名为周强的person有parent关系,或有parent的parent关系的person","g.withSideEffect('p', [['gender': 'male', 'salary': 5628, 'age': 49], ['gender': 'male', 'salary': 1340, 'age': 45], ['gender': 'famale', 'salary': 5065, 'age': 46], ['gender': 'famale', 'salary': 2350, 'age': 83]]).V().hasLabel('person').has('name', '周强').as('a').V().hasLabel('person').as('b').where(__.as('a').repeat(__.out('person_parent_person')).times(2).emit().as('b')).where(__.as('b').values('age').as('b_age').select('p').unfold().where(__.select('b_age').is(eq(__.select(values).select('age'))))).select('b')"
"请帮我找出薪资大于4610或性别是famale的person关联的person的名称,以及这些person 关联的person的名称","g.V().hasLabel('person').or(has('salary', gt(4610)), has('gender', 'famale')).as('a').outE('relates').as('e').inV().hasLabel('person').as('b').outE('relates').as('e2').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我找出源点年龄小于等于44且id在25到87之间,目标点名字不是TheShy或上次登录时间不等于2011年09月09日或价值在1到633之间,且类型是拥有的边","g.E().hasLabel('own').where(and(__.outV().has('age', lte(44)).has('id', between(25, 87)), or(__.inV().has('name', neq('TheShy')), __.inV().has('lastLoginTime', neq('2011-09-09')), __.inV().has('value', between(1, 633)))))"
请帮我找出与杜建聪和周强都有关联的69个人节点,"g.V().has('name', '杜建聪').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '周强').select('b').limit(69)"
"查询名为loan_54的点的,isBlock等于true的friend,返回这些friend的value,和边的targetId,f1","g.V().has('name', 'loan_54').outE('friend').as('e').inV().has('isBlock', true).as('b').select('b', 'e').by('value').by(union(__.select('targetId'), __.select('f1')).fold())"
"找出id为92的点的星数,语言","g.V().has('id', 92).project('stars', 'lang').by('stars').by('lang')"
给出16个与伦敦和巴黎都存在关系的university节点,"g.V().has('name', '伦敦').outE().inV().hasLabel('university').as('b').inE().outV().has('name', '巴黎').select('b').limit(16)"
"帮我查询标签为公司,名为华为的点,返回这些点的id,人数,名字","g.V().hasLabel('company').has('name', '华为').project('a.id', 'a.peopleNumber', 'a.name').by(id()).by(values('peopleNumber')).by(values('name'))"
"帮我查询film的partner,及其partner",g.V().hasLabel('film').outE('partner').inV().hasLabel('film').path().by('id').by('id').by('id').limit(2)
"使用列为value,id,price, 数据为(481,58,3097.93),(77,6,1799.85),(239,78,4410.33),(441,99,4497.90)的子查询作为输入表, 以属性id作为相等条件,请帮我查找所有源点标签等于buyer,边标签等于buyer_consult_seller的边,返回这些边的f0减554的值,和f0对f0取余的值","g.inject([['value':481,'id':58,'price':3097.93],['value':77,'id':6,'price':1799.85],['value':239,'id':78,'price':4410.33],['value':441,'id':99,'price':4497.90]]).unfold().as('p').V().hasLabel('buyer').has('id', __.select('p').select('id')).as('a').outE('buyer_consult_seller').as('e').select('e').project('expr1','expr2').by(__.values('f0').math('_ - 554')).by(__.values('f0').math('_ % _'))"
"请帮我查找标签为person,名为黄雪的点,返回这些点的年龄,薪资","g.V().hasLabel('person').has('name', '黄雪').project('age', 'salary').by('age').by('salary')"
 查询黄思思和杜雪之间共同存在的创造关系。,"g.V().has('user', 'name', '黄思思').outE('creates').inV().as('b').inE('creates').outV().has('user', 'name', '杜雪').select('b')"
请帮我查询与医生杜月有关联的部门,"g.V().hasLabel('doctor').has('name', '杜月').inE('has').outV().hasLabel('department')"
"请帮我查找国家的伙伴,或其伙伴的伙伴","g.V().hasLabel('country').as('a').outE('partner').inV().range(1, 2).as('b').select('b')"
"返回label为book的点,返回72个",g.V().hasLabel('book').limit(72)
"输入请求点id的列表933, 以属性id作为相等条件,查询id为11的person有关的person的friend, 再查询和person有关系的friend","g.withSideEffect('p', [933]).V().hasLabel('person').has('id', '11').as('a').bothE().otherV().hasLabel('person').as('b').outE('friend').otherV().as('c').select('b').outE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
 找名为韩轩的reader点，返回它们的age和id。,"g.V().hasLabel('reader').has('name', '韩轩').project('a.age', 'a.id').by('age').by('id')"
"请帮我找出用户张建国创造的事项, 令事项的名字等于事项的状态,令事项的状态等于事项的名字, 返回用户的id, 事项的名字","g.V().hasLabel('user').has('name', '张建国').as('a').outE('creates').inV().hasLabel('issue').as('b').project('a_id', 'b_name').by(select('a').values('id')).by(select('b').values('status'))"
"查询与student何雪存在selects关系,且与department物理学院存在belong关系的course节点，返回这些course的courseHour,value,credit,及student何雪的age,及department物理学院的name","g.V().has('student', 'name', '何雪').as('a').outE('selects').inV().hasLabel('course').as('b').inE('belong').outV().has('department', 'name', '物理学院').as('c').select('a', 'b', 'c').by('age').by(values('courseHour', 'value', 'credit')).by('name')"
请帮我找出与徐伟（person）存在parent关系，并与张宏（person）存在colleague关系的所有person节点。请返回这些person的salary、徐伟的gender和张宏的height,"g.V().has('person', 'name', '徐伟').as('a').out('parent').hasLabel('person').as('b').in('colleague').has('person', 'name', '张宏').as('c').select('a', 'b', 'c').by('gender').by('salary').by('height')"
"使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出以拥有关系关联了部门生物学院的大学","g.V().has('department', 'name', '生物学院').in('university_has_department').hasLabel('university')"
"调用KHOP函数,以16作为输入,返回运算结果","g.call('KHOP').with('input', 16).select('id', 'kValue')"
 提取与帖子点相关的标签节点，按名称分组并返回。,g.V().hasLabel('post').bothE('has').otherV().hasLabel('tag').values('name').groupCount()
 给医生徐若涵开处方，并给与徐若涵诊断相关的病人。,"g.V().hasLabel('doctor').has('name', '徐若涵').as('a').outE('creates').inV().hasLabel('prescription').as('b').select('a').inE('diagnose').outV().hasLabel('patient').as('c').select('a', 'b', 'c')"
"找出源点名字等于孙伟且年龄大于等于94,目标点类别的最小值大于1441.44或价格在1760.92到3995.84之间,且id为空,且类型是查看的边","g.V().has('name', '孙伟').has('age', gte(94)).outE('look').as('e').inV().as('b').where(or(__.select('b').values('category').min().is(gt(1441.44)), __.select('b').has('price', between(1760.92, 3995.84)))).has('id', null).select('e')"
找出与订单Order_318存在包含关系的商品，以及这些商品所关联的其他订单。,"g.V().hasLabel('orders').has('name', 'Order_318').as('a').outE('contain').inV().hasLabel('goods').as('b').select('a').inE('contain').outV().hasLabel('goods').as('c').select('a', 'b', 'c')"
查询部门放射科拥有的医生节点诊断的病人,"g.V().hasLabel('department').has('name', '放射科').out('has').hasLabel('doctor').out('diagnose').hasLabel('patient')"
帮我查询以观看关系关联了电影功夫的person,"g.V().hasLabel('film').has('name', '功夫').inE('watch').outV().hasLabel('person')"
"用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));返回与author黄轩和郑雪都存在author_knows_author关系的点","g.V().has('author', 'name', '黄轩').out('author_knows_author').as('b').in('author_knows_author').has('author', 'name', '郑雪').select('b')"
"使用列为id,height,salary, 数据为(48,175,3329)的子查询作为输入表, 以属性height作为相等条件,找出名为陈伟的person","g.withSideEffect('p', [['id':48, 'height':175, 'salary':3329]]).V().hasLabel('person').has('height', __.select('p').unfold().select('height')).has('name', '陈伟')"
 找出与张若涵有关联的公司，然后找出这些公司与贷款之间的关联，并返回这些点的权重。,"g.V().has('name', '张若涵').outE('invest').inV().hasLabel('company').outE('apply').inV().hasLabel('loan').values('weight')"
"给出全部与推特存在包含关系的用户,用户与帖子存在发布关系的点,返回这些点的id","g.V().has('name', '推特').out('contain').hasLabel('user').out('publish').hasLabel('post').id()"
 返回张梅医生的丈夫的朋友,"g.V().hasLabel('doctor').has('name', '张梅').outE('partner').inV().outE('partner').inV().outE('friend').inV()"
获取id在58到63之间的account repay的loan的名称，以及这些loan对应的deposit的account的名称。,"g.V().hasLabel('account').has('id', between(58, 63)).has('createTime', '1996-07-29').outE('repay').inV().hasLabel('loan').as('b').outE('deposit').inV().hasLabel('account').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"查询person张强认识的person, 令person(b)的薪资等于person(a)的id的最小值加76, 返回person(a)的名字, person(b)的id","g.V().has('person', 'name', '张强').as('a').outE('knows').inV().hasLabel('person').as('b').sideEffect(__.select('b').property('salary', __.select('a').values('id').min().math('_ + 76'))).select('a', 'b').by('name').by('id')"
"输入表的列为gender,salary,name, 数据为('male',5589,'郑伟'),('male',3608,'吴建国'), 源点的salary等于输入表salary,帮我查询teacher以name,age分组的salary, 根据salary降序排序","g.inject(['male', 5589, '郑伟'], ['male', 3608, '吴建国']).as('p').select('p').unfold().as('row').select(all, 'row').by().by(unfold()).V().hasLabel('teacher').as('a').where(eq('a')).by('salary').by(select('row').select('salary')).select('a').group().by(project('name', 'age').by('name').by('age')).by(select('a').values('salary').fold()).order(local).by(values, desc)"
 给出96个与城市有属于关系且与这些国家有包含关系的国家。,g.V().hasLabel('city').as('a').outE('belong').as('e').inV().hasLabel('country').as('b').outE('contain').as('e2').inV().hasLabel('city').as('c').select('c').limit(96)
"查找名为陈雪和张建国的,标签等于author的点公共的partner节点的名单","g.V().has('author', 'name', '陈雪').as('a').outE('partner').inV().as('b').inE('partner').outV().has('author', 'name', '张建国').as('c').select('b').values('name')"
 找出郑科店铺中所有商品，并找出向郑科咨询的买家，然后将两者一起返回。,"g.V().has('name', '郑科').as('a').outE('has').inV().hasLabel('goods').as('b').select('a').inE('consult').outV().hasLabel('buyer').as('c').select('a', 'b', 'c')"
"根据name,gender,age分组,计算salary减1588的值","g.V().hasLabel('a').group().by(values('name', 'gender', 'age')).by(values('salary').math('_ - 1588'))"
"帮我查询与名为Order_439和Order_318的点共同contain的,标签为goods的节点","g.V().has('name', 'Order_439').out('contain').hasLabel('goods').as('b').in('contain').has('name', 'Order_318').select('b')"
 查询与Calcite和Hive有关联的96个软件节点。,"g.V().has('name', 'Calcite').outE().as('e').inV().hasLabel('software').as('b').inE().as('e2').outV().has('name', 'Hive').as('c').select('b').limit(96)"
"输入请求点id的列表501,280,226, 源点的id等于输入表id,请帮我找出person徐建国的标签等于同事的边,并根据f0升序排列,返回50个","g.withSideEffect('p', [501, 280, 226]).V().hasLabel('person').where(__.values('id').is(within('p'))).has('name', '徐建国').outE('person_colleague_person').order().by('f0', asc).limit(50).inV()"
 查询标签为company且名称为滴滴的点，并返回这些点的名称。,"g.V().hasLabel('company').has('name', '滴滴').values('name')"
 给出王红老师的朋友的朋友,"g.V().hasLabel('teacher').has('name', '王红').outE('relation').inV().outE('friend').inV().outE('friend').inV()"
"查找和买家徐轩有关的卖家,称为X,再查找和这个X有关联的其他卖家,以及和X有关联的商品","g.V().has('buyer', 'name', '徐轩').as('a').bothE().otherV().hasLabel('seller').as('b').bothE().otherV().hasLabel('seller').as('c').select('b').bothE().otherV().hasLabel('goods').as('d').select('a', 'b', 'c', 'd')"
"找出名为Prescription_391和Prescription_176的,标签为prescription的点公共的partner节点的名单","g.V().has('prescription', 'name', 'Prescription_391').out('partner').as('b').in('partner').has('prescription', 'name', 'Prescription_176').select('b').values('name')"
"用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出全部名为Post_429的点拥有的标签","g.V().has('name', 'Post_429').outE('post_has_tag').inV().hasLabel('tag')"
"请帮我查找与郑宏存在喜欢关系的帖子,帖子与标签存在拥有关系的点,返回这些点的id","g.V().has('name', '郑宏').outE('likes').inV().hasLabel('post').outE('has').inV().hasLabel('tag').id()"
"查找创造事项ISSUE-466的用户,和这些用户创造的事项","g.V().has('issue', 'name', 'ISSUE-466').in('creates').as('b').out('creates').as('c').select('b', 'c')"
"用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出id为98的点的id","g.V().has('id', '98').values('id')"
"使用列为id,name,value, 数据为(39,'西虹市首富',899),(16,'少年足球',244),(32,'建国大业',38),(74,'功夫',250)的子查询作为输入表, 源点的name等于输入表name,查找所有标签以价值,id分组的价值, 根据价值降序排序","g.inject([['id':39,'name':'西虹市首富','value':899],['id':16,'name':'少年足球','value':244],['id':32,'name':'建国大业','value':38],['id':74,'name':'功夫','value':250]]).unfold().as('p').V().hasLabel('tag').has('name', __.select('p').select('name')).as('a').select('a').project('value','id').by(__.select('a').values('value')).by(__.select('a').values('id')).group().by(__.select('value')).by(__.select('id').fold()).order(local).by(keys, desc)"
"用如下schema的图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));找出所有id为127的university关联的country,和以belong关系关联了这些country的其他city","g.V().has('university', 'id', 127).bothE().otherV().hasLabel('country').as('b').inE('city_belong_country').otherV().hasLabel('city').as('c').select('b', 'c')"
"请帮我查找95个id小于等于49的评论,根据创建时间从小到大排列","g.V().hasLabel('comment').has('id', lte(49)).order().by('createTime', asc).limit(95)"
"查找与person李伟有关,且与person陈强有关系的person节点","g.V().has('person', 'name', '李伟').bothE('knows').otherV().hasLabel('person').where(bothE('knows').otherV().has('person', 'name', '陈强')).dedup()"
"帮我查询和仓库Tugraph有关的仓库,称为X,再帮我查询和这个X有关联的其他合并请求,以及和X有关联的仓库","g.V().has('repository', 'name', 'Tugraph').as('a').bothE().otherV().hasLabel('repository').as('b').bothE().as('e2').otherV().hasLabel('pullRequest').as('c').select('b').bothE().as('e3').otherV().hasLabel('repository').as('d').select('a', 'b', 'c', 'd')"
"返回151个名为何若涵的点认识的类型是作家的节点,且其薪资在5028到6603之间","g.V().has('name', '何若涵').outE('knows').inV().hasLabel('author').has('salary', between(5028, 6603)).limit(151)"
"查询147个名为韩国强的点撰写的label为书的节点,且其创建时间等于2033年10月24日,id等于57","g.V().has('name', '韩国强').outE('write').inV().hasLabel('book').has('createTime', '2033-10-24').has('id', 57).limit(147)"
"请帮我找出前192个满足条件创建时间为2025年03月03日或id不为空,且名字为Comment_207的评论","g.V().hasLabel('comment').has('createTime', '2025-03-03').or(has('id', neq(null))).has('name', 'Comment_207').limit(192)"
 找出与账号有关联的所有非Kate person节点，并找出这些节点中身高减去174后的最小值，以及身高乘155减去7841的值。,"g.V().hasLabel('account').as('a').outE().as('e').inV().hasLabel('person').has('name', neq('kate')).as('b').project('min_height_diff', 'height_calc').by(__.select('b').values('height').math('_ - 174').min()).by(__.select('b').values('height').math('_ * 155 - 7841'))"
"返回id为188的person belong的company, 并将company有关的software的lang的最大值赋值给company的name, 接着查询company的name小于188的company employee的person","g.V().has('person', 'id', 188).outE('belong').inV().hasLabel('company').as('b').sideEffect(__.select('b').aggregate('company').bothE().otherV().hasLabel('software').values('lang').max().as('maxLang').select('company').unfold().property('name', __.select('maxLang'))).select('b').has('name', lt(188)).outE('employee').inV().hasLabel('person').as('d').select('b', 'd').by('name').by()"
查询与一个人有恋人关系的人，以及与这些人有朋友关系的人，以及与这些人有父母关系的人。,g.V().hasLabel('person').as('a').out('lover').hasLabel('person').as('b').out('friend').hasLabel('person').as('c').out('parent').hasLabel('person').as('d').select('d')
 找出所有起点和终点都标记为'软件'，并且标签为'使用'的边。,g.V().hasLabel('software').outE('uses').where(inV().hasLabel('software'))
"查找id为16的帖子有关的论坛的伙伴, 再查找和论坛有关系的朋友","g.V().has('post', 'id', 16).as('a').bothE().otherV().hasLabel('forum').as('b').bothE().otherV().hasLabel('forum').as('b').outE('partner').inV().as('c').select('b').outE('friend').inV().as('d').select('a', 'b', 'c', 'd')"
"输入表的列为age,salary,gender, 数据为(29,4230,'famale'), 源点的gender等于输入表gender,请帮我找出和person吴思思之间有person_friend_person关系的person","g.withSideEffect('p', [['age': 29, 'salary': 4230, 'gender': 'famale']]).V().hasLabel('person').has('gender', __.select('p').unfold().select('gender')).has('name', '吴思思').outE('person_friend_person').inV().hasLabel('person')"
"请帮我查找person以性别,身高分组的年龄, 根据年龄降序排序","g.V().hasLabel('person').group().by('gender').by(group().by('height').by(values('age').fold())).order(local).by(values, desc)"
 请帮我查询与处方笺331相关的部门，并返回包含该处方的其他药物。,"g.V().hasLabel('prescription').has('name', 'Prescription_331').as('a').bothE().otherV().hasLabel('department').as('b').select('a').outE('contain').inV().hasLabel('medicine').as('c').select('a', 'b', 'c')"
"给出所有名为杜雪的点的,薪资大于等于3645或性别是famale的朋友,返回这些朋友的薪资,和边的f0","g.V().has('name', '杜雪').outE('friend').as('e').inV().has('salary', gte(3645)).or().has('gender', 'famale').as('b').select('b', 'e').by('salary').by('f0')"
"找出名为Geaflow123和Faker的,类型为账号的点公共的伙伴节点的名单","g.V().hasLabel('account').has('name', 'Geaflow123').as('a').outE('partner').inV().as('b').inE('partner').outV().hasLabel('account').has('name', 'Faker').as('c').select('b').values('name')"
"给出152个买家黄梅和Amily,共同的伙伴","g.V().has('buyer', 'name', '黄梅').as('a').outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().has('buyer', 'name', 'Amily').as('c').select('b').limit(152)"
找出位于广州的公司,"g.V().hasLabel('city').has('name', '广州').outE('contain').inV().hasLabel('company').as('b').select('b').as('a').select('a', 'b')"
 马雪认识的人。,"g.V().hasLabel('person').has('name', '马雪').out('relates').hasLabel('person').out('knows').hasLabel('person')"
"给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找所有名为Order_297的点contain的goods","g.V().has('name', 'Order_297').out('orders_contain_goods').hasLabel('goods')"
"以77, 'bl', 99作为输入调用KHOP函数,返回运算结果","g.call('KHOP').with('arg0', 77).with('arg1', 'bl').with('arg2', 99).select('id', 'kValue')"
"返回和类型为person的点有likes关系的person,且和这些person有knows关系的person,且和这些person有pay关系的person",g.V().hasLabel('person').as('a').outE('likes').inV().hasLabel('person').as('b').outE('knows').inV().hasLabel('person').as('c').outE('pay').inV().hasLabel('person').as('d').select('d')
"以812,726作为请求点id, 以属性id作为相等条件,帮我查询前160个满足条件height在169到191之间或age小于等于56的person","g.inject([812, 726]).unfold().as('p').V().hasLabel('person').as('a').where(eq('p')).by('id').by().and(or(and(has('height', between(169, 191))), has('age', lte(56)))).select('a').limit(160)"
返回与Post_173有has关系的所有tag，以及包含知乎的论坛的所有post。,"g.V().hasLabel('post').has('name', 'Post_173').as('a').outE('has').inV().hasLabel('tag').as('b').select('a').V().hasLabel('forum').has('name', '知乎').as('c').outE('contain').inV().hasLabel('post').as('d').select('a', 'b', 'c', 'd')"
"查询所有名为孙科的,薪资大于4596的伙伴,返回这些伙伴的薪资,和边的权重","g.V().has('name', '孙科').outE('partner').as('e').inV().has('salary', gt(4596)).project('b.salary', 'e.weight').by(values('salary')).by(select('e').values('weight'))"
"请帮我找出person的三角的环,边标签为提交, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('commits').inV().as('b').outE('commits').inV().as('c').where(__.outE('commits').inV().as('a')).select('a', 'b', 'c').by().by(id).by(id).project('a', 'b_id', 'c_id').by().by(select('b')).by(select('c'))"
请帮我查找与电子科技大学和学生韩梅相关的节点,"g.V().has('university', 'name', '电子科技大学').out('has').hasLabel('department').where(__.in('has').has('student', 'name', '韩梅')).dedup()"
 请帮我找出与类型为'书'的185个点有引用关系的书，并找出与这些书有引用关系的书。,g.V().hasLabel('book').as('a').out('refers').hasLabel('book').as('b').out('refers').hasLabel('book').as('c').select('c').limit(185)
"请帮我查找标签等于department的点,返回3个",g.V().hasLabel('department').limit(3)
"帮我查询id为128的点的id,amount,weight","g.V().has('id', 128).project('id', 'amount', 'weight').by(values('id')).by(values('amount')).by(values('weight'))"
"给出全部id为70的订单关联的订单,和以取消关系关联了这些订单的其他买家","g.V().hasLabel('orders').has('id', 70).bothE().otherV().hasLabel('orders').as('b').inE('cancel').outV().hasLabel('buyer').as('c').select('b', 'c')"
"请帮我查找所有源点类型为医生,边类型为诊断,且权重不为空或目标点id大于等于199或权重不等于188.41的边","g.V().hasLabel('doctor').outE('diagnose').or(has('weight', neq(null)), has('targetId', gte(199)), has('weight', neq(188.41))).dedup()"
请帮我找出所有性别为女性的与department有关联的doctor节点，然后返回这些节点的salary乘以salary的值和height的数量乘以height的值。,"g.V().hasLabel('department').as('a').outE().as('e').inV().hasLabel('doctor').has('gender', 'famale').as('b').project('salary_squared', 'height_count_times_height').by(select('b').values('salary').math('_ * _')).by(select('b').values('height').count().math('_ * _'))"
请找出与浙江大学有合作关系的公司，以及包含韩国的 city，并将它们全部返回。,"g.V().has('university', 'name', '浙江大学').as('a').outE('cooperate').inV().as('b').V().has('country', 'name', '韩国').as('c').outE('contain').inV().as('d').select('a', 'b', 'c', 'd')"
"返回名为王建聪的issue或pullRequest,以及与其有关的pullRequest,并返回王建聪的height和这些pullRequest的createTime","g.V().hasLabel(within('issue', 'pullRequest')).has('name', '王建聪').as('a').bothE().otherV().hasLabel('pullRequest').as('b').select('a', 'b').by(values('height')).by(values('createTime'))"
"使用列为gender,name,salary, 数据为('famale','杜国强',1782)的子查询作为输入表, 以属性gender作为相等条件,帮我查询论坛的3度以内的环","g.withSideEffect('p', [['gender': 'famale', 'name': '杜国强', 'salary': 1782]]).V().hasLabel('forum').has('gender', __.select('p').unfold().select('gender')).as('a').both().as('b').both().where(eq('a')).select('a', 'b').by('id').by('id')"
"帮我查询和处方Prescription_174有包含关系的药品,再帮我查询以包含关系关联了Prescription_174的药品","g.V().hasLabel('prescription').has('name', 'Prescription_174').as('a').outE('contain').inV().hasLabel('medicine').as('b').select('a').inE('contain').outV().hasLabel('medicine').as('c').select('a', 'b', 'c')"
"帮我查询所有Flink的点has的issue,然后帮我查询Flink被belong的issue,一起返回","g.V().has('name', 'Flink').as('a').outE('has').inV().hasLabel('issue').as('b').select('a').inE('belong').outV().hasLabel('issue').as('c').select('a', 'b', 'c')"
查找所有与书三体有关系的读者的id,"g.V().has('book', 'name', '三体').bothE().otherV().hasLabel('reader').id()"
按年龄和ID对卖家进行分组，然后按照性别从A到Z排序。,"g.V().hasLabel('seller').group().by(values('age', 'id')).by(values('gender').fold()).order(local).by(keys, asc).unfold().project('gender').by(select(values).unfold())"
"请帮我找出所有源点id不为空且id的平均值等于50,目标点销量是302.56或销量小于等于814.14,且标签等于拥有的边","g.V().has('id', neq(null)).where(__.mean().by('id').is(eq(50))).outE('has').where(__.inV().has('sellerNumber', within(302.56)).or().has('sellerNumber', lte(814.14))).dedup()"
"使用列为age,height,id, 数据为(89,156,85)的子查询作为输入表, 源点的age等于输入表age,请帮我查找account XiaoHu repay的loan,被其他account repay的数量","g.withSideEffect('p', [['age': 89, 'height': 156, 'id': 85]]).V().hasLabel('account').has('age', __.select('p').unfold().select('age')).has('name', 'XiaoHu').outE('account_repay_loan').inV().hasLabel('loan').inE('account_repay_loan').outV().hasLabel('account').count()"
找出所有与订单Order_402有关系的买家的性别,"g.V().hasLabel('orders').has('name', 'Order_402').bothE().otherV().hasLabel('buyer').values('gender')"
"给出label为likes,并且满足条件srcId在68到117之间或srcId减11大于等于892或f0在514到982之间的边","g.E().hasLabel('likes').or(has('srcId', between(68, 117)), has('srcId', P.gte(903)), has('f0', between(514, 982)))"
 找出标签为'部门'且名称为'体育学院'的点，并返回它们的大小。,"g.V().hasLabel('department').has('name', '体育学院').values('size')"
"帮我查询67个和类型是person的点有拥有关系的账号,并且和这些账号有还款关系的贷款",g.V().hasLabel('person').as('a').outE('own').as('e').inV().hasLabel('account').as('b').outE('repay').as('e2').inV().hasLabel('loan').as('c').select('c').limit(67)
查找被comment Comment_151 belong的film,"g.V().hasLabel('comment').has('name', 'Comment_151').outE('belong').inV().hasLabel('film').as('b').inV().as('a').select('a', 'b')"
"使用列为id,scale,value, 数据为(89,'medium',484),(7,'large',723),(54,'medium',329)的子查询作为输入表, 以属性scale作为相等条件,帮我查询和city有关联的country节点,并根据其peopleNumber,value分组,返回peopleNumber,value,以及value对value取余的个数","g.inject([['id':89,'scale':'medium','value':484],['id':7,'scale':'large','value':723],['id':54,'scale':'medium','value':329]]).as('p').unfold().as('row').select('row').by().project('scale').by(select('row').values('scale')).select('scale').as('p_scale').V().hasLabel('city').has('scale', select('p_scale')).as('a').bothE('city_belong_country').otherV().hasLabel('country').as('b').select('b').values('peopleNumber','value').as('peopleNumber','value').select('peopleNumber','value').group().by(project('peopleNumber','value').by(select('peopleNumber')).by(select('value'))).by(count()).select(values).unfold().project('peopleNumber','value','count').by(select(keys).select('peopleNumber')).by(select(keys).select('value')).by(select(values))"
 找出所有标签为'用户'的点，然后按它们对应的ID从小到大排序。,"g.V().hasLabel('user').order().by('id', asc)"
"请帮我查找与person赵建国有关,且与loan loan_47有关系的company节点","g.V().hasLabel('person').has('name', '赵建国').bothE('invest').otherV().hasLabel('company').bothE('apply').otherV().hasLabel('loan').has('name', 'loan_47').select('company').dedup()"
"查询publisher的partner,或其partner的partner","g.V().hasLabel('publisher').outE('partner').inV().range(1, 2).dedup()"
查询与《呐喊》有关的编辑，然后查询《呐喊》引用的其他书籍，并将它们返回。,"g.V().hasLabel('book').has('name', '呐喊').as('a').bothE().as('e').otherV().hasLabel('publisher').as('b').select('a').outE('refers').as('e2').inV().hasLabel('book').as('c').select('a', 'b', 'c')"
"以589作为请求点id, 以属性id作为相等条件,请帮我查找名为Prescription_246的prescription,以及与其有关的prescription,并返回Prescription_246的id和这些prescription的name","g.withSideEffect('p', [589]).V().hasLabel('prescription').has('id', __.select('p')).has('name', 'Prescription_246').as('a').bothE().as('e').otherV().hasLabel('prescription').as('b').select('a', 'b').by('id').by('name')"
"请帮我查找类型是标签的点,返回67个",g.V().hasLabel('tag').limit(67)
找出TheShy和Light的共同好友，共有95人。,"g.V().has('account', 'name', 'TheShy').out('friend').as('b').in('friend').has('account', 'name', 'Light').select('b').limit(95)"
 返回物理学院相关者的相关者。,"g.V().has('department', 'name', '物理学院').out('relation').out('relation').out('relation')"
"给出被医生黄建国属于的部门,和黄建国创造的处方","g.V().hasLabel('doctor').has('name', '黄建国').as('b').outE('creates').inV().hasLabel('prescription').as('c').select('b').inE('belong').outV().hasLabel('department').as('a').select('a', 'b', 'c')"
"找出全部account的friend,或其friend的friend","g.V().hasLabel('account').out('friend').range(1, 2).dedup()"
年龄除95除年龄的数量,g.V().hasLabel('a').project('result').by(values('age').math('/ 95').math('/ age')).count()
"请帮我查找作家何梅的全部朋友,的f0乘f0的最小值","g.V().has('author', 'name', '何梅').outE('friend').project('f0_squared').by(values('f0').math('_ * _')).select('f0_squared').min()"
 返回university武汉大学的学生薪资，需要先查询university武汉大学下属的部门，再查询每个部门的学生薪资。,"g.V().has('university', 'name', '武汉大学').out('has').hasLabel('department').out('has').hasLabel('student').values('salary')"
"根据性别,薪资,年龄分组,计算薪资减5929的值","g.V().hasLabel('a').group().by(values('gender', 'salary', 'age').fold()).by(values('salary').math('_ - 5929').fold())"
"以991,956,680,54作为请求点id, 以属性id作为相等条件,给出评论Comment_100的所有label为伙伴的边,并根据目标点id升序排列,返回28个","g.inject([991, 956, 680, 54]).unfold().as('p').V().hasLabel('comment').has('id', __.select('p')).has('name', 'Comment_100').outE('partner').as('e').inV().as('b').order().by(__.select('e').values('targetId'), asc).limit(28).select('b')"
"请帮我找出和标签等于作家的点有撰写关系的书,且和这些书有引用关系的书,且和这些书有引用关系的书",g.V().hasLabel('author').as('a').out('write').hasLabel('book').as('b').out('refers').hasLabel('book').as('c').out('refers').hasLabel('book').as('d').select('d')
 请问能否帮我查询一下，郑若涵认识的所有人的信息？,"g.V().has('person', 'name', '郑若涵').out('knows').out('knows').dedup()"
 请帮我查找与用户'孙梅'有关，且包含标签'其他'的帖子节点。,"g.V().has('user', 'name', '孙梅').bothE('likes').otherV().hasLabel('post').bothE('has').otherV().has('tag', 'name', '其他').select('b')"
"请帮我找出被person孙国强拥有的账号,和孙国强申请的贷款","g.V().hasLabel('person').has('name', '孙国强').as('b').outE('own').inV().hasLabel('account').as('a').select('b').outE('apply').inV().hasLabel('loan').as('c').select('a', 'b', 'c')"
帮我查一下郑思思点赞和被认识的所有人，一起返回,"g.V().has('name', '郑思思').as('a').outE('likes').inV().hasLabel('person').as('b').select('a').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"返回46个person孙月和何轩,共同的伙伴","g.V().has('person', 'name', '孙月').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '何轩').select('b').limit(46)"
"调用SSSP函数,以66, 'ZG'作为输入,返回id, distance","g.call('SSSP').with('input1', 66).with('input2', 'ZG').select('id', 'distance')"
 请帮我查询comment节点中，与张国强有关且与大众影院有关的评论，并返回它们的名称、创建时间和单词计数。,"g.V().has('person', 'name', '张国强').outE().inV().hasLabel('comment').as('b').inE().outV().has('cinema', 'name', '大众影院').select('b').values('name', 'createTime', 'wordCount')"
"请帮我找出153个buyer徐思琪和赵科,共同的partner","g.V().has('buyer', 'name', '徐思琪').outE('partner').inV().as('b').inE('partner').outV().has('buyer', 'name', '赵科').select('b').limit(153)"
"给出买家李轩创造的订单,以及取消这些订单的买家, 令订单的价格等于订单的id的平均值, 返回买家(a)的薪资,订单(b)的名字,买家(c)的名字","g.V().hasLabel('buyer').has('name', '李轩').as('a').outE('creates').inV().hasLabel('orders').as('b').inE('cancel').outV().hasLabel('buyer').as('c').select('a', 'b', 'c').by('salary').by('name').by('name').project('a_salary', 'b_name', 'c_name').by(select('a')).by(select('b')).by(select('c'))"
"返回和类型是买家的点有咨询关系的卖家,以及和这些卖家有回答关系的买家,以及和这些买家有咨询关系的卖家",g.V().hasLabel('buyer').as('a').out('consult').hasLabel('seller').as('b').in('ask').hasLabel('buyer').as('c').out('consult').hasLabel('seller').as('d').select('d')
"返回invest company美团的person,和这些person invest的company","g.V().hasLabel('company').has('name', '美团').in('invest').as('b').out('invest').as('c').select('b', 'c')"
请帮我找出全部label为university的点,g.V().hasLabel('university')
找到所有源点标签为公司，目标点标签为贷款，且标签为申请的边。,g.E().hasLabel('apply').where(outV().hasLabel('company')).where(inV().hasLabel('loan'))
"请帮我找出publisher周雪的所有relation,的srcId加96的值","g.V().has('publisher', 'name', '周雪').outE('relation').project('result').by(values('srcId').math('_ + 96'))"
给出与学生何雪和孙伟都存在选择关系的点,"g.V().has('student', 'name', '何雪').outE('selects').inV().as('b').inE('selects').outV().has('student', 'name', '孙伟').select('b').dedup()"
返回徐建国有喜欢关系的人，以及这些人中与徐建国有认识关系的人。,"g.V().has('person', 'name', '徐建国').as('a').out('likes').as('b').select('a').in('knows').as('c').select('a', 'b', 'c')"
"帮我查询公司华为的所有label为相关者的边,并根据源点id升序排列,返回126个","g.V().hasLabel('company').has('name', '华为').outE('relation').order().by('srcId', asc).limit(126).inV()"
"帮我查询全部和大学清华大学有关系的大学,返回这些点的面积","g.V().has('university', 'name', '清华大学').bothE().otherV().hasLabel('university').values('area')"
"以377,6作为请求点id, 源点的id等于输入表id,查询所有物理学院的点拥有的教师,然后查询物理学院被拥有的大学,一起返回","g.inject([377, 6]).as('p').flatMap(select('p').unfold().as('id')).V().has('id', where(eq('id'))).has('name', '物理学院').as('a').outE('department_has_teacher').inV().hasLabel('teacher').as('b').select('a').inE('university_has_department').outV().hasLabel('university').as('c').select('a', 'b', 'c')"
"帮我查询label为撰写,以及满足条件目标点id大于44的边","g.E().hasLabel('write').has('targetId', gt(44))"
"帮我查询全部和person点有申请关系的贷款节点,且边满足条件权重大于等于118.29,目标贷款节点满足条件id大于等于58","g.V().hasLabel('person').as('a').outE('apply').has('weight', gte(118.29)).as('e').inV().hasLabel('loan').has('id', gte(58)).as('b').select('b')"
"给出名为重庆大学的大学,以及与其有关的城市,并返回重庆大学的等级和这些城市的id","g.V().has('university', 'name', '重庆大学').as('a').bothE().as('e').otherV().hasLabel('city').as('b').select('a', 'b').by(values('level')).by(values('id'))"
"请帮我找出107个和标签为账号的点有转账关系的账号,且和这些账号有还款关系的贷款",g.V().hasLabel('account').as('a').outE('transfer').as('e').inV().hasLabel('account').as('b').outE('repay').as('e2').inV().hasLabel('loan').as('c').select('c').limit(107)
 找出与武汉有包含关系且与微软有合作关系的大学，返回它们的价值、ID、武汉的名称和微软的价值。,"g.V().has('city', 'name', '武汉').as('a').outE('contain').inV().hasLabel('university').as('b').inE('cooperate').outV().has('company', 'name', '微软').as('c').select('a', 'b', 'c').by('name').by(values('value', 'id')).by('value')"
 从韩月出发，沿着认识边走3度，到达哪个点？,"g.V().has('person', 'name', '韩月').repeat(out('knows')).times(3).hasLabel('person')"
请帮我找出与李伟和吴建国都相关的人。,"g.V().has('person', 'name', '李伟').bothE('pay').bothV().hasLabel('person').where(bothE('likes').bothV().has('person', 'name', '吴建国')).dedup()"
 列出XXD和Light之间转账的账户。,"g.V().hasLabel('account').has('name', 'XXD').outE('transfer').inV().as('b').inE('transfer').outV().hasLabel('account').has('name', 'Light').select('b')"
找出所有源点为电影院，目标点为电影且标签为上映的边。,g.V().hasLabel('cinema').outE('releases').as('e').inV().hasLabel('film').select('e')
"给出id不等于16的城市包含的公司的名称,以及这些公司 合作的大学的名称","g.V().hasLabel('city').has('id', neq(16)).outE('contain').inV().hasLabel('company').as('b').outE('cooperate').inV().hasLabel('university').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
找出以teach关系关联了course数据结构的teacher,"g.V().hasLabel('course').has('name', '数据结构').in('teach').hasLabel('teacher')"
"请帮我找出和person周若涵有关的person,称为X,再请帮我找出和这个X有关联的其他person,以及和X有关联的person","g.V().has('person', 'name', '周若涵').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
 请问医生陈建聪所在的部门有多少个其他医生也在那里工作？,"g.V().hasLabel('doctor').has('name', '陈建聪').outE('belong').inV().hasLabel('department').inE('belong').outV().hasLabel('doctor').where(neq('陈建聪')).count()"
查询id为70的点的价值,"g.V().has('id', 70).values('value')"
"查找所有名为何红的,id不等于50或名字是韩科的伙伴,返回这些伙伴的id,和边的源点id","g.V().has('name', '何红').as('a').outE('partner').as('e').inV().as('b').where(or(__.not(has('id', 50)), has('name', '韩科'))).select('b', 'e').by('id').by('srcId')"
"以(168,1,'male'),(191,62,'male'),(155,49,'male')作为请求表数据,属性分别为height,id,gender, 源点的id等于输入表id,请帮我找出编辑郑梅发布的书,被其他书认识的数量","g.inject([['height':168,'id':1,'gender':'male'],['height':191,'id':62,'gender':'male'],['height':155,'id':49,'gender':'male']]).as('p').unfold().as('p_row').select('p_row').by(__.project('height','id','gender').by(__.select('height')).by(__.select('id')).by(__.select('gender'))).V().hasLabel('publisher').has('id', __.select('p_row').select('id')).has('name', '郑梅').as('a').outE('publisher_publish_book').as('e').inV().hasLabel('book').as('b').inE('knows').as('e2').outV().hasLabel('book').as('c').select('c').count()"
"返回作家的相关者,或其相关者的相关者",g.V().hasLabel('author').outE('relation').inV().path().by(__.id()).by(__.id()).limit(2).unfold().tail(1).id()
"请帮我查找与person何国强存在申请关系,且与账号XiaoHu存在存款关系的贷款节点，返回这些贷款的id,金额,权重,及person何国强的性别,及账号XiaoHu的价值","g.V().has('person', 'name', '何国强').as('a').outE('apply').inV().hasLabel('loan').as('b').inE('deposit').outV().has('account', 'name', 'XiaoHu').as('c').select('a', 'b', 'c').by(values('gender')).by(values('id', 'amount', 'weight')).by(values('value'))"
"查询person的三角的环,边标签为own, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('own').inV().as('b').outE('own').inV().as('c').where(__.as('c').out('own').as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"请帮我找出id为59的person拥有的账号, 并将账号有关的贷款的金额的平均值赋值给账号的名字, 接着查询账号的名字小于59的账号转账的账号","g.V().has('person', 'id', 59).out('own').hasLabel('account').as('b').project('b_name', 'd').by(coalesce(select('b').bothE().otherV().hasLabel('loan').values('amount').mean(), constant(0))).by(select('b').filter(project('name').by(coalesce(select('b').bothE().otherV().hasLabel('loan').values('amount').mean(), constant(0))).select('name').is(lt(59))).out('transfer').hasLabel('account'))"
"查询和标签为publisher的点有publish关系的book,并且和这些book有refers关系的book,并且和这些book有refers关系的book",g.V().hasLabel('publisher').as('a').out('publish').hasLabel('book').as('b').out('refers').hasLabel('book').as('c').out('refers').hasLabel('book').as('d').select('d')
请帮我查找与教师韩建聪和何建国都存在教关系的点,"g.V().has('teacher', 'name', '韩建聪').outE('teach').inV().as('b').inE('teach').outV().has('teacher', 'name', '何建国').select('b')"
 请帮我查找订单类型为Order_289的点，并返回它们的名字。,"g.V().hasLabel('orders').has('name', 'Order_289').values('name')"
"以267,219,901,585作为请求点id, 以属性id作为相等条件,请帮我找出与student徐建国有关系的teacher的gender","g.inject([267, 219, 901, 585]).unfold().as('p').V().hasLabel('student').has('id', __.as('p')).has('name', '徐建国').bothE().otherV().hasLabel('teacher').values('gender')"
返回36个用户喜欢的帖子及其相关的标签,g.V().hasLabel('user').as('a').outE('likes').as('e').inV().hasLabel('post').as('b').outE('has').as('e2').inV().hasLabel('tag').as('c').select('c').limit(36)
"用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出名为XXD和Zeus的,标签等于账号的点公共的相关者节点的名单","g.V().has('account', 'name', 'XXD').outE('relation').inV().as('b').inE('relation').outV().has('account', 'name', 'Zeus').select('b').values('name')"
"请帮我找出id为72的点的名字,字数","g.V().has('id', 72).project('a.name', 'a.wordCount').by('name').by('wordCount')"
"查询全部吴思琪的点认识的作家,然后查询吴思琪被认识的作家,一起返回","g.V().has('name', '吴思琪').as('a').out('knows').hasLabel('author').as('b').select('a').in('knows').hasLabel('author').as('c').select('a', 'b', 'c')"
 找出周强发布的、与悬疑标签拥有关系的帖子，返回这些帖子的时间戳、周强的薪资和悬疑标签的ID。,"g.V().hasLabel('user').has('name', '周强').as('a').outE('publish').inV().hasLabel('post').as('b').inE('has').outV().hasLabel('tag').has('name', '悬疑').as('c').select('a', 'b', 'c').by('salary').by('createTime').by('id')"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询名为王月的person","g.V().hasLabel('person').has('name', '王月')"
"以('Order_168',4108.51,50),('Order_480',4787.47,40)作为请求表数据,属性分别为name,price,id, 以属性id作为相等条件,请帮我找出前6个标签为buyer_consult_seller的边","g.inject([['Order_168', 4108.51, 50], ['Order_480', 4787.47, 40]]).as('p').flatMap(select('p').unfold()).as('row').select('row').by(limit(local, 1)).as('name').select('row').by(limit(local, 2)).as('price').select('row').by(limit(local, 3)).as('id').select('id').V().has('id', eq(select('id'))).outE('buyer_consult_seller').limit(6)"
"以912,718,128,430作为请求点id, 源点的id等于输入表id,请帮我查找和person杜建国有person_knows_person关系的person,以及和person张梅有person_likes_person关系的person,将它们都返回","g.withSideEffect('p', [912, 718, 128, 430]).V().hasLabel('person').where(and(__.has('id', within('p')), __.has('name', '杜建国'))).as('a').outE('person_knows_person').inV().as('b').select('a').V().hasLabel('person').has('name', '张梅').as('c').outE('person_likes_person').inV().as('d').select('a', 'b', 'c', 'd')"
请帮我查找名为陈若涵的节点接受的部门或医生,"g.V().has('name', '陈若涵').outE('accept').inV().hasLabel(within('department', 'doctor')).dedup()"
"请帮我查找全部person的relation,或其relation的relation",g.V().hasLabel('person').outE('relation').inV().outE('relation').inV().dedup()
返回与post Post_168有has关系的1跳以内的环,"g.V().hasLabel('post').has('name', 'Post_168').as('a').bothE('has').bothV().where(neq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"返回所有名为计算机网络的,id为8或名字不等于java程序设计的引用,返回这些引用的字数,和边的源点id","g.V().has('name', '计算机网络').outE('refers').as('e').inV().has('id', 8).or().has('name', neq('java程序设计')).select('e').by('srcId').as('srcId').select('e').inV().values('wordCount').as('wordCount').select('srcId', 'wordCount')"
找出所有生物学院的教师，然后找出这些教师所在的大学，并将它们一起返回。,"g.V().has('name', '生物学院').as('a').outE('has').inV().hasLabel('teacher').as('b').select('a').inE('has').outV().hasLabel('university').as('c').select('a', 'b', 'c')"
"查找买家韩建国查看的商品, 令买家的id等于买家的性别的最大值,令商品的价格等于商品的名字,令买家的名字等于买家的名字, 返回买家的薪资, 商品的类别","g.V().hasLabel('buyer').has('name', '韩建国').as('a').outE('look').inV().hasLabel('goods').as('b').select('a', 'b').by(project('id', 'name', 'salary').by(select('a').values('gender').max()).by(select('a').values('name')).by(select('a').values('salary'))).by(project('price', 'category').by(select('b').values('name')).by(select('b').values('category'))).select(values).unfold().project('a.salary', 'b.category').by(select('a').select('salary')).by(select('b').select('category'))"
"给出person周若涵的全部类型为朋友的边,并根据源点id从小到大排列,返回39个","g.V().has('person', 'name', '周若涵').outE('friend').order().by('srcId', asc).limit(39).inV()"
获取country表中，包含id在54到93之间且value在167到304之间的city的城市名和这些city所属的country名。,"g.V().hasLabel('country').has('id', between(54, 93)).has('value', between(167, 304)).out('contain').hasLabel('city').as('b').out('belong').hasLabel('country').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我查找id为157的标签有关的评论的朋友, 再请帮我查找和评论有关系的相关者","g.V().has('tag', 'id', 157).as('a').bothE().otherV().hasLabel('comment').as('b').bothE('friend').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"查询全部与loan_41存在deposit关系的account,account与account存在transfer关系的点,返回这些点的id","g.V().has('name', 'loan_41').outE('deposit').inV().hasLabel('account').outE('transfer').inV().hasLabel('account').values('id')"
查询全部名为张强的节点发布的标签或用户或论坛,"g.V().has('name', '张强').outE('publish').inV().hasLabel(within('tag', 'user', 'forum')).dedup()"
给出前177个label为write的边,g.E().hasLabel('write').limit(177)
"帮我查询全部源点权重大于等于756,目标点id小于66或语言是go,且类型为属于的边","g.E().hasLabel('belong').where(and(__.outV().has('weight', gte(756)), or(__.inV().has('id', lt(66)), __.inV().has('lang', 'go'))))"
"查找所有和person陈月有关系的公司或贷款,返回这些点的创建时间,名字","g.V().has('person', 'name', '陈月').bothE().otherV().hasLabel(within('company', 'loan')).project('b.createTime', 'b.name').by(values('createTime')).by(values('name'))"
 返回吴伟的合作伙伴的合作伙伴。,"g.V().has('seller', 'name', '吴伟').out('partner').out('partner').dedup()"
 张轩认识哪些作家？,"g.V().hasLabel('author').has('name', '张轩').as('b').outE('knows').inV().hasLabel('author').as('a').select('a', 'b')"
计算所有城市的peopleNumber的最大值除人数加95的值,"g.V().hasLabel('city').values('peopleNumber').max().as('maxPeople').select('maxPeople').as('max').constant(95).as('constant').select('maxPeople').math('_ / __.select(""maxPeople"").value() + __.select(""constant"").value()')"
"请帮我找出所有和读者杜国强有关系的作家或书,返回这些点的id,创建时间,字数","g.V().has('reader', 'name', '杜国强').bothE().otherV().hasLabel(within('author', 'book')).project('id', 'createTime', 'wordCount').by(values('id')).by(values('createTime')).by(values('wordCount'))"
"查询学生周红的所有类型为相关者的边,并根据权重升序排列,返回155个","g.V().hasLabel('student').has('name', '周红').outE('relation').order().by('weight', asc).limit(155).inV()"
"请帮我找出全部公司以人数,价值,名字分组的id, 根据id降序排序","g.V().hasLabel('company').group().by(values('peopleNumber', 'value', 'name').fold()).by(values('id').fold()).order(local).by(keys, desc).select(values).unfold()"
"请帮我找出全部源点标签等于post,边标签等于has的边,返回这些边的srcId的平均值对11取余乘79的值,和srcId的平均值加93乘61的值","g.V().hasLabel('post').outE('has').project('avg_srcId_mod', 'avg_srcId_plus').by(__.values('srcId').mean().math('_ % 11 * 79')).by(__.values('srcId').mean().math('_ + 93 * 61'))"
"帮我查询课程大学物理属于的部门,被其他大学拥有的数量","g.V().has('course', 'name', '大学物理').out('belong').in('has').hasLabel('university').count()"
给出person的3跳的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(3).where(loops().is(3)).where(eq('a')).project('a.id', 'b_id').by(select('a').id()).by(id())"
"查找医生的相关者,或其相关者的相关者","g.V().hasLabel('doctor').outE('relation').inV().range(1, 2).dedup()"
"帮我查询名为韩建国的点取消的所有订单,并对这些订单的价格进行求和","g.V().has('name', '韩建国').outE('cancel').inV().hasLabel('orders').values('price').sum()"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部与person杜雪有关系的person的年龄","g.V().has('person', 'name', '杜雪').bothE().otherV().hasLabel('person').values('age')"
"帮我查询id为96的教师教的课程, 并将课程有关的大学的等级的求和值赋值给课程的名字, 接着查询课程的名字小于96的课程属于的部门","g.V().has('teacher', 'id', 96).outE('teach').inV().hasLabel('course').as('b').sideEffect(__.select('b').bothE().otherV().hasLabel('university').values('level').sum().as('sumLevel')).where(__.select('b').values('name').is(lt(96))).outE('belong').inV().hasLabel('department').as('d').select('b', 'd').by('name').by()"
 找出所有与韩国强有写作关系的书籍，然后找出这些书籍之间的引用关系，并返回引用关系的节点ID。,"g.V().has('name', '韩国强').outE('write').inV().hasLabel('book').as('b').outE('refers').inV().hasLabel('book').values('id')"
请帮我找出所有源点和目标点都为person，且标签为喜欢的边。,g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('person').as('b').select('e')
"返回全部名为李建聪的,id在12到53之间的伙伴,返回这些伙伴的上次登录时间,和边的f0,源点id","g.V().has('name', '李建聪').outE('partner').as('e').inV().has('id', between(12, 53)).as('b').select('b', 'e').by('lastLoginTime').by(project('f0', 'srcId').by('f0').by('srcId'))"
"帮我查询名为韩若涵和吴建聪的,标签为patient的点公共的relation节点的名单","g.V().has('patient', 'name', '韩若涵').outE('relation').inV().as('b').inE('relation').outV().has('patient', 'name', '吴建聪').select('b').values('name')"
"返回与学生何雪存在选择关系,且与部门体育学院存在属于关系的课程节点，返回这些课程的学分,名字,id,及学生何雪的id,及部门体育学院的id","g.V().hasLabel('student').has('name', '何雪').as('a').outE('selects').inV().hasLabel('course').as('b').inE('belong').outV().hasLabel('department').has('name', '体育学院').as('c').select('a', 'b', 'c').by('id').by(values('credit', 'name', 'id')).by('id')"
"查询和账号LX001有关的公司,再查询和LX001转账的其他账号,返回它们","g.V().has('account', 'name', 'LX001').as('a').bothE().otherV().hasLabel('company').as('b').select('a').outE('transfer').otherV().hasLabel('account').as('c').select('a', 'b', 'c')"
"给出和医生王建国有诊断关系的病人,再给出以属于关系关联了王建国的部门","g.V().hasLabel('doctor').has('name', '王建国').as('a').outE('diagnose').inV().hasLabel('patient').as('b').select('a').inE('belong').outV().hasLabel('department').as('c').select('a', 'b', 'c')"
"请帮我查找名为复旦大学的university,以及与其有关的course,并返回复旦大学的level和这些course的value","g.V().has('university', 'name', '复旦大学').as('a').bothE().as('e').otherV().hasLabel('course').as('b').select('a', 'b').by('level').by('value')"
 给出14个与Prescription_429和Prescription_338有关系的处方节点。,"g.V().has('name', 'Prescription_429').outE().inV().hasLabel('prescription').as('b').inE().outV().has('name', 'Prescription_338').select('b').limit(14)"
"查找186个名为Post_181的点has的标签等于tag的节点,且其id大于等于79或id大于等于74","g.V().has('name', 'Post_181').out('has').hasLabel('tag').or(has('id', gte(79)), has('id', gte(74))).limit(186)"
 请帮我查找与吴思琪和Bob共同认识的人，标签为'person'的节点。,"g.V().has('name', '吴思琪').outE('knows').inV().hasLabel('person').as('b').inE('knows').outV().has('name', 'Bob').select('b')"
"返回公司的三角的环,边label为合作, 并返回这些点的id","g.V().hasLabel('company').as('a').outE('cooperate').inV().as('b').outE('cooperate').inV().as('c').where(outE('cooperate').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
请帮我找出与seller郑轩有关的buyer，以及郑轩拥有的其他商品，并将它们返回。,"g.V().has('seller', 'name', '郑轩').as('a').bothE().otherV().hasLabel('buyer').as('b').select('a').outE('has').otherV().hasLabel('goods').as('c').select('a', 'b', 'c')"
找出与人有关联的人，这些人又与其他人有喜欢关系，并且这些人还与其他人有支付关系。,g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('person').as('b').outE('likes').as('e2').inV().hasLabel('person').as('c').outE('pay').as('e3').inV().hasLabel('person').as('d').select('d')
"找出和cinema UME有关的tag,再找出和UME releases的其他film,返回它们","g.V().hasLabel('cinema').has('name', 'UME').as('a').bothE().as('e').otherV().hasLabel('tag').as('b').select('a').outE('releases').as('e2').inV().hasLabel('film').as('c').select('a', 'b', 'c')"
返回孙科同事的家庭父母,"g.V().has('person', 'name', '孙科').outE('family').inV().outE('parent').inV().outE('colleague').inV()"
找出电子科技大学中按id升序排列的前41个名字,"g.V().has('university', 'name', '电子科技大学').order().by('id', asc).limit(41)"
"帮我查询用户黄若涵喜欢的仓库,被其他用户喜欢的数量","g.V().has('user', 'name', '黄若涵').out('likes').in('likes').hasLabel('user').count()"
"帮我查询全部与city有关系的company节点,且company节点的value小于545,并返回这些company的id的最大值乘27的求和值,以及company的peopleNumber对575取余的值","g.V().hasLabel('city').outE().inV().hasLabel('company').has('value', lt(545)).group().by('peopleNumber').by(__.values('id').max().math('_ * 27').sum()).select(values).unfold().project('sum_max_id_times_27', 'peopleNumber_mod_575').by(__.select(values)).by(__.select(keys).math('_ % 575'))"
 请帮我查询李轩和黄若涵的共同朋友，标签为publisher。,"g.V().has('publisher', 'name', '李轩').out('friend').as('b').in('friend').has('publisher', 'name', '黄若涵').select('b').values('name')"
"请帮我找出全部公司的朋友,或其朋友的朋友","g.V().hasLabel('company').out('friend').range(1, 2).dedup()"
 找出呼吸科拥有且与陈思琪有诊断关系的医生，并返回他们的性别、呼吸科的地址和陈思琪的年龄。,"g.V().hasLabel('department').has('name', '呼吸科').as('a').outE('has').inV().hasLabel('doctor').as('b').inE('diagnose').outV().hasLabel('patient').has('name', '陈思琪').as('c').select('a', 'b', 'c').by('address').by('gender').by('age')"
"给出与person徐红有关,且与软件Hadoop有关系的person节点","g.V().hasLabel('person').has('name', '徐红').bothE('knows').bothV().hasLabel('person').where(bothE('buy').bothV().hasLabel('software').has('name', 'Hadoop')).dedup()"
"请帮我查找源点薪资在4275到5919之间,目标点id小于等于39,创建时间为2017年06月04日,或字数大于等于756,且标签为喜欢的边","g.E().hasLabel('likes').where(and(__.outV().has('salary', between(4275, 5919)), or(__.inV().has('id', lte(39)).has('createTime', '2017-06-04'), __.inV().has('wordCount', gte(756)))))"
 返回马伟喜欢但标签为特定tag的帖子，并返回这些帖子的标签。,"g.V().has('name', '马伟').outE('likes').inV().hasLabel('post').outE('has').inV().hasLabel('tag').values('value')"
"查找id为64的论坛有关的用户的朋友, 再查找和用户有关系的伙伴","g.V().has('forum', 'id', 64).as('a').bothE().otherV().hasLabel('user').as('b').both().hasLabel('user').as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
请帮我查找所有标签为事项的点,g.V().hasLabel('issue')
查询和编辑Alice之间有发布关系的书,"g.V().hasLabel('publisher').has('name', 'Alice').outE('publish').inV().hasLabel('book')"
 请帮我找到Order_144的买家。,"g.V().hasLabel('orders').has('name', 'Order_144').in('creates').hasLabel('buyer')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出满足条件name不是吴轩,age大于57且id大于69的节点","g.V().has('name', neq('吴轩')).has('age', gt(57)).has('id', gt(69))"
"返回类型为belong,以及满足条件f0不等于874且f1不等于false,f0不为空的边","g.E().hasLabel('belong').has('f0', neq(874)).has('f1', neq(false)).has('f0', neq(null))"
 返回与软件相关的公司节点，其中公司节点名称为谷歌，并返回这些节点中人数减去620的人数，以及这些节点中每人价值乘976除以人数所得的最大值。,"g.V().hasLabel('software').as('a').outE().as('e').inV().hasLabel('company').has('name', '谷歌').as('b').select('b').by('peopleNumber').by(__.constant(620)).select(values).math('_ - _').count().as('countResult').select('b').by(__.math('value * 976 / peopleNumber')).max().as('maxResult').select('countResult', 'maxResult')"
"查找id为128的software有关的person的relation, 再查找和person有关系的friend","g.V().has('software', 'id', 128).as('a').bothE().as('e').otherV().hasLabel('person').as('b').outE('relation').as('e2').inV().as('c').select('b').outE('friend').as('e3').inV().as('d').select('a', 'b', 'c', 'd')"
"找出person的三角的环,边类型为支付, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('pay').inV().as('b').outE('pay').inV().as('c').where(__.as('c').outE('pay').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
帮我查询前190个标签等于创造的边,g.E().hasLabel('creates').limit(190)
"给出和卖家黄轩有关的卖家,称为X,再给出和这个X有关联的其他订单,以及和X有关联的订单","g.V().has('seller', 'name', '黄轩').as('a').bothE().otherV().hasLabel('seller').as('b').bothE().otherV().hasLabel('orders').as('c').select('b').bothE().otherV().hasLabel('orders').as('d').select('a', 'b', 'c', 'd')"
"以(25,'何科','male'),(99,'陈伟','famale'),(76,'韩思琪','male')作为请求表数据,属性分别为age,name,gender, 源点的gender等于输入表gender,给出56个与吴建聪和赵思琪都存在关系的person节点","g.withSideEffect('p', [['age':25, 'name':'何科', 'gender':'male'], ['age':99, 'name':'陈伟', 'gender':'famale'], ['age':76, 'name':'韩思琪', 'gender':'male']]).V().has('gender', within(select('p').unfold().values('gender'))).has('name', '吴建聪').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '赵思琪').select('b').limit(56)"
查询前95个标签等于创造的边,g.E().hasLabel('creates').limit(95)
查找和person Amily之间有family关系的person,"g.V().hasLabel('person').has('name', 'Amily').outE('family').inV().hasLabel('person')"
找出所有和person陈伟之间有认识关系的person,"g.V().hasLabel('person').has('name', '陈伟').outE('knows').inV().hasLabel('person')"
 找出经管学院和文学院都拥有的部门。,"g.V().has('department', 'name', '经管学院').out('has').as('b').in('has').has('department', 'name', '文学院').select('b')"
"给出和标签等于person的点有申请关系的贷款,并且和这些贷款有存款关系的账号,并且和这些账号有转账关系的账号",g.V().hasLabel('person').as('a').outE('apply').as('e').inV().hasLabel('loan').as('b').outE('deposit').as('e2').inV().hasLabel('account').as('c').outE('transfer').as('e3').inV().hasLabel('account').as('d').select('d')
 查询张宏喜欢的评论。,"g.V().hasLabel('person').has('name', '张宏').outE('likes').inV().hasLabel('comment').as('b', 'a').select('a', 'b')"
"请帮我找出名为周宏的,createTime是2030年05月27日或name等于Mybatis的friend,返回这些friend的name,和边的f0,weight,f1","g.V().has('name', '周宏').outE('friend').as('e').inV().has('createTime', '2030-05-27').or().has('name', 'Mybatis').as('b').select('b', 'e').by('name').by(project('f0', 'weight', 'f1').by('f0').by('weight').by('f1'))"
 请帮我查找与北京大学和四川大学共属于城市类型的节点。,"g.V().has('name', '北京大学').outE('belong').inV().hasLabel('city').as('b').inE('belong').outV().has('name', '四川大学').select('b')"
"找出部门拥有的医生, 令医生的id的值等于拥有医生的部门的id的最小值, 再查找医生诊断的病人","g.V().hasLabel('department').as('a').outE('has').inV().hasLabel('doctor').as('b').project('b_id', 'b').by(choose(__.inE('has').outV().hasLabel('department').values('id').min()).option(none, constant(null))).by(identity()).as('proj').select('proj').select('b').outE('diagnose').inV().hasLabel('patient').as('d').select('proj').select('b_id').as('b_id').select('b_id', 'd').by(identity()).by(identity())"
"以689,907,297,106,788作为请求点id, 以属性id作为相等条件,请帮我查找与名为谷歌和蚂蚁集团的点共同合作的,类型是大学的节点","g.withSideEffect('p', [689, 907, 297, 106, 788]).V().where(within('p')).has('name', '谷歌').outE('company_cooperate_university').inV().hasLabel('university').where(__.inE('company_cooperate_university').outV().has('name', '蚂蚁集团')).dedup()"
"帮我查询名为何若涵的点likes的所有book,并对这些book的id进行求和","g.V().has('name', '何若涵').out('likes').hasLabel('book').values('id').sum()"
"查找名为孙月的author,以及与其有关的publisher,并返回孙月的gender和这些publisher的id","g.V().has('author', 'name', '孙月').as('a').bothE().otherV().hasLabel('publisher').as('b').select('a', 'b').by('gender').by('id')"
"找出被医生属于数量大于39的部门,记为relationCount,再查询这些部门属于的部门",g.V().hasLabel('department').as('a').sideEffect(__.project('relationCount').by(__.in('belong').hasLabel('doctor').count())).select('a').where(__.select('relationCount').is(gt(39))).out('belong').hasLabel('department')
返回与person周宏有关，且与loan defaultName有关系的account节点。,"g.V().has('person', 'name', '周宏').bothE('own').otherV().hasLabel('account').as('b').bothE('repay').otherV().has('loan', 'name', 'defaultName').select('b')"
查询所有与公司Bilibili有关系的大学的价值,"g.V().has('company', 'name', 'Bilibili').bothE().otherV().hasLabel('university').values('value')"
"以'eb', 'jf'作为输入调用triangleCount函数,返回运算结果","g.call('triangleCount').with('input1', 'eb').with('input2', 'jf').select('number')"
"帮我查询和病人李强有接受关系的处方,再帮我查询以接受关系关联了李强的处方","g.V().has('patient', 'name', '李强').as('a').outE('accept').inV().hasLabel('prescription').as('b').select('a').inE('accept').outV().hasLabel('prescription').as('c').select('a', 'b', 'c')"
"以652,277,479,20作为请求点id, 源点的id等于输入表id,请帮我找出和buyer点有creates关系的orders节点,且边满足条件timeStamp是2008年05月26日,目标orders节点满足条件name不是Order_151","g.inject([652, 277, 479, 20]).unfold().as('p').V().hasLabel('buyer').has('id', __.as('p')).as('a').outE('buyer_creates_orders').has('timeStamp', '2008-05-26').as('e').inV().hasLabel('orders').has('name', neq('Order_151')).as('b').select('b')"
"请帮我查找所有马建国的点认识的person,然后请帮我查找马建国被认识的person,一起返回","g.V().has('name', '马建国').as('a').outE('knows').inV().hasLabel('person').as('b').select('a').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
请帮我查找全部与用户杜思琪有关系的论坛的创建时间,"g.V().has('user', 'name', '杜思琪').bothE().otherV().hasLabel('forum').values('createTime')"
"找出全部和person点有认识关系的person节点,且边满足条件f1不等于true,目标person节点满足条件名字不等于杜雪","g.V().hasLabel('person').as('a').outE('knows').has('f1', neq(true)).as('e').inV().hasLabel('person').has('name', neq('杜雪')).as('b').select('b')"
"给出和类型为person的点有创造关系的评论,并且和这些评论有属于关系的电影,并且和这些电影有拥有关系的标签",g.V().hasLabel('person').as('a').out('creates').hasLabel('comment').as('b').in('belong').hasLabel('film').as('c').out('has').hasLabel('tag').as('d').select('d')
"返回源点label为论坛,目标点label为帖子,label为论坛的边",g.V().hasLabel('forum').outE('forum').as('e').inV().hasLabel('post').select('e')
"请帮我查找电影院横店影院上映的电影,被其他person观看的数量","g.V().has('cinema', 'name', '横店影院').outE('releases').inV().hasLabel('film').inE('watch').outV().hasLabel('person').count()"
 返回越南的朋友的友人,"g.V().has('country', 'name', '越南').out('friend').out('friend').out('relation').dedup()"
"帮我查询全部源点满足条件gender不等于famale或salary不是4068,且id是43,目标点满足条件value在784到988之间,wordCount不为空,且label为publish的边","g.V().has('id', 43).has('gender', neq('famale')).or(has('salary', neq(4068))).outE('publish').as('e').inV().has('value', between(784, 988)).has('wordCount', neq(null)).select('e')"
请帮我查找所有与person郑轩有关系的person的id,"g.V().has('person', 'name', '郑轩').bothE().otherV().hasLabel('person').id()"
"查询所有和公司点有雇佣关系的person节点,且边满足条件目标点id为空,目标person节点满足条件名字是5420","g.V().hasLabel('company').as('a').outE('employee').has('targetId', null).as('e').inV().hasLabel('person').has('name', 5420).as('b').select('b')"
"输入请求点id的列表97,139,176,19,647, 源点的id等于输入表id,请帮我查找标签为reader,名为张轩的点,返回这些点的height,salary","g.V().hasLabel('reader').has('name', '张轩').has('id', within(97, 139, 176, 19, 647)).project('height', 'salary').by(values('height')).by(values('salary'))"
查询事项ISSUE-459属于的仓库节点拥有的合并请求,"g.V().hasLabel('issue').has('name', 'ISSUE-459').outE('belong').inV().hasLabel('repository').outE('has').inV().hasLabel('pullRequest')"
"查询名为王若涵和孙科的,类型为教师的点公共的伙伴节点的名单","g.V().has('teacher', 'name', '王若涵').as('a').outE('partner').inV().as('b').inE('partner').outV().has('teacher', 'name', '孙科').as('c').select('b').values('name')"
"请帮我找出person认识的person,返回其源点的薪资除5947对13取余的最大值,以及目标点的薪资除6560的值","g.V().hasLabel('person').as('a').outE('knows').as('e').inV().hasLabel('person').as('b').project('max_expr', 'b_salary_div').by(__.select('a').values('salary').math('/ 5947').math('% 13').max()).by(__.select('b').values('salary').math('/ 6560'))"
id减72的值,"g.V().has('id', 72).project('result').by(values('id').math('_ - 72'))"
返回前186个满足条件名字是杜若涵的person,"g.V().hasLabel('person').has('name', '杜若涵').limit(186)"
 给定与电影院好视影院存在上映关系，且标签为'古代'的电影节点，返回这些电影的名字、类别、电影院好视影院的ID以及标签古代的价值。,"g.V().hasLabel('cinema').has('name', '好视影院').as('a').outE('releases').inV().hasLabel('film').as('b').inE('has').outV().hasLabel('tag').has('name', '古代').as('c').select('a', 'b', 'c').by('id').by(values('name', 'category')).by('value')"
"查找全部和名为PR-340的pullRequest有partner关系,或有partner的partner关系的repository","g.V().hasLabel('pullRequest').has('name', 'PR-340').bothE('partner').otherV().hasLabel('repository').union(identity(), bothE('partner').otherV().hasLabel('repository')).dedup()"
"请帮我找出类型是person的点,返回145个",g.V().hasLabel('person').limit(145)
"返回标签为person,名为徐梅的点,返回这些点的id,身高","g.V().hasLabel('person').has('name', '徐梅').project('a.id', 'a.height').by('id').by('height')"
找出124个与华为和腾讯都存在关系的公司或贷款或person节点,"g.V().has('name', '华为').outE().as('e').inV().or(hasLabel('company'), hasLabel('loan'), hasLabel('person')).as('b').inE().as('e2').outV().has('name', '腾讯').select('b').limit(124)"
 查询与外科有联系且与李伟有关联的部门节点，并返回它们的ID、地址和名称。,"g.V().has('department', 'name', '外科').outE().inV().hasLabel('department').as('b').inE().outV().has('patient', 'name', '李伟').select('b').values('id', 'address', 'name')"
"输入请求点id的列表342,856,194,867,94, 以属性id作为相等条件,查询和person陈国强有person_knows_person关系的person,再查询以person_likes_person关系关联了陈国强的person","g.inject([342, 856, 194, 867, 94]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('name', '陈国强').as('a').outE('person_knows_person').inV().hasLabel('person').as('b').select('a').inE('person_likes_person').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
 找出同时与郑轩和徐雪有关联的人，返回他们的薪资和姓名。,"g.V().has('person', 'name', '郑轩').outE().inV().hasLabel('person').as('b').inE().outV().has('person', 'name', '徐雪').select('b').values('salary', 'name')"
"根据名字分组,计算价值加887的值",g.V().hasLabel('a').group().by('name').by(values('value').sum().math('_ + 887'))
 找出与教师杜强和学生黄月都有关系的大学节点，并返回它们的名字和价值。,"g.V().has('teacher', 'name', '杜强').outE().inV().has('university').as('b').inE().outV().has('student', 'name', '黄月').select('b').values('name', 'value')"
找出与person马思思有关系的person的age,"g.V().has('person', 'name', '马思思').bothE().otherV().hasLabel('person').values('age')"
"查找类型为issue的点,返回110个",g.V().hasLabel('issue').limit(110)
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询id为45的company关联的university,和以contain关系关联了这些university的其他city","g.V().has('company', 'id', 45).bothE().otherV().hasLabel('university').as('b').inE('city_contain_university').outV().hasLabel('city').as('c').select('b', 'c')"
 查询李若涵和吴若涵是否有恋人关系的共同点。,"g.V().has('person', 'name', '李若涵').outE('lover').inV().as('b').inE('lover').outV().has('person', 'name', '吴若涵').select('b')"
"返回全部源点标签等于doctor,边标签等于diagnose的边,返回这些边的targetId的最小值对155取余的值,和srcId对197取余的平均值","g.V().hasLabel('doctor').outE('diagnose').project('min_targetId_mod', 'avg_srcId_mod').by(values('targetId').min().math('_ % 155')).by(values('srcId').math('_ % 197').mean())"
 找出与杜雪有恋人关系的对象，以及与杜雪以朋友关系相关的对象。,"g.V().hasLabel('person').has('name', '杜雪').as('a').outE('lover').inV().hasLabel('person').as('b').select('a').inE('friend').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"请帮我找出拥有账号Geaflow123的person,和这些person申请的贷款","g.V().hasLabel('account').has('name', 'Geaflow123').in('own').hasLabel('person').as('b').out('apply').hasLabel('loan').as('c').select('b', 'c')"
找出与Bilibili公司有归属和包含关系的城市节点，并返回这些城市的面积、ID以及Bilibili公司的价值和规模。,"g.V().has('company', 'name', 'Bilibili').as('a').outE('belong').inV().hasLabel('city').as('b').inE('contain').outV().has('company', 'name', 'Bilibili').as('c').select('a', 'b', 'c').by('value').by(values('area', 'id')).by('scale')"
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));查询account以createTime分组的lastLoginTime, 根据lastLoginTime降序排序","g.V().hasLabel('account').group().by('createTime').by(values('lastLoginTime').fold()).order(local).by(values, desc)"
"返回与seller周建聪有关,且与seller陈思思有关系的buyer节点","g.V().has('seller', 'name', '周建聪').bothE('ask').bothV().hasLabel('buyer').as('b').bothE('consult').bothV().has('seller', 'name', '陈思思').select('b')"
请帮我查找名为张科的点认识的person,"g.V().has('name', '张科').outE('knows').inV().hasLabel('person')"
"帮我查询全部与陈思琪存在取消关系的订单,订单与商品存在包含关系的点,返回这些点的id","g.V().has('name', '陈思琪').outE('cancel').inV().hasLabel('orders').outE('contain').inV().hasLabel('goods').id()"
"以(2,314,'南京大学')作为请求表数据,属性分别为level,value,name, 以属性level作为相等条件,请帮我找出名为阿里的company,以及与其有关的company,并返回阿里的name和这些company的scale","g.withSideEffect('p', [['level': 2, 'value': 314, 'name': '南京大学']]).V().hasLabel('company').has('level', select('p').unfold().values('level')).has('name', '阿里').as('a').bothE().as('e').otherV().hasLabel('company').as('b').select('a', 'b').by('name').by('scale')"
"以70,724,977,901,155作为请求点id, 以属性id作为相等条件,请帮我找出源点标签为university,边标签为university_cooperate_company的边,返回这些边的targetId除119的值,和targetId除82的求和值","g.inject([70, 724, 977, 901, 155]).as('p').flatMap(select('p')).as('id').V().has('university', 'id', select('id')).outE('university_cooperate_company').as('e').project('expr1', 'sum_expr2').by(select('e').values('targetId').math('_ / 119')).by(select('e').values('targetId').math('_ / 82').sum())"
"给出与买家张雪有关,且与商品杯子有关系的订单节点","g.V().hasLabel('buyer').has('name', '张雪').bothE('cancel').bothV().hasLabel('orders').bothE('contain').bothV().hasLabel('goods').has('name', '杯子').select('b')"
 查询性别为female的40个人，按性别从小到大的顺序排列。,"g.V().hasLabel('person').has('gender', 'female').order().by('gender', asc).limit(40)"
 查询38个同时与Comment_169和Comment_126有关系的标签节点。,"g.V().has('name', 'Comment_169').outE().inV().hasLabel('tag').as('b').inE().outV().has('name', 'Comment_126').select('b').limit(38)"
 先查找与ID为98的人有关联的人，再进一步查找与这些人有关联的相关者。,"g.V().has('person', 'id', '98').bothE().otherV().hasLabel('person').as('a').bothE().otherV().hasLabel('person').as('b').bothE('friend').otherV().hasLabel('person').as('c').select('b').bothE('relation').otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"请帮我找出comment Comment_107 belong的film,以及watch这些film的person, 令film的salary等于person的salary的最小值, 返回comment的name,film的value,person的gender","g.V().has('comment', 'name', 'Comment_107').as('a').outE('belong').inV().hasLabel('film').as('b').inE('watch').outV().hasLabel('person').as('c').group().by(select('b')).by(select('c').values('salary').min()).as('minSalaries').select('a', 'b', 'c').by('name').by('value').by('gender').select(values).unfold().select('a', 'b', 'c').by().by().by().project('a_name', 'b_value', 'c_gender').by(select('a')).by(select('b')).by(select('c')).select('a_name', 'b_value', 'c_gender').by('name').by('value').by('gender')"
"查询id在8到18之间或id大于3,且id小于6的节点","g.V().has('id', between(8, 18)).or().has('id', gt(3)).has('id', lt(6))"
 请问能否帮我找出体育学院的学生节点，这些学生同时也在学习程序设计课程？,"g.V().has('department', 'name', '体育学院').out('has').as('b').out('selects').has('course', 'name', '程序设计').select('b')"
"调用personalRank函数,以'at', 36作为输入,返回运算结果","g.call('PERSONALRANK').with('input1', 'at').with('input2', 36).select('id', 'value')"
"根据isBlock分组,计算value减516的值",g.V().hasLabel('a').group().by('isBlock').by(values('value').math('_ - 516'))
"查找与person陈轩有关,且与标签悬疑有关系的电影节点","g.V().has('person', 'name', '陈轩').bothE('watch').otherV().hasLabel('film').bothE('has').otherV().has('tag', 'name', '悬疑').select('film')"
请帮我找出与陈思思和吴宏都有关联的195个publisher节点,"g.V().has('name', '陈思思').outE().inV().hasLabel('publisher').as('b').inE().outV().has('name', '吴宏').select('b').limit(195)"
 帮我查找 username 为 '吴伟' 的用户。,"g.V().hasLabel('user').has('name', '吴伟')"
"找出196个person黄宏和吴思思,共同的朋友","g.V().has('person', 'name', '黄宏').as('a').outE('friend').as('e').inV().as('b').inE('friend').as('e2').outV().has('person', 'name', '吴思思').as('c').select('b').limit(196)"
"查找label为电影院的全部点,并根据名字升序排列","g.V().hasLabel('cinema').order().by('name', asc)"
"给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出前142个满足条件名字为王思思的病人","g.V().hasLabel('patient').has('name', '王思思').limit(142)"
"返回所有与张月存在pay关系的person,person与person存在knows关系的点,返回这些点的age","g.V().has('name', '张月').outE('pay').inV().hasLabel('person').outE('knows').inV().hasLabel('person').values('age')"
 找出与卖家（seller)相关的商品（goods)节点，按其价值（value)分组并返回。,g.V().hasLabel('seller').bothE('has').otherV().hasLabel('goods').group().by('value').select(values)
找出Jack和郑建国都认识的人,"g.V().has('author', 'name', 'Jack').out('knows').as('b').in('knows').has('author', 'name', '郑建国').select('b')"
"找出国家英国包含的城市, 令城市的名字等于国家的价值,令城市的id等于城市的名字,令国家的id等于城市的面积减80140, 返回国家的人数, 城市的id","g.V().has('country', 'name', '英国').as('a').out('contain').hasLabel('city').as('b').project('peopleNumber', 'id').by(select('a').values('peopleNumber')).by(select('b').values('name'))"
查找作者为孙强的人,"g.V().hasLabel('author').has('name', '孙强')"
帮我查询repository FSM has的user节点creates的pullRequest,"g.V().has('repository', 'name', 'FSM').out('has').hasLabel('user').out('creates').hasLabel('pullRequest')"
"帮我查询被person何轩likes的person,和何轩pay的person","g.V().has('person', 'name', '何轩').as('b').outE('pay').inV().as('c').select('b').inE('likes').outV().as('a').select('a', 'b', 'c')"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找名为defaultName的贷款","g.V().hasLabel('loan').has('name', 'defaultName')"
"给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询20个id小于等于4的书,根据创建时间升序排列","g.V().hasLabel('book').has('id', lte(4)).order().by('createTime', asc).limit(20)"
查找73个与Comment_396和Comment_154都存在关系的comment或person节点,"g.V().has('name', 'Comment_396').outE().inV().or(hasLabel('comment'), hasLabel('person')).as('b').inE().outV().has('name', 'Comment_154').select('b').limit(73)"
返回何思思写的书,"g.V().has('author', 'name', '何思思').as('b').outE('write').as('e').inV().hasLabel('book').as('a').select('a', 'b')"
"帮我查询和标签为person的点有创造关系的评论,且和这些评论有属于关系的电影,且和这些电影有拥有关系的标签",g.V().hasLabel('person').as('a').out('creates').hasLabel('comment').as('b').out('belong').hasLabel('film').as('c').out('has').hasLabel('tag').as('d').select('d')
"给出和company美团有关的university,称为X,再给出和这个X有关联的其他company,以及和X有关联的city","g.V().has('company', 'name', '美团').as('a').bothE().otherV().hasLabel('university').as('b').bothE().otherV().hasLabel('company').as('c').select('b').bothE().otherV().hasLabel('city').as('d').select('a', 'b', 'c', 'd')"
"请帮我找出loan loan_44 deposit的account, 令account的id等于loan的id,令loan的lastLoginTime等于account的id的求和值,令account的id等于account的id加84, 返回loan的weight, account的name","g.V().hasLabel('loan').has('name', 'loan_44').as('a').outE('deposit').inV().hasLabel('account').as('b').select('a', 'b').by(__.project('weight', 'lastLoginTime', 'id').by('weight').by(__.select('b').values('id').sum()).by('id')).by(__.project('name', 'id').by('name').by(__.math('_ + 84').by(__.select('b').values('id')))).select(values).unfold().project('a.weight', 'b.name').by(select('a').select('weight')).by(select('b').select('name'))"
"给出与person何建国存在pay关系,且与person张建国存在pay关系的person节点，返回这些person的salary,name,及person何建国的age,及person张建国的salary","g.V().has('person', 'name', '何建国').as('a').outE('pay').inV().hasLabel('person').as('b').inE('pay').outV().has('person', 'name', '张建国').as('c').select('a', 'b', 'c').by('age').by(values('salary', 'name')).by('salary')"
"找出全部源点满足条件name不是周思琪或name不等于周建国或age在58到85之间,目标点满足条件id不是36且salary的数量不是18,age大于等于35,且标签为likes的边","g.V().has('name', neq('周思琪')).or().has('name', neq('周建国')).or().has('age', between(58, 85)).outE('likes').as('e').inV().has('id', neq(36)).has('age', gte(35)).where(__.values('salary').count().is(neq(18))).select('e')"
"找出全部源点类型是医生,目标点类型是部门,类型是药品或处方或病人的边","g.V().hasLabel('doctor').bothE('medicine', 'prescription', 'patient').where(otherV().hasLabel('department'))"
返回与公司滴滴有关系的公司的价值,"g.V().has('company', 'name', '滴滴').bothE().otherV().hasLabel('company').values('value')"
"请帮我查找和label为教师的点有教关系的课程,且和这些课程有属于关系的部门,且和这些部门有拥有关系的学生",g.V().hasLabel('teacher').as('a').outE('teach').as('e').inV().hasLabel('course').as('b').outE('belong').as('e2').inV().hasLabel('department').as('c').outE('has').as('e3').inV().hasLabel('student').as('d').select('d')
"找出全部源点类型为软件,目标点类型为软件,类型为person或公司或软件的边","g.V().hasLabel('software').outE('person', 'company', 'software').as('e').inV().hasLabel('software').select('e')"
返回与编辑马建聪有关的朋友的联系人,"g.V().has('publisher', 'name', '马建聪').out('friend').out('relation').out('relation')"
"查找id为111的person pay的person, 并将person有关的person的salary的最大值赋值给person(b)的name, 接着查询person(b)的name小于111的person pay的person","g.V().has('person', 'id', 111).outE('pay').inV().hasLabel('person').as('b').sideEffect(__.select('b').bothE().bothV().hasLabel('person').values('salary').max().store('b_name')).select('b').has('name', lt(111)).outE('pay').inV().hasLabel('person').as('d').select('b', 'd').by('name').by()"
"返回所有名为韩思思的点的,id大于等于39或名字小于26的相关者,返回这些相关者的名字,和边的权重,源点id","g.V().has('name', '韩思思').outE('relation').as('e').inV().as('b').where(or(__.has('id', gte(39)), __.has('name', lt(26)))).select('b', 'e').by('name').by(values('weight', 'srcId'))"
 请帮我查找与谷歌有关的大学，以及与谷歌合作的其他大学，并返回它们。,"g.V().hasLabel('company').has('name', '谷歌').as('a').bothE().otherV().hasLabel('university').as('b').select('a').bothE('cooperate').otherV().hasLabel('university').as('c').select('a', 'b', 'c')"
 查询所有买家关联的物品，以及与这些物品有has关系的其他卖家。,"g.V().has('buyer', 'id', '50').bothE().otherV().hasLabel('goods').as('b').inE('has').otherV().hasLabel('seller').as('c').select('b', 'c')"
 查询person或person的relation的relation。,g.V().hasLabel('person').outE('relation').inV().outE('relation').inV().dedup()
找出名为周轩的节点认识的person,"g.V().has('name', '周轩').out('knows').hasLabel('person')"
 请帮我查找与Prescription_314处方包含关系的药物，以及与急诊部department有拥有关系的医生，返回它们。,"g.V().hasLabel('prescription').has('name', 'Prescription_314').as('a').outE('contain').inV().hasLabel('medicine').as('b').select('a').V().hasLabel('department').has('name', '急诊部').as('c').outE('has').inV().hasLabel('doctor').as('d').select('a', 'b', 'c', 'd')"
"查询类型为公司,名为字节的点,返回这些点的价值,规格,id","g.V().hasLabel('company').has('name', '字节').project('value', 'scale', 'id').by('value').by('scale').by('id')"
"帮我查询全部与吴国强存在创造关系的合并请求,合并请求与仓库存在属于关系的点,返回这些点的权重","g.V().has('name', '吴国强').outE('creates').inV().hasLabel('pullRequest').outE('belong').inV().hasLabel('repository').values('weight')"
 查找何伟和王雪的共同联系人列表。,"g.V().has('person', 'name', '何伟').outE('relation').inV().as('b').inE('relation').outV().has('person', 'name', '王雪').select('b').values('name')"
"找出和label为repository的点有has关系的issue,以及和这些issue有belong关系的repository,以及和这些repository有has关系的issue",g.V().hasLabel('repository').as('a').out('has').hasLabel('issue').as('b').out('belong').hasLabel('repository').as('c').out('has').hasLabel('issue').as('d').select('d')
 列出马梅和赵建国两位医生作为相关者节点，他们所属的是医生这个类别。,"g.V().has('doctor', 'name', '马梅').outE('relation').inV().as('b').inE('relation').outV().has('doctor', 'name', '赵建国').select('b').values('name')"
"返回源点类型为person,目标点类型为software,类型为company的边",g.V().hasLabel('person').outE('company').where(inV().hasLabel('software'))
"请帮我查找和买家马宏有关系的订单或买家,返回这些点的价格","g.V().hasLabel('buyer').has('name', '马宏').bothE().otherV().hasLabel(within('orders', 'buyer')).values('price')"
返回与person何雪和王梅都存在关系的person节点，并获取他们的名字、身高和年龄。,"g.V().has('person', 'name', '何雪').outE().inV().hasLabel('person').as('b').inE().outV().has('person', 'name', '王梅').select('b').values('name', 'height', 'age')"
"查找label为读者,名为李轩的点,返回这些点的年龄","g.V().hasLabel('reader').has('name', '李轩').values('age')"
 找出韩月认识的所有人和韩月有关系的人，一起列出来。,"g.V().has('name', '韩月').as('a').bothE('knows').otherV().hasLabel('person').as('b').select('a').bothE('relates').otherV().hasLabel('person').as('c').select('a', 'b', 'c')"
找到所有与person有关联的人节点，这些人节点的性别不是female。然后返回这些人节点年龄数量减去75的结果，以及他们的身高除以162后的余数。,"g.V().hasLabel('person').as('a').outE().inV().hasLabel('person').has('gender', neq('famale')).as('b').select('b').dedup().project('count_minus_75', 'height_mod').by(__.values('age').count().math('_ - 75')).by(__.values('height').math('_ % 162'))"
查询名为周红的点喜欢的person,"g.V().has('name', '周红').out('likes').hasLabel('person')"
"请帮我查找software Mysql uses的software,被其他person buy的数量","g.V().has('software', 'name', 'Mysql').out('uses').in('buy').hasLabel('person').count()"
返回所有源点为forum，目标点为person，且标签为contain的边。,g.V().hasLabel('forum').outE('contain').where(inV().hasLabel('person'))
请帮我找出全部和读者陈若涵之间有喜欢关系的书,"g.V().hasLabel('reader').has('name', '陈若涵').outE('likes').inV().hasLabel('book')"
 请帮我找出张强教授的课程，以及与张强有教关系的课程。,"g.V().hasLabel('teacher').has('name', '张强').as('a').outE('teach').inV().hasLabel('course').as('b').select('a').inE('teach').outV().hasLabel('course').as('c').select('a', 'b', 'c')"
"输入请求点id的列表920,288, 源点的id等于输入表id,帮我查询与名为谷歌和腾讯的点共同属于的,标签为城市的节点","g.withSideEffect('p', [920, 288]).V().where(within('p')).has('name', '谷歌').outE('company_belong_city').inV().hasLabel('city').as('b').inE('company_belong_city').outV().has('name', '腾讯').select('b').dedup()"
"请帮我找出forum中国诗词论坛contain的post,被其他user likes的数量","g.V().has('forum', 'name', '中国诗词论坛').out('contain').in('likes').hasLabel('user').count()"
找出所有既引用了'book Java程序设计'又引用了'呐喊'的点。,"g.V().has('book', 'name', 'java程序设计').out('refers').as('b').in('refers').has('book', 'name', '呐喊').select('b')"
返回与用户何强有喜欢关系的帖子，以及与帖子Post_492有关联的标签。,"g.V().has('user', 'name', '何强').as('a').out('likes').as('b').V().has('post', 'name', 'Post_492').as('c').out('has').as('d').select('a', 'b', 'c', 'd')"
返回与person杜伟有invest关系的3跳的环,"g.V().has('person', 'name', '杜伟').as('a').repeat(out('invest')).times(2).as('b').where(out().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').values('id')).by(select('b').values('id'))"
 请帮我查询person点相关的评论节点，并按其ID分组，返回ID。,g.V().hasLabel('person').bothE('creates').bothV().hasLabel('comment').values('id').groupCount()
查询买家王思思创造的订单节点包含的商品,"g.V().hasLabel('buyer').has('name', '王思思').out('creates').hasLabel('orders').out('contain').hasLabel('goods')"
"请帮我找出源点age在9到12之间或salary不为空,且age小于等于92,目标点category为文学且createTime是2034年04月27日,createTime为2011年02月12日,且标签等于likes的边","g.V().has('age', between(9, 12)).or().has('salary', neq(null)).has('age', lte(92)).outE('likes').as('e').inV().has('category', '文学').has('createTime', '2034-04-27').has('createTime', '2011-02-12').select('e')"
帮我查询company阿里belong的city节点belong的country,"g.V().hasLabel('company').has('name', '阿里').out('belong').hasLabel('city').out('belong').hasLabel('country')"
请帮我查找所有类型是goods或buyer的点,"g.V().hasLabel(within('goods', 'buyer'))"
查找所有和医生张宏之间有创造关系的处方,"g.V().hasLabel('doctor').has('name', '张宏').outE('creates').inV().hasLabel('prescription')"
请帮我找出person的2跳以内的环,"g.V().hasLabel('person').as('a').both().both().where(eq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"以410,301作为请求点id, 以属性id作为相等条件,找出与person徐科有person_knows_person关系的3度以内的环","g.withSideEffect('p', [410, 301]).V().hasLabel('person').where(and(values('id').is(within('p')), values('name').is(eq('徐科')))).as('a').repeat(bothE('person_knows_person').otherV().simplePath()).times(2).emit().where(loops().is(gt(0))).as('b').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"找出与名为巴黎和天津的点共同包含的,标签为大学的节点","g.V().has('name', '巴黎').out('contain').hasLabel('university').as('b').in('contain').has('name', '天津').select('b')"
 请帮我查找名叫李月且ID小于等于47的人喜欢的对象，以及这些对象支付的对方。,"g.V().hasLabel('person').has('id', lte(47)).has('name', '李月').outE('likes').inV().as('b').outE('pay').inV().as('c').select('b', 'c').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
找到名为'Prescription_116'且类型为'prescription'的点，返回它们的weight和id。,"g.V().hasLabel('prescription').has('name', 'Prescription_116').project('weight', 'id').by('weight').by('id')"
请帮我找出所有从买家源点到卖家目标点，且类型为咨询的边。,g.V().hasLabel('buyer').outE('consult').where(inV().hasLabel('seller'))
"以(55,165,46),(31,176,20)作为请求表数据,属性分别为id,height,age, 源点的age等于输入表age,请帮我找出person的三角的环,边标签等于person_likes_person, 并返回这些点的id","g.withSideEffect('p', [['id':55, 'height':165, 'age':46], ['id':31, 'height':176, 'age':20]]).V().hasLabel('person').as('a').where(__.select('a').values('age').as('age').select('p').unfold().where(eq('age')).by().by('age')).outE('person_likes_person').inV().as('b').outE('person_likes_person').inV().as('c').where(outE('person_likes_person').inV().where(eq('a'))).select('a', 'b', 'c').by().by('id').by('id')"
"帮我查询和person马梅有关的person,称为X,再帮我查询和这个X有关联的其他person,以及和X有关联的person","g.V().hasLabel('person').has('name', '马梅').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"帮我查询和buyer杜宏有consult关系的seller,再帮我查询以creates关系关联了杜宏的orders","g.V().has('buyer', 'name', '杜宏').as('a').out('consult').as('b').select('a').in('creates').as('c').select('a', 'b', 'c')"
查找所有和读者徐思思之间有喜欢关系的书,"g.V().hasLabel('reader').has('name', '徐思思').out('likes').hasLabel('book')"
"请帮我查找全部与徐月存在投资关系的公司,公司与贷款存在申请关系的点,返回这些点的id","g.V().has('name', '徐月').out('invest').hasLabel('company').out('apply').hasLabel('loan').id()"
"请帮我查找学生选择的课程, 令课程的学分的值等于教课程的教师的性别的平均值, 再查找课程属于的部门","g.V().hasLabel('student').as('a').outE('selects').inV().hasLabel('course').as('b').sideEffect(__.select('b').inE('teach').outV().hasLabel('teacher').values('gender').mean().as('credit')).select('b').outE('belong').inV().hasLabel('department').as('d').select('credit', 'd')"
"请帮我找出名为张建聪的点publish的book,并对这些book的name进行求和","g.V().has('name', '张建聪').outE('publish').inV().hasLabel('book').values('name').sum()"
"以942,193作为请求点id, 以属性id作为相等条件,查找大学四川大学 拥有的部门,返回部门 拥有的学生的年龄减68的值 ","g.inject([942, 193]).unfold().as('p').V().hasLabel('university').has('id', __.select('p')).has('name', '四川大学').outE('university_has_department').inV().hasLabel('department').outE('department_has_student').inV().hasLabel('student').values('age').math('_ - 68')"
"请帮我找出源点类型为person,目标点类型为person,类型为person的边",g.V().hasLabel('person').outE('person').as('e').inV().hasLabel('person').select('e')
返回孙思思老师授课的课程，被其他学生选修的数量。,"g.V().has('teacher', 'name', '孙思思').outE('teach').inV().hasLabel('course').inE('selects').outV().hasLabel('student').count()"
帮我查询以支付关系关联了person徐科的person,"g.V().hasLabel('person').has('name', '徐科').inE('pay').outV().dedup()"
查询北京大学的部门,"g.V().hasLabel('university').has('name', '北京大学').outE('has').inV().hasLabel('department').as('b', 'a').select('a', 'b')"
"以(59,'吴建聪',7210)作为请求表数据,属性分别为age,name,salary, 源点的age等于输入表age,找出和person韩月有关的person,称为X,再找出和这个X有关联的其他person,以及和X有关联的person","g.withSideEffect('p', [['age': 59, 'name': '吴建聪', 'salary': 7210]]).V().hasLabel('person').has('age', select('p').unfold().select('age')).has('name', '韩月').as('a').bothE().as('e').otherV().hasLabel('person').as('b').bothE().as('e2').otherV().hasLabel('person').as('c').select('b').bothE().as('e3').otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"查询forum contain的user,返回其源点的id乘38除id的值,以及目标点的salary减4294的平均值","g.V().hasLabel('forum').as('a').outE('contain').inV().hasLabel('user').as('b').select('a', 'b').by(values('id')).by(values('salary')).project('expr1', 'expr2').by(select('a').math('_ * 38 / _')).by(select('b').math('_ - 4294').mean())"
"查找195个person张国强和郑雪,共同的伙伴","g.V().has('person', 'name', '张国强').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '郑雪').select('b').limit(195)"
"返回126个大学电子科技大学和重庆大学,共同的伙伴","g.V().has('university', 'name', '电子科技大学').outE('partner').inV().as('b').inE('partner').outV().has('university', 'name', '重庆大学').select('b').limit(126)"
请帮我找出与标签为'doctor'的点有'belong'关系的部门，以及这些部门与'has'关系的医生，以及这些医生与'creates'关系的处方。,g.V().hasLabel('doctor').as('a').out('belong').hasLabel('department').as('b').out('has').hasLabel('doctor').as('c').out('creates').hasLabel('prescription').as('d').select('d')
找出出版社名为何伟的点，返回它们的性别、薪水和年龄。,"g.V().hasLabel('publisher').has('name', '何伟').project('gender', 'salary', 'age').by(values('gender')).by(values('salary')).by(values('age'))"
 请帮我查找部门到教师之间的拥有边。,g.V().hasLabel('department').outE('has').as('e').inV().hasLabel('teacher').select('e')
 找出与seller节点关联的 goods 节点，按名称分组并返回名称。,g.V().hasLabel('seller').bothE('has').otherV().hasLabel('goods').values('name').group().by().select(values).unfold()
"给出名为美团的点申请的贷款,并对这些贷款的权重进行求和","g.V().has('name', '美团').outE('apply').inV().hasLabel('loan').values('weight').sum()"
"输入表的列为gender,age,salary, 数据为('famale',5,2123), 源点的gender等于输入表gender,给出前178个满足条件createTime不是2033年10月03日,id不为空的forum","g.withSideEffect('p', [['gender': 'famale', 'age': 5, 'salary': 2123]]).V().hasLabel('forum').as('a').where(and(__.select('a').values('gender').is(eq(__.select('p').unfold().select('gender'))), __.select('a').values('createTime').is(neq('2033-10-03')), __.select('a').has('id'))).select('a').limit(178)"
"请帮我查找名为杜思琪和吴若涵的,类型为买家的点公共的朋友节点的名单","g.V().has('buyer', 'name', '杜思琪').out('friend').as('b').in('friend').has('buyer', 'name', '吴若涵').select('b').values('name')"
"用如下schema的图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找113个与何轩和赵雪都存在关系的seller节点","g.V().has('name', '何轩').outE().inV().hasLabel('seller').as('b').inE().outV().has('name', '赵雪').select('b').limit(113)"
查询9个与王国强和黄建国都存在关系的person节点,"g.V().has('name', '王国强').outE().inV().hasLabel('person').where(__.inE().outV().has('name', '黄建国')).limit(9)"
帮我查询前87个类型为belong的边,g.E().hasLabel('belong').limit(87)
"帮我查询id为23的person提交的软件, 并将软件有关的person的年龄的和赋值给软件的名字, 接着查询软件的名字小于23的软件使用的软件","g.V().has('person', 'id', 23).outE('commits').inV().hasLabel('software').as('b').sideEffect(select('b').sack(assign).by(constant(0)).bothE().otherV().hasLabel('person').values('age').sack(sum).sack().as('name')).where(select('b').values('name').is(lt(23))).outE('uses').inV().hasLabel('software').as('d').select('b', 'd').by('name').by()"
"找出名为王伟的person,以及与其有关的person,并返回王伟的薪资和这些person的薪资","g.V().has('person', 'name', '王伟').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('salary')"
"帮我查询与person何梅有关系的person, 返回和这些person有关联的person的,salary的和对薪资取余除154除187的值","g.V().has('person', 'name', '何梅').bothE().otherV().hasLabel('person').bothE().otherV().hasLabel('person').values('salary').sum().fold().project('result').by(__.math('_ / 154 / 187'))"
请找出与处方Prescription_354有关联的所有药品，以及由医生徐宏创建的所有处方，并将它们全部返回。,"g.V().has('prescription', 'name', 'Prescription_354').as('a').out('contain').as('b').select('a').V().has('doctor', 'name', '徐宏').as('c').out('creates').as('d').select('a', 'b', 'c', 'd')"
"用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查询id为55的点的height,id","g.V().has('id', '55').project('height', 'id').by('height').by('id')"
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出类型是company_creates_software,且f1不等于false且weight小于163.18,或targetId不为空的边","g.E().hasLabel('company_creates_software').or(and(has('f1', neq(false)), has('weight', lt(163.18))), has('targetId', neq(null)))"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部和person点有提交关系的软件节点,且边满足条件源点id的求和值小于126.22,目标软件节点满足条件语言等于c","g.V().hasLabel('person').as('a').outE('person_commits_software').as('e').inV().hasLabel('software').has('lang', 'c').as('b').select('a', 'e', 'b').by().by().by().where(__.select('e').values('srcId').fold().sum().is(lt(126.22))).select('b')"
"查找创建时间为1999年02月16日且人数在39到119之间的论坛包含的用户的名称,以及这些用户 发布的帖子的名称","g.V().hasLabel('forum').has('createTime', '1999-02-16').has('peopleNumber', between(39, 119)).outE('contain').inV().hasLabel('user').as('b').outE('publish').inV().hasLabel('post').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"返回id为65的doctor diagnose的patient, 并将patient有关的department的id的最小值赋值给patient的name, 接着查询patient的name小于65的patient accept的prescription","g.V().hasLabel('doctor').has('id', 65).outE('diagnose').inV().hasLabel('patient').as('b').project('name', 'd').by(coalesce(select('b').bothE().inV().hasLabel('department').values('id').min(), constant(0))).by(select('b').outE('accept').inV().hasLabel('prescription').fold()).unfold().where(select('name').is(lt(65))).select('name', 'd')"
找出apply了贷款且贷款不为空的person，显示他们的姓名。同时，也显示他们贷款对应的存款账户的名称。,"g.V().hasLabel('person').has('salary').as('a').outE('apply').as('e').inV().hasLabel('loan').as('b').outE('deposit').as('e2').inV().hasLabel('account').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
帮我查询以包含关系关联了帖子Post_148的论坛,"g.V().hasLabel('post').has('name', 'Post_148').inE('contain').outV().hasLabel('forum')"
"输入请求点id的列表92,436, 源点的id等于输入表id,查询forum天涯论坛的friend的partner的friend","g.withSideEffect('p', [92, 436]).V().hasLabel('forum').has('id', within('p')).has('name', '天涯论坛').out('friend').out('partner').out('friend')"
"返回18个名为黄雪的点取消的label为订单的节点,且其价格大于3610.18或名字等于Order_142","g.V().has('name', '黄雪').outE('cancel').inV().hasLabel('orders').has('price', gt(3610.18)).or().has('name', 'Order_142').limit(18)"
 请帮我找出所有用户源点之间、标签为'创造'的边，并返回这些边中每个边的srcId平均值，再加上源点id除以156.26的值，以及目标点id乘以110的值。,"g.V().hasLabel('user').as('a').outE('creates').as('e').inV().as('b').project('result1', 'result2').by(__.math('(mean + srcId) / 156.26').by(__.select('e').values('srcId').mean()).by(__.select('e').values('srcId'))).by(__.select('b').values('targetId').math('_ * 110'))"
 找Comment_309belong这个评论所属的影片节点拥有的标签。,"g.V().hasLabel('comment').has('name', 'Comment_309').out('belong').hasLabel('film').out('has').hasLabel('tag')"
 找出与韩梅和陈科有关的人，共有151个。,"g.V().has('name', '韩梅').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '陈科').select('b').limit(151)"
"返回所有id为114的doctor关联的patient,和以diagnose关系关联了这些patient的其他doctor","g.V().hasLabel('doctor').has('id', 114).bothE().otherV().hasLabel('patient').as('b').inE('diagnose').otherV().hasLabel('doctor').as('c').select('b', 'c')"
"帮我查询和用户点有发布关系的帖子节点,且边满足条件f0小于856,目标帖子节点字数不为空","g.V().hasLabel('user').as('a').outE('publish').has('f0', lt(856)).as('e').inV().hasLabel('post').has('wordCount', neq(null)).as('b').select('b')"
 找出与电影院'好视影院'存在上映关系，且与标签'动作'存在拥有关系的电影节点，并返回这些电影的名字、价值和电影院'好视影院'的地址，以及标签'动作'的ID。,"g.V().hasLabel('cinema').has('name', '好视影院').as('a').outE('releases').inV().hasLabel('film').as('b').inE('has').outV().hasLabel('tag').has('name', '动作').as('c').select('a', 'b', 'c').by('address').by(values('name', 'value')).by('id')"
"以638,523,214作为请求点id, 以属性id作为相等条件,查询前47个类型是author_write_book的边","g.inject([638, 523, 214]).unfold().as('p').V().has('id', __.where(eq('p'))).outE('author_write_book').limit(47)"
"根据price,name分组,计算weight的和除weight的最大值",g.V().hasLabel('a').group().by('price').by(group().by('name').by(values('weight').sum())).unfold().select(values).unfold().select(values).as('sum_weight').select(keys).select('name').as('name').select(keys).select('price').as('price').select('sum_weight').as('sum').select('name').select('price').select('sum').math('sum / _').by(values('weight')).max()
"帮我查询50个名为字节的点申请的label为贷款的节点,且其id在6到31之间或金额不为空","g.V().has('name', '字节').outE('apply').inV().hasLabel('loan').or(has('id', between(6, 31)), has('amount', neq(null))).limit(50)"
"请帮我查找id为113的教师关联的课程,和以选择关系关联了这些课程的其他学生","g.V().has('teacher', 'id', 113).bothE().otherV().hasLabel('course').as('b').inE('selects').otherV().hasLabel('student').as('c').select('b', 'c')"
"给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询与seller徐思琪有seller_has_goods关系的2度以内的环","g.V().hasLabel('seller').has('name', '徐思琪').as('a').outE('seller_has_goods').inV().as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出和reader王梅有reader_likes_book关系的book,再请帮我找出以reader_likes_book关系关联了王梅的book","g.V().hasLabel('reader').has('name', '王梅').as('a').bothE('reader_likes_book').otherV().hasLabel('book').dedup().as('b', 'c').select('a', 'b', 'c')"
 查询与 Amily 买家有关，且商品为香蕉的订单。,"g.V().has('buyer', 'name', 'Amily').outE('creates').inV().hasLabel('orders').as('b').inE('contain').outV().has('goods', 'name', '香蕉').select('b')"
"返回从pullRequest PR-216出发,经过类型是belong的边,走3度到达的repository点","g.V().hasLabel('pullRequest').has('name', 'PR-216').repeat(outE('belong').inV()).times(3).hasLabel('repository')"
"查找repository Tugraph has的pullRequest,以及has这些pullRequest的repository, 令pullRequest的createTime等于repository的id对94取余, 返回repository(a)的lang,pullRequest(b)的name,repository(c)的stars","g.V().has('repository', 'name', 'Tugraph').as('a').outE('has').inV().hasLabel('pullRequest').as('b').inE('has').outV().hasLabel('repository').as('c').select('a', 'b', 'c').by(coalesce(values('lang'), constant(''))).by(coalesce(values('name'), constant(''))).by(coalesce(values('stars'), constant('')))"
"请帮我查找全部与何伟存在喜欢关系的person,person与person存在认识关系的点,返回这些点的身高","g.V().has('name', '何伟').out('likes').hasLabel('person').out('knows').hasLabel('person').values('height')"
"以112,182,164,843,357作为请求点id, 源点的id等于输入表id,请帮我找出名为孙雪的学生,以及与其有关的教师,并返回孙雪的薪资和这些教师的性别","g.inject([112, 182, 164, 843, 357]).as('p').unfold().as('id').V().hasLabel('student').has('id', __.select('id')).has('name', '孙雪').as('a').bothE().as('e').otherV().hasLabel('teacher').as('b').select('a', 'b').by('salary').by('gender')"
"查询46个创建时间不等于2025年11月22日,名字等于ISSUE-345,名字不是ISSUE-441的事项,根据id从小到大排列","g.V().hasLabel('issue').has('createTime', neq('2025-11-22')).has('name', 'ISSUE-345').has('name', neq('ISSUE-441')).order().by('id', asc).limit(46)"
 请帮我查找武汉所有被大学包含的点，以及武汉所包含的国家。,"g.V().has('name', '武汉').as('a').outE('contain').inV().hasLabel('university').as('b').select('a').inE('contain').outV().as('c').select('a', 'b', 'c')"
 找出与哔哩哔哩公司（company Bilibili)有借款关系的账户，以及与账户BIN(银行代码）有转账关系的账户，返回它们。,"g.V().has('company', 'name', 'Bilibili').as('a').out('apply').as('b').select('a').V().has('account', 'name', 'BIN').as('c').out('transfer').as('d').select('a', 'b', 'c', 'd')"
"找出创造医生徐轩创造的处方,的医生","g.V().hasLabel('doctor').has('name', '徐轩').outE('creates').inV().hasLabel('prescription').as('b').inE('creates').outV().hasLabel('doctor').as('c').select('b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询标签等于person的点,返回136个",g.V().hasLabel('person').limit(136)
"返回所有源点label为company,目标点label为loan,label为account或company的边","g.V().hasLabel('company').outE('account', 'company').as('e').inV().hasLabel('loan').select('e')"
请帮我找出源点是buyer，目标点是goods，类型是look的边。,g.V().hasLabel('buyer').outE('look').where(inV().hasLabel('goods'))
"找出名为郑建国的,name不等于少年闰土的partner,返回这些partner的price,和边的f1,weight,timeStamp","g.V().has('name', '郑建国').outE('partner').as('e').inV().has('name', neq('少年闰土')).as('b').select('b', 'e').by('price').by(values('f1', 'weight', 'timeStamp'))"
"查询名为杭州的点包含的全部公司,并对这些公司的名字进行求和","g.V().has('name', '杭州').out('contain').hasLabel('company').values('name').sum()"
"给出标签等于病人,名为赵强的点,返回这些点的身高","g.V().hasLabel('patient').has('name', '赵强').values('height')"
"找出全部id为188的大学关联的公司,和以包含关系关联了这些公司的其他城市","g.V().has('university', 'id', 188).bothE().otherV().hasLabel('company').as('b').inE('contain').otherV().hasLabel('city').as('c').select('b', 'c')"
"查找名为Bilibili的company,以及与其有关的person,并返回Bilibili的id和这些person的name","g.V().hasLabel('company').has('name', 'Bilibili').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('id').by('name')"
"帮我查询用户韩建聪喜欢的仓库,被其他合并请求属于的数量","g.V().has('user', 'name', '韩建聪').out('likes').in('belong').hasLabel('pullRequest').count()"
请帮我查找与'country'标签相关的城市，这些城市包含的公司与大学有合作关系。,g.V().hasLabel('country').out('contain').hasLabel('city').out('contain').hasLabel('company').out('cooperate').hasLabel('university')
帮我查询前37个类型是申请的边,g.E().hasLabel('apply').limit(37)
"查找与作家马梅有关,且与作家陈红有关系的作家节点","g.V().has('author', 'name', '马梅').bothE('knows').bothV().where(__.bothE('knows').bothV().has('author', 'name', '陈红')).dedup()"
大小对大小取余的最大值,g.V().hasLabel('a').project('mod').by(values('size').as('s').math('s % s')).select(values).max()
id除id的值,g.V().hasLabel('a').project('result').by(math('_ / _').by('id').by('id'))
请帮我找出146个与赵建聪和王国强都存在关系的person节点,"g.V().has('name', '赵建聪').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '王国强').select('b').limit(146)"
"请帮我找出与名为Calcite和Zookeeper的点共同使用的,类型是软件的节点","g.V().has('name', 'Calcite').out('uses').hasLabel('software').as('b').in('uses').has('name', 'Zookeeper').select('b')"
返回所有与person黄科有关系的person的id,"g.V().has('person', 'name', '黄科').bothE().otherV().hasLabel('person').id()"
"请帮我查找类型为belong,且满足条件f0在910到980之间的边","g.E().hasLabel('belong').has('f0', between(910, 980))"
"查询名为吴建聪的,性别不是famale的相关者,返回这些相关者的id,和边的f0,权重","g.V().has('name', '吴建聪').outE('relation').as('e').inV().has('gender', neq('famale')).as('b').select('b', 'e').by('id').by(project('f0', 'weight').by('f0').by('weight'))"
查找所有与电影建国大业有关系的评论的创建时间,"g.V().hasLabel('film').has('name', '建国大业').bothE().otherV().hasLabel('comment').values('createTime')"
"请帮我找出标签等于作家的点,返回97个",g.V().hasLabel('author').limit(97)
找出与黄科和马建国都认识的人。,"g.V().has('person', 'name', '黄科').out('knows').as('b').in('knows').has('person', 'name', '马建国').select('b')"
"使用列为height,salary,gender, 数据为(196,2310,'male')的子查询作为输入表, 以属性salary作为相等条件,查询与buyer陈梅有关,且与goods椅子有关系的orders节点","g.withSideEffect('p', [['height':196, 'salary':2310, 'gender':'male']]).V().hasLabel('buyer').has('salary', 2310).has('name', '陈梅').out('buyer_creates_orders').hasLabel('orders').where(out('orders_contain_goods').hasLabel('goods').has('name', '椅子'))"
返回与大学中国科技大学和清华大学都存在属于关系的点,"g.V().has('university', 'name', '中国科技大学').outE('belong').inV().as('b').inE('belong').outV().has('university', 'name', '清华大学').select('b')"
 请问腾讯公司所在的城市及其包含的大学ID、名称和价值是什么？,"g.V().has('company', 'name', '腾讯').out('belong').as('b').out('contain').as('c').select('c').by(__.values('id', 'value', 'name').fold())"
"查询全部源点标签为事项,目标点标签为仓库,标签为合并请求或用户的边","g.V().hasLabel('issue').bothE('pullRequest', 'user').where(otherV().hasLabel('repository'))"
"找出id为77的seller有关的buyer的relation, 再找出和buyer有关系的partner","g.V().has('seller', 'id', 77).as('a').bothE().as('e').otherV().hasLabel('buyer').as('b').bothE('relation').as('e2').otherV().as('c').select('b').bothE('partner').as('e3').otherV().as('d').select('a', 'b', 'c', 'd')"
"帮我查询所有源点标签为学生,边标签为选择,以及满足条件目标点id大于100或权重为空或f0小于773的边","g.V().hasLabel('student').as('a').outE('selects').as('e').inV().as('b').where(or(has('targetId', gt(100)), not(has('weight')), has('f0', lt(773)))).select('e')"
"查询属于医生王梅属于的部门,的医生","g.V().hasLabel('doctor').has('name', '王梅').as('a').outE('belong').as('e').inV().hasLabel('department').as('b').inE('belong').as('e2').outV().hasLabel('doctor').as('c').select('b', 'c')"
"请帮我找出公司滴滴雇佣的person, 令公司的id等于person的薪资, 返回公司的规格, person的薪资","g.V().hasLabel('company').has('name', '滴滴').as('a').outE('employee').inV().hasLabel('person').as('b').select('a', 'b').by(choose(__.has('id'), constant('id'), constant('b.salary'))).by('salary').select('a', 'b').by('scale').by('salary')"
查询141个与赵科和何伟都存在关系的person节点,"g.V().has('name', '赵科').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '何伟').select('b').limit(141)"
请帮我查找与何建国有关联的爱人，或者爱人的爱人。,"g.V().has('person', 'name', '何建国').outE('lover').inV().hasLabel('person').simplePath().times(2).emit().dedup().values('name')"
将所有源点标签设为person，目标点标签也为person，并且这些边的标签是家人。,g.V().hasLabel('person').outE('family').where(inV().hasLabel('person'))
 返回同时与赵红存在家人关系、与孙若涵存在同事关系的节点，并返回这些节点的年龄、ID、赵红的年龄和孙若涵的名字。,"g.V().has('person', 'name', '赵红').as('a').outE('family').inV().hasLabel('person').as('b').inE('colleague').outV().has('person', 'name', '孙若涵').as('c').select('a', 'b', 'c').by('age').by('age').by('id').by('name').project('a.age', 'b.age', 'b.id', 'c.name').by(select('a')).by(select('b')).by(select('b')).by(select('c'))"
"找出关联书孤城的书,和这些书引用的书","g.V().hasLabel('book').has('name', '孤城').in('relates').as('b').out('refers').as('c').select('b', 'c')"
返回所有从person类型的源点到评论类型的target点，且类型为创造的边。,g.V().hasLabel('person').outE('creates').where(inV().hasLabel('comment'))
"以184,778作为请求点id, 源点的id等于输入表id,查询和university电子科技大学有university_has_department关系的department,以及和student孙思思有student_selects_course关系的course,将它们都返回","g.withSideEffect('p', [184, 778]).V().hasLabel('university').where(__.values('id').is(within('p'))).has('name', '电子科技大学').as('a').outE('university_has_department').inV().hasLabel('department').as('b').select('a').V().hasLabel('student').has('name', '孙思思').as('c').outE('student_selects_course').inV().hasLabel('course').as('d').select('a', 'b', 'c', 'd')"
" 给出97个与类型为person的点有parent关系的person,并找出与这些person有colleague关系的person。",g.V().hasLabel('person').as('a').outE('parent').inV().hasLabel('person').as('b').outE('colleague').inV().hasLabel('person').as('c').select('c').limit(97)
请帮我找出前92个标签等于has的边,g.E().hasLabel('has').limit(92)
"查询所有名为李建聪的,字数在188到523之间的朋友,返回这些朋友的语言,和边的目标点id,权重","g.V().has('name', '李建聪').outE('friend').as('e').inV().has('wordCount', between(188, 523)).as('b').select('b', 'e').by('lang').by(union(id(), values('weight')).fold())"
"帮我查询id为129的点的名字,上次登录时间","g.V().has('id', 129).project('a.name', 'a.lastLoginTime').by('name').by('lastLoginTime')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回全部和person李科有关系的person节点,返回这些点的年龄,薪资,id","g.V().has('person', 'name', '李科').bothE().otherV().hasLabel('person').project('b.age', 'b.salary', 'b.id').by(values('age')).by(values('salary')).by(values('id'))"
 请帮我查找与王梅有购买关系的软件，以及与杜思琪有隶属关系的公司，并返回它们。,"g.V().has('person', 'name', '王梅').as('a').out('buy').hasLabel('software').as('b').select('a').V().has('person', 'name', '杜思琪').as('c').out('belong').hasLabel('company').as('d').select('a', 'b', 'c', 'd')"
获取 person 的关联人，或者关联人的关联人,g.V().hasLabel('person').outE('relation').inV().hasLabel('person').outE('relation').inV().hasLabel('person').dedup()
"输入表的列为category,id,name, 数据为('安眠药',92,'医疗酒精'),('感冒药',13,'头孢'), 以属性name作为相等条件,找出从处方Prescription_352出发,经过类型为prescription_contain_medicine的边,走3跳到达的药品点","g.withSideEffect('p', [['安眠药', 92, '医疗酒精'], ['感冒药', 13, '头孢']]).V().hasLabel('prescription').has('name', 'Prescription_352').repeat(outE('prescription_contain_medicine').inV().simplePath()).times(3).dedup()"
帮我查询和买家郑科之间有取消关系的订单,"g.V().hasLabel('buyer').has('name', '郑科').outE('cancel').inV().hasLabel('orders')"
请帮我查找所有与medicine头孢有关系的medicine的name,"g.V().hasLabel('medicine').has('name', '头孢').bothE().otherV().hasLabel('medicine').values('name')"
"输入表的列为scale,id,peopleNumber, 数据为('small',86,533), 以属性scale作为相等条件,给出全部名为华中科技大学的点的,peopleNumber在2226到7204之间的friend,返回这些friend的id,和边的srcId,f0,targetId","g.withSideEffect('p', [['scale': 'small', 'id': 86, 'peopleNumber': 533]]).V().has('scale', __.select('p').unfold().select('scale')).has('name', '华中科技大学').outE('friend').as('e').inV().has('peopleNumber', between(2226, 7204)).project('b.id', 'e.srcId', 'e.f0', 'e.targetId').by(__.id()).by(__.select('e').outV().id()).by(__.select('e').values('f0')).by(__.select('e').inV().id())"
返回包含在澳大利亚的所有城市，以及属于澳大利亚的城市。,"g.V().has('name', '澳大利亚').as('a').out('contain').hasLabel('city').as('b').select('a').in('belong').hasLabel('city').as('c').select('a', 'b', 'c')"
"给出源点类型为公司,目标点类型为大学,类型为大学的边",g.V().hasLabel('company').outE('university').as('e').inV().hasLabel('university').select('e')
"使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));查找所有名为Comment_116的,value为空或value不是815的partner,返回这些partner的value,和边的f1,f0,targetId","g.V().has('name', 'Comment_116').outE('partner').as('e').inV().as('b').where(or(__.not(has('value')), __.has('value', neq(815)))).select('b', 'e').by('value').by(project('f1', 'f0', 'targetId').by('f1').by('f0').by('targetId'))"
"查找满足条件名字为陈伟且身高等于186,或id小于等于35的节点","g.V().or(has('name', '陈伟').has('height', 186), has('id', lte(35)))"
"找出id为88的病人有关的医生的伙伴, 再找出和医生有关系的伙伴","g.V().hasLabel('patient').has('id', 88).as('a').bothE().as('e').otherV().hasLabel('doctor').as('b').bothE('partner').as('e2').otherV().as('c').select('b').bothE('partner').as('e3').otherV().as('d').select('a', 'b', 'c', 'd')"
"查询源点语言不是687,边类型为拥有,且满足条件目标点id不为空且源点id大于20,或f1为true的边,返回这些边的目标点id除65的个数","g.V().has('lang', neq(687)).as('a').outE('has').where(or(and(has('targetId', neq(null)), has('srcId', gt(20))), has('f1', true))).as('e').inV().as('b').select('e').values('targetId').math('_ / 65').count()"
 查询同时满足以下条件的点：它们被标记为'person'，并且与这些点有'喜欢'关系，并且与这些点有'支付'关系，并且与这些点有'喜欢'关系。,g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('person').as('b').outE('pay').as('e2').inV().hasLabel('person').as('c').outE('likes').as('e3').inV().hasLabel('person').as('d').select('d')
根据韩轩提供的人员信息，返回与该人员相关的人员的姓名和ID。,"g.V().has('person', 'name', '韩轩').out('knows').out('relates').project('c.name', 'c.id').by('name').by('id')"
"请帮我找出所有名为文学院的点的,年龄在24到78之间的相关者,返回这些相关者的性别,和边的f1","g.V().has('name', '文学院').outE('relation').as('e').inV().has('age', between(24, 78)).project('gender', 'f1').by(values('gender')).by(select('e').values('f1'))"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出person马红的全部标签为family的边,并根据srcId从小到大排列,返回111个","g.V().hasLabel('person').has('name', '马红').outE('person_family_person').order().by('srcId', asc).limit(111).inV()"
"返回全部源点类型为city,目标点类型为country,类型为country或university或company的边","g.V().hasLabel('city').outE('country', 'university', 'company').as('e').inV().hasLabel('country').select('e')"
"返回名为李国强和周雪的,标签等于person的点公共的colleague节点的名单","g.V().has('person', 'name', '李国强').outE('colleague').inV().as('b').inE('colleague').outV().has('person', 'name', '周雪').select('b').values('name')"
给出全部和person周国强之间有parent关系的person,"g.V().hasLabel('person').has('name', '周国强').out('parent').hasLabel('person')"
"以295,283作为请求点id, 源点的id等于输入表id,给出全部和论坛知乎有关系的标签节点,返回这些点的id,名字,价值","g.inject([295, 283]).as('p').flatMap(select('p').unfold().as('id')).V().hasLabel('forum').as('a').where(and(__.as('a').values('id').as('a_id'), __.as('id').select('id').as('p_id'), __.as('a_id').is(eq('p_id')))).has('name', '知乎').bothE().as('e').otherV().hasLabel('tag').as('b').select('b').by(__.values('id', 'name', 'value').fold())"
 返回与标签'其他'存在关系且与评论'Comment_110'存在关系的电影院节点的大小。,"g.V().has('tag', 'name', '其他').outE().inV().hasLabel('cinema').as('b').inE().outV().has('comment', 'name', 'Comment_110').select('b').values('size')"
"查找153个名为中国的点contain的标签为city的节点,且其name不等于重庆","g.V().has('name', '中国').out('contain').hasLabel('city').has('name', neq('重庆')).limit(153)"
"找出79个repository Kafka和XXRepo,共同的relation","g.V().has('repository', 'name', 'Kafka').outE('relation').inV().as('b').inE('relation').outV().has('repository', 'name', 'XXRepo').select('b').limit(79)"
 请问有没有一个叫张若涵和吴宏的医生，他们是否共同合作过？,"g.V().hasLabel('doctor').has('name', '张若涵').as('a').outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().hasLabel('doctor').has('name', '吴宏').as('c').select('b').limit(88)"
"请帮我查找名为计算机体系结构的,名字为生物学院或价值大于等于74的伙伴,返回这些伙伴的价值,和边的f1,权重,源点id","g.V().has('name', '计算机体系结构').outE('partner').as('e').inV().has('name', '生物学院').or().has('value', gte(74)).select('e').project('b.value', 'e.f1', 'e.weight', 'e.srcId').by(__.inV().values('value')).by(values('f1')).by(values('weight')).by(values('srcId'))"
找出与patient韩月和韩红都存在accept关系的点,"g.V().has('patient', 'name', '韩月').out('accept').as('b').in('accept').has('patient', 'name', '韩红').select('b')"
查找前192个等级小于等于2或价值为空或等级为空的大学,"g.V().hasLabel('university').or(has('level', lte(2)), hasNot('value'), hasNot('level')).limit(192)"
 请问从人人影城出发，经过上映的边，走3步可以到达哪个电影点？,"g.V().has('cinema', 'name', '人人影城').repeat(out('releases')).times(3).hasLabel('film')"
 查询赵建聪的朋友的朋友。,"g.V().has('person', 'name', '赵建聪').out('relation').out('relation').out('friend')"
找出病人的1度以内的环,"g.V().hasLabel('patient').as('a').both().as('b').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"请帮我找出person吴科购买的软件, 令person的id等于person的薪资的最小值, 返回person的薪资, 软件的价值","g.V().has('person', 'name', '吴科').as('a').outE('buy').inV().hasLabel('software').as('b').select('a', 'b').by(values('salary')).by(values('value')).project('a.salary', 'b.value').by(select('a')).by(select('b'))"
"返回被person吴宏认识的person,和吴宏关联的person","g.V().hasLabel('person').has('name', '吴宏').as('b').outE('relates').inV().as('c').select('b').inE('knows').outV().as('a').select('a', 'b', 'c')"
"请帮我查找病人郑宏接受的处方,以及创造这些处方的医生","g.V().has('patient', 'name', '郑宏').as('a').outE('accept').as('e').inV().hasLabel('prescription').as('b').inE('creates').as('e2').outV().hasLabel('doctor').as('c').select('b', 'c')"
返回关联《罪与罚》的书籍，以及这些书籍的类别。,"g.V().has('book', 'name', '罪与罚').out('relates').out('relates').values('category')"
"找出大学重庆大学属于的城市,被其他国家包含的数量","g.V().has('university', 'name', '重庆大学').out('belong').in('contain').dedup().count()"
查询与名为Light和LX001的点共享贷款标签的节点,"g.V().has('name', 'Light').outE('repay').inV().hasLabel('loan').as('b').inE('repay').outV().has('name', 'LX001').select('b')"
"给出被公司申请数量大于11的贷款,记为relationCount,再查询这些贷款申请的公司","g.V().hasLabel('loan').as('a').project('a', 'relationCount').by(identity()).by(__.in('apply').hasLabel('company').id().max()).where(__.select('relationCount').is(gt(11))).select('a').out('apply').hasLabel('company').dedup()"
"请帮我找出购买软件Spark使用的软件,的person","g.V().hasLabel('software').has('name', 'Spark').outE('uses').inV().as('b').inE('buy').outV().as('c').select('b', 'c')"
返回以撰写关系关联了书java程序设计的作家,"g.V().hasLabel('book').has('name', 'java程序设计').in('write').hasLabel('author')"
"查询创造评论Comment_155的person,和这些person观看的电影","g.V().hasLabel('comment').has('name', 'Comment_155').in('creates').as('b').out('watch').hasLabel('film').as('c').select('b', 'c')"
 请问能否帮我查询李轩发布的所有带标签名的文章？,"g.V().has('user', 'name', '李轩').outE('publish').inV().hasLabel('post').outE('has').inV().hasLabel('tag').values('name')"
请帮我找出182个与数据结构和高等数学都存在关系的部门或教师节点,"g.V().has('name', '数据结构').outE().inV().or(hasLabel('department'), hasLabel('teacher')).as('b').inE().outV().has('name', '高等数学').select('b').limit(182)"
请帮我找出与吴红有关的人，以及这些人被其他人关联的数量。,"g.V().has('person', 'name', '吴红').as('a').outE('relates').as('e').inV().hasLabel('person').as('b').inE('relates').as('e2').outV().hasLabel('person').as('c').select('c').count()"
"请帮我找出拥有学生杜思琪的部门,和这些部门拥有的学生","g.V().hasLabel('student').has('name', '杜思琪').as('a').inE('has').outV().hasLabel('department').as('b').outE('has').inV().hasLabel('student').as('c').select('b', 'c')"
"请帮我找出belong city纽约的university,和这些university cooperate的company","g.V().hasLabel('city').has('name', '纽约').inE('belong').outV().hasLabel('university').as('b').outE('cooperate').inV().hasLabel('company').as('c').select('b', 'c')"
"找出forum百度贴吧contain的user, 令user的name等于user的height,令user的name等于user的height, 返回forum的value, user的age","g.V().hasLabel('forum').has('name', '百度贴吧').outE('contain').inV().hasLabel('user').as('b').project('a_value', 'b_age').by(select('b').by(constant('b')).by('value')).by(select('b').by('age'))"
返回与韩红有喜欢关系的评论，以及这些评论中与电影Comment_418有关联的所有电影。,"g.V().has('person', 'name', '韩红').as('a').out('likes').hasLabel('comment').as('b').select('a', 'b').V().has('comment', 'name', 'Comment_418').as('c').out('belong').hasLabel('film').as('d').select('a', 'b', 'c', 'd')"
找出所有与Faker有转账关系的账号，并返回这些账号之间的转账价值。,"g.V().has('name', 'Faker').outE('transfer').inV().hasLabel('account').outE('transfer').inV().hasLabel('account').values('value')"
请帮我查找前174个label为creates的边,g.E().hasLabel('creates').limit(174)
"请帮我找出和用户李思思有关的合并请求,称为X,再请帮我找出和这个X有关联的其他事项,以及和X有关联的事项","g.V().has('user', 'name', '李思思').as('a').bothE().otherV().hasLabel('pullRequest').as('b').bothE().otherV().hasLabel('issue').as('c').select('b').bothE().otherV().hasLabel('issue').as('d').select('a', 'b', 'c', 'd')"
"找出person周梅拥有的账号,被其他账号转账的数量","g.V().hasLabel('person').has('name', '周梅').outE('own').inV().hasLabel('account').inE('transfer').outV().hasLabel('account').count()"
 找出与电影功夫有发行关系的电影院。,"g.V().hasLabel('film').has('name', '功夫').inE('releases').outV().hasLabel('cinema')"
"使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找全部和买家韩轩有关系的商品节点,返回这些点的名字,类别,价格","g.V().hasLabel('buyer').has('name', '韩轩').bothE().otherV().hasLabel('goods').project('b.name', 'b.category', 'b.price').by(values('name')).by(values('category')).by(values('price'))"
找出与《西虹市首富》和《神探狄仁杰》都有关系的41个评论节点。,"g.V().has('name', '西虹市首富').outE().inV().hasLabel('comment').as('b').inE().outV().has('name', '神探狄仁杰').select('b').limit(41)"
"调用KHOP函数,以33, 'to', 'Ml'作为输入,返回运算结果","g.call('KHOP').with('input', [33, 'to', 'Ml']).select('id', 'kValue')"
"输入请求点id的列表480, 源点的id等于输入表id,返回与user周科有user_creates_issue关系的2跳以内的环","g.withSideEffect('p', [480]).V().hasLabel('user').has('id', within('p')).has('name', '周科').as('a').bothE('user_creates_issue').bothV().where(neq('a')).simplePath().by(id).until(loops().is(2)).path().by(id).by(id).project('a.id', 'b_id').by(limit(local, 1)).by(tail(local, 1))"
"查找university has的department, 令department的name的值等于belongdepartment的course的name的最大值, 再查找department has的teacher","g.V().hasLabel('university').as('a').out('has').hasLabel('department').as('b').sideEffect(__.select('b').in('belong').hasLabel('course').values('name').max().as('maxName').select('b').property('name', __.select('maxName'))).out('has').hasLabel('teacher').as('d').select('b', 'd').by('name').by()"
请帮我找出天涯论坛上有关古代的帖子，并返回这些帖子的字数、创建时间和它们所在论坛以及标签的价值。,"g.V().hasLabel('forum').has('name', '天涯论坛').as('a').outE('contain').inV().hasLabel('post').as('b').inE('has').outV().hasLabel('tag').has('name', '古代').as('c').select('a', 'b', 'c').by('value').by('wordCount').by('value').project('a.value', 'b.wordCount', 'b.createTime', 'c.value').by(select('a')).by(select('b')).by(select('b').values('createTime')).by(select('c'))"
"查找191个和类型是cinema的点有releases关系的film,以及和这些film有has关系的tag",g.V().hasLabel('cinema').out('releases').hasLabel('film').out('has').hasLabel('tag').limit(191)
 请帮我找出所有作家按名字和年龄分组的薪资，并按薪资升序排序。,"g.V().hasLabel('author').group().by(values('name', 'age').fold()).by(values('salary').fold()).order(local).by(values, asc)"
"返回评论Comment_176属于的电影,以及观看这些电影的person","g.V().hasLabel('comment').has('name', 'Comment_176').outE('belong').inV().hasLabel('film').as('b').inE('watch').outV().hasLabel('person').as('c').select('b', 'c')"
"返回person杜建聪申请的贷款,被其他公司申请的数量","g.V().has('person', 'name', '杜建聪').outE('apply').inV().hasLabel('loan').as('b').inE('apply').outV().hasLabel('company').as('c').select('c').count()"
"查找喜欢书白夜行的读者,和这些读者喜欢的书","g.V().has('book', 'name', '白夜行').as('a').in('likes').as('b').out('likes').as('c').select('b', 'c')"
请找出与用户杜若涵和帖子Post_233有关的标签节点，并返回它们的ID和名称。,"g.V().has('user', 'name', '杜若涵').outE().inV().hasLabel('tag').as('b').inE().outV().has('post', 'name', 'Post_233').select('b').values('id', 'name')"
请帮我找出id为92的点的value,"g.V().has('id', 92).values('value')"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出类型为person_likes_person,且源点id在1到78之间的边","g.E().hasLabel('person_likes_person').has('srcId', between(1, 78))"
返回以咨询关系关联了卖家孙思思的买家,"g.V().hasLabel('seller').has('name', '孙思思').inE('consult').outV().hasLabel('buyer')"
 帮我查询李国强朋友的朋友,"g.V().has('person', 'name', '李国强').out('relation').out('friend').out('friend')"
"输入请求点id的列表527,746, 以属性id作为相等条件,请帮我找出全部和person点有关联关系的person节点,且边满足条件源点id是41,目标person节点满足条件身高在164到175之间","g.withSideEffect('p', [527, 746]).V().hasLabel('person').where(__.in('relates').has('srcId', 41).outV().hasLabel('person').has('id', within('p'))).has('height', between(164, 175))"
"请帮我找出所有源点标签等于department,目标点标签等于student,标签等于student的边",g.E().hasLabel('student').where(__.outV().hasLabel('department')).where(__.inV().hasLabel('student'))
请帮我找出所有与person有关的人，或者这些人再往上追溯的关联人员,g.V().hasLabel('person').outE('relation').inV().hasLabel('person').simplePath().by(T.id).times(2).emit().dedup()
请帮我查找与买家徐月和李思琪都存在取消关系的点,"g.V().has('buyer', 'name', '徐月').outE('cancel').inV().as('b').inE('cancel').outV().has('buyer', 'name', '李思琪').select('b')"
找赵科的伙伴的朋友,"g.V().hasLabel('person').has('name', '赵科').outE('relation').inV().outE('partner').inV().outE('friend').inV()"
 在大众电影院观看电影的人数,"g.V().hasLabel('cinema').has('name', '大众影院').outE('releases').inV().hasLabel('film').inE('watch').outV().hasLabel('person').count()"
"找出标签为订单的点,返回151个",g.V().hasLabel('orders').limit(151)
 电影绿巨人和泰坦尼克号存在共同点。,"g.V().hasLabel('film').has('name', '绿巨人').outE('has').inV().as('b').inE('has').outV().hasLabel('film').has('name', '泰坦尼克号').select('b')"
 给出Geaflow123的还款账户，以及所有点还款的贷款信息。,"g.V().has('name', 'Geaflow123').as('a').outE('repay').inV().hasLabel('loan').as('b').select('a').inE('transfer').outV().hasLabel('account').as('c').select('a', 'b', 'c')"
"查找所有名为物理学院的,id不等于28的朋友,返回这些朋友的名字,和边的权重,f0","g.V().has('name', '物理学院').outE('friend').as('e').inV().has('id', neq(28)).as('b').select('b', 'e').by('name').by(values('weight', 'f0'))"
给出与部门数学学院和计算机学院都存在拥有关系的点,"g.V().has('department', 'name', '数学学院').out('has').as('b').in('has').has('department', 'name', '计算机学院').select('b')"
查找与部门计算机学院和文学院都存在拥有关系的点,"g.V().hasLabel('department').has('name', '计算机学院').outE('has').inV().where(__.inE('has').outV().hasLabel('department').has('name', '文学院')).dedup()"
"使用列为id,createTime,weight, 数据为(92,2024-10-24,90)的子查询作为输入表, 以属性weight作为相等条件,给出类型是prescription的点,返回96个","g.withSideEffect('p', [['id':92, 'createTime':'2024-10-24', 'weight':90]]).V().hasLabel('prescription').as('a').where(eq('a')).by('weight').by(select('p').unfold().select('weight')).limit(96)"
 返回所有从标签为'film'的源节点到标签为'tag'的目标节点，标签为'has'的边的边。,g.V().hasLabel('film').outE('has').where(inV().hasLabel('tag'))
请找出与艺术学院和生物学院有关系的学生，并将他们全部返回。,"g.V().has('department', 'name', '艺术学院').as('a').out('has').as('b').select('a').V().has('department', 'name', '生物学院').as('c').out('has').as('d').select('a', 'b', 'c', 'd')"
"使用这个图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));查询和country美国有关的university,称为X,再查询和这个X有关联的其他university,以及和X有关联的university","g.V().has('country', 'name', '美国').as('a').bothE().otherV().hasLabel('university').as('b').bothE().as('e2').otherV().hasLabel('university').as('c').select('b').bothE().as('e3').otherV().hasLabel('university').as('d').select('a', 'b', 'c', 'd')"
"找出所有名为Geaflow的,价值大于等于459或语言不是rust的朋友,返回这些朋友的id,和边的目标点id,权重,f0","g.V().has('name', 'Geaflow').outE('friend').as('e').inV().as('b').where(or(__.has('value', gte(459)), __.has('lang', neq('rust')))).select('b', 'e').by('id').by(union(__.select('targetId'), __.select('weight'), __.select('f0')).fold())"
"找出名为郑轩的点的,name不是Comment_117或createTime是2008年05月30日的relation,返回这些relation的createTime,和边的srcId,targetId,f0","g.V().has('name', '郑轩').outE('relation').as('e').inV().as('b').where(or(__.not(has('name', 'Comment_117')), has('createTime', '2008-05-30'))).select('e', 'b').by(project('srcId', 'targetId', 'f0', 'createTime').by(__.select('e').values('srcId')).by(__.select('e').values('targetId')).by(__.select('e').values('f0')).by(__.select('b').values('createTime')))"
"找出所有和用户点有创造关系的合并请求节点,且边满足条件时间戳是2030年07月13日,目标合并请求节点满足条件创建时间为2025年12月08日","g.V().hasLabel('user').as('a').outE('creates').has('timeStamp', '2030-07-13').as('e').inV().hasLabel('pullRequest').has('createTime', '2025-12-08').as('b').select('b')"
找到所有标记为'person'且与名为杜轩和韩强的节点有关系的节点。,"g.V().has('name', '杜轩').out('relates').hasLabel('person').as('b').in('relates').has('name', '韩强').select('b')"
找出与标签为人的人有支付关系的161个人，以及他们喜欢的人。,g.V().hasLabel('person').as('a').outE('pay').as('e').inV().hasLabel('person').as('b').outE('likes').as('e2').inV().hasLabel('person').as('c').select('c').limit(161)
找出与person王国强和person王梅都有关联的人，并返回他们的身高、年龄和薪资。,"g.V().hasLabel('person').has('name', '王国强').as('a').outE().as('e').inV().hasLabel('person').as('b').inE().as('e2').outV().hasLabel('person').has('name', '王梅').as('c').select('b').values('height', 'age', 'salary')"
"帮我查询与阿里存在属于关系的城市,城市与国家存在属于关系的点,返回这些点的人数","g.V().has('name', '阿里').outE('belong').inV().hasLabel('city').outE('belong').inV().hasLabel('country').values('peopleNumber')"
"帮我查询person李宏申请的贷款,以及申请这些贷款的person","g.V().hasLabel('person').has('name', '李宏').as('a').outE('apply').as('e').inV().hasLabel('loan').as('b').inE('apply').as('e2').outV().hasLabel('person').as('c').select('b', 'c')"
"使用这个图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));返回全部源点标签为用户,边标签为user_creates_issue,并且满足条件源点id大于等于145且目标点id在50到174之间的边","g.E().hasLabel('user_creates_issue').where(and(__.outV().hasLabel('user'), __.outV().has('id', gte(145)), __.inV().has('id', between(50, 174)))).dedup()"
"返回143个大学南京大学和北京大学,共同的相关者","g.V().has('university', 'name', '南京大学').outE('relation').inV().as('b').inE('relation').outV().has('university', 'name', '北京大学').select('b').limit(143)"
"请帮我找出和account Faker有transfer关系的account,再请帮我找出以repay关系关联了Faker的loan","g.V().hasLabel('account').has('name', 'Faker').as('a').outE('transfer').inV().as('b').select('a').inE('repay').outV().hasLabel('loan').as('c').select('a', 'b', 'c')"
 找出陈思思教授的课程和文学院拥有的教师。,"g.V().hasLabel('teacher').has('name', '陈思思').as('a').outE('teach').inV().hasLabel('course').as('b').select('a').V().hasLabel('department').has('name', '文学院').as('c').outE('has').inV().hasLabel('teacher').as('d').select('a', 'b', 'c', 'd')"
"根据name,height分组,计算height乘height的值","g.V().group().by('name').by('height').unfold().select(values).project('name', 'height', 'result').by(select(keys).select('name')).by(select(keys).select('height')).by(select(values).math('_ * _'))"
"给出全部读者以性别,身高分组的性别, 根据性别从小到大排序","g.V().hasLabel('reader').group().by(values('gender', 'height').fold()).by(__.values('gender').fold()).order(local).by(keys, asc).select(values).unfold()"
"给出161个医生周思思和韩宏,共同的朋友","g.V().has('doctor', 'name', '周思思').outE('friend').inV().as('b').inE('friend').outV().has('doctor', 'name', '韩宏').select('b').limit(161)"
"查找源点name不是北京,name为武汉,或value是267,边标签为contain,且srcId大于93的边,返回这些边的srcId的个数乘srcId的个数","g.V().has('name', neq('北京')).has('name', '武汉').or().has('value', 267).outE('contain').has('srcId', gt(93)).project('count_srcId', 'srcId').by(count()).by(values('srcId')).select(values).unfold().sum()"
返回与滴滴合作的大学，以及与该大学合作的公司的人员数量。,"g.V().has('company', 'name', '滴滴').out('cooperate').hasLabel('university').out('cooperate').hasLabel('company').values('peopleNumber')"
 找出与蚂蚁集团有合作伙伴关系或具有合作伙伴关系的大学的所有学校。,"g.V().hasLabel('company').has('name', '蚂蚁集团').outE('partner').inV().hasLabel('university').dedup().values('name')"
"请帮我找出从teacher王建国出发,经过类型为teach的边,走1度到达的course点","g.V().has('teacher', 'name', '王建国').outE('teach').inV().hasLabel('course').limit(1)"
"用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查询全部标签等于编辑的点",g.V().hasLabel('publisher')
 谁是吴强的伴侣？,"g.V().hasLabel('person').has('name', '吴强').outE('relation').inV().outE('partner').inV().outE('relation').inV()"
 找出与标签为'person'的点有拥有关系的账号，找出这些账号的还款关系，找出这些还款关系的贷款，找出这些贷款的存款关系。,g.V().hasLabel('person').as('a').outE('own').as('e').inV().hasLabel('account').as('b').outE('repay').as('e2').inV().hasLabel('loan').as('c').outE('deposit').as('e3').inV().hasLabel('account').as('d').select('d')
"找出person黄国强relates的person,以及knows这些person的person","g.V().hasLabel('person').has('name', '黄国强').outE('relates').inV().hasLabel('person').as('b').inE('knows').outV().hasLabel('person').as('c').select('b', 'c')"
 找出13个与建国大业和功夫有关的评论节点。,"g.V().has('name', '建国大业').outE().as('e').inV().hasLabel('comment').as('b').inE().as('e2').outV().has('name', '功夫').select('b').limit(13)"
"使用列为scale,peopleNumber,name, 数据为('large',779,'字节'),('small',868,'Bilibili'),('small',574,'Bilibili')的子查询作为输入表, 以属性scale作为相等条件,请帮我找出person何强的全部标签等于partner的边,并根据targetId升序排列,返回169个","g.withSideEffect('p', [['large', 779, '字节'], ['small', 868, 'Bilibili'], ['small', 574, 'Bilibili']]).V().hasLabel('person').has('name', '何强').where(__.as('a').values('scale').is(within(__.select('p').unfold().limit(local, 1)))).outE('partner').order().by('targetId', asc).limit(169).inV()"
"找出源点标签为seller,边标签为ask的边,返回这些边的weight对102.93取余的数量,和weight乘155.60的值","g.V().hasLabel('seller').outE('ask').project('count_mod', 'weight_times').by(__.count()).by(__.values('weight').math('_ * 155.60')).select('count_mod', 'weight_times')"
查询person的3度的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(2).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"以(708,false,2020-02-11),(368,false,2024-07-10),(961,true,1997-04-23)作为请求表数据,属性分别为value,isBlock,lastLoginTime, 以属性lastLoginTime作为相等条件,计算所有账号的id的平均值减5的值","g.withSideEffect('p', [[708, false, '2020-02-11'], [368, false, '2024-07-10'], [961, true, '1997-04-23']]).V().hasLabel('account').as('a').where(__.select('a').values('lastLoginTime').is(within(__.select('p').unfold().tail(2)))).values('id').mean().math('_ - 5')"
"输入表的列为name,price,value, 数据为('Order_360',3979.07,556),('Order_399',2420.71,736),('Order_326',3193.74,426),('Order_186',1427.60,985), 源点的name等于输入表name,请帮我查找类别是书籍,id为空的节点","g.inject(['Order_360', 'Order_399', 'Order_326', 'Order_186']).as('names').V().has('name', within('names')).has('category', '书籍').hasNot('id').as('a').select('a')"
请帮我查找全部与书百年孤独有关系的作家的id,"g.V().has('book', 'name', '百年孤独').bothE().otherV().hasLabel('author').id()"
 查询与cinema UME存在releases关系，且与tag科幻存在has关系的film节点，返回这些film的ID、值、cinema UME的ID和tag科幻的名称。,"g.V().hasLabel('cinema').has('name', 'UME').as('a').outE('releases').inV().hasLabel('film').as('b').inE('has').outV().hasLabel('tag').has('name', '科幻').as('c').select('a', 'b', 'c').by('id').by('id').by('value').by('name')"
"以(152,22969,'上海')作为请求表数据,属性分别为value,area,name, 以属性area作为相等条件,给出id为124的university有关的university的friend, 再给出和university有关系的relation","g.withSideEffect('p', [['value':152, 'area':22969, 'name':'上海']]).V().hasLabel('university').has('area', __.select('p').unfold().select('area')).has('id', '124').as('a').bothE().otherV().hasLabel('university').as('b').bothE('friend').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"根据id,大小分组,计算id对80取余的最大值","g.V().hasLabel('a').group().by(union(identity(), values('size')).fold()).by(values('id').math('_ % 80').max())"
"查询所有Tugraph的点拥有的事项,然后查询Tugraph被喜欢的用户,一起返回","g.V().has('name', 'Tugraph').as('a').outE('has').inV().as('b').select('a').inE('likes').outV().as('c').select('a', 'b', 'c')"
返回107个与美团和字节都存在关系的person或company或software节点,"g.V().has('name', '美团').outE().inV().or(hasLabel('person'), hasLabel('company'), hasLabel('software')).as('b').inE().outV().has('name', '字节').select('b').limit(107)"
 请帮我查询与国家点相关的城市节点，并按名称分组返回。,g.V().hasLabel('country').bothE('contain').bothV().hasLabel('city').values('name').group().by(identity()).by(count())
返回满足条件名字为Comment_393且字数大于836的节点,"g.V().has('name', 'Comment_393').has('wordCount', gt(836))"
返回person的2跳以内的环,"g.V().hasLabel('person').as('a').both().both().where(eq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"查找类型是公司的点,并根据人数从小到大排列","g.V().hasLabel('company').order().by('peopleNumber', asc)"
"帮我查询193个名为PR-115的点属于的标签为仓库的节点,且其语言为java或权重小于等于820","g.V().has('name', 'PR-115').outE('belong').inV().hasLabel('repository').or(has('lang', 'java'), has('weight', lte(820))).limit(193)"
"给出issue belong的repository, 令repository的createTime的值等于likesrepository的user的name的最小值, 再查找repository has的user","g.V().hasLabel('issue').as('a').outE('belong').inV().hasLabel('repository').as('b').sideEffect(__.select('b').aggregate('b_node')).select('b').inE('likes').outV().hasLabel('user').values('name').min().as('min_name').select('b_node').unfold().sideEffect(__.property('createTime', __.select('min_name'))).select('b_node').unfold().outE('has').inV().hasLabel('user').as('d').select('b').values('createTime').as('b_createTime').select('b_createTime', 'd')"
"找出70个和标签等于医生的点有创造关系的处方,且和这些处方有包含关系的药品",g.V().hasLabel('doctor').outE('creates').inV().hasLabel('prescription').outE('contain').inV().hasLabel('medicine').limit(70)
查找合并请求的3度以内的环,"g.V().hasLabel('pullRequest').as('a').repeat(both().simplePath()).times(3).where(loops().is(3)).where(path().unfold().tail(1).is(eq('a'))).dedup().project('a.id', 'b_id').by(select('a').id()).by(tail(local, 1).id())"
"帮我查询107个帖子Post_235和Post_131,共同的朋友","g.V().hasLabel('post').has('name', 'Post_235').outE('friend').inV().where(__.inE('friend').outV().hasLabel('post').has('name', 'Post_131')).limit(107)"
请帮我找出陈雪创造的评论中，被其他用户喜欢的数量。,"g.V().has('person', 'name', '陈雪').outE('creates').inV().hasLabel('comment').inE('likes').outV().hasLabel('person').count()"
"查找department内科has的doctor,以及has这些doctor的department, 令department的name等于department的id加33,令department(c)的name等于department(a)的weight减weight, 返回department(a)的weight,doctor(b)的id,department(c)的id","g.V().hasLabel('department').has('name', '内科').as('a').outE('has').inV().hasLabel('doctor').as('b').inE('has').outV().hasLabel('department').as('c').select('a', 'b', 'c').by('weight').by('id').by('id')"
"找出所有名为韩雪的点的,身高小于82且身高加198小于9的恋人,返回这些恋人的薪资,和边的f1,源点id","g.V().has('name', '韩雪').outE('lover').as('e').inV().has('height', lt(82)).has('height', lt(-189)).project('b_salary', 'e_f1', 'e_srcId').by(values('salary')).by(select('e').values('f1')).by(select('e').values('srcId'))"
 查询与 person 节点关联的 person 节点，按 height、salary、name 分组，返回每个组的高度、薪资和名称。,"g.V().hasLabel('person').as('a').bothE('friend').otherV().hasLabel('person').as('b').select('b').group().by(project('height', 'salary', 'name').by(values('height')).by(values('salary')).by(values('name'))).unfold().project('b.height', 'b.salary', 'b.name').by(select(keys).select('height')).by(select(keys).select('salary')).by(select(keys).select('name'))"
请帮我找出所有名字按字母顺序排列且 id 大于等于 72 的标签，数量为 113。,"g.V().hasLabel('tag').has('id', gte(72)).order().by('name', asc).limit(113)"
找出所有名为呐喊的点认识的书,"g.V().has('name', '呐喊').out('knows').hasLabel('book')"
"请帮我查找标签等于contain,且weight小于等于165.10的边","g.E().hasLabel('contain').has('weight', lte(165.10))"
"查找和person何思思有colleague关系的person,再查找以colleague关系关联了何思思的person","g.V().hasLabel('person').has('name', '何思思').as('a').bothE('colleague').otherV().hasLabel('person').as('b').select('a').bothE('colleague').otherV().hasLabel('person').as('c').select('a', 'b', 'c')"
"使用这个图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));找出处方以名字,权重,创建时间分组的名字, 根据名字升序排序","g.V().hasLabel('prescription').group().by(values('name', 'weight', 'createTime')).by(values('name')).order(local).by(keys, asc)"
给出编辑的1跳以内的环,"g.V().hasLabel('publisher').as('a').bothE().bothV().where(eq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
请帮我查找和person孙思思有1跳或2跳关系的person,"g.V().has('person', 'name', '孙思思').bothE().otherV().hasLabel('person').simplePath().by(T.id).dedup().fold().union(__.identity(), __.unfold().bothE().otherV().hasLabel('person').simplePath().by(T.id).dedup()).unfold().dedup()"
返回与person徐月和韩宏都存在belong关系的点,"g.V().has('person', 'name', '徐月').outE('belong').inV().as('b').inE('belong').outV().has('person', 'name', '韩宏').select('b').dedup()"
"给出person吴思琪支付的person,以及认识这些person的person","g.V().has('person', 'name', '吴思琪').outE('pay').inV().hasLabel('person').as('b').inE('knows').outV().hasLabel('person').as('c').select('b', 'c')"
查询以watch关系关联了film绿巨人的person,"g.V().hasLabel('film').has('name', '绿巨人').inE('watch').outV().hasLabel('person')"
"使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出19个value不等于172或isBlock为false或id大于88的account,根据id升序排列","g.V().hasLabel('account').or(has('value', neq(172)), has('isBlock', false), has('id', gt(88))).order().by('id', asc).limit(19)"
"帮我查询label为tag的点,返回93个",g.V().hasLabel('tag').limit(93)
查找教师的3跳以内的环,g.V().hasLabel('teacher').as('a').repeat(both().simplePath()).times(3).where(cyclicPath()).path().by('id')
请帮我找出前177个标签为引用的边,g.E().hasLabel('refers').limit(177)
查询与名为中国科技大学的大学有直接或间接朋友关系的城市,"g.V().has('university', 'name', '中国科技大学').repeat(bothE('friend').otherV().simplePath()).times(2).emit().hasLabel('city').dedup()"
查询level大于4的节点,"g.V().has('level', gt(4))"
查询前13个类型为属于的边,g.E().hasLabel('belong').limit(13)
"请帮我查找论坛包含的用户,返回其源点的价值对549取余的平均值,以及目标点的身高除176的和","g.V().hasLabel('forum').as('a').outE('contain').as('e').inV().hasLabel('user').as('b').select('a', 'b').by(valueMap()).project('avg_value', 'sum_height').by(select('a').unfold().select('value').math('_ / 549').math('_ % 1').mean()).by(select('b').unfold().select('height').math('_ / 176').sum())"
"请帮我找出名为Post_384的帖子,以及与其有关的标签,并返回Post_384的语言和这些标签的价值","g.V().hasLabel('post').has('name', 'Post_384').bothE().otherV().hasLabel('tag').project('a.lang', 'b.value').by(select('a').values('lang')).by(values('value'))"
"使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询名为陈强的点creates的全部orders,并对这些点的name进行求和","g.V().has('buyer', 'name', '陈强').out('buyer_creates_orders').hasLabel('orders').values('name').sum()"
"帮我查询所有源点标签等于作家,目标点标签等于书,标签等于书或读者或作家的边","g.V().hasLabel('author').bothE('book', 'reader', 'author').where(otherV().hasLabel('book')).elementMap()"
"以670,305,597,656,772作为请求点id, 源点的id等于输入表id,给出全部名为UME的,类别等于悬疑或类别是动作的朋友,返回这些朋友的类别,和边的权重","g.inject([670, 305, 597, 656, 772]).unfold().as('p').V().has('id', __.as('p')).has('name', 'UME').outE('friend').as('e').inV().has('category', within('悬疑', '动作')).select('e', 'b').by('weight').by('category')"
"请帮我找出和book罪与罚有关的author,再请帮我找出和罪与罚refers的其他book,返回它们","g.V().hasLabel('book').has('name', '罪与罚').as('a').bothE().as('e').otherV().hasLabel('author').as('b').select('a').outE('refers').as('e2').inV().hasLabel('book').as('c').select('a', 'b', 'c')"
"查询和软件有关联的软件节点,并根据其id,语言分组,返回id,语言,以及stars的最大值减304的值","g.V().hasLabel('software').as('a').bothE('uses').otherV().hasLabel('software').as('b').select('b').group().by(union(values('id'), values('lang')).fold()).by(values('stars').max()).unfold().project('b.id', 'b.lang', 'MAX(b.stars) - 304').by(select(keys).limit(local, 1)).by(select(keys).tail(local, 1)).by(select(values).math('_ - 304'))"
"帮我查询和名为推特的论坛有朋友关系,或有朋友的朋友关系的用户","g.V().has('forum', 'name', '推特').out('friend').range(1, 2).hasLabel('user')"
 找出标签为post且名为Post_296的点，返回这些点的语言（lang)和创建时间（createTime)。,"g.V().hasLabel('post').has('name', 'Post_296').project('a.lang', 'a.createTime').by(values('lang')).by(values('createTime'))"
"帮我查询被person认识数量大于162的person,记为relationCount,再查询这些person认识的person","g.V().hasLabel('person').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('knows').hasLabel('person').id().max()).where(__.select('relationCount').is(gt(162))).select('a').out('knows').hasLabel('person').dedup()"
查询全部和账号Light之间有还款关系的贷款,"g.V().hasLabel('account').has('name', 'Light').outE('repay').inV().hasLabel('loan')"
请帮我查找所有和买家王建国之间有取消关系的订单,"g.V().hasLabel('buyer').has('name', '王建国').outE('cancel').inV().hasLabel('orders')"
"输入请求点id的列表876,531,887,678,772, 源点的id等于输入表id,给出编辑以性别,薪资分组的身高, 根据身高从小到大排序","g.inject([876, 531, 887, 678, 772]).as('p').V().hasLabel('publisher').as('a').where(eq('p')).by('id').by().select('a').group().by(values('gender', 'salary').fold()).by(values('height').fold()).order(local).by(values, asc)"
"查询被买家取消数量大于149的订单,记为relationCount,再查询这些订单取消的订单","g.V().hasLabel('orders').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('cancel').hasLabel('buyer').id().max()).select('a', 'relationCount').as('a_with_count').select('a_with_count').where(__.select('relationCount').is(gt(149))).select('a').out('cancel').hasLabel('orders')"
"找出和部门数学学院有关的课程,称为X,再找出和这个X有关联的其他课程,以及和X有关联的学生","g.V().has('department', 'name', '数学学院').as('a').bothE().otherV().hasLabel('course').as('b').bothE().otherV().hasLabel('course').where(neq('b')).as('c').select('b').bothE().otherV().hasLabel('student').as('d').select('a', 'b', 'c', 'd')"
 查询与英国有伙伴关系或互为伙伴关系的城市。,"g.V().has('country', 'name', '英国').outE('partner').inV().hasLabel('city').range(1, 2).values('name')"
"给出被company Bilibili cooperate的university,和Bilibili belong的city","g.V().hasLabel('company').has('name', 'Bilibili').as('b').outE('belong').inV().hasLabel('city').as('c').select('b').inE('cooperate').outV().hasLabel('university').as('a').select('a', 'b', 'c')"
给出前2个类型是拥有的边,g.E().hasLabel('has').limit(2)
"请帮我查找名为字节的company,以及与其有关的person,并返回字节的scale和这些person的height","g.V().has('company', 'name', '字节').as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a', 'b').by('scale').by('height')"
"帮我查询和学生徐若涵有关的学生,再帮我查询和徐若涵选择的其他课程,返回它们","g.V().has('student', 'name', '徐若涵').as('a').bothE().otherV().hasLabel('student').as('b').select('a').outE('selects').inV().hasLabel('course').as('c').select('a', 'b', 'c')"
"找出和贷款loan_41有关的person,称为X,再找出和这个X有关联的其他贷款,以及和X有关联的账号","g.V().has('loan', 'name', 'loan_41').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('loan').where(neq('a')).as('c').select('b').bothE().otherV().hasLabel('account').as('d').select('a', 'b', 'c', 'd')"
返回从国家到城市的包含边。,g.V().hasLabel('country').outE('contain').inV().hasLabel('city').select('e')
"帮我查询person认识的person, 令person(b)的名字的值等于认识person的person的名字的最大值, 再查找person认识的person","g.V().hasLabel('person').as('a').outE('knows').inV().hasLabel('person').as('b').select('b').project('b_name', 'd').by(coalesce(select('b').inE('knows').outV().hasLabel('person').values('name').max(), constant(''))).by(select('b').outE('knows').inV().hasLabel('person').fold())"
"输入表的列为name,value,price, 数据为('杯子',507,646.30), 以属性price作为相等条件,返回orders Order_462contain的goods,被其他buyer look的数量","g.withSideEffect('p', [['name':'杯子','value':507,'price':646.30]]).V().hasLabel('orders').has('name','Order_462').has('price',646.30).out('orders_contain_goods').hasLabel('goods').in('buyer_look_goods').hasLabel('buyer').count()"
返回与person相关的person节点，并按性别、年龄和姓名进行分组，然后返回性别、年龄和姓名。,"g.V().hasLabel('person').as('a').bothE('knows').otherV().hasLabel('person').as('b').select('b').values('gender', 'age', 'name').group().by().by(count())"
"用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找类型为作家的点",g.V().hasLabel('author')
查询前20个标签为属于的边,g.E().hasLabel('belong').limit(20)
 找出与person节点有关联的person节点，并按年龄分组返回。,g.V().hasLabel('person').as('a').bothE('pay').otherV().hasLabel('person').as('b').select('b').values('age').group().by(identity()).by(count())
"请帮我找出与周若涵存在同事关系的person,person与person存在家人关系的点,返回这些点的id","g.V().has('name', '周若涵').outE('colleague').inV().hasLabel('person').outE('family').inV().hasLabel('person').values('id')"
"请帮我查找与名为吴红和郑建国的点共同teach的,label为course的节点","g.V().has('name', '吴红').outE('teach').inV().hasLabel('course').as('b').inE('teach').outV().has('name', '郑建国').select('b')"
查找前73个类型为喜欢的边,g.E().hasLabel('likes').limit(73)
"帮我查询和仓库XXRepo有关的仓库,称为X,再帮我查询和这个X有关联的其他事项,以及和X有关联的用户","g.V().has('repository', 'name', 'XXRepo').as('a').bothE().otherV().hasLabel('repository').as('b').bothE().otherV().hasLabel('issue').as('c').select('b').bothE().otherV().hasLabel('user').as('d').select('a', 'b', 'c', 'd')"
查询卖家为杜建聪的所有点的性别、薪水和年龄。,"g.V().hasLabel('seller').has('name', '杜建聪').project('gender', 'salary', 'age').by(values('gender')).by(values('salary')).by(values('age'))"
 找一本叫做《Java程序设计》的书。,"g.V().hasLabel('book').has('name', 'java程序设计')"
查询前79个label为发布的边,g.E().hasLabel('publish').limit(79)
"给出标签为书,名为孤城的点,返回这些点的id,名字,创建时间","g.V().hasLabel('book').has('name', '孤城').project('id', 'name', 'createTime').by('id').by('name').by('createTime')"
找到从用户王轩出发，通过发布标签的边，走了3步到达的帖子节点。,"g.V().has('user', 'name', '王轩').repeat(out('publish')).times(3).hasLabel('post')"
"使用列为height,name,salary, 数据为(155,'杜思思',4097)的子查询作为输入表, 以属性salary作为相等条件,帮我查询person relates的person,返回其源点的height对152取余的最大值,以及目标点的id加16的值","g.withSideEffect('p', [['height': 155, 'name': '杜思思', 'salary': 4097]]).V().hasLabel('person').has('salary', select('p').unfold().values('salary')).as('a').outE('relates').as('e').inV().hasLabel('person').as('b').select('a', 'b').by(values('height').fold().math('_ / 152').math('_ % 1').math('_ * 152').fold()).by(values('id').math('_ + 16').fold()).select(values).unfold().group().by(keys).by(select(values).unfold().max()).select(values)"
给出被城市巴黎包含的公司,"g.V().hasLabel('city').has('name', '巴黎').outE('contain').inV().hasLabel('company').as('b').select('b').by().as('a').select('a', 'b')"
"返回名为周若涵和马宏的,label为person的点公共的friend节点的名单","g.V().has('person', 'name', '周若涵').out('friend').as('b').in('friend').has('person', 'name', '马宏').select('b').values('name')"
"查询pullRequest的三角的环,边标签等于belong, 并返回这些点的id","g.V().hasLabel('pullRequest').as('a').outE('belong').inV().as('b').outE('belong').inV().as('c').where(__.out('belong').as('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
"以(61,'古代',540),(19,'古代',844)作为请求表数据,属性分别为id,name,value, 以属性id作为相等条件,查询189个与Post_297和Post_257都存在关系的标签节点","g.inject([['id':61,'name':'古代','value':540],['id':19,'name':'古代','value':844]]).as('p').unfold().as('p_row').V().has('id',select('p_row').select('id')).has('name','Post_297').as('a').outE().as('e').inV().hasLabel('tag').as('b').inE().as('e2').outV().has('name','Post_257').as('c').select('b').limit(189)"
找出不属于皮肤科的部门中，医生的名字和他们所在的部门名。,"g.V().hasLabel('department').has('name', neq('皮肤科')).out('has').hasLabel('doctor').as('b').out('belong').hasLabel('department').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"返回所有名为Post_150的点的,价值小于等于10的相关者,返回这些相关者的名字,和边的权重,f1","g.V().has('name', 'Post_150').outE('relation').as('e').inV().has('value', lte(10)).as('b').select('b', 'e').by('name').by(values('weight', 'f1'))"
"输入请求点id的列表114,990, 源点的id等于输入表id,返回所有id为59的author关联的book,和以relates关系关联了这些book的其他book","g.inject([114, 990]).as('p').unfold().as('id').V().hasLabel('author').has('id', '59').as('a').where(eq('id')).by('id').by(identity()).bothE().otherV().hasLabel('book').as('b').inE('relates').otherV().hasLabel('book').as('c').select('b', 'c')"
"查找被卖家郑伟拥有的商品,和郑伟拥有的商品","g.V().hasLabel('seller').has('name', '郑伟').as('b').outE('has').inV().hasLabel('goods').as('a').select('b').outE('has').inV().hasLabel('goods').as('c').select('a', 'b', 'c')"
查找前36个薪资不为空或性别等于famale或身高大于等于153的person,"g.V().hasLabel('person').or(has('salary', neq(null)), has('gender', 'famale'), has('height', gte(153))).limit(36)"
请帮我查询Order_282中包含的商品，这些商品在其他卖家那里有多少库存。,"g.V().has('orders', 'name', 'Order_282').out('contain').in('has').hasLabel('seller').count()"
"输入请求点id的列表476,508,332,512, 源点的id等于输入表id,请帮我找出标签为company的点,返回182个","g.withSideEffect('ids', [476, 508, 332, 512]).V().hasLabel('company').has('id', within('ids')).limit(182)"
请帮我查找全部和person王建国之间有commits关系的software,"g.V().hasLabel('person').has('name', '王建国').outE('commits').inV().hasLabel('software')"
"找出被用户张建聪喜欢的帖子,和张建聪发布的帖子","g.V().hasLabel('user').has('name', '张建聪').as('b').outE('publish').inV().hasLabel('post').as('c').select('b').outE('likes').inV().hasLabel('post').as('a').select('a', 'b', 'c')"
"根据gender,height,age分组,计算salary的求和值减1760的值","g.V().hasLabel('a').group().by(values('gender', 'height', 'age').fold()).by(values('salary').sum()).unfold().project('gender', 'height', 'age', 'result').by(select(keys).select('gender')).by(select(keys).select('height')).by(select(keys).select('age')).by(select(values).math('_ - 1760'))"
请帮我找出所有与city上海有关系的country的peopleNumber,"g.V().has('city', 'name', '上海').bothE().otherV().hasLabel('country').values('peopleNumber')"
返回前34个创建时间不等于2017年10月07日或创建时间不等于2010年05月22日或语言小于等于23的帖子,"g.V().hasLabel('post').or(has('createTime', neq('2017-10-07')), has('createTime', neq('2010-05-22')), has('lang', lte(23))).limit(34)"
"返回全部与person有关系的person节点,且person节点的年龄为空,并返回这些person的id乘61的值,以及person的id减68的最小值","g.V().hasLabel('person').as('a').outE().inV().hasLabel('person').has('age', eq(null)).as('b').select('b').by(values('id').math('_ * 61')).aggregate('b_ids').by(values('id').math('_ - 68')).cap('b_ids').unfold().min()"
 找出赵科和王宏喜欢关系的共同点。,"g.V().has('person', 'name', '赵科').outE('likes').inV().as('b').inE('likes').outV().has('person', 'name', '王宏').select('b')"
"查询名为王若涵和吴伟的,类型是病人的点公共的朋友节点的名单","g.V().has('patient', 'name', '王若涵').out('friend').as('b').in('friend').has('patient', 'name', '吴伟').select('b').values('name')"
"请帮我查找名为孙伟的编辑,以及与其有关的书,并返回孙伟的性别和这些书的创建时间","g.V().hasLabel('publisher').has('name', '孙伟').as('a').bothE().otherV().hasLabel('book').as('b').select('a', 'b').by(values('gender')).by(values('createTime'))"
"请帮我找出person吴国强watch的film,以及releases这些film的cinema, 令film的size等于cinema的id,令cinema的category等于film的id加64, 返回person的gender,film的category,cinema的id","g.V().has('person', 'name', '吴国强').as('a').outE('watch').inV().hasLabel('film').as('b').inE('releases').outV().hasLabel('cinema').as('c').project('a_gender', 'b_category', 'c_id').by(select('a').values('gender')).by(select('b').values('id').math('_ + 64')).by(select('c').values('id'))"
"查询书的引用,或其引用的引用",g.V().hasLabel('book').outE('refers').inV().outE('refers').inV().dedup()
"以284,274作为请求点id, 以属性id作为相等条件,查找account XXD transfer的account,返回account repay的loan的weight除18的值 ","g.withSideEffect('p', [284, 274]).V().hasLabel('account').where(and(__.values('id').is(within('p')), __.has('name', 'XXD'))).outE('account_transfer_account').inV().hasLabel('account').outE('account_repay_loan').inV().hasLabel('loan').values('weight').math('_ / 18')"
" 按照升序排序，给定每个company的id、名称和价值，以id,name,value分组。","g.V().hasLabel('company').group().by(project('id', 'name', 'value').by('id').by('name').by('value')).by(values('scale').fold()).order(local).by(values, asc)"
"使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));返回prescription Prescription_185contain的medicine,被其他prescription contain的数量","g.V().has('prescription', 'name', 'Prescription_185').out('prescription_contain_medicine').in('prescription_contain_medicine').where(neq('Prescription_185')).dedup().count()"
"请帮我查找编辑张建国发布的书,以及撰写这些书的作家","g.V().hasLabel('publisher').has('name', '张建国').outE('publish').inV().hasLabel('book').as('b').inE('write').outV().hasLabel('author').as('c').select('b', 'c')"
"返回全部名为张国强的点的,字数小于等于618或类别等于科普的相关者,返回这些相关者的id,和边的f0,时间戳","g.V().has('name', '张国强').outE('relation').as('e').inV().as('b').where(or(__.has('wordCount', lte(618)), __.has('category', '科普'))).select('b', 'e').by('id').by(project('f0', 'timeStamp').by('f0').by('timeStamp'))"
"帮我查询与名为徐宏和李伟的点共同创造的,label为合并请求的节点","g.V().has('name', '徐宏').outE('creates').inV().hasLabel('pullRequest').as('b').inE('creates').outV().has('name', '李伟').select('b')"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));找出公司合作的大学,返回其源点的人数除702的值,以及目标点的价值除871的个数","g.V().hasLabel('company').as('a').outE('company_cooperate_university').as('e').inV().hasLabel('university').as('b').project('peopleNumber_div_702', 'count_value_div_871').by(select('a').values('peopleNumber').math('_ / 702')).by(select('b').values('value').math('_ / 871').count())"
"以(181,'male',90),(168,'famale',61)作为请求表数据,属性分别为height,gender,id, 源点的id等于输入表id,查询174个person黄强和赵月,共同的恋人","g.withSideEffect('p', [['height':181, 'gender':'male', 'id':90], ['height':168, 'gender':'famale', 'id':61]]).V().hasLabel('person').where(__.as('a').has('id', __.select('p').unfold().select('id')).has('name', '黄强').outE('person_lover_person').as('e').inV().as('b').inE('person_lover_person').as('e2').outV().as('c').hasLabel('person').has('name', '赵月')).select('b').limit(174)"
"给出person黄月拥有的账号,被其他账号转账的数量","g.V().has('person', 'name', '黄月').outE('own').inV().hasLabel('account').inE('transfer').outV().hasLabel('account').count()"
"用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询和person郑建聪有person_invest_company关系的公司,以及和公司Bilibili有company_apply_loan关系的贷款,将它们都返回","g.V().has('person', 'name', '郑建聪').as('a').outE('person_invest_company').inV().as('b').select('a').V().has('company', 'name', 'Bilibili').as('c').outE('company_apply_loan').inV().as('d').select('a', 'b', 'c', 'd')"
"给出全部源点星数对77取余大于等于62,目标点id在9到31之间且名字等于PR-264且id小于50,且标签等于拥有的边","g.V().has('stars', P.gte(62).and(P.inside(62, 77))).outE('has').as('e').inV().has('id', P.between(9, 31)).has('name', 'PR-264').has('id', P.lt(50)).select('e')"
找出孙宏和黄思琪共同的恋人节点列表。,"g.V().has('person', 'name', '孙宏').out('lover').as('b').in('lover').has('person', 'name', '黄思琪').select('b').values('name')"
"给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));返回所有源点满足条件address不是A座,目标点满足条件gender不等于male且height是162,height小于等于155,且label为department_has_doctor的边","g.E().hasLabel('department_has_doctor').where(outV().has('address', neq('A座'))).where(inV().has('gender', neq('male')).has('height', 162).has('height', lte(155)))"
"找出与名为悲惨世界和呐喊的点共同relates的,标签为book的节点","g.V().has('name', '悲惨世界').out('relates').hasLabel('book').as('b').in('relates').has('name', '呐喊').select('b')"
"输入表的列为id,name,value, 数据为(15,'历史',285),(16,'科幻',703), 以属性name作为相等条件,查找被电影绿巨人拥有的标签","g.withSideEffect('p', [['id':15, 'name':'历史', 'value':285], ['id':16, 'name':'科幻', 'value':703]]).V().hasLabel('tag').as('a').where(__.in('film_has_tag').hasLabel('film').has('name', '绿巨人')).where(__.select('a').values('name').is(within(__.select('p').unfold().values('name')))).select('a').project('a', 'b').by(__.identity()).by(__.in('film_has_tag').hasLabel('film').has('name', '绿巨人'))"
"请帮我查找所有名为李红的点的,名字不等于Comment_452的伙伴,返回这些伙伴的id,和边的f1,权重","g.V().has('name', '李红').outE('partner').as('e').inV().has('name', neq('Comment_452')).as('b').select('b', 'e').by('id').by(values('f1', 'weight').fold())"
找出与李思琪和何强都有投资关系的人。,"g.V().has('person', 'name', '李思琪').out('invest').as('b').in('invest').has('person', 'name', '何强').select('b')"
 找出label为goods且名称为矿泉水的点，并返回这些点的sellerNumber和name。,"g.V().hasLabel('goods').has('name', '矿泉水').project('sellerNumber', 'name').by('sellerNumber').by('name')"
 请帮我查找与ID为108的人有关的人，包括其恋人，以及与其有血缘关系的父母。,"g.V().has('person', 'id', '108').as('a').bothE().otherV().hasLabel('person').as('b').outE('lover').inV().as('c').select('b').outE('parent').inV().as('d').select('a', 'b', 'c', 'd')"
"请帮我找出与person周思琪存在creates关系,且与film少年足球存在belong关系的comment节点，返回这些comment的wordCount,id,createTime,及person周思琪的age,及film少年足球的value","g.V().has('person', 'name', '周思琪').as('a').outE('creates').inV().hasLabel('comment').as('b').inE('belong').outV().has('film', 'name', '少年足球').as('c').select('a', 'b', 'c').by('age').by(values('wordCount', 'id', 'createTime')).by('value')"
"请帮我查找person喜欢的person, 令person(b)的薪资的值等于喜欢person的person的id的数量, 再查找person认识的person","g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('person').as('b').sideEffect(__.sack(assign).by(__.in('likes').hasLabel('person').dedup().count()).sack()).as('b_salary').outE('knows').as('e3').inV().hasLabel('person').as('d').select('b_salary', 'd').by(__.sack()).by()"
"请帮我查找person黄梅belong的company, 令person的id等于company的peopleNumber减869, 返回person的name, company的name","g.V().hasLabel('person').has('name', '黄梅').as('a').outE('belong').as('e').inV().hasLabel('company').as('b').select('a', 'b').by('name').by('name').project('a_name', 'b_name').by(select('a')).by(select('b'))"
找到一个与赵轩和王雪都有联系的人。,"g.V().has('name', '赵轩').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '王雪').select('b').limit(1)"
"找出源点weight小于522或createTime是2032年08月17日,且lang不等于c,边类型是has,且满足条件srcId大于等于186的边,返回这些边的targetId的最小值减35减109减127.01乘142除f0的值","g.V().has('weight', lt(522)).or().has('createTime', '2032-08-17').has('lang', neq('c')).outE('has').has('srcId', gte(186)).project('result').by(values('targetId').min().math('_ - 35 - 109 - 127.01').math('_ * 142').math('_ / f0')).select('result')"
"帮我查询92个名为Post_447的点拥有的label为标签的节点,且其价值小于等于746,id在11到85之间","g.V().has('name', 'Post_447').out('has').hasLabel('tag').has('value', lte(746)).has('id', between(11, 85)).limit(92)"
"根据名字分组,计算价值加251的最小值",g.V().hasLabel('a').group().by('name').by(values('value').math('_ + 251').min())
帮我查询与company微软有belong关系的2跳的环,"g.V().has('company', 'name', '微软').as('a').bothE('belong').bothV().where(neq('a')).as('b').bothE('belong').bothV().where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
 何雪和何思琪共同的朋友,"g.V().has('person', 'name', '何雪').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '何思琪').select('b').limit(1)"
帮我查询全部与大学华中科技大学有关系的教师的名字,"g.V().has('university', 'name', '华中科技大学').bothE().otherV().hasLabel('teacher').values('name')"
"请帮我找出id小于785的department has的doctor的名称,以及这些doctor creates的prescription的名称","g.V().hasLabel('department').has('id', lt(785)).out('has').hasLabel('doctor').as('b').out('creates').hasLabel('prescription').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
返回175个与俄罗斯和越南都存在关系的公司或国家节点,"g.V().has('name', '俄罗斯').outE().inV().where(and(__.inE().outV().has('name', '越南'), or(hasLabel('company'), hasLabel('country')))).limit(175)"
"以(175,646,'美团'),(518,542,'腾讯'),(747,502,'蚂蚁集团')作为请求表数据,属性分别为value,peopleNumber,name, 以属性peopleNumber作为相等条件,查询57个贷款defaultName和defaultName1,共同的朋友","g.withSideEffect('p', [[175, 646, '美团'], [518, 542, '腾讯'], [747, 502, '蚂蚁集团']]).V().hasLabel('loan').as('a').where(and(__.select('a').values('peopleNumber').as('pn'), __.select('a').values('name').is('defaultName'), __.select('p').unfold().as('row').select('row').tail(2).is(__.select('pn')))).outE('friend').as('e').inV().as('b').inE('friend').as('e2').outV().as('c').hasLabel('loan').has('name', 'defaultName1').select('b').limit(57)"
"请帮我找出名为Bilibili的software,以及与其有关的software,并返回Bilibili的id和这些software的lang","g.V().hasLabel('software').has('name', 'Bilibili').as('a').bothE().as('e').otherV().hasLabel('software').as('b').select('a', 'b').by('id').by('lang')"
 找出Comment_117和Comment_482这两个标签为评论节点且它们的朋友节点共有的节点。,"g.V().has('comment', 'name', 'Comment_117').out('friend').as('b').in('friend').has('comment', 'name', 'Comment_482').select('b').values('name')"
请帮我查找person的3跳以内的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(2).where(loops().is(gt(0))).as('b').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"请帮我找出id为27的买家有关的卖家的伙伴, 再请帮我找出和卖家有关系的伙伴","g.V().has('buyer', 'id', 27).as('a').bothE().as('e').otherV().hasLabel('seller').as('b').bothE('partner').as('e2').otherV().as('c').select('b').bothE('partner').as('e3').otherV().as('d').select('a', 'b', 'c', 'd')"
返回与大学华中科技大学和四川大学都存在拥有关系的点,"g.V().has('university', 'name', '华中科技大学').out('has').as('b').in('has').has('university', 'name', '四川大学').select('b')"
"找出全部源点满足条件创建时间为2005年02月23日,名字不等于知乎,或名字是天涯论坛,目标点满足条件字数不等于510或语言为Japanese或字数在338到724之间,且类型为包含的边","g.V().or(and(has('createTime', '2005-02-23'), has('name', neq('知乎'))), has('name', '天涯论坛')).outE('contain').where(inV().or(has('wordCount', neq(510)), has('lang', 'Japanese'), has('wordCount', between(338, 724)))).dedup()"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找id为174的点的salary,gender","g.V().has('person', 'id', 174).project('salary', 'gender').by('salary').by('gender')"
"帮我查询作家撰写的书, 令书的id的值等于撰写书的作家的薪资的平均值, 再查找书关联的书","g.V().hasLabel('author').as('a').outE('write').inV().hasLabel('book').as('b').project('b_id', 'd').by(select('b').in('write').values('salary').mean()).by(select('b').out('relates').hasLabel('book').as('d').select('d'))"
"查找从forum中国军事论坛出发,经过类型是contain的边,走3跳到达的post点","g.V().has('forum', 'name', '中国军事论坛').repeat(out('contain')).times(3).hasLabel('post')"
获取所有与徐国强有likes关系的post，以及这些post关联的tag，返回这些tag的名称。,"g.V().has('name', '徐国强').out('likes').hasLabel('post').out('has').hasLabel('tag').values('name')"
 哪个账户被XXD转账了,"g.V().hasLabel('account').has('name', 'XXD').as('b').outE('transfer').as('e').inV().as('a').select('a', 'b')"
"根据类别分组,计算字数对字数取余的值",g.V().hasLabel('a').group().by('category').by(values('wordCount').as('wc').select('wc').math('_ % _'))
"返回id为199的卖家回答的买家, 并将买家有关的商品的价值的数量赋值给买家的身高, 接着查询买家的身高小于199的买家咨询的卖家","g.V().has('seller', 'id', 199).out('ask').hasLabel('buyer').as('b').sideEffect(select('b').outE().inV().hasLabel('goods').values('value').count().as('height')).where(select('b').values('height').is(lt(199))).out('consult').hasLabel('seller').as('d').select('b', 'd').by('height').by()"
 找出与名为孙红的人有相关者关系或相关者相关者关系的公司。,"g.V().hasLabel('person').has('name', '孙红').outE('relation').inV().hasLabel('company').simplePath().by(T.id).dedup().fold().as('a').V().hasLabel('person').has('name', '孙红').outE('relation').inV().outE('relation').inV().hasLabel('company').simplePath().by(T.id).dedup().fold().as('b').select('a', 'b').unfold().unfold().dedup()"
" 返回一个点（Post_471),标签为'帖子'，并返回该点的语言、ID和字数。","g.V().hasLabel('post').has('name', 'Post_471').project('a.lang', 'a.id', 'a.wordCount').by('lang').by('id').by('wordCount')"
返回前103个标签等于拥有的边,g.E().hasLabel('has').limit(103)
"请帮我找出person的三角的环,边类型是同事, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('colleague').inV().as('b').outE('colleague').inV().as('c').where(__.inE('colleague').outV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
"查找person以身高分组的年龄, 根据年龄从大到小排序","g.V().hasLabel('person').group().by('height').by(values('age').fold()).order(local).by(values, desc)"
"使用列为salary,height,gender, 数据为(9902,188,'famale')的子查询作为输入表, 源点的height等于输入表height,查找全部id为195的person关联的person,和以认识关系关联了这些person的其他person","g.withSideEffect('p', [['salary':9902, 'height':188, 'gender':'famale']]).V().hasLabel('person').has('height', __.select('p').unfold().select('height')).has('id', '195').bothE().otherV().hasLabel('person').as('b').inE('person_knows_person').otherV().hasLabel('person').as('c').select('b', 'c')"
"找出所有person的朋友,或其朋友的朋友",g.V().hasLabel('person').repeat(out('friend')).times(2).dedup()
请找出user陈国强和赵建聪共同创建的点,"g.V().has('user', 'name', '陈国强').outE('creates').inV().as('b').inE('creates').outV().has('user', 'name', '赵建聪').select('b')"
"请帮我找出喜欢person韩梅的person,和这些person支付的person","g.V().has('person', 'name', '韩梅').as('a').in('likes').as('b').out('pay').as('c').select('b', 'c')"
找到所有与名为李雪的医生有关联，或者与该医生关联的人所在的部门。,"g.V().has('doctor', 'name', '李雪').bothE('relation').otherV().hasLabel('department').dedup()"
请提供非陈强编辑出版的书籍及其关联书籍的名称。,"g.V().hasLabel('publisher').has('name', neq('陈强')).outE('publish').inV().hasLabel('book').as('b').outE('relates').inV().hasLabel('book').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 请帮我按照大学名称、价值、ID分组并按ID降序排序。,"g.V().hasLabel('university').group().by(values('value', 'name', 'id').fold()).by(values('id').fold()).order(local).by(keys, desc).select(values).unfold()"
请帮我找出所有与person有关联的person，以及这些person通过relates关系关联的其他person。,"g.V().has('person', 'id', '34').bothE().otherV().hasLabel('person').as('b').inE('relates').otherV().hasLabel('person').as('c').select('b', 'c')"
价值减价值的值,g.V().hasLabel('a').project('result').by(values('value').fold().math('_ - _'))
查询和person韩强之间有购买关系的软件,"g.V().hasLabel('person').has('name', '韩强').outE('buy').inV().hasLabel('software')"
"找出与买家赵建聪存在创造关系,且与商品键盘存在包含关系的订单节点，返回这些订单的价格,及买家赵建聪的性别,及商品键盘的价值","g.V().hasLabel('buyer').has('name', '赵建聪').as('a').outE('creates').inV().hasLabel('orders').as('b').inE('contain').outV().hasLabel('goods').has('name', '键盘').as('c').select('a', 'b', 'c').by('gender').by('price').by('value')"
查询以撰写关系关联了书白夜行的作家,"g.V().hasLabel('book').has('name', '白夜行').inE('write').outV().dedup()"
"返回所有person的朋友,或其朋友的朋友",g.V().hasLabel('person').outE('friend').inV().simplePath().by('id').repeat(outE('friend').inV().simplePath().by('id')).times(2).emit().dedup().values('name')
请帮我查找所有和作家Jack之间有认识关系的作家,"g.V().has('author', 'name', 'Jack').out('knows').hasLabel('author')"
"查询contain company蚂蚁集团belong的city,的country","g.V().has('company', 'name', '蚂蚁集团').out('belong').as('b').in('contain').as('c').select('b', 'c')"
找出49个与数据结构和高等数学都存在关系的学生或教师节点,"g.V().has('name', '数据结构').outE().inV().or(hasLabel('student'), hasLabel('teacher')).as('b').inE().outV().has('name', '高等数学').select('b').limit(49)"
返回前21个id不是66的贷款,"g.V().hasLabel('loan').has('id', neq(66)).limit(21)"
查询所有账户的朋友，或者他们朋友的朋友,"g.V().hasLabel('account').as('a').outE('friend').inV().hasLabel('account').range(1,2).as('b').select('b')"
返回与电影院大众影院有上映关系的1跳以内的环,"g.V().has('cinema', 'name', '大众影院').as('a').bothE('releases').bothV().where(neq('a')).simplePath().by(T.id).path().by(T.id).limit(1).project('a.id', 'b_id').by(limit(1).id()).by(tail(1).id())"
"请帮我查找源点gender等于male,目标点name为Tom,且标签为knows的边","g.V().has('gender', 'male').outE('knows').as('e').inV().has('name', 'Tom').select('e')"
"帮我查询账号的三角的环,边标签等于转账, 并返回这些点的id","g.V().hasLabel('account').as('a').outE('transfer').as('e').inV().as('b').outE('transfer').as('e2').inV().as('c').where(__.inE('transfer').where(__.outV().as('a'))).select('a', 'b', 'c').by('id').by('id').by('id')"
请帮我查找名为徐若涵的点likes的post,"g.V().has('name', '徐若涵').outE('likes').inV().hasLabel('post')"
查找前7个name不等于孙思琪或id大于2的person,"g.V().hasLabel('person').or(has('name', neq('孙思琪')), has('id', gt(2))).limit(7)"
帮我找出与帖子 Post_351 和 Post_187 都有关系的点,"g.V().hasLabel('post').has('name', 'Post_351').outE('has').inV().as('b').inE('has').outV().hasLabel('post').has('name', 'Post_187').select('b')"
"返回和名为杜梅的person有parent关系,或有parent的parent关系的person","g.V().has('person', 'name', '杜梅').repeat(out('parent')).times(2).emit().hasLabel('person').dedup()"
" 返回与何建国存在购买关系的所有软件的ID,这些软件之间存在使用关系。","g.V().has('name', '何建国').out('buy').hasLabel('software').out('uses').hasLabel('software').values('id')"
 返回吴国强发布的所有帖子和其他相关信息。,"g.V().hasLabel('user').has('name', '吴国强').as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a').outE('publish').as('e2').inV().hasLabel('post').as('c').select('a', 'b', 'c')"
 Prescription_435包含药物。,"g.V().hasLabel('prescription').has('name', 'Prescription_435').outE('contain').inV().hasLabel('medicine').as('b').select('b').by().as('a').select('a', 'b')"
"请帮我找出软件以id,是否开源,价值分组的语言, 根据语言从小到大排序","g.V().hasLabel('software').group().by(values('id', 'openSource', 'value').fold()).by(values('lang').fold()).order(local).by(keys, asc)"
"查找用户马宏发布的帖子, 令用户的语言等于帖子的value的最大值加价值对64取余,令用户的id等于用户的名字,令帖子的性别等于用户的id, 返回用户的身高, 帖子的id","g.V().has('user', 'name', '马宏').as('a').outE('publish').inV().hasLabel('post').as('b').select('a', 'b').by(project('height', 'id').by(values('height')).by(values('name'))).by(project('id', 'gender').by(values('id')).by(select('a').values('name'))).select(values).unfold().select('height', 'id').by(select('a').select('height')).by(select('b').select('id'))"
"输入请求点id的列表34,390,312,162, 以属性id作为相等条件,返回全部与person陈月有关系的person的身高","g.inject([34, 390, 312, 162]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('name', '陈月').bothE().otherV().hasLabel('person').values('height')"
"找出名为Tugraph的repository,以及与其有关的pullRequest,并返回Tugraph的stars和这些pullRequest的name","g.V().hasLabel('repository').has('name', 'Tugraph').as('a').bothE().otherV().hasLabel('pullRequest').as('b').select('a', 'b').by('stars').by('name')"
"给定图的schema如下:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出公司的3度以内的环","g.V().hasLabel('company').as('a').repeat(both().simplePath()).times(2).emit().where(loops().is(gt(0))).where(eq('a')).dedup().project('a.id', 'b_id').by(select('a').id()).by(id())"
请帮我查找与医生赵国强有属于关系的1跳的环,"g.V().has('doctor', 'name', '赵国强').as('a').bothE('belong').otherV().where(eq('a')).select('a').project('a.id', 'b_id').by(values('id')).by(select('a').values('id'))"
"给出71个和标签等于repository的点有has关系的user,并且和这些user有creates关系的issue",g.V().hasLabel('repository').as('a').out('has').hasLabel('user').as('b').out('creates').hasLabel('issue').as('c').select('c').limit(71)
"查找读者赵建国喜欢的书, 令书的字数等于书的创建时间, 返回读者的薪资, 书的类别","g.V().hasLabel('reader').has('name', '赵建国').as('a').outE('likes').inV().hasLabel('book').as('b').project('a_salary', 'b_category').by(select('a').values('salary')).by(select('b').values('category'))"
 查询department为呼吸科且doctor为杜红的medicine节点，返回它们的price和name。,"g.V().has('department', 'name', '呼吸科').outE().inV().hasLabel('medicine').as('b').inE().outV().has('doctor', 'name', '杜红').select('b').values('price', 'name')"
查找所有与部门土木学院有关系的教师的身高,"g.V().has('department', 'name', '土木学院').bothE().otherV().hasLabel('teacher').values('height')"
查询所有label为person的点，并按照年龄升序排序。,"g.V().hasLabel('person').order().by('age', asc)"
"找出和订单Order_457有关的买家,称为X,再找出和这个X有关联的其他卖家,以及和X有关联的商品","g.V().has('orders', 'name', 'Order_457').as('a').bothE().otherV().hasLabel('buyer').as('b').bothE().otherV().hasLabel('seller').as('c').select('b').bothE().otherV().hasLabel('goods').as('d').select('a', 'b', 'c', 'd')"
"请帮我查找和类型为user的点有creates关系的pullRequest,且和这些pullRequest有belong关系的repository,且和这些repository有has关系的user",g.V().hasLabel('user').as('a').out('creates').hasLabel('pullRequest').as('b').out('belong').hasLabel('repository').as('c').out('has').hasLabel('user').as('d').select('d')
"输入请求点id的列表692,605, 源点的id等于输入表id,查找买家的三角的环,边label为buyer_consult_seller, 并返回这些点的id","g.inject([692, 605]).as('p').unfold().as('id').V().hasLabel('buyer').has('id', __.select('id')).as('a').outE('buyer_consult_seller').inV().as('b').outE('buyer_consult_seller').inV().as('c').where(__.outE('buyer_consult_seller').where(__.inV().as('a'))).select('a', 'b', 'c').by('id').by('id').by('id')"
帮我查询与company蚂蚁集团和滴滴都存在belong关系的点,"g.V().has('company', 'name', '蚂蚁集团').out('belong').as('b').in('belong').has('company', 'name', '滴滴').select('b')"
"返回person张科关联的person,被其他person关联的数量","g.V().has('person', 'name', '张科').outE('relates').inV().hasLabel('person').inE('relates').outV().hasLabel('person').count()"
"请帮我找出与用户黄建聪存在喜欢关系,且与用户周轩存在拥有关系的仓库节点，返回这些仓库的创建时间,id,语言,及用户黄建聪的年龄,及用户周轩的性别","g.V().has('user', 'name', '黄建聪').as('a').out('likes').as('b').in('has').has('user', 'name', '周轩').as('c').select('a', 'b', 'c').by('age').by(values('createTime', 'id', 'lang')).by('gender')"
查找全部与用户郑宏有关系的用户的年龄,"g.V().has('user', 'name', '郑宏').bothE().otherV().hasLabel('user').values('age')"
"查找name不等于电子科技大学的university has的department的名称,以及这些department has的teacher的名称","g.V().hasLabel('university').has('name', neq('电子科技大学')).out('has').hasLabel('department').as('b').out('has').hasLabel('teacher').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找源点name是蚂蚁集团,边标签为company_belong_city,且满足条件srcId为空的边,返回这些边的srcId减181的值","g.V().has('company', 'name', '蚂蚁集团').outE('company_belong_city').has('srcId', null).project('result').by(values('srcId').math('_ - 181'))"
"返回和作家有关联的书节点,并根据其名字,创建时间分组,返回名字,创建时间,以及id加98的个数",g.V().hasLabel('author').as('a').outE('write').inV().hasLabel('book').as('b').select('b').by('name').by('createTime').by(values('id').math('_ + 98').count()).group().by(select('b').by('name').by('createTime')).by(select('b').by(values('id').math('_ + 98').count()).fold())
从author吴建国出发，通过knows类型的边，走3步到达的author节点。,"g.V().has('author', 'name', '吴建国').repeat(out('knows')).times(3).hasLabel('author')"
 请帮我查询杜思琪支付过的人中，有哪些人认识她。,"g.V().hasLabel('person').has('name', '杜思琪').out('pay').as('b').in('knows').hasLabel('person').as('c').select('c')"
"查找和课程点有属于关系的部门节点,且边满足条件f1不是true,目标部门节点满足条件大小小于55",g.V().hasLabel('course').as('a').outE('belong').as('e').inV().hasLabel('department').as('b').where(neq('true')).by('f1').where(lt(55)).by('size').select('b')
"找出全部名为浙江大学的点的,规格为medium,id在41到76之间的朋友,返回这些朋友的价值,和边的源点id,f0,权重","g.V().has('name', '浙江大学').outE('friend').as('e').inV().has('scale', 'medium').has('id', between(41, 76)).as('b').select('b', 'e').by('value').by(values('srcId', 'f0', 'weight'))"
"请帮我找出126个性别不等于male的person,根据身高从小到大排列","g.V().hasLabel('person').has('gender', neq('male')).order().by('height', asc).limit(126)"
id除65的值,g.V().hasLabel('a').project('result').by(values('id').math('_ / 65'))
 请帮我查找所有与名为'孙强'的人有相关者关系，或者与这些相关者相关者关系的评论。,"g.V().has('person', 'name', '孙强').outE('relation').inV().hasLabel('comment').dedup()"
"给出135个名为何梅的点认识的label为person的节点,且节点id不是4且id不是50","g.V().has('name', '何梅').out('knows').hasLabel('person').has('id', P.neq(4)).has('id', P.neq(50)).limit(135)"
"以703,785,796作为请求点id, 源点的id等于输入表id,返回165个与Post_438和Post_271都存在关系的person节点","g.withSideEffect('p', [703, 785, 796]).V().where(__.in('p').is(P.eq('p'))).has('name', 'Post_438').outE().inV().hasLabel('person').where(__.inE().outV().has('name', 'Post_271')).limit(165)"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出与person孙思思和李国强都存在person_likes_person关系的点","g.V().has('person', 'name', '孙思思').outE('person_likes_person').inV().as('b').inE('person_likes_person').outV().has('person', 'name', '李国强').select('b')"
"查询所有和医生杜若涵有关系的药品或处方或病人,返回这些点的创建时间","g.V().hasLabel('doctor').has('name', '杜若涵').bothE().otherV().hasLabel(within('medicine', 'prescription', 'patient')).values('createTime')"
 返回与buyer ID为194相关的买家的合作伙伴，再返回所有与买家有关系的合作伙伴。,"g.V().has('buyer', 'id', '194').as('a').bothE().otherV().hasLabel('buyer').as('b').both().hasLabel('buyer').as('b_dup').select('b').outE('partner').otherV().as('c').select('b').outE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
请帮我找出全部与论坛中国诗词论坛有关系的帖子的价值,"g.V().has('forum', 'name', '中国诗词论坛').bothE().otherV().hasLabel('post').values('value')"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部名为陈建聪的点的,id大于等于45的相关者,返回这些相关者的薪资,和边的f0,权重","g.V().has('person', 'name', '陈建聪').outE('relation').as('e').inV().has('id', gte(45)).project('b_salary', 'e_f0', 'e_weight').by(values('salary')).by(select('e').values('f0')).by(select('e').values('weight'))"
 找杜科的合作伙伴的朋友的朋友,"g.V().has('person', 'name', '杜科').out('partner').out('friend').out('friend')"
 王国强支付的人数，被他喜欢的人数。,"g.V().has('person', 'name', '王国强').outE('pay').inV().hasLabel('person').inE('likes').outV().hasLabel('person').count()"
请帮我查找id为74的person的朋友，以及与person有关的朋友。,"g.V().has('person', 'id', '74').as('a').bothE().otherV().hasLabel('person').as('b').bothE().hasLabel('friend').otherV().as('c').select('b').bothE().hasLabel('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
 找出与名为孙红的人有社交关系的人或账号。,"g.V().hasLabel('person').has('name', '孙红').outE('friend').inV().hasLabel('account').range(1, 2)"
"给出和大学浙江大学有关的城市,再给出和浙江大学属于的其他城市,返回它们","g.V().has('university', 'name', '浙江大学').as('a').bothE().as('e').otherV().hasLabel('city').as('b').select('a').bothE('belong').as('e2').otherV().hasLabel('city').as('c').select('a', 'b', 'c')"
"返回所有person的家人,或其家人的家人",g.V().hasLabel('person').outE('family').inV().hasLabel('person').outE('family').inV().hasLabel('person').dedup()
"输入请求点id的列表450,908,425, 以属性id作为相等条件,给出全部和book java程序设计有关系的publisher节点,返回这些点的height,age,gender","g.inject([450, 908, 425]).as('p').V().hasLabel('book').as('a').where('a', eq('p')).by('id').by().has('name', 'java程序设计').bothE().as('e').otherV().hasLabel('publisher').as('b').select('b').project('height', 'age', 'gender').by(values('height')).by(values('age')).by(values('gender'))"
"查询名为百度贴吧的,value小于505的relation,返回这些relation的createTime,和边的f1","g.V().has('name', '百度贴吧').outE('relation').as('e').inV().has('value', lt(505)).project('b.createTime', 'e.f1').by(values('createTime')).by(select('e').values('f1'))"
"查询peopleNumber为空,value大于643的company belong的city的名称,以及这些city contain的university的名称","g.V().hasLabel('company').has('peopleNumber', null).has('value', gt(643)).out('belong').hasLabel('city').as('b').out('contain').hasLabel('university').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回和订单Order_358有关的订单,称为X,再返回和这个X有关联的其他商品,以及和X有关联的卖家","g.V().hasLabel('orders').has('name', 'Order_358').as('a').bothE().otherV().hasLabel('orders').as('b').bothE().otherV().hasLabel('goods').as('c').select('b').bothE().otherV().hasLabel('seller').as('d').select('a', 'b', 'c', 'd')"
"返回和账号BIN有关的账号,再返回和BIN还款的其他贷款,返回它们","g.V().hasLabel('account').has('name', 'BIN').as('a').bothE().otherV().hasLabel('account').as('b').select('a').outE('repay').inV().hasLabel('loan').as('c').select('a', 'b', 'c')"
id对67取余的值,g.V().has('id').project('mod').by(values('id').math('_ % 67'))
"用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出全部源点标签等于user,边标签等于user_likes_post的边,返回这些边的targetId减32的最小值,和weight除170.78的求和值","g.V().hasLabel('user').outE('user_likes_post').project('min_targetId_minus_32', 'sum_weight_div_170_78').by(values('targetId').math('_ - 32').min()).by(values('weight').math('_ / 170.78').sum())"
"请帮我找出所有id为62的buyer关联的goods,和以contain关系关联了这些goods的其他orders","g.V().has('buyer', 'id', 62).bothE().otherV().hasLabel('goods').as('b').inE('contain').otherV().hasLabel('orders').as('c').select('b', 'c')"
"帮我查询id为64的software有关的person的friend, 再帮我查询和person有关系的friend","g.V().has('software', 'id', 64).as('a').bothE().as('e').otherV().hasLabel('person').as('b').bothE('friend').as('e2').otherV().as('c').select('b').bothE('friend').as('e3').otherV().as('d').select('a', 'b', 'c', 'd')"
 找出一个人所有的朋友，或一个人朋友的朋友。,g.V().hasLabel('person').outE('friend').inV().hasLabel('person').outE('friend').inV().hasLabel('person').dedup()
"用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));找出和电影绿巨人有2跳关系的电影","g.V().has('film', 'name', '绿巨人').repeat(bothE().otherV().simplePath()).times(2).hasLabel('film').dedup()"
 找名叫赵建聪的医生。,"g.V().hasLabel('doctor').has('name', '赵建聪')"
"返回赵月的点认识的person,然后返回赵月被认识的person,一起返回","g.V().has('name', '赵月').as('a').out('knows').as('b').select('a').in('knows').as('c').select('a', 'b', 'c')"
 请帮我找出与Account Light和TheShy之间存在转会关系的球员。,"g.V().hasLabel('account').has('name', 'Light').outE('transfer').inV().as('b').inE('transfer').outV().hasLabel('account').has('name', 'TheShy').select('b')"
找出与郑宏和吴思思都有关联的订单节点，返回它们的名称、价值和ID。,"g.V().has('buyer', 'name', '郑宏').outE().inV().hasLabel('orders').as('b').inE().outV().has('buyer', 'name', '吴思思').select('b').values('name', 'value', 'id')"
请帮我找出名为韩红的点喜欢的仓库,"g.V().has('name', '韩红').outE('likes').inV().hasLabel('repository')"
 请问您需要什么帮助？,"g.V().has('country', 'name', '俄罗斯').as('a').out('contain').as('b').select('a').V().has('company', 'name', '谷歌').as('c').out('cooperate').as('d').select('a', 'b', 'c', 'd')"
"请帮我查找被person认识数量大于163的person,记为relationCount,再查询这些person认识的person","g.V().hasLabel('person').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('knows').hasLabel('person').id().max()).where(__.select('relationCount').is(gt(163))).select('a').out('knows').hasLabel('person').dedup()"
"帮我查询所有person以名字分组的名字, 根据名字升序排序","g.V().hasLabel('person').values('name').group().by(identity()).order().by(keys, asc).select(keys)"
 查询与杭州存在归属关系的国家，以及这些国家中包含杭州的城市，并返回这些城市的名称。,"g.V().has('name', '杭州').outE('belong').inV().hasLabel('country').outE('contain').inV().hasLabel('city').values('name')"
给出107个与美团和蚂蚁集团都存在关系的公司或账号节点,"g.V().has('name', '美团').outE().as('e').inV().or(hasLabel('company'), hasLabel('account')).as('b').inE().as('e2').outV().has('name', '蚂蚁集团').select('b').limit(107)"
"用如下schema的图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));找出所有处方以权重,id,名字分组的创建时间, 根据创建时间降序排序","g.V().hasLabel('prescription').group().by(project('weight', 'id', 'name').by(values('weight')).by(values('id')).by(values('name'))).by(values('createTime')).unfold().order().by(select(values), desc)"
"找出和部门有关联的教师节点,并根据其性别,名字,年龄分组,返回性别,名字,年龄,以及id减id的值","g.V().hasLabel('department').bothE('has').otherV().hasLabel('teacher').group().by(values('gender', 'name', 'age')).by(__.project('gender', 'name', 'age', 'id_minus_id').by(__.select('gender')).by(__.select('name')).by(__.select('age')).by(__.select('id').math('_ - _'))).select(values).unfold()"
提供复仇者联盟电影的标签和发行电影院信息。,"g.V().has('name', '复仇者联盟').as('a').outE('has').inV().hasLabel('tag').as('b').select('a').inE('releases').outV().hasLabel('cinema').as('c').select('a', 'b', 'c')"
帮我找陈强这个人的点，他有哪些属性，如身高、年龄,"g.V().hasLabel('person').has('name', '陈强').project('height', 'age').by('height').by('age')"
"帮我查询id为172的公司有关的person的朋友, 再帮我查询和person有关系的伙伴","g.V().has('company', 'id', 172).as('a').bothE().otherV().hasLabel('person').as('b').both().hasLabel('person').as('c').select('b').bothE('partner').otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
 请找出中国军事论坛和天涯论坛的共同关系。,"g.V().has('forum', 'name', '中国军事论坛').outE('relation').inV().as('b').inE('relation').outV().has('forum', 'name', '天涯论坛').select('b').limit(99)"
帮我查询事项ISSUE-149属于的仓库节点拥有的合并请求,"g.V().hasLabel('issue').has('name', 'ISSUE-149').out('belong').hasLabel('repository').out('has').hasLabel('pullRequest')"
"输入请求点id的列表34,426, 以属性id作为相等条件,请帮我找出孤城的点knows的book,然后请帮我找出孤城被publish的publisher,一起返回","g.inject([34, 426]).as('p').select('p').unfold().as('id').V().has('id', __.select('id')).has('name', '孤城').as('a').outE('knows').inV().hasLabel('book').as('b').select('a').inE('publisher_publish_book').outV().hasLabel('publisher').as('c').select('a', 'b', 'c')"
返回所有label为company或country或university的点,"g.V().hasLabel('company', 'country', 'university')"
"以('Prescription_438',358,1999-09-28),('Prescription_459',225,2004-12-23),('Prescription_258',287,2007-05-06),('Prescription_151',460,2012-10-11)作为请求表数据,属性分别为name,weight,createTime, 以属性name作为相等条件,查找和doctor有关联的prescription节点,并根据其name,createTime,weight分组,返回name,createTime,weight,以及id减14的值","g.inject([['Prescription_438', 358, '1999-09-28'], ['Prescription_459', 225, '2004-12-23'], ['Prescription_258', 287, '2007-05-06'], ['Prescription_151', 460, '2012-10-11']]).as('p').select('p').unfold().as('row').select('row').project('name', 'weight', 'createTime').by(limit(local, 1)).by(limit(local, 2)).by(limit(local, 3)).as('p_data').V().hasLabel('doctor').as('a').where(eq('a')).by('name').by(select('p_data').select('name')).bothE('doctor_creates_prescription').otherV().hasLabel('prescription').as('b').select('b').project('name', 'createTime', 'weight', 'id_minus_14').by(values('name')).by(values('createTime')).by(values('weight')).by(math('id - 14')).group().by(project('name', 'createTime', 'weight').by(values('name')).by(values('createTime')).by(values('weight'))).by(fold())"
"查询和person徐轩有购买关系的软件,再查询以提交关系关联了徐轩的软件","g.V().has('person', 'name', '徐轩').as('a').out('buy').as('b').select('a').in('commits').as('c').select('a', 'b', 'c')"
"返回和company微软有关的city,称为X,再返回和这个X有关联的其他university,以及和X有关联的company","g.V().has('company', 'name', '微软').as('a').bothE().otherV().hasLabel('city').as('b').bothE().otherV().hasLabel('university').as('c').select('b').bothE().otherV().hasLabel('company').as('d').select('a', 'b', 'c', 'd')"
"查找与person黄轩有关,且与tag悬疑有关系的film节点","g.V().has('person', 'name', '黄轩').bothE('watch').bothV().hasLabel('film').bothE('has').bothV().has('tag', 'name', '悬疑').select('film')"
 查找薪资为3951或更高且ID大于等于65的人的姓名、他们所属的公司名称。,"g.V().hasLabel('person').has('salary', 3951).has('id', gte(65)).outE('knows').inV().hasLabel('person').as('b').outE('belong').inV().hasLabel('company').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我查找名字不是杜若涵或年龄不为空的作家撰写的书的名称,以及这些书 认识的书的名称","g.V().hasLabel('author').or(has('name', neq('杜若涵')), has('age')).outE('write').inV().hasLabel('book').as('b').outE('knows').inV().hasLabel('book').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"查询和seller韩宏有关的seller,再查询和韩宏ask的其他buyer,返回它们","g.V().has('seller', 'name', '韩宏').as('a').bothE().otherV().hasLabel('seller').as('b').select('a').bothE('ask').otherV().hasLabel('buyer').as('c').select('a', 'b', 'c')"
帮我查询以认识关系关联了person周月的person,"g.V().hasLabel('person').has('name', '周月').in('knows').hasLabel('person')"
"输入表的列为weight,f0,srcId, 数据为(107.16,847,172),(103.60,512,68), 源点的weight等于输入表weight,查询86个student马轩和徐雪,共同的partner","g.withSideEffect('p', [[107.16,847,172],[103.60,512,68]]).V().hasLabel('student').as('a').where(and(__.select('a').values('weight').is(within(__.select('p').unfold().limit(local, 1))), __.select('a').has('name', '马轩'))).outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().as('c').hasLabel('student').has('name', '徐雪').select('b').limit(86)"
给出与account Zeus和BIN都存在repay关系的点,"g.V().hasLabel('account').has('name', 'Zeus').as('a').outE('repay').as('e').inV().as('b').inE('repay').as('e2').outV().hasLabel('account').has('name', 'BIN').as('c').select('b').dedup()"
"找出作家撰写的书,返回其源点的身高乘174的数量,以及目标点的字数乘13的值","g.V().hasLabel('author').as('a').outE('write').as('e').inV().hasLabel('book').as('b').project('count_a_height_times_174', 'b_wordCount_times_13').by(__.select('a').values('height').math('_ * 174').count()).by(__.select('b').values('wordCount').math('_ * 13'))"
"以'Ee', 10作为输入调用pageRank函数,返回id, value","g.call('pageRank').with('edges', 'Ee').with('maxIterations', 10).select('id', 'value')"
 请帮我查找与李建国和Alan有关的评论。,"g.V().has('person', 'name', '李建国').as('a').outE('creates').as('e').inV().hasLabel('comment').as('b').select('a').V().has('person', 'name', 'Alan').as('c').outE('creates').as('e2').inV().hasLabel('comment').as('d').select('a', 'b', 'c', 'd')"
"以(9161,187,'周建国'),(7402,198,'黄国强'),(4723,194,'徐建国')作为请求表数据,属性分别为salary,height,name, 源点的salary等于输入表salary,查找卖家陈雪拥有的商品,被其他卖家拥有的数量","g.withSideEffect('p', [[9161, 187, '周建国'], [7402, 198, '黄国强'], [4723, 194, '徐建国']]).V().hasLabel('seller').has('name', '陈雪').as('a').out('seller_has_goods').as('b').in('seller_has_goods').as('c').where('c', neq('a')).where(__.select('a').values('salary').is(within(__.select('p').unfold().limit(1)))).select('c').dedup().count()"
 找出悬疑标签。,"g.V().hasLabel('tag').has('name', '悬疑')"
"找出和person孙轩有关的person,称为X,再找出和这个X有关联的其他loan,以及和X有关联的loan","g.V().has('person', 'name', '孙轩').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('loan').as('c').select('b').bothE().otherV().hasLabel('loan').as('d').select('a', 'b', 'c', 'd')"
 帮我查询马伟申请的贷款。,"g.V().hasLabel('person').has('name', '马伟').outE('apply').inV().hasLabel('loan').as('b').select('b').by(identity()).as('a').select('a', 'b')"
查询所有和person孙思琪之间有朋友关系的person,"g.V().hasLabel('person').has('name', '孙思琪').outE('friend').inV().hasLabel('person')"
请帮我查找和帖子Post_271之间有拥有关系的标签,"g.V().hasLabel('post').has('name', 'Post_271').out('has').hasLabel('tag')"
"请帮我找出源点名字是Jack,边类型是支付,且时间戳等于2002年10月02日的边,返回这些边的目标点id乘174的值","g.V().has('name', 'Jack').outE('pay').has('timeStamp', '2002-10-02').project('result').by(values('targetId').math('_ * 174'))"
"使用列为age,height,salary, 数据为(54,190,1840),(46,170,9259),(36,162,1224),(36,156,3422)的子查询作为输入表, 源点的salary等于输入表salary,查询id为118的点的name,value,id","g.withSideEffect('p', [[54, 190, 1840], [46, 170, 9259], [36, 162, 1224], [36, 156, 3422]]).V().has('id', '118').as('a').where(__.select('a').values('salary').as('s').select('p').unfold().where(__.select('s').is(eq(__.tail(local, 1))))).select('a').project('a.name', 'a.value', 'a.id').by(__.values('name')).by(__.values('value')).by(__.values('id'))"
帮我查询作家周建聪认识的作家节点认识的作家,"g.V().has('author', 'name', '周建聪').out('knows').out('knows').dedup()"
"返回和名为呼吸科的部门有朋友关系,或有朋友的朋友关系的医生","g.V().has('department', 'name', '呼吸科').bothE('friend').otherV().range(1, 2).hasLabel('doctor').dedup()"
查找47个与耳鼻喉科和内科都存在关系的doctor节点,"g.V().has('name', '耳鼻喉科').outE().inV().hasLabel('doctor').as('b').inE().outV().has('name', '内科').select('b').limit(47)"
"返回全部Prescription_133的点包含的药品,然后返回Prescription_133被创造的医生,一起返回","g.V().has('name', 'Prescription_133').as('a').out('contain').hasLabel('medicine').as('b').select('a').in('creates').hasLabel('doctor').as('c').select('a', 'b', 'c')"
"请帮我查找person王雪关联的person,被其他person认识的数量","g.V().has('person', 'name', '王雪').outE('relates').inV().hasLabel('person').inE('knows').outV().hasLabel('person').count()"
"输入请求点id的列表262,647,886,267, 以属性id作为相等条件,查找前99个标签等于person_family_person的边","g.inject([262, 647, 886, 267]).unfold().as('p').V().has('id', __.as('p')).outE('person_family_person').limit(99)"
 给出马红和吴强，他们两个是用户标签相同相关者节点的人。,"g.V().has('user', 'name', '马红').outE('relation').inV().as('b').inE('relation').outV().has('user', 'name', '吴强').select('b').values('name')"
请帮我找出全部名为徐若涵的节点喜欢的评论或标签,"g.V().has('name', '徐若涵').outE('likes').inV().hasLabel(within('comment', 'tag')).dedup()"
查询何红发布的帖子,"g.V().hasLabel('user').has('name', '何红').outE('publish').inV().hasLabel('post').as('b').select('b').by(__.inE('publish').outV()).as('a').select('a', 'b')"
"查询城市的三角的环,边类型是包含, 并返回这些点的id","g.V().hasLabel('city').as('a').outE('contain').inV().as('b').outE('contain').inV().as('c').where(__.as('c').outE('contain').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"返回名为PR-65的合并请求,以及与其有关的仓库,并返回PR-65的创建时间和这些仓库的名字","g.V().hasLabel('pullRequest').has('name', 'PR-65').as('a').bothE().as('e').otherV().hasLabel('repository').as('b').select('a', 'b').by('createTime').by('name')"
" 请帮我查找所有用户源点标签为user,边标签为creates的边，并返回这些边的srcId乘以srcId对733取余加143.40的值，以及targetId对169取余加29的值。","g.V().hasLabel('user').outE('creates').project('expr1', 'expr2').by(__.values('srcId').math('_ * _ % 733 + 143.40')).by(__.values('targetId').math('_ % 169 + 29'))"
 查询与名为马若涵的人有配偶关系或配偶关系的贷款。,"g.V().has('person', 'name', '马若涵').outE('partner').inV().hasLabel('loan').range(1, 2).values('name')"
找出所有label为电影院的点，按照id升序排序。,"g.V().hasLabel('cinema').order().by('id', asc)"
"找出与名为Post_401和Post_258的点共同拥有的,类型是标签的节点","g.V().has('name', 'Post_401').out('has').hasLabel('tag').as('b').in('has').has('name', 'Post_258').select('b')"
"返回买家周雪创造的订单,以及取消这些订单的买家","g.V().hasLabel('buyer').has('name', '周雪').outE('creates').inV().hasLabel('orders').as('b').inE('cancel').outV().hasLabel('buyer').as('c').select('b', 'c')"
"给出名为ISSUE-434的事项,以及与其有关的合并请求,并返回ISSUE-434的权重和这些合并请求的创建时间","g.V().has('issue', 'name', 'ISSUE-434').as('a').bothE().as('e').otherV().hasLabel('pullRequest').as('b').select('a', 'b').by('weight').by('createTime')"
"给出全部源点类型是person,边类型是likes的边,返回这些边的f0对f0取余的最小值,和srcId加188的值","g.V().hasLabel('person').outE('likes').project('min_mod', 'srcId_plus').by(math('_ / _').by('f0').by('f0').min()).by(values('srcId').math('_ + 188'))"
"帮我查询标签为person的点,返回157个",g.V().hasLabel('person').limit(157)
"给出名为张科的person,以及与其有关的person,并返回张科的性别和这些person的身高","g.V().has('person', 'name', '张科').as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a', 'b').by(values('gender')).by(values('height'))"
"根据age,name分组,计算age减68除199的最小值","g.V().hasLabel('a').group().by(values('age', 'name')).by(values('age').math('(_ - 68) / 199').min())"
"输入请求点id的列表949,179,327,170, 源点的id等于输入表id,返回与评论Comment_406存在comment_belong_film关系,且与标签喜剧存在film_has_tag关系的电影节点，返回这些电影的类别,价值,名字,及评论Comment_406的字数,及标签喜剧的名字","g.inject([949, 179, 327, 170]).unfold().as('p').V().hasLabel('comment').has('id', __.select('p')).has('name', 'Comment_406').as('a').outE('comment_belong_film').inV().hasLabel('film').as('b').inE('film_has_tag').outV().hasLabel('tag').has('name', '喜剧').as('c').select('a', 'b', 'c').by('wordCount').by(__.project('category', 'value', 'name').by('category').by('value').by('name')).by('name')"
"用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出所有源点满足条件id大于302,目标点满足条件名字不是悬疑或名字是文艺,且label为post_has_tag的边","g.E().hasLabel('post_has_tag').where(and(outV().has('id', gt(302)), inV().has('name', neq('悬疑')).or().inV().has('name', eq('文艺'))))"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部与person吴红有关系的person的salary","g.V().has('person', 'name', '吴红').bothE().otherV().hasLabel('person').values('salary')"
请帮我找出167位年龄在8到29岁之间，按照身高从低到高排序的用户。,"g.V().hasLabel('user').has('age', between(8, 29)).order().by('height', asc).limit(167)"
 请帮我查找杭州的公司，并返回它们与哪些大学有合作，包括等级、ID和名称。,"g.V().has('city', 'name', '杭州').out('contain').hasLabel('company').out('cooperate').hasLabel('university').project('level', 'id', 'name').by(values('level')).by(values('id')).by(values('name'))"
请帮我查找与卖家张红和孙伟都存在回答关系的点,"g.V().has('seller', 'name', '张红').outE('ask').inV().as('b').inE('ask').outV().has('seller', 'name', '孙伟').select('b')"
"查找名为Kafka和Flink的,label为仓库的点公共的伙伴节点的名单","g.V().hasLabel('repository').has('name', 'Kafka').as('a').outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().hasLabel('repository').has('name', 'Flink').as('c').select('b').values('name')"
"请帮我查找用户赵科喜欢的仓库,以及属于这些仓库的合并请求","g.V().hasLabel('user').has('name', '赵科').outE('likes').inV().hasLabel('repository').as('b').inE('belong').outV().hasLabel('pullRequest').as('c').select('b', 'c')"
"给出名为王红和黄科的,类型是user的点公共的partner节点的名单","g.V().has('user', 'name', '王红').out('partner').as('b').in('partner').has('user', 'name', '黄科').select('b').values('name')"
"请帮我找出类型为用户的点,返回135个",g.V().hasLabel('user').limit(135)
查询前26个标签为likes的边,g.E().hasLabel('likes').limit(26)
"请帮我找出全部名为Bilibili的,gender为famale且height大于等于189的relation,返回这些relation的salary,和边的targetId,f0,f1","g.V().has('name', 'Bilibili').outE('relation').as('e').inV().has('gender', 'famale').has('height', gte(189)).project('salary', 'targetId', 'f0', 'f1').by(values('salary')).by(select('e').values('targetId')).by(select('e').values('f0')).by(select('e').values('f1'))"
"请帮我查找29个person张建国和黄宏,共同的恋人","g.V().has('person', 'name', '张建国').out('lover').as('b').in('lover').has('person', 'name', '黄宏').select('b').limit(29)"
"输入表的列为salary,height,id, 数据为(9475,156,67),(8325,161,58),(9413,199,18),(3137,169,66), 源点的salary等于输入表salary,找出名为文学院和物理学院的,标签为部门的点公共的伙伴节点的名单","g.withSideEffect('p', [[9475,156,67],[8325,161,58],[9413,199,18],[3137,169,66]]).V().hasLabel('department').as('a').where(and(__.values('salary').is(within(__.select('p').unfold().limit(local, 1))), __.values('name').is(eq('文学院')))).outE('partner').inV().as('b').inE('partner').outV().hasLabel('department').as('c').where(__.values('name').is(eq('物理学院'))).select('b').values('name').dedup()"
"输入表的列为name,id,gender, 数据为('何伟',43,'famale'), 以属性name作为相等条件,返回电影院好视影院的所有标签等于朋友的边,并根据f0升序排列,返回71个","g.withSideEffect('p', [['name':'何伟','id':43,'gender':'famale']]).V().hasLabel('cinema').has('name', '好视影院').outE('friend').as('e').order().by('f0').limit(71).inV().as('b').select('b')"
"帮我查询与计算机学院存在has关系的teacher,teacher与course存在teach关系的点,返回这些点的name","g.V().has('name', '计算机学院').out('has').hasLabel('teacher').out('teach').hasLabel('course').values('name')"
"请帮我查找名为loan_64的account或company,以及与其有关的account,并返回loan_64的id和这些account的value","g.V().or(hasLabel('account'), hasLabel('company')).has('name', 'loan_64').bothE().otherV().hasLabel('account').project('a_id', 'b_value').by(select(all, 'v').unfold().hasLabel('account', 'company').has('name', 'loan_64').id()).by(values('value'))"
查找与buyer何雪有consult关系的2度以内的环,"g.V().has('buyer', 'name', '何雪').as('a').repeat(bothE('consult').otherV().simplePath()).times(2).where(loops().is(1).or().loops().is(2)).where(__.as('a')).select('a').by('id').project('a.id', 'b_id').by(select('a').id()).by(id())"
"帮我查询与名为赵红和韩国强的点共同撰写的,类型是书的节点","g.V().has('name', '赵红').outE('write').inV().hasLabel('book').as('b').inE('write').outV().has('name', '韩国强').select('b')"
"给出类型为仓库,名为Tugraph的点,返回这些点的语言,权重","g.V().hasLabel('repository').has('name', 'Tugraph').project('a.lang', 'a.weight').by(values('lang')).by(values('weight'))"
"请帮我找出88个名为马强的点喜欢的标签为评论的节点,且其创建时间不是2022年08月11日或名字小于114","g.V().has('name', '马强').outE('likes').inV().hasLabel('comment').has('createTime', neq('2022-08-11')).or().has('name', lt(114)).limit(88)"
"找出被company华为cooperate的university,和华为belong的city","g.V().hasLabel('company').has('name', '华为').as('b').outE('belong').inV().hasLabel('city').as('c').select('b').inE('cooperate').outV().hasLabel('university').as('a').select('a', 'b', 'c')"
查找以观看关系关联了电影泰坦尼克号的person,"g.V().hasLabel('film').has('name', '泰坦尼克号').in('watch').hasLabel('person')"
 请帮我找出与张建国喜欢过的书籍相关的书籍，以及与张建国喜欢的书籍有相似喜好的书籍。,"g.V().hasLabel('reader').has('name', '张建国').as('a').outE('likes').inV().hasLabel('book').as('b').select('a').inE('likes').outV().hasLabel('book').as('c').select('a', 'b', 'c')"
"返回和课程高等数学有关的部门,称为X,再返回和这个X有关联的其他学生,以及和X有关联的大学","g.V().has('course', 'name', '高等数学').as('a').bothE().bothV().hasLabel('department').as('b').bothE().bothV().hasLabel('student').as('c').select('b').bothE().bothV().hasLabel('university').as('d').select('a', 'b', 'c', 'd')"
"找出用户王红 发布的帖子,返回帖子 拥有的标签的value的平均值加467的平均值","g.V().has('user', 'name', '王红').outE('publish').inV().hasLabel('post').outE('has').inV().hasLabel('tag').values('value').fold().project('result').by(__.mean().math('_ + 467').mean()).select('result')"
"查找label为包含,以及满足条件源点id小于159,f0为空,或目标点id不为空的边","g.E().hasLabel('contain').or(and(has('srcId', lt(159)), has('f0', null)), has('targetId', neq(null)))"
"帮我查询所有与person有关系的person节点,且person节点的名字不等于郑强,并返回这些person的薪资乘薪资的值,以及person的id的最大值乘id的最小值","g.V().hasLabel('person').as('a').outE().as('e').inV().hasLabel('person').has('name', neq('郑强')).as('b').select('b').by(values('salary').math('_ * _')).as('salary_squared').select('b').by(values('id').max()).as('max_id').select('b').by(values('id').min()).as('min_id').select('salary_squared', 'max_id', 'min_id').by(identity()).by(identity()).by(identity()).math('salary_squared + max_id * min_id')"
"使用列为gender,salary,name, 数据为('male',5139,'孙月')的子查询作为输入表, 源点的name等于输入表name,查询论坛的3度以内的环","g.withSideEffect('p', [['gender': 'male', 'salary': 5139, 'name': '孙月']]).V().hasLabel('forum').has('name', __.select('p').unfold().select('name')).as('a').both().as('b').both().where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"帮我查询名为ISSUE-250的点属于的仓库,并对这些仓库的创建时间进行求和","g.V().has('name', 'ISSUE-250').outE('belong').inV().hasLabel('repository').values('createTime').sum()"
"请帮我查找person以身高分组的id, 根据id从小到大排序",g.V().hasLabel('person').group().by('height').by(values('id').order().fold()).order(local).by(keys)
"给出类型为用户的所有点,并根据年龄从小到大排列","g.V().hasLabel('user').order().by('age', asc)"
"请帮我找出56个名为数据结构的点属于的label为部门的节点,且其id大于67","g.V().has('name', '数据结构').outE('belong').inV().hasLabel('department').has('id', gt(67)).limit(56)"
"查找所有和doctor点有creates关系的prescription节点,且边满足条件targetId小于185,目标prescription节点name是Prescription_292","g.V().hasLabel('doctor').outE('creates').has('targetId', lt(185)).inV().hasLabel('prescription').has('name', 'Prescription_292')"
"给出读者黄若涵的类型是朋友的边,并根据目标点id升序排列,返回192个","g.V().has('reader', 'name', '黄若涵').outE('friend').order().by('targetId', asc).limit(192).inV()"
"找出119个和类型是部门的点有拥有关系的医生,以及和这些医生有属于关系的部门",g.V().hasLabel('department').as('a').outE('has').inV().hasLabel('doctor').as('b').outE('belong').inV().hasLabel('department').as('c').select('c').limit(119)
返回名为孙轩的点喜欢的帖子,"g.V().has('name', '孙轩').out('likes').hasLabel('post')"
帮我查询与person张强和郑思思都存在认识关系的点,"g.V().has('person', 'name', '张强').out('knows').as('b').in('knows').has('person', 'name', '郑思思').select('b')"
 给出韩思琪所有的商品，以及向她咨询购买的买家，一起返回。,"g.V().has('name', '韩思琪').as('a').outE('has').inV().hasLabel('goods').as('b').select('a').inE('consult').outV().hasLabel('buyer').as('c').select('a', 'b', 'c')"
查询被person黄强喜欢的person,"g.V().hasLabel('person').has('name', '黄强').as('b').outE('likes').as('e').inV().as('a').select('a', 'b')"
帮我查询全部与仓库Tugraph有关系的仓库的id,"g.V().hasLabel('repository').has('name', 'Tugraph').bothE().otherV().hasLabel('repository').id()"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出label为person的点,并根据年龄从小到大排列","g.V().hasLabel('person').order().by('age', asc)"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回名为周梅和赵建聪的,类型为person的点公共的friend节点的名单","g.V().has('person', 'name', '周梅').out('friend').as('b').in('friend').has('person', 'name', '赵建聪').select('b').values('name')"
"请帮我找出103个id为空且类别为传记且名字小于686的书,根据名字从小到大排列","g.V().hasLabel('book').has('id', null).has('category', '传记').has('name', lt(686)).order().by('name', asc).limit(103)"
请帮我找出与Order_148有关的seller，以及包含在Order_148中的其他商品，并将它们返回。,"g.V().hasLabel('orders').has('name', 'Order_148').as('a').bothE().as('e').otherV().hasLabel('seller').as('b').select('a').outE('contain').as('e2').inV().hasLabel('goods').as('c').select('a', 'b', 'c')"
 查询陈若涵和陈强共同的相关者，共有126个人。,"g.V().has('person', 'name', '陈若涵').outE('relation').inV().as('b').inE('relation').outV().has('person', 'name', '陈强').select('b').limit(126)"
请帮我查找所有与大学有关的人，或者这些人认识的人。,"g.V().hasLabel('university').outE('relation').inV().range(1, 2).dedup()"
请帮我找出所有与Comment_103存在属于关系的电影，以及这些电影所拥有的标签。返回这些点的价值。,"g.V().has('name', 'Comment_103').outE('belong').inV().hasLabel('film').outE('has').inV().hasLabel('tag').values('value')"
帮我查询id为30的点的价值,"g.V().has('id', 30).values('value')"
返回所有吴国强知道的人，以及吴国强有关联的人。,"g.V().has('name', '吴国强').as('a').outE('knows').inV().hasLabel('person').as('b').select('a').inE('relates').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"找出与名为杜科和Bob的点共同取消的,标签等于订单的节点","g.V().has('name', '杜科').outE('cancel').inV().hasLabel('orders').as('b').inE('cancel').outV().has('name', 'Bob').select('b')"
"请帮我查找全部与Bob存在回答关系的买家,买家与订单存在创造关系的点,返回这些点的价格","g.V().has('name', 'Bob').outE('ask').inV().hasLabel('buyer').outE('creates').inV().values('price')"
请帮我找出年龄小于199的Person观看过的电影及其对应的标签名称。,"g.V().hasLabel('person').has('age', lt(199)).outE('watch').inV().hasLabel('film').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"找出全部loan以id,amount,weight分组的amount, 根据amount升序排序","g.V().hasLabel('loan').group().by(project('id', 'amount', 'weight').by('id').by('amount').by('weight')).by(values('amount').fold()).order(local).by(select(keys).select('amount'), asc).select(values)"
"请帮我找出university电子科技大学的friend,的srcId除48的数量","g.V().has('university', 'name', '电子科技大学').outE('friend').project('result').by(values('srcId').math('/ 48')).select('result').count()"
获取陈国强创建的订单中包含的商品,"g.V().hasLabel('buyer').has('name', '陈国强').out('creates').hasLabel('orders').out('contain').hasLabel('goods')"
请帮我找出类型是事项或用户的点,"g.V().hasLabel(within('issue', 'user'))"
"使用列为height,salary,name, 数据为(150,4800,'赵宏')的子查询作为输入表, 源点的height等于输入表height,找出全部源点标签等于电影,目标点标签等于标签,标签等于film_has_tag的边","g.withSideEffect('p', [['height': 150, 'salary': 4800, 'name': '赵宏']]).V().hasLabel('film').has('height', __.select('p').unfold().select('height')).outE('film_has_tag').as('e').inV().hasLabel('tag').select('e')"
"找出编辑李科发布的书,被其他书关联的数量","g.V().has('publisher', 'name', '李科').outE('publish').inV().hasLabel('book').inE('relates').outV().hasLabel('book').count()"
请帮我找出与北京大学和电子科技大学都有关联的85个大学节点。,"g.V().has('name', '北京大学').outE().inV().hasLabel('university').as('b').inE().outV().has('name', '电子科技大学').select('b').limit(85)"
 给出与ID为21的论坛相关的伙伴关系。,"g.V().has('forum', 'id', '21').as('a').bothE().otherV().hasLabel('forum').as('b').outE('relation').inV().as('c').select('b').outE('partner').inV().as('d').select('a', 'b', 'c', 'd')"
"返回id为2的course有关的teacher的friend, 再返回和teacher有关系的relation","g.V().has('course', 'id', 2).as('a').bothE().otherV().hasLabel('teacher').as('b').bothE().otherV().hasLabel('teacher').where(eq('b')).bothE('friend').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"返回类型是person的点,返回108个",g.V().hasLabel('person').limit(108)
"查询标签为person,名为何宏的点,返回这些点的id","g.V().hasLabel('person').has('name', '何宏').values('id')"
创建一个名为defaultName的贷款,"g.V().hasLabel('loan').has('name', 'defaultName')"
"请帮我找出和类型是部门的点有拥有关系的医生,并且和这些医生有属于关系的部门,并且和这些部门有拥有关系的医生",g.V().hasLabel('department').as('a').out('has').hasLabel('doctor').as('b').in('belong').hasLabel('department').as('c').out('has').hasLabel('doctor').as('d').select('d')
 请帮我查询陈梅喜欢的人数，以及他们之间的朋友关系。,"g.V().has('person', 'name', '陈梅').outE('likes').inV().hasLabel('person').inE('knows').outV().hasLabel('person').count()"
"调用pageRank函数,以'kY', 57作为输入,返回运算结果","g.call(""pageRank"").with(""propertyName"", ""kY"").with(""maxIterations"", 57).select(""id"", ""value"")"
请帮我找出前52个类型是own的边,g.E().hasLabel('own').limit(52)
 请帮我查找与这个软件相关联的人，以及这些人的其他认识者。,"g.V().has('software', 'id', '156').bothE().otherV().hasLabel('person').as('b').inE('knows').otherV().hasLabel('person').as('c').select('b', 'c')"
"找出所有名为韩梅的点的,性别等于40的朋友,返回这些朋友的id,和边的源点id,目标点id","g.V().has('name', '韩梅').outE('friend').as('e').inV().has('gender', 40).project('b.id', 'e.srcId', 'e.targetId').by(id()).by(select('e').outV().id()).by(select('e').inV().id())"
"请帮我查找名为杜建国的点likes的全部repository,并对这些repository的weight进行求和","g.V().has('name', '杜建国').outE('likes').inV().hasLabel('repository').values('weight').sum()"
"查询创造医生陈科创造的处方,的医生","g.V().hasLabel('doctor').has('name', '陈科').outE('creates').inV().hasLabel('prescription').as('b').inE('creates').outV().hasLabel('doctor').as('c').select('b', 'c')"
"以'zj'作为输入调用KHOP函数,返回id, kValue","g.call('KHOP').with('input', 'zj').select('id', 'kValue')"
"返回病人的朋友,或其朋友的朋友","g.V().hasLabel('patient').as('a').outE('friend').inV().range(1, 2).as('b').select('b')"
"查找3个person韩伟和杜轩,共同的partner","g.V().has('person', 'name', '韩伟').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '杜轩').select('b').limit(3)"
"找出卖家回答的买家,返回其源点的id除96的值,以及目标点的年龄减40的值","g.V().hasLabel('seller').as('a').outE('ask').as('e').inV().hasLabel('buyer').as('b').project('a_id_div_96', 'b_age_minus_40').by(select('a').values('id').math('/ 96')).by(select('b').values('age').math('- 40'))"
"返回名为黄梅的点likes的全部person,并对这些person的salary进行求和","g.V().has('name', '黄梅').outE('likes').inV().hasLabel('person').values('salary').sum()"
请帮我找出与person杜红有关的person，以及与杜红进行过交易的other person，并将它们返回。,"g.V().hasLabel('person').has('name', '杜红').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('pay').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
查询被course高等数学belong的department,"g.V().hasLabel('course').has('name', '高等数学').as('b').outE('belong').inV().hasLabel('department').as('a').select('a', 'b')"
找出创建时间按升序排列的，价格大于88并且ID大于等于29或者名字不等于'呐喊'的书籍，一共有27本。,"g.V().hasLabel('book').has('price', gt(88)).or(has('id', gte(29)), has('name', neq('呐喊'))).order().by('createTime', asc).limit(27)"
"查找id为188的department有关的course的friend, 再查找和course有关系的relation","g.V().has('department', 'id', 188).bothE().otherV().hasLabel('course').as('b').bothE().otherV().hasLabel('course').bothE('friend').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"帮我查询和作家吴国强有关的读者,称为X,再帮我查询和这个X有关联的其他编辑,以及和X有关联的作家","g.V().hasLabel('author').has('name', '吴国强').as('a').bothE().otherV().hasLabel('reader').as('b').bothE().otherV().hasLabel('publisher').as('c').select('b').bothE().otherV().hasLabel('author').as('d').select('a', 'b', 'c', 'd')"
"查找104个名为XiaoHu的点转账的类型为账号的节点,且其是否冻结是true","g.V().has('name', 'XiaoHu').outE('transfer').inV().hasLabel('account').has('isBlock', true).limit(104)"
找出北京大学和南京大学的共同关联人员，共47人。,"g.V().has('university', 'name', '北京大学').outE('relation').inV().as('b').inE('relation').outV().has('university', 'name', '南京大学').select('b').limit(47)"
 找出65个与大学有拥有关系的部门，以及与这些部门有拥有关系的教师。,g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('teacher').limit(65)
"使用列为gender,salary,id, 数据为('male',8066,88),('male',8984,96)的子查询作为输入表, 以属性gender作为相等条件,查询源点类型为publisher,目标点类型为book,类型为publisher_publish_book的边","g.inject([['male', 8066, 88], ['male', 8984, 96]]).as('p').unfold().as('p_row').select('p_row').by(project('gender', 'salary', 'id').by(limit(local, 1)).by(limit(local, 2)).by(limit(local, 3))).V().hasLabel('publisher').as('a').where(eq('a')).by('gender').by(select('p_row').select('gender')).outE('publisher_publish_book').as('e').inV().hasLabel('book').select('e')"
"根据年龄,名字,性别分组,计算薪资减薪资的数量","g.V().hasLabel('a').group().by(union(values('age'), values('name'), values('gender')).fold()).by(count(local))"
"请帮我找出person赵红的全部label为family的边,并根据srcId升序排列,返回4个","g.V().has('person', 'name', '赵红').outE('family').order().by('srcId', asc).limit(4).inV()"
"以('杜思思','famale',65),('Jimmy','famale',70),('周红','male',32),('赵思思','famale',82)作为请求表数据,属性分别为name,gender,id, 源点的name等于输入表name,返回以发布关系关联了帖子Post_355的用户","g.inject(['杜思思', 'Jimmy', '周红', '赵思思']).unfold().as('p_name').V().hasLabel('user').where(outE('user_publish_post').inV().hasLabel('post').has('name', 'Post_355')).has('name', within('杜思思', 'Jimmy', '周红', '赵思思')).select('p_name').by().dedup()"
返回与孙强有支付关系的人,"g.V().hasLabel('person').has('name', '孙强').inE('pay').outV().dedup()"
"返回buyer cancel的orders,返回其源点的age乘age的数量,以及目标点的id加55的最小值","g.V().hasLabel('buyer').as('a').outE('cancel').as('e').inV().hasLabel('orders').as('b').select('a', 'b').project('count_age_squared', 'min_id_plus_55').by(select('a').by('age').math('_ * _').count()).by(select('b').by('id').math('_ + 55').min())"
查找193个与郑建聪和杜思思都存在关系的person节点,"g.V().has('name', '郑建聪').as('a').outE().as('e').inV().hasLabel('person').as('b').inE().as('e2').outV().has('name', '杜思思').as('c').select('b').limit(193)"
 查询何思思的处方被其他病人使用的数量。,"g.V().has('patient', 'name', '何思思').out('accept').as('b').in('accept').hasLabel('patient').where(neq('a')).count()"
"找出与用户杜若涵有关,且与事项ISSUE-281有关系的仓库节点","g.V().has('user', 'name', '杜若涵').bothE('likes').otherV().hasLabel('repository').bothE('has').otherV().has('issue', 'name', 'ISSUE-281').as('c').select('c').bothE('has').otherV().hasLabel('repository').dedup()"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));返回account Light transfer的account,被其他account transfer的数量","g.V().has('account', 'name', 'Light').outE('account_transfer_account').inV().as('b').inE('account_transfer_account').outV().as('c').dedup().count()"
请帮我找出所有与徐国强有关联的家庭成员。,"g.V().has('person', 'name', '徐国强').outE('family').inV().hasLabel('person').range(1, 2).values('name')"
请帮我找出所有类型为贷款的点,g.V().hasLabel('loan')
"给出id为169的部门有关的大学的伙伴, 再给出和大学有关系的相关者","g.V().has('department', 'id', 169).as('a').bothE().otherV().hasLabel('university').as('b').both().hasLabel('university').bothE('partner').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"请帮我找出与person杜月有关,且与标签历史有关系的电影节点","g.V().hasLabel('person').has('name', '杜月').bothE('watch').otherV().hasLabel('film').bothE('has').otherV().hasLabel('tag').has('name', '历史').select('b')"
"查询与用户周思琪存在喜欢关系,且与标签喜剧存在拥有关系的帖子节点，返回这些帖子的字数,名字,语言,及用户周思琪的名字,及标签喜剧的id","g.V().has('user', 'name', '周思琪').as('a').outE('likes').inV().hasLabel('post').as('b').inE('has').outV().has('tag', 'name', '喜剧').as('c').select('a', 'b', 'c').by('name').by(values('wordCount', 'name', 'lang')).by('id')"
"输入请求点id的列表201,884, 以属性id作为相等条件,返回和department有关联的student节点,并根据其name,salary,height分组,返回name,salary,height,以及id减20的值","g.inject([201, 884]).unfold().as('p').V().hasLabel('department').has('id', __.select('p')).bothE('department_has_student').otherV().hasLabel('student').as('b').select('b').values('name', 'salary', 'height').by().project('name', 'salary', 'height', 'id_minus_20').by(__.select('name')).by(__.select('salary')).by(__.select('height')).by(__.select('b').values('id').math('_ - 20')).group().by(__.select('name', 'salary', 'height')).by(__.fold())"
"请帮我找出issue的三角的环,边标签等于belong, 并返回这些点的id","g.V().hasLabel('issue').as('a').outE('belong').inV().as('b').outE('belong').inV().as('c').where(__.select('c').outE('belong').inV().where(eq('a'))).select('a', 'b', 'c').by(id()).by('id').by('id').project('a', 'b_id', 'c_id').by(__.select('a')).by(__.select('b')).by(__.select('c'))"
 按照分类（category)和ID对电影进行分组，然后按照ID从大到小排序。,"g.V().hasLabel('film').group().by(values('category', 'id')).order(local).by(keys, desc).select(values).unfold()"
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找89个person李宏和张建聪,共同的relation","g.V().has('person', 'name', '李宏').outE('relation').inV().where(__.inE('relation').outV().has('person', 'name', '张建聪')).limit(89)"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询所有类型为公司的点",g.V().hasLabel('company')
"以478,223作为请求点id, 以属性id作为相等条件,给出所有publisher以height,age分组的height, 根据height从大到小排序","g.inject([478, 223]).unfold().as('p').V().hasLabel('publisher').as('a').where(eq('p')).by('id').by('id').select('a').group().by(values('height', 'age')).by(select('a').values('height').fold()).order(local).by(keys, desc)"
"请帮我查找和account Geaflow123有transfer关系的account,再请帮我查找以transfer关系关联了Geaflow123的account","g.V().hasLabel('account').has('name', 'Geaflow123').as('a').outE('transfer').inV().as('b').select('a').inE('transfer').outV().as('c').select('a', 'b', 'c')"
 返回与城市点相关的国家节点，并按价值分组。,g.V().hasLabel('city').bothE('belong').bothV().hasLabel('country').values('value').groupCount()
"给出company以value,peopleNumber分组的scale, 根据scale降序排序","g.V().hasLabel('company').group().by(values('value', 'peopleNumber')).by(values('scale')).order(local).by(values, desc)"
"帮我查询被account transfer数量大于98的account,记为relationCount,再查询这些account transfer的company","g.V().hasLabel('account').as('a').project('a', 'relationCount').by(identity()).by(__.in('transfer').hasLabel('account').values('id').min()).select('a', 'relationCount').as('aWithCount').select('a').where(select('aWithCount').select('relationCount').is(gt(98))).out('transfer').hasLabel('company').dedup()"
"查询与名为王月和王梅的点共同认识的,label为person的节点","g.V().has('name', '王月').out('knows').as('e').in('knows').has('name', '王梅').as('e2').select('e').hasLabel('person')"
"给出has course高等数学belong的department,的university","g.V().hasLabel('course').has('name', '高等数学').outE('belong').inV().hasLabel('department').as('b').inE('has').outV().hasLabel('university').as('c').select('b', 'c')"
"请帮我查找id为156的medicine有关的prescription的partner, 再请帮我查找和prescription有关系的partner","g.V().has('medicine', 'id', 156).as('a').bothE().otherV().hasLabel('prescription').as('b').bothE('partner').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找person的三角的环,边类型是person_knows_person, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('person_knows_person').inV().hasLabel('person').as('b').outE('person_knows_person').inV().hasLabel('person').as('c').where(__.outE('person_knows_person').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"输入请求点id的列表943,876,249, 源点的id等于输入表id,请帮我查找电影院的三角的环,边label为cinema_releases_film, 并返回这些点的id","g.inject([943, 876, 249]).unfold().as('p').V().has('cinema', 'id', __.as('p')).as('a').outE('cinema_releases_film').inV().as('b').outE('cinema_releases_film').inV().as('c').where(outE('cinema_releases_film').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"给出140个和类型是用户的点有发布关系的帖子,且和这些帖子有拥有关系的标签",g.V().hasLabel('user').as('a').outE('publish').as('e').inV().hasLabel('post').as('b').outE('has').as('e2').inV().hasLabel('tag').as('c').select('c').limit(140)
"给出大学华中科技大学合作的公司,以及包含这些公司的城市","g.V().has('university', 'name', '华中科技大学').outE('cooperate').inV().hasLabel('company').as('b').inE('contain').outV().hasLabel('city').as('c').select('b', 'c')"
"根据name分组,计算id的最小值减id的值","g.V().hasLabel('a').group().by('name').by(values('id').min()).as('minIdMap').select(values).unfold().as('entry').select(keys).as('name').select(values).as('minId').select('entry').select(values).unfold().as('id').select('name', 'minId', 'id').by().by().by().project('result').by(select('minId').math('_ - ').by(select('id'))).select('result')"
"给出和person Alice有喜欢关系的评论,再给出以创造关系关联了Alice的评论","g.V().has('person', 'name', 'Alice').as('a').outE('likes').inV().hasLabel('comment').as('b').select('a').inE('creates').outV().hasLabel('comment').as('c').select('a', 'b', 'c')"
"请帮我查找属于城市武汉的大学,和这些大学属于的城市","g.V().hasLabel('city').has('name', '武汉').in('belong').hasLabel('university').as('b').out('belong').hasLabel('city').as('c').select('b', 'c')"
"给出全部源点价格不为空,目标点价格小于143,且类型是包含的边","g.V().has('price', neq(null)).outE('contain').as('e').inV().has('price', lt(143)).select('e')"
 内科部门是什么？,"g.V().hasLabel('department').has('name', '内科')"
帮我找一下名为'Order_158'且类型的点，然后返回它们的id,"g.V().hasLabel('orders').has('name', 'Order_158').id()"
"请帮我找出所有源点标签等于person,边标签等于parent,且满足条件srcId小于等于159,targetId为空的边","g.V().hasLabel('person').outE('parent').has('srcId', lte(159)).has('targetId', eq(null))"
"请帮我找出197个名为韩宏的点教的标签等于课程的节点,且其课时大于等于30或学分不为空","g.V().has('name', '韩宏').outE('teach').inV().hasLabel('course').or(has('courseHour', gte(30)), has('credit', neq(null))).limit(197)"
"以932,900作为请求点id, 以属性id作为相等条件,找出前85个满足条件id为空的电影院","g.withSideEffect('p', [[932], [900]]).V().hasLabel('cinema').where(and(__.has('id', within('p')), __.has('id', null))).limit(85)"
"查找名为武汉大学的大学,以及与其有关的城市,并返回武汉大学的等级和这些城市的人数","g.V().hasLabel('university').has('name', '武汉大学').as('a').bothE().as('e').otherV().hasLabel('city').as('b').select('a', 'b').by('level').by('peopleNumber')"
"请帮我找出knows person黄梅的person,和这些person lover的person","g.V().hasLabel('person').has('name', '黄梅').in('knows').as('b').out('lover').as('c').select('b', 'c')"
"找出189个名为Zeus的点还款的类型是贷款的节点,且节点权重在274到964之间","g.V().has('name', 'Zeus').outE('repay').as('e').inV().hasLabel('loan').has('weight', between(274, 964)).as('b').select('b').limit(189)"
"帮我查询名为李若涵的点accept的所有prescription,并对这些prescription的weight进行求和","g.V().has('name', '李若涵').outE('accept').inV().hasLabel('prescription').values('weight').sum()"
"找出书关联的书,返回其源点的价格减价格的值,以及目标点的price的和乘29的和","g.V().hasLabel('book').as('a').outE('relates').as('e').inV().hasLabel('book').as('b').select('a', 'b').by('price').by('price').project('expr1', 'expr2').by(select('a').math('_ - _')).by(select('b').sum().math('_ * 29'))"
"查询读者孙红喜欢的书,以及认识这些书的书","g.V().hasLabel('reader').has('name', '孙红').as('a').outE('likes').as('e').inV().hasLabel('book').as('b').inE('knows').as('e2').outV().hasLabel('book').as('c').select('b', 'c')"
"返回名为形势与政策的点belong的所有department,并对这些department的value进行求和","g.V().has('name', '形势与政策').out('belong').hasLabel('department').values('value').sum()"
 查找86部喜剧电影，价值在296到659之间，按类别升序排列。,"g.V().hasLabel('film').has('category', eq('喜剧')).has('value', between(296, 659)).order().by('category', asc).limit(86)"
"返回标签为seller,名为陈雪的点,返回这些点的height","g.V().hasLabel('seller').has('name', '陈雪').values('height')"
 请问有没有名叫周宏的病人？,"g.V().hasLabel('patient').has('name', '周宏')"
请帮我查找所有和author杜伟之间有write关系的book,"g.V().hasLabel('author').has('name', '杜伟').out('write').hasLabel('book')"
查找以属于关系关联了仓库Flink的合并请求,"g.V().has('repository', 'name', 'Flink').inE('belong').outV().hasLabel('pullRequest')"
查询被loan loan_74 deposit的account,"g.V().hasLabel('loan').has('name', 'loan_74').outE('deposit').inV().hasLabel('account').as('b').select('b').by().as('a').select('a', 'b')"
 赵科和张月共同教授一个名为course的节点。,"g.V().has('name', '赵科').as('a').outE('teach').as('e').inV().hasLabel('course').as('b').inE('teach').as('e2').outV().has('name', '张月').as('c').select('b')"
"请帮我找出与person何月有关,且与账号Zeus有关系的账号节点","g.V().has('person', 'name', '何月').bothE('own').otherV().hasLabel('account').as('b').bothE('transfer').otherV().has('account', 'name', 'Zeus').select('b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找177个名为少年闰土的点knows的标签等于book的节点,且节点name不等于百年孤独且category不是小说","g.V().has('name', '少年闰土').outE('knows').inV().hasLabel('book').has('name', neq('百年孤独')).has('category', neq('小说')).limit(177)"
请帮我找出与103个类型为person的节点有knows关系的所有person节点，以及这些person节点之间的knows关系。,g.V().hasLabel('person').as('a').outE('knows').as('e').inV().hasLabel('person').as('b').outE('knows').as('e2').inV().hasLabel('person').as('c').select('c').limit(103)
"用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询美团的点创造的软件,然后帮我查询美团被属于的person,一起返回","g.V().has('company', 'name', '美团').as('a').outE('company_creates_software').inV().hasLabel('software').as('b').select('a').inE('person_belong_company').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"找出贷款loan_3存款的账号, 令贷款的价值等于账号的id,令账号的id等于账号的id的最大值对id取余的最小值, 返回贷款的id, 账号的价值","g.V().hasLabel('loan').has('name', 'loan_3').as('a').outE('deposit').inV().hasLabel('account').as('b').project('a_id', 'b_value').by(select('a').values('id')).by(select('b').values('value'))"
 请帮我查找与编辑有关系的所有作家节点，并返回这些节点中身高加155后对161取余的数量，以及身高对161取余的值。,"g.V().hasLabel('publisher').outE().inV().hasLabel('author').has('id', eq(null)).project('count_result', 'height_mod').by(__.count()).by(__.values('height').math('_ + 155 % _').math('_ % 161')).select('count_result', 'height_mod')"
"找出127个person王宏和王国强,共同的friend","g.V().has('person', 'name', '王宏').outE('friend').inV().as('b').inE('friend').outV().has('person', 'name', '王国强').select('b').limit(127)"
请帮我找出所有与名为王思琪的买家存在伙伴关系，或者其伙伴之间存在伙伴关系的订单。,"g.V().has('buyer', 'name', '王思琪').outE('partner').inV().hasLabel('orders').union(__.identity(), __.outE('partner').inV().hasLabel('orders')).dedup()"
"请帮我查找全部源点标签为person,目标点标签为film,标签为person或tag或comment的边","g.V().hasLabel('person').outE('person', 'tag', 'comment').as('e').inV().hasLabel('film').select('e')"
"查询价值大于965的大学合作的公司的名称,以及这些公司 属于的城市的名称","g.V().hasLabel('university').has('value', gt(965)).outE('cooperate').inV().hasLabel('company').as('b').outE('belong').inV().hasLabel('city').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 返回CSDN论坛中标签为论坛的点的ID、人数和价值。,"g.V().hasLabel('forum').has('name', 'CSDN').project('a.id', 'a.peopleNumber', 'a.value').by(values('id')).by(values('peopleNumber')).by(values('value'))"
"请帮我查找源点性别是famale,性别等于25,身高在166到186之间,目标点价格小于等于2762.49,且label为查看的边","g.V().has('gender', 'famale').has('gender', 25).has('height', between(166, 186)).outE('look').as('e').inV().has('price', lte(2762.49)).select('e')"
"查询张轩的点喜欢的帖子,然后查询张轩被包含的论坛,一起返回","g.V().has('name', '张轩').as('a').outE('likes').inV().hasLabel('post').as('b').select('a').inE('contain').outV().hasLabel('forum').as('c').select('a', 'b', 'c')"
"找出pullRequest以createTime,changeFileNumber分组的createTime, 根据createTime升序排序","g.V().hasLabel('pullRequest').group().by(values('createTime', 'changeFileNumber')).select(values).unfold().order().by(select(keys).select('createTime'), asc)"
"根据name,id,value分组,计算value加value的最小值","g.V().hasLabel('a').group().by(values('name', 'id', 'value')).by(values('value').sum().fold().min())"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出公司华为雇佣的person,被其他person认识的数量","g.V().has('company', 'name', '华为').out('company_employee_person').in('person_knows_person').dedup().count()"
"请帮我查找192个prescription Prescription_151和Prescription_117,共同的partner","g.V().has('prescription', 'name', 'Prescription_151').outE('partner').inV().as('b').inE('partner').outV().has('prescription', 'name', 'Prescription_117').select('b').limit(192)"
"帮我查询部门拥有的医生, 令医生的年龄的值等于拥有医生的部门的id的最大值, 再查找医生创造的处方","g.V().hasLabel('department').as('a').outE('has').as('e').inV().hasLabel('doctor').as('b').select('a').aggregate('depts').by('id').select('b').sideEffect(__.select('depts').unfold().max().store('maxDeptId')).select('b').outE('creates').as('e3').inV().as('d').select('b', 'd').by(__.select('maxDeptId').unfold()).by()"
 返回Comment_472的喜欢者。,"g.V().hasLabel('comment').has('name', 'Comment_472').inE('likes').outV().hasLabel('person')"
"给出和类型是医生的点有属于关系的部门,并且和这些部门有拥有关系的医生,并且和这些医生有属于关系的部门",g.V().hasLabel('doctor').as('a').out('belong').hasLabel('department').as('b').in('has').hasLabel('doctor').as('c').out('belong').hasLabel('department').as('d').select('d')
"帮我查询全部源点满足条件peopleNumber等于2164且area在46266到91524之间,目标点满足条件value不为空,peopleNumber不等于84061,或id不是99555,且类型是belong的边","g.V().has('peopleNumber', 2164).has('area', between(46266, 91524)).outE('belong').as('e').inV().where(or(and(has('value', neq(null)), has('peopleNumber', neq(84061))), has('id', neq(99555)))).select('e')"
"帮我查询源点标签等于person,目标点标签等于person,标签等于person的边",g.V().hasLabel('person').outE('person').hasLabel('person').inV().hasLabel('person')
"给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));找出和名为美国的国家有伙伴关系,或有伙伴的伙伴关系的城市","g.V().has('country', 'name', '美国').repeat(out('partner')).times(2).emit().hasLabel('city').dedup()"
"请帮我查找96个名为徐若涵的点knows的类型为person的节点,且节点id小于60或salary大于9","g.V().has('name', '徐若涵').outE('knows').inV().hasLabel('person').or(has('id', lt(60)), has('salary', gt(9))).limit(96)"
"给出读者徐若涵喜欢的书, 令书的id等于书的类别, 返回读者的性别, 书的字数","g.V().has('reader', 'name', '徐若涵').as('a').outE('likes').inV().hasLabel('book').as('b').project('gender', 'wordCount').by(select('a').values('gender')).by(select('b').values('wordCount'))"
"帮我查询被仓库JavaGuid拥有的合并请求,和JavaGuid拥有的用户","g.V().hasLabel('repository').has('name', 'JavaGuid').as('b').outE('has').inV().hasLabel('pullRequest').as('a').select('b').outE('has').inV().hasLabel('user').as('c').select('a', 'b', 'c')"
"以('郑强',3276,'male'),('何思琪',8286,'male'),('吴国强',4606,'famale')作为请求表数据,属性分别为name,salary,gender, 以属性gender作为相等条件,查找以认识关系关联了person张月的person","g.inject(['郑强',3276,'male'],['何思琪',8286,'male'],['吴国强',4606,'famale']).as('p').select('p').by(unfold()).V().hasLabel('person').has('name','张月').as('a').in('knows').hasLabel('person').as('b').where(eq('a')).by('gender').by(select('p').tail(1).select('gender')).select('b')"
"返回名为徐轩的点的,创建时间等于2013年12月25日,字数小于93的朋友,返回这些朋友的名字,和边的f0,f1","g.V().has('name', '徐轩').outE('friend').as('e').inV().has('createTime', '2013-12-25').has('wordCount', lt(93)).as('b').select('b', 'e').by('name').by(values('f0', 'f1').fold())"
"用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出id为45的person关联的标签,和以拥有关系关联了这些标签的其他电影","g.V().has('person', 'id', 45).bothE().otherV().hasLabel('tag').as('b').inE('film_has_tag').outV().hasLabel('film').as('c').select('b', 'c')"
 返回同时属于腾讯公司且包含浙江大学城市的名称、腾讯公司的人员数量和浙江大学的ID。,"g.V().hasLabel('company').has('name', '腾讯').as('a').outE('belong').inV().hasLabel('city').as('b').inE('contain').outV().hasLabel('university').has('name', '浙江大学').as('c').select('a', 'b', 'c').by('peopleNumber').by('name').by('id')"
查询与医生马若涵和韩科都存在属于关系的点,"g.V().has('doctor', 'name', '马若涵').outE('belong').inV().as('b').inE('belong').outV().has('doctor', 'name', '韩科').select('b')"
给出全部与person王思思有关系的评论的id,"g.V().has('person', 'name', '王思思').bothE().otherV().hasLabel('comment').values('id')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出前107个类型是person_lover_person的边",g.E().hasLabel('person_lover_person').limit(107)
"请帮我查找所有seller的friend,或其friend的friend",g.V().hasLabel('seller').repeat(out('friend')).times(2).dedup()
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询与company华为和滴滴都存在company_apply_loan关系的点","g.V().has('company', 'name', '华为').outE('company_apply_loan').inV().as('b').inE('company_apply_loan').outV().has('company', 'name', '滴滴').select('b')"
请帮我查找前13个满足条件名字是郑月的person,"g.V().hasLabel('person').has('name', '郑月').limit(13)"
获取与国家ID为152相关的公司的合作伙伴，然后获取与该公司相关的朋友。,"g.V().has('country', 'id', '152').bothE().otherV().hasLabel('company').as('b').bothE().otherV().hasLabel('company').where(__.outE('partner').otherV().as('c')).select('b').outE('friend').otherV().as('d').select('b', 'c', 'd').by(__.select('a').by(__.V().has('country', 'id', '152'))).by(__.select('c')).by(__.select('d'))"
请帮我找出前21个标签为family的边,g.E().hasLabel('family').limit(21)
"请帮我查找3个名为百度贴吧的点contain的类型是post的节点,且节点value在96到475之间或createTime不是2019年11月17日","g.V().has('name', '百度贴吧').outE('contain').inV().hasLabel('post').or(has('value', between(96, 475)), has('createTime', neq('2019-11-17'))).limit(3)"
"使用列为id,name,value, 数据为(16,'科幻',257),(74,'文艺',408)的子查询作为输入表, 以属性id作为相等条件,请帮我找出和评论Comment_381有关的person,再请帮我找出和Comment_381comment_belong_film的其他电影,返回它们","g.withSideEffect('p', [['id':16, 'name':'科幻', 'value':257], ['id':74, 'name':'文艺', 'value':408]]).V().hasLabel('comment').where(and(__.values('id').where(within(select('p').unfold().values('id'))), has('name', 'Comment_381'))).as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a').outE('comment_belong_film').as('e2').inV().hasLabel('film').as('c').select('a', 'b', 'c')"
"查询全部源点价值大于等于979,是否冻结不是true,或是否冻结不等于true,目标点上次登录时间为1997年08月30日且是否冻结是false,且类型为转账的边","g.V().has('value', gte(979)).has('isBlock', neq(true)).or(has('isBlock', neq(true))).outE('transfer').as('e').inV().has('lastLoginTime', '1997-08-30').has('isBlock', false).select('e')"
"输入请求点id的列表64,629,111,384,3, 源点的id等于输入表id,请帮我查找从author王雪出发,经过标签为author_knows_author的边,走3度或4度到达的author点","g.withSideEffect('p', [64, 629, 111, 384, 3]).V().hasLabel('author').has('id', within('p')).has('name', '王雪').repeat(bothE('author_knows_author').otherV().simplePath()).times(3).emit().repeat(bothE('author_knows_author').otherV().simplePath()).times(1).emit().hasLabel('author').dedup()"
"请帮我找出和department急诊部有关的department,称为X,再请帮我找出和这个X有关联的其他patient,以及和X有关联的prescription","g.V().hasLabel('department').has('name', '急诊部').as('a').bothE().otherV().hasLabel('department').as('b').bothE().otherV().hasLabel('patient').as('c').select('b').bothE().otherV().hasLabel('prescription').as('d').select('a', 'b', 'c', 'd')"
"以794,534作为请求点id, 以属性id作为相等条件,找出doctor belong的department,返回其源点的salary乘6075的个数,以及目标点的weight的平均值减303的值","g.inject([794, 534]).unfold().as('p').V().hasLabel('doctor').has('id', __.select('p')).as('a').outE('doctor_belong_department').as('e').inV().hasLabel('department').as('b').select('a', 'b').by('salary').by('weight').fold().project('count_salary', 'avg_weight').by(__.unfold().select('a').fold().count()).by(__.unfold().select('b').mean().math('_ - 303'))"
"以969,748,617,591,722作为请求点id, 源点的id等于输入表id,返回与doctor韩宏有doctor_creates_prescription关系的1跳的环","g.inject([969, 748, 617, 591, 722]).as('p').flatMap(select('p')).as('id').V().hasLabel('doctor').has('id', where(eq('id'))).has('name', '韩宏').as('a').bothE('doctor_creates_prescription').otherV().where(eq('a')).select('a').by('id').as('a_id').select('a').bothE('doctor_creates_prescription').otherV().as('b').select('a_id', 'b').by('id')"
"返回论坛的三角的环,边label为包含, 并返回这些点的id","g.V().hasLabel('forum').as('a').outE('contain').inV().as('b').outE('contain').inV().as('c').where(__.as('c').outE('contain').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
 找出所有与徐雪有关联的评论。,"g.V().has('person', 'name', '徐雪').outE('relation').inV().hasLabel('comment').range(1, 2)"
"请帮我查找被医生属于数量大于60的部门,记为relationCount,再查询这些部门属于的处方","g.V().hasLabel('department').as('a').project('a', 'relationCount').by(identity()).by(bothE('belong').hasLabel('doctor').count()).where(select('relationCount').is(gt(60))).select('a').outE('belong').hasLabel('prescription').inV().dedup()"
 查询与 person 相关联的 software 节点，按名称分组并返回。,g.V().hasLabel('person').bothE('buy').bothV().hasLabel('software').values('name').groupCount()
"找出与名为Post_346和Post_372的点共同拥有的,label为标签的节点","g.V().has('name', 'Post_346').outE('has').inV().hasLabel('tag').as('b').inE('has').outV().has('name', 'Post_372').select('b')"
"帮我查询label为医生的点,返回42个",g.V().hasLabel('doctor').limit(42)
请帮我找出和用户李思琪之间有创造关系的合并请求,"g.V().hasLabel('user').has('name', '李思琪').outE('creates').inV().hasLabel('pullRequest')"
返回等级不等于2的节点,"g.V().has('level', neq(2))"
"请帮我找出名为李科的病人,以及与其有关的病人,并返回李科的年龄和这些病人的名字","g.V().hasLabel('patient').has('name', '李科').as('a').bothE().otherV().hasLabel('patient').as('b').select('a', 'b').by('age').by('name')"
请帮我找出全部名为韩梅的点creates的comment,"g.V().has('name', '韩梅').outE('creates').inV().hasLabel('comment')"
请帮我找出马建国喜欢和被支付的所有person，一起返回。,"g.V().has('name', '马建国').as('a').outE('likes').inV().hasLabel('person').as('b').select('a').inE('pay').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
请帮我找出与订单相关的商品节点，按销量和名称进行分组，并返回销量和名称。,"g.V().hasLabel('orders').as('a').bothE('contain').as('e').otherV().hasLabel('goods').as('b').select('b').values('sellerNumber', 'name').group().by().by(count())"
"返回creates orders Order_369的buyer,和这些buyer consult的seller","g.V().hasLabel('orders').has('name', 'Order_369').in('creates').as('b').out('consult').as('c').select('b', 'c')"
查询名为'变形金刚'且标签为'电影'的点，并返回它们的价值。,"g.V().hasLabel('film').has('name', '变形金刚').values('value')"
 找出有173个同时与俄罗斯和美国有关系的城市节点。,"g.V().has('name', '俄罗斯').outE().inV().hasLabel('city').as('b').inE().outV().has('name', '美国').select('b').limit(173)"
"帮我查询person马科的标签等于朋友的边,并根据目标点id升序排列,返回18个","g.V().has('person', 'name', '马科').outE('friend').as('e').inV().as('b').order().by(select('e').values('targetId'), asc).select('b').limit(18)"
"用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询所有孙轩的点支付的person,然后帮我查询孙轩被认识的person,一起返回","g.V().has('person', 'name', '孙轩').as('a').outE('person_pay_person').inV().as('b').select('a').inE('person_knows_person').outV().as('c').select('a', 'b', 'c')"
"查找所有源点标签为公司,目标点标签为城市,标签为公司或大学或城市的边","g.V().hasLabel('company').outE('company', 'university', 'city').as('e').inV().hasLabel('city').select('e')"
请帮我查找与病人马建国相关的所有部门，并获取他所接受的所有处方。,"g.V().hasLabel('patient').has('name', '马建国').as('a').bothE().otherV().hasLabel('department').as('b').select('a').outE('accept').inV().hasLabel('prescription').as('c').select('a', 'b', 'c')"
返回108个与好视影院和UME都存在关系的评论或电影节点,"g.V().has('name', '好视影院').outE().inV().or(hasLabel('comment'), hasLabel('film')).as('b').inE().outV().has('name', 'UME').select('b').limit(108)"
 请问华中科技大学某个学院的学生在哪里可以找到？,"g.V().hasLabel('university').has('name', '华中科技大学').out('has').hasLabel('department').out('has').hasLabel('student')"
"帮我查询名为陈建聪的点认识的作家,并对这些作家的名字进行求和","g.V().has('name', '陈建聪').outE('knows').inV().hasLabel('author').values('name').sum()"
"查找账号以价值,是否冻结,创建时间分组的价值, 根据价值升序排序","g.V().hasLabel('account').group().by(values('value', 'isBlock', 'createTime')).unfold().order().by(select(keys).select('value'), asc).select(values)"
给出前31个标签等于拥有的边,g.E().hasLabel('has').limit(31)
"返回部门拥有的教师,返回其源点的价值加477减818除454对94取余的值,以及目标点的id对32取余的个数","g.V().hasLabel('department').as('a').outE('has').as('e').inV().hasLabel('teacher').as('b').select('a', 'b').by(valueMap()).project('expr1', 'expr2').by(select('a').select('value').math('(_ + 477 - 818) / 454 % 94')).by(select('b').select('id').math('_ % 32').count())"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找从person何思琪出发,经过标签等于person_likes_person的边,走1跳到达的person点","g.V().hasLabel('person').has('name', '何思琪').outE('person_likes_person').inV().hasLabel('person')"
请帮我查找全部类型是公司的点,g.V().hasLabel('company')
"查询和department呼吸科有关的department,称为X,再查询和这个X有关联的其他doctor,以及和X有关联的medicine","g.V().has('department', 'name', '呼吸科').as('a').bothE().otherV().hasLabel('department').as('b').bothE().otherV().hasLabel('doctor').as('c').select('b').bothE().otherV().hasLabel('medicine').as('d').select('a', 'b', 'c', 'd')"
" 查询同时与161个人和他们的喜欢对象有关系的Person,并包括这些Person的喜欢对象。",g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('person').as('b').outE('likes').as('e2').inV().hasLabel('person').as('c').select('c').limit(161)
"帮我查询所有王思琪的点认识的person,然后帮我查询王思琪被雇佣的公司,一起返回","g.V().has('name', '王思琪').as('a').out('knows').as('b').select('a').in('employee').hasLabel('person').as('c').select('a', 'b', 'c')"
 返回三体这本书，你知道吗？,"g.V().has('book', 'name', '三体').out('knows').hasLabel('book').out('knows').hasLabel('book').values('name')"
 返回腾讯和谷歌共同创建的，标签为软件的节点。,"g.V().has('name', '腾讯').outE('creates').inV().hasLabel('software').as('b').inE('creates').outV().has('name', '谷歌').select('b')"
 搜索南京大学与张思琪有关的部门。,"g.V().hasLabel('university').has('name', '南京大学').outE('has').inV().hasLabel('department').as('b').outE('has').inV().hasLabel('student').has('name', '张思琪').select('b')"
"返回id为69的点的价值,名字","g.V().has('id', 69).project('value', 'name').by('value').by('name')"
查询电影《建国大业》的标签,"g.V().hasLabel('film').has('name', '建国大业').as('b').outE('has').as('e').inV().hasLabel('tag').as('a').select('a', 'b')"
返回与电子科技大学有合作关系的公司数量，这些公司在其他城市也有业务。,"g.V().has('university', 'name', '电子科技大学').outE('cooperate').inV().hasLabel('company').as('b').inE('contain').outV().hasLabel('city').dedup().count()"
"查找被买家创造数量大于138的订单,记为relationCount,再查询这些订单创造的买家","g.V().hasLabel('orders').as('a').project('node', 'relationCount').by(identity()).by(__.in('creates').hasLabel('buyer').count()).as('p').select('node').where(__.select('p').select('relationCount').is(gt(138))).out('creates').hasLabel('buyer')"
"找出喜欢person吴宏创造的评论,的person","g.V().hasLabel('person').has('name', '吴宏').outE('creates').inV().hasLabel('comment').as('b').inE('likes').outV().hasLabel('person').as('c').select('b', 'c')"
 请帮我找出所有源节点类型为电影，目标节点类型为标签，边类型为具有的边。,g.V().hasLabel('film').outE('has').as('e').inV().hasLabel('tag').select('e')
找出人口至少为69048且名为'英国'的国家所包含的所有城市的名称，以及这些城市所在的国家名称。,"g.V().hasLabel('country').has('name', '英国').has('peopleNumber', gte(69048)).out('contain').hasLabel('city').as('b').in('belong').hasLabel('country').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我找出和书点有关联关系的书节点,且边满足条件权重在181.15到180.37之间,目标书节点满足条件字数大于512","g.V().hasLabel('book').as('a').outE('relates').has('weight', between(180.37, 181.15)).as('e').inV().hasLabel('book').has('wordCount', gt(512)).as('b').select('b')"
 返回呼吸科拥有的医生姓名、权重、创建时间以及他们创建的处方。,"g.V().has('department', 'name', '呼吸科').out('has').hasLabel('doctor').out('creates').hasLabel('prescription').project('weight', 'name', 'createTime').by('weight').by('name').by('createTime')"
 找出与李思思有诊断关系的医生。,"g.V().hasLabel('patient').has('name', '李思思').in('diagnose').hasLabel('doctor')"
"以5作为请求点id, 以属性id作为相等条件,请帮我找出医生创造的处方,返回其源点的身高对182取余除8930的平均值,以及目标点的weight的个数对43取余减57的值","g.withSideEffect('p_id', 5).V().hasLabel('doctor').has('id', __.constant(5)).as('a').outE('doctor_creates_prescription').as('e').inV().hasLabel('prescription').as('b').select('a', 'b').by().project('avg_height_mod', 'count_weight_mod').by(__.select('a').values('height').fold().project('avg').by(__.unfold().math('_ / 8930').math('_ % 182').mean())).by(__.select('b').values('weight').fold().project('count_mod').by(__.count(local).math('_ % 43').math('_ - 57')))"
"查询id为87的电影有关的电影的伙伴, 再查询和电影有关系的相关者","g.V().has('film', 'id', 87).as('a').bothE().otherV().hasLabel('film').as('b').bothE().hasLabel('partner').otherV().as('c').select('b').bothE().hasLabel('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"查找认识person韩科的person,和这些person同事的person","g.V().has('person', 'name', '韩科').as('a').in('knows').as('b').out('colleague').as('c').select('b', 'c')"
 请帮我按照创建时间升序排序所有以名字分组的处方。,g.V().hasLabel('prescription').group().by('name').by(values('createTime').order().fold()).unfold().select(values).unfold().order().by(asc)
"输入请求点id的列表576,469,436,154, 以属性id作为相等条件,查找buyer赵建国的全部partner,的srcId乘39的值","g.inject([576, 469, 436, 154]).unfold().as('p').V().hasLabel('buyer').has('id', __.select('p')).has('name', '赵建国').outE('partner').as('e').select('e').by('srcId').math('_ * 39')"
"请帮我查找公司滴滴属于的城市, 令城市的名字等于公司的价值加42的最小值,令公司的id等于城市的面积,令公司的id等于公司的价值, 返回公司的规格, 城市的面积","g.V().hasLabel('company').has('name', '滴滴').as('a').outE('belong').inV().hasLabel('city').as('b').project('a_scale', 'b_area').by(select('a').values('scale')).by(select('b').values('area'))"
"找出病人接受的处方, 令处方的创建时间的值等于创造处方的医生的薪资的最小值, 再查找处方包含的药品","g.V().hasLabel('patient').as('a').outE('accept').inV().hasLabel('prescription').as('b').project('b', 'createTime').by(__.identity()).by(__.select('b').inE('creates').outV().hasLabel('doctor').values('salary').min()).as('p').select('b').outE('contain').inV().hasLabel('medicine').as('d').select('p').select('createTime', 'd')"
 马宏医生的朋友的朋友,"g.V().has('doctor', 'name', '马宏').out('friend').out('relation').out('friend')"
请帮我查找与company Bilibili有employee关系的1跳以内的环,"g.V().has('company', 'name', 'Bilibili').as('a').outE('employee').inV().as('b').where(__.select('b').out().as('x').where(eq('a')).select('x')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
获取一个人的所有朋友，或者这些朋友的朋友。,g.V().hasLabel('person').as('a').outE('friend').inV().hasLabel('person').as('b').select('b')
 查询两个人徐梅和徐宏在点对点关系中的partner节点，标签为person。,"g.V().has('person', 'name', '徐梅').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '徐宏').select('b').values('name')"
"请帮我查找所有名为loan_27的点的,是否冻结不等于false或是否冻结为false的相关者,返回这些相关者的是否冻结,和边的源点id","g.V().has('name', 'loan_27').outE('relation').as('e').inV().as('b').select('b', 'e').by(values('isBlock')).by(values('srcId'))"
"输入请求点id的列表445, 源点的id等于输入表id,请帮我查找源点薪资大于1381,薪资在8700到9464之间,边标签为person_likes_comment,且满足条件目标点id小于等于101,f1不是false,或目标点id不是148的边,返回这些边的目标点id对175取余的值","g.withSideEffect('p', [445]).V().has('id', within('p')).has('salary', gt(1381)).has('salary', between(8700, 9464)).outE('person_likes_comment').or(and(has('targetId', lte(101)), has('f1', neq(false))), has('targetId', neq(148))).values('targetId').math('_ % 175')"
"返回所有赵红的点支付的person,然后返回赵红被认识的person,一起返回","g.V().has('name', '赵红').as('a').outE('pay').inV().hasLabel('person').as('b').select('a').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
" 请帮我找出所有以name和value对分组course的id,并按升序排序。","g.V().hasLabel('course').group().by(values('name', 'value')).by(values('id').fold()).order(local).by(keys, asc)"
"输入表的列为f0,srcId,weight, 数据为(543,160,140.88),(805,9,142.80),(561,138,182.79),(913,109,168.17), 以属性weight作为相等条件,找出公司创造的软件,返回其源点的人数加634的值,以及目标点的价值乘606的最大值","g.inject([543, 160, 140.88], [805, 9, 142.80], [561, 138, 182.79], [913, 109, 168.17]).as('p').V().hasLabel('company').as('a').where(eq('p')).by('weight').by(select('p').tail(local, 1)).outE('company_creates_software').inV().hasLabel('software').as('b').select('a', 'b').by('peopleNumber').by('value').project('expr1', 'expr2').by(math('_ + 634')).by(math('_ * 606')).select(values).fold().project('col1', 'col2').by(unfold().select('expr1').fold()).by(unfold().select('expr2').max())"
"查询label为person的全部点,并根据薪资从小到大排列","g.V().hasLabel('person').order().by('salary', asc)"
返回前43个满足条件名字不等于王若涵或性别不等于famale的用户,"g.V().hasLabel('user').or(has('name', neq('王若涵')), has('gender', neq('famale'))).limit(43)"
 找朋友，找同事，找朋友的朋友。,"g.V().hasLabel('department').outE('friend').inV().range(1, 2).dedup()"
"查询id为65的person拥有的账号, 并将账号有关的公司的id的平均值赋值给账号的上次登录时间, 接着查询账号的上次登录时间小于65的账号还款的贷款","g.V().has('person', 'id', 65).outE('own').inV().hasLabel('account').as('b').project('b', 'lastLoginTime').by(identity()).by(__.inE().outV().hasLabel('company').values('id').mean()).select('b').where(__.select('lastLoginTime').is(lt(65))).outE('repay').inV().hasLabel('loan').as('d').select('b', 'd').by(values('lastLoginTime')).by(identity())"
"找出和publisher点有publish关系的book节点,且边满足条件f1不等于false,目标book节点id等于98","g.V().hasLabel('publisher').as('a').outE('publish').has('f1', neq(false)).as('e').inV().hasLabel('book').has('id', 98).as('b').select('b')"
"返回与名为赵强和韩若涵的点共同knows的,类型为author的节点","g.V().has('name', '赵强').out('knows').hasLabel('author').as('b').in('knows').has('name', '韩若涵').select('b')"
帮我查询company华为employee的person节点knows的person,"g.V().hasLabel('company').has('name', '华为').out('employee').as('b').out('knows').as('c').select('c')"
 请问周宏和韩建聪之间是否存在互相喜欢的情况？,"g.V().has('user', 'name', '周宏').outE('likes').inV().as('b').inE('likes').outV().has('user', 'name', '韩建聪').select('b')"
 返回所有与某个作家有联系的书，以及与这些书有撰写关系的其他作家。,"g.V().has('author', 'id', '13').bothE().otherV().hasLabel('book').as('b').inE('write').otherV().hasLabel('author').as('c').select('b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询源点标签为person,目标点标签为person,标签为person_colleague_person的边","g.E().hasLabel('person_colleague_person').where(and(outV().hasLabel('person'), inV().hasLabel('person')))"
查找所有和city纽约之间有belong关系的country,"g.V().has('city', 'name', '纽约').outE('belong').inV().hasLabel('country')"
"请帮我查找部门的相关者,或其相关者的相关者",g.V().hasLabel('department').outE('relation').inV().hasLabel('department').path().by(__.label()).by(__.label()).by(__.label()).limit(2).tail(1).select('b')
查找post的2跳的环,"g.V().hasLabel('post').as('a').repeat(both().simplePath()).times(2).where(loops().is(2)).where(__.both().where(eq('a'))).dedup().project('a.id', 'b_id').by(__.select('a').id()).by(id())"
 请帮我找出王建聪和张伟之间存在喜欢关系的证据。,"g.V().hasLabel('reader').has('name', '王建聪').as('a').outE('likes').as('e').inV().as('b').inE('likes').as('e2').outV().hasLabel('reader').has('name', '张伟').as('c').select('b')"
 找出用来偿还贷款的账户节点，即还款来源。,"g.V().hasLabel('loan').has('name', 'defaultName').outE('deposit').inV().hasLabel('account').outE('repay').inV().hasLabel('loan')"
查询id为6的account关联的person，再查询该person相关的relation。,"g.V().has('account', 'id', '6').bothE().otherV().hasLabel('person').as('b').bothE('relation').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('b', 'c', 'd').by(valueMap(true)).select('b').bothE().otherV().hasLabel('account').has('id', '6').as('a').select('a', 'b', 'c', 'd').by(valueMap(true))"
请帮我找出城市天津包含的公司节点合作的大学,"g.V().has('city', 'name', '天津').out('contain').hasLabel('company').out('cooperate').hasLabel('university')"
"用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出和订单有关联的商品节点,并根据其价格,销量,价值分组,返回价格,销量,价值,以及价值乘899的数量","g.V().hasLabel('orders').as('a').bothE('orders_contain_goods').otherV().hasLabel('goods').as('b').select('b').by().group().by(project('price', 'sellerNumber', 'value').by(values('price')).by(values('sellerNumber')).by(values('value'))).by(count()).select(values).unfold().project('b.price', 'b.sellerNumber', 'b.value', 'COUNT(b.value * 899)').by(select(keys).select('price')).by(select(keys).select('sellerNumber')).by(select(keys).select('value')).by(select(values))"
 查询与中国诗词论坛存在关系且与Post_371帖子存在关系的标签节点，返回它们的ID、名称和价值。,"g.V().hasLabel('forum').has('name', '中国诗词论坛').outE().inV().hasLabel('tag').as('b').inE().outV().hasLabel('post').has('name', 'Post_371').select('b').project('id', 'name', 'value').by(values('id')).by(values('name')).by(values('value'))"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找48个与马月和何建聪都存在关系的person节点","g.V().has('name', '马月').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '何建聪').select('b').limit(48)"
"返回id为158的university belong的city, 并将city有关的city的value的最小值赋值给city(b)的name, 接着查询city(b)的name小于158的city belong的country","g.V().has('university', 'id', 158).out('belong').hasLabel('city').as('b').sideEffect(__.bothE().otherV().hasLabel('city').values('value').min().as('minValue').select('b').property('name', __.select('minValue'))).has('name', lt(158)).out('belong').hasLabel('country').as('d').select('b', 'd').by('name').by()"
"给出与forum推特存在contain关系,且与post Post_164存在publish关系的user节点，返回这些user的age,salary,及forum推特的name,及post Post_164的lang","g.V().hasLabel('forum').has('name', '推特').as('a').out('contain').hasLabel('user').as('b').in('publish').hasLabel('post').has('name', 'Post_164').as('c').select('a', 'b', 'c').by('name').by(values('age', 'salary')).by('lang')"
"请帮我查找own account LX001的person,和这些person invest的company","g.V().hasLabel('account').has('name', 'LX001').inE('own').outV().as('b').outE('invest').inV().as('c').select('b', 'c')"
"使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找25个和类型为买家的点有buyer_cancel_orders关系的订单,以及和这些订单有orders_contain_goods关系的商品",g.V().hasLabel('buyer').outE('buyer_cancel_orders').inV().hasLabel('orders').outE('orders_contain_goods').inV().hasLabel('goods').limit(25)
帮我查一下名叫韩若涵的买家,"g.V().hasLabel('buyer').has('name', '韩若涵')"
 请帮我找出与名为defaultName的贷款有关联的账户。,"g.V().hasLabel('loan').has('name', 'defaultName').outE('partner').inV().hasLabel('account').range(1, 2).dedup()"
"以840作为请求点id, 以属性id作为相等条件,请帮我找出年龄小于等于41的节点","g.withSideEffect('p_id', 840).V().has('id', 'p_id').has('age', lte(41))"
"查找买家孙思琪查看的商品,被其他订单包含的数量","g.V().hasLabel('buyer').has('name', '孙思琪').outE('look').inV().hasLabel('goods').inE('contain').outV().hasLabel('orders').count()"
"请帮我找出person提交的软件, 令软件的id的值等于购买软件的person的id的求和值, 再查找软件使用的软件","g.V().hasLabel('person').as('a').outE('commits').inV().hasLabel('software').as('b').sideEffect(project('sum').by(__.in('buy').hasLabel('person').values('id').sum()).select('sum').property(single, 'id')).in('uses').hasLabel('software').as('d').select('b', 'd').by(values('id')).by()"
"帮我查询id为62的university has的department, 并将department有关的course的credit的最小值赋值给department的id, 接着查询department的id小于62的department has的teacher","g.V().hasLabel('university').has('id', 62).out('has').hasLabel('department').as('b').project('b_id', 'd').by(choose(outE().hasLabel('has').inV().hasLabel('course').values('credit').min(), constant(-1)).by(outE().hasLabel('has').inV().hasLabel('course').values('credit').min())).by(where(select('b').values('id').is(lt(62))).out('has').hasLabel('teacher').fold())"
"帮我查询和标签为person的点有认识关系的person,且和这些person有提交关系的软件,且和这些软件有使用关系的软件",g.V().hasLabel('person').as('a').out('knows').hasLabel('person').as('b').out('commits').hasLabel('software').as('c').out('uses').hasLabel('software').as('d').select('d')
 找出38个与Prescription_415和Prescription_477有关系的处方。,"g.V().has('name', 'Prescription_415').outE().inV().hasLabel('prescription').as('b').inE().outV().has('name', 'Prescription_477').select('b').limit(38)"
返回所有与清华大学有合作关系的公司及其所在城市。,"g.V().has('name', '清华大学').as('a').outE('cooperate').inV().hasLabel('company').as('b').select('a').inE('contain').outV().hasLabel('city').as('c').select('a', 'b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询源点类型是forum,目标点类型是post,类型是forum_contain_post的边",g.E().hasLabel('forum_contain_post').where(outV().hasLabel('forum')).where(inV().hasLabel('post'))
请帮我查询韩红支付的人，并返回其性别,"g.V().has('person', 'name', '韩红').outE('pay').inV().hasLabel('person').outE('pay').inV().hasLabel('person').values('gender')"
"查找公司美团合作的大学, 令公司的人数等于公司的人数的个数, 返回公司的名字, 大学的id","g.V().hasLabel('company').has('name', '美团').as('a').outE('cooperate').inV().hasLabel('university').as('b').select('a', 'b').by('name').by('id')"
请帮我找出教师的联系人，或者联系人的联系人,g.V().hasLabel('teacher').outE('relation').inV().hasLabel('teacher').outE('relation').inV().hasLabel('teacher').dedup()
"查询78个名为Faker的点转账的标签等于账号的节点,且节点是否冻结等于true或名字为LX001","g.V().has('name', 'Faker').outE('transfer').inV().hasLabel('account').or(has('isBlock', true), has('name', 'LX001')).limit(78)"
 找王宏这个人。,"g.V().hasLabel('user').has('name', '王宏')"
给出与用户陈伟有发布关系的1跳以内的环,"g.V().has('user', 'name', '陈伟').as('a').bothE('publish').bothV().where(neq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"给出所有源点label为书,目标点label为书,label为读者或编辑的边","g.V().hasLabel('book').bothE('reader', 'publisher').where(otherV().hasLabel('book'))"
 找出年龄小于48岁、薪资在4647到5579之间的医生所开的处方，并列出这些处方中包含的药品名称。,"g.V().hasLabel('doctor').has('age', lt(48)).has('salary', between(4647, 5579)).outE('creates').inV().hasLabel('prescription').as('b').outE('contain').inV().hasLabel('medicine').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
" 找出与文学院有has关系的department和与学生周月有selects关系的course,然后将它们都返回。","g.V().has('department', 'name', '文学院').as('a').out('has').as('b').V().has('student', 'name', '周月').as('c').out('selects').as('d').select('a', 'b', 'c', 'd')"
查询与university复旦大学有belong关系的2度的环,"g.V().has('university', 'name', '复旦大学').as('a').outE('belong').inV().as('b').where(__.select('b').out().as('c').where(eq('a')).select('c')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找159个person陈若涵和张建国,共同的伙伴","g.V().has('person', 'name', '陈若涵').out('partner').where(__.in('partner').has('person', 'name', '张建国')).limit(159)"
"返回与名为何思琪和Bob的点共同喜欢的,标签等于书的节点","g.V().has('name', '何思琪').outE('likes').inV().hasLabel('book').as('b').inE('likes').outV().has('name', 'Bob').select('b')"
"查找名为FSM的用户或事项,以及与其有关的用户,并返回FSM的名字和这些用户的id","g.V().or(hasLabel('user'), hasLabel('issue')).has('name', 'FSM').bothE().otherV().hasLabel('user').project('a_name', 'b_id').by(select('a').values('name')).by(values('id'))"
给出与person徐宏和陈建国都存在支付关系的点,"g.V().hasLabel('person').has('name', '徐宏').outE('pay').inV().as('b').inE('pay').outV().hasLabel('person').has('name', '陈建国').select('b')"
帮我查询全部和person郑红之间有likes关系的person,"g.V().has('person', 'name', '郑红').out('likes').hasLabel('person')"
"找出全部名为Post_267的,id大于24的partner,返回这些partner的name,和边的targetId","g.V().has('name', 'Post_267').outE('partner').as('e').inV().has('id', gt(24)).as('b').select('b', 'e').by('name').by('targetId')"
"请帮我找出person周国强creates的comment,被其他person likes的数量","g.V().has('person', 'name', '周国强').out('creates').hasLabel('comment').in('likes').hasLabel('person').count()"
"请帮我查找全部id为184的country关联的company,和以cooperate关系关联了这些company的其他university","g.V().has('country', 'id', 184).bothE().otherV().hasLabel('company').as('b').inE('cooperate').otherV().hasLabel('university').as('c').select('b', 'c')"
"给出label为reader,名为郑雪的点,返回这些点的salary","g.V().hasLabel('reader').has('name', '郑雪').values('salary')"
"请帮我查找buyer郑建国look的goods,被其他buyer look的数量","g.V().hasLabel('buyer').has('name', '郑建国').as('a').outE('look').inV().hasLabel('goods').as('b').inE('look').outV().hasLabel('buyer').as('c').where(neq('a')).select('c').count()"
"找出名为四川大学的国家,以及与其有关的大学,并返回四川大学的id和这些大学的id","g.V().has('country', 'name', '四川大学').as('a').bothE().otherV().hasLabel('university').as('b').select('a', 'b').by('id')"
"请帮我查找156个和类型为user的点有likes关系的repository,且和这些repository有has关系的pullRequest",g.V().hasLabel('user').out('likes').hasLabel('repository').out('has').hasLabel('pullRequest').limit(156)
"找出person孙思琪的全部标签为朋友的边,并根据源点id升序排列,返回137个","g.V().has('person', 'name', '孙思琪').outE('friend').order().by('srcId', asc).limit(137).inV()"
"查找源点性别等于famale,边类型是创造,且权重为空或源点id对19取余大于47,且f1等于false的边,返回这些边的权重除135.81的值","g.V().has('gender', 'famale').outE('creates').where(or(__.values('weight').is(eq(null)), __.values('srcId').math('_ % 19').is(gt(47)))).has('f1', false).project('result').by(values('weight').math('_ / 135.81'))"
"返回label为喜欢,并且满足条件源点id是73的边","g.E().hasLabel('likes').has('srcId', 73)"
"用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部book以name,name,price分组的id, 根据id升序排序","g.V().hasLabel('book').group().by(values('name', 'name', 'price')).by(values('id').order().fold()).order().by(keys)"
"请帮我找出company腾讯cooperate的university,以及cooperate这些university的company","g.V().hasLabel('company').has('name', '腾讯').outE('cooperate').inV().hasLabel('university').as('b').inE('cooperate').outV().hasLabel('company').as('c').select('b', 'c')"
"给出名为李科的作家,以及与其有关的作家,并返回李科的id和这些作家的性别","g.V().has('author', 'name', '李科').as('a').bothE().otherV().hasLabel('author').as('b').select('a', 'b').by('id').by('gender')"
"输入请求点id的列表218,846,388,426,779, 以属性id作为相等条件,请帮我查找全部person以gender,height,name分组的salary, 根据salary从小到大排序","g.inject([218, 846, 388, 426, 779]).as('p').V().hasLabel('person').as('a').where(eq('p')).by('id').by().select('a').group().by(values('gender', 'height', 'name').fold()).by(values('salary').fold()).order(local).by(values, asc)"
"返回所有帖子以名字,id,语言分组的名字, 根据名字升序排序","g.V().hasLabel('post').group().by(values('name', 'id', 'lang').fold()).by(values('name').fold()).order(local).by(keys, asc).select(values).unfold()"
返回和账号Zeus之间有还款关系的贷款,"g.V().has('account', 'name', 'Zeus').outE('repay').inV().hasLabel('loan')"
 请问有没有一部电影叫做星际穿越，类型是film?如果有，能否提供该电影的名称以及该电影的类型，以便我进行查询。,"g.V().hasLabel('film').has('name', '星际穿越').project('a.name', 'a.value').by('name').by('value')"
"返回被用户赵月创造的事项,和赵月创造的事项","g.V().hasLabel('user').has('name', '赵月').as('b').outE('creates').as('e2').inV().hasLabel('issue').as('c').select('b').outE('creates').as('e').inV().hasLabel('issue').as('a').select('a', 'b', 'c')"
"用这个schema:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找以contain关系关联了city武汉的country","g.V().hasLabel('city').has('name', '武汉').inE('country_contain_city').outV().hasLabel('country')"
获取所有与person相关的tag，以及这些tag与其他通过has关系连接的film。,"g.V().has('person', 'id', '138').bothE().otherV().hasLabel('tag').as('b').inE('has').outV().hasLabel('film').as('c').select('b', 'c')"
"给出所有与卖家有关系的卖家节点,且卖家节点的id不等于47,并返回这些卖家的id加23减5900减77的值,以及卖家的height的平均值乘198的值","g.V().hasLabel('seller').as('a').outE().inV().hasLabel('seller').has('id', neq(47)).as('b').select('b').project('expr1', 'expr2').by(values('id').math('_ + 23 - 5900 - 77')).by(values('height').mean().math('_ * 198'))"
"给出与名为张建聪和张建国的点共同支付的,类型是person的节点","g.V().has('name', '张建聪').outE('pay').inV().as('b').hasLabel('person').where(__.inE('pay').outV().has('name', '张建国')).select('b')"
请帮我找出与类型为person的节点有pay关系的person，以及这些person有knows关系的所有person。,g.V().hasLabel('person').as('a').outE('pay').inV().hasLabel('person').as('b').outE('knows').inV().hasLabel('person').as('c').outE('knows').inV().hasLabel('person').as('d').select('d')
"请帮我找出所有和商品香蕉有关系的订单或买家,返回这些点的价格,销量","g.V().has('goods', 'name', '香蕉').bothE().otherV().hasLabel(within('orders', 'buyer')).project('price', 'sellerNumber').by(values('price')).by(values('sellerNumber'))"
请帮我查找person的1度以内的环,"g.V().hasLabel('person').as('a').both().as('b').where('a', eq('b')).by(T.id).select('a', 'b').by('id').by('id')"
查询徐建国出发，通过拥有标签的边，走三步可达的账号点,"g.V().has('person', 'name', '徐建国').repeat(out('own')).times(3).hasLabel('account')"
"返回被repository has数量大于20的user,记为relationCount,再查询这些user has的issue","g.V().hasLabel('user').as('a').project('user', 'relationCount').by(identity()).by(bothE('has').hasLabel('repository').count()).where(select('relationCount').is(gt(20))).select('user').outE('has').hasLabel('issue').inV()"
查找前32个类型是属于的边,g.E().hasLabel('belong').limit(32)
"帮我查询和person赵伟有关的person,再帮我查询和赵伟投资的其他公司,返回它们","g.V().hasLabel('person').has('name', '赵伟').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('invest').inV().hasLabel('company').as('c').select('a', 'b', 'c')"
 查找孙建国写的书，返回书名、创建时间和ID。,"g.V().has('author', 'name', '孙建国').out('write').as('b').out('relates').as('c').select('c').by(values('name', 'createTime', 'id'))"
请帮我找出与赵轩有关的人，包括他知道和他相关的人，并将他们一起返回。,"g.V().has('name', '赵轩').as('a').bothE('knows', 'relates').otherV().hasLabel('person').as('b', 'c').select('a', 'b', 'c')"
"以'zy', 0作为输入调用triangleCount函数,返回运算结果","g.call(""triangleCount"").with(""label"", ""zy"").with(""threshold"", 0).select(""number"")"
"请帮我找出与名为赵若涵和杜建国的点共同创造的,类型为处方的节点","g.V().has('name', '赵若涵').outE('creates').inV().hasLabel('prescription').as('b').inE('creates').outV().has('name', '杜建国').select('b')"
"用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查找被部门计算机学院拥有的学生","g.V().hasLabel('department').has('name', '计算机学院').as('b').outE('department_has_student').as('e').inV().hasLabel('student').as('a').select('a', 'b')"
"请帮我找出与person有关系的person节点,且person节点的height为空,并返回这些person的height除180的个数,以及person的age除age的值","g.V().hasLabel('person').as('a').outE().as('e').inV().hasLabel('person').has('height', eq(null)).as('b').select('b').by(values('height').is(neq(null)).choose(values('height'), constant(0), constant(1)).fold().count(local)).by(values('age').is(neq(null)).choose(values('age'), constant(1), constant(null)))"
"用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出名为泰坦尼克号的点has的所有tag,并对这些点的name进行求和","g.V().has('film', 'name', '泰坦尼克号').out('film_has_tag').hasLabel('tag').values('name').sum()"
"查找43个名为黄强的点撰写的label为书的节点,且节点名字是三体或id等于50","g.V().has('name', '黄强').outE('write').inV().hasLabel('book').has('name', '三体').or().has('id', 50).limit(43)"
查询94个与英国和越南都存在关系的公司节点,"g.V().has('name', '英国').outE().inV().hasLabel('company').as('b').inE().outV().has('name', '越南').select('b').limit(94)"
请帮我查找标签为病人或部门的点,"g.V().hasLabel(within('patient', 'department'))"
返回账户转账的账户ID，以及该账户的BIN转账。,"g.V().has('account', 'name', 'BIN').outE('transfer').inV().hasLabel('account').outE('transfer').inV().hasLabel('account').values('id')"
"帮我查询用户的伙伴,或其伙伴的伙伴","g.V().hasLabel('user').as('a').outE('partner').inV().range(1, 2).as('b').select('b')"
找出与用户王梅有喜欢关系，并且与标签其他有拥有关系的帖子。返回这些帖子的ID、名称、字数以及用户王梅的ID和标签其他的名字。,"g.V().hasLabel('user').has('name', '王梅').as('a').outE('likes').inV().hasLabel('post').as('b').inE('has').outV().hasLabel('tag').has('name', '其他').as('c').select('a', 'b', 'c').by('id').by('id').by('name').by('wordCount').by('name').project('a.id', 'b.id', 'b.name', 'b.wordCount', 'c.name').by(select('a')).by(select('b')).by(select('b')).by(select('b')).by(select('c'))"
"请帮我找出全部和名为日本的country有partner关系,或有partner的partner关系的city","g.V().has('country', 'name', '日本').repeat(out('partner')).times(2).hasLabel('city').dedup()"
"请帮我查找电影院上映的电影, 令电影的名字的值等于上映电影的电影院的id的数量, 再查找电影拥有的标签","g.V().hasLabel('cinema').as('a').outE('releases').as('e').inV().hasLabel('film').as('b').project('name', 'd').by(__.in('releases').hasLabel('cinema').values('id').count()).by(__.out('has').hasLabel('tag').fold()).select('name', 'd')"
"查找和标签等于person的点有属于关系的公司,且和这些公司有雇佣关系的person,且和这些person有提交关系的软件",g.V().hasLabel('person').as('a').outE('belong').hasLabel('belong').inV().hasLabel('company').as('b').inE('employee').hasLabel('employee').outV().hasLabel('person').as('c').outE('commits').hasLabel('commits').inV().hasLabel('software').as('d').select('d')
"根据id,price,name分组,计算id除id的最小值","g.V().hasLabel('a').group().by(project('id', 'price', 'name').by('id').by('price').by('name')).by(values('id').math('_ / _').min())"
价值加价值的值,g.V().hasLabel('a').project('result').by(values('value').sum(local))
 查询与何梅和吴若涵有关联的人，返回它们的ID和身高。,"g.V().has('person', 'name', '何梅').as('a').outE().as('e').inV().hasLabel('person').as('b').inE().as('e2').outV().has('person', 'name', '吴若涵').as('c').select('b').values('id', 'height')"
"输入请求点id的列表217,233,286,582,432, 源点的id等于输入表id,给出与teacher周梅有关系的student的height","g.inject([217, 233, 286, 582, 432]).as('p').V().hasLabel('teacher').as('a').where(eq('p')).by('id').by().has('name', '周梅').bothE().as('e').otherV().hasLabel('student').as('b').select('b').values('height')"
"帮我查询全部和company华为有关系的loan或account或company,返回这些点的amount","g.V().has('company', 'name', '华为').bothE().otherV().hasLabel(within('loan', 'account', 'company')).values('amount')"
 哪个部门与学生周科有关系？,"g.V().hasLabel('student').has('name', '周科').inE('has').outV().hasLabel('department')"
"找出与person黄科存在lover关系,且与person陈思思存在colleague关系的person节点，返回这些person的gender,name,及person黄科的gender,及person陈思思的height","g.V().has('person', 'name', '黄科').as('a').out('lover').hasLabel('person').as('b').in('colleague').has('person', 'name', '陈思思').as('c').select('a', 'b', 'c').by('gender').by(values('gender', 'name')).by('height')"
"请帮我找出全部与吴轩存在父母关系的person,person与person存在同事关系的点,返回这些点的年龄","g.V().has('name', '吴轩').out('parent').hasLabel('person').out('colleague').hasLabel('person').values('age')"
 找出李梅认识的所有人和与李梅有关联的人，然后一起返回。,"g.V().has('name', '李梅').as('a').outE('knows').inV().hasLabel('person').as('b').select('a').inE('relates').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"根据名字,id,价格分组,计算价格加142.30的值","g.V().hasLabel('a').group().by(project('name', 'id', 'price').by('name').by('id').by('price')).by(values('price').math('_ + 142.30'))"
 请问华中科技大学和重庆大学共同拥有的部门节点是什么？,"g.V().has('name', '华中科技大学').out('has').hasLabel('department').as('b').in('has').has('name', '重庆大学').select('b')"
 请问能否提供浙江大学各个部门及其教师的ID、年龄和薪资信息？,"g.V().has('university', 'name', '浙江大学').out('has').hasLabel('department').out('has').hasLabel('teacher').project('id', 'age', 'salary').by('id').by('age').by('salary')"
 请帮我查找32个与类型为'论坛'的地点有包含关系的帖子，并且这些帖子与包含它们的地点有'拥有'关系（即有标签）。,g.V().hasLabel('forum').as('a').outE('contain').as('e').inV().hasLabel('post').as('b').outE('has').as('e2').inV().hasLabel('tag').as('c').select('c').limit(32)
id减61的值,g.V().has('id').project('result').by(values('id').math('_ - 61'))
"查找person提交的软件,返回其源点的年龄除年龄的值,以及目标点的价值乘712的平均值","g.V().hasLabel('person').as('a').outE('commits').as('e').inV().hasLabel('software').as('b').project('expr1', 'expr2').by(select('a').values('age').math('_ / _')).by(select('b').values('value').math('_ * 712').mean())"
请帮我查找以拥有关系关联了学生陈若涵的部门,"g.V().hasLabel('student').has('name', '陈若涵').inE('has').outV().hasLabel('department')"
"返回id为97的person有关的person的friend, 再返回和person有关系的colleague","g.V().has('person', 'id', 97).as('a').bothE().otherV().hasLabel('person').as('b').both().hasLabel('person').as('c').select('b').bothE('friend').otherV().hasLabel('person').as('c').select('b').bothE('colleague').otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"查询标签为国家,名为澳大利亚的点,返回这些点的价值,名字,id","g.V().hasLabel('country').has('name', '澳大利亚').project('a.value', 'a.name', 'a.id').by(values('value')).by(values('name')).by(values('id'))"
"查询person韩月knows的person,被其他person relates的数量","g.V().has('person', 'name', '韩月').out('knows').in('relates').dedup().count()"
 找出与韩梅和韩若涵有关联的人，并返回他们的身高。,"g.V().has('person', 'name', '韩梅').outE().inV().hasLabel('person').as('b').inE().outV().has('person', 'name', '韩若涵').select('b').values('height')"
"找出前59个名字是南京大学或名字大于等于1,且名字是华中科技大学的大学","g.V().hasLabel('university').has('name', '华中科技大学').limit(59)"
查找所有与person孙建聪有关系的loan的weight,"g.V().has('person', 'name', '孙建聪').bothE().otherV().hasLabel('loan').values('weight')"
请帮我查找与id为149的贷款有关的人的朋友，再帮我查找与这个人有关系的朋友。,"g.V().has('loan', 'id', '149').as('a').bothE().otherV().hasLabel('person').as('b').bothE('friend').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
给出前121个满足条件name不等于其他或name等于科幻的tag,"g.V().hasLabel('tag').or(has('name', neq('其他')), has('name', '科幻')).limit(121)"
"找出名为赵思思和Bob的,label为person的点公共的伙伴节点的名单","g.V().hasLabel('person').has('name', '赵思思').outE('partner').inV().as('b').inE('partner').outV().hasLabel('person').has('name', 'Bob').select('b').values('name')"
"返回类型为读者,名为陈建聪的点,返回这些点的身高","g.V().hasLabel('reader').has('name', '陈建聪').values('height')"
提供与腾讯有申请关系的贷款，以及与腾讯相关联的贷款。,"g.V().hasLabel('company').has('name', '腾讯').as('a').outE('apply').inV().hasLabel('loan').as('b').select('a').inE('apply').outV().hasLabel('loan').as('c').select('a', 'b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出帖子以字数,id,语言分组的字数, 根据字数从小到大排序","g.V().hasLabel('post').group().by(project('wordCount', 'id', 'lang').by('wordCount').by('id').by('lang')).select(values).unfold().order().by(select('wordCount'), asc)"
"找出全部orders的relation,或其relation的relation",g.V().hasLabel('orders').out('relation').out('relation').dedup()
 查找与软件ID为55的公司的合作伙伴，再查找与该公司的合作伙伴有关系的公司。,"g.V().has('software', 'id', '55').as('a').bothE().otherV().hasLabel('company').as('b').bothE('partner').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"请帮我查找和person吴伟有关系的person,返回这些点的名字,性别","g.V().has('person', 'name', '吴伟').bothE().otherV().hasLabel('person').project('b.name', 'b.gender').by('name').by('gender')"
给出所有名为郑红的节点watch的comment或person,"g.V().has('name', '郑红').outE('watch').inV().hasLabel(within('comment', 'person')).dedup()"
id除id的值,g.V().hasLabel('a').project('result').by(math('_ / _').by(values('id')).by(values('id')))
"以413作为请求点id, 源点的id等于输入表id,找出department has的student,返回其源点的value减341的值,以及目标点的age的最大值对99取余对169取余的值","g.withSideEffect('p', [413]).V().hasLabel('department').as('a').where(__.values('id').is(__.select('p'))).outE('department_has_student').inV().hasLabel('student').as('b').select('a', 'b').by('value').by('age').project('expr1', 'expr2').by(__.select('a').math('_ - 341')).by(__.select('b').fold().project('max_age').by(__.max()).select('max_age').math('_ % 99 % 169'))"
"根据id,价格,名字分组,计算价值对价值取余的值","g.V().hasLabel('a').group().by(project('id', 'price', 'name').by('id').by('price').by('name')).by(values('value').math('_ / _').by(constant(1)).by('value'))"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));查找city北京belong的country,被其他city belong的数量","g.V().has('city', 'name', '北京').out('city_belong_country').in('city_belong_country').where(neq('北京')).count()"
帮我查询所有与国家日本有关系的国家的人数,"g.V().has('country', 'name', '日本').bothE().otherV().hasLabel('country').values('peopleNumber')"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回8个与韩月和郑梅都存在关系的person节点","g.V().has('name', '韩月').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '郑梅').select('b').limit(8)"
查找卖家的1跳以内的环,"g.V().hasLabel('seller').as('a').bothE().otherV().where(within('a')).select('a').by('id').project('a.id', 'b_id').by(select('a')).by(select('a').id())"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));给出与国家中国有country_contain_city关系的2跳以内的环","g.V().hasLabel('country').has('name', '中国').as('a').bothE('country_contain_city').otherV().bothE('country_contain_city').otherV().where(eq('a')).project('a.id', 'b_id').by(select('a').id()).by(id())"
"给定图的schema如下:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查找名为天涯论坛的,id在5到24之间且salary不为空的relation,返回这些relation的id,和边的srcId,f0,weight","g.V().has('forum', 'name', '天涯论坛').outE('relation').as('e').inV().has('id', between(5, 24)).has('salary', neq(null)).select('e').project('b.id', 'e.srcId', 'e.f0', 'e.weight').by(select('e').inV().values('id')).by(select('e').values('srcId')).by(select('e').values('f0')).by(select('e').values('weight'))"
请帮我找出陈建聪和李雪之间的46个关联。,"g.V().has('doctor', 'name', '陈建聪').as('a').outE('relation').as('e').inV().as('b').inE('relation').as('e2').outV().has('doctor', 'name', '李雪').as('c').select('b').limit(46)"
"帮我查询名为张宏的用户,以及与其有关的标签,并返回张宏的名字和这些标签的id","g.V().has('user', 'name', '张宏').as('a').bothE().otherV().hasLabel('tag').as('b').select('a', 'b').by('name').by('id')"
"输入请求点id的列表355,252,159,956, 源点的id等于输入表id,查询id为154的person关联的person,和以认识关系关联了这些person的其他person","g.inject([355, 252, 159, 956]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('id', '154').bothE().otherV().hasLabel('person').as('b').inE('knows').otherV().hasLabel('person').as('c').select('b', 'c')"
 返回所有与陈雪有创建关系且与功夫电影有关联的评论的ID、创建时间、单词计数和陈雪的ID以及功夫电影的类别。,"g.V().has('person', 'name', '陈雪').as('a').outE('creates').inV().hasLabel('comment').as('b').inE('belong').outV().has('film', 'name', '功夫').as('c').select('a', 'b', 'c').by('id').by('id').by('category').project('a.id', 'b.id', 'b.createTime', 'b.wordCount', 'c.category').by(select('a')).by(select('b')).by(select('b').values('createTime')).by(select('b').values('wordCount')).by(select('c'))"
 查询71号及以上的订单中，买家名字不是郑思思，并取消的订单名称以及包含的商品名称。,"g.V().hasLabel('buyer').has('id', gte(71)).has('name', neq('郑思思')).outE('cancel').inV().hasLabel('orders').as('b').outE('contain').inV().hasLabel('goods').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我找出学生选择的课程,返回其源点的薪资除4838的数量,以及目标点的课时减41乘23的平均值","g.V().hasLabel('student').as('a').outE('selects').as('e').inV().hasLabel('course').as('b').project('count_salary_div', 'avg_courseHour_calc').by(__.select('a').values('salary').math('/ 4838').count()).by(__.select('b').values('courseHour').math('- 41').math('* 23').mean())"
请帮我查找张思思认识的所有人，以及认识张思思的人，并将两者一起返回。,"g.V().has('name', '张思思').as('a').bothE('knows').otherV().hasLabel('person').as('b', 'c').select('a', 'b', 'c')"
查询与病人陈雪和张宏都存在接受关系的点,"g.V().has('patient', 'name', '陈雪').outE('accept').inV().as('b').inE('accept').outV().has('patient', 'name', '张宏').select('b')"
找出马伟认识并由其支付的人,"g.V().has('person', 'name', '马伟').out('knows').out('pay').hasLabel('person')"
"给出和person赵宏有关的电影,称为X,再给出和这个X有关联的其他标签,以及和X有关联的电影院","g.V().has('person', 'name', '赵宏').as('a').bothE().otherV().hasLabel('film').as('b').bothE().otherV().hasLabel('tag').as('c').select('b').bothE().otherV().hasLabel('cinema').as('d').select('a', 'b', 'c', 'd')"
"查找名为杜伟的读者,以及与其有关的书,并返回杜伟的id和这些书的创建时间","g.V().hasLabel('reader').has('name', '杜伟').as('a').bothE().otherV().hasLabel('book').as('b').select('a', 'b').by('id').by('createTime')"
"返回所有源点标签等于seller,目标点标签等于buyer,标签等于goods或seller的边","g.V().hasLabel('seller').outE('goods', 'seller').as('e').inV().hasLabel('buyer').select('e')"
"用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找label为orders_contain_goods,且满足条件targetId为空且f0不为空,f1不等于true的边",g.E().hasLabel('orders_contain_goods').where(__.values('targetId').is(eq(null))).where(__.values('f0').is(neq(null))).where(__.values('f1').is(neq(true)))
"给出李若涵的点喜欢的仓库,然后给出李若涵被拥有的仓库,一起返回","g.V().has('name', '李若涵').as('a').outE('likes').inV().hasLabel('repository').as('b').select('a').inE('has').outV().hasLabel('repository').as('c').select('a', 'b', 'c')"
"输入请求点id的列表634,599,467,982,340, 源点的id等于输入表id,给出被forum CSDN contain的person","g.inject([634, 599, 467, 982, 340]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).as('a').in('forum_contain_person').hasLabel('forum').has('name', 'CSDN').as('b').select('a', 'b')"
"请帮我查找id为14的部门拥有的教师, 并将教师有关的学生的性别的最小值赋值给教师的名字, 接着查询教师的名字小于14的教师教的课程","g.V().has('department', 'id', 14).out('has').hasLabel('teacher').as('b').project('name', 'd').by(__.coalesce(__.in().hasLabel('student').values('gender').min(), __.constant(null))).by(__.where(__.select('name').is(lt(14))).out('teach').hasLabel('course').fold()).select('name', 'd')"
"给出名为loan_43的loan,以及与其有关的company,并返回loan_43的id和这些company的scale","g.V().hasLabel('loan').has('name', 'loan_43').as('a').bothE().otherV().hasLabel('company').as('b').select('a', 'b').by('id').by('scale')"
找出person的3跳以内的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(3).where(loops().is(gt(0))).where(path().unfold().tail(1).is(eq(select('a')))).dedup().project('a.id', 'b_id').by(select('a').id()).by(path().unfold().filter(hasLabel('person')).tail(1).id())"
查询与person吴梅有家人关系的2度以内的环,"g.V().has('person', 'name', '吴梅').as('a').bothE('family').bothV().where(neq('a')).simplePath().by(T.id).times(2).emit().as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"找出全部id为101的公司关联的person,和以雇佣关系关联了这些person的其他公司","g.V().has('company', 'id', 101).bothE().otherV().hasLabel('person').as('b').inE('employee').otherV().hasLabel('company').as('c').select('b', 'c')"
请帮我查找与杭州相关的所有国家，并返回它们。,"g.V().has('city', 'name', '杭州').as('a').bothE().otherV().hasLabel('country').as('b').select('a').outE('belong').inV().hasLabel('country').as('c').select('a', 'b', 'c')"
查询与王雪和Tom都认识的人，返回他们的性别、年龄以及王雪的薪资和Tom的年龄。,"g.V().has('person', 'name', '王雪').as('a').outE('knows').inV().hasLabel('person').as('b').inE('knows').outV().has('person', 'name', 'Tom').as('c').select('a', 'b', 'c').by('salary').by(values('gender', 'age')).by('age')"
"查找和名为南京大学的university有relation关系,或有relation的relation关系的department","g.V().hasLabel('university').has('name', '南京大学').out('relation').hasLabel('department').union(identity(), out('relation').hasLabel('department')).dedup()"
请帮我找出与作家陈红有关系的书的id,"g.V().has('author', 'name', '陈红').bothE().otherV().hasLabel('book').values('id')"
"找出名为悬疑的tag,以及与其有关的user,并返回悬疑的name和这些user的salary","g.V().hasLabel('tag').has('name', '悬疑').bothE().otherV().hasLabel('user').project('a_name', 'b_salary').by(__.select('a').values('name')).by(__.select('b').values('salary')).as('b').select('a', 'b')"
 请问美国和日本这两个国家之间有什么共同点吗？,"g.V().has('country', 'name', '美国').outE('relation').inV().as('b').inE('relation').outV().has('country', 'name', '日本').select('b').limit(132)"
"查找全部读者以名字,年龄分组的id, 根据id降序排序","g.V().hasLabel('reader').group().by(values('name', 'age')).by(id().fold()).order(local).by(keys, desc).unfold().select(values).unfold().order().by(desc)"
"调用personalRank函数,以56作为输入,返回id, value","g.call('PERSONALRANK').with('input', 56).project('id', 'value').by(__.select('id')).by(__.select('value'))"
"请帮我找出卖家王强拥有的商品,以及拥有这些商品的卖家, 令商品的价值等于商品的id减73,令卖家的名字等于卖家的身高,令卖家(c)的性别等于卖家(a)的薪资, 返回卖家(a)的性别,商品(b)的销量,卖家(c)的性别","g.V().has('seller', 'name', '王强').as('a').outE('has').inV().hasLabel('goods').as('b').inE('has').outV().hasLabel('seller').as('c').select('a', 'b', 'c').by(project('gender', 'name').by('gender').by('height')).by(project('sellerNumber').by('sellerNumber')).by(project('gender').by(constant('a.salary'))).select(values).unfold().select('a_gender', 'b_sellerNumber', 'c_gender').by(select('a').select('gender')).by(select('b').select('sellerNumber')).by(select('c').select('gender'))"
 请帮我查找与徐轩和黄建聪有关联的公司的节点，并返回它们的ID和人数。,"g.V().has('person', 'name', '徐轩').outE().inV().hasLabel('company').as('b').inE().outV().has('person', 'name', '黄建聪').select('b').values('id', 'peopleNumber')"
"查询与person有关系的account节点,且account节点的isBlock不等于false,并返回这些account的id减id的值,以及account的id乘6的最小值","g.V().hasLabel('person').as('a').outE().as('e').inV().hasLabel('account').has('isBlock', neq(false)).as('b').project('expr1', 'expr2').by(__.select('b').values('id').math('_ - _')).by(__.select('b').values('id').math('_ * 6').min())"
 查询与纽约有包含关系、与深圳有属于关系的公司节点，返回这些公司的规格、ID、人数，以及纽约的面积和深圳的ID。,"g.V().has('city', 'name', '纽约').as('a').out('contain').hasLabel('company').as('b').in('belong').has('city', 'name', '深圳').as('c').select('a', 'b', 'c').by('area').by(values('scale', 'id', 'peopleNumber').fold()).by('id')"
"查询person的三角的环,边标签为朋友, 并返回这些点的id","g.V().hasLabel('person').as('a').out('friend').as('b').out('friend').as('c').where(__.in('friend').as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
帮我查询与person Tom和赵红都存在watch关系的点,"g.V().has('person', 'name', 'Tom').outE('watch').inV().as('b').inE('watch').outV().has('person', 'name', '赵红').select('b')"
"查找从合并请求PR-105出发,经过类型是属于的边,走3度或4度到达的仓库点","g.V().hasLabel('pullRequest').has('name', 'PR-105').repeat(bothE('belong').otherV().simplePath()).times(3).emit().repeat(bothE('belong').otherV().simplePath()).times(1).hasLabel('repository').dedup()"
找出与外科和急诊部都有关联的33名患者。,"g.V().has('name', '外科').outE().inV().hasLabel('patient').as('b').inE().outV().has('name', '急诊部').select('b').limit(33)"
查找与城市武汉和北京都存在属于关系的点,"g.V().has('city', 'name', '武汉').outE('belong').inV().as('b').inE('belong').outV().has('city', 'name', '北京').select('b')"
"给出软件Redis使用的软件,被其他person购买的数量","g.V().has('software', 'name', 'Redis').out('uses').in('buy').hasLabel('person').count()"
"请帮我查找名为Bilibili的贷款,以及与其有关的公司,并返回Bilibili的名字和这些公司的价值","g.V().hasLabel('loan').has('name', 'Bilibili').as('a').bothE().as('e').otherV().hasLabel('company').as('b').select('a', 'b').by('name').by('value')"
"请帮我找出编辑发布的书,返回其源点的年龄减4的最大值,以及目标点的id加70的值","g.V().hasLabel('publisher').as('a').outE('publish').inV().hasLabel('book').as('b').select('a', 'b').by(values('age')).by(values('id')).project('max_age_minus_4', 'id_plus_70').by(select('a').math('_ - 4').max()).by(select('b').math('_ + 70'))"
请帮我找出与喜剧有关联的电影,"g.V().hasLabel('tag').has('name', '喜剧').inE('has').outV().hasLabel('film')"
 返回韩国与武汉有关系的城市节点，并统计它们的人口和价值。,"g.V().hasLabel('city').has('name', '武汉').as('a').outE().as('e').inV().hasLabel('city').as('b').inE().as('e2').outV().hasLabel('country').has('name', '韩国').as('c').select('b').values('peopleNumber', 'value')"
"请帮我查找陈国强的点认识的person,然后请帮我查找陈国强被关联的person,一起返回","g.V().has('name', '陈国强').as('a').outE('knows').inV().hasLabel('person').as('b').select('a').inE('relates').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
 找出同时与person张强和person黄建聪有关联的人，并返回他们的ID。,"g.V().has('person', 'name', '张强').outE().inV().hasLabel('person').as('b').inE().outV().has('person', 'name', '黄建聪').select('b').id()"
帮我查询所有名为法学院的点has的teacher,"g.V().has('name', '法学院').out('has').hasLabel('teacher')"
查找评论Comment_372属于的电影节点拥有的标签,"g.V().hasLabel('comment').has('name', 'Comment_372').out('belong').hasLabel('film').out('has').hasLabel('tag')"
"给出label为belong,并且f0为空的边","g.E().hasLabel('belong').has('f0', eq(null))"
返回名为周宏的节点喜欢的person,"g.V().has('name', '周宏').outE('likes').inV().hasLabel('person')"
"给出源点标签等于person,边标签等于喜欢的边,返回这些边的源点id除19的最小值,和权重除140.39的值","g.V().hasLabel('person').outE('likes').project('min_srcId_div_19', 'weight_div_140.39').by(__.values('srcId').math('_ / 19').min()).by(__.values('weight').math('_ / 140.39'))"
"请帮我查找和person韩梅有关的person,称为X,再请帮我查找和这个X有关联的其他person,以及和X有关联的person","g.V().has('person', 'name', '韩梅').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"查找与person吴科有关,且与电影西虹市首富有关系的评论节点","g.V().hasLabel('person').has('name', '吴科').bothE('likes').bothV().hasLabel('comment').bothE('belong').bothV().hasLabel('film').has('name', '西虹市首富').select('comment')"
 电子科技大学的课程和其他部门有哪些？,"g.V().has('university', 'name', '电子科技大学').as('a').bothE().as('e').otherV().hasLabel('course').as('b').select('a').outE('has').as('e2').inV().hasLabel('department').as('c').select('a', 'b', 'c')"
返回全部名为Post_482的点拥有的标签,"g.V().has('name', 'Post_482').out('has').hasLabel('tag')"
"返回名为杜梅的,创建时间是2017年08月30日的伙伴,返回这些伙伴的名字,和边的时间戳","g.V().has('name', '杜梅').outE('partner').as('e').inV().has('createTime', '2017-08-30').as('b').select('b', 'e').by('name').by('timeStamp')"
请帮我查找41个与滴滴和美团都存在关系的person或company节点,"g.V().has('name', '滴滴').outE().inV().or(hasLabel('person'), hasLabel('company')).as('b').inE().outV().has('name', '美团').select('b').limit(41)"
"请帮我找出所有合并请求的朋友,或其朋友的朋友","g.V().hasLabel('pullRequest').as('a').outE('friend').inV().range(1, 2).as('b').select('b')"
找出所有从person节点出发，到评论节点结束，并且标签为喜欢的边。,g.V().hasLabel('person').outE('likes').where(inV().hasLabel('comment'))
"输入请求点id的列表601,76, 以属性id作为相等条件,给出源点类型为贷款,目标点类型为账号,类型为loan_deposit_account的边","g.inject([601, 76]).unfold().as('p').V().has('loan', 'id', __.as('p')).outE('loan_deposit_account').as('e').inV().hasLabel('account').select('e')"
"查找label为仓库,名为Kafka的点,返回这些点的星数","g.V().hasLabel('repository').has('name', 'Kafka').values('stars')"
返回所有和person李思琪之间有恋人关系的person,"g.V().hasLabel('person').has('name', '李思琪').outE('lover').inV().hasLabel('person')"
"查询loan的三角的环,边类型为deposit, 并返回这些点的id","g.V().hasLabel('loan').as('a').outE('deposit').inV().as('b').outE('deposit').inV().as('c').where(__.outE('deposit').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
请帮我找出标签等于person的点,g.V().hasLabel('person')
"根据身高分组,计算id除18的值",g.V().hasLabel('a').group().by('height').by(values('id').math('/ 18').fold())
"返回买家创造的订单,返回其源点的id减55的值,以及目标点的id的数量乘57的数量","g.V().hasLabel('buyer').as('a').outE('creates').as('e').inV().hasLabel('orders').as('b').select('a', 'b').by('id').project('expr1', 'expr2').by(select('a').math('_ - 55')).by(select('b').count().math('_ * 57'))"
"请帮我找出源点标签等于person,目标点标签等于comment,标签等于tag或comment或person的边","g.V().hasLabel('person').outE('tag', 'comment', 'person').as('e').inV().hasLabel('comment').select('e')"
"查找类型为用户的所有点,并根据名字升序排列","g.V().hasLabel('user').order().by('name', asc)"
"返回与名为JavaGuid和XXRepo的点共同拥有的,label为事项的节点","g.V().has('name', 'JavaGuid').out('has').hasLabel('issue').as('b').in('has').has('name', 'XXRepo').select('b')"
请帮我找出与我有同事关系的人，他们又与其他人有同事关系，并且这些人之间又有朋友关系。,g.V().hasLabel('person').as('a').outE('colleague').as('e').inV().hasLabel('person').as('b').outE('colleague').as('e2').inV().hasLabel('person').as('c').outE('friend').as('e3').inV().hasLabel('person').as('d').select('d')
查找被编辑王雪发布的书,"g.V().hasLabel('publisher').has('name', '王雪').as('b').outE('publish').as('e').inV().hasLabel('book').as('a').select('a', 'b')"
查找全部标签等于大学或国家或城市的点,"g.V().hasLabel(within('university', 'country', 'city'))"
"使用列为lastLoginTime,isBlock,createTime, 数据为(2009-10-19,false,2015-11-15),(2024-06-30,false,1998-01-19)的子查询作为输入表, 以属性createTime作为相等条件,返回company的3度以内的环","g.withSideEffect('p', [['lastLoginTime':'2009-10-19', 'isBlock':false, 'createTime':'2015-11-15'], ['lastLoginTime':'2024-06-30', 'isBlock':false, 'createTime':'1998-01-19']]).V().hasLabel('company').as('a').where(__.select('a').values('createTime').is(within(__.select('p').unfold().select('createTime')))).repeat(__.out().as('b').where(neq('a')).simplePath()).times(3).where(__.out().as('c').where(eq('a'))).select('a', 'b').by('id').by('id')"
"请帮我查找规格为large的公司创造的软件的名称,以及这些软件 使用的软件的名称","g.V().hasLabel('company').has('scale', 'large').outE('creates').inV().hasLabel('software').as('b').outE('uses').inV().hasLabel('software').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 找出Post_392拥有的标签，以及喜欢Post_392的用户，然后一起返回。,"g.V().has('name', 'Post_392').as('a').out('has').hasLabel('tag').as('b').select('a').in('likes').hasLabel('user').as('c').select('a', 'b', 'c')"
 张轩和何建聪都写过文章。,"g.V().has('author', 'name', '张轩').outE('write').inV().as('b').inE('write').outV().has('author', 'name', '何建聪').select('b')"
 找出名为李强的人，并返回他们的薪资和年龄。,"g.V().has('person', 'name', '李强').project('salary', 'age').by('salary').by('age')"
请帮我找出与person马若涵有支付关系的2度的环,"g.V().has('person', 'name', '马若涵').as('a').outE('pay').inV().as('b').where(__.as('b').out().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
找出大学南京大学拥有的部门节点拥有的学生,"g.V().hasLabel('university').has('name', '南京大学').out('has').hasLabel('department').out('has').hasLabel('student')"
"查找名为美团的点雇佣的person,并对这些person的id进行求和","g.V().has('name', '美团').outE('employee').inV().hasLabel('person').values('id').sum()"
帮我查询被仓库JavaGuid拥有的用户,"g.V().hasLabel('repository').has('name', 'JavaGuid').inE('has').outV().as('b').outE('has').inV().hasLabel('user').as('a').select('a', 'b')"
"找出36个名为中国军事论坛的点contain的label为user的节点,且其age大于等于77","g.V().has('name', '中国军事论坛').out('contain').hasLabel('user').has('age', gte(77)).limit(36)"
 找出部门大小小于88或介于61到90之间的学生，以及他们选择的课程名称。,"g.V().hasLabel('department').has('size', lt(88)).or(__.has('size', between(61, 90))).outE('has').inV().hasLabel('student').as('b').outE('selects').inV().hasLabel('course').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"查询和city武汉有contain关系的company,再查询以belong关系关联了武汉的country","g.V().has('city', 'name', '武汉').as('a').outE('contain').inV().hasLabel('company').as('b').select('a').inE('belong').outV().hasLabel('country').as('c').select('a', 'b', 'c')"
 找出67个人中，周红和李梅共同的友人。,"g.V().has('person', 'name', '周红').outE('friend').inV().as('b').inE('friend').outV().has('person', 'name', '李梅').select('b').limit(67)"
"返回与医生有关系的部门节点,且部门节点的地址不等于C栋,并返回这些部门的id减56加783减权重的值,以及部门的权重乘699的值","g.V().hasLabel('doctor').as('a').outE().as('e').inV().hasLabel('department').has('address', neq('C栋')).as('b').project('expr1', 'expr2').by(__.select('b').values('id').math('_ - 56 + 783 - _').by(values('weight'))).by(__.select('b').values('weight').math('_ * 699'))"
"查询名为ISSUE-422的事项,以及与其有关的仓库,并返回ISSUE-422的状态和这些仓库的权重","g.V().hasLabel('issue').has('name', 'ISSUE-422').bothE().otherV().hasLabel('repository').project('a.status', 'b.weight').by(select('a').values('status')).by(values('weight'))"
 找出CSDN论坛中包含person和知网论坛中包含post的关联，返回两者。,"g.V().has('forum', 'name', 'CSDN').as('a').out('contain').hasLabel('person').as('b').select('a').V().has('forum', 'name', '知网').as('c').out('contain').hasLabel('post').as('d').select('a', 'b', 'c', 'd')"
帮我查询与公司阿里有属于关系的3跳以内的环,"g.V().has('company', 'name', '阿里').as('a').repeat(bothE('belong').otherV().simplePath()).times(2).where(loops().is(gt(0))).where(eq('a')).path().by('id').by('id')"
请帮我找出全部和person陈若涵之间有父母关系的person,"g.V().hasLabel('person').has('name', '陈若涵').outE('parent').inV().hasLabel('person')"
"查找全部帖子以创建时间,id,语言分组的字数, 根据字数从大到小排序","g.V().hasLabel('post').group().by(values('createTime', 'id', 'lang')).by(values('wordCount').fold()).order(local).by(values, desc)"
"找出id为137的公司申请的贷款, 并将贷款有关的贷款的id的数量赋值给贷款(b)的权重, 接着查询贷款(b)的权重小于137的贷款存款的账号","g.V().has('company', 'id', 137).out('apply').as('b').sideEffect(__.project('weight').by(__.in().hasLabel('loan').count()).select('weight').as('b_weight')).select('b').where(__.select('b_weight').is(lt(137))).out('deposit').as('d').select('b_weight', 'd')"
查询全部名为赵思思的点申请的贷款,"g.V().has('name', '赵思思').outE('apply').inV().hasLabel('loan')"
"查找源点类型是订单,目标点类型是商品,类型是订单的边",g.V().hasLabel('orders').outE('orders').as('e').inV().hasLabel('goods').select('e')
找到与Comment_419评论和古代标签相关的电影节点,"g.V().hasLabel('comment').has('name', 'Comment_419').bothE('belong').otherV().hasLabel('film').bothE('has').otherV().hasLabel('tag').has('name', '古代').select('b')"
给出与forum CSDN有contain关系的3度以内的环,"g.V().hasLabel('forum').has('name', 'CSDN').as('a').repeat(bothE('contain').otherV().simplePath()).times(2).where(cyclicPath()).path().unfold().hasLabel('forum').has('name', 'CSDN').as('a').select('a').by('id').as('a_id').select(all, 'a').tail(local, 1).as('b').select('b').by('id').as('b_id').select('a_id', 'b_id')"
找出所有与名为杜建国的用户有伙伴关系，或者有伙伴伙伴关系的帖子。,"g.V().hasLabel('user').has('name', '杜建国').bothE('partner').otherV().hasLabel('post').dedup()"
帮我查询person孙宏belong的company节点creates的software,"g.V().has('person', 'name', '孙宏').out('belong').out('creates')"
找出id为69的点的名字,"g.V().has('id', 69).values('name')"
"请帮我查找前77个名字等于马宏,年龄为43且id大于等于16的person","g.V().hasLabel('person').has('name', '马宏').has('age', 43).has('id', gte(16)).limit(77)"
"给出10个名为马建聪的点likes的标签等于repository的节点,且其lang不等于go或weight为空","g.V().has('name', '马建聪').outE('likes').inV().hasLabel('repository').where(or(has('lang', neq('go')), hasNot('weight'))).limit(10)"
帮我查询公司的2跳的环,"g.V().hasLabel('company').as('a').repeat(both().simplePath()).times(2).where(cyclicPath()).select('a').by('id').project('a.id', 'b_id').by(identity()).by(select('a').both().both().where(eq('a')).dedup().id().fold())"
"找出salary小于等于4或id是57的person likes的comment的名称,以及这些comment belong的film的名称","g.V().hasLabel('person').has('salary', lte(4)).or().has('id', 57).outE('likes').inV().hasLabel('comment').as('b').outE('belong').inV().hasLabel('film').as('c').select('b', 'c').by('name').by('name')"
"帮我查询被买家咨询数量大于41的卖家,记为relationCount,再查询这些卖家咨询的卖家","g.V().hasLabel('seller').as('a').project('a', 'relationCount').by(identity()).by(outE('consult').inV().hasLabel('buyer').dedup().count()).select('a', 'relationCount').as('a_with_count').select('a_with_count').where(select('relationCount').is(gt(41))).select('a').outE('consult').hasLabel('consult').inV().hasLabel('seller').dedup()"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出全部id为8的person关联的person,和以pay关系关联了这些person的其他person","g.V().has('person', 'id', 8).bothE().otherV().hasLabel('person').as('b').inE('person_pay_person').otherV().hasLabel('person').as('c').select('b', 'c')"
 男性身高小于175的公司和它们开发的应用程序。,"g.V().hasLabel('person').has('height', lt(175)).has('gender', 'male').outE('belong').inV().hasLabel('company').as('b').outE('creates').inV().hasLabel('software').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"帮我查询97个公司滴滴和谷歌,共同的伙伴","g.V().has('company', 'name', '滴滴').outE('partner').inV().as('b').inE('partner').outV().has('company', 'name', '谷歌').select('b').limit(97)"
"帮我查询与名为Order_222和Order_403的点共同包含的,类型是商品的节点","g.V().has('name', 'Order_222').outE('contain').inV().hasLabel('goods').as('b').inE('contain').outV().has('name', 'Order_403').select('b')"
"查询名为Tom的person,以及与其有关的person,并返回Tom的id和这些person的薪资","g.V().hasLabel('person').has('name', 'Tom').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('id').by('salary')"
列出所有与城市相关的公司，以及这些城市与其他公司的归属关系。,"g.V().hasLabel('company').has('id', '16').bothE().otherV().hasLabel('city').as('b').inE('belong').outV().hasLabel('company').as('c').select('b', 'c')"
"输入请求点id的列表521,113,7, 源点的id等于输入表id,计算所有course的courseHour减32的值","g.inject([521, 113, 7]).unfold().as('p').V().hasLabel('course').has('id', __.select('p')).values('courseHour').math('_ - 32')"
返回买家何梅查看的商品，其他卖家拥有的数量。,"g.V().has('buyer', 'name', '何梅').out('look').in('has').hasLabel('seller').count()"
"请帮我找出person的三角的环,边标签为提交, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('commits').inV().as('b').outE('commits').inV().as('c').where(__.outE('commits').inV().as('a')).select('a', 'b', 'c').by(id()).by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
"查询id为157的person有关的person的相关者, 再查询和person有关系的朋友","g.V().has('person', 'id', 157).as('a').bothE().otherV().hasLabel('person').as('b').bothE().hasLabel('relation').otherV().as('c').select('b').bothE().hasLabel('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
给出前42个满足条件名字不是法学院或大小为空或大小大于75的部门,"g.V().hasLabel('department').or(has('name', neq('法学院')), hasNot('size'), has('size', gt(75))).limit(42)"
"给出源点类型是电影院,边类型是上映,并且满足条件f1小于等于13,目标点id为47,f1不是true的边","g.V().hasLabel('cinema').outE('releases').has('f1', lte(13)).has('targetId', 47).has('f1', neq(true)).elementMap()"
"帮我查询全部id为185的account关联的account,和以transfer关系关联了这些account的其他account","g.V().has('account', 'id', 185).bothE().otherV().hasLabel('account').as('b').inE('transfer').otherV().hasLabel('account').as('c').select('b', 'c')"
 查找张建国医生开具的处方 Prescription_204 对应的患者节点。,"g.V().hasLabel('doctor').has('name', '张建国').as('a').outE('diagnose').inV().hasLabel('patient').as('b').inE('accept').outV().hasLabel('prescription').has('name', 'Prescription_204').as('c').select('b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找id为14的tag有关的forum的relation, 再请帮我查找和forum有关系的friend","g.V().has('tag', 'id', 14).as('a').bothE().otherV().hasLabel('forum').as('b').bothE('relation').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
找出既与耳鼻喉科又有外科关联的节点。,"g.V().has('department', 'name', '耳鼻喉科').outE('has').inV().where(__.inE('has').outV().has('department', 'name', '外科')).dedup()"
按照性别从小到大，为每个ID分组的人。,"g.V().hasLabel('person').group().by('id').by(values('gender').fold()).order(local).by(values, asc)"
"请帮我找出所有和person点有喜欢关系的评论节点,且边满足条件f0不为空,目标评论节点满足条件id小于等于29","g.V().hasLabel('person').as('a').outE('likes').has('f0', neq(null)).as('e').inV().hasLabel('comment').has('id', lte(29)).as('b').select('b')"
"查找教师的朋友,或其朋友的朋友","g.V().hasLabel('teacher').out('friend').range(1, 2).dedup()"
返回与大学中国科技大学和南京大学都存在属于关系的点,"g.V().has('university', 'name', '中国科技大学').outE('belong').inV().as('b').inE('belong').outV().has('university', 'name', '南京大学').select('b')"
请帮我找出那些apply了loan但salary为空或者name为孙红的person，以及他们对应的loan和loan deposit的account名称,"g.V().hasLabel('person').or(hasNot('salary'), has('name', '孙红')).outE('apply').inV().hasLabel('loan').as('b').outE('deposit').inV().hasLabel('account').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"找出全部源点gender等于male或gender等于male,目标点age大于14,name是马思思,或gender等于famale,且标签为diagnose的边","g.E().hasLabel('diagnose').where(and(__.outV().has('gender', within('male', 'male')), __.inV().where(or(and(has('age', gt(14)), has('name', '马思思')), has('gender', 'famale')))))"
"查询所有和名为周建国的seller有friend关系,或有friend的friend关系的goods","g.V().has('seller', 'name', '周建国').bothE('friend').otherV().repeat(bothE('friend').otherV().simplePath()).times(1).hasLabel('goods').dedup()"
"请帮我找出认识公司腾讯雇佣的person,的person","g.V().hasLabel('company').has('name', '腾讯').outE('employee').inV().hasLabel('person').as('b').inE('knows').outV().hasLabel('person').as('c').select('b', 'c')"
"返回所有id为149的tag关联的post,和以publish关系关联了这些post的其他user","g.V().has('tag', 'id', 149).bothE().otherV().hasLabel('post').as('b').inE('publish').otherV().hasLabel('user').as('c').select('b', 'c')"
"帮我查询write author周强write的book,的author","g.V().has('author', 'name', '周强').outE('write').inV().hasLabel('book').as('b').inE('write').outV().hasLabel('author').as('c').select('b', 'c')"
"返回所有源点标签等于person,目标点标签等于person,标签等于person的边",g.V().hasLabel('person').outE('person').where(inV().hasLabel('person'))
"给出76个和label为person的点有family关系的person,以及和这些person有lover关系的person",g.V().hasLabel('person').as('a').outE('family').inV().hasLabel('person').as('b').outE('lover').inV().hasLabel('person').as('c').select('c').limit(76)
"给出56个用户韩红和杜建国,共同的伙伴","g.V().has('user', 'name', '韩红').outE('partner').inV().as('b').inE('partner').outV().has('user', 'name', '杜建国').select('b').limit(56)"
"返回和教师赵国强有关的部门,再返回和赵国强教的其他课程,返回它们","g.V().has('teacher', 'name', '赵国强').as('a').bothE().otherV().hasLabel('department').as('b').select('a').bothE('teach').otherV().hasLabel('course').as('c').select('a', 'b', 'c')"
"请帮我找出全部源点标签为person,目标点标签为person,标签为person的边","g.E().hasLabel('person').where(and(outV().hasLabel('person'), inV().hasLabel('person')))"
"找出类型为uses,并且targetId小于191,weight等于152.32,targetId不等于193的边","g.E().hasLabel('uses').has('targetId', lt(191)).has('weight', 152.32).has('targetId', neq(193))"
"查询60个和label为大学的点有拥有关系的部门,以及和这些部门有拥有关系的教师",g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('teacher').limit(60)
"给出和名为何强的person有伙伴关系,或有伙伴的伙伴关系的公司","g.V().hasLabel('person').has('name', '何强').bothE('partner').bothV().hasLabel('company').dedup()"
"请帮我查找回答卖家张强回答的买家,的卖家","g.V().hasLabel('seller').has('name', '张强').as('a').outE('ask').as('e').inV().hasLabel('buyer').as('b').inE('ask').as('e2').outV().hasLabel('seller').as('c').select('b', 'c')"
 请帮我找出和读者赵宏有关的书籍，以及和赵宏喜欢的其他书籍相关的书籍。,"g.V().hasLabel('reader').has('name', '赵宏').as('a').bothE().otherV().hasLabel('book').as('b').select('a').outE('likes').inV().hasLabel('book').as('c').select('a', 'b', 'c')"
找出所有读者的朋友，或者他们朋友的朋友,g.V().hasLabel('reader').outE('friend').inV().hasLabel('reader').outE('friend').inV().hasLabel('reader').dedup()
"以793,703,770作为请求点id, 源点的id等于输入表id,查找和forum中国诗词论坛有forum_contain_post关系的post,再查找以forum_contain_person关系关联了中国诗词论坛的person","g.withSideEffect('p', [793, 703, 770]).V().hasLabel('forum').where(and(__.values('id').is(within('p')), __.has('name', '中国诗词论坛'))).as('a').bothE('forum_contain_post').otherV().hasLabel('post').as('b').select('a').bothE('forum_contain_person').otherV().hasLabel('person').as('c').select('a', 'b', 'c')"
请帮我找出与publisher徐梅和何国强都存在publish关系的点,"g.V().has('publisher', 'name', '徐梅').outE('publish').inV().as('b').inE('publish').outV().has('publisher', 'name', '何国强').select('b')"
请帮我找出以还款关系关联了贷款loan_57的账号,"g.V().hasLabel('loan').has('name', 'loan_57').inE('repay').outV().hasLabel('account')"
"调用triangleCount函数,以27, 'YN', 'gw'作为输入,返回运算结果","g.call(""triangleCount"").with(""input1"", 27).with(""input2"", ""YN"").with(""input3"", ""gw"").select(""number"")"
"找出作家黄雪的标签等于伙伴的边,并根据权重升序排列,返回166个","g.V().has('author', 'name', '黄雪').outE('partner').order().by('weight', asc).limit(166).inV()"
"找出person王宏likes的person,以及likes这些person的person, 令person的salary等于person的gender的最大值,令person的id等于person的gender的平均值,令person(b)的height等于person(a)的gender, 返回person(a)的age,person(b)的name,person(c)的salary","g.V().has('person', 'name', '王宏').as('a').outE('likes').inV().hasLabel('person').as('b').inE('likes').outV().hasLabel('person').as('c').select('a', 'b', 'c').by(values('age')).by(values('name')).by(project('salary').by(select('c').values('gender').max())).project('a_age', 'b_name', 'c_salary').by(select('a')).by(select('b')).by(select('c').select('salary'))"
"请帮我查找学生选择的课程,返回其源点的年龄对2取余的平均值,以及目标点的学分乘1的值","g.V().hasLabel('student').as('a').outE('selects').as('e').inV().hasLabel('course').as('b').select('a', 'b').by(values('age').fold().math('_ / 2').math('_ % 1')).by(values('credit').math('_ * 1')).select(values).unfold().group().by(select('b')).by(select('a').mean()).select(values).unfold().project('avg_age_mod_2', 'credit_times_1').by(select(keys).select('a')).by(select(values).select('b'))"
找出153个与阿里和微软都存在关系的大学或国家节点,"g.V().has('name', '阿里').outE().inV().or(hasLabel('university'), hasLabel('country')).as('b').inE().outV().has('name', '微软').select('b').limit(153)"
"查询源点标签等于doctor,边标签等于belong的边,返回这些边的f0的最小值除749的和,和weight对194.92取余的值","g.V().hasLabel('doctor').outE('belong').as('e').project('sum_min_f0_div_749', 'weight_mod_194_92').by(__.select('e').values('f0').min().is(neq(null)).math('_ / 749').sum()).by(__.select('e').values('weight').math('_ % 194.92'))"
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询名为腾讯的company,以及与其有关的university,并返回腾讯的peopleNumber和这些university的id","g.V().hasLabel('company').has('name', '腾讯').as('a').bothE().otherV().hasLabel('university').as('b').select('a', 'b').by('peopleNumber').by('id')"
找出前30个id的数量小于8721的作家,g.V().hasLabel('author').groupCount().by('id').unfold().filter(select(values).is(lt(8721))).select(keys).limit(30)
"以(262,'微软','large'),(260,'微软','small')作为请求表数据,属性分别为value,name,scale, 源点的name等于输入表name,查找满足条件gender不是male的节点","g.inject([['value':262,'name':'微软','scale':'large'],['value':260,'name':'微软','scale':'small']]).as('p').unfold().as('p_row').select('p_row').by().V().has('name', __.select('p_row').select('name')).has('gender', neq('male')).as('a').select('a')"
"给出17个和类型为账号的点有还款关系的贷款,且和这些贷款有存款关系的账号",g.V().hasLabel('account').as('a').outE('repay').as('e').inV().hasLabel('loan').as('b').inE('deposit').as('e2').outV().hasLabel('account').as('c').select('c').limit(17)
"输入表的列为name,age,gender, 数据为('孙红',33,'famale'), 源点的name等于输入表name,找出person何科的所有标签等于family的边,并根据targetId升序排列,返回19个","g.withSideEffect('p', [['name':'孙红','age':33,'gender':'famale']]).V().hasLabel('person').has('name', '何科').outE('person_family_person').order().by('targetId', asc).limit(19).inV()"
"请帮我找出所有名为马思琪的点的,身高在155到184之间,身高大于157的家人,返回这些家人的年龄,和边的目标点id,权重,f0","g.V().has('name', '马思琪').outE('family').as('e').inV().has('height', between(155, 184)).has('height', gt(157)).project('b.age', 'e.targetId', 'e.weight', 'e.f0').by(values('age')).by(select('e').values('targetId')).by(select('e').values('weight')).by(select('e').values('f0'))"
 找北京大学朋友的朋友,"g.V().has('university', 'name', '北京大学').out('friend').out('friend').out('partner')"
"返回141个名为谷歌的点雇佣的类型为person的节点,且节点年龄小于等于7或名字等于马国强","g.V().has('name', '谷歌').outE('employee').inV().hasLabel('person').has('age', lte(7)).or().has('name', '马国强').limit(141)"
"给出从课程计算机体系结构出发,经过类型为属于的边,走3度到达的部门点","g.V().has('course', 'name', '计算机体系结构').repeat(outE('belong').inV()).times(3).hasLabel('department')"
 请帮我找出黄建聪和赵建国这两个名为买家的点公共伙伴节点的名单。,"g.V().has('buyer', 'name', '黄建聪').as('a').outE('partner').inV().as('b').inE('partner').outV().has('buyer', 'name', '赵建国').as('c').select('b').values('name')"
返回赵强和张若涵共同申请的贷款节点,"g.V().has('name', '赵强').outE('apply').inV().hasLabel('loan').as('b').inE('apply').outV().has('name', '张若涵').select('b')"
" 返回论坛中国军事论坛中包含person's,以及和用户何建聪有like关系的帖子。","g.V().hasLabel('forum').has('name', '中国军事论坛').as('a').outE('contain').inV().hasLabel('person').as('b').select('a').V().hasLabel('user').has('name', '何建聪').as('c').outE('likes').inV().hasLabel('post').as('d').select('a', 'b', 'c', 'd')"
查询person杜强观看的电影节点拥有的标签,"g.V().hasLabel('person').has('name', '杜强').out('watch').hasLabel('film').out('has').hasLabel('tag')"
"帮我查询类型为用户,名为李建聪的点,返回这些点的薪资,名字,id","g.V().hasLabel('user').has('name', '李建聪').project('salary', 'name', 'id').by('salary').by('name').by('id')"
 请帮我找出8个与标签为'人'的物品有'喜欢'关系的评论，并且这些评论与属于它们的影片相关。,g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('comment').as('b').outE('belong').as('e2').inV().hasLabel('film').as('c').select('c').limit(8)
"返回标签为喜欢,且目标点id是157或f1为false的边","g.E().hasLabel('likes').or(has('targetId', 157), has('f1', false))"
查询与film复仇者联盟和建国大业都存在has关系的点,"g.V().hasLabel('film').has('name', '复仇者联盟').outE('has').inV().as('b').inE('has').outV().hasLabel('film').has('name', '建国大业').select('b')"
按性别和ID对person进行分组，然后按照ID从大到小排序。,"g.V().hasLabel('person').group().by(values('gender', 'id')).order(local).by(keys, desc)"
"查询所有和department点有has关系的teacher节点,且边满足条件srcId大于等于198.46,目标teacher节点满足条件id是27","g.V().hasLabel('department').outE('has').has('srcId', gte(198.46)).inV().hasLabel('teacher').has('id', 27)"
"查找所有id为79的作家关联的书,和以发布关系关联了这些书的其他编辑","g.V().has('author', 'id', 79).bothE().otherV().hasLabel('book').as('b').inE('publish').otherV().hasLabel('publisher').as('c').select('b', 'c')"
"请帮我找出名字是杜国强,年龄在43到65之间,或年龄为空的节点","g.V().has('name', '杜国强').or(has('age', between(43, 65)), hasNot('age')).elementMap()"
查询所有与person孙雪有关系的person的name,"g.V().hasLabel('person').has('name', '孙雪').bothE().otherV().hasLabel('person').values('name')"
请帮我找出与'university'标签相关的部门，以及这些部门与学生之间的'has'关系，以及这些学生与课程之间的'selects'关系。,g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('student').out('selects').hasLabel('course')
"请帮我查找处方的三角的环,边类型是包含, 并返回这些点的id","g.V().hasLabel('prescription').as('a').outE('contain').inV().as('b').outE('contain').inV().as('c').where(outE('contain').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"找出和大学浙江大学有关的教师,再找出和浙江大学拥有的其他部门,返回它们","g.V().has('university', 'name', '浙江大学').as('a').bothE().otherV().hasLabel('teacher').as('b').select('a').outE('has').inV().hasLabel('department').as('c').select('a', 'b', 'c')"
"查询label为同事,并且满足条件源点id大于等于27,目标点id的最大值等于2,或f0大于等于521的边","g.E().hasLabel('colleague').or(and(has('srcId', gte(27)), values('targetId').max().is(2)), has('f0', gte(521)))"
找出与用户'李科'有发表关系的帖子，以及与论坛'知乎'有关联的人，并返回它们。,"g.V().has('user', 'name', '李科').as('a').out('publish').as('b').select('a').V().has('forum', 'name', '知乎').as('c').out('contain').as('d').select('a', 'b', 'c', 'd')"
"用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出前93个label为forum_contain_post的边",g.E().hasLabel('forum_contain_post').limit(93)
找出与王强老师有关联的部门,"g.V().hasLabel('teacher').has('name', '王强').inE('has').outV().hasLabel('department')"
"使用列为value,lastLoginTime,createTime, 数据为(544,2003-12-08,2001-05-09)的子查询作为输入表, 源点的lastLoginTime等于输入表lastLoginTime,请帮我找出和类型是公司的点有company_apply_loan关系的贷款,以及和这些贷款有loan_deposit_account关系的账号,以及和这些账号有account_repay_loan关系的贷款","g.withSideEffect('p', [['value':544, 'lastLoginTime':'2003-12-08', 'createTime':'2001-05-09']]).V().hasLabel('company').has('lastLoginTime', __.select('p').unfold().select('lastLoginTime')).outE('company_apply_loan').inV().hasLabel('loan').as('b').outE('loan_deposit_account').inV().hasLabel('account').as('c').outE('account_repay_loan').inV().hasLabel('loan').as('d').select('d')"
查找全部与贷款loan_90有关系的公司的价值,"g.V().hasLabel('loan').has('name', 'loan_90').bothE().otherV().hasLabel('company').values('value')"
请帮我找出和person孙伟之间有观看关系的电影,"g.V().hasLabel('person').has('name', '孙伟').outE('watch').inV().hasLabel('film')"
帮我查询徐建国的同事朋友的恋人,"g.V().has('person', 'name', '徐建国').outE('colleague').inV().outE('friend').inV().outE('lover').inV()"
"请帮我查找类型为标签,名为历史的点,返回这些点的名字","g.V().hasLabel('tag').has('name', '历史').values('name')"
"查找142个名为Sam的点knows的类型为person的节点,且节点gender为male或salary大于等于1680","g.V().has('name', 'Sam').outE('knows').inV().hasLabel('person').or(has('gender', 'male'), has('salary', gte(1680))).limit(142)"
查找35个与韩月和徐轩都存在关系的film或person或cinema节点,"g.V().has('name', '韩月').as('a').outE().as('e').inV().has(label, within('film', 'person', 'cinema')).as('b').inE().as('e2').outV().has('name', '徐轩').as('c').select('b').limit(35)"
"输入请求点id的列表732,14, 以属性id作为相等条件,请帮我找出所有id为12的药品关联的病人,和以诊断关系关联了这些病人的其他医生","g.withSideEffect('p', [732, 14]).V().hasLabel('medicine').has('id', within('p')).has('id', '12').bothE().otherV().hasLabel('patient').as('b').inE('doctor_diagnose_patient').otherV().hasLabel('doctor').as('c').select('b', 'c')"
"输入请求点id的列表981, 源点的id等于输入表id,查找名为经管学院的部门,以及与其有关的课程,并返回经管学院的名字和这些课程的名字","g.withSideEffect('p', [[981]]).V().hasLabel('department').as('a').where(and(__.values('id').is(eq(__.select('p').unfold())), __.values('name').is(eq('经管学院')))).bothE().as('e').otherV().hasLabel('course').as('b').select('a', 'b').by('name').by('name')"
请帮我找出前135个人数不等于618的公司,"g.V().hasLabel('company').has('peopleNumber', neq(618)).limit(135)"
"查找名为孙国强的,身高不为空或名字为陈若涵的同事,返回这些同事的名字,和边的权重,f0,源点id","g.V().has('name', '孙国强').outE('colleague').as('e').inV().as('b').where(or(has('height', neq(null)), has('name', '陈若涵'))).select('b', 'e').by('name').by(project('weight', 'f0', 'srcId').by('weight').by('f0').by('srcId'))"
"调用KHOP函数,以16, 'Po'作为输入,返回运算结果","g.call('KHOP').with('input1', 16).with('input2', 'Po').select('id', 'kValue')"
找出person韩宏和张月都喜欢的点,"g.V().hasLabel('person').has('name', '韩宏').outE('likes').inV().as('b').inE('likes').outV().hasLabel('person').has('name', '张月').select('b')"
"返回和类型为公司的点有属于关系的城市,并且和这些城市有包含关系的公司,并且和这些公司有合作关系的大学",g.V().hasLabel('company').as('a').out('belong').hasLabel('city').as('b').in('contain').hasLabel('company').as('c').out('cooperate').hasLabel('university').as('d').select('d')
请帮我找出与person李思琪有关系的person的age,"g.V().has('person', 'name', '李思琪').bothE().otherV().hasLabel('person').values('age')"
请帮我找出全部名为腾讯的点属于的城市,"g.V().has('name', '腾讯').out('belong').hasLabel('city')"
请帮我查找医生马强诊断过的病人，返回病人接受的处方的名称、ID和重量。,"g.V().hasLabel('doctor').has('name', '马强').outE('diagnose').inV().hasLabel('patient').outE('accept').inV().hasLabel('prescription').project('c.name', 'c.id', 'c.weight').by(values('name')).by(values('id')).by(values('weight'))"
 请帮我查找与赵月有关联的公司，以及与贷款违约名称有关的存款账户，并返回它们。,"g.V().has('person', 'name', '赵月').as('a').out('invest').as('b').select('a').V().has('loan', 'name', 'defaultName').as('c').out('deposit').as('d').select('a', 'b', 'c', 'd')"
找出与repository XXRepo有关系的user的name,"g.V().has('repository', 'name', 'XXRepo').bothE().otherV().hasLabel('user').values('name')"
 返回与teacher节点关联的course节点，并按value和credit分组。,"g.V().hasLabel('teacher').bothE('teach').otherV().hasLabel('course').group().by(values('value', 'credit')).by(__.valueMap().select('value', 'credit'))"
找出与徐红和马伟有关的处方节点，返回它们的权重和名称。,"g.V().has('user', 'name', '徐红').outE().inV().hasLabel('prescription').as('b').inE().outV().has('user', 'name', '马伟').select('b').project('weight', 'name').by('weight').by('name')"
"请帮我查找名为李宏和黄轩的,标签为teacher的点公共的friend节点的名单","g.V().has('teacher', 'name', '李宏').out('friend').as('b').in('friend').has('teacher', 'name', '黄轩').select('b').values('name')"
"给出7个名为Redis的点uses的类型是software的节点,且其id小于60","g.V().has('name', 'Redis').outE('uses').inV().hasLabel('software').has('id', lt(60)).limit(7)"
"根据名字,性别分组,计算height的数量加身高乘7855的最小值","g.V().hasLabel('a').group().by('name').by(group().by('gender').by(project('count', 'height').by(values('height').count()).by(values('height')).math('(count + height) * 7855').min()))"
"返回被电影建国大业拥有的标签,和建国大业拥有的标签","g.V().has('film', 'name', '建国大业').as('b').bothE('has').otherV().hasLabel('tag').as('a', 'c').select('a', 'b', 'c')"
 返回医生诊断为空或身高在178到180之间的患者名称，以及他们接受的处方名称。,"g.V().hasLabel('doctor').or(hasNot('salary'), has('height', between(178, 180))).outE('diagnose').inV().hasLabel('patient').as('b').outE('accept').inV().hasLabel('prescription').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
人数加人数的值,g.V().hasLabel('a').project('result').by(values('peopleNumber').sum(local))
"查找person韩月提交的软件,被其他person提交的数量","g.V().has('person', 'name', '韩月').outE('commits').inV().hasLabel('software').inE('commits').outV().hasLabel('person').count()"
"查找名为黄若涵的点knows的全部author,并对这些author的name进行求和","g.V().has('name', '黄若涵').out('knows').hasLabel('author').values('name').sum()"
"输入请求点id的列表548,513,264,260,182, 以属性id作为相等条件,查找全部teacher以gender分组的age, 根据age从小到大排序","g.inject([548, 513, 264, 260, 182]).unfold().as('id').V().hasLabel('teacher').has('id', __.as('id')).values('age', 'gender').group().by('gender').by(__.values('age').order().fold())"
"帮我查询类型是film的点,返回116个",g.V().hasLabel('film').limit(116)
获取黄雪买家创建的订单中包含的商品节点,"g.V().hasLabel('buyer').has('name', '黄雪').out('creates').hasLabel('orders').out('contain').hasLabel('goods')"
"查找149个名为杜建聪的点观看的标签等于电影的节点,且节点价值在497到893之间或id小于72","g.V().has('name', '杜建聪').outE('watch').inV().hasLabel('film').or(has('value', between(497, 893)), has('id', lt(72))).limit(149)"
"使用列为age,gender,salary, 数据为(76,'male',7896),(7,'famale',2682),(97,'male',7296)的子查询作为输入表, 以属性gender作为相等条件,帮我查询标签为读者的点,并根据名字升序排列","g.inject([['age':76,'gender':'male','salary':7896],['age':7,'gender':'famale','salary':2682],['age':97,'gender':'male','salary':7296]]).unfold().as('p').V().hasLabel('reader').as('a').where(eq('a')).by('gender').by(select('p').select('gender')).order().by('name').select('a')"
"给出与名为法学院和土木学院的点共同has的,类型为student的节点","g.V().has('name', '法学院').out('has').hasLabel('student').as('b').in('has').has('name', '土木学院').select('b')"
"给出病人王月接受的处方,以及接受这些处方的病人","g.V().has('patient', 'name', '王月').outE('accept').inV().hasLabel('prescription').as('b').inE('accept').outV().hasLabel('patient').as('c').select('b', 'c')"
"输入表的列为id,level,name, 数据为(90,2,'电子科技大学'),(52,1,'南京大学'),(15,2,'浙江大学'), 以属性name作为相等条件,请帮我找出与名为何思思和赵科的点共同教的,label为课程的节点","g.V().has('name', '何思思').outE('teacher_teach_course').inV().hasLabel('course').as('b').inE('teacher_teach_course').outV().has('name', '赵科').select('b')"
"输入表的列为id,amount,weight, 数据为(37,9369.21,893),(75,2407.24,77),(45,9611.96,51), 源点的id等于输入表id,返回和loan defaultName有关的account,再返回和 defaultName loan_deposit_account的其他account,返回它们","g.withSideEffect('p', [[id:37, amount:9369.21, weight:893], [id:75, amount:2407.24, weight:77], [id:45, amount:9611.96, weight:51]]).V().hasLabel('loan').where(__.as('a').values('id').where(__.as('id').is(within(__.select('p').unfold().values('id'))))).has('name', 'defaultName').as('a').bothE().as('e').otherV().hasLabel('account').as('b').select('a').outE('loan_deposit_account').as('e2').inV().hasLabel('account').as('c').select('a', 'b', 'c')"
给出前85个标签等于引用的边,g.E().hasLabel('refers').limit(85)
请帮我找出与TheShy有关的人的朋友,"g.V().has('account', 'name', 'TheShy').out('relation').out('relation').out('friend')"
查询前146个id小于等于81的city,"g.V().hasLabel('city').has('id', lte(81)).limit(146)"
查询所有标签为person的点，按照age升序排序。,"g.V().hasLabel('person').order().by('age', asc)"
 返回赵若涵和周雪的共同朋友，共有169个。,"g.V().has('person', 'name', '赵若涵').out('friend').as('b').in('friend').has('person', 'name', '周雪').select('b').limit(169)"
查找和书百年孤独之间有引用关系的书,"g.V().hasLabel('book').has('name', '百年孤独').outE('refers').inV().hasLabel('book')"
查询id为131的订单的买家的朋友，再查询与买家相关的人员,"g.V().has('orders', 'id', '131').as('a').bothE().otherV().hasLabel('buyer').as('b').both().hasLabel('buyer').bothE('friend').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"查询id为171的点的创建时间,名字,id","g.V().has('id', 171).project('createTime', 'name', 'id').by('createTime').by('name').by('id')"
 请帮我查找李月喜欢过的人。,"g.V().has('person', 'name', '李月').out('pay').as('b').in('likes').hasLabel('person').as('c').select('c')"
请帮我找出前27个满足条件名字为赵若涵或id在30到42之间的编辑,"g.V().hasLabel('publisher').or(has('name', '赵若涵'), has('id', between(30, 42))).limit(27)"
"返回95个论坛推特和知网,共同的伙伴","g.V().has('forum', 'name', '推特').outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().has('forum', 'name', '知网').select('b').limit(95)"
找出与仓库JavaGuid有拥有关系的1度的环,"g.V().has('repository', 'name', 'JavaGuid').as('a').bothE('has').bothV().where(neq('a')).as('b').select('a', 'b').by('id').by('id').select(values).project('a.id', 'b_id').by(select('a')).by(select('b'))"
"查询和company点有employee关系的person节点,且边满足条件f1等于false,目标person节点满足条件name等于周若涵","g.V().hasLabel('company').outE('employee').has('f1', false).inV().hasLabel('person').has('name', '周若涵')"
"给出全部源点label为订单,边label为包含的边,返回这些边的目标点id减目标点id的值,和权重除104.96的值","g.V().hasLabel('orders').outE('contain').project('expr1', 'expr2').by(values('targetId').math('_ - _')).by(values('weight').math('_ / 104.96'))"
 给出包含 Prescription_180 的药品，再给出与 Prescription_180 存在包含关系的药品。,"g.V().has('prescription', 'name', 'Prescription_180').as('a').outE('contain').inV().hasLabel('medicine').as('b').select('a').inE('contain').outV().hasLabel('medicine').as('c').select('a', 'b', 'c')"
 返回所有与名为周梅的患者有好友关系或互为好友关系的处方。,"g.V().hasLabel('patient').has('name', '周梅').bothE('friend').otherV().hasLabel('prescription').range(1, 2).dedup()"
"查询person喜欢的person, 令person(b)的名字的值等于支付person的person的性别的最大值, 再查找person喜欢的person","g.V().hasLabel('person').as('a').outE('likes').inV().hasLabel('person').as('b').project('b_name', 'd').by(select('b').project('name').by(coalesce(select('b').inE('pay').outV().hasLabel('person').values('gender').max(), constant('')))).by(select('b').outE('likes').inV().hasLabel('person').as('d').select('d'))"
"帮我查询user赵月likes的repository, 令repository的lang等于repository的id, 返回user的age, repository的lang","g.V().has('user', 'name', '赵月').as('a').outE('likes').inV().hasLabel('repository').as('b').project('a_age', 'b_lang').by(select('a').values('age')).by(select('b').values('id'))"
请帮我找出以likes关系关联了book呐喊的reader,"g.V().hasLabel('book').has('name', '呐喊').inE('likes').outV().hasLabel('reader')"
"请帮我查找名为马克思原理的点的,大小小于85且名字为生物学院的朋友,返回这些朋友的名字,和边的目标点id","g.V().has('name', '马克思原理').outE('friend').as('e').inV().has('name', '生物学院').has('size', lt(85)).project('b.name', 'e.targetId').by(values('name')).by(select('e').values('targetId'))"
找出吴科认识的人，返回他们及其关联的人的名字和身高。,"g.V().has('person', 'name', '吴科').out('knows').hasLabel('person').out('relates').hasLabel('person').project('name', 'height').by('name').by('height')"
"输入请求点id的列表115,467,879, 以属性id作为相等条件,返回满足条件身高小于等于171,年龄不为空的节点","g.inject([115, 467, 879]).unfold().as('p').V().has('id', __.where(eq('p'))).has('height', lte(171)).has('age', neq(null)).dedup()"
"查询名为马建聪的点咨询的所有卖家,并对这些卖家的身高进行求和","g.V().has('name', '马建聪').outE('consult').inV().hasLabel('seller').values('height').sum()"
"用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查询和book白夜行有关的author,再查询和白夜行book_refers_book的其他book,返回它们","g.V().hasLabel('book').has('name', '白夜行').as('a').bothE().where(otherV().hasLabel('author')).as('e').otherV().as('b').select('a').bothE('book_refers_book').as('e2').otherV().as('c').select('a', 'b', 'c')"
返回与person王建国有恋人关系的3跳以内的环,"g.V().has('person', 'name', '王建国').as('a').repeat(bothE('lover').otherV().simplePath()).times(3).where(cyclicPath()).path().unfold().hasLabel('person').dedup().project('a.id', 'b_id').by(select('a').id()).by(id())"
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询前104个满足条件gender不等于male的person","g.V().hasLabel('person').has('gender', neq('male')).limit(104)"
找出37个与PR-394和PR-162都存在关系的用户或合并请求或仓库节点,"g.V().has('name', 'PR-394').as('a').outE().as('e').inV().hasLabel(within('user', 'pullRequest', 'repository')).as('b').inE().as('e2').outV().has('name', 'PR-162').as('c').select('b').limit(37)"
请帮我查找全部类型是person或公司的点,"g.V().hasLabel(within('person', 'company'))"
"输入表的列为isBlock,createTime,name, 数据为(false,1999-05-06,'LX001'),(true,2011-07-01,'BIN'),(true,2024-12-24,'LX001'),(false,2021-07-04,'XXD'), 源点的createTime等于输入表createTime,返回与account TheShy有account_transfer_account关系的3度以内的环","g.withSideEffect('p', [['isBlock':false, 'createTime':'1999-05-06', 'name':'LX001'], ['isBlock':true, 'createTime':'2011-07-01', 'name':'BIN'], ['isBlock':true, 'createTime':'2024-12-24', 'name':'LX001'], ['isBlock':false, 'createTime':'2021-07-04', 'name':'XXD']]).V().hasLabel('account').where(__.values('createTime').is(within(__.select('p').unfold().values('createTime')))).has('name', 'TheShy').repeat(__.outE('account_transfer_account').inV().simplePath()).times(2).emit(loops().is(0).or().as('b').where(__.outE('account_transfer_account').inV().where(eq('a')))).as('a').select('b').as('b').select('a', 'b').by('id').by('id')"
请帮我找出所有包含商品且由Jack创建的订单的类别。,"g.V().has('name', 'Jack').outE('creates').inV().hasLabel('orders').outE('contain').inV().hasLabel('goods').values('category')"
"找出名为王思思的person,以及与其有关的person,并返回王思思的身高和这些person的薪资","g.V().hasLabel('person').has('name', '王思思').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('height').by('salary')"
"返回139个person陈思琪和黄红,共同的family","g.V().has('person', 'name', '陈思琪').outE('family').inV().as('b').inE('family').outV().has('person', 'name', '黄红').select('b').limit(139)"
 查询何宏发布的帖子。,"g.V().hasLabel('user').has('name', '何宏').outE('publish').inV().hasLabel('post').as('b', 'a').select('a', 'b')"
请帮我找出源点是buyer，目标点是orders，且标签是cancel的边。,g.V().hasLabel('buyer').outE('cancel').where(inV().hasLabel('orders'))
"查找所有用户以性别,年龄分组的id, 根据id从小到大排序","g.V().hasLabel('user').group().by(values('gender', 'age').fold()).by(values('id').fold()).order(local).by(select(keys).unfold().id(), asc)"
 查找与 department经管学院 有 has 关系，且与 course大学英语 有 selects 关系的 student 节点，返回这些 student 的 name、salary、department经管学院的 id 和 course大学英语的 name。,"g.V().has('department', 'name', '经管学院').as('a').out('has').hasLabel('student').as('b').in('selects').has('course', 'name', '大学英语').as('c').select('a', 'b', 'c').by('id').by(values('name', 'salary')).by('name')"
请帮我找出所有属于呼吸科并且与医生存在has关系的医生的名字。,"g.V().has('name', '呼吸科').out('has').hasLabel('doctor').out('belong').hasLabel('department').values('name')"
返回与person李思思有commits关系的3度以内的环,"g.V().has('person', 'name', '李思思').as('a').repeat(bothE('commits').otherV().simplePath()).times(2).where(cyclicPath()).path().by('id').by('id')"
请帮我找出与用户相关的人员，或者是这些人员的联系人,"g.V().hasLabel('user').outE('relation').inV().range(1, 2).dedup()"
"请帮我找出id为52的点的id,金额,权重","g.V().has('id', 52).project('id', 'amount', 'weight').by('id').by('amount').by('weight')"
 请帮我查找所有与名为韩梅的人有亲戚关系，或者与韩梅有夫妻关系的人。,"g.V().has('person', 'name', '韩梅').outE('relation').inV().hasLabel('person').dedup()"
 找出与吴建国有关、与徐若涵也有关系的帖子节点，并返回它们所涉及的语言。,"g.V().has('person', 'name', '吴建国').outE().inV().hasLabel('post').as('b').inE().outV().has('user', 'name', '徐若涵').select('b').values('lang', 'wordCount')"
"请帮我查找与公司腾讯有关系的公司, 返回和这些公司有关联的公司的,价值加价值的值","g.V().has('company', 'name', '腾讯').bothE().bothV().hasLabel('company').bothE().bothV().hasLabel('company').values('value').sum()"
"根据id,大小,名字分组,计算大小对135取余的值","g.V().as('a').project('id', 'size', 'name', 'mod').by(__.select('a').id()).by(__.select('a').values('size')).by(__.select('a').values('name')).by(__.select('a').values('size').math('_ % 135')).group().by(__.select('id', 'size', 'name')).by(__.select('mod'))"
请帮我查找被论坛中国军事论坛包含的帖子,"g.V().hasLabel('forum').has('name', '中国军事论坛').outE('contain').inV().hasLabel('post').as('b', 'a').select('a', 'b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出与部门生物学院存在department_has_teacher关系,且与课程数据结构存在teacher_teach_course关系的教师节点，返回这些教师的薪资,及部门生物学院的id,及课程数据结构的课时","g.V().has('department', 'name', '生物学院').as('a').outE('department_has_teacher').inV().hasLabel('teacher').as('b').inE('teacher_teach_course').outV().has('course', 'name', '数据结构').as('c').select('a', 'b', 'c').by('id').by('salary').by('courseHour')"
"用如下schema的图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));找出用户赵建国的所有标签为伙伴的边,并根据f0升序排列,返回69个","g.V().has('user', 'name', '赵建国').outE('partner').order().by('f0', asc).limit(69).inV()"
"请帮我查找源点标签为patient,目标点标签为prescription,标签为medicine或department的边","g.V().hasLabel('patient').outE('medicine', 'department').as('e').inV().hasLabel('prescription').select('e')"
"使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找和编辑周建国有关的读者,称为X,再请帮我查找和这个X有关联的其他编辑,以及和X有关联的作家","g.V().has('publisher', 'name', '周建国').as('a').bothE().otherV().hasLabel('reader').as('b').bothE().as('e2').otherV().hasLabel('publisher').as('c').select('b').bothE().as('e3').otherV().hasLabel('author').as('d').select('a', 'b', 'c', 'd')"
"请帮我查找发布帖子Post_141的用户,和这些用户发布的帖子","g.V().hasLabel('post').has('name', 'Post_141').in('publish').as('b').out('publish').as('c').select('b', 'c')"
"请帮我查找id为72的点的身高,性别","g.V().has('id', 72).project('height', 'gender').by('height').by('gender')"
 找出17到76之间的所有与电影院有关的电影节点，并计算这些节点的价值加12的数量。然后找出这些节点中每个节点的ID除以48减去的最大价值。,"g.V().hasLabel('cinema').outE().inV().hasLabel('film').has('id', between(17, 76)).project('count_result', 'max_result').by(__.values('value').math('_ + 12').count()).by(__.values('id').math('_ / 48').values('value').math('_ - _').max())"
"请帮我查找年龄小于86且薪资不为空的person喜欢的person的名称,以及这些person 喜欢的person的名称","g.V().hasLabel('person').has('age', lt(86)).has('salary', neq(null)).outE('likes').inV().hasLabel('person').as('b').outE('likes').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
返回和person王国强之间有支付关系的person,"g.V().hasLabel('person').has('name', '王国强').outE('pay').inV().hasLabel('person')"
大小减440的值,g.V().has('size').project('result').by(values('size').math('_ - 440'))
"给出和学生陈伟有选择关系的课程,再给出以选择关系关联了陈伟的课程","g.V().hasLabel('student').has('name', '陈伟').as('a').bothE('selects').otherV().hasLabel('course').as('b').select('a').bothE('selects').otherV().hasLabel('course').as('c').select('a', 'b', 'c')"
请帮我查找名为Faker的节点还款的person或贷款,"g.V().has('name', 'Faker').outE('repay').inV().hasLabel(within('person', 'loan'))"
"给出33个名为PR-308的点belong的类型为repository的节点,且节点id在24到91之间且weight小于281","g.V().has('name', 'PR-308').outE('belong').inV().hasLabel('repository').has('id', between(24, 91)).has('weight', lt(281)).limit(33)"
"帮我查询person的三角的环,边标签等于knows, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('knows').inV().as('b').outE('knows').inV().as('c').where(__.inE('knows').outV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
请帮我查询Order_434的所有包含商品的点，以及Order_434被取消的买家，并将结果一起返回。,"g.V().has('name', 'Order_434').as('a').outE('contain').inV().hasLabel('goods').as('b').select('a').inE('cancel').outV().hasLabel('buyer').as('c').select('a', 'b', 'c')"
"查找所有源点label为person,目标点label为company,label为person或account或loan的边","g.V().hasLabel('person').outE('person', 'account', 'loan').as('e').inV().hasLabel('company').select('e')"
返回赵红拥有的账号,"g.V().hasLabel('person').has('name', '赵红').outE('own').inV().hasLabel('account').as('b').inV().as('a').select('a', 'b')"
"以954作为请求点id, 以属性id作为相等条件,帮我查询所有和department物理学院有关系的course节点,返回这些点的courseHour,credit","g.withSideEffect('p', [954]).V().hasLabel('department').has('id', select('p')).has('name', '物理学院').bothE().otherV().hasLabel('course').project('courseHour', 'credit').by('courseHour').by('credit')"
查找和用户王若涵之间有喜欢关系的帖子,"g.V().has('user', 'name', '王若涵').out('likes').hasLabel('post')"
 周科commits的software被其他person commits的数量。,"g.V().has('person', 'name', '周科').outE('commits').inV().hasLabel('software').inE('commits').outV().hasLabel('person').count()"
"返回和buyer有关联的orders节点,并根据其price,id,value分组,返回price,id,value,以及id对41取余的值","g.V().hasLabel('buyer').bothE('cancel').otherV().hasLabel('orders').project('b.price', 'b.id', 'b.value', 'b.id % 41').by(values('price')).by(values('id')).by(values('value')).by(values('id').math('_ % 41')).dedup().by(select('b.price', 'b.id', 'b.value')).select('b.price', 'b.id', 'b.value', 'b.id % 41')"
age的最小值对age取余乘198的值,g.V().hasLabel('a').values('age').min().fold().as('minAge').V().hasLabel('a').as('a').select('minAge').unfold().as('min').select('a').by(values('age')).math('min % a * 198').by()
"查询和person赵建聪有关的software,再查询和赵建聪belong的其他company,返回它们","g.V().has('person', 'name', '赵建聪').as('a').bothE().otherV().hasLabel('software').as('b').select('a').bothE('belong').otherV().hasLabel('company').as('c').select('a', 'b', 'c')"
"给出名为周红的点发布的所有帖子,并对这些帖子的创建时间进行求和","g.V().has('name', '周红').outE('publish').inV().hasLabel('post').values('createTime').sum()"
找出与所有课程相关的教师，以及这些教师所在的其他部门。,"g.V().has('course', 'id', '62').bothE().otherV().hasLabel('teacher').as('b').inE('has').otherV().hasLabel('department').as('c').select('b', 'c')"
"请帮我找出名为Comment_439和Comment_374的,类型是评论的点公共的伙伴节点的名单","g.V().has('comment', 'name', 'Comment_439').out('partner').as('b').in('partner').has('comment', 'name', 'Comment_374').select('b').values('name')"
 返回同时与标签为'账号'的点有转账关系、与这些账号有还款关系、与这些贷款有存款关系的账号。,g.V().hasLabel('account').as('a').outE('transfer').inV().hasLabel('account').as('b').outE('repay').inV().hasLabel('loan').as('c').outE('deposit').inV().hasLabel('account').as('d').select('d').dedup()
"根据价值,名字分组,计算id的最大值加35的最小值","g.V().hasLabel('a').group().by(union(has('value'), has('name')).fold()).by(values('id').max()).unfold().select(values).math('_ + 35').min()"
"请帮我找出创造处方Prescription_362的医生,和这些医生诊断的病人","g.V().has('prescription', 'name', 'Prescription_362').as('a').in('creates').as('b').out('diagnose').as('c').select('b', 'c')"
查询美团所在城市,"g.V().hasLabel('company').has('name', '美团').as('b').outE('belong').inV().hasLabel('city').as('a').select('a', 'b')"
"找出被person韩梅支付的person,和韩梅支付的person","g.V().hasLabel('person').as('a').in('pay').as('e').outV().hasLabel('person').has('name', '韩梅').as('b').out('pay').as('e2').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
找出用户的2跳以内的环,"g.V().hasLabel('user').as('a').bothE().otherV().where(loops().is(1)).as('b').select('a', 'b').by('id').by('id')"
"返回和大学北京大学有关的大学,再返回和北京大学属于的其他城市,返回它们","g.V().has('university', 'name', '北京大学').as('a').bothE().otherV().hasLabel('university').as('b').select('a').outE('belong').inV().hasLabel('city').as('c').select('a', 'b', 'c')"
"查找名为Sam的,名字不是放射科,权重大于201的相关者,返回这些相关者的地址,和边的权重,目标点id","g.V().has('name', 'Sam').outE('relation').as('e').inV().has('name', neq('放射科')).has('weight', gt(201)).as('b').select('b', 'e').by('address').by(values('weight', 'targetId'))"
给出前22个性别是famale且身高在172到179之间且名字不是郑强的学生,"g.V().hasLabel('student').has('gender', 'famale').has('height', between(172, 179)).has('name', neq('郑强')).limit(22)"
"以528,624,390,342,418作为请求点id, 以属性id作为相等条件,请帮我查找公司雇佣的person,返回其源点的人数乘人数的值,以及目标点的身高减172的最大值","g.withSideEffect('p', [528, 624, 390, 342, 418]).V().hasLabel('company').where(values('id').is(within('p'))).as('a').outE('company_employee_person').inV().hasLabel('person').as('b').select('a', 'b').by('peopleNumber').by('height').project('peopleNumberSquared', 'maxHeightDiff').by(select('a').math('_ * _')).by(select('b').math('_ - 172').max())"
"以(348,'杭州',50)作为请求表数据,属性分别为value,name,id, 源点的id等于输入表id,返回与名为天津和北京的点共同contain的,类型是company的节点","g.withSideEffect('p', [['value': 348, 'name': '杭州', 'id': 50]]).V().has('id', __.select('p').unfold().select('id')).has('name', '天津').outE('city_contain_company').inV().hasLabel('company').as('b').inE('city_contain_company').outV().has('name', '北京').select('b')"
"返回107个和标签等于person的点有拥有关系的账号,并且和这些账号有转账关系的账号",g.V().hasLabel('person').out('own').out('transfer').limit(107)
请帮我查找所有与company微软有关系的person的name,"g.V().hasLabel('company').has('name', '微软').bothE().otherV().hasLabel('person').values('name')"
查询学生的1跳的环,"g.V().hasLabel('student').as('a').bothE().bothV().where(eq('a')).as('b').select('a', 'b').by('id').by('id').select(values).project('a.id', 'b_id').by(select('a')).by(select('b'))"
"给出标签为软件的点,返回153个",g.V().hasLabel('software').limit(153)
给出和读者徐思思之间有喜欢关系的书,"g.V().hasLabel('reader').has('name', '徐思思').outE('likes').inV().hasLabel('book')"
"以600,562,119作为请求点id, 以属性id作为相等条件,查找author李梅的类型是friend的边,并根据targetId从小到大排列,返回163个","g.inject([600, 562, 119]).unfold().as('p').V().hasLabel('author').has('id', __.select('p')).has('name', '李梅').outE('friend').as('e').order().by('targetId', asc).limit(163).inV().as('b').select('b')"
查找全部名为张建聪的点回答的买家,"g.V().has('name', '张建聪').outE('ask').inV().hasLabel('buyer')"
请帮我查找和person吴梅之间有喜欢关系的person,"g.V().hasLabel('person').has('name', '吴梅').outE('likes').inV().hasLabel('person')"
"用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查找所有数学学院的点has的student,然后查找数学学院被has的university,一起返回","g.V().has('name', '数学学院').as('a').out('department_has_student').as('b').select('a').in('university_has_department').as('c').select('a', 'b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));返回59个城市重庆和杭州,共同的朋友","g.V().has('city', 'name', '重庆').out('friend').as('b').in('friend').has('city', 'name', '杭州').select('b').limit(59)"
"调用pageRank函数,以4作为输入,返回id, value","g.call('pageRank').with('maxIterations', 4).project('id', 'value').by('id').by('value')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部person以身高,名字,薪资分组的id, 根据id升序排序","g.V().hasLabel('person').group().by(values('height', 'name', 'salary').fold()).by(values('id').fold()).order(local).by(keys, asc)"
"输入请求点id的列表972,987,551,835, 以属性id作为相等条件,请帮我找出和seller李月有seller_has_goods关系的goods,再请帮我找出以seller_has_goods关系关联了李月的goods","g.inject([972, 987, 551, 835]).unfold().as('p').V().hasLabel('seller').has('id', __.select('p')).has('name', '李月').as('a').outE('seller_has_goods').inV().hasLabel('goods').as('b').select('a').inE('seller_has_goods').outV().hasLabel('goods').as('c').select('a', 'b', 'c')"
返回162个与腾讯和阿里都存在关系的城市或大学节点,"g.V().has('name', '腾讯').outE().inV().or(hasLabel('city'), hasLabel('university')).as('b').inE().outV().has('name', '阿里').select('b').limit(162)"
查询所有名为物理学院的节点has的course或university或department,"g.V().has('name', '物理学院').out('has').hasLabel(within('course', 'university', 'department'))"
"帮我查询名为孙若涵的forum或user,以及与其有关的post,并返回孙若涵的height和这些post的createTime","g.V().has(label, within('forum', 'user')).has('name', '孙若涵').bothE().otherV().has(label, 'post').as('b').select('b').by('createTime').as('createTime').select('b').by(inE().outV().has(label, within('forum', 'user')).has('name', '孙若涵')).values('height').as('height').select('height', 'createTime')"
帮我查询所有名为马国强的点likes的person,"g.V().has('name', '马国强').outE('likes').inV().hasLabel('person')"
"请帮我查找年龄为空且身高不是165的教师教的课程的名称,以及这些课程 属于的部门的名称","g.V().hasLabel('teacher').has('age', eq(null)).has('height', neq(165)).outE('teach').inV().hasLabel('course').as('b').outE('belong').inV().hasLabel('department').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));返回前138个满足条件id大于等于31或name等于体育学院,且value小于等于632的department","g.V().hasLabel('department').has('id', gte(31)).or().has('name', '体育学院').has('value', lte(632)).limit(138)"
"返回id为140的点的身高,性别,年龄","g.V().has('id', 140).project('height', 'gender', 'age').by('height').by('gender').by('age')"
 找朋友，找朋友的朋友,"g.V().hasLabel('country').as('a').outE('friend').inV().range(1, 2).as('b').select('b')"
"查询与person孙梅存在拥有关系,且与账号XiaoHu存在转账关系的账号节点，返回这些账号的是否冻结,创建时间,上次登录时间,及person孙梅的名字,及账号XiaoHu的上次登录时间","g.V().has('person', 'name', '孙梅').as('a').outE('own').inV().hasLabel('account').as('b').inE('transfer').outV().has('account', 'name', 'XiaoHu').as('c').select('a', 'b', 'c').by('name').by(values('isBlock', 'createTime', 'lastLoginTime').fold()).by('lastLoginTime')"
"请帮我找出全部源点类型为reader,目标点类型为book,类型为reader或author或publisher的边","g.V().hasLabel('reader').bothE('reader', 'author', 'publisher').where(otherV().hasLabel('book'))"
 请问从张思琪买家出发，沿着取消类型的路线走2到4度，可以到达哪个订单点？,"g.V().has('buyer', 'name', '张思琪').repeat(out('cancel')).times(2).emit().repeat(out('cancel')).times(2).has('orders').dedup()"
 找出与软件 SprintBoot 有 uses 关系的软件，再找出与 SprintBoot 以 uses 关系关联的软件。,"g.V().hasLabel('software').has('name', 'SprintBoot').as('a').bothE('uses').otherV().hasLabel('software').as('b', 'c').select('a', 'b', 'c')"
"输入表的列为salary,name,height, 数据为(1588,'黄红',164),(3738,'何宏',199),(1765,'何梅',159),(7028,'李强',154), 源点的salary等于输入表salary,请帮我查找和department有关联的doctor节点,并根据其gender分组,返回gender,以及salary减4840的值","g.inject([1588, '黄红', 164], [3738, '何宏', 199], [1765, '何梅', 159], [7028, '李强', 154]).as('p').V().hasLabel('department').as('a').where(eq('p')).by('salary').by(select('p').limit(local, 1)).outE('department_has_doctor').inV().hasLabel('doctor').as('b').group().by('gender').by(__.select('b').values('salary').math('_ - 4840').fold())"
"给出所有与ISSUE-455存在属于关系的仓库,仓库与用户存在拥有关系的点,返回这些点的身高","g.V().has('name', 'ISSUE-455').outE('belong').inV().hasLabel('repository').outE('has').inV().values('height')"
找出与 id 为 120 的公司相关的公司的朋友，以及这些朋友所在的公司。,"g.V().has('company', 'id', '120').as('a').bothE().otherV().hasLabel('company').as('b').bothE().hasLabel('friend').otherV().as('c').select('b').bothE().hasLabel('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"查询109个部门体育学院和计算机学院,共同的相关者","g.V().has('department', 'name', '体育学院').outE('relation').inV().as('b').inE('relation').outV().has('department', 'name', '计算机学院').select('b').limit(109)"
"请帮我查找与电影变形金刚有关系的标签, 返回和这些标签有关联的标签的,value的平均值对904取余的最小值","g.V().has('film', 'name', '变形金刚').bothE().otherV().hasLabel('tag').bothE().otherV().hasLabel('tag').values('value').mean().fold().project('avg_value').by(__.mean()).select('avg_value').math('_ % 904').min()"
"请帮我查找和person吴伟有关系的person,返回这些点的id,名字","g.V().has('person', 'name', '吴伟').bothE().otherV().hasLabel('person').project('id', 'name').by('id').by('name')"
获取名为赵宏的病人的年龄和性别,"g.V().hasLabel('patient').has('name', '赵宏').project('age', 'gender').by('age').by('gender')"
"用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找标签等于课程的点",g.V().hasLabel('course')
"查找account Faker repay的loan,以及apply这些loan的person, 令account的name等于person的salary减8961的平均值, 返回account的isBlock,loan的amount,person的age","g.V().hasLabel('account').has('name', 'Faker').as('a').outE('repay').inV().hasLabel('loan').as('b').inE('apply').outV().hasLabel('person').as('c').group().by(select('a', 'b', 'c')).by(select('c').values('salary').fold().mean().math('_ - 8961')).select(keys).project('a.isBlock', 'b.amount', 'c.age').by(select('a').values('isBlock')).by(select('b').values('amount')).by(select('c').values('age'))"
"查询全部生物学院的点has的student,然后查询生物学院被has的university,一起返回","g.V().has('name', '生物学院').as('a').outE('has').inV().hasLabel('student').as('b').select('a').inE('has').outV().hasLabel('university').as('c').select('a', 'b', 'c')"
"输入请求点id的列表317,24,793,342,839, 源点的id等于输入表id,给出名字大于等于903的大学属于的城市的名称,以及这些城市 包含的大学的名称","g.inject([317, 24, 793, 342, 839]).as('p').unfold().as('id').V().hasLabel('university').has('id', __.select('id')).has('name', gte(903)).as('a').outE('university_belong_city').as('e').inV().hasLabel('city').as('b').inE('city_contain_university').as('e2').outV().hasLabel('university').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(__.select('b')).by(__.select('c'))"
"帮我查询所有与Comment_131存在belong关系的film,film与tag存在has关系的点,返回这些点的value","g.V().has('name', 'Comment_131').out('belong').hasLabel('film').out('has').values('value')"
"找出张思思的点诊断的病人,然后找出张思思被拥有的部门,一起返回","g.V().has('name', '张思思').as('a').outE('diagnose').inV().as('b').select('a').inE('has').outV().as('c').select('a', 'b', 'c')"
返回全部和post Post_483之间有has关系的tag,"g.V().hasLabel('post').has('name', 'Post_483').out('has').hasLabel('tag')"
"请帮我找出标签等于person的点,并根据salary升序排列","g.V().hasLabel('person').order().by('salary', asc)"
请找出与部门传染部有关联，并创造了处方Prescription_310的医生。请提供这些医生的性别、部门传染部的名称以及处方Prescription_310的ID。,"g.V().has('department', 'name', '传染部').as('a').outE('has').inV().hasLabel('doctor').as('b').inE('creates').outV().has('prescription', 'name', 'Prescription_310').as('c').select('a', 'b', 'c').by('name').by('gender').by('id')"
找出与39个buyer类型的点存在consult关系的所有seller，以及这些seller所拥有的所有goods。,g.V().hasLabel('buyer').out('consult').hasLabel('seller').out('has').hasLabel('goods').limit(39)
 找出与陈思琪和郑伟有关联的三个账号。,"g.V().has('name', '陈思琪').outE().inV().hasLabel('account').as('b').inE().outV().has('name', '郑伟').select('b').limit(3)"
"给出和教师有关联的课程节点,并根据其名字分组,返回名字,以及id的数量减73除39减921的最大值",g.V().hasLabel('teacher').as('a').outE('teach').inV().hasLabel('course').as('b').group().by('name').by(__.select('b').values('id').count().math('(_ - 73) / 39 - 921').max())
"返回包含论坛天涯论坛包含的用户,的论坛","g.V().hasLabel('forum').has('name', '天涯论坛').outE('contain').inV().hasLabel('user').as('b').inE('contain').outV().hasLabel('forum').as('c').select('b', 'c')"
"给出身高大于等于164,年龄大于等于84的作家撰写的书的名称,以及这些书 关联的书的名称","g.V().hasLabel('author').has('height', gte(164)).has('age', gte(84)).out('write').hasLabel('book').as('b').out('relates').hasLabel('book').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"以392,473,392作为请求点id, 源点的id等于输入表id,查找被账号TheShy转账的账号","g.inject([392, 473, 392]).unfold().as('p').V().hasLabel('account').has('id', __.select('p')).as('a').in('account_transfer_account').hasLabel('account').has('name', 'TheShy').as('b').select('a', 'b')"
"查找20个和标签为seller的点有ask关系的buyer,且和这些buyer有look关系的goods",g.V().hasLabel('seller').as('a').outE('ask').inV().hasLabel('buyer').as('b').outE('look').inV().hasLabel('goods').as('c').select('c').limit(20)
"帮我查询贷款loan_96存款的账号,以及转账这些账号的账号","g.V().hasLabel('loan').has('name', 'loan_96').outE('deposit').inV().hasLabel('account').as('b').inE('transfer').outV().hasLabel('account').as('c').select('b', 'c')"
给出所有名为计算机学院的节点拥有的部门,"g.V().has('name', '计算机学院').out('has').hasLabel('department')"
"帮我查询city伦敦contain的company,被其他university cooperate的数量","g.V().has('city', 'name', '伦敦').out('contain').in('cooperate').hasLabel('university').count()"
"帮我查询author write的book, 令book的price的值等于writebook的author的age的最大值, 再查找book knows的book","g.V().hasLabel('author').as('a').outE('write').inV().hasLabel('book').as('b').sideEffect(__.select('b').sack(assign).by(__.in('write').hasLabel('author').values('age').max()).property('price', __.sack())).select('b').out('knows').hasLabel('book').as('d').select('b', 'd').by('price').by()"
"请帮我找出名为吴伟的点的,height大于等于172的partner,返回这些partner的id,和边的weight","g.V().has('name', '吴伟').outE('partner').as('e').inV().has('height', gte(172)).project('b.id', 'e.weight').by(id()).by(select('e').values('weight'))"
请帮我找出与person李思琪和王红都存在认识关系的点,"g.V().hasLabel('person').has('name', '李思琪').outE('knows').inV().as('b').inE('knows').outV().hasLabel('person').has('name', '王红').select('b')"
找出所有互相喜欢的人以及他们共同喜欢的人,"g.V().has('person', 'id', '11').bothE().otherV().hasLabel('person').as('b').in('likes').hasLabel('person').as('c').select('b', 'c')"
"查找id为196的商品有关的订单的相关者, 再查找和订单有关系的相关者","g.V().hasLabel('goods').has('id', 196).as('a').bothE().as('e').otherV().hasLabel('orders').as('b').bothE('relation').as('e2').otherV().as('c').select('b').bothE('relation').as('e3').otherV().as('d').select('a', 'b', 'c', 'd')"
"请帮我找出全部person的relation,或其relation的relation",g.V().hasLabel('person').repeat(outE('relation').inV()).times(2).dedup()
查找与课程数据结构有属于关系的3跳的环,"g.V().has('course', 'name', '数据结构').as('a').repeat(bothE().otherV().simplePath()).times(3).where(cyclicPath()).where(eq('a')).project('a.id', 'b_id').by(select('a').id()).by(id())"
"帮我查询和account有关联的loan节点,并根据其id分组,返回id,以及id的和减16的值",g.V().hasLabel('account').bothE('repay').bothV().hasLabel('loan').group().by('id').by(values('id').sum().math('_ - 16'))
"请帮我找出合并请求属于的仓库, 令仓库的id的值等于属于仓库的事项的创建时间的平均值, 再查找仓库拥有的合并请求","g.V().hasLabel('pullRequest').as('a').outE('belong').inV().hasLabel('repository').as('b').sideEffect(__.select('b').aggregate('b_nodes')).select('b').inE('belong').outV().hasLabel('issue').values('createTime').mean().as('avg_time').select('b_nodes').unfold().as('b').select('b').property('id', __.select('avg_time')).select('b').outE('has').inV().hasLabel('pullRequest').as('d').select('b', 'd').by('id').by()"
"请帮我找出名为知乎的点包含的用户,并对这些用户的性别进行求和","g.V().has('name', '知乎').outE('contain').inV().hasLabel('user').values('gender').sum()"
 返回赵强喜欢的那个人。,"g.V().hasLabel('person').has('name', '赵强').outE('likes').inV().as('b').inV().as('a').select('a', 'b')"
请帮我找出与名为马红的卖家或者其合作伙伴有关的商品,"g.V().hasLabel('seller').has('name', '马红').outE('partner').inV().hasLabel('goods').dedup()"
"输入请求点id的列表399,7, 源点的id等于输入表id,帮我查询名为周月和赵红的,类型是person的点公共的家人节点的名单","g.withSideEffect('p', [399, 7]).V().hasLabel('person').where(__.in('person_family_person').has('name', '周月')).where(__.in('person_family_person').has('name', '赵红')).has('id', within('p')).values('name')"
"找出全部reader以name,height分组的age, 根据age从大到小排序","g.V().hasLabel('reader').group().by(values('name', 'height')).by(values('age').fold()).order(local).by(values, desc)"
"帮我查询与cinema UME有关,且与tag喜剧有关系的film节点","g.V().has('cinema', 'name', 'UME').outE('releases').inV().hasLabel('film').as('b').outE('has').inV().has('tag', 'name', '喜剧').select('b')"
"找出前114个薪资不等于5154,名字不等于王强,或性别等于famale的person","g.V().hasLabel('person').or(and(has('salary', neq(5154)), has('name', neq('王强'))), has('gender', 'famale')).limit(114)"
"以(26,'male',8415),(66,'male',1545),(76,'famale',9230)作为请求表数据,属性分别为age,gender,salary, 以属性age作为相等条件,请帮我找出person吴思琪 knows的person,返回person pay的person的salary乘salary加64对93取余的值 ","g.withSideEffect('p', [[26, 'male', 8415], [66, 'male', 1545], [76, 'famale', 9230]]).inject(1).sideEffect(__.select('p').unfold().as('row').select('row').by(__.limit(1)).as('age')).V().hasLabel('person').has('age', __.select('age')).has('name', '吴思琪').as('a').outE('person_knows_person').inV().hasLabel('person').as('b').outE('person_pay_person').inV().hasLabel('person').as('c').project('result').by(__.select('c').values('salary').math('_ * _ + 64 % 93')).select('result')"
 找出腾讯和Bilibili之间的共同点。,"g.V().hasLabel('company').has('name', '腾讯').as('a').outE('belong').as('e').inV().as('b').inE('belong').as('e2').outV().hasLabel('company').has('name', 'Bilibili').as('c').select('b')"
 请帮我找出共同关联的person节点，名称为何建国和黄建聪。,"g.V().has('name', '何建国').outE('relates').inV().hasLabel('person').as('b').inE('relates').outV().has('name', '黄建聪').select('b')"
返回全部和部门内科之间有拥有关系的医生,"g.V().has('department', 'name', '内科').out('has').hasLabel('doctor')"
找出与买家徐红有关联，并包含椅子商品的订单。返回这些订单的名称、价格、价值以及买家徐红和椅子商品的销售量。,"g.V().has('buyer', 'name', '徐红').as('a').outE('creates').inV().hasLabel('orders').as('b').inE('contain').outV().has('goods', 'name', '椅子').as('c').select('a', 'b', 'c').by('name').by(values('name', 'price', 'value')).by('sellerNumber')"
"根据名字,价格,权重分组,计算id减id的数量","g.V().hasLabel('a').group().by(values('name', 'price', 'weight').fold()).by(count(local))"
请帮我找出与字节和谷歌都有关联的108家公司。,"g.V().has('name', '字节').outE().as('e').inV().hasLabel('company').as('b').inE().as('e2').outV().has('name', '谷歌').select('b').limit(108)"
"帮我查询全部赵建聪的点认识的person,然后帮我查询赵建聪被认识的person,一起返回","g.V().has('name', '赵建聪').as('a').bothE('knows').as('e').otherV().hasLabel('person').as('b').select('a').bothE('knows').as('e2').otherV().hasLabel('person').as('c').select('a', 'b', 'c')"
"查找address是北区的cinema releases的film的名称,以及这些film has的tag的名称","g.V().hasLabel('cinema').has('address', '北区').outE('releases').inV().hasLabel('film').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
帮我查询被公司字节属于的城市,"g.V().hasLabel('company').has('name', '字节').as('b').outE('belong').as('e').inV().hasLabel('city').as('a').select('a', 'b')"
"帮我查询类型为喜欢,以及满足条件目标点id大于45,f1是true且权重在129.94到130.43之间的边","g.E().hasLabel('likes').has('targetId', gt(45)).has('f1', true).has('weight', between(129.94, 130.43))"
"返回全部源点label为课程,目标点label为部门,label为教师或大学或部门的边","g.V().hasLabel('course').bothE('teacher', 'university', 'department').where(otherV().hasLabel('department'))"
"请帮我查找所有和订单Order_139有关系的商品,返回这些点的价格,名字,类别","g.V().hasLabel('orders').has('name', 'Order_139').bothE().otherV().hasLabel('goods').project('price', 'name', 'category').by(values('price')).by(values('name')).by(values('category'))"
"找出book的refers,或其refers的refers",g.V().hasLabel('book').repeat(out('refers')).times(2).dedup()
"查找教师徐宏教的课程, 令教师的身高等于教师的id,令课程的价值等于课程的学分, 返回教师的身高, 课程的名字","g.V().has('teacher', 'name', '徐宏').as('a').outE('teach').inV().hasLabel('course').as('b').select('a', 'b').by(project('height', 'name').by('id').by('name')).by(project('value', 'name').by('credit').by('name')).select(values).unfold().project('a.height', 'b.name').by(select('height')).by(select('name'))"
"给出名为陈科和黄若涵的,类型是person的点公共的伙伴节点的名单","g.V().has('person', 'name', '陈科').as('a').outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().has('person', 'name', '黄若涵').as('c').select('b').values('name')"
"请帮我查找书少年闰土的所有引用,的源点id除3的值","g.V().has('book', 'name', '少年闰土').outE('refers').project('result').by(values('srcId').math('_ / 3'))"
" 请帮我查询184个ID小于等于42的Comment,并按照ID从小到大的顺序进行排序。","g.V().hasLabel('comment').has('id', lte(42)).order().by('id', asc).limit(184)"
"请帮我查找名为吴轩的点认识的作家,并对这些作家的身高进行求和","g.V().has('name', '吴轩').outE('knows').inV().hasLabel('author').values('height').sum()"
 找出与何红、黄轩有关的作家节点。,"g.V().has('author', 'name', '何红').bothE('knows').otherV().bothE('knows').otherV().has('author', 'name', '黄轩').path().unfold().hasLabel('author').dedup()"
请帮我查找所有名为杜科的节点发布的读者,"g.V().has('name', '杜科').outE('publish').inV().hasLabel('reader')"
查找以包含关系关联了药品布洛芬的处方,"g.V().has('medicine', 'name', '布洛芬').in('contain').hasLabel('prescription')"
"请帮我找出薪资在6103到7559之间或身高小于等于196的person认识的person的名称,以及这些person 认识的person的名称","g.V().hasLabel('person').has('salary', between(6103, 7559)).union(identity(), __.V().hasLabel('person').has('height', lte(196))).dedup().as('a').outE('knows').as('e').inV().hasLabel('person').as('b').outE('knows').as('e2').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"找出全部源点label为person,边label为父母的边,返回这些边的源点id对源点id取余的值,和权重乘114.29的值","g.V().hasLabel('person').outE('parent').project('expr1', 'expr2').by(values('srcId').math('_ / _')).by(values('weight').math('_ * 114.29'))"
"找出部门法学院拥有的学生, 令部门的价值等于部门的id的平均值,令学生的年龄等于学生的薪资的平均值,令学生的性别等于学生的薪资减2382, 返回部门的id, 学生的id","g.V().has('department', 'name', '法学院').as('a').out('has').as('b').select('a', 'b').by('id').by('id')"
"帮我查询id为171的user publish的post, 并将post有关的forum的id的和赋值给post的name, 接着查询post的name小于171的post has的tag","g.V().has('user', 'id', 171).out('publish').as('b').project('name', 'd').by(__.inE().outV().hasLabel('forum').values('id').sum()).by(__.select('b').out('has').hasLabel('tag')).select('name', 'd')"
"请帮我查找id为168的person有关的loan的relation, 再请帮我查找和loan有关系的friend","g.V().hasLabel('person').has('id', 168).as('a').bothE().otherV().hasLabel('loan').as('b').bothE('relation').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
查询与张红和孙思琪都有关系的所有person节点。,"g.V().has('name', '张红').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '孙思琪').select('b').limit(94)"
"查找label为person的点,返回185个",g.V().hasLabel('person').limit(185)
找出以knows关系关联了person陈轩的person,"g.V().hasLabel('person').has('name', '陈轩').inE('knows').outV().hasLabel('person')"
 返回共同喜欢person标签且名为周若涵和李宏的节点。,"g.V().has('name', '周若涵').outE('likes').inV().hasLabel('person').as('b').inE('likes').outV().has('name', '李宏').select('b')"
" 查询名为Comment_367,标签为comment的点，返回它们的wordCount和id。","g.V().hasLabel('comment').has('name', 'Comment_367').project('wordCount', 'id').by('wordCount').by('id')"
"请帮我找出全部Kafka的点uses的software,然后请帮我找出Kafka被commits的person,一起返回","g.V().has('name', 'Kafka').as('a').outE('uses').inV().hasLabel('software').as('b').select('a').inE('commits').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"使用列为value,lastLoginTime,createTime, 数据为(797,2009-02-05,2027-03-14),(17,2029-09-05,2013-09-19)的子查询作为输入表, 以属性lastLoginTime作为相等条件,查询全部person的relation,或其relation的relation","g.inject([['value':797, 'lastLoginTime':'2009-02-05', 'createTime':'2027-03-14'], ['value':17, 'lastLoginTime':'2029-09-05', 'createTime':'2013-09-19']]).as('p').unfold().as('p_row').select('p_row').by(__.values('lastLoginTime')).as('login_time').V().hasLabel('person').has('lastLoginTime', __.select('login_time')).repeat(__.outE('relation').inV()).times(2).emit().dedup()"
"查询部门拥有的医生, 令医生的身高的值等于拥有医生的部门的权重的最小值, 再查找医生创造的处方","g.V().hasLabel('department').as('a').outE('has').inV().hasLabel('doctor').as('b').sideEffect(__.select('b').sack(assign).by(__.inE('has').outV().hasLabel('department').values('weight').min()).sack()).project('b.height', 'd').by(__.select('b').sack()).by(__.select('b').outE('creates').inV().hasLabel('prescription').as('d').select('d'))"
"查询所有名为李宏的点的,id在48到63之间且创建时间不是2033年11月15日的相关者,返回这些相关者的名字,和边的权重,f0","g.V().has('name', '李宏').outE('relation').as('e').inV().has('id', between(48, 63)).has('createTime', neq('2033-11-15')).project('b.name', 'e.weight', 'e.f0').by(values('name')).by(select('e').values('weight')).by(select('e').values('f0'))"
"查找id为25的点的身高,性别,名字","g.V().has('id', 25).project('height', 'gender', 'name').by('height').by('gender').by('name')"
"请帮我查找所有person的朋友,或其朋友的朋友",g.V().hasLabel('person').outE('friend').inV().hasLabel('person').simplePath().by('id').times(2).emit().dedup().project('b').by(valueMap().with(WithOptions.tokens))
"找出被仓库XXRepo拥有的用户,和XXRepo拥有的合并请求","g.V().hasLabel('repository').has('name', 'XXRepo').as('b').bothE('has').otherV().hasLabel('user').as('a').select('b').bothE('has').otherV().hasLabel('pullRequest').as('c').select('a', 'b', 'c')"
"请帮我查找用户吴强的伙伴,的目标点id除目标点id的值","g.V().has('user', 'name', '吴强').outE('partner').as('e').inV().project('result').by(select('e').values('targetId').math('/ targetId'))"
"请帮我查找名为Zeus的点repay的loan,并对这些loan的id进行求和","g.V().has('name', 'Zeus').outE('repay').inV().hasLabel('loan').values('id').sum()"
"给出和课程有关联的部门节点,并根据其大小分组,返回大小,以及value的最小值除420的平均值","g.V().hasLabel('course').as('a').bothE('belong').as('e').otherV().hasLabel('department').as('b').group().by('size').by(__.project('min_value', 'size').by(__.values('value').min()).by(__.values('size')).select('min_value').math('_ / 420').mean())"
"帮我查询forum推特contain的user,被其他forum contain的数量","g.V().has('forum', 'name', '推特').out('contain').hasLabel('user').in('contain').hasLabel('forum').dedup().count()"
"查询名为体育学院和法学院的,类型是department的点公共的partner节点的名单","g.V().has('department', 'name', '体育学院').outE('partner').inV().as('b').inE('partner').outV().has('department', 'name', '法学院').select('b').values('name')"
"返回被编辑发布数量大于175的书,记为relationCount,再查询这些书发布的编辑","g.V().hasLabel('book').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('publish').hasLabel('publisher').count()).select('a', 'relationCount').as('b').where(__.select('relationCount').is(gt(175))).select('a').out('publish').hasLabel('publisher').dedup()"
请帮我找出所有与马建聪取消的订单有关的商品，并返回这些商品的类别。,"g.V().has('name', '马建聪').outE('cancel').inV().hasLabel('orders').outE('contain').inV().hasLabel('goods').values('category')"
"找出学生选择的课程, 令课程的id的值等于教课程的教师的名字的和, 再查找课程属于的部门","g.V().hasLabel('student').as('a').outE('selects').inV().hasLabel('course').as('b').select('b').project('b_id', 'd').by(coalesce(__.inE('teach').outV().hasLabel('teacher').values('name').sum(), constant(0))).by(outE('belong').inV().hasLabel('department').fold())"
"输入请求点id的列表460,117, 源点的id等于输入表id,查找和药品999感冒灵有关系的病人节点,返回这些点的身高,薪资,性别","g.withSideEffect('p', [460, 117]).V().hasLabel('medicine').has('id', within('p')).has('name', '999感冒灵').bothE().otherV().hasLabel('patient').project('height', 'salary', 'gender').by(values('height')).by(values('salary')).by(values('gender'))"
"请帮我找出id为86的user publish的post, 并将post有关的user的name的个数赋值给post的createTime, 接着查询post的createTime小于86的post has的tag","g.V().has('user', 'id', 86).outE('publish').inV().hasLabel('post').as('b').sideEffect(project('count').by(__.inE().outV().hasLabel('user').values('name').dedup().count()).select('count').property(single, 'createTime')).where(__.values('createTime').is(lt(86))).outE('has').inV().hasLabel('tag').as('d').select('b', 'd').by(values('createTime')).by()"
返回与person李红有喜欢关系的3度以内的环,"g.V().has('person', 'name', '李红').as('a').repeat(bothE('likes').otherV().simplePath()).times(2).emit().where(loops().is(gt(0))).where(eq('a')).path().by('id').by('id')"
"查询person Amily认识的person,被其他公司雇佣的数量","g.V().has('person', 'name', 'Amily').out('knows').in('employee').dedup().count()"
 找出Hadoop中使用的软件。,"g.V().hasLabel('software').has('name', 'Hadoop').out('uses').out('uses').dedup()"
"查找和person吴思琪有拥有关系的账号,再查找以投资关系关联了吴思琪的公司","g.V().hasLabel('person').has('name', '吴思琪').as('a').outE('own').inV().as('b').select('a').inE('invest').outV().as('c').select('a', 'b', 'c')"
"根据id,身高分组,计算薪资加7366的数量","g.V().hasLabel('a').group().by(union(identity().values('id'), identity().values('height')).fold()).by(values('salary').math('_ + 7366').count())"
返回与pullRequest PR-425有belong关系的1跳以内的环,"g.V().has('pullRequest', 'name', 'PR-425').as('a').bothE('belong').bothV().where(neq('a')).dedup().as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
返回黄思琪创建的评论节点所属的电影,"g.V().has('person', 'name', '黄思琪').out('creates').hasLabel('comment').out('belong').hasLabel('film')"
找出与周思思相关的所有学生，以及她所选的其他课程，并将它们返回。,"g.V().has('student', 'name', '周思思').as('a').bothE().otherV().hasLabel('student').as('b').select('a').outE('selects').inV().hasLabel('course').as('c').select('a', 'b', 'c')"
"返回和person王强有关的person,称为X,再返回和这个X有关联的其他person,以及和X有关联的person","g.V().has('person', 'name', '王强').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
找出与徐强和马红都有parent关系的所有点,"g.V().has('person', 'name', '徐强').out('parent').as('b').in('parent').has('person', 'name', '马红').select('b')"
"找出id为199的person commits的software, 并将software有关的person的id的最小值赋值给software的lang, 接着查询software的lang小于199的software uses的software","g.V().hasLabel('person').has('id', 199).outE('commits').inV().hasLabel('software').as('b').sideEffect(select('b').sack(assign).by(constant(0)).sack(min).by(__.inE().bothV().hasLabel('person').values('id')).property('lang', sack())).where(select('b').values('lang').is(lt(199))).outE('uses').inV().hasLabel('software').as('d').select('b', 'd').by('lang').by()"
查找全部和person马若涵之间有buy关系的software,"g.V().hasLabel('person').has('name', '马若涵').outE('buy').inV().hasLabel('software')"
"以142,426,432作为请求点id, 源点的id等于输入表id,查找被person吴梅pay的person","g.inject(142, 426, 432).as('p').V().hasLabel('person').has('id', __.select('p')).as('a').in('person_pay_person').hasLabel('person').has('name', '吴梅').as('b').select('a', 'b')"
获取Order_188包含的商品，这些商品在其他订单中出现的次数。,"g.V().has('orders', 'name', 'Order_188').out('contain').in('contain').hasLabel('orders').dedup().count()"
"返回71个名为王梅的点咨询的类型是卖家的节点,且其id为空","g.V().has('name', '王梅').outE('consult').inV().hasLabel('seller').has('id', eq(null)).limit(71)"
 返回包含药品的处方，其中包含医生创建的点。,g.V().hasLabel('doctor').as('a').outE('creates').as('e').inV().hasLabel('prescription').as('b').outE('contain').as('e2').inV().hasLabel('medicine').as('c').select('c').limit(191)
查找前70个标签为employee的边,g.E().hasLabel('employee').limit(70)
请帮我找出与张建聪和何建国都有关联的55个论坛节点。,"g.V().has('name', '张建聪').outE().inV().hasLabel('forum').as('b').inE().outV().has('name', '何建国').select('b').limit(55)"
"查找issue ISSUE-484 belong的repository,被其他issue belong的数量","g.V().hasLabel('issue').has('name', 'ISSUE-484').outE('belong').inV().hasLabel('repository').inE('belong').outV().hasLabel('issue').count()"
"请帮我查找标签为仓库,名为Tugraph的点,返回这些点的名字","g.V().hasLabel('repository').has('name', 'Tugraph').values('name')"
 返回与贷款点相关的账户节点，并按创建时间对其进行分组。,g.V().hasLabel('loan').bothE('deposit').otherV().hasLabel('account').values('createTime').groupCount()
请帮我查找全部和person孙雪之间有创造关系的评论,"g.V().hasLabel('person').has('name', '孙雪').outE('creates').inV().hasLabel('comment')"
"给出全部和大学复旦大学有关系的城市或大学或公司,返回这些点的id,人数,价值","g.V().has('university', 'name', '复旦大学').bothE().otherV().hasLabel(within('city', 'university', 'company')).project('id', 'peopleNumber', 'value').by(id()).by(values('peopleNumber')).by(values('value'))"
找出与帖子 Post_241 有喜欢关系的用户,"g.V().hasLabel('post').has('name', 'Post_241').in('likes').hasLabel('user')"
获取id为126的course相关的student的关系，然后获取这些student的相关伙伴。,"g.V().has('course', 'id', '126').as('a').bothE().otherV().hasLabel('student').as('b').outE('relation').inV().as('c').select('b').outE('partner').inV().as('d').select('a', 'b', 'c', 'd')"
"帮我查询全部和名为徐月的person有朋友关系,或有朋友的朋友关系的person","g.V().has('person', 'name', '徐月').bothE('friend').bothV().simplePath().hasLabel('person').dedup()"
给出comment Comment_394 belong的film节点has的tag,"g.V().hasLabel('comment').has('name', 'Comment_394').outE('belong').inV().hasLabel('film').outE('has').inV().hasLabel('tag')"
请帮我查找标签等于person的点,g.V().hasLabel('person')
"查找id为81的评论有关的电影的朋友, 再查找和电影有关系的朋友","g.V().has('comment', 'id', 81).as('a').bothE().otherV().hasLabel('film').as('b').bothE('friend').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
"返回名为赵月和徐若涵的,类型是user的点公共的partner节点的名单","g.V().has('user', 'name', '赵月').outE('partner').inV().as('b').inE('partner').outV().has('user', 'name', '徐若涵').select('b').values('name')"
"返回名为郑雪的点的,name不等于黄宏的partner,返回这些partner的id,和边的f0,targetId","g.V().has('name', '郑雪').outE('partner').as('e').inV().has('name', neq('黄宏')).as('b').select('b', 'e').by('id').by(values('f0', 'targetId'))"
"请帮我找出与名为浙江大学和清华大学的点共同belong的,类型是city的节点","g.V().has('name', '浙江大学').out('belong').hasLabel('city').as('b').in('belong').has('name', '清华大学').select('b')"
"以158,121,439,932,158作为请求点id, 以属性id作为相等条件,帮我查询全部名为字节的,金额等于6550.66的相关者,返回这些相关者的金额,和边的f0,目标点id,源点id","g.withSideEffect('p', [158, 121, 439, 932, 158]).V().has('id', within('p')).has('name', '字节').outE('relation').as('e').inV().has('amount', 6550.66).select('e').project('b_amount', 'e_f0', 'e_targetId', 'e_srcId').by(__.select('e').inV().values('amount')).by(__.select('e').values('f0')).by(__.select('e').values('targetId')).by(__.select('e').values('srcId'))"
帮我查询与person郑宏有关系的person的性别,"g.V().has('person', 'name', '郑宏').bothE().otherV().hasLabel('person').values('gender')"
查找满足条件大小大于66的节点,"g.V().has('size', gt(66))"
"给出所有与徐伟存在喜欢关系的person,person与person存在喜欢关系的点,返回这些点的id","g.V().has('name', '徐伟').out('likes').hasLabel('person').out('likes').hasLabel('person').id()"
 少年闰土这本书。,"g.V().hasLabel('book').has('name', '少年闰土')"
"查找person何红knows的person,以及pay这些person的person, 令person(a)的salary等于person(b)的gender, 返回person(a)的height,person(b)的height,person(c)的height","g.V().has('person', 'name', '何红').as('a').out('knows').hasLabel('person').as('b').in('pay').hasLabel('person').as('c').select('a', 'b', 'c').by(coalesce(values('height'), constant('null'))).by(coalesce(values('height'), constant('null'))).by(coalesce(values('height'), constant('null'))).sideEffect(select('a').property('salary', select('b').values('gender')))"
"返回Prescription_157的点contain的medicine,然后返回Prescription_157被accept的patient,一起返回","g.V().has('name', 'Prescription_157').as('a').outE('contain').inV().hasLabel('medicine').as('b').select('a').inE('accept').outV().hasLabel('patient').as('c').select('a', 'b', 'c')"
"帮我查询94个名为陈红的点likes的类型是post的节点,且其lang是French或name是Post_186","g.V().has('name', '陈红').outE('likes').inV().hasLabel('post').or(has('lang', 'French'), has('name', 'Post_186')).limit(94)"
查询与公司蚂蚁集团和滴滴都相关的大学节点。,"g.V().has('company', 'name', '蚂蚁集团').bothE('cooperate').bothV().hasLabel('university').where(bothE('cooperate').bothV().has('company', 'name', '滴滴')).dedup()"
"给出和用户孙若涵有创造关系的合并请求,再给出以创造关系关联了孙若涵的事项","g.V().has('user', 'name', '孙若涵').as('a').outE('creates').inV().hasLabel('pullRequest').as('b').select('a').inE('creates').outV().hasLabel('issue').as('c').select('a', 'b', 'c')"
"帮我查询全部名为CSDN的,语言是French或名字不是Post_384的相关者,返回这些相关者的价值,和边的f1,源点id,权重","g.V().has('name', 'CSDN').outE('relation').as('e').inV().as('b').where(or(__.has('lang', 'French'), __.has('name', neq('Post_384')))).select('b', 'e').by('value').by(project('f1', 'srcId', 'weight').by('f1').by('srcId').by('weight'))"
"找出被作家认识数量大于27的作家,记为relationCount,再查询这些作家认识的读者","g.V().hasLabel('author').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('knows').hasLabel('author').values('id').min()).where(__.select('relationCount').is(gt(27))).select('a').out('knows').hasLabel('reader')"
 取消与买家黄伟的关联订单，再返回已创建的与黄伟有关的订单。,"g.V().has('buyer', 'name', '黄伟').as('a').outE('creates').inV().hasLabel('orders').as('b').select('a').inE('cancel').outV().hasLabel('orders').as('c').select('a', 'b', 'c')"
查询身高大于185cm，按性别升序排序的前162个人。,"g.V().hasLabel('person').has('height', gt(185)).order().by('gender', asc).limit(162)"
"找出和person王轩有喜欢关系的person,再找出以支付关系关联了王轩的person","g.V().has('person', 'name', '王轩').as('a').out('likes').hasLabel('person').as('b').select('a').in('pay').hasLabel('person').as('c').select('a', 'b', 'c')"
"给出person认识的person, 令person(b)的性别的值等于认识person的person的名字的数量, 再查找person喜欢的person","g.V().hasLabel('person').as('a').outE('knows').inV().hasLabel('person').as('b').select('b').sideEffect(project('count').by(__.inE('knows').outV().hasLabel('person').values('name').count()).select('count').store('b_gender')).outE('likes').inV().hasLabel('person').as('d').select('b_gender').as('b.gender').select('d').select('b.gender', 'd')"
"使用列为id,height,gender, 数据为(9,177,'famale'),(55,194,'male'),(54,151,'male'),(6,179,'male')的子查询作为输入表, 源点的height等于输入表height,给出前1个类型为loan_deposit_account的边","g.inject([['id':9,'height':177,'gender':'famale'],['id':55,'height':194,'gender':'male'],['id':54,'height':151,'gender':'male'],['id':6,'height':179,'gender':'male']]).unfold().as('p').V().has('height', __.select('p').select('height')).outE('loan_deposit_account').as('e').limit(1).select('e')"
返回和处方Prescription_270之间有包含关系的药品,"g.V().hasLabel('prescription').has('name', 'Prescription_270').outE('contain').inV().hasLabel('medicine')"
"输入表的列为price,id,category, 数据为(3551.84,71,'水果'),(523.51,15,'食品'),(1869.31,24,'家具'), 源点的category等于输入表category,查询以consult关系关联了seller Amily的buyer","g.inject([['price':3551.84,'id':71,'category':'水果'],['price':523.51,'id':15,'category':'食品'],['price':1869.31,'id':24,'category':'家具']]).as('p').unfold().as('p_row').select('p_row').by().V().hasLabel('seller').has('category', __.select('p_row').select('category')).has('name','Amily').as('a').in('buyer_consult_seller').hasLabel('buyer').as('b').select('b')"
"请帮我找出reader赵思琪likes的book,以及likes这些book的reader","g.V().hasLabel('reader').has('name', '赵思琪').outE('likes').inV().hasLabel('book').as('b').inE('likes').outV().hasLabel('reader').as('c').select('b', 'c')"
"帮我查询全部名为韩国强的,名字不等于吴雪或id小于等于59的伙伴,返回这些伙伴的名字,和边的f1,源点id,权重","g.V().has('name', '韩国强').outE('partner').as('e').inV().as('b').where(or(__.not(has('name', '吴雪')), has('id', lte(59)))).select('b', 'e').by('name').by(project('f1', 'srcId', 'weight').by('f1').by('srcId').by('weight'))"
"请帮我找出80个名为孙强的点has的类型是goods的节点,且其sellerNumber不等于427.43或value不为空","g.V().has('name', '孙强').outE('has').inV().hasLabel('goods').where(or(has('sellerNumber', neq(427.43)), has('value', neq(null)))).limit(80)"
"返回名为loan_79的account或company或loan,以及与其有关的account,并返回loan_79的id和这些account的value","g.V().has(label, within('account', 'company', 'loan')).has('name', 'loan_79').bothE().otherV().has(label, 'account').project('a_id', 'b_value').by(select(all, 'a').id()).by(select(all, 'b').values('value'))"
"查询名为韩雪的publisher,以及与其有关的publisher,并返回韩雪的salary和这些publisher的salary","g.V().has('publisher', 'name', '韩雪').as('a').bothE().otherV().hasLabel('publisher').as('b').select('a', 'b').by('salary')"
找出所有与人有关联的人，以及通过相识关系与其他这些人有关联的人。,"g.V().has('person', 'id', '162').bothE().otherV().hasLabel('person').as('b').inE('knows').otherV().hasLabel('person').as('c').select('b', 'c')"
"根据权重,金额分组,计算id减61的个数","g.V().hasLabel('a').group().by(union(values('weight'), values('amount')).fold()).by(values('id').is(neq(61)).count())"
"请帮我查找185个和标签等于公司的点有雇佣关系的person,并且和这些person有认识关系的person",g.V().hasLabel('company').out('employee').hasLabel('person').out('knows').hasLabel('person').limit(185)
"使用列为id,gender,name, 数据为(77,'famale','李强'),(63,'famale','杜伟'),(54,'male','张若涵')的子查询作为输入表, 源点的name等于输入表name,请帮我找出书的引用,或其引用的引用","g.inject([['id':77,'gender':'famale','name':'李强'],['id':63,'gender':'famale','name':'杜伟'],['id':54,'gender':'male','name':'张若涵']]).unfold().as('p').V().hasLabel('book').has('name', __.select('p').select('name')).as('a').repeat(__.out('book_refers_book')).times(2).emit().as('b').select('b')"
"给出人数不为空,名字等于腾讯,或规格不是small的节点","g.V().or(has('peopleNumber').has('name', '腾讯'), has('scale', neq('small')))"
查询所有类型为标签的点,g.V().hasLabel('tag')
"请帮我找出所有名为郑国强的点的,类别为诗集或创建时间不是2009年11月28日的相关者,返回这些相关者的创建时间,和边的源点id","g.V().has('name', '郑国强').outE('relation').as('e').inV().has('category', '诗集').or().has('createTime', neq('2009-11-28')).select('e').by('srcId').as('srcId').select('inV').by('createTime').as('createTime').select('createTime', 'srcId')"
"返回名为王月的doctor,以及与其有关的department,并返回王月的name和这些department的name","g.V().hasLabel('doctor').has('name', '王月').as('a').bothE().as('e').otherV().hasLabel('department').as('b').select('a', 'b').by('name').by('name')"
 查询person源点与person目标点之间类型为knows的边。,g.V().hasLabel('person').outE('knows').where(inV().hasLabel('person'))
请帮我找出被person何梅属于的公司,"g.V().hasLabel('person').has('name', '何梅').outE('belong').inV().hasLabel('company').as('b', 'a').select('a', 'b')"
 找出同时与黄思琪和徐若涵有关联的人，并返回他们的身高、性别和年龄。,"g.V().has('person', 'name', '黄思琪').outE().inV().hasLabel('person').as('b').inE().outV().has('person', 'name', '徐若涵').select('b').values('height', 'gender', 'age')"
"帮我查询名为推特和中国军事论坛的,标签为forum的点公共的relation节点的名单","g.V().has('forum', 'name', '推特').out('relation').as('b').in('relation').has('forum', 'name', '中国军事论坛').select('b').values('name')"
"返回名为LX001和Faker的,label为账号的点公共的相关者节点的名单","g.V().has('account', 'name', 'LX001').outE('relation').inV().as('b').inE('relation').outV().has('account', 'name', 'Faker').select('b').values('name')"
"给出和事项ISSUE-249有关的用户,再给出和ISSUE-249属于的其他仓库,返回它们","g.V().hasLabel('issue').has('name', 'ISSUE-249').as('a').bothE().otherV().hasLabel('user').as('b').select('a').bothE('belong').otherV().hasLabel('repository').as('c').select('a', 'b', 'c')"
"查询和person点有认识关系的person节点,且边满足条件源点id小于91,目标person节点性别等于famale","g.V().hasLabel('person').as('a').outE('knows').as('e').has('srcId', lt(91)).inV().hasLabel('person').has('gender', 'famale').as('b').select('b')"
"给出137个和label为person的点有knows关系的person,并且和这些person有likes关系的person",g.V().hasLabel('person').as('a').out('knows').hasLabel('person').as('b').out('likes').hasLabel('person').as('c').select('c').limit(137)
 搜索名为'中国军事论坛'的论坛。,"g.V().hasLabel('forum').has('name', '中国军事论坛')"
"请帮我找出类型是consult,且weight大于180或f1为true的边","g.E().hasLabel('consult').or(has('weight', gt(180)), has('f1', true))"
"请帮我找出与company蚂蚁集团有关,且与city深圳有关系的university节点","g.V().hasLabel('company').has('name', '蚂蚁集团').bothE('cooperate').otherV().hasLabel('university').bothE('belong').otherV().hasLabel('city').has('name', '深圳').select('b')"
找出全部标签等于编辑或读者的点,"g.V().hasLabel(within('publisher', 'reader'))"
"查询全部与南京大学存在belong关系的city,city与university存在contain关系的点,返回这些点的id","g.V().has('name', '南京大学').out('belong').hasLabel('city').out('contain').hasLabel('university').id()"
"给出全部源点标签为仓库,边标签为拥有,且满足条件f0的平均值减f0不是117或权重不为空或f1不等于false的边","g.V().hasLabel('repository').as('a').outE('has').as('e').where(or(__.select('e').values('f0').mean().is(neq(117)), __.select('e').values('weight').is(neq(null)), __.select('e').values('f1').is(neq(false)))).select('e')"
"找出48个和类型为国家的点有包含关系的城市,以及和这些城市有包含关系的大学",g.V().hasLabel('country').out('contain').hasLabel('city').out('contain').hasLabel('university').limit(48)
"请帮我查找名为神探狄仁杰的点拥有的全部标签,并对这些标签的id进行求和","g.V().has('name', '神探狄仁杰').out('has').hasLabel('tag').values('id').sum()"
"以(192,'孙思琪','male'),(165,'孙思琪','male'),(172,'Alice','male')作为请求表数据,属性分别为height,name,gender, 源点的gender等于输入表gender,请帮我查找和person杜强之间有person_knows_person关系的person","g.withSideEffect('p', [['height':192, 'name':'孙思琪', 'gender':'male'], ['height':165, 'name':'孙思琪', 'gender':'male'], ['height':172, 'name':'Alice', 'gender':'male']]).V().hasLabel('person').has('gender', within(select('p').unfold().values('gender'))).has('name', '杜强').outE('person_knows_person').inV().hasLabel('person').dedup()"
"请帮我查找121个和标签等于买家的点有咨询关系的卖家,并且和这些卖家有回答关系的买家",g.V().hasLabel('buyer').as('a').outE('consult').as('e').inV().hasLabel('seller').as('b').outE('ask').as('e2').inV().hasLabel('buyer').as('c').select('c').limit(121)
 筛选出180个非冻结且上次登录时间晚于2010年4月15日的账号，并按照是否冻结进行排序。,"g.V().hasLabel('account').has('isBlock', neq(true)).has('lastLoginTime', neq('2010-04-15')).order().by('isBlock', asc).limit(180)"
提供与公司相关的贷款节点，并按权重进行分组，然后返回这些权重。,g.V().hasLabel('company').as('a').bothE('apply').as('e').otherV().hasLabel('loan').as('b').select('b').values('weight').group().by(identity()).by(count())
"使用列为height,gender,id, 数据为(185,'male',88),(154,'famale',14)的子查询作为输入表, 以属性gender作为相等条件,查询与名为Prescription_276和Prescription_463的点共同contain的,类型是medicine的节点","g.withSideEffect('p', [[185, 'male', 88], [154, 'famale', 14]]).V().has('name', 'Prescription_276').as('a').bothE('prescription_contain_medicine').otherV().hasLabel('medicine').as('b').bothE('prescription_contain_medicine').otherV().has('name', 'Prescription_463').as('c').where('a', eq('c')).by('gender').select('b')"
找出department内科has的doctor节点diagnose的patient,"g.V().hasLabel('department').has('name', '内科').out('has').hasLabel('doctor').out('diagnose').hasLabel('patient')"
"以'tp', 'sp', 'Sb'作为输入调用pageRank函数,返回运算结果","g.call('pageRank').with('edges', 'tp').with('property', 'sp').with('graphName', 'Sb').select('id', 'value')"
"查询和大学点有拥有关系的部门节点,且边满足条件源点id大于132,目标部门节点满足条件价值在484到999之间","g.V().hasLabel('university').as('a').outE('has').has('srcId', gt(132)).as('e').inV().hasLabel('department').has('value', between(484, 999)).as('b').select('b')"
查询与person杜若涵有关系的person的年龄,"g.V().has('person', 'name', '杜若涵').bothE().otherV().hasLabel('person').values('age')"
"使用列为name,age,id, 数据为('吴红',43,91),('李若涵',81,93),('何伟',87,77)的子查询作为输入表, 源点的id等于输入表id,给出comment的三角的环,边标签等于comment_belong_film, 并返回这些点的id","g.inject(['吴红', 43, 91], ['李若涵', 81, 93], ['何伟', 87, 77]).as('p').select('p').project('name', 'age', 'id').by(__.limit(1)).by(__.skip(1).limit(1)).by(__.skip(2).limit(1)).select('id').as('inputId').V().hasLabel('comment').has('id', __.where(eq('inputId'))).as('a').outE('comment_belong_film').inV().as('b').outE('comment_belong_film').inV().as('c').where(__.out('comment_belong_film').as('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
查询被department土木学院has的teacher,"g.V().hasLabel('department').has('name', '土木学院').inE('has').outV().hasLabel('teacher').as('b').outE('has').inV().hasLabel('teacher').as('a').select('a', 'b')"
"查询128个name是伦敦的city,根据value从小到大排列","g.V().hasLabel('city').has('name', '伦敦').order().by('value', asc).limit(128)"
"给出被用户创造数量大于53的事项,记为relationCount,再查询这些事项创造的用户","g.V().hasLabel('issue').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('creates').hasLabel('user').id().min()).select('a', 'relationCount').as('a_with_count').select('a_with_count').where(__.select('relationCount').is(gt(53))).select('a').out('creates').hasLabel('user').dedup()"
找出卖家何思琪回答的买家节点取消的订单,"g.V().hasLabel('seller').has('name', '何思琪').as('a').outE('ask').inV().hasLabel('buyer').as('b').outE('cancel').inV().hasLabel('orders').as('c').select('c')"
请帮我查找person张梅认识的person节点认识的person,"g.V().hasLabel('person').has('name', '张梅').out('knows').hasLabel('person').out('knows').hasLabel('person')"
"请帮我找出全部源点满足条件id大于等于49或id大于等于67,且年龄在50到87之间,目标点满足条件金额大于等于1617.44,且标签等于申请的边","g.V().has('id', gte(49)).or(__.has('id', gte(67))).has('age', between(50, 87)).outE('apply').as('e').inV().has('amount', gte(1617.44)).select('e')"
请帮我找出薪资低于7136的前127个人，按照薪资从低到高排序,"g.V().hasLabel('person').has('salary', lt(7136)).order().by('salary', asc).limit(127)"
"帮我查询与person张思琪有关,且与软件Hadoop有关系的软件节点","g.V().has('person', 'name', '张思琪').bothE('commits').bothV().hasLabel('software').bothE('uses').bothV().has('software', 'name', 'Hadoop').select('b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));返回名为复旦大学的大学","g.V().hasLabel('university').has('name', '复旦大学')"
"请帮我找出与doctor徐宏有关,且与doctor王伟有关系的department节点","g.V().has('doctor', 'name', '徐宏').outE('belong').inV().hasLabel('department').as('b').inE('has').outV().has('doctor', 'name', '王伟').select('b')"
 返回和赵宏有关的读者，再返回他发布的其他书。,"g.V().has('publisher', 'name', '赵宏').as('a').bothE().otherV().hasLabel('reader').as('b').select('a').outE('publish').otherV().hasLabel('book').as('c').select('a', 'b', 'c')"
"请帮我查找label为公司的点,返回73个",g.V().hasLabel('company').limit(73)
"请帮我找出全部郑月的点likes的repository,然后请帮我找出郑月被has的repository,一起返回","g.V().has('name', '郑月').as('a').outE('likes').inV().hasLabel('repository').as('b').select('a').inE('has').outV().hasLabel('repository').as('c').select('a', 'b', 'c')"
"给出身高加164不等于38或id小于4的学生选择的课程的名称,以及这些课程 属于的部门的名称","g.V().hasLabel('student').has('height', neq(-126)).or(has('id', lt(4))).outE('selects').inV().hasLabel('course').as('b').outE('belong').inV().hasLabel('department').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
查找以拥有关系关联了医生张宏的部门,"g.V().hasLabel('doctor').has('name', '张宏').in('has').hasLabel('department')"
 找出同时与book呐喊和book三体有引用关系的节点，返回这些节点的category、name、book呐喊的createTime、book三体的name。,"g.V().has('book', 'name', '呐喊').as('a').outE('refers').inV().hasLabel('book').as('b').inE('refers').outV().has('book', 'name', '三体').as('c').select('a', 'b', 'c').by('createTime').by(values('category', 'name')).by('name').project('a.createTime', 'b.category', 'b.name', 'c.name').by(select('a')).by(select('b').select('category')).by(select('b').select('name')).by(select('c'))"
返回徐月喜欢的帖子及其拥有的标签的ID和名称。,"g.V().has('user', 'name', '徐月').out('likes').hasLabel('post').out('has').hasLabel('tag').project('id', 'name').by(values('id')).by(values('name'))"
"返回标签为user,名为孙强的点,返回这些点的id,age","g.V().hasLabel('user').has('name', '孙强').project('a.id', 'a.age').by('id').by('age')"
给出所有名为赵科的点支付的person,"g.V().has('name', '赵科').outE('pay').inV().hasLabel('person')"
 找处方纸Prescription_258。,"g.V().hasLabel('prescription').has('name', 'Prescription_258')"
 返回与中国军事论坛有包含关系且拥有悬疑标签的帖子节点，包括帖子ID、字数、人数以及中国军事论坛中该帖子的数量和悬疑标签的ID。,"g.V().has('forum', 'name', '中国军事论坛').as('a').out('contain').hasLabel('post').as('b').in('has').has('tag', 'name', '悬疑').as('c').select('a', 'b', 'c').by('peopleNumber').by(values('value', 'id', 'wordCount')).by('id')"
"请帮我找出名为Sam的作家,以及与其有关的读者,并返回Sam的性别和这些读者的名字","g.V().hasLabel('author').has('name', 'Sam').as('a').bothE().as('e').otherV().hasLabel('reader').as('b').select('a', 'b').by('gender').by('name')"
"输入表的列为salary,gender,age, 数据为(6349,'famale',76),(1116,'male',63),(9932,'male',66), 源点的salary等于输入表salary,查找和company有关联的person节点,并根据其name,salary,height分组,返回name,salary,height,以及age加2的最大值","g.withSideEffect('p', [['salary': 6349, 'gender': 'famale', 'age': 76], ['salary': 1116, 'gender': 'male', 'age': 63], ['salary': 9932, 'gender': 'male', 'age': 66]]).V().hasLabel('company').as('a').where(__.select('a').values('salary').is(within(__.select('p').unfold().values('salary')))).bothE('company_employee_person').otherV().hasLabel('person').as('b').group().by(__.select('b').choose(__.values('name').is(neq(null)), __.values('name'), __.constant('null')).by(__.select('b').choose(__.values('salary').is(neq(null)), __.values('salary'), __.constant('null'))).by(__.select('b').choose(__.values('height').is(neq(null)), __.values('height'), __.constant('null')))).by(__.select('b').values('age').math('_ + 2').max()).unfold().project('name', 'salary', 'height', 'max_age_plus_2').by(__.select(keys).select('name')).by(__.select(keys).select('salary')).by(__.select(keys).select('height')).by(__.select(values))"
返回所有与电影星际穿越有关系的person的身高,"g.V().hasLabel('film').has('name', '星际穿越').bothE().otherV().hasLabel('person').values('height')"
"请帮我找出标签为合作,并且满足条件f0不为空的边","g.E().hasLabel('cooperate').has('f0', neq(null))"
"使用列为age,id,salary, 数据为(71,81,3552)的子查询作为输入表, 源点的id等于输入表id,帮我查询名为知乎的点包含的person,并对这些点的薪资进行求和","g.withSideEffect('p', [['age':71, 'id':81, 'salary':3552]]).V().has('id', __.select('p').unfold().select('id')).has('name', '知乎').outE('forum_contain_person').inV().hasLabel('person').values('salary').sum()"
查询以支付关系关联了person吴国强的person,"g.V().hasLabel('person').has('name', '吴国强').inE('pay').outV().dedup()"
"查找city belong的country, 令country的value的值等于belongcountry的city的value的平均值, 再查找country contain的city","g.V().hasLabel('city').as('a').outE('belong').inV().hasLabel('country').as('b').sideEffect(__.select('b').aggregate('countryNodes')).select('b').map(__.select('b').coalesce(__.project('value').by(__.in('belong').hasLabel('city').values('value').mean()), __.constant(null))).as('b_value').select('b').out('contain').hasLabel('city').as('d').select('b_value', 'd')"
"查找名为内科的点拥有的全部医生,并对这些医生的id进行求和","g.V().has('name', '内科').out('has').hasLabel('doctor').values('id').sum()"
"返回标签为接受,以及f1不等于false或源点id是157的边","g.E().hasLabel('accept').filter(or(has('f1', neq(false)), has('srcId', 157)))"
"返回id为192的部门拥有的学生, 并将学生有关的教师的性别的最大值赋值给学生的身高, 接着查询学生的身高小于192的学生选择的课程","g.V().has('department', 'id', 192).out('has').hasLabel('student').as('b').project('b', 'height').by(__.identity()).by(__.bothE().otherV().hasLabel('teacher').values('gender').max()).as('p').select('b', 'height').where(__.select('height').is(lt(192))).out('selects').hasLabel('course').project('height', 'd').by(__.select('height')).by(__.identity())"
帮我找出与黄雪有关联的支付人员，以及与黄雪有关联的所有人员,"g.V().has('person', 'name', '黄雪').as('a').outE('pay').inV().hasLabel('person').as('b').select('a').inE('pay').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"请帮我找出喜欢仓库Tugraph的用户,和这些用户喜欢的仓库","g.V().has('repository', 'name', 'Tugraph').as('a').in('likes').as('b').out('likes').as('c').select('b', 'c')"
"输入请求点id的列表273,841,648, 源点的id等于输入表id,请帮我找出与person徐月有关系的person的id","g.inject([273, 841, 648]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('name', '徐月').bothE().otherV().hasLabel('person').values('id')"
"请帮我查找作家撰写的书,返回其源点的身高对191取余的最大值,以及目标点的id加81的和","g.V().hasLabel('author').as('a').outE('write').inV().hasLabel('book').as('b').select('a', 'b').by(values('height')).by(values('id')).project('max_height_mod', 'sum_id_plus').by(select('a').math('_ % 191').max()).by(select('b').math('_ + 81').sum())"
"查询认识person马雪的person,和这些person提交的软件","g.V().has('person', 'name', '马雪').in('knows').as('b').out('commits').as('c').select('b', 'c')"
"找出id为102的买家咨询的卖家, 并将卖家有关的商品的价格的平均值赋值给卖家的性别, 接着查询卖家的性别小于102的卖家拥有的商品","g.V().hasLabel('buyer').has('id', 102).outE('consult').inV().hasLabel('seller').as('b').project('b', 'gender').by(__.identity()).by(__.outE().inV().hasLabel('goods').values('price').mean()).as('result').select('result').where(__.select('gender').is(lt(102))).select('b').outE('has').inV().hasLabel('goods').as('d').select('b', 'd').by('gender').by()"
"返回全部id为61的company关联的software,和以commits关系关联了这些software的其他person","g.V().hasLabel('company').has('id', 61).bothE().otherV().hasLabel('software').as('b').inE('commits').otherV().hasLabel('person').as('c').select('b', 'c')"
"请帮我查找全部id为29的用户关联的事项,和以拥有关系关联了这些事项的其他仓库","g.V().has('user', 'id', 29).bothE().otherV().hasLabel('issue').as('b').inE('has').otherV().hasLabel('repository').as('c').select('b', 'c')"
"请帮我找出与南京大学存在合作关系的公司,公司与大学存在合作关系的点,返回这些点的id","g.V().has('name', '南京大学').outE('cooperate').inV().hasLabel('company').outE('cooperate').inV().hasLabel('university').id()"
"以887作为请求点id, 以属性id作为相等条件,返回前14个类型为account_repay_loan的边","g.V().has('id', 887).outE('account_repay_loan').limit(14)"
"使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));查询名为吴雪和孙强的,类型是用户的点公共的朋友节点的名单","g.V().has('user', 'name', '吴雪').out('friend').as('b').in('friend').has('user', 'name', '孙强').select('b').values('name')"
"输入请求点id的列表652, 源点的id等于输入表id,返回名为浙江大学和重庆大学的,label为大学的点公共的朋友节点的名单","g.withSideEffect('p', [652]).V().hasLabel('university').as('a').where(and(__.select('a').values('id').is(eq(__.select('p'))), __.select('a').has('name', '浙江大学'))).out('friend').as('b').in('friend').hasLabel('university').as('c').where(__.select('c').has('name', '重庆大学')).select('b').values('name')"
 请帮我查询有关id为105的人的评论的朋友，以及与评论相关的其他相关者。,"g.V().has('person', 'id', '105').as('a').bothE().as('e').otherV().hasLabel('comment').as('b').bothE('friend').as('e2').otherV().as('c').select('b').bothE('relation').as('e3').otherV().as('d').select('a', 'b', 'c', 'd')"
"帮我查询与person黄科有关系的person, 返回和这些person有关联的person的,年龄减64的值","g.V().has('person', 'name', '黄科').bothE().otherV().hasLabel('person').bothE().otherV().hasLabel('person').values('age').math('_ - 64')"
"以356,272,51,322作为请求点id, 源点的id等于输入表id,帮我查询和reader有关联的book节点,并根据其name分组,返回name,以及price乘70除90乘85的值","g.inject([356, 272, 51, 322]).unfold().as('p').V().hasLabel('reader').has('id', __.select('p')).outE('reader_likes_book').inV().hasLabel('book').as('b').select('b').by('name').by(__.math('price * 70 / 90 * 85')).group().by(__.select('name')).by(__.select('math').fold())"
给出所有与大学武汉大学有关系的学生的性别,"g.V().has('university', 'name', '武汉大学').bothE().otherV().hasLabel('student').values('gender')"
"查询名为周宏的读者,以及与其有关的作家,并返回周宏的身高和这些作家的性别","g.V().has('reader', 'name', '周宏').as('a').bothE().otherV().hasLabel('author').as('b').select('a', 'b').by('height').by('gender')"
"请帮我找出所有comment的partner,或者它们的伙伴","g.V().hasLabel('comment').outE('partner').inV().range(1, 2).dedup()"
"帮我查询源点id为空,边label为朋友,且满足条件目标点id是174或权重不为空或源点id在69到79之间的边,返回这些边的srcId的平均值加181的值","g.V().has('id', null).outE('friend').where(or(has('targetId', 174), has('weight', neq(null)), has('srcId', between(69, 79)))).values('srcId').mean().math('_ + 181')"
"以765作为请求点id, 以属性id作为相等条件,查询reader陈轩的全部标签为partner的边,并根据targetId从小到大排列,返回2个","g.withSideEffect('p_id', 765).V().hasLabel('reader').has('id', __.constant('p_id')).has('name', '陈轩').outE('partner').order().by('targetId').inV().limit(2)"
返回名为周思琪的点撰写的书,"g.V().has('name', '周思琪').outE('write').inV().hasLabel('book')"
 请找出与帖子Post_444拥有关联的标签，以及这些标签是如何与Post_444相关的。,"g.V().hasLabel('post').has('name', 'Post_444').as('a').bothE('has').as('e', 'e2').otherV().hasLabel('tag').as('b', 'c').select('a', 'b', 'c')"
返回城市中按人数排序的点,"g.V().hasLabel('city').order().by('peopleNumber', Order.asc)"
"查询全部何雪的点选择的课程,然后查询何雪被拥有的部门,一起返回","g.V().has('name', '何雪').as('a').outE('selects').inV().hasLabel('course').as('b').select('a').inE('has').outV().hasLabel('department').as('c').select('a', 'b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));给出用户的相关者,或其相关者的相关者","g.V().hasLabel('user').as('a').outE('relation').inV().hasLabel('user').range(1, 2).as('b').select('b')"
请帮我查找以关联关系关联了person杜建国的person,"g.V().hasLabel('person').has('name', '杜建国').inE('relates').outV()"
"输入请求点id的列表442,237, 源点的id等于输入表id,查询32个name为孙轩的person,根据salary从小到大排列","g.inject([442, 237]).unfold().as('p').V().hasLabel('person').as('a').where(eq('p')).by('id').by().has('name', '孙轩').order().by('salary', asc).limit(32).select('a')"
找出与'赵强'有关的人，然后找出这些人的同事，并返回他们。,"g.V().has('person', 'name', '赵强').as('a').bothE().otherV().hasLabel('person').as('b').select('a').bothE('colleague').otherV().hasLabel('person').as('c').select('a', 'b', 'c')"
找出与孙思思有knows关系的人，然后再找出这些人中与孙思思有likes关系的人。,"g.V().has('person', 'name', '孙思思').as('a').out('knows').as('b').select('a').in('likes').as('c').select('a', 'b', 'c')"
返回陈雪认识的人的身高、ID和姓名。,"g.V().has('person', 'name', '陈雪').outE('relates').inV().hasLabel('person').outE('knows').inV().hasLabel('person').project('height', 'id', 'name').by('height').by('id').by('name')"
查询和person韩月之间有knows关系的person,"g.V().hasLabel('person').has('name', '韩月').outE('knows').inV().hasLabel('person')"
"查询person喜欢的评论, 令评论的创建时间的值等于创造评论的person的名字的最小值, 再查找评论属于的电影","g.V().hasLabel('person').as('a').outE('likes').hasLabel('likes').inV().hasLabel('comment').as('b').project('b', 'createTime').by(identity()).by(__.inE('creates').hasLabel('creates').outV().hasLabel('person').values('name').min()).select('b', 'createTime').as('b_with_time').select('b').outE('belong').hasLabel('belong').inV().hasLabel('film').as('d').select('b_with_time').select('createTime', 'd')"
"用如下schema的图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));找出和company字节有关的city,称为X,再找出和这个X有关联的其他company,以及和X有关联的country","g.V().hasLabel('company').has('name', '字节').as('a').bothE().otherV().hasLabel('city').as('b').bothE().otherV().hasLabel('company').as('c').select('b').bothE().otherV().hasLabel('country').as('d').select('a', 'b', 'c', 'd')"
请帮我查找前99个满足条件age为空且gender等于famale的person,"g.V().hasLabel('person').has('gender', 'famale').hasNot('age').limit(99)"
"查询名为人人影城的,类别不是悬疑或类别不等于文艺的伙伴,返回这些伙伴的名字,和边的权重,目标点id,f1","g.V().has('name', '人人影城').outE('partner').as('e').inV().as('b').where(__.or(__.not(__.has('category', '悬疑')), __.not(__.has('category', '文艺')))).select('b', 'e').by('name').by(__.project('weight', 'targetId', 'f1').by('weight').by(__.inV().id()).by('f1'))"
查询person的2度的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(2).where(loops().is(2)).where(eq('a')).by(T.id).path().by(T.id).project('a.id', 'b_id').by(limit(local, 1)).by(tail(local, 1))"
"给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));返回病人韩若涵的所有伙伴,的目标点id除142减187.47的值","g.V().has('patient', 'name', '韩若涵').outE('partner').as('e').inV().project('result').by(__.select('e').values('targetId').math('/ 142 - 187.47'))"
"帮我查询被person喜欢数量大于80的person,记为relationCount,再查询这些person喜欢的person","g.V().hasLabel('person').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('likes').hasLabel('person').id().mean()).select('a', 'relationCount').as('a_with_count').select('a_with_count').where(__.select('relationCount').is(gt(80))).select('a').out('likes').hasLabel('person').dedup()"
"以821,26,441作为请求点id, 源点的id等于输入表id,查询满足条件id等于22的节点","g.inject([821, 26, 441]).unfold().as('p').V().has('id', __.where(eq('p'))).has('id', 22)"
 请帮我找到所有部门的同事，以及他们各自的同事。,"g.V().hasLabel('department').as('a').outE('partner').as('e').inV().range(1, 2).as('b').select('b')"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));返回所有和company Bilibili有2跳关系的software","g.V().has('company', 'name', 'Bilibili').repeat(bothE().otherV().simplePath()).times(2).hasLabel('software').dedup()"
 找出周建聪认识的人和他创建的软件。,"g.V().has('person', 'name', '周建聪').as('a').out('knows').hasLabel('person').as('b').select('a').V().has('company', 'name', '谷歌').as('c').out('creates').hasLabel('software').as('d').select('a', 'b', 'c', 'd')"
"以78作为输入调用personalRank函数,返回id, value","g.call('PERSONALRANK').with('input', 78).project('id', 'value').by(__.select('id')).by(__.select('value'))"
 找寻《少年足球》电影中伙伴的相关者。,"g.V().hasLabel('film').has('name', '少年足球').out('friend').out('partner').out('relation').dedup()"
"请帮我找出名为吴雪的person,以及与其有关的person,并返回吴雪的gender和这些person的name","g.V().has('person', 'name', '吴雪').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('gender').by('name')"
"以697,233,516,381作为请求点id, 以属性id作为相等条件,返回全部和名为王月的person有父母关系,或有父母的父母关系的person","g.inject([697, 233, 516, 381]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).filter(__.has('name', '王月')).repeat(__.out('person_parent_person')).times(2).emit().dedup()"
"请帮我查找所有和软件点有使用关系的软件节点,且边满足条件源点id大于134,目标软件节点名字不是SprintBoot","g.V().hasLabel('software').as('a').outE('uses').has('srcId', gt(134)).as('e').inV().hasLabel('software').has('name', neq('SprintBoot')).as('b').select('b')"
请帮我查找前13个类型为喜欢的边,g.E().hasLabel('likes').limit(13)
"查找类型为用户的点,返回101个",g.V().hasLabel('user').limit(101)
请帮我查找类型为patient，名字为Jack的所有点，并返回它们的gender和height信息。,"g.V().hasLabel('patient').has('name', 'Jack').project('gender', 'height').by(values('gender')).by(values('height'))"
"返回所有和合并请求PR-438有关系的事项或合并请求或仓库,返回这些点的名字","g.V().has('pullRequest', 'name', 'PR-438').bothE().otherV().hasLabel(within('issue', 'pullRequest', 'repository')).values('name')"
"以('male',13,168)作为请求表数据,属性分别为gender,id,height, 源点的height等于输入表height,找出person赵月的relation,的targetId的平均值加186的值","g.withSideEffect('p', [['gender': 'male', 'id': 13, 'height': 168]]).V().hasLabel('person').has('height', __.select('p').unfold().select('height')).has('name', '赵月').outE('relation').values('targetId').mean().math('_ + 186')"
"以211,203,739作为请求点id, 源点的id等于输入表id,找出名为BIN的点transfer的account,并对这些点的value进行求和","g.inject([211, 203, 739]).as('p').V().has('id', within('p')).has('name', 'BIN').outE('account_transfer_account').inV().hasLabel('account').values('value').sum()"
帮我查询与作家李科有关系的编辑的年龄,"g.V().has('author', 'name', '李科').bothE().otherV().hasLabel('publisher').values('age')"
找出徐伟认识的作家及其撰写的书籍信息，包括字数、ID和名称。,"g.V().has('author', 'name', '徐伟').out('knows').hasLabel('author').out('write').hasLabel('book').project('wordCount', 'id', 'name').by('wordCount').by('id').by('name')"
"找出所有forum的friend,或其friend的friend","g.V().hasLabel('forum').out('friend').range(1, 2).dedup()"
"给出论坛百度贴吧包含的用户,被其他论坛包含的数量","g.V().has('forum', 'name', '百度贴吧').out('contain').in('contain').hasLabel('forum').dedup().count()"
"帮我查询所有person的relation,或其relation的relation",g.V().hasLabel('person').outE('relation').inV().hasLabel('person').outE('relation').inV().hasLabel('person').dedup()
查找name的最大值大于55的节点,g.V().group().by().by(values('name').max()).unfold().filter(select(values).is(gt(55))).select(keys)
"查找被student selects数量大于108的course,记为relationCount,再查询这些course selects的university","g.V().hasLabel('course').as('a').project('node', 'relationCount').by(identity()).by(__.in('selects').hasLabel('student').id().min()).select('node', 'relationCount').where(__.select('relationCount').is(gt(108))).select('node').out('selects').hasLabel('university').dedup()"
"使用列为srcId,f0,f1, 数据为(42,900,true)的子查询作为输入表, 源点的f0等于输入表f0,查询标签等于forum_contain_post,并且f1是true,f1不等于false且权重大于105.47的边","g.withSideEffect('p', [['srcId':42, 'f0':900, 'f1':true]]).V().has('f0', __.select('p').unfold().values('f0')).outE('forum_contain_post').has('f1', true).has('f1', neq(false)).has('weight', gt(105.47))"
"以795,319,518作为请求点id, 源点的id等于输入表id,返回名为微软的点cooperate的university","g.inject([795, 319, 518]).unfold().as('p').V().has('id', __.select('p')).has('name', '微软').outE('company_cooperate_university').inV().hasLabel('university').dedup()"
"输入表的列为id,scale,name, 数据为(96,'small','华为'),(52,'medium','阿里'),(93,'large','蚂蚁集团'),(72,'medium','谷歌'), 源点的scale等于输入表scale,帮我查询id为143的person有关的person的partner, 再帮我查询和person有关系的friend","g.inject([['id':96,'scale':'small','name':'华为'],['id':52,'scale':'medium','name':'阿里'],['id':93,'scale':'large','name':'蚂蚁集团'],['id':72,'scale':'medium','name':'谷歌']]).as('p').V().hasLabel('person').has('id', '143').as('a').where(__.as('a').values('scale').as('a_scale').select('p').unfold().where(__.as('p_row').select('scale').where(eq('a_scale'))).count().is(gt(0))).bothE().otherV().hasLabel('person').as('b').outE('partner').otherV().as('c').select('b').outE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
找到孙梅认识的所有作者，返回这些作者的名字、身高和ID。,"g.V().has('author', 'name', '孙梅').out('knows').out('knows').project('name', 'height', 'id').by('name').by('height').by('id')"
"帮我查询id为184的事项关联的事项,和以拥有关系关联了这些事项的其他仓库","g.V().hasLabel('issue').has('id', 184).bothE().otherV().hasLabel('issue').as('b').inE('has').otherV().hasLabel('repository').as('c').select('b', 'c')"
帮我查询与book白夜行有关系的reader的name,"g.V().hasLabel('book').has('name', '白夜行').bothE().otherV().hasLabel('reader').values('name')"
获取department耳鼻喉科的doctor节点诊断的patient,"g.V().hasLabel('department').has('name', '耳鼻喉科').out('has').hasLabel('doctor').out('diagnose').hasLabel('patient')"
找到与赵轩和韩轩都有parent关系的人，并返回他们的薪水、年龄以及赵轩的年龄和韩轩的ID。,"g.V().has('person', 'name', '赵轩').as('a').out('parent').hasLabel('person').as('b').in('parent').has('person', 'name', '韩轩').as('c').select('a', 'b', 'c').by('age').by(values('salary', 'age')).by('id')"
 找出赵雪读者与书呐喊之间的关联，并返回它们两者之间的关联ID。,"g.V().has('reader', 'name', '赵雪').outE().as('e').inV().has('book').as('b').inE().as('e2').outV().has('book', 'name', '呐喊').select('b').values('id')"
 返回所有与买家吴雪存在取消关系且商品苹果包含的订单，并返回每个订单的名称、ID、价值、买家吴雪的名称以及商品苹果的价值。,"g.V().has('buyer', 'name', '吴雪').as('a').outE('cancel').inV().hasLabel('orders').as('b').inE('contain').outV().has('goods', 'name', '苹果').as('c').select('a', 'b', 'c').by('name').by(values('name', 'id', 'value')).by('value').project('a_name', 'b_name', 'b_id', 'b_value', 'c_value').by(select('a')).by(select('b').select('name')).by(select('b').select('id')).by(select('b').select('value')).by(select('c'))"
"帮我查询病人周思思接受的处方,以及创造这些处方的医生","g.V().hasLabel('patient').has('name', '周思思').outE('accept').inV().hasLabel('prescription').as('b').inE('creates').outV().hasLabel('doctor').as('c').select('b', 'c')"
 查询订单号为Order_236的订单。,"g.V().hasLabel('orders').has('name', 'Order_236')"
按性别分组作者的身高，然后按照身高降序排列。,"g.V().hasLabel('author').group().by('gender').by(values('height').fold()).order(local).by(values, desc)"
'找到滴滴公司申请的贷款',"g.V().hasLabel('company').has('name', '滴滴').as('b').outE('apply').as('e').inV().hasLabel('loan').as('a').select('a', 'b')"
返回前72个类型是属于的边,g.E().hasLabel('belong').limit(72)
 请帮我查询与某个大学相关的所有课程，以及这些课程的其他授课教师。,"g.V().has('university', 'id', '79').bothE().otherV().hasLabel('course').as('b').inE('teach').otherV().hasLabel('teacher').as('c').select('b', 'c')"
查询与学生周强有has关系的部门,"g.V().hasLabel('student').has('name', '周强').inE('has').outV().hasLabel('department')"
"请帮我查找与部门内科存在拥有关系,且与病人郑伟存在诊断关系的医生节点，返回这些医生的年龄,身高,名字,及部门内科的id,及病人郑伟的身高","g.V().has('department', 'name', '内科').as('a').out('has').hasLabel('doctor').as('b').in('diagnose').has('patient', 'name', '郑伟').as('c').select('a', 'b', 'c').by('id').by(values('age', 'height', 'name')).by('height')"
"查询account transfer的account,返回其源点的value加924乘32的值,以及目标点的id加19的求和值","g.V().hasLabel('account').as('a').outE('transfer').as('e').inV().hasLabel('account').as('b').project('expr1', 'sum_expr2').by(__.select('a').values('value').math('_ + 924').math('_ * 32')).by(__.select('b').values('id').math('_ + 19').sum())"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找label为person_colleague_person,以及满足条件权重小于183.54的边","g.E().hasLabel('person_colleague_person').has('weight', lt(183.54))"
查询所有名为孙红的点likes的person,"g.V().has('name', '孙红').outE('likes').inV().hasLabel('person')"
"请帮我查找全部源点标签等于医生,边标签等于创造,以及f0不是109.06或f0在771到813之间,且权重小于180.81的边","g.V().hasLabel('doctor').outE('creates').has('weight', lt(180.81)).has('f0', neq(109.06)).or(has('f0', between(771, 813))).elementMap()"
给出前85个label为雇佣的边,g.E().hasLabel('employee').limit(85)
查询所有名为徐伟的节点teach的department或teacher,"g.V().has('name', '徐伟').outE('teach').inV().hasLabel(within('department', 'teacher')).dedup()"
 找出陈思思医生的诊断患者和周国强患者的处方，返回它们。,"g.V().hasLabel('doctor').has('name', '陈思思').as('a').outE('diagnose').inV().hasLabel('patient').as('b').select('a').V().hasLabel('patient').has('name', '周国强').as('c').outE('accept').inV().hasLabel('prescription').as('d').select('a', 'b', 'c', 'd')"
"给出173个名为艺术学院的点拥有的类型为教师的节点,且其id为空或名字不等于徐若涵","g.V().has('name', '艺术学院').outE('has').inV().hasLabel('teacher').filter(or(has('id', eq(null)), has('name', neq('徐若涵')))).limit(173)"
"调用triangleCount函数,以'rk'作为输入,返回number","g.call('triangleCount').with('input', 'rk').select('number')"
"找出和标签等于大学的点有拥有关系的部门,以及和这些部门有拥有关系的学生,以及和这些学生有选择关系的课程",g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('student').out('selects').hasLabel('course')
"输入请求点id的列表256, 以属性id作为相等条件,请帮我查找和医生李强之间有doctor_creates_prescription关系的处方","g.V().hasLabel('doctor').has('id', 256).has('name', '李强').outE('doctor_creates_prescription').inV().hasLabel('prescription')"
 找到100个与公司有关联的人，并找出与这些人有关联的其他人。,g.V().hasLabel('company').as('a').outE('employee').as('e').inV().hasLabel('person').as('b').outE('knows').as('e2').inV().hasLabel('person').as('c').select('c').limit(100)
查询与蚂蚁集团所在城市有关联的城市,"g.V().has('company', 'name', '蚂蚁集团').in('contain').hasLabel('city')"
"请帮我找出用户黄宏喜欢的帖子,被其他用户喜欢的数量","g.V().has('user', 'name', '黄宏').out('likes').as('b').in('likes').as('c').select('c').dedup().count()"
 帮我找陈思琪。,"g.V().hasLabel('person').has('name', '陈思琪')"
 查询与类型为'person'的点有'parent'关系的'person'，以及这些'person'的'parent'关系，以及这些'person'的'colleague'关系。,g.V().hasLabel('person').as('a').outE('parent').inV().hasLabel('person').as('b').outE('parent').inV().hasLabel('person').as('c').outE('colleague').inV().hasLabel('person').as('d').select('d')
"返回编辑发布的书,返回其源点的id加20的平均值,以及目标点的字数对365取余的值","g.V().hasLabel('publisher').as('a').outE('publish').as('e').inV().hasLabel('book').as('b').project('avg_id_plus_20', 'word_count_mod_365').by(__.select('a').values('id').math('_ + 20').mean()).by(__.select('b').values('wordCount').math('_ % 365'))"
"以651,238,23,492作为请求点id, 源点的id等于输入表id,查询和标签为person的点有person_likes_comment关系的评论,并且和这些评论有comment_belong_film关系的电影,并且和这些电影有film_has_tag关系的标签","g.inject([651, 238, 23, 492]).as('p').flatMap(select('p').unfold().as('id')).V().hasLabel('person').as('a').where(eq('id')).by('id').by(select('id')).outE('person_likes_comment').as('e').inV().hasLabel('comment').as('b').outE('comment_belong_film').as('e2').inV().hasLabel('film').as('c').outE('film_has_tag').as('e3').inV().hasLabel('tag').as('d').select('d')"
找出所有user徐梅和杜月都喜欢的点,"g.V().has('user', 'name', '徐梅').out('likes').as('b').in('likes').has('user', 'name', '杜月').select('b')"
"请帮我查找所有与patient有关系的medicine节点,且medicine节点的id在50到85之间,并返回这些medicine的weight的最小值对571取余乘48的值,以及medicine的weight的和除weight的数量","g.V().hasLabel('patient').as('a').outE().as('e').inV().hasLabel('medicine').has('id', between(50, 85)).as('b').select('b').values('weight').fold().project('min_weight_mod', 'count_sum_div').by(select(all, 'weight').min().math('_ % 571 * 48')).by(select(all, 'weight').sum().math('_ / size()'))"
给所有大学的朋友，或者他们的朋友的朋友。,"g.V().hasLabel('university').out('friend').range(1, 2).dedup()"
"请帮我查找与用户何宏存在创造关系,且与仓库XXRepo存在属于关系的事项节点，返回这些事项的状态,创建时间,及用户何宏的身高,及仓库XXRepo的权重","g.V().has('user', 'name', '何宏').as('a').out('creates').as('b').in('belong').has('repository', 'name', 'XXRepo').as('c').select('a', 'b', 'c').by('height').by(values('status', 'createTime')).by('weight')"
"查询名字是kate且年龄为空的卖家回答的买家的名称,以及这些买家 查看的商品的名称","g.V().hasLabel('seller').has('name', 'kate').has('age', eq(null)).outE('ask').inV().hasLabel('buyer').as('b').outE('look').inV().hasLabel('goods').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"输入请求点id的列表61,326,686,722,100, 源点的id等于输入表id,给出user黄轩的所有类型为relation的边,并根据weight升序排列,返回81个","g.withSideEffect('p', [61, 326, 686, 722, 100]).V().hasLabel('user').where(__.values('id').is(within('p'))).has('name', '黄轩').outE('relation').order().by('weight', asc).limit(81).inV()"
查询前72个标签等于contain的边,g.E().hasLabel('contain').limit(72)
"查找全部买家的朋友,或其朋友的朋友",g.V().hasLabel('buyer').repeat(bothE('friend').otherV().simplePath()).times(2).dedup()
请帮我查找全部标签为作家或书的点,"g.V().hasLabel(within('author', 'book'))"
"查询id小于等于13且名字不等于Sam的用户发布的帖子的名称,以及这些帖子 拥有的标签的名称","g.V().hasLabel('user').has('id', lte(13)).has('name', neq('Sam')).outE('publish').inV().hasLabel('post').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"帮我查询department呼吸科has的doctor,被其他department has的数量","g.V().has('department', 'name', '呼吸科').out('has').in('has').hasLabel('department').dedup().count()"
找出所有与大学相关的部门，以及与其他大学有拥有关系的这些部门。,"g.V().hasLabel('university').has('id', '197').bothE().otherV().hasLabel('department').as('b').inE('has').otherV().hasLabel('university').as('c').select('b', 'c')"
找出与person杜月有knows关系的所有person,"g.V().hasLabel('person').has('name', '杜月').in('knows').hasLabel('person')"
"帮我查询关联person郑科的person,和这些person家人的person","g.V().has('person', 'name', '郑科').as('a').in('relates').hasLabel('person').as('b').out('family').hasLabel('person').as('c').select('b', 'c')"
给出所有和大学浙江大学之间有拥有关系的部门,"g.V().hasLabel('university').has('name', '浙江大学').outE('has').inV().hasLabel('department')"
找出与徐科有关的人，以及徐科支付给其他人的人，并将他们返回。,"g.V().has('person', 'name', '徐科').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('pay').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
返回马国强和李月这两位共同的父母，他们各自有180个人。,"g.V().has('person', 'name', '马国强').as('a').outE('parent').inV().as('b').inE('parent').outV().has('person', 'name', '李月').as('c').select('b').limit(180)"
"查找60个country韩国和法国,共同的partner","g.V().has('country', 'name', '韩国').outE('partner').inV().as('b').inE('partner').outV().has('country', 'name', '法国').select('b').limit(60)"
请帮我找出75个Person、周月和陈强共同的伙伴。,"g.V().has('person', 'name', '周月').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '陈强').select('b').limit(75)"
"帮我查询id为173的person关联的person, 并将person有关的person的名字的最小值赋值给person(b)的性别, 接着查询person(b)的性别小于173的person认识的person","g.V().hasLabel('person').has('id', 173).as('a').outE('relates').inV().hasLabel('person').as('b').sideEffect(__.select('b').aggregate('bSet')).select('b').sideEffect(__.select('b').bothE().otherV().hasLabel('person').values('name').min().store('bGender')).select('b').has('gender', lt(173)).outE('knows').inV().hasLabel('person').as('d').select('b').values('gender').as('b.gender').select('d').select('b.gender', 'd')"
获取与cinema相关的film节点，按value、id和name进行分组，并返回它们。,"g.V().hasLabel('cinema').bothE('releases').otherV().hasLabel('film').group().by(project('value', 'id', 'name').by(values('value')).by(values('id')).by(values('name'))).select(values).unfold().project('b.value', 'b.id', 'b.name').by(select('value')).by(select('id')).by(select('name'))"
"给出作家的三角的环,边label为认识, 并返回这些点的id","g.V().hasLabel('author').as('a').outE('knows').inV().as('b').outE('knows').inV().as('c').where(__.outE('knows').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
"输入表的列为height,gender,name, 数据为(187,'famale','郑若涵'),(154,'male','郑伟'),(195,'famale','马科'),(165,'male','周伟'), 以属性height作为相等条件,请帮我找出所有id为97的person关联的person,和以knows关系关联了这些person的其他person","g.withSideEffect('p', [['height': 187, 'gender': 'famale', 'name': '郑若涵'], ['height': 154, 'gender': 'male', 'name': '郑伟'], ['height': 195, 'gender': 'famale', 'name': '马科'], ['height': 165, 'gender': 'male', 'name': '周伟']]).V().hasLabel('person').has('id', '97').as('a').where(__.as('a').values('height').is(within(__.select('p').unfold().values('height')))).bothE().otherV().hasLabel('person').as('b').inE('knows').otherV().hasLabel('person').as('c').select('b', 'c')"
"查询和company微软有关的person,称为X,再查询和这个X有关联的其他person,以及和X有关联的company","g.V().hasLabel('company').has('name', '微软').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('company').as('d').select('a', 'b', 'c', 'd')"
"以(55,'何若涵','famale'),(63,'李轩','male'),(33,'赵科','male')作为请求表数据,属性分别为id,name,gender, 以属性name作为相等条件,帮我查询199个lang小于等于21或id小于88,且stars不是556的software,根据value降序排列","g.inject([['id':55,'name':'何若涵','gender':'famale'],['id':63,'name':'李轩','gender':'male'],['id':33,'name':'赵科','gender':'male']]).unfold().as('p').V().hasLabel('software').has('name', __.where(eq('p')).by('name')).where(or(has('lang', lte(21)), has('id', lt(88)))).has('stars', neq(556)).order().by('value', desc).limit(199)"
"查询和标签等于课程的点有属于关系的部门,并且和这些部门有拥有关系的教师,并且和这些教师有教关系的课程",g.V().hasLabel('course').as('a').out('belong').hasLabel('department').as('b').out('has').hasLabel('teacher').as('c').out('teach').hasLabel('course').as('d').select('d')
id对id取余的值,g.V().project('result').by(values('id').math('_ / _'))
找出与韩科相关的人员，以及他所拥有的其他账户，并将它们返回。,"g.V().has('person', 'name', '韩科').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('own').inV().hasLabel('account').as('c').select('a', 'b', 'c')"
"找出112个名为黄雪的点创造的标签等于事项的节点,且其状态为Closed","g.V().has('name', '黄雪').outE('creates').inV().hasLabel('issue').has('status', 'Closed').limit(112)"
请帮我查找合并请求的3度以内的环,g.V().hasLabel('pullRequest').as('a').repeat(bothE().otherV().simplePath()).times(3).where(cyclicPath()).path().by('id')
"用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));返回与名为吴月和李宏的点共同发布的,标签为书的节点","g.V().has('name', '吴月').outE('publisher_publish_book').inV().hasLabel('book').as('b').inE('publisher_publish_book').outV().has('name', '李宏').select('b')"
帮我查询名为中国军事论坛的节点包含的论坛,"g.V().has('name', '中国军事论坛').out('contain').hasLabel('forum')"
"用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询标签为post,名为Post_293的点,返回这些点的lang,wordCount,value","g.V().hasLabel('post').has('name', 'Post_293').project('lang', 'wordCount', 'value').by('lang').by('wordCount').by('value')"
"查询价值大于等于894或人数不是50638的国家包含的城市的名称,以及这些城市 包含的公司的名称","g.V().hasLabel('country').has('value', gte(894)).or().has('peopleNumber', neq(50638)).outE('contain').inV().hasLabel('city').as('b').outE('contain').inV().hasLabel('company').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
给出122个与韩建国和郑强都存在关系的person节点,"g.V().has('name', '韩建国').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '郑强').select('b').limit(122)"
人数除870的值,g.V().hasLabel('a').values('peopleNumber').math('_ / 870')
"返回81个名为Prescription_309的点包含的label为药品的节点,且其类别等于发烧药且价格大于等于15","g.V().has('name', 'Prescription_309').out('contain').hasLabel('medicine').has('category', '发烧药').has('price', gte(15)).limit(81)"
"用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部和名为赵思琪的读者有相关者关系,或有相关者的相关者关系的书","g.V().has('reader', 'name', '赵思琪').out('relation').hasLabel('book').dedup()"
"给出所有person的朋友,或其朋友的朋友",g.V().hasLabel('person').repeat(out('friend')).times(2).dedup()
请帮我找出seller郑月ask的buyer节点consult的seller,"g.V().has('seller', 'name', '郑月').out('ask').in('consult').hasLabel('seller')"
 查询孙思思认识且向其支付的人。,"g.V().hasLabel('person').has('name', '孙思思').outE('knows').inV().hasLabel('person').outE('pay').inV().hasLabel('person')"
"找出和类型为person的点有喜欢关系的person,且和这些person有支付关系的person,且和这些person有喜欢关系的person",g.V().hasLabel('person').as('a').out('likes').hasLabel('person').as('b').out('pay').hasLabel('person').as('c').out('likes').hasLabel('person').as('d').select('d')
"给出全部和名为吴宏的doctor有relation关系,或有relation的relation关系的prescription","g.V().hasLabel('doctor').has('name', '吴宏').bothE('relation').otherV().or(__.hasLabel('prescription'), __.bothE('relation').otherV().hasLabel('prescription')).dedup()"
 韩建聪的父母的友人的恋人,"g.V().has('person', 'name', '韩建聪').out('parent').out('friend').out('lover')"
"请帮我查找论坛的朋友,或其朋友的朋友","g.V().hasLabel('forum').out('friend').range(1, 2).dedup()"
"根据身高,年龄分组,计算年龄除65的值",g.V().hasLabel('a').group().by('height').by(group().by('age').by(values('age').math('_ / 65')))
获取与person ID为112相关的forum的关系，然后获取与forum相关的partner。,"g.V().has('person', 'id', '112').bothE().otherV().hasLabel('forum').as('b').bothE().hasLabel('relation').otherV().as('c').select('b').bothE().hasLabel('partner').otherV().as('d').select('a', 'b', 'c', 'd').by(elementMap())"
"给出重庆的点属于的国家,然后给出重庆被属于的大学,一起返回","g.V().has('name', '重庆').as('a').outE('belong').inV().hasLabel('country').as('b').select('a').inE('belong').outV().hasLabel('university').as('c').select('a', 'b', 'c')"
请帮我查找与韩雪有关的人，包括她的恋人，并将他们全部返回。,"g.V().has('person', 'name', '韩雪').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('lover').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
"请帮我找出所有名为何梅的,性别的平均值等于54的朋友,返回这些朋友的性别,和边的源点id,f1","g.V().has('name', '何梅').outE('friend').as('e').inV().as('b').group().by(constant(1)).by(project('avgGender', 'bList').by(values('gender').mean()).by(fold())).unfold().select(values).where(select('avgGender').is(eq(54))).select('bList').unfold().as('b').select('e', 'b').by(select('e')).by(select('b')).select('b', 'e').by(values('gender')).by(project('srcId', 'f1').by(outV().id()).by(values('f1')))"
"请帮我查找和person韩梅有关的person,称为X,再请帮我查找和这个X有关联的其他person,以及和X有关联的person","g.V().has('person', 'name', '韩梅').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
帮我查询user的2度的环,"g.V().hasLabel('user').as('a').repeat(out().simplePath()).times(2).where(out().as('a')).path().by('id').project('a.id', 'b_id').by(limit(local, 1)).by(tail(local, 1))"
"查找belong issue ISSUE-83 belong的repository,的pullRequest","g.V().hasLabel('issue').has('name', 'ISSUE-83').outE('belong').inV().hasLabel('repository').as('b').inE('belong').outV().hasLabel('pullRequest').as('c').select('b', 'c')"
查找所有标签为person或company或software的点,"g.V().hasLabel(within('person', 'company', 'software'))"
 给出的贷款和以申请关联的其他公司。,"g.V().has('loan', 'id', '65').bothE().otherV().hasLabel('loan').as('b').inE('apply').outV().hasLabel('company').as('c').select('b', 'c')"
"找出被软件使用数量大于114的软件,记为relationCount,再查询这些软件使用的person","g.V().hasLabel('software').as('a').project('a', 'relationCount').by(identity()).by(__.in('uses').hasLabel('software').id().mean()).select('a', 'relationCount').as('b').where(__.select('relationCount').is(gt(114))).select('a').out('uses').hasLabel('person').dedup()"
"输入请求点id的列表427,196, 以属性id作为相等条件,给出标签为person的点,返回92个","g.inject([427, 196]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).limit(92)"
 找出所有关联的标签和以has-a关系关联这些标签的其他电影。,"g.V().has('tag', 'id', '24').bothE().otherV().hasLabel('tag').as('b').inE('has').otherV().hasLabel('film').as('c').select('b', 'c')"
"请帮我找出id为179的点的id,薪资","g.V().has('id', 179).project('id', 'salary').by(values('id')).by(values('salary'))"
"请帮我查找height不为空,name不等于李科的节点","g.V().has('height', neq(null)).has('name', neq('李科'))"
"帮我查询id为96的医生创造的处方, 并将处方有关的药品的名字的最大值赋值给处方的名字, 接着查询处方的名字小于96的处方包含的药品","g.V().hasLabel('doctor').has('id', 96).outE('creates').inV().hasLabel('prescription').as('b').project('b_name', 'd').by(coalesce(select('b').outE().inV().hasLabel('medicine').values('name').max(), constant(''))).by(select('b').filter(values('name').is(lt(96))).outE('contain').inV().hasLabel('medicine').fold()).select('b_name', 'd')"
找出与公司字节有雇佣关系的1度的环,"g.V().hasLabel('company').has('name', '字节').as('a').bothE('employee').bothV().where(neq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询123个名为郑梅的点publish的类型是post的节点,且其name为Post_233","g.V().has('user', 'name', '郑梅').outE('user_publish_post').inV().has('post', 'name', 'Post_233').limit(123)"
 请问是否有赵国强或名字小于等于158的作家所写的书籍，以及这些书籍所关联的书籍名称？,"g.V().hasLabel('author').has('name', within('赵国强')).or().has('name', lte(158)).outE('write').inV().hasLabel('book').as('b').outE('relates').inV().hasLabel('book').as('c').select('b', 'c').by('name').by('name')"
"使用列为name,height,id, 数据为('孙思思',151,92)的子查询作为输入表, 源点的height等于输入表height,查询前21个label为person_knows_person的边","g.withSideEffect('p', [['name': '孙思思', 'height': 151, 'id': 92]]).V().has('height', __.select('p').unfold().select('height')).outE('person_knows_person').limit(21)"
请帮我找出所有名为陈建国的节点支付的person,"g.V().has('name', '陈建国').outE('pay').inV().hasLabel('person')"
"返回从公司蚂蚁集团出发,经过label为雇佣的边,走1跳到达的person点","g.V().has('company', 'name', '蚂蚁集团').out('employee').hasLabel('person')"
"请帮我查找和卖家李红有拥有关系的商品,再请帮我查找以回答关系关联了李红的买家","g.V().hasLabel('seller').has('name', '李红').as('a').outE('has').inV().hasLabel('goods').as('b').select('a').inE('ask').outV().hasLabel('buyer').as('c').select('a', 'b', 'c')"
"查询名字不等于41的person创造的评论的名称,以及这些评论 属于的电影的名称","g.V().hasLabel('person').has('name', neq('41')).outE('creates').inV().hasLabel('comment').as('b').outE('belong').inV().hasLabel('film').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));给出175个名为张红的点write的label为book的节点,且其id在36到48之间","g.V().has('author', 'name', '张红').outE('author_write_book').inV().has('book', 'id', between(36, 48)).limit(175)"
"给出person徐月的所有类型是relation的边,并根据f0升序排列,返回10个","g.V().has('person', 'name', '徐月').outE('relation').order().by('f0', asc).limit(10).inV()"
"给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出大学电子科技大学的全部类型是相关者的边,并根据权重升序排列,返回19个","g.V().has('university', 'name', '电子科技大学').outE('relation').order().by('weight', asc).limit(19).inV()"
"调用personalRank函数,以15, 'XH', 38作为输入,返回id, value","g.call(""PERSONALRANK"").with(""arg1"", 15).with(""arg2"", ""XH"").with(""arg3"", 38).project(""id"", ""value"").by(__.select(""id"")).by(__.select(""value""))"
找出陈月的合作伙伴关系。,"g.V().has('author', 'name', '陈月').outE('partner').inV().outE('refers').inV().outE('relation').inV()"
"查找所有person以gender,name分组的id, 根据id降序排序","g.V().hasLabel('person').group().by(values('gender', 'name')).by(values('id').fold()).order(local).by(keys, desc)"
 请帮我找出与放射科有拥有/关联关系的医生。,"g.V().has('department', 'name', '放射科').as('a').outE('has').inV().hasLabel('doctor').as('b').select('a').inE('has').outV().hasLabel('doctor').as('c').select('a', 'b', 'c')"
请帮我查找和course操作系统之间有belong关系的department,"g.V().hasLabel('course').has('name', '操作系统').outE('belong').inV().hasLabel('department')"
"帮我查询person likes的comment,返回其源点的salary的最大值减salary的平均值,以及目标点的id加45除33的值","g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('comment').as('b').select('a', 'b').by().project('avg_diff', 'calc_id').by(select('a').values('salary').max().as('max_salary').select('a').values('salary').as('salary').select('max_salary', 'salary').by().by().math('max_salary - salary').mean()).by(select('b').values('id').math('_ + 45').math('_ / 33'))"
"以218作为请求点id, 以属性id作为相等条件,帮我查询名为美团的公司,以及与其有关的公司,并返回美团的规格和这些公司的人数","g.withSideEffect('p', [218]).V().hasLabel('company').has('id', __.select('p')).has('name', '美团').as('a').bothE().as('e').otherV().hasLabel('company').as('b').select('a', 'b').by('scale').by('peopleNumber')"
查询身高为空或者年龄不为空的人认识的人的名字，以及这些人认识的人的名字。,"g.V().hasLabel('person').or(hasNot('height'), has('age')).outE('knows').inV().hasLabel('person').as('b').outE('knows').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"输入表的列为salary,age,id, 数据为(2945,43,76), 源点的salary等于输入表salary,帮我查询user马强的全部label为friend的边,并根据f0从小到大排列,返回177个","g.withSideEffect('p', [['salary':2945, 'age':43, 'id':76]]).V().hasLabel('user').has('salary', __.select('p').unfold().select('salary')).has('name', '马强').outE('friend').order().by('f0', asc).limit(177).inV()"
 马轩和韩雪有一个共同的医生朋友。,"g.V().hasLabel('doctor').has('name', '马轩').outE('friend').inV().as('b').inE('friend').outV().hasLabel('doctor').has('name', '韩雪').select('b').limit(185)"
查询从person到person，且标签为喜欢的边,g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('person').as('b').select('e')
"请帮我找出名为Flink的person或company或software,以及与其有关的person,并返回Flink的openSource和这些person的name","g.V().has('name', 'Flink').hasLabel(within('person', 'company', 'software')).bothE().otherV().hasLabel('person').project('a.openSource', 'b.name').by(select(all, 'v').unfold().hasLabel(within('person', 'company', 'software')).values('openSource')).by(select(all, 'v').unfold().hasLabel('person').values('name'))"
给出所有名为何若涵的点喜欢的person,"g.V().has('name', '何若涵').out('likes').hasLabel('person')"
请帮我找出所有既与外科有关又隶属于某个部门的医生，并返回他们的名字。,"g.V().has('name', '外科').out('has').hasLabel('doctor').out('belong').hasLabel('department').values('name')"
"查找person观看的电影, 令电影的价值的值等于观看电影的person的身高的平均值, 再查找电影拥有的标签","g.V().hasLabel('person').as('a').outE('watch').as('e').inV().hasLabel('film').as('b').sideEffect(__.project('value').by(__.select('b').in('watch').hasLabel('person').values('height').mean()).select('value').store('b_value')).select('b').outE('has').as('e3').inV().hasLabel('tag').as('d').select('b_value', 'd')"
给出person的3跳的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(3).where(loops().is(3)).where(eq('a')).project('a.id', 'b_id').by(select('a').id()).by(id())"
请帮我找到所有类型为department，名称为生物学院的点，并返回它们的id和size。,"g.V().hasLabel('department').has('name', '生物学院').project('a.id', 'a.size').by('id').by('size')"
请帮我找出何伟发表过的帖子，以及这些帖子关联的标签。返回这些帖子和标签的名字。,"g.V().has('name', '何伟').outE('publish').inV().hasLabel('post').outE('has').inV().hasLabel('tag').values('name')"
"帮我查询全部名为杜科的,价值小于670,id的平均值除id小于21的相关者,返回这些相关者的名字,和边的权重","g.V().has('name', '杜科').outE('relation').as('e').inV().as('b').where(__.has('value', lt(670)).and(__.project('avg', 'id').by(__.values('id').mean()).by(__.values('id')).select('avg', 'id').math('avg / id').is(lt(21)))).select('b', 'e').by('name').by('weight')"
帮我查询全部label为大学的点,g.V().hasLabel('university')
"输入表的列为category,value,price, 数据为('电子产品',195,3814.51),('家具',481,2999.93),('衣服',384,780.29), 源点的price等于输入表price,帮我查询id为168的点的id,价值,价格","g.withSideEffect('p', [['category':'电子产品','value':195,'price':3814.51],['category':'家具','value':481,'price':2999.93],['category':'衣服','value':384,'price':780.29]]).V().has('id','168').as('a').where(__.select('a').values('price').is(within(__.select('p').unfold().values('price')))).select('a').project('id','value','price').by(values('id')).by(values('value')).by(values('price'))"
请帮我找出名为黄红的节点write的book或reader,"g.V().has('name', '黄红').outE('write').inV().hasLabel(within('book', 'reader')).dedup()"
"给出与巴黎存在包含关系的大学,大学与公司存在合作关系的点,返回这些点的id","g.V().has('name', '巴黎').out('contain').hasLabel('university').out('cooperate').hasLabel('company').id()"
 请帮我查找与 person 点有关联的公司节点，并按规格分组返回。,g.V().hasLabel('person').bothE('belong').otherV().hasLabel('company').group().by('scale')
"找出和名为孙建国的卖家有伙伴关系,或有伙伴的伙伴关系的商品","g.V().has('seller', 'name', '孙建国').out('partner').hasLabel('goods').fold().union(__.identity(), __.out('partner').hasLabel('goods')).unfold().dedup()"
请帮我找出label为医生或药品的点,"g.V().hasLabel(within('doctor', 'medicine'))"
"以673,651,601作为请求点id, 以属性id作为相等条件,查询类型为评论的点,返回178个","g.inject([673, 651, 601]).unfold().as('p').V().hasLabel('comment').has('id', __.select('p')).limit(178)"
"请帮我查找软件的三角的环,边标签等于使用, 并返回这些点的id","g.V().hasLabel('software').as('a').outE('uses').inV().as('b').outE('uses').inV().as('c').where(outE('uses').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"找出所有与吴思思存在喜欢关系的帖子,帖子与标签存在拥有关系的点,返回这些点的id","g.V().has('name', '吴思思').out('likes').hasLabel('post').out('has').hasLabel('tag').id()"
"请帮我查找和company字节有关的company,称为X,再请帮我查找和这个X有关联的其他company,以及和X有关联的company","g.V().has('company', 'name', '字节').as('a').bothE().otherV().hasLabel('company').as('b').bothE().otherV().hasLabel('company').as('c').select('b').bothE().otherV().hasLabel('company').as('d').select('a', 'b', 'c', 'd')"
给出与贷款loan_78和loan_42都存在存款关系的点,"g.V().has('loan', 'name', 'loan_78').outE('deposit').inV().as('b').inE('deposit').outV().has('loan', 'name', 'loan_42').select('b')"
 返回与Post_205相关的论坛，并返回Post_205的标签。,"g.V().hasLabel('post').has('name', 'Post_205').as('a').both().hasLabel('forum').as('b').select('a').out('has').hasLabel('tag').as('c').select('a', 'b', 'c')"
"查询id为142的城市有关的公司的伙伴, 再查询和公司有关系的伙伴","g.V().has('city', 'id', 142).as('a').bothE().otherV().hasLabel('company').as('b').bothE('partner').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出id为25的点的age,name","g.V().has('person', 'id', 25).project('age', 'name').by('age').by('name')"
请帮我查找id为158的点的价值,"g.V().has('id', 158).values('value')"
查找所有和用户李建聪之间有发布关系的帖子,"g.V().has('user', 'name', '李建聪').outE('publish').inV().hasLabel('post')"
 给定孙红创建的评论，返回评论所属的电影的名称和ID。,"g.V().hasLabel('person').has('name', '孙红').outE('creates').inV().hasLabel('comment').outE('belong').inV().hasLabel('film').project('c.name', 'c.id').by('name').by('id')"
"帮我查询全部名为黄思思的点的,id为95的朋友,返回这些朋友的身高,和边的源点id,目标点id","g.V().has('name', '黄思思').outE('friend').as('e').inV().has('id', 95).project('b_height', 'e_srcId', 'e_targetId').by(values('height')).by(select('e').values('srcId')).by(select('e').values('targetId'))"
"输入请求点id的列表315, 源点的id等于输入表id,给出81个和类型为person的点有person_lover_person关系的person,并且和这些person有person_friend_person关系的person","g.withSideEffect('p', [315]).V().hasLabel('person').where(__.id().is(within('p'))).as('a').out('person_lover_person').hasLabel('person').as('b').out('person_friend_person').hasLabel('person').as('c').select('c').limit(81)"
"给出类型是编辑的所有点,并根据年龄升序排列","g.V().hasLabel('publisher').order().by('age', asc)"
"请帮我查找与城市重庆有关,且与大学复旦大学有关系的公司节点","g.V().has('city', 'name', '重庆').bothE('contain').bothV().hasLabel('company').as('b').bothE('cooperate').bothV().has('university', 'name', '复旦大学').select('b')"
"找出和标签为作家的点有撰写关系的书,以及和这些书有引用关系的书,以及和这些书有引用关系的书",g.V().hasLabel('author').as('a').out('write').hasLabel('book').as('b').out('refers').hasLabel('book').as('c').out('refers').hasLabel('book').as('d').select('d')
找出与编辑徐建聪和王梅都存在发布关系的点,"g.V().has('publisher', 'name', '徐建聪').outE('publish').inV().as('b').inE('publish').outV().has('publisher', 'name', '王梅').select('b')"
查找41个与南京大学和清华大学都存在关系的国家或公司或城市节点,"g.V().has('name', '南京大学').as('a').outE().as('e').inV().hasLabel(within('country', 'company', 'city')).as('b').inE().as('e2').outV().has('name', '清华大学').as('c').select('b').limit(41)"
"根据name,wordCount,value分组,计算value除245的值","g.V().hasLabel('a').group().by(values('name', 'wordCount', 'value')).by(values('value').math('/ 245').fold())"
"找出名为马轩和王强的,类型为买家的点公共的伙伴节点的名单","g.V().has('buyer', 'name', '马轩').as('a').outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().as('c').has('buyer', 'name', '王强').select('b').values('name')"
找出id为111的点的id,"g.V().has('id', 111).values('id')"
找出在知网和CSDN论坛上都是朋友的节点名单。,"g.V().hasLabel('forum').has('name', '知网').outE('friend').inV().as('b').inE('friend').outV().hasLabel('forum').has('name', 'CSDN').select('b').values('name')"
帮我查询所有和大学四川大学之间有合作关系的公司,"g.V().hasLabel('university').has('name', '四川大学').outE('cooperate').inV().hasLabel('company')"
"请帮我找出所有与韩雪存在creates关系的comment,comment与film存在belong关系的点,返回这些点的value","g.V().has('name', '韩雪').out('creates').hasLabel('comment').out('belong').hasLabel('film').values('value')"
"查找名为上海的城市,以及与其有关的大学,并返回上海的名字和这些大学的id","g.V().has('city', 'name', '上海').bothE().otherV().hasLabel('university').project('a_name', 'b_id').by(select('a').values('name')).by(values('id'))"
"请帮我查找标签为loan,名为loan_67的点,返回这些点的id,amount,weight","g.V().hasLabel('loan').has('name', 'loan_67').project('id', 'amount', 'weight').by('id').by('amount').by('weight')"
"找出id为192的国家包含的城市, 并将城市有关的公司的名字的数量赋值给城市的id, 接着查询城市的id小于192的城市包含的公司","g.V().has('country', 'id', 192).out('contain').hasLabel('city').as('b').sideEffect(select('b').both().hasLabel('company').values('name').count().as('id')).select('b').has('id', lt(192)).out('contain').hasLabel('company').as('d').select('b', 'd').by('id').by()"
"返回185个权重为352或权重为339或金额大于等于6579.88的贷款,根据金额从小到大排列","g.V().hasLabel('loan').or(has('weight', 352), has('weight', 339), has('amount', gte(6579.88))).order().by('amount', asc).limit(185)"
"请帮我查找user何轩publish的post,以及publish这些post的user","g.V().hasLabel('user').has('name', '何轩').outE('publish').inV().hasLabel('post').as('b').inE('publish').outV().hasLabel('user').as('c').select('b', 'c')"
"查找全部和person点有knows关系的person节点,且边满足条件f1不等于false,目标person节点满足条件id大于等于82","g.V().hasLabel('person').as('a').outE('knows').has('f1', neq(false)).as('e').inV().hasLabel('person').has('id', gte(82)).as('b').select('b')"
"使用列为name,gender,id, 数据为('何强','male',83),('Tom','famale',81),('孙国强','famale',97)的子查询作为输入表, 以属性gender作为相等条件,请帮我找出与person赵思琪和徐建国都存在person_pay_person关系的点","g.withSideEffect('p', [['name': '何强', 'gender': 'male', 'id': 83], ['name': 'Tom', 'gender': 'famale', 'id': 81], ['name': '孙国强', 'gender': 'famale', 'id': 97]]).V().hasLabel('person').has('name', '赵思琪').as('a').outE('person_pay_person').inV().as('b').inE('person_pay_person').outV().hasLabel('person').has('name', '徐建国').as('c').where('a', eq('c')).by('gender').select('b')"
"查询19个名为吴轩的点diagnose的类型为patient的节点,且节点name为吴轩","g.V().has('name', '吴轩').outE('diagnose').inV().has('label', 'patient').has('name', '吴轩').limit(19)"
"输入请求点id的列表694,561,652, 以属性id作为相等条件,帮我查询所有源点label为person,边label为person_family_person,并且targetId的数量大于等于90的边","g.inject([694, 561, 652]).unfold().as('p').V().hasLabel('person').has('id', __.as('p').select('p')).as('a').outE('person_family_person').where(__.project('targetIdCount').by(__.inV().id().fold().count()).select('targetIdCount').is(gte(90))).as('e').select('e')"
"找出person的三角的环,边类型是creates, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('creates').inV().as('b').outE('creates').inV().as('c').where(__.outE('creates').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
 返回与黄轩有支付关系的人和与孙强有支付关系的人。,"g.V().has('person', 'name', '黄轩').as('a').outE('pay').inV().as('b').select('a').V().has('person', 'name', '孙强').as('c').outE('pay').inV().as('d').select('a', 'b', 'c', 'd')"
"查询所有person的朋友,或其朋友的朋友",g.V().hasLabel('person').repeat(out('friend')).times(2).dedup()
"找出与buyer韩轩有关系的orders, 返回和这些orders有关联的orders的,id的平均值对id取余的最小值","g.V().has('buyer', 'name', '韩轩').bothE().otherV().hasLabel('orders').bothE().otherV().hasLabel('orders').values('id').mean().as('avg').select('avg').math('_ / id').min()"
"请帮我找出所有源点标签等于账号,边标签等于还款的边,返回这些边的f0加707的值,和f0减539的求和值","g.V().hasLabel('account').outE('repay').project('expr1', 'expr2').by(values('f0').sum().by(__.constant(707).sum())).by(values('f0').sum().by(__.constant(-539).sum()).sum())"
"输入表的列为age,height,salary, 数据为(61,178,4620),(63,176,5213),(19,176,5581), 源点的salary等于输入表salary,请帮我找出标签等于公司的点,返回195个","g.withSideEffect('p', [[61, 178, 4620], [63, 176, 5213], [19, 176, 5581]]).V().hasLabel('company').where(__.as('a').values('salary').as('salary').select('p').unfold().where(eq('salary')).by().by(tail(local, 1))).limit(195)"
"帮我查询电影院好视影院上映的电影,以及上映这些电影的电影院, 令电影院(c)的id等于电影院(a)的地址,令电影的id等于电影的名字,令电影院的类别等于电影的id除id的求和值, 返回电影院(a)的名字,电影(b)的价值,电影院(c)的名字","g.V().has('cinema', 'name', '好视影院').as('a').outE('releases').inV().hasLabel('film').as('b').inE('releases').outV().hasLabel('cinema').as('c').select('a', 'b', 'c').by('name').by('value').by('name').project('a_name', 'b_value', 'c_name').by(select('a')).by(select('b')).by(select('c'))"
"查询deposit account Light transfer的account,的loan","g.V().hasLabel('account').has('name', 'Light').outE('transfer').inV().as('b').inE('deposit').outV().hasLabel('loan').as('c').select('b', 'c')"
"查找id为57的账号还款的贷款, 并将贷款有关的person的名字的数量赋值给贷款的权重, 接着查询贷款的权重小于57的贷款存款的账号","g.V().has('account', 'id', 57).out('repay').hasLabel('loan').as('b').sideEffect(project('weight').by(outE().inV().hasLabel('person').values('name').dedup().count()).by(__.identity()).select('weight').store('b_weight')).select('b').where(select('b_weight').is(lt(57))).out('deposit').hasLabel('account').as('d').select('b_weight', 'd')"
 找所有起点是学生，终点是课程，且标签为选择的边。,g.V().hasLabel('student').outE('selects').as('e').inV().hasLabel('course').select('e')
查找前177个label为ask的边,g.E().hasLabel('ask').limit(177)
"给出department has的student, 令student的height的值等于hasstudent的department的name的和, 再查找student selects的course","g.V().hasLabel('department').as('a').outE('has').as('e').inV().hasLabel('student').as('b').project('b', 'height').by(select('b')).by(select('b').as('student').inE('has').as('e2').outV().hasLabel('department').values('name').sum()).select('b').outE('selects').as('e3').inV().hasLabel('course').as('d').select('height', 'd')"
"请帮我找出所有id为143的贷款关联的贷款,和以申请关系关联了这些贷款的其他公司","g.V().has('loan', 'id', 143).bothE().otherV().hasLabel('loan').as('b').inE('apply').otherV().hasLabel('company').as('c').select('b', 'c')"
找出与陈思思有关联并属于电影'功夫'的评论节点。返回这些评论的字数、陈思思的名字以及电影'功夫'的价值。,"g.V().has('person', 'name', '陈思思').as('a').outE('creates').inV().hasLabel('comment').as('b').inE('belong').outV().has('film', 'name', '功夫').as('c').select('a', 'b', 'c').by('name').by('wordCount').by('value')"
"使用列为name,id,gender, 数据为('赵轩',38,'famale'),('王科',58,'famale'),('徐红',98,'famale')的子查询作为输入表, 以属性id作为相等条件,帮我查询所有编辑以id,年龄分组的id, 根据id降序排序","g.inject(['赵轩', 38, 'famale'], ['王科', 58, 'famale'], ['徐红', 98, 'famale']).as('p').select('p').by(unfold()).V().hasLabel('publisher').as('a').where(eq('a')).by('id').by(select('p').limit(1).tail(1)).select('a').group().by(union(values('id'), values('age')).fold()).by(select('id').fold()).order(local).by(keys, desc)"
"输入请求点id的列表666, 以属性id作为相等条件,找出36个与郑雪和韩轩都存在关系的buyer节点","g.inject(666).as('p').V().has('id', __.select('p')).has('name', '郑雪').outE().as('e').inV().hasLabel('buyer').as('b').inE().as('e2').outV().has('name', '韩轩').select('b').limit(36)"
给出所有和person张若涵有3跳关系的person,"g.V().has('person', 'name', '张若涵').repeat(out().simplePath()).times(3).hasLabel('person').dedup()"
 找出马宏喜欢的人。,"g.V().hasLabel('person').has('name', '马宏').outE('likes').inV().hasLabel('person').as('b').select('b').by().as('a').select('a', 'b')"
"请帮我查找年龄不等于60或id小于等于27,且id大于51的节点","g.V().has('id', gt(51)).or(has('age', neq(60)), has('id', lte(27)))"
 请帮我找出王红所有的物品，以及与王红联系的买家，一并返回。,"g.V().has('name', '王红').as('a').outE('has').inV().hasLabel('goods').as('b').select('a').inE('consult').outV().hasLabel('buyer').as('c').select('a', 'b', 'c')"
"请帮我查找被person赵伟commits的software,和赵伟knows的person","g.V().hasLabel('person').has('name', '赵伟').as('b').outE('commits').inV().hasLabel('software').as('a').select('b').outE('knows').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
 查询与Sam有喜欢关系的对象，再查询与Sam有喜欢关联的对象。,"g.V().has('person', 'name', 'Sam').as('a').outE('likes').inV().hasLabel('person').as('b').select('a').inE('likes').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
帮我查找与用户黄思思和喜剧标签相关的帖子,"g.V().has('user', 'name', '黄思思').outE('publish').inV().hasLabel('post').as('b').inE('has').outV().has('tag', 'name', '喜剧').select('b')"
"查询和类型是company的点有employee关系的person,且和这些person有knows关系的person,且和这些person有buy关系的software",g.V().hasLabel('company').as('a').out('employee').hasLabel('person').as('b').out('knows').hasLabel('person').as('c').out('buy').hasLabel('software').as('d').select('d')
"用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询55个prescription Prescription_304和Prescription_302,共同的friend","g.V().has('prescription', 'name', 'Prescription_304').out('friend').as('b').in('friend').has('prescription', 'name', 'Prescription_302').select('b').limit(55)"
帮我找出与city节点相关的company节点，按其id和scale进行分组，并返回它们的id和scale。,"g.V().hasLabel('city').bothE('contain').bothV().hasLabel('company').group().by(values('id', 'scale')).by(project('id', 'scale').by(values('id')).by(values('scale')))"
找出仓库FSM拥有的合并请求节点属于的仓库,"g.V().hasLabel('repository').has('name', 'FSM').out('has').hasLabel('pullRequest').out('belong').hasLabel('repository')"
找出所有与教师相关的课程，以及通过'teach'关系与其他教师相关联的所有课程。,"g.V().has('teacher', 'id', '198').bothE().otherV().hasLabel('course').as('b').inE('teach').otherV().hasLabel('teacher').as('c').select('b', 'c')"
查找满足条件gender是male的节点,"g.V().has('gender', 'male')"
找出全部和person吴红之间有支付关系的person,"g.V().has('person', 'name', '吴红').outE('pay').inV().hasLabel('person').dedup()"
 列出身高超过182的人的姓名，以及他们所涉及的其他人。,"g.V().hasLabel('person').has('height', gt(182)).as('a').outE('relates').as('e').inV().hasLabel('person').as('b').outE('relates').as('e2').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
查询所有和person Jack有3度关系的person,"g.V().has('person', 'name', 'Jack').repeat(bothE().otherV().simplePath()).times(3).hasLabel('person').dedup()"
"以166,815,39作为请求点id, 源点的id等于输入表id,请帮我查找被person徐伟knows的person","g.inject([166, 815, 39]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).as('a').in('person_knows_person').hasLabel('person').has('name', '徐伟').as('b').select('a', 'b')"
"帮我查询所有电影院的相关者,或其相关者的相关者",g.V().hasLabel('cinema').outE('relation').inV().simplePath().by(T.id).path().unfold().tail(2).dedup().fold().limit(1).unfold().tail(1)
 返回与编辑郑强有发布关系且与书孤城有引用关系的书籍节点，并返回这些书籍的名称、ID、编辑郑强的身高和书孤城的ID。,"g.V().has('publisher', 'name', '郑强').as('a').outE('publish').inV().hasLabel('book').as('b').inE('refers').outV().has('book', 'name', '孤城').as('c').select('a', 'b', 'c').by('height').by(values('name', 'id')).by('id').project('a.height', 'b.name', 'b.id', 'c.id').by(select('a')).by(select('b').select('name')).by(select('b').select('id')).by(select('c'))"
 找出标签为person且名称为李强的点，并返回这些人的身高和薪资。,"g.V().hasLabel('person').has('name', '李强').project('height', 'salary').by('height').by('salary')"
"输入表的列为peopleNumber,id,scale, 数据为(945,62,'large'), 以属性scale作为相等条件,给出所有与孙轩存在person_own_account关系的账号,账号与账号存在account_transfer_account关系的点,返回这些点的id","g.withSideEffect('p', [['peopleNumber': 945, 'id': 62, 'scale': 'large']]).V().has('scale', select('p').unfold().select('scale')).has('name', '孙轩').outE('person_own_account').inV().hasLabel('account').outE('account_transfer_account').inV().hasLabel('account').id()"
"输入请求点id的列表512,279, 源点的id等于输入表id,返回全部标签为软件的点","g.inject([512, 279]).unfold().as('p').V().hasLabel('software').has('id', __.select('p')).dedup()"
"返回与person郑轩存在家人关系,且与person陈国强存在同事关系的person节点，返回这些person的薪资,性别,名字,及person郑轩的身高,及person陈国强的名字","g.V().has('person', 'name', '郑轩').as('a').outE('family').inV().hasLabel('person').as('b').inE('colleague').outV().has('person', 'name', '陈国强').as('c').select('a', 'b', 'c').by('height').by(values('salary', 'gender', 'name')).by('name')"
 找出纽约与Bilibili有关联的大学节点。,"g.V().has('city', 'name', '纽约').out('contain').hasLabel('university').as('b').out('cooperate').has('company', 'name', 'Bilibili').select('b')"
返回所有与标签为'book'的点有refers关系的book节点。,g.V().hasLabel('book').as('a').out('refers').hasLabel('book').as('b').out('refers').hasLabel('book').as('c').out('refers').hasLabel('book').as('d').select('d')
"请帮我找出名为郑轩的点支付的所有person,并对这些person的薪资进行求和","g.V().has('name', '郑轩').outE('pay').inV().hasLabel('person').values('salary').sum()"
"帮我查询名为Comment_333的comment,以及与其有关的comment,并返回Comment_333的id和这些comment的name","g.V().hasLabel('comment').has('name', 'Comment_333').bothE().otherV().hasLabel('comment').project('a_id', 'b_name').by(__.select('a').id()).by(__.select('b').values('name')).select('a_id', 'b_name')"
 找出外科部门的医生，返回该医生诊断的患者的年龄、身高和姓名。,"g.V().hasLabel('department').has('name', '外科').out('has').hasLabel('doctor').out('diagnose').hasLabel('patient').project('age', 'height', 'name').by('age').by('height').by('name')"
返回全部名为Jimmy的点教的课程,"g.V().has('name', 'Jimmy').outE('teach').inV().hasLabel('course')"
height对177取余的值,g.V().hasLabel('a').project('result').by(values('height').math('_ % 177'))
 给出47个与国家有包含关系的城市，以及与这些城市有包含关系的公司。,g.V().hasLabel('country').as('a').out('contain').hasLabel('city').as('b').out('contain').hasLabel('company').as('c').select('c').limit(47)
帮我查询处方的2跳以内的环,g.V().hasLabel('prescription').as('a').bothE().bothV().where(neq('a')).path().by('id').by('id')
帮我查询与电影西虹市首富有关系的person的名字,"g.V().hasLabel('film').has('name', '西虹市首富').bothE().otherV().hasLabel('person').values('name')"
"以'DO'作为输入调用personalRank函数,返回id, value","g.call('PERSONALRANK').with('input', 'DO').project('id', 'value').by(__.select('id')).by(__.select('value'))"
请帮我找出出版社为publisher，且性别小于等于9222或者年龄不为空的book的名称，以及这些book认识的book的名称,"g.V().hasLabel('publisher').or(has('gender', lte(9222)), has('age', neq(null))).outE('publish').inV().hasLabel('book').as('b').outE('knows').inV().hasLabel('book').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
返回90个与周雪和陈建国都存在关系的读者节点,"g.V().has('name', '周雪').as('a').outE().as('e').inV().hasLabel('reader').as('b').inE().as('e2').outV().has('name', '陈建国').as('c').select('b').limit(90)"
"返回所有person以身高,名字,性别分组的id, 根据id从大到小排序","g.V().hasLabel('person').group().by(values('height', 'name', 'gender')).by(values('id').fold()).order(Scope.local).by(keys, Order.desc)"
 返回清华大学拥有的部门与学生之间的关系，并获取这些关系中的所有点，最后返回这些点的年龄。,"g.V().has('name', '清华大学').out('has').hasLabel('department').out('has').hasLabel('student').values('age')"
"返回认识person何轩关联的person,的person","g.V().has('person', 'name', '何轩').as('a').outE('relates').as('e').inV().as('b').inE('knows').as('e2').outV().as('c').select('b', 'c')"
"查询27个名为清华大学的点合作的标签为公司的节点,且节点价值不等于874,id在23到95之间","g.V().has('name', '清华大学').outE('cooperate').inV().hasLabel('company').has('value', neq(874)).has('id', between(23, 95)).limit(27)"
"给出属于国家美国包含的城市,的大学","g.V().hasLabel('country').has('name', '美国').out('contain').hasLabel('city').as('b').in('belong').hasLabel('university').as('c').select('b', 'c')"
"帮我查询与医生赵红存在创造关系,且与药品医疗酒精存在包含关系的处方节点，返回这些处方的创建时间,权重,及医生赵红的身高,及药品医疗酒精的名字","g.V().hasLabel('doctor').has('name', '赵红').as('a').outE('creates').inV().hasLabel('prescription').as('b').inE('contain').outV().hasLabel('medicine').has('name', '医疗酒精').as('c').select('a', 'b', 'c').by('height').by(values('createTime', 'weight')).by('name')"
"找出被person马轩支付的person,和马轩喜欢的person","g.V().hasLabel('person').as('a').in('pay').as('b').has('name', '马轩').out('likes').as('c').select('a', 'b', 'c')"
"帮我查询own account TheShy transfer的account,的person","g.V().hasLabel('account').has('name', 'TheShy').as('a').outE('transfer').as('e').inV().hasLabel('account').as('b').inE('own').as('e2').outV().hasLabel('person').as('c').select('b', 'c')"
id减57的值,g.V().has('id').project('id_minus_57').by(values('id').math('_ - 57'))
"查询被城市伦敦包含的公司,和伦敦包含的公司","g.V().hasLabel('city').has('name', '伦敦').as('b').outE('contain').inV().hasLabel('company').as('c').select('b').inE('contain').outV().hasLabel('company').as('a').select('a', 'b', 'c')"
"查找类型为公司的点,返回92个",g.V().hasLabel('company').limit(92)
查找满足条件lang不等于python的节点,"g.V().has('lang', neq('python'))"
"查找与person孙强有关系的公司, 返回和这些公司有关联的person的,id乘54加身高的数量","g.V().has('person', 'name', '孙强').bothE().otherV().hasLabel('company').bothE().otherV().hasLabel('person').project('calc').by(values('id', 'height').math('_a * 54 + _b')).select('calc').count()"
 找出与大学标签相关的部门，再找出与这些部门相关的教师，最后找出这些教师所授的课程。,g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('teacher').out('teach').hasLabel('course')
"查询apply loan loan_30的person,和这些person invest的company","g.V().hasLabel('loan').has('name', 'loan_30').in('apply').hasLabel('person').as('b').out('invest').hasLabel('company').as('c').select('b', 'c')"
帮我查询全部名为徐思思的节点喜欢的用户或帖子,"g.V().has('name', '徐思思').outE('likes').inV().hasLabel(within('user', 'post')).dedup()"
请帮我找出赵国强创建的订单，以及与赵国强有关联的订单。,"g.V().hasLabel('buyer').has('name', '赵国强').as('a').outE('creates').inV().hasLabel('orders').as('b').select('a').inE('creates').outV().hasLabel('orders').as('c').select('a', 'b', 'c')"
"用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询源点类型为person,目标点类型为person,类型为person_pay_person的边",g.E().hasLabel('person_pay_person')
"给出person的三角的环,边标签等于喜欢, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('likes').as('e').inV().as('b').inE('likes').as('e2').outV().as('c').where(eq('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
"给出被帖子拥有数量大于49的标签,记为relationCount,再查询这些标签拥有的论坛","g.V().hasLabel('tag').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('has').hasLabel('post').id().sum()).where(__.select('relationCount').is(gt(49))).select('a').out('has').hasLabel('forum').dedup()"
"帮我查询名为法国的country,以及与其有关的city,并返回法国的area和这些city的name","g.V().has('country', 'name', '法国').as('a').bothE().as('e').otherV().hasLabel('city').as('b').select('a', 'b').by('area').by('name')"
"请帮我查找名为loan_42的点deposit的所有account,并对这些account的value进行求和","g.V().has('name', 'loan_42').outE('deposit').inV().hasLabel('account').values('value').sum()"
请帮我查询buyer为吴轩创建的订单，返回包含在这些订单中的商品的名称和ID。,"g.V().has('buyer', 'name', '吴轩').out('creates').as('b').out('contain').as('c').select('c').by('name').by('id')"
 找出所有作家的伙伴，或他们伙伴的伙伴。,g.V().hasLabel('author').outE('partner').inV().hasLabel('author').outE('partner').inV().hasLabel('author').dedup()
找出杜轩在其中出演，或者杜轩的朋友在其中出演的电影,"g.V().has('person', 'name', '杜轩').bothE('friend').otherV().bothE('acted_in').otherV().hasLabel('film').dedup()"
查找所有标签等于prescription的点,g.V().hasLabel('prescription')
查找全部与仓库Kafka有关系的事项的创建时间,"g.V().has('repository', 'name', 'Kafka').bothE().otherV().hasLabel('issue').values('createTime')"
 找出所有与《百年孤独》存在引用关系的书籍，并返回这些引用关系的创建时间。,"g.V().has('name', '百年孤独').outE('refers').inV().hasLabel('book').outE('refers').inV().hasLabel('book').values('createTime')"
"使用这个图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));给出student的三角的环,边label为student_selects_course, 并返回这些点的id","g.V().hasLabel('student').as('a').outE('student_selects_course').as('e').inV().as('b').outE('student_selects_course').as('e2').inV().as('c').where('a', eq('c')).select('a', 'b', 'c').by().by('id').by('id').project('a', 'b_id', 'c_id').by().by(select('b')).by(select('c'))"
"查询标签等于拥有,且满足条件目标点id为空或f0大于79的边","g.E().hasLabel('has').or(has('targetId', null), has('f0', gt(79)))"
"查找类型为tag,名为科幻的点,返回这些点的id","g.V().hasLabel('tag').has('name', '科幻').id()"
"帮我查询145个和标签为买家的点有创造关系的订单,并且和这些订单有包含关系的商品",g.V().hasLabel('buyer').out('creates').hasLabel('orders').out('contain').hasLabel('goods').limit(145)
id减id的个数,g.V().project('result').by(constant(0))
 请问Zookeeper使用的软件是什么？返回所用软件的编程语言。,"g.V().hasLabel('software').has('name', 'Zookeeper').outE('uses').inV().hasLabel('software').outE('uses').inV().hasLabel('software').values('lang')"
"返回watch film功夫的person,和这些person watch的film","g.V().hasLabel('film').has('name', '功夫').inE('watch').outV().as('b').outE('watch').inV().as('c').select('b', 'c')"
查找和大学中国科技大学之间有合作关系的公司,"g.V().has('university', 'name', '中国科技大学').outE('cooperate').inV().hasLabel('company')"
"给出forum知乎contain的post,以及likes这些post的user, 令forum的salary等于user的id减93乘id, 返回forum的createTime,post的lang,user的id","g.V().hasLabel('forum').has('name', '知乎').as('a').outE('contain').inV().hasLabel('post').as('b').inE('likes').outV().hasLabel('user').as('c').select('a', 'b', 'c').by(__.project('createTime', 'salary').by('createTime').by(__.select('c').values('id').math('(_ - 93) * _'))).by('lang').by('id')"
获取与处方Prescription_441和处方Prescription_158都有关联的patient节点的age属性。,"g.V().has('prescription', 'name', 'Prescription_441').out().as('b').in().has('prescription', 'name', 'Prescription_158').select('b').values('age')"
"返回与名为Comment_208和Comment_153的点共同属于的,标签为电影的节点","g.V().has('name', 'Comment_208').out('belong').hasLabel('film').as('b').in('belong').has('name', 'Comment_153').select('b')"
请帮我找出与王强和何国强都有关联的人，并返回他们的ID和姓名。,"g.V().has('person', 'name', '王强').outE().inV().hasLabel('person').as('b').inE().outV().has('person', 'name', '何国强').select('b').project('id', 'name').by(values('id')).by(values('name'))"
查找以诊断关系关联了病人黄建聪的医生,"g.V().hasLabel('patient').has('name', '黄建聪').inE('diagnose').outV().hasLabel('doctor')"
"帮我查询id为63的点的身高,年龄","g.V().has('id', 63).project('height', 'age').by('height').by('age')"
"查询course高等数学的标签为relation的边,并根据targetId升序排列,返回139个","g.V().has('course', 'name', '高等数学').outE('relation').order().by('targetId', asc).limit(139).inV()"
请帮我找出与书百年孤独有关系的作家的名字,"g.V().has('book', 'name', '百年孤独').bothE().otherV().hasLabel('author').values('name')"
"查询label为购买,以及权重小于69或目标点id不等于539的边","g.E().hasLabel('buy').or(has('weight', lt(69)), has('targetId', neq(539)))"
帮我找一下郑思琪的朋友的朋友的朋友,"g.V().has('buyer', 'name', '郑思琪').out('friend').out('partner').out('friend')"
"请帮我查找所有名为韩轩的点的,name是Order_285或name不等于Order_222的partner,返回这些partner的price,和边的srcId,weight","g.V().has('name', '韩轩').outE('partner').as('e').inV().has('name', within('Order_285')).or().has('name', neq('Order_222')).project('b_price', 'e_srcId', 'e_weight').by(values('price')).by(select('e').values('srcId')).by(select('e').values('weight'))"
请帮我查找所有名为眼科的点has的doctor,"g.V().has('name', '眼科').out('has').hasLabel('doctor')"
帮我找出由周红、李科共同创建的评论节点,"g.V().has('name', '周红').as('a').outE('creates').inV().hasLabel('comment').as('b').inE('creates').outV().has('name', '李科').as('c').select('b')"
"以(167,'famale',7660),(181,'famale',8695),(173,'male',2870),(163,'famale',5925)作为请求表数据,属性分别为height,gender,salary, 以属性gender作为相等条件,给出名为王科和吴强的,类型为buyer的点公共的friend节点的名单","g.inject([['height':167,'gender':'famale','salary':7660],['height':181,'gender':'famale','salary':8695],['height':173,'gender':'male','salary':2870],['height':163,'gender':'famale','salary':5925]]).unfold().as('p').V().hasLabel('buyer').has('name','王科').as('a').where(__.as('a').values('gender').as('a_gender').select('p').select('gender').where(eq('a_gender'))).outE('friend').inV().as('b').inE('friend').outV().hasLabel('buyer').has('name','吴强').as('c').where(__.as('c').values('gender').as('c_gender').select('p').select('gender').where(eq('c_gender'))).select('b').values('name')"
"给出id为187的公司申请的贷款, 并将贷款有关的贷款的金额的最大值赋值给贷款(b)的金额, 接着查询贷款(b)的金额小于187的贷款存款的账号","g.V().has('company', 'id', 187).outE('apply').inV().hasLabel('loan').as('b').sideEffect(__.select('b').sack(assign).by(__.inE().outV().hasLabel('loan').values('amount').max()).property('amount', __.sack())).select('b').has('amount', lt(187)).outE('deposit').inV().hasLabel('account').as('d').select('b', 'd').by('amount').by()"
"查询前194个类别不等于皮肤药或类别不是感冒药,且价格不为空的药品","g.V().hasLabel('medicine').has('price', neq(null)).or(has('category', neq('皮肤药')), has('category', neq('感冒药'))).limit(194)"
"帮我查询和类型是person的点有parent关系的person,且和这些person有lover关系的person,且和这些person有family关系的person",g.V().hasLabel('person').as('a').out('parent').hasLabel('person').as('b').out('lover').hasLabel('person').as('c').out('family').hasLabel('person').as('d').select('d')
帮我查询与作家赵梅和Amily都存在撰写关系的点,"g.V().has('author', 'name', '赵梅').out('write').as('b').in('write').has('author', 'name', 'Amily').select('b')"
查找电子科技大学所在的中国城市,"g.V().has('university', 'name', '电子科技大学').out('belong').hasLabel('city').out('belong').hasLabel('country')"
"找出company字节creates的software,被其他company creates的数量","g.V().has('company', 'name', '字节').out('creates').as('b').in('creates').hasLabel('company').where(neq('a')).dedup().count()"
找出所有与user黄红有关系的repository的createTime,"g.V().hasLabel('user').has('name', '黄红').bothE().otherV().hasLabel('repository').values('createTime')"
"查询22个和类型为person的点有认识关系的person,以及和这些person有认识关系的person",g.V().hasLabel('person').as('a').out('knows').hasLabel('person').as('b').out('knows').hasLabel('person').as('c').select('c').limit(22)
"帮我查询名为郑月的person,以及与其有关的person,并返回郑月的id和这些person的年龄","g.V().has('person', 'name', '郑月').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('id').by('age')"
"返回和issue ISSUE-264有关系的user,返回这些点的changeFileNumber,createTime,id","g.V().hasLabel('issue').has('name', 'ISSUE-264').bothE().otherV().hasLabel('user').project('changeFileNumber', 'createTime', 'id').by(values('changeFileNumber')).by(values('createTime')).by(values('id'))"
"请帮我查找label为公司的点,返回42个",g.V().hasLabel('company').limit(42)
找出所有被命名为'呐喊'和'罪与罚'，且标签为'书'的点共同引用的节点列表。,"g.V().has('book', 'name', '呐喊').out('refers').as('b').in('refers').has('book', 'name', '罪与罚').select('b').values('name')"
找出id为109的person的朋友，以及这些朋友与该用户的关联伙伴。,"g.V().has('person', 'id', '109').as('a').bothE().otherV().hasLabel('user').as('b').bothE().otherV().hasLabel('user').where(__.as('b').outE('friend').otherV().as('c')).where(__.as('b').outE('partner').otherV().as('d')).select('a', 'b', 'c', 'd')"
"输入表的列为gender,salary,id, 数据为('male',6388,78),('famale',7691,74), 以属性gender作为相等条件,查询person赵强的标签为relation的边,并根据weight从小到大排列,返回75个","g.withSideEffect('p', [['gender':'male','salary':6388,'id':78], ['gender':'famale','salary':7691,'id':74]]).V().hasLabel('person').where(and(__.values('gender').is(within(__.select('p').unfold().values('gender'))), __.has('name', '赵强'))).outE('relation').order().by('weight', asc).limit(75).inV()"
请帮我查找104个与赵建国和李建国都存在关系的person节点,"g.V().has('name', '赵建国').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '李建国').select('b').limit(104)"
"请帮我找出label为病人的点,返回79个",g.V().hasLabel('patient').limit(79)
"输入请求点id的列表150,645,879,403,546, 以属性id作为相等条件,返回account以id,value,lastLoginTime分组的name, 根据name降序排序","g.inject([150, 645, 879, 403, 546]).unfold().as('p').V().hasLabel('account').has('id', __.where(eq('p'))).group().by(union(__.id(), __.values('value'), __.values('lastLoginTime')).fold()).by(__.values('name').fold()).order(local).by(values, desc)"
"请帮我找出合作大学清华大学的公司,和这些公司合作的大学","g.V().has('university', 'name', '清华大学').in('cooperate').as('b').out('cooperate').as('c').select('b', 'c')"
帮我查询与卖家马伟有回答关系的1跳以内的环,"g.V().has('seller', 'name', '马伟').as('a').outE('ask').inV().range(0, 0).as('b').where(__.select('b').out().where(eq('a'))).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').id()).by(select('b').id())"
给出名为Tom的节点watch的tag或cinema,"g.V().has('name', 'Tom').outE('watch').inV().hasLabel(within('tag', 'cinema')).dedup()"
"查找所有源点id不为空或性别为male或性别是male,目标点名字等于星际穿越且价值小于22,且类型是观看的边","g.V().has('id', neq(null)).or().has('gender', 'male').or().has('gender', 'male').outE('watch').as('e').inV().has('name', '星际穿越').has('value', lt(22)).select('e')"
"找出与用户韩宏有关系的标签, 返回和这些标签有关联的标签的,id除id的数量","g.V().has('user', 'name', '韩宏').bothE().otherV().hasLabel('tag').bothE().otherV().hasLabel('tag').dedup().count()"
"帮我查询张轩的点knows的person,然后帮我查询张轩被knows的person,一起返回","g.V().has('name', '张轩').as('a').bothE('knows').otherV().hasLabel('person').as('b').select('a', 'b')"
"找出35个名为吴国强的点knows的类型是person的节点,且其age大于等于89或height大于158","g.V().has('name', '吴国强').outE('knows').inV().hasLabel('person').or(has('age', gte(89)), has('height', gt(158))).limit(35)"
"请帮我查找名字等于PR-148或id不为空的合并请求属于的仓库的名称,以及这些仓库 拥有的事项的名称","g.V().hasLabel('pullRequest').or(has('name', 'PR-148'), has('id', neq(null))).outE('belong').inV().hasLabel('repository').as('b').outE('has').inV().hasLabel('issue').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"给出用户赵轩创造的事项,以及创造这些事项的用户","g.V().has('user', 'name', '赵轩').as('a').outE('creates').as('e').inV().hasLabel('issue').as('b').inE('creates').as('e2').outV().hasLabel('user').as('c').select('b', 'c')"
"请帮我查找与名为张建聪和周科的点共同认识的,标签等于person的节点","g.V().has('name', '张建聪').out('knows').as('b').in('knows').has('name', '周科').select('b').hasLabel('person')"
找出名为杜强的节点发布的编辑或书,"g.V().has('name', '杜强').outE('publish').inV().hasLabel(within('publisher', 'book'))"
"查询源点年龄为空,边标签为购买,且满足条件f1不等于true的边,返回这些边的f0除502的值","g.V().has('age', eq(null)).outE('buy').has('f1', neq(true)).project('result').by(values('f0').math('/ 502'))"
"以(2519,42,195),(1667,0,796),(2609,5,529)作为请求表数据,属性分别为peopleNumber,id,value, 源点的value等于输入表value,帮我查询44个与微软和字节都存在关系的大学节点","g.withSideEffect('p', [[2519,42,195],[1667,0,796],[2609,5,529]]).V().has('value', within(select('p').unfold().tail(2))).has('name', '微软').outE().inV().hasLabel('university').as('b').inE().outV().has('name', '字节').select('b').limit(44)"
请提供与陈建国有观影关系的电影，以及与电影《建国大业》有关联的标签。,"g.V().has('person', 'name', '陈建国').as('a').out('watch').as('b').V().has('film', 'name', '建国大业').as('c').out('has').as('d').select('a', 'b', 'c', 'd')"
"返回id为44的作家有关的作家的朋友, 再返回和作家有关系的朋友","g.V().has('author', 'id', 44).as('a').bothE().otherV().hasLabel('author').as('b').bothE().hasLabel('friend').otherV().as('c').select('b').bothE().hasLabel('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
 找出所有与一个人关联的人，以及这些人与另一个人之间的雇佣关系。,"g.V().has('person', 'id', '36').bothE().otherV().hasLabel('person').as('b').inE('pay').otherV().hasLabel('person').as('c').select('b', 'c')"
"返回名为ISSUE-359的事项,以及与其有关的合并请求,并返回ISSUE-359的名字和这些合并请求的变更文件数","g.V().hasLabel('issue').has('name', 'ISSUE-359').bothE().otherV().hasLabel('pullRequest').project('a_name', 'b_changeFileNumber').by(select('a').values('name')).by(values('changeFileNumber')).select('a').store('a')"
查询被部门体育学院拥有的教师,"g.V().hasLabel('department').has('name', '体育学院').as('b').in('has').hasLabel('teacher').as('a').select('a', 'b')"
"给出和用户王强有创造关系的合并请求,再给出以创造关系关联了王强的合并请求","g.V().hasLabel('user').has('name', '王强').as('a').outE('creates').inV().hasLabel('pullRequest').as('b').select('a').inE('creates').outV().hasLabel('pullRequest').as('c').select('a', 'b', 'c')"
"请帮我找出是否冻结为false或名字为BIN的账号转账的账号的名称,以及这些账号 还款的贷款的名称","g.V().hasLabel('account').or(has('isBlock', false), has('name', 'BIN')).outE('transfer').as('e').inV().as('b').outE('repay').as('e2').inV().as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
请帮我找出与person黄建聪有拥有关系的1度以内的环,"g.V().has('person', 'name', '黄建聪').as('a').bothE('own').bothV().where(neq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"输入请求点id的列表185,580,540,790, 以属性id作为相等条件,查找全部id为92的software关联的software,和以creates关系关联了这些software的其他company","g.withSideEffect('p', [185, 580, 540, 790]).V().hasLabel('software').has('id', within('p')).has('id', '92').bothE().otherV().hasLabel('software').as('b').inE('company_creates_software').otherV().hasLabel('company').as('c').select('b', 'c')"
"请帮我查找源点名字不等于李轩或id在58到59之间,目标点星数小于等于79,名字是Hive,且label为提交的边","g.V().has('name', neq('李轩')).or().has('id', between(58, 59)).outE('commits').as('e').inV().has('stars', lte(79)).has('name', 'Hive').select('e')"
"查找所有源点满足条件薪资大于等于5016,目标点满足条件薪资不为空,且类型为家人的边","g.E().hasLabel('family').where(outV().has('salary', gte(5016))).where(inV().has('salary', neq(null)))"
"使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询与部门法学院有department_has_teacher关系的1度以内的环","g.V().has('department', 'name', '法学院').as('a').outE('department_has_teacher').inV().as('b').where(__.select('a').where(eq('b'))).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').id()).by(select('b').id())"
"使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询和user韩建聪有user_publish_post关系的post,以及和user陈思琪有user_publish_post关系的post,将它们都返回","g.V().has('user', 'name', '韩建聪').as('a').outE('user_publish_post').inV().as('b').select('a').V().has('user', 'name', '陈思琪').as('c').outE('user_publish_post').inV().as('d').select('a', 'b', 'c', 'd')"
"查找从作家黄科出发,经过标签为撰写的边,走2到4度到达的书点","g.V().has('author', 'name', '黄科').repeat(out('write')).times(2).emit().repeat(out('write')).times(2).has('book').dedup()"
"返回名为赵建国的person,以及与其有关的person,并返回赵建国的性别和这些person的身高","g.V().hasLabel('person').has('name', '赵建国').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('gender').by('height')"
"找出id为15的买家取消的订单, 并将订单有关的订单的名字的最小值赋值给订单(b)的价格, 接着查询订单(b)的价格小于15的订单包含的商品","g.V().has('buyer', 'id', 15).outE('cancel').inV().hasLabel('orders').as('b').project('b', 'price').by(identity()).by(__.inE().outV().hasLabel('orders').values('name').min()).as('p').select('b').where(select('p').select('price').is(lt(15))).outE('contain').inV().hasLabel('goods').as('d').select('b', 'p').by().by(select('price')).select(values)"
给出与论坛推特有包含关系的3跳以内的环,"g.V().has('forum', 'name', '推特').as('a').repeat(bothE('contain').otherV().simplePath()).times(2).where(loops().is(gt(0))).where(out('contain').as('a')).select('a').project('a.id', 'b_id').by(id()).by(select('a').id())"
"给出所有和名为赵轩的person有相关者关系,或有相关者的相关者关系的person","g.V().hasLabel('person').has('name', '赵轩').outE('relation').inV().hasLabel('person').as('b').select('b')"
"找出发布作家王科撰写的书,的编辑","g.V().has('author', 'name', '王科').outE('write').inV().hasLabel('book').as('b').inE('publish').outV().hasLabel('publisher').as('c').select('b', 'c')"
"使用列为value,name,lang, 数据为(177,'Calcite','rust'),(333,'Calcite','go')的子查询作为输入表, 以属性value作为相等条件,请帮我找出全部软件以名字,开源,价值分组的价值, 根据价值降序排序","g.inject([['value':177,'name':'Calcite','lang':'rust'],['value':333,'name':'Calcite','lang':'go']]).as('p').V().hasLabel('software').as('a').where(eq('a')).by('value').by(select('p').unfold().select('value')).select('a').group().by(union(values('name'), values('openSource'), values('value')).fold()).by(select('value')).order(local).by(values, desc)"
 请帮我查找与这家公司相关的所有软件，以及这些软件与其他软件之间的uses关系。,"g.V().hasLabel('company').has('id', '198').bothE().otherV().hasLabel('software').as('b').inE('uses').otherV().hasLabel('software').as('c').select('b', 'c')"
返回与用户孙思琪有喜欢关系，并且与标签文艺有关联的帖子。获取这些帖子的值、名称、创建时间以及用户孙思琪和标签文艺的ID。,"g.V().has('user', 'name', '孙思琪').as('a').out('likes').as('b').in('has').has('tag', 'name', '文艺').as('c').select('a', 'b', 'c').by('id').by(values('value', 'name', 'createTime')).by('id')"
找出与孙国强和何红都有联系的buyer节点，共174个。,"g.V().has('name', '孙国强').outE().inV().hasLabel('buyer').as('b').inE().outV().has('name', '何红').select('b').limit(174)"
"帮我查询person的三角的环,边类型是friend, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('friend').inV().as('b').outE('friend').inV().as('c').where(__.inE('friend').outV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
请帮我查找person及其家族成员,"g.V().hasLabel('person').outE('family').inV().range(1, 2).dedup()"
请帮我找出满足以下条件的post：它们属于forum，其中包含的peopleNumber为50，createTime不为2010年06月03日，并且有tag。我需要获取这些post的名称和它们所含有的tag的名称。,"g.V().hasLabel('forum').has('peopleNumber', 50).has('createTime', neq('2010-06-03')).outE('contain').inV().hasLabel('post').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 请帮我查找《白夜行》这本书的推荐者，以及推荐者所推荐的书籍。,"g.V().hasLabel('book').has('name', '白夜行').outE('refers').inV().outE('partner').inV().outE('refers').inV()"
"查找名为李宏的病人或部门,以及与其有关的病人,并返回李宏的性别和这些病人的薪资","g.V().hasLabel(within('patient', 'department')).has('name', '李宏').as('a').bothE().otherV().hasLabel('patient').as('b').select('a', 'b').by('gender').by('salary')"
找出与买家赵宏有取消关系，并且包含商品桌子的订单。返回这些订单的名字、买家赵宏的身高和商品桌子的类别。,"g.V().hasLabel('buyer').has('name', '赵宏').as('a').outE('cancel').inV().hasLabel('orders').as('b').inE('contain').outV().hasLabel('goods').has('name', '桌子').as('c').select('a', 'b', 'c').by('height').by('name').by('category')"
帮我查一下人人影城的合作伙伴关系,"g.V().has('cinema', 'name', '人人影城').outE('partner').inV().outE('relation').inV().outE('relation').inV()"
"输入请求点id的列表661,43,739, 以属性id作为相等条件,找出读者韩国强的相关者,的目标点id加163的数量","g.inject([661, 43, 739]).unfold().as('p').V().hasLabel('reader').has('id', __.select('p')).has('name', '韩国强').outE('relation').as('e').inV().as('b').select('e').values('targetId').math('_ + 163').count()"
"以638作为请求点id, 以属性id作为相等条件,查询和book有关联的book节点,并根据其id,name分组,返回id,name,以及price减86的值","g.withSideEffect('p', [638]).V().hasLabel('book').has('id', __.select('p')).bothE('book_refers_book').otherV().hasLabel('book').group().by(__.project('id', 'name').by('id').by('name')).by(__.project('id', 'name', 'price_minus_86').by('id').by('name').by(__.math('price - 86'))).select(values).unfold().project('id', 'name', 'price_minus_86').by(select('id')).by(select('name')).by(select('price_minus_86'))"
"查询所有陈强的点consult的seller,然后查询陈强被ask的seller,一起返回","g.V().has('name', '陈强').as('a').outE('consult').inV().hasLabel('seller').as('b').select('a').inE('ask').outV().hasLabel('seller').as('c').select('a', 'b', 'c')"
找到与黄若涵有关联的人,"g.V().has('person', 'name', '黄若涵').inE('relates').outV()"
"给出类型为大学的点,返回178个",g.V().hasLabel('university').limit(178)
找出person黄轩和黄思思都存在pay关系的点,"g.V().has('person', 'name', '黄轩').outE('pay').inV().as('b').inE('pay').outV().has('person', 'name', '黄思思').select('b')"
"给出被person马国强invest的company,和马国强apply的loan","g.V().hasLabel('person').has('name', '马国强').as('b').outE('invest').inV().hasLabel('company').as('a').select('b').outE('apply').inV().hasLabel('loan').as('c').select('a', 'b', 'c')"
"查找56个大学重庆大学和武汉大学,共同的伙伴","g.V().has('university', 'name', '重庆大学').outE('partner').inV().as('b').inE('partner').outV().has('university', 'name', '武汉大学').select('b').limit(56)"
"返回全部源点类型为教师,边类型为教,并且满足条件f1是true的边","g.V().hasLabel('teacher').outE('teach').has('f1', true)"
"查询和大学电子科技大学有关的大学,称为X,再查询和这个X有关联的其他大学,以及和X有关联的课程","g.V().has('university', 'name', '电子科技大学').as('a').bothE().otherV().hasLabel('university').as('b').bothE().otherV().hasLabel('university').as('c').select('b').bothE().otherV().hasLabel('course').as('d').select('a', 'b', 'c', 'd')"
 查询与孙国强有knows关系且与郑建国有knows关系的节点，返回这些节点的性别、ID、年龄、孙国强的身高以及郑建国的名字。,"g.V().has('person', 'name', '孙国强').as('a').out('knows').hasLabel('person').as('b').in('knows').has('person', 'name', '郑建国').as('c').select('a', 'b', 'c').by(values('height')).by(values('gender', 'id', 'age')).by(values('name'))"
"请帮我查找名为PR-177的仓库或用户,以及与其有关的事项,并返回PR-177的创建时间和这些事项的状态","g.V().has('name', 'PR-177').hasLabel(within('repository', 'user')).bothE().otherV().hasLabel('issue').as('b').select('b').by(values('status')).as('status').select('b').select(all, 'status').by().path().by(union(values('createTime'), identity()).fold()).unfold()"
请帮我找出与孙思思购买的goods椅子相关的orders节点，并返回它们的价值、价格和名称。,"g.V().hasLabel('goods').has('name', '椅子').outE().inV().hasLabel('orders').as('b').inE().outV().hasLabel('buyer').has('name', '孙思思').select('b').values('value', 'price', 'name')"
"查询全部person以名字分组的年龄, 根据年龄升序排序","g.V().hasLabel('person').group().by('name').by(values('age').fold()).order(local).by(values, asc)"
"帮我查询所有学生的伙伴,或其伙伴的伙伴",g.V().hasLabel('student').as('a').outE('partner').inV().hasLabel('student').as('b').select('b').dedup()
"查找所有源点类型是公司,目标点类型是城市,类型是国家的边",g.E().hasLabel('country').where(outV().hasLabel('company')).where(inV().hasLabel('city'))
"请帮我查找belong country日本的city,和这些city contain的company","g.V().hasLabel('country').has('name', '日本').in('belong').as('b').out('contain').as('c').select('b', 'c')"
"给出所有源点label为user,目标点label为post,label为forum的边",g.E().hasLabel('forum').where(outV().hasLabel('user')).where(inV().hasLabel('post'))
"给出128个名为急诊部的点拥有的类型是医生的节点,且其身高大于192或年龄为空","g.V().has('name', '急诊部').outE('has').inV().hasLabel('doctor').has('height', gt(192)).or(__.not(__.has('age'))).limit(128)"
"返回全部和大学点有拥有关系的部门节点,且边满足条件源点id小于等于72,目标部门节点id对1取余不等于37","g.V().hasLabel('university').as('a').outE('has').has('srcId', lte(72)).as('e').inV().hasLabel('department').has('id', neq(37)).as('b').select('b')"
请帮我找出名为吴梅的点喜欢的书,"g.V().has('name', '吴梅').outE('likes').inV().hasLabel('book')"
"查询全部源点类型为person,目标点类型为person,类型为person的边",g.V().hasLabel('person').outE('person').as('e').inV().hasLabel('person').select('e')
请帮我找出张月的恋人，以及他们之间的恋爱关系，并返回这些人的年龄。,"g.V().has('name', '张月').outE('lover').inV().hasLabel('person').outE('lover').inV().hasLabel('person').values('age')"
"找出价值不为空或名字不等于动作,且名字不是古代的节点","g.V().has('value', neq(null)).or().has('name', neq('动作')).has('name', neq('古代')).dedup()"
查询前131个满足条件id小于等于78或id除id不等于184的用户,"g.V().hasLabel('user').or(has('id', lte(78)), has('id', neq(184))).limit(131)"
 找出认识黄雪的人。,"g.V().hasLabel('person').has('name', '黄雪').as('b').inE('knows').as('e').outV().as('a').select('a', 'b')"
 请问您要查询哪个公司（Company)的字节员工（Employee)购买了哪些软件（Software)?,"g.V().hasLabel('company').has('name', '字节').outE('employee').inV().hasLabel('person').outE('buy').inV().hasLabel('software')"
"用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出和user李红有关的user,称为X,再请帮我找出和这个X有关联的其他forum,以及和X有关联的tag","g.V().has('user', 'name', '李红').as('a').both().hasLabel('user').as('b').both().hasLabel('forum').as('c').select('b').both().hasLabel('tag').as('d').select('a', 'b', 'c', 'd')"
"帮我查询被company cooperate数量大于147的university,记为relationCount,再查询这些university cooperate的country","g.V().hasLabel('university').as('a').project('a', 'relationCount').by(identity()).by(__.in('cooperate').hasLabel('company').id().mean()).select('a', 'relationCount').as('a_with_count').select('a_with_count').where(select('relationCount').is(gt(147))).select('a').out('cooperate').hasLabel('country').dedup()"
"输入请求点id的列表339, 以属性id作为相等条件,查找prescription的1跳以内的环","g.withSideEffect('p', [339]).V().has('prescription', 'id', within('p')).as('a').bothE().otherV().as('b').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"请帮我找出与名为赵轩和孙国强的点共同属于的,类型是部门的节点","g.V().has('name', '赵轩').outE('belong').inV().hasLabel('department').as('b').inE('belong').outV().has('name', '孙国强').select('b')"
"输入请求点id的列表81,337,817,636,639, 以属性id作为相等条件,找出与user马科有user_creates_issue关系的1度的环","g.inject([81, 337, 817, 636, 639]).as('p').V().hasLabel('user').has('id', within('p')).has('name', '马科').as('a').outE('user_creates_issue').inV().as('b').where(outE('user_creates_issue').inV().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
徐红和陈国强是52位医生的共同朋友。,"g.V().has('doctor', 'name', '徐红').outE('friend').inV().as('b').inE('friend').outV().has('doctor', 'name', '陈国强').select('b').limit(52)"
 查询同时与孙若涵和王若涵有关的人。,"g.V().has('person', 'name', '孙若涵').bothE('colleague').otherV().hasLabel('person').bothE('friend').otherV().has('person', 'name', '王若涵').select('b')"
"帮我查询id为188的大学关联的部门,和以拥有关系关联了这些部门的其他大学","g.V().has('university', 'id', 188).bothE().otherV().hasLabel('department').as('b').inE('has').otherV().hasLabel('university').as('c').select('b', 'c')"
"用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找标签等于prescription的点,返回171个",g.V().hasLabel('prescription').limit(171)
请帮我找出与账号类型的点有还款关联的贷款，以及与这些贷款有存款关联的账号，同时还要找到与这些账号有转账关联的账号。,g.V().hasLabel('account').as('a').outE('repay').as('e').inV().hasLabel('loan').as('b').outE('deposit').as('e2').inV().hasLabel('account').as('c').outE('transfer').as('e3').inV().hasLabel('account').as('d').select('d')
"查找源点满足条件salary不为空,height为空,或name不是李思思,目标点满足条件createTime为2033年07月11日且createTime不等于2023年04月29日,或createTime等于2033年04月02日,且标签等于accept的边","g.E().hasLabel('accept').where(and(__.outV().or(and(has('salary', neq(null)), has('height', eq(null))), has('name', neq('李思思'))), __.inV().or(and(has('createTime', '2033-07-11'), has('createTime', neq('2023-04-29'))), has('createTime', '2033-04-02'))))"
"给出所有和person点有认识关系的person节点,且边满足条件权重不为空,目标person节点身高不等于191","g.V().hasLabel('person').as('a').outE('knows').has('weight', neq(null)).as('e').inV().hasLabel('person').has('height', neq(191)).as('b').select('b')"
查找前145个标签为父母的边,g.E().hasLabel('parent').limit(145)
请帮我查找与buyer徐红有creates关系的2度以内的环,"g.V().has('buyer', 'name', '徐红').as('a').bothE('creates').otherV().bothE().otherV().where(eq('a')).path().by('id').by('id').by('id').select('a', 'b_id').by('id').by(tail(local, 1))"
请找出与Order_406有关联，同时与买家郑建聪有关联的seller节点，并返回它们的性别、身高和ID。,"g.V().hasLabel('orders').has('name', 'Order_406').outE().inV().hasLabel('seller').as('b').inE().outV().hasLabel('buyer').has('name', '郑建聪').select('b').project('gender', 'height', 'id').by(values('gender')).by(values('height')).by(values('id'))"
"用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));返回id为69的电影院有关的电影的朋友, 再返回和电影有关系的相关者","g.V().has('cinema', 'id', 69).bothE().otherV().hasLabel('film').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd').by(valueMap(true))"
"请帮我查找50个名为周伟的点喜欢的标签为person的节点,且其身高为空","g.V().has('name', '周伟').outE('likes').inV().hasLabel('person').hasNot('height').limit(50)"
 请帮我查找与作家类型相关的作家，以及这些作家所写的书籍，以及这些书籍中被引用的书籍。,g.V().hasLabel('author').as('a').out('knows').hasLabel('author').as('b').out('write').hasLabel('book').as('c').out('refers').hasLabel('book').as('d').select('d')
"查询源点类型是买家,边类型是创造,且f0不为空或f0为空,且时间戳不等于2000年02月06日的边","g.V().hasLabel('buyer').outE('creates').has('timeStamp', neq('2000-02-06')).where(or(has('f0'), not(has('f0'))))"
提供company的关系，或者关系中的关系。,g.V().hasLabel('company').outE('relation').inV().outE('relation').inV().dedup()
给出全部和university武汉大学之间有has关系的department,"g.V().has('university', 'name', '武汉大学').out('has').hasLabel('department')"
"找出名为黄伟的点creates的issue,并对这些issue的id进行求和","g.V().has('name', '黄伟').outE('creates').inV().hasLabel('issue').values('id').sum()"
 给出赵若涵写的所有书，以及她认识的作家名单。,"g.V().has('name', '赵若涵').as('a').outE('write').inV().hasLabel('book').as('b').select('a').inE('knows').outV().hasLabel('author').as('c').select('a', 'b', 'c')"
"帮我查询person何月观看的电影,以及观看这些电影的person","g.V().has('person', 'name', '何月').outE('watch').inV().hasLabel('film').as('b').inE('watch').outV().hasLabel('person').as('c').select('b', 'c')"
 有109个人和标签为person的点一起观看了电影，并且这些电影与它们有has关系标签的tag。,g.V().hasLabel('person').as('a').outE('watch').as('e').inV().hasLabel('film').as('b').outE('has').as('e2').inV().hasLabel('tag').as('c').select('c').limit(109)
 返回所有拥有耳鼻喉科医生的点，然后筛选出医生创建处方的点，并返回这些点的名称。,"g.V().has('name', '耳鼻喉科').out('has').hasLabel('doctor').out('creates').hasLabel('prescription').values('name')"
返回类型是person或公司或软件的点,"g.V().hasLabel(within('person', 'company', 'software'))"
请帮我找出Light账号相关者的伙伴朋友,"g.V().hasLabel('account').has('name', 'Light').outE('relation').inV().outE('friend').inV().outE('partner').inV()"
"返回132个课程程序设计和线性代数,共同的相关者","g.V().hasLabel('course').has('name', '程序设计').outE('relation').inV().as('b').inE('relation').outV().hasLabel('course').has('name', '线性代数').select('b').limit(132)"
"请帮我找出类型是学生,名为孙雪的点,返回这些点的薪资","g.V().hasLabel('student').has('name', '孙雪').values('salary')"
"请帮我找出53个名为Kafka的点has的标签等于issue的节点,且节点status不等于Closed,createTime不等于2026年02月26日","g.V().has('name', 'Kafka').outE('has').inV().hasLabel('issue').has('status', neq('Closed')).has('createTime', neq('2026-02-26')).limit(53)"
"查找和类型是account的点有repay关系的loan,以及和这些loan有deposit关系的account,以及和这些account有transfer关系的account",g.V().hasLabel('account').as('a').outE('repay').inV().hasLabel('loan').as('b').outE('deposit').inV().hasLabel('account').as('c').outE('transfer').inV().hasLabel('account').as('d').select('d')
"返回所有何梅的点支付的person,然后返回何梅被支付的person,一起返回","g.V().has('name', '何梅').as('a').outE('pay').inV().hasLabel('person').as('b').select('a').inE('pay').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
请帮我找出与论坛相关的标签，以及这些标签与其他帖子之间的'has'关系。,"g.V().has('forum', 'id', '119').bothE().otherV().hasLabel('tag').as('b').inE('has').otherV().hasLabel('post').as('c').select('b', 'c')"
"给出person Jimmy relates的person, 令person的height等于person的id除94对30取余, 返回person(a)的name, person(b)的age","g.V().hasLabel('person').has('name', 'Jimmy').as('a').outE('relates').as('e').inV().hasLabel('person').as('b').select('a', 'b').by(__.project('name', 'height', 'id').by('name').by(__.math('id / 94 % 30').by('id')).by('id')).by(__.project('age').by('age')).select(values).unfold().project('a.name', 'b.age').by(select('a').select('name')).by(select('b').select('age'))"
"帮我查询buyer Jack cancel的orders,被其他buyer creates的数量","g.V().hasLabel('buyer').has('name', 'Jack').outE('cancel').inV().hasLabel('orders').inE('creates').outV().hasLabel('buyer').count()"
请帮我查询与'company'相关的公司信息，以及与'字节apply'相关的贷款信息，并将两者都返回。,"g.V().hasLabel('company').has('name', '字节').as('a').bothE().as('e').otherV().hasLabel('company').as('b').select('a').outE('apply').as('e2').inV().hasLabel('loan').as('c').select('a', 'b', 'c')"
"给出和comment Comment_173有belong关系的film,再给出以belong关系关联了Comment_173的film","g.V().hasLabel('comment').has('name', 'Comment_173').as('a').outE('belong').inV().hasLabel('film').as('b').select('a').inE('belong').outV().hasLabel('film').as('c').select('a', 'b', 'c')"
"请帮我找出被person马强关联的person,和马强关联的person","g.V().hasLabel('person').has('name', '马强').as('b').bothE('relates').otherV().hasLabel('person').as('a', 'c').select('a', 'b', 'c')"
"给出所有doctor的friend,或其friend的friend",g.V().hasLabel('doctor').repeat(out('friend')).times(2).dedup()
查询与韩若涵和吴雪都有关联的66本书。,"g.V().has('name', '韩若涵').outE().inV().hasLabel('book').as('b').inE().outV().has('name', '吴雪').select('b').limit(66)"
"帮我查询名为阿里和腾讯的,label为公司的点公共的伙伴节点的名单","g.V().has('company', 'name', '阿里').outE('partner').inV().as('b').inE('partner').outV().has('company', 'name', '腾讯').select('b').values('name')"
"给出从buyer赵强出发,经过类型是look的边,走3跳到达的goods点","g.V().has('buyer', 'name', '赵强').repeat(outE('look').inV()).times(3).hasLabel('goods')"
"根据id分组,计算课时减47的值",g.V().hasLabel('a').group().by('id').by(values('courseHour').math('_ - 47'))
"请帮我找出所有与浙江大学存在合作关系的公司,公司与大学存在合作关系的点,返回这些点的id","g.V().has('name', '浙江大学').outE('cooperate').inV().hasLabel('company').outE('cooperate').inV().hasLabel('university').id()"
"请帮我查找标签为person的点,返回29个",g.V().hasLabel('person').limit(29)
"请帮我查找名为王强的点relates的所有person,并对这些person的name进行求和","g.V().has('name', '王强').outE('relates').inV().hasLabel('person').values('name').sum()"
查找被loan loan_47 deposit的account,"g.V().hasLabel('loan').has('name', 'loan_47').outE('deposit').inV().hasLabel('account').as('b', 'a').select('a', 'b')"
"查询名为张思琪的person,以及与其有关的person,并返回张思琪的薪资和这些person的年龄","g.V().has('person', 'name', '张思琪').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('salary').by('age')"
"帮我查询全部软件的伙伴,或其伙伴的伙伴",g.V().hasLabel('software').outE('partner').inV().hasLabel('software').path().by('id').by('id').by('id').limit(2).dedup().select('b')
 滴滴和谷歌之间有什么共同点？,"g.V().has('company', 'name', '滴滴').outE('relation').inV().as('b').inE('relation').outV().has('company', 'name', '谷歌').select('b').limit(185)"
"以51作为请求点id, 以属性id作为相等条件,请帮我查找全部person的friend,或其friend的friend","g.withSideEffect('p', [51]).V().hasLabel('person').has('id', __.select('p')).repeat(outE('person_friend_person').inV().simplePath()).times(2).emit().dedup()"
请帮我找出和大学武汉大学之间有合作关系的公司,"g.V().hasLabel('university').has('name', '武汉大学').outE('cooperate').inV().hasLabel('company')"
"请帮我查找课程属于的部门, 令部门的大小的值等于属于部门的课程的名字的最大值, 再查找部门拥有的教师","g.V().hasLabel('course').as('a').outE('belong').as('e').inV().hasLabel('department').as('b').group().by(identity()).by(__.in('belong').hasLabel('course').values('name').max()).as('sizeMap').select('b').sideEffect(__.select('sizeMap').by(__.select('b')).by().store('bSize')).select('b').outE('has').as('e3').inV().hasLabel('teacher').as('d').select('b', 'd').by(__.select('bSize')).by()"
"给出id为145的读者关联的书,和以认识关系关联了这些书的其他书","g.V().has('reader', 'id', 145).bothE().otherV().hasLabel('book').as('b').bothE('knows').otherV().hasLabel('book').as('c').select('b', 'c')"
"请帮我找出所有名为周建聪的点的,id不是524且字数为空的伙伴,返回这些伙伴的字数,和边的f1,时间戳,目标点id","g.V().has('name', '周建聪').outE('partner').as('e').inV().has('id', neq(524)).has('wordCount', eq(null)).project('b_wordCount', 'e_f1', 'e_timeStamp', 'e_targetId').by(values('wordCount')).by(select('e').values('f1')).by(select('e').values('timeStamp')).by(select('e').values('targetId'))"
给出与买家何思琪和杜思琪都存在咨询关系的点,"g.V().hasLabel('buyer').has('name', '何思琪').outE('consult').inV().as('b').inE('consult').outV().hasLabel('buyer').has('name', '杜思琪').select('b')"
"返回论坛天涯论坛 包含的用户,返回用户 发布的帖子的字数减864的值","g.V().hasLabel('forum').has('name', '天涯论坛').out('contain').hasLabel('user').out('publish').hasLabel('post').project('result').by(values('wordCount').math('_ - 864'))"
"请帮我查找课程大学物理属于的部门,被其他大学拥有的数量","g.V().has('course', 'name', '大学物理').out('belong').in('has').hasLabel('university').count()"
 返回publisher或其合作伙伴的合作伙伴。,"g.V().hasLabel('publisher').outE('partner').inV().outE('partner').inV().range(1, 2)"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));给出和country中国有关的company,再给出和中国country_contain_city的其他city,返回它们","g.V().has('country', 'name', '中国').as('a').bothE().otherV().hasLabel('company').as('b').select('a').bothE('country_contain_city').otherV().hasLabel('city').as('c').select('a', 'b', 'c')"
 帮我找找这个贷款，它叫做defaultName。,"g.V().hasLabel('loan').has('name', 'defaultName')"
 找出label为论坛且名称为天涯论坛的点，并返回它们的价值。,"g.V().hasLabel('forum').has('name', '天涯论坛').values('value')"
"请帮我找出和大学电子科技大学有拥有关系的部门,再请帮我找出以拥有关系关联了电子科技大学的部门","g.V().has('university', 'name', '电子科技大学').as('a').outE('has').inV().hasLabel('department').as('b').select('a').inE('has').outV().hasLabel('department').as('c').select('a', 'b', 'c')"
"用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找以支付关系关联了person王雪的person","g.V().has('person', 'name', '王雪').inE('person_pay_person').outV().hasLabel('person')"
 查询名为'美国'的标签为'country'的点，返回这些点的'value'和'peopleNumber'。,"g.V().hasLabel('country').has('name', '美国').project('a.value', 'a.peopleNumber').by('value').by('peopleNumber')"
"查询全部与王梅存在likes关系的repository,repository与issue存在has关系的点,返回这些点的name","g.V().has('name', '王梅').out('likes').hasLabel('repository').out('has').hasLabel('issue').values('name')"
"查询全部源点label为person,边label为likes的边,返回这些边的srcId的和减195对960取余的最大值,和weight除142.64的数量","g.V().hasLabel('person').outE('likes').project('sum_srcId', 'weight_div').by(values('srcId').sum()).by(values('weight').math('_ / 142.64')).select('sum_srcId', 'weight_div').by(math('_ - 195 % 960')).by(count()).select(values).math('max(_[0])').project('max_result', 'count_result').by().by(select(values).tail(local, 1))"
获取prescription的所有关系，或者这些关系的关系。,g.V().hasLabel('prescription').outE('relation').inV().outE('relation').inV().dedup()
返回id为82的cinema相关的person的朋友，再返回与该person相关的关系。,"g.V().has('cinema', 'id', '82').as('a').bothE().otherV().hasLabel('person').as('b').both().hasLabel('person').where(__.outE('friend')).as('c').select('b').outE('relation').inV().as('d').select('a', 'b', 'c', 'd')"
"输入请求点id的列表824,647,867,585,815, 以属性id作为相等条件,帮我查询与buyer黄思思有buyer_creates_orders关系的1跳以内的环","g.withSideEffect('p', [824, 647, 867, 585, 815]).V().hasLabel('buyer').has('id', within('p')).has('name', '黄思思').as('a').bothE('buyer_creates_orders').otherV().where(within('a')).select('a').by('id').by(__.id().as('b_id'))"
 给出性别不等于female的买家咨询的卖家名称和商品名称。,"g.V().hasLabel('buyer').has('gender', neq('famale')).outE('consult').inV().hasLabel('seller').as('b').outE('has').inV().hasLabel('goods').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 找出person节点与person点有关联的节点，按salary、name、id分组返回。,"g.V().hasLabel('person').as('a').bothE('knows').otherV().hasLabel('person').as('b').select('b').values('salary', 'name', 'id').group().by().by(count())"
 查找陈梅买家在卖家节点has的物品。,"g.V().hasLabel('buyer').has('name', '陈梅').out('consult').hasLabel('seller').out('has').hasLabel('goods')"
找出与176个用户发布的帖子有关的标签，这些帖子具有'publish'关系，并且这些帖子还具有'has'关系。,g.V().hasLabel('user').as('a').outE('publish').as('e').inV().hasLabel('post').as('b').outE('has').as('e2').inV().hasLabel('tag').as('c').select('c').limit(176)
 请问有哪些韩国城市被包含在国家范围内？,"g.V().hasLabel('country').has('name', '韩国').outE('contain').inV().hasLabel('city').as('b', 'a').select('a', 'b')"
找出用户何伟和吴红之间的关系,"g.V().has('user', 'name', '何伟').as('a').outE('relation').as('e').inV().as('b').inE('relation').as('e2').outV().has('user', 'name', '吴红').as('c').select('b').limit(94)"
"根据年龄,薪资分组,计算薪资乘6733的值","g.V().hasLabel('a').group().by(values('age', 'salary')).by(values('salary').math('_ * 6733'))"
"给出和teacher张月有关的course,再给出和张月teach的其他course,返回它们","g.V().has('teacher', 'name', '张月').as('a').bothE().otherV().hasLabel('course').as('b').select('a').bothE('teach').otherV().hasLabel('course').as('c').select('a', 'b', 'c')"
"查询与名为杜建国和张若涵的点共同关联的,标签等于person的节点","g.V().has('name', '杜建国').outE('relates').inV().hasLabel('person').as('b').inE('relates').outV().has('name', '张若涵').select('b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询id为192的person有关的person的friend, 再查询和person有关系的friend","g.V().has('person', 'id', '192').as('a').bothE().otherV().hasLabel('person').as('b').bothE('friend').otherV().hasLabel('person').as('c').select('b').bothE('friend').otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"返回名为Amily的点发布的帖子,并对这些帖子的字数进行求和","g.V().has('name', 'Amily').outE('publish').inV().hasLabel('post').values('wordCount').sum()"
"返回software Zookeeper uses的software,以及creates这些software的company, 令software的openSource等于software的lang,令company的openSource等于software的value减418, 返回software(a)的stars,software(b)的value,company(c)的name","g.V().hasLabel('software').has('name', 'Zookeeper').as('a').outE('uses').inV().hasLabel('software').as('b').inE('creates').outV().hasLabel('company').as('c').select('a', 'b', 'c').by(__.project('stars', 'openSource').by('stars').by('lang')).by(__.project('value', 'openSource').by('value').by(__.constant('software'))).by(__.project('name', 'openSource').by('name').by(__.math('value - 418').by('value'))).select('a', 'b', 'c').by('stars').by('value').by('name')"
"找出belong city纽约的company,和这些company cooperate的university","g.V().hasLabel('city').has('name', '纽约').inE('belong').outV().hasLabel('company').as('b').outE('cooperate').inV().hasLabel('university').as('c').select('b', 'c')"
"请帮我找出前173个满足条件字数大于等于369且名字不等于Post_413,或名字等于Post_355的帖子","g.V().hasLabel('post').or(and(has('wordCount', gte(369)), has('name', neq('Post_413'))), has('name', eq('Post_355'))).limit(173)"
 找出所有起点和终点都是人，且标签为'喜欢'的边。,g.V().hasLabel('person').outE('likes').where(inV().hasLabel('person'))
"以215,826作为请求点id, 源点的id等于输入表id,查找137个和label为person的点有person_own_account关系的账号,且和这些账号有account_transfer_account关系的账号","g.withSideEffect('p', [215, 826]).V().hasLabel('person').where(values('id').is(within(select('p')))).out('person_own_account').out('account_transfer_account').limit(137)"
找出与标签相关的非空评论节点，然后返回这些节点的字数加上880的数量和字数除以529的结果。,"g.V().hasLabel('tag').as('a').outE().as('e').inV().hasLabel('comment').has('wordCount', neq(null)).as('b').project('count_plus', 'count_div').by(__.select('b').values('wordCount').math('_ + 880').count()).by(__.select('b').values('wordCount').math('_ / 529').count())"
"请帮我找出id为60的买家取消的订单, 并将订单有关的商品的销量的和赋值给订单的名字, 接着查询订单的名字小于60的订单包含的商品","g.V().hasLabel('buyer').has('id', 60).outE('cancel').inV().hasLabel('orders').as('b').sideEffect(__.project('name').by(__.outE().inV().hasLabel('goods').values('sellerNumber').sum()).select('name').property(single, 'name')).select('b').has('name', lt(60)).outE('contain').inV().hasLabel('goods').as('d').select('b', 'd').by('name').by()"
查询以属于关系关联了公司腾讯的person,"g.V().hasLabel('company').has('name', '腾讯').inE('belong').outV().hasLabel('person')"
查询名字为吴若涵的用户,"g.V().hasLabel('user').has('name', '吴若涵')"
"返回国家法国包含的城市,被其他国家包含的数量","g.V().has('country', 'name', '法国').out('contain').as('b').in('contain').hasLabel('country').as('c').select('c').count()"
"给出购买软件Mysql使用的软件,的person","g.V().has('software', 'name', 'Mysql').outE('uses').inV().hasLabel('software').as('b').inE('buy').outV().hasLabel('person').as('c').select('b', 'c')"
id除1的值,g.V().hasLabel('a').project('result').by(values('id').math('/ 1'))
"请帮我找出knows person何强的person,和这些person knows的person","g.V().hasLabel('person').has('name', '何强').as('a').in('knows').as('b').out('knows').as('c').select('b', 'c')"
"帮我查询全部马雪的点回答的买家,然后帮我查询马雪被咨询的买家,一起返回","g.V().has('name', '马雪').as('a').outE('ask').inV().hasLabel('buyer').as('b').select('a').inE('consult').outV().hasLabel('buyer').as('c').select('a', 'b', 'c')"
"查询全部id为45的person关联的person,和以关联关系关联了这些person的其他person","g.V().has('person', 'id', 45).bothE().otherV().hasLabel('person').as('b').inE('relates').otherV().hasLabel('person').as('c').select('b', 'c')"
"以289,170,93作为请求点id, 以属性id作为相等条件,请帮我查找id为140的部门有关的医生的相关者, 再请帮我查找和医生有关系的相关者","g.withSideEffect('p', [289, 170, 93]).V().hasLabel('department').where(and(__.values('id').is(within('p')), __.values('id').is(eq('140')))).as('a').bothE().otherV().hasLabel('doctor').as('b').bothE('relation').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"请帮我查找contain user周国强publish的post,的forum","g.V().hasLabel('user').has('name', '周国强').outE('publish').inV().hasLabel('post').as('b').inE('contain').outV().hasLabel('forum').as('c').select('b', 'c')"
帮我查询所有与大学复旦大学有关系的课程的课时,"g.V().has('university', 'name', '复旦大学').bothE().otherV().hasLabel('course').values('courseHour')"
"帮我查询城市重庆包含的公司,以及合作这些公司的大学, 令城市的id等于大学的等级,令大学的id等于大学的等级, 返回城市的人数,公司的id,大学的名字","g.V().has('city', 'name', '重庆').as('a').outE('contain').inV().hasLabel('company').as('b').inE('cooperate').outV().hasLabel('university').as('c').project('a_peopleNumber', 'b_id', 'c_name').by(select('a').values('peopleNumber')).by(select('b').values('id')).by(select('c').values('name'))"
"帮我查询92个和类型是author的点有knows关系的author,且和这些author有write关系的book",g.V().hasLabel('author').as('a').out('knows').hasLabel('author').as('b').out('write').hasLabel('book').as('c').select('c').limit(92)
"查找标签为person,名为王轩的点,返回这些点的id,年龄,性别","g.V().hasLabel('person').has('name', '王轩').project('id', 'age', 'gender').by('id').by('age').by('gender')"
height除178减9809的值,g.V().hasLabel('a').project('result').by(values('height').math('_ / 178 - 9809'))
查询与医生郑雪和何月都存在创造关系的点,"g.V().has('doctor', 'name', '郑雪').outE('creates').inV().as('b').inE('creates').outV().has('doctor', 'name', '何月').select('b').dedup()"
"输入请求点id的列表236, 以属性id作为相等条件,找出182个和label为person的点有person_friend_person关系的person,并且和这些person有person_parent_person关系的person","g.withSideEffect('p', [236]).V().hasLabel('person').has('id', within('p')).out('person_friend_person').hasLabel('person').out('person_parent_person').hasLabel('person').limit(182)"
"以820,87作为请求点id, 源点的id等于输入表id,返回类型为company的点,返回14个","g.inject([820, 87]).unfold().as('p').V().hasLabel('company').has('id', __.select('p')).limit(14)"
"查找类型为person的点,返回187个",g.V().hasLabel('person').limit(187)
"请帮我找出名为皮肤科的部门或病人,以及与其有关的病人,并返回皮肤科的名字和这些病人的名字","g.V().hasLabel('department', 'patient').has('name', '皮肤科').bothE().otherV().hasLabel('patient').project('a_name', 'b_name').by(select('a').values('name')).by(values('name')).as('a')"
"根据name分组,计算id除86的值",g.V().hasLabel('a').group().by('name').by(values('id').math('/ 86').fold())
"请帮我查找28个名字等于赵月或年龄在54到80之间的person,根据薪资从小到大排列","g.V().hasLabel('person').has('name', '赵月').or(has('age', between(54, 80))).order().by('salary', asc).limit(28)"
"请帮我查找和account有关联的account节点,并根据其createTime分组,返回createTime,以及value除700的最大值","g.V().hasLabel('account').as('a').bothE('transfer').otherV().hasLabel('account').as('b').select('b').values('createTime', 'value').group().by(select('createTime')).by(select('value').math('/ 700').max())"
"找出所有和名为杭州的城市有相关者关系,或有相关者的相关者关系的公司","g.V().has('city', 'name', '杭州').out('relation').hasLabel('company').union(identity(), out('relation').hasLabel('company')).dedup()"
"找出被city武汉contain的company,和武汉contain的company","g.V().has('city', 'name', '武汉').as('b').outE('contain').inV().hasLabel('company').as('c').select('b').inE('contain').outV().hasLabel('company').as('a').select('a', 'b', 'c')"
"请帮我查找全部id为52的repository关联的repository,和以likes关系关联了这些repository的其他user","g.V().has('repository', 'id', 52).bothE().otherV().hasLabel('repository').as('b').inE('likes').otherV().hasLabel('user').as('c').select('b', 'c')"
"帮我查询和买家马国强有咨询关系的卖家,再帮我查询以取消关系关联了马国强的订单","g.V().hasLabel('buyer').has('name', '马国强').as('a').outE('consult').inV().hasLabel('seller').as('b').select('a').inE('cancel').outV().hasLabel('orders').as('c').select('a', 'b', 'c')"
"找出从城市纽约出发,经过类型为包含的边,走3度到达的公司点","g.V().has('city', 'name', '纽约').repeat(outE('contain').inV()).times(3).hasLabel('company')"
请帮我找出与author Alan和王轩都存在knows关系的点,"g.V().has('author', 'name', 'Alan').out('knows').as('b').in('knows').has('author', 'name', '王轩').select('b')"
返回类型为用户或论坛或标签的点,"g.V().hasLabel(within('user', 'forum', 'tag'))"
"查询标签以id,名字,价值分组的名字, 根据名字降序排序","g.V().hasLabel('tag').group().by(project('id', 'name', 'value').by('id').by('name').by('value')).by(values('name').fold()).order(local).by(keys, desc).select(values).unfold()"
"请帮我查找全部id为30的贷款关联的账号,和以转账关系关联了这些账号的其他账号","g.V().has('loan', 'id', 30).as('a').bothE().as('e').otherV().hasLabel('account').as('b').inE('transfer').as('e2').outV().hasLabel('account').as('c').select('b', 'c')"
查询101个既在皮肤科又在耳鼻喉科的朋友,"g.V().has('department', 'name', '皮肤科').out('friend').as('b').in('friend').has('department', 'name', '耳鼻喉科').select('b').limit(101)"
请帮我找出所有与名为郑思琪的学生有朋友关系，或者有朋友的朋友关系的课程。,"g.V().has('student', 'name', '郑思琪').repeat(out('friend')).times(2).hasLabel('course').dedup()"
帮我查询192个与loan_24和loan_55都存在关系的贷款节点,"g.V().has('name', 'loan_24').outE().inV().hasLabel('loan').as('b').inE().outV().has('name', 'loan_55').select('b').limit(192)"
"给出creates user孙国强creates的issue,的user","g.V().hasLabel('user').has('name', '孙国强').outE('creates').inV().hasLabel('issue').as('b').inE('creates').outV().hasLabel('user').as('c').select('b', 'c')"
"帮我查询读者郑雪的label为伙伴的边,并根据f1从小到大排列,返回112个","g.V().hasLabel('reader').has('name', '郑雪').outE('partner').as('e').inV().as('b').select('e', 'b').order().by(select('e').values('f1'), asc).limit(112).select('b')"
"以987,786,225,129,560作为请求点id, 以属性id作为相等条件,请帮我查找161个名为徐宏的点咨询的类型是卖家的节点,且节点名字不是周轩","g.withSideEffect('p', [987, 786, 225, 129, 560]).V().where(values('id').is(within('p'))).has('name', '徐宏').outE('buyer_consult_seller').inV().hasLabel('seller').has('name', neq('周轩')).limit(161)"
请帮我查找以创造关系关联了事项ISSUE-241的用户,"g.V().hasLabel('issue').has('name', 'ISSUE-241').inE('creates').outV().hasLabel('user')"
"给出源点类型是公司,目标点类型是贷款,类型是贷款的边",g.V().hasLabel('company').outE('loan').where(inV().hasLabel('loan'))
 请问天涯论坛的帖子节点有哪些标签？,"g.V().hasLabel('forum').has('name', '天涯论坛').out('contain').hasLabel('post').out('has').hasLabel('tag')"
找出在南京大学有关系的城市，以及这些城市中包含公司的点，并返回这些点的人数。,"g.V().has('name', '南京大学').outE('belong').inV().hasLabel('city').outE('contain').inV().hasLabel('company').values('peopleNumber')"
 中国科技大学与哪个公司合作，哪个城市属于该公司的节点？,"g.V().has('university', 'name', '中国科技大学').out('cooperate').hasLabel('company').out('belong').hasLabel('city')"
"找出标签等于买家,名为黄梅的点,返回这些点的年龄","g.V().hasLabel('buyer').has('name', '黄梅').values('age')"
"请帮我找出部门拥有的学生,返回其源点的大小除56的数量,以及目标点的id加60加身高的值","g.V().hasLabel('department').as('a').outE('has').as('e').inV().hasLabel('student').as('b').project('count_a_size_div_56', 'b_id_plus_60_plus_height').by(__.select('a').values('size').math('_ / 56').count()).by(__.select('b').values('id').math('_ + 60').math('_ + ').by(__.select('b').values('height')))"
"给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));查询和film变形金刚有关的comment,称为X,再查询和这个X有关联的其他tag,以及和X有关联的cinema","g.V().hasLabel('film').has('name', '变形金刚').as('a').bothE().otherV().hasLabel('comment').as('b').bothE().otherV().hasLabel('tag').as('c').select('b').bothE().otherV().hasLabel('cinema').as('d').select('a', 'b', 'c', 'd')"
"查找seller ask的buyer,返回其源点的height乘height的值,以及目标点的age的平均值除66的数量","g.V().hasLabel('seller').as('a').outE('ask').inV().hasLabel('buyer').as('b').select('a', 'b').by('height').by('age').project('height_squared', 'count_avg_age_div_66').by(select('a').math('_ * _')).by(select('b').mean().math('_ / 66').count())"
"找出全部源点标签为合并请求,目标点标签为仓库,标签为合并请求的边",g.V().hasLabel('pullRequest').outE('pullRequest').as('e').inV().hasLabel('repository').select('e')
 返回Amily的partner的friend的朋友,"g.V().hasLabel('user').has('name', 'Amily').outE('partner').inV().outE('relation').inV().outE('friend').inV()"
"找出id为24的课程属于的部门, 并将部门有关的教师的id的最小值赋值给部门的大小, 接着查询部门的大小小于24的部门拥有的教师","g.V().has('course', 'id', 24).as('a').outE('belong').inV().hasLabel('department').as('b').sideEffect(__.project('size').by(__.inE().outV().hasLabel('teacher').values('id').min()).select('b').property('size', __.select('size'))).select('b').has('size', lt(24)).outE('has').inV().hasLabel('teacher').as('d').select('b').values('size').as('size').select('d').select('size', 'd')"
"查找id为99的book knows的book, 并将book有关的publisher的gender的最大值赋值给book的name, 接着查询book的name小于99的book relates的book","g.V().hasLabel('book').has('id', 99).outE('knows').inV().hasLabel('book').as('b').project('name', 'd').by(__.select('b').coalesce(__.bothE().otherV().hasLabel('publisher').values('gender').max(), __.constant(null))).by(__.select('b').has('name', lt(99)).outE('relates').inV().hasLabel('book')).select('name', 'd')"
"请帮我找出郑若涵的点认识的person,然后请帮我找出郑若涵被雇佣的公司,一起返回","g.V().has('name', '郑若涵').as('a').out('knows').as('b').select('a').in('employee').as('c').select('a', 'b', 'c')"
 找出身高为192的人的认识的人和这些人有关联的人。,"g.V().hasLabel('person').has('height', 192).as('a').out('knows').hasLabel('person').as('b').out('relates').hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我找出person关联的person, 令person(b)的id的值等于关联person的person的薪资的最大值, 再查找person关联的person","g.V().hasLabel('person').as('a').outE('relates').as('e').inV().hasLabel('person').as('b').select('b').map(union(__.inE('relates').as('e2').outV().hasLabel('person').as('c').values('salary').max(), __.identity()).fold()).as('b_with_id').select('b_with_id').unfold().as('b_id_pair').select('b_id_pair').by(limit(local, 1)).as('b_id').select('b_id_pair').by(tail(local, 1)).as('b').select('b').outE('relates').as('e3').inV().hasLabel('person').as('d').select('b_id', 'd')"
"输入表的列为address,name,id, 数据为('C栋','耳鼻喉科',47),('C栋','传染部',63),('东区','急诊部',48),('西区','急诊部',24), 以属性id作为相等条件,请帮我找出2个id小于等于50或age的最大值减56减id除3943加20对71取余的最大值小于55,且身高大于189的医生,根据身高降序排列","g.inject(['C栋','耳鼻喉科',47],['C栋','传染部',63],['东区','急诊部',48],['西区','急诊部',24]).as('p').V().hasLabel('doctor').where(__.as('a').and(__.has('id',within(47,63,48,24)),__.or(__.has('id',lte(50)),__.project('maxExpr').by(__.values('age').max()).math('(maxExpr - 56 - a_id) / 3943 + 20 % 71').math('_ < 55')),__.has('height',gt(189)))).select('a').order().by('height',desc).limit(2)"
"输入请求点id的列表990, 以属性id作为相等条件,请帮我查找名为马红和Jack的,label为person的点公共的partner节点的名单","g.withSideEffect('p', [990]).V().hasLabel('person').has('id', within('p')).has('name', '马红').outE('partner').inV().as('b').inE('partner').outV().hasLabel('person').has('name', 'Jack').select('b').values('name')"
请帮我找出所有与person有关联的人，以及这些人之间的关联关系。,"g.V().has('person', 'id', '99').bothE().otherV().hasLabel('person').as('b').inE('relates').otherV().hasLabel('person').as('c').select('b', 'c')"
返回与用户吴伟和赵科都存在喜欢关系的点,"g.V().has('user', 'name', '吴伟').out('likes').as('b').in('likes').has('user', 'name', '赵科').select('b')"
 给出与defaultName和defaultName1有关的所有公司节点，共有113个。,"g.V().has('name', 'defaultName').outE().as('e').inV().hasLabel('company').as('b').inE().as('e2').outV().has('name', 'defaultName1').select('b').limit(113)"
"以(5495,'黄红',161)作为请求表数据,属性分别为salary,name,height, 以属性name作为相等条件,请帮我找出类型是帖子的点,返回107个","g.withSideEffect('p', [['salary': 5495, 'name': '黄红', 'height': 161]]).V().hasLabel('post').has('name', __.select('p').unfold().select('name')).limit(107)"
"查找被person buy数量大于55的software,记为relationCount,再查询这些software buy的company","g.V().hasLabel('software').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('buy').hasLabel('person').count()).unfold().as('a_with_count').select('relationCount').where(__.is(gt(55))).select('a_with_count').select('a').out('buy').hasLabel('company')"
"请帮我查找创造病人马宏接受的处方,的医生","g.V().hasLabel('patient').has('name', '马宏').outE('accept').inV().hasLabel('prescription').as('b').inE('creates').outV().hasLabel('doctor').as('c').select('b', 'c')"
帮我查询id为空或薪资大于等于3302的节点,"g.V().or(hasNot('id'), has('salary', gte(3302)))"
"以(true,87,'Geaflow')作为请求表数据,属性分别为openSource,value,name, 源点的value等于输入表value,请帮我查找前49个满足条件规格不等于medium的公司","g.withSideEffect('p', [['openSource': true, 'value': 87, 'name': 'Geaflow']]).V().hasLabel('company').as('a').where(__.select('a').values('value').is(__.select('p').unfold().select('value'))).where(__.select('a').values('scale').is(neq('medium'))).select('a').limit(49)"
"以586,526,55,673,647作为请求点id, 以属性id作为相等条件,找出部门皮肤科的所有label为伙伴的边,并根据源点id升序排列,返回129个","g.withSideEffect('p', [586, 526, 55, 673, 647]).V().hasLabel('department').has('id', within('p')).has('name', '皮肤科').outE('partner').order().by('srcId', asc).limit(129).inV()"
给出与person杜建聪有colleague关系的1跳以内的环,"g.V().has('person', 'name', '杜建聪').as('a').bothE('colleague').otherV().as('b').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
 查询40个买家，其中有没有马思琪和周建聪共同合作的伙伴。,"g.V().hasLabel('buyer').has('name', '马思琪').outE('partner').inV().where(__.inE('partner').outV().hasLabel('buyer').has('name', '周建聪')).limit(40)"
"查找全部孙建聪的点选择的课程,然后查找孙建聪被拥有的部门,一起返回","g.V().has('name', '孙建聪').as('a').outE('selects').inV().hasLabel('course').as('b').select('a').inE('has').outV().hasLabel('department').as('c').select('a', 'b', 'c')"
"以909,718,877,753,633作为请求点id, 以属性id作为相等条件,请帮我找出所有源点age为70,目标点id不为空且id的平均值不等于550,且标签等于person_invest_company的边","g.inject([909, 718, 877, 753, 633]).unfold().as('p').V().has('id', __.as('p')).has('age', 70).as('a').outE('person_invest_company').as('e').inV().as('b').where(__.as('b').has('id', neq(null))).group().by(__.constant('all')).by(__.as('b').values('id').mean()).unfold().select(values).where(neq(550)).select('e')"
" 查找包含CSDN的post,然后找到post中具有与tag相关的has关系的点，并返回这些点的名称。","g.V().has('name', 'CSDN').out('contain').hasLabel('post').out('has').hasLabel('tag').values('name')"
"帮我查询类型为订单的点,返回81个",g.V().hasLabel('orders').limit(81)
 查找与ID为183的某人有关的人及其相关伙伴。,"g.V().has('person', 'id', '183').as('a').bothE().otherV().hasLabel('person').as('b').bothE('partner').otherV().hasLabel('person').as('c').select('b').bothE('relation').otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
 请帮我查询陈月医生创建的处方，有多少个被其他患者接受了。,"g.V().hasLabel('doctor').has('name', '陈月').outE('creates').inV().hasLabel('prescription').inE('accept').outV().hasLabel('patient').count()"
"调用triangleCount函数,以'uL'作为输入,返回运算结果","g.call('triangleCount').with('input', 'uL').select('number')"
找出与publisher陈建国有publish关系的1跳的环,"g.V().has('publisher', 'name', '陈建国').as('a').outE('publish').inV().as('b').where(eq('a')).select('a', 'b').by('id').by('id').as('b_id')"
"以0作为请求点id, 源点的id等于输入表id,给出名为郑思琪的person","g.withSideEffect('p', [['id': 0]]).V().hasLabel('person').as('a').where(__.select('a').and(__.has('id', __.select('p').unfold().select('id')), __.has('name', '郑思琪'))).select('a')"
查询与person韩梅有关系的person的id,"g.V().has('person', 'name', '韩梅').bothE().otherV().hasLabel('person').id()"
返回与病人张宏有关系的药品的价格,"g.V().has('patient', 'name', '张宏').bothE().otherV().hasLabel('medicine').values('price')"
请帮我查找前6个薪资不等于2843且性别不等于male且薪资在6552到8594之间的读者,"g.V().hasLabel('reader').has('salary', neq(2843)).has('gender', neq('male')).has('salary', between(6552, 8594)).limit(6)"
"查询论坛包含的用户,返回其源点的id除73的值,以及目标点的身高对179取余的最小值","g.V().hasLabel('forum').as('a').outE('contain').inV().hasLabel('user').as('b').select('a', 'b').by(values('id')).by(values('height')).project('a_id_div_73', 'min_b_height_mod_179').by(select('a').math('_ / 73')).by(select('b').math('_ % 179').min())"
"给出源点label为读者,边label为喜欢,并且满足条件f1不等于true的边","g.V().hasLabel('reader').outE('likes').has('f1', neq(true)).elementMap()"
帮我查询被公司滴滴雇佣的person,"g.V().hasLabel('company').has('name', '滴滴').inE('employee').outV().hasLabel('person').as('b').select('b').by().project('a', 'b').by(outE('employee').inV().hasLabel('person')).by()"
"以607作为请求点id, 源点的id等于输入表id,查询188个名为TheShy的点还款的标签为贷款的节点,且其权重的个数小于等于859","g.withSideEffect('p', [607]).V().has('id', within('p')).has('name', 'TheShy').outE('account_repay_loan').inV().hasLabel('loan').where(__.values('weight').count().is(lte(859))).limit(188)"
"请帮我查找170个person吴红和吴建国,共同的伙伴","g.V().hasLabel('person').has('name', '吴红').outE('partner').inV().as('b').inE('partner').outV().hasLabel('person').has('name', '吴建国').select('b').limit(170)"
"请帮我查找名为韩思思和张伟的,标签为person的点公共的家人节点的名单","g.V().has('person', 'name', '韩思思').as('a').outE('family').inV().as('b').inE('family').outV().has('person', 'name', '张伟').as('c').select('b').values('name')"
 查询何若涵和郑思琪之间共同存在的创建关系。,"g.V().has('person', 'name', '何若涵').outE('creates').inV().as('b').inE('creates').outV().has('person', 'name', '郑思琪').select('b')"
" 查询卖家源点类型为seller,边类型为has的边，返回这些边的目标ID对9取余的值和weight的个数乘以138.74除以803的值。","g.V().hasLabel('seller').outE('has').project('modResult', 'calcResult').by(values('targetId').math('_ % 9')).by(count().math('_ * 138.74 / 803'))"
查找person的2度以内的环,"g.V().hasLabel('person').as('a').both().both().where(eq('a')).dedup().project('a.id', 'b_id').by(select('a').id()).by(id())"
"返回全部id为98的person关联的person,和以认识关系关联了这些person的其他person","g.V().has('person', 'id', 98).bothE().otherV().hasLabel('person').as('b').inE('knows').otherV().hasLabel('person').as('c').select('b', 'c')"
"以514,670,185,780作为请求点id, 源点的id等于输入表id,请帮我找出类型是person_pay_person,且满足条件f0小于等于867的边","g.inject([514, 670, 185, 780]).unfold().as('p').V().has('id', __.where(eq('p'))).outE('person_pay_person').has('f0', lte(867)).as('e').select('e')"
"输入请求点id的列表219,182, 源点的id等于输入表id,查询标签为company,名为字节的点,返回这些点的id,name,scale","g.withSideEffect('ids', [219, 182]).V().hasLabel('company').has('id', within('ids')).has('name', '字节').project('id', 'name', 'scale').by('id').by('name').by('scale')"
"请帮我找出类型为person,名为陈建国的点,返回这些点的年龄,性别","g.V().hasLabel('person').has('name', '陈建国').project('a.age', 'a.gender').by('age').by('gender')"
"帮我查询与作家马强有关,且与作家徐建国有关系的作家节点","g.V().has('author', 'name', '马强').bothE('knows').otherV().hasLabel('author').bothE('knows').otherV().has('author', 'name', '徐建国').path().unfold().hasLabel('author').dedup()"
"帮我查询合并请求PR-190属于的仓库,以及喜欢这些仓库的用户, 令仓库的星数等于仓库的名字,令用户的id等于用户的id除75, 返回合并请求的名字,仓库的创建时间,用户的性别","g.V().hasLabel('pullRequest').has('name', 'PR-190').as('a').outE('belong').inV().hasLabel('repository').as('b').inE('likes').outV().hasLabel('user').as('c').select('a', 'b', 'c').by('name').by(union(identity(), values('createTime')).fold()).by(union(identity(), values('gender')).fold()).project('a_name', 'b_createTime', 'c_gender').by(select('a')).by(select('b').unfold().tail(1)).by(select('c').unfold().tail(1))"
"查询名为杜国强的person,以及与其有关的person,并返回杜国强的height和这些person的name","g.V().has('person', 'name', '杜国强').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('height').by('name')"
查找前132个名字不是历史或id小于28的标签,"g.V().hasLabel('tag').or(has('name', neq('历史')), has('id', lt(28))).limit(132)"
"帮我查询所有名为华为的,area为空的relation,返回这些relation的id,和边的targetId,srcId","g.V().has('name', '华为').outE('relation').as('e').inV().has('area', eq(null)).select('e').project('b.id', 'e.targetId', 'e.srcId').by(select('e').inV().id()).by(select('e').values('targetId')).by(select('e').values('srcId'))"
"查找46个和标签为仓库的点有拥有关系的用户,且和这些用户有创造关系的合并请求",g.V().hasLabel('repository').as('a').out('has').hasLabel('user').as('b').out('creates').hasLabel('pullRequest').as('c').select('c').limit(46)
请帮我找出与英国有关联的城市,"g.V().hasLabel('country').has('name', '英国').inE('belong').outV().hasLabel('city')"
返回合并请求的1跳的环,"g.V().hasLabel('pullRequest').as('a').bothE().otherV().as('b').where(__.select('a').outE().where(__.otherV().as('b')).count().is(gt(0))).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
 列出所有与某个部门相关的课程，以及选择这些课程的其他学生。,"g.V().has('department', 'id', '136').bothE().otherV().hasLabel('course').as('b').inE('selects').otherV().hasLabel('student').as('c').select('b', 'c')"
 给出南区电影院发行且ID不是692的电影名称以及它们具有的标签。,"g.V().hasLabel('cinema').has('address', '南区').has('id', neq(692)).outE('releases').inV().hasLabel('film').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
帮我查询全部与订单Order_126有关系的买家的性别,"g.V().hasLabel('orders').has('name', 'Order_126').bothE().otherV().hasLabel('buyer').values('gender')"
"请帮我找出15个部门土木学院和经管学院,共同的相关者","g.V().has('department', 'name', '土木学院').outE('relation').inV().as('b').inE('relation').outV().has('department', 'name', '经管学院').select('b').limit(15)"
请帮我查找86个与华中科技大学和清华大学都存在关系的city或country或university节点,"g.V().has('name', '华中科技大学').outE().inV().hasLabel(within('city', 'country', 'university')).as('b').inE().outV().has('name', '清华大学').select('b').limit(86)"
找出名为comment的点，并按名称升序排序。,"g.V().hasLabel('comment').order().by('name', asc)"
"以117作为请求点id, 源点的id等于输入表id,返回user的2度的环","g.withSideEffect('p', [117]).V().has('user', 'id', __.select('p')).as('a').out().as('b').where(__.select('b').out().where(eq('a'))).select('a', 'b').by('id').by('id')"
查询与一个人有喜欢关系的人，以及这些人认识的人，以及这些人认识的人。,g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('person').as('b').outE('knows').as('e2').inV().hasLabel('person').as('c').outE('knows').as('e3').inV().hasLabel('person').as('d').select('d')
"输入请求点id的列表635,218,868,905,660, 以属性id作为相等条件,帮我查询和person有关联的person节点,并根据其height分组,返回height,以及id对84取余的求和值","g.inject([635, 218, 868, 905, 660]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).as('a').bothE('person_knows_person').otherV().hasLabel('person').as('b').select('b').values('height', 'id').group().by(select(values).limit(local, 1)).by(select(values).tail(local, 1).fold().math('_ % 84').sum())"
 查找所有与名为'吴月'的用户有'关系'或'有关系'的post。,"g.V().hasLabel('user').has('name', '吴月').outE('relation').inV().hasLabel('post').range(1, 2).values('name')"
请帮我查找所有和doctor郑思思之间有diagnose关系的patient,"g.V().hasLabel('doctor').has('name', '郑思思').outE('diagnose').inV().hasLabel('patient')"
"找出与卖家赵思琪有关系的买家, 返回和这些买家有关联的订单的,value的最大值减160的平均值","g.V().has('seller', 'name', '赵思琪').as('a').bothE().otherV().hasLabel('buyer').as('b').bothE().otherV().hasLabel('orders').as('c').select('c').values('value').max().math('_ - 160').mean()"
"给出名为王思思的点的,创建时间不等于2013年01月28日的朋友,返回这些朋友的名字,和边的源点id","g.V().has('name', '王思思').outE('friend').as('e').inV().has('createTime', neq('2013-01-28')).as('b').select('b', 'e').by('name').by('srcId')"
查找以contain关系关联了post Post_494的forum,"g.V().hasLabel('post').has('name', 'Post_494').inE('contain').outV().hasLabel('forum')"
"请帮我找出全部源点权重为空且id大于93且权重小于等于633,目标点id等于32或名字不等于郑思思,且名字等于王国强,且标签等于拥有的边","g.V().has('weight', null).has('id', gt(93)).has('weight', lte(633)).outE('has').as('e').inV().has('id', within(32)).has('name', neq('郑思思')).has('name', '王国强').select('e')"
"查找医生杜若涵创造的处方,以及接受这些处方的病人","g.V().hasLabel('doctor').has('name', '杜若涵').outE('creates').inV().hasLabel('prescription').as('b').inE('accept').outV().hasLabel('patient').as('c').select('b', 'c')"
"返回薪资小于等于2110,id大于等于54的用户喜欢的帖子的名称,以及这些帖子 拥有的标签的名称","g.V().hasLabel('user').has('salary', lte(2110)).has('id', gte(54)).outE('likes').inV().hasLabel('post').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
请帮我查找被person徐建国支付的person,"g.V().hasLabel('person').has('name', '徐建国').as('b').outE('pay').as('e').inV().as('a').select('a', 'b')"
"请帮我查找person郑国强拥有的账号,以及存款这些账号的贷款","g.V().hasLabel('person').has('name', '郑国强').outE('own').inV().hasLabel('account').as('b').inE('deposit').outV().hasLabel('loan').as('c').select('b', 'c')"
"请帮我找出源点label为医生,边label为属于的边,返回这些边的目标点id减目标点id的值,和源点id减190的平均值","g.V().hasLabel('doctor').outE('belong').project('expr1', 'expr2').by(__.values('targetId').math('_ - _')).by(__.values('srcId').math('_ - 190')).select(values).unfold().group().by(keys).by(select(values).unfold().mean())"
"帮我查询与名为Order_417和Order_483的点共同包含的,标签为商品的节点","g.V().has('name', 'Order_417').out('contain').hasLabel('goods').as('b').in('contain').has('name', 'Order_483').select('b')"
 返回174个人，其中吴若涵和马月是共同的同事。,"g.V().has('person', 'name', '吴若涵').as('a').outE('colleague').as('e').inV().as('b').inE('colleague').as('e2').outV().has('person', 'name', '马月').as('c').select('b').limit(174)"
"找出全部与徐月存在ask关系的buyer,buyer与orders存在creates关系的点,返回这些点的value","g.V().has('name', '徐月').outE('ask').inV().hasLabel('buyer').outE('creates').inV().hasLabel('orders').values('value')"
 找出与医生点相关的处方节点，并按创建时间和ID分组，返回每个节点的创建时间和ID。,"g.V().hasLabel('doctor').bothE('creates').otherV().hasLabel('prescription').group().by(union(values('createTime'), values('id')).fold()).by(project('createTime', 'id').by(values('createTime')).by(values('id')))"
请帮我查找和repository Flink之间有has关系的user,"g.V().hasLabel('repository').has('name', 'Flink').out('has').hasLabel('user')"
返回陈科创建的所有订单，以及这些订单中包含的商品销售量。,"g.V().has('name', '陈科').outE('creates').inV().hasLabel('orders').outE('contain').inV().hasLabel('goods').values('sellerNumber')"
 找出peopleNumber为空或小于958的公司的城市名称，以及这些城市所属的国家名称。,"g.V().hasLabel('company').has('peopleNumber', null).has('peopleNumber', lt(958)).out('belong').hasLabel('city').as('b').out('belong').hasLabel('country').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我找出名为数据结构的点belong的全部department,并对这些department的name进行求和","g.V().has('name', '数据结构').outE('belong').inV().hasLabel('department').values('name').sum()"
"以23, 25作为输入调用KHOP函数,返回id, kValue","g.call('KHOP').with('input', [23, 25]).select('id', 'kValue')"
请帮我找出性别不是famale或身高为空的节点,"g.V().or(has('gender', neq('famale')), hasNot('height')).elementMap()"
"请帮我查找全部源点类型为仓库,边类型为拥有,且满足条件权重大于198.42或目标点id大于13,且权重不为空的边","g.V().hasLabel('repository').outE('has').has('weight', gt(198.42)).or(__.has('targetId', gt(13))).has('weight', neq(null)).dedup()"
找出属于放射科并且在放射科工作的医生。,"g.V().has('name', '放射科').as('a').out('has').hasLabel('doctor').as('b').select('a').in('belong').hasLabel('doctor').as('c').select('a', 'b', 'c')"
返回用户陈梅喜欢的仓库节点拥有的用户,"g.V().has('user', 'name', '陈梅').out('likes').hasLabel('repository').out('has').hasLabel('user')"
"请帮我查找59个名为张科的点watch的类型是film的节点,且节点id是298或id为空","g.V().has('name', '张科').outE('watch').inV().hasLabel('film').or(has('id', 298), hasNot('id')).limit(59)"
"请帮我找出id为148的订单有关的卖家的相关者, 再请帮我找出和卖家有关系的相关者","g.V().hasLabel('orders').has('id', 148).as('a').bothE().bothV().hasLabel('seller').as('b').bothE('relation').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
查找和person马建聪之间有属于关系的公司,"g.V().has('person', 'name', '马建聪').outE('belong').inV().hasLabel('company')"
"使用列为gender,id,age, 数据为('famale',9,49),('famale',20,25)的子查询作为输入表, 源点的age等于输入表age,查找类型为doctor_creates_prescription,且权重为空或f1小于563或目标点id小于等于104的边","g.withSideEffect('p', [['gender': 'famale', 'id': 9, 'age': 49], ['gender': 'famale', 'id': 20, 'age': 25]]).V().as('a').where(__.select('a').values('age').as('age').select('p').unfold().where(__.select('age').is(eq('age'))).count().is(gt(0))).outE('doctor_creates_prescription').as('e').where(or(__.select('e').values('weight').is(eq(null)), __.select('e').values('f1').is(lt(563)), __.select('e').values('targetId').is(lte(104)))).select('e')"
"查询person属于的公司,返回其源点的身高减197的值,以及目标点的价值减704的个数","g.V().hasLabel('person').as('a').outE('belong').as('e').inV().hasLabel('company').as('b').project('height_diff', 'count_val').by(select('a').values('height').math('_ - 197')).by(select('b').values('value').math('_ - 704').count())"
"查找pay person杜建聪pay的person,的person","g.V().has('person', 'name', '杜建聪').outE('pay').inV().as('b').inE('pay').outV().as('c').select('b', 'c')"
"给出撰写读者李科喜欢的书,的作家","g.V().hasLabel('reader').has('name', '李科').outE('likes').inV().hasLabel('book').as('b').inE('write').outV().hasLabel('author').as('c').select('b', 'c')"
"查找全部名为杜国强的,身高大于等于172或名字等于黄红的朋友,返回这些朋友的名字,和边的源点id,目标点id,f1","g.V().has('name', '杜国强').outE('friend').as('e').inV().has('height', gte(172)).or().has('name', '黄红').select('e').by(valueMap('srcId', 'targetId', 'f1')).project('b.name', 'e.srcId', 'e.targetId', 'e.f1').by(__.select('e').inV().values('name')).by(__.select('e').values('srcId')).by(__.select('e').values('targetId')).by(__.select('e').values('f1'))"
获取id小于等于40且名字为赵雪的用户发布的帖子的标题和这些帖子所拥有的标签的名称,"g.V().hasLabel('user').has('id', lte(40)).has('name', '赵雪').outE('publish').inV().hasLabel('post').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 返回张宏拥有且与贷款默认名称存在偿还关系的账户节点，包括账户ID、余额、上次登录时间和张宏的名称以及贷款默认名称的ID。,"g.V().has('person', 'name', '张宏').as('a').outE('own').as('e').inV().hasLabel('account').as('b').inE('repay').as('e2').outV().has('loan', 'name', 'defaultName').as('c').select('a', 'b', 'c').by('name').by(values('id', 'value', 'lastLoginTime').fold()).by('id').project('a_name', 'b_id', 'b_value', 'b_lastLoginTime', 'c_id').by(select('a')).by(select('b').unfold().limit(1)).by(select('b').unfold().skip(1).limit(1)).by(select('b').unfold().skip(2).limit(1)).by(select('c'))"
查询全部和软件SprintBoot之间有使用关系的软件,"g.V().has('software', 'name', 'SprintBoot').out('uses').hasLabel('software')"
返回张建聪和徐建聪之间的196条关系记录,"g.V().has('person', 'name', '张建聪').outE('relation').as('e').inV().as('b').inE('relation').as('e2').outV().has('person', 'name', '徐建聪').select('b').limit(196)"
 请帮我找出与电影《复仇者联盟》相关的人，并找出与该电影相关的其他标签。,"g.V().hasLabel('film').has('name', '复仇者联盟').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('has').inV().hasLabel('tag').as('c').select('a', 'b', 'c')"
查询何建聪观看的电影，返回这些电影拥有的标签的ID和价值。,"g.V().has('person', 'name', '何建聪').outE('watch').inV().hasLabel('film').outE('has').inV().hasLabel('tag').project('id', 'value').by('id').by('value')"
"以(336,19,'CSDN'),(542,55,'推特'),(246,1,'百度贴吧'),(364,7,'推特')作为请求表数据,属性分别为value,id,name, 源点的id等于输入表id,查找194个id为空或创建时间等于2009年01月18日,且人数不为空的论坛,根据人数从小到大排列","g.withSideEffect('p', [[336, 19, 'CSDN'], [542, 55, '推特'], [246, 1, '百度贴吧'], [364, 7, '推特']]).V().hasLabel('forum').where(and(__.inject('p').unfold().select('id').as('pid'), or(has('id', null), has('createTime', '2009-01-18')))).has('peopleNumber', neq(null)).order().by('peopleNumber', asc).limit(194)"
计算所有person的年龄减年龄减1179加id的最小值,g.V().hasLabel('person').project('result').by(values('age').as('a').select('a').math('a - a - 1179 + id').fold().min()).select('result')
"给出被person关联数量大于54的person,记为relationCount,再查询这些person关联的person","g.V().hasLabel('person').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('relates').hasLabel('person').values('id').mean()).select('a', 'relationCount').where(__.select('relationCount').is(gt(54))).select('a').out('relates').hasLabel('person').as('c').select('c')"
"请帮我找出40个software SprintBoot和Hadoop,共同的partner","g.V().has('software', 'name', 'SprintBoot').outE('partner').inV().as('b').inE('partner').outV().has('software', 'name', 'Hadoop').select('b').limit(40)"
请帮我查找id为43的teacher及其伙伴，再查找与teacher相关的relation。,"g.V().has('teacher', 'id', '43').as('a').bothE().otherV().hasLabel('teacher').as('b').bothE().hasLabel('partner').otherV().as('c').select('b').bothE().hasLabel('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"返回和person吴思思有关系的person,返回这些点的id","g.V().hasLabel('person').has('name', '吴思思').bothE().otherV().hasLabel('person').id()"
"请帮我找出用户发布的帖子,返回其源点的salary的平均值加5812对年龄取余的值,以及目标点的价值加245加6的个数","g.V().hasLabel('user').as('a').outE('publish').hasLabel('publish').inV().hasLabel('post').as('b').select('a', 'b').by(__.values('salary').mean()).by(__.values('value').fold().count(local)).project('expr1', 'expr2').by(__.select('a').math('_ + 5812 % _').by(constant(5812)).by(__.select('a').values('age'))).by(__.select('b').math('_ + 245 + 6').by(constant(245)).by(constant(6)))"
"以241,19,233,902,390作为请求点id, 源点的id等于输入表id,查找与名为中国科技大学和清华大学的点共同cooperate的,标签等于company的节点","g.inject([241, 19, 233, 902, 390]).as('p').unfold().as('id').V().has('id', __.as('id')).has('name', '中国科技大学').as('a').outE('university_cooperate_company').as('e').inV().hasLabel('company').as('b').inE('university_cooperate_company').as('e2').outV().has('name', '清华大学').as('c').select('b').dedup()"
"给出类型是apply,且weight在175.69到175.29之间且targetId不是42,f0小于等于868的边","g.E().hasLabel('apply').has('weight', between(175.29, 175.69)).has('targetId', neq(42)).has('f0', lte(868))"
 找出与大学标签相关的177个部门，以及与这些部门有联系的员工和学生。,g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('student').limit(177)
"帮我查询源点满足条件创建时间不等于2013年08月26日或名字不是Prescription_254,目标点满足条件权重不是378,id在73到81之间,或id在54到98之间,且label为包含的边","g.E().hasLabel('contain').where(__.or(__.and(__.outV().has('createTime', neq('2013-08-26')), __.outV().has('name', neq('Prescription_254'))), __.and(__.inV().has('weight', neq(378)), __.inV().has('id', between(73, 81))), __.inV().has('id', between(54, 98))))"
找出所有和person李伟之间有恋人关系的person,"g.V().has('person', 'name', '李伟').out('lover').hasLabel('person')"
"返回与读者Tom存在喜欢关系,且与书少年闰土存在引用关系的书节点，返回这些书的id,价格,创建时间,及读者Tom的名字,及书少年闰土的创建时间","g.V().hasLabel('reader').has('name', 'Tom').as('a').outE('likes').inV().hasLabel('book').as('b').inE('refers').outV().hasLabel('book').has('name', '少年闰土').as('c').select('a', 'b', 'c').by('name').by(values('id', 'price', 'createTime')).by('createTime').project('a_name', 'b_id', 'b_price', 'b_createTime', 'c_createTime').by(select('a')).by(select('b').select('id')).by(select('b').select('price')).by(select('b').select('createTime')).by(select('c'))"
"查找全部和名为张建聪的person有parent关系,或有parent的parent关系的person","g.V().has('person', 'name', '张建聪').repeat(out('parent')).times(2).emit().dedup()"
请帮我查找所有名为王红的节点认识的person,"g.V().has('name', '王红').outE('knows').inV().hasLabel('person')"
请帮我找出由名为李建聪和王月的人共同出版的书籍类节点,"g.V().has('name', '李建聪').outE('publish').inV().hasLabel('book').as('b').inE('publish').outV().has('name', '王月').select('b')"
 返回与tag动作存在关系且与comment Comment_448存在关系的cinema节点，并返回它们的名称。,"g.V().hasLabel('tag').has('name', '动作').outE().inV().hasLabel('cinema').as('b').inE().outV().hasLabel('comment').has('name', 'Comment_448').select('b').values('name')"
给出所有标签为buyer的点,g.V().hasLabel('buyer')
"帮我查询取消订单Order_332的买家,和这些买家取消的订单","g.V().hasLabel('orders').has('name', 'Order_332').as('a').inE('cancel').outV().as('b').outE('cancel').inV().as('c').select('b', 'c')"
"请帮我找出所有和person点有申请关系的贷款节点,且边满足条件源点id不等于157,目标贷款节点权重在210到640之间","g.V().hasLabel('person').as('a').outE('apply').as('e').where(values('srcId').is(neq(157))).inV().hasLabel('loan').has('weight', between(210, 640)).as('b').select('b')"
"找出和user Alice有关系的forum,返回这些点的name","g.V().hasLabel('user').has('name', 'Alice').bothE().otherV().hasLabel('forum').values('name')"
请帮我找出与事项ISSUE-495有关系的用户的年龄,"g.V().has('issue', 'name', 'ISSUE-495').bothE().otherV().hasLabel('user').values('age')"
帮我查询以创造关系关联了事项ISSUE-462的用户,"g.V().hasLabel('issue').has('name', 'ISSUE-462').in('creates').hasLabel('user')"
 查询与买家黄轩有取消关系的订单，以及取消关系与黄轩相关的订单。,"g.V().hasLabel('buyer').has('name', '黄轩').as('a').bothE('cancel').as('e').otherV().hasLabel('orders').as('b').select('a').bothE('cancel').as('e2').otherV().hasLabel('orders').as('c').select('a', 'b', 'c')"
请帮我找出与buyer郑若涵有consult关系，并且与goods杯子有has关系的seller节点。并返回这些seller的height、id、age以及buyer郑若涵和goods杯子的id,"g.V().has('buyer', 'name', '郑若涵').as('a').out('consult').hasLabel('seller').as('b').in('has').has('goods', 'name', '杯子').as('c').select('a', 'b', 'c').by('id').by(values('height', 'id', 'age')).by('id')"
"请帮我查找13个和label为编辑的点有发布关系的书,以及和这些书有引用关系的书",g.V().hasLabel('publisher').as('a').outE('publish').as('e').inV().hasLabel('book').as('b').outE('refers').as('e2').inV().hasLabel('book').as('c').select('c').limit(13)
"以233作为请求点id, 以属性id作为相等条件,查询172个名为张建国的点likes的label为book的节点,且节点name等于计算机网络且name等于百年孤独","g.withSideEffect('p', [233]).V().has('id', __.select('p')).has('name', '张建国').outE('reader_likes_book').inV().hasLabel('book').has('name', '计算机网络').has('name', '百年孤独').limit(172)"
请帮我查找前55个满足条件price小于1390.93且value在594到940之间的orders,"g.V().hasLabel('orders').has('price', lt(1390.93)).has('value', between(594, 940)).limit(55)"
"输入表的列为id,amount,weight, 数据为(55,6705.33,151), 以属性weight作为相等条件,查询全部和名为马雪的person有friend关系,或有friend的friend关系的loan","g.withSideEffect('p', [['id':55, 'amount':6705.33, 'weight':151]]).V().hasLabel('person').has('weight', select('p').unfold().values('weight')).has('name', '马雪').bothE('friend').otherV().repeat(bothE('friend').otherV().simplePath()).times(1).emit().hasLabel('loan').dedup()"
查找所有名为何国强的节点创造的标签或person或电影,"g.V().has('name', '何国强').outE('creates').inV().hasLabel(within('tag', 'person', 'film')).dedup()"
"使用列为id,scale,peopleNumber, 数据为(1,'large',610),(14,'small',864)的子查询作为输入表, 以属性scale作为相等条件,找出全部源点类型为university,边类型为university_cooperate_company的边,返回这些边的targetId加85的值,和f0减f0加103的值","g.inject([['id':1,'scale':'large','peopleNumber':610],['id':14,'scale':'small','peopleNumber':864]]).as('p').unfold().as('p_row').V().hasLabel('university').as('a').where(eq('p_row')).by('scale').by('scale').outE('university_cooperate_company').as('e').inV().as('b').select('e').project('col1','col2').by(select(values).select('targetId').math('_ + 85')).by(constant(103))"
"用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询全部源点标签等于读者,边标签等于reader_likes_book,以及满足条件源点id是32的边","g.E().hasLabel('reader_likes_book').where(outV().hasLabel('reader').has('id', 32))"
查找与论坛CSDN有包含关系的3度以内的环,"g.V().has('forum', 'name', 'CSDN').as('a').repeat(bothE().otherV().simplePath()).times(3).where(cyclicPath()).path().by('id').by('id')"
 找到百度贴吧和推特上共同的朋友，共有111个论坛。,"g.V().hasLabel('forum').has('name', '百度贴吧').outE('friend').inV().as('b').inE('friend').outV().hasLabel('forum').has('name', '推特').select('b').limit(111)"
找出所有和买家郑宏之间有创造关系的订单,"g.V().hasLabel('buyer').has('name', '郑宏').outE('creates').inV().hasLabel('orders')"
"给出和buyer马国强有关的orders,再给出和马国强cancel的其他orders,返回它们","g.V().hasLabel('buyer').has('name', '马国强').as('a').bothE().otherV().hasLabel('orders').as('b').select('a').bothE('cancel').otherV().hasLabel('orders').as('c').select('a', 'b', 'c')"
给出与person徐雪有likes关系的3度以内的环,"g.V().has('person', 'name', '徐雪').as('a').repeat(bothE('likes').otherV().simplePath()).times(2).where(cyclicPath()).path().by('id').by('id')"
请帮我查找与教师Sam有教关系的3跳以内的环,"g.V().has('teacher', 'name', 'Sam').as('a').repeat(bothE('teach').otherV().simplePath()).times(2).emit().as('b').where(__.as('b').out().as('a')).select('a', 'b').by('id').by('id')"
找出所有与阿里有合作关系的大学，并返回这些大学与阿里合作的点名。,"g.V().has('name', '阿里').outE('cooperate').inV().hasLabel('university').outE('cooperate').inV().hasLabel('company').values('name')"
请帮我找出所有类型为person，名字叫王建聪的点，并返回他们的薪资和id,"g.V().hasLabel('person').has('name', '王建聪').project('salary', 'id').by('salary').by('id')"
"给出id为129的点的id,名字","g.V().has('id', 129).project('a.id', 'a.name').by('id').by('name')"
"查询course数据结构 belong的department,返回department has的student的salary除salary的值","g.V().hasLabel('course').has('name', '数据结构').outE('belong').inV().hasLabel('department').outE('has').inV().hasLabel('student').project('result').by(values('salary').math('_ / _'))"
"请帮我找出名为武汉大学的点属于的城市,并对这些城市的名字进行求和","g.V().has('name', '武汉大学').outE('belong').inV().hasLabel('city').values('name').sum()"
返回与医生李科和处方Prescription_491相关的患者节点。,"g.V().hasLabel('doctor').has('name', '李科').bothE('diagnose').otherV().hasLabel('patient').as('b').bothE('accept').otherV().hasLabel('prescription').has('name', 'Prescription_491').select('b')"
"找出28个名为ISSUE-276的点属于的标签为仓库的节点,且节点创建时间为2033年06月26日或语言等于go","g.V().has('name', 'ISSUE-276').outE('belong').inV().hasLabel('repository').or(has('createTime', '2033-06-26'), has('lang', 'go')).limit(28)"
"请帮我找出源点标签为person,边标签为喜欢,并且满足条件源点id不为空,f1不等于false的边","g.V().hasLabel('person').outE('likes').where(and(has('srcId', neq(null)), has('f1', neq(false))))"
请提供与Bilibili公司有关的城市信息，以及与四川大学合作的公司信息。,"g.V().hasLabel('company').has('name', 'Bilibili').as('a').outE('belong').inV().hasLabel('city').as('b').select('a').V().hasLabel('university').has('name', '四川大学').as('c').outE('cooperate').inV().hasLabel('company').as('d').select('a', 'b', 'c', 'd')"
找出孙强和李月的共同朋友，共有148人。,"g.V().hasLabel('person').has('name', '孙强').outE('friend').inV().as('b').inE('friend').outV().hasLabel('person').has('name', '李月').select('b').dedup().limit(148)"
帮我查询与论坛知乎和百度贴吧都存在包含关系的点,"g.V().hasLabel('forum').has('name', '知乎').outE('contain').inV().where(__.inE('contain').outV().hasLabel('forum').has('name', '百度贴吧')).dedup()"
找出与张若涵合作创作，并且属于电影《神探狄仁杰》的评论。返回这些评论的ID、字数以及张若涵和《神探狄仁杰》的相关信息。,"g.V().has('person', 'name', '张若涵').as('a').outE('creates').as('e').inV().hasLabel('comment').as('b').inE('belong').as('e2').outV().has('film', 'name', '神探狄仁杰').as('c').select('a', 'b', 'c').by('name').by(values('id', 'wordCount')).by('category')"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));返回与person孙建国有关,且与loan defaultName有关系的company节点","g.V().has('person', 'name', '孙建国').outE('person_invest_company').inV().hasLabel('company').as('b').outE('company_apply_loan').inV().has('loan', 'name', 'defaultName').select('b')"
 找出与韩月和何国强有关的所有publisher节点。,"g.V().has('name', '韩月').outE().inV().hasLabel('publisher').as('b').inE().outV().has('name', '何国强').select('b').limit(107)"
请帮我找出前140个年龄为空的person,g.V().hasLabel('person').hasNot('age').limit(140)
"返回被person支付数量大于199的person,记为relationCount,再查询这些person支付的person","g.V().hasLabel('person').as('a').project('a', 'relationCount').by(__.identity()).by(__.inE('pay').where(__.outV().hasLabel('person')).outV().values('id').mean()).select('a', 'relationCount').where(__.select('relationCount').is(gt(199))).select('a').outE('pay').inV().hasLabel('person').dedup()"
"根据name分组,计算id的最小值对73取余的值","g.V().hasLabel('a').group().by('name').by(values('id').min()).unfold().project('name', 'result').by(select(keys)).by(select(values).math('_ % 73'))"
"帮我查询所有person以身高,薪资分组的性别, 根据性别降序排序","g.V().hasLabel('person').group().by(values('height', 'salary').fold()).by(values('gender').fold()).order(local).by(select(values).unfold().order().by(desc).fold(), desc)"
 列出所有相关方，或相关方的相关方。,"g.V().hasLabel('company').as('a').outE('relation').inV().range(1,2).as('b').select('b')"
 请帮我查询与中国相关的大学，并返回它们。另外，请帮我查询包含中国的其他城市，也返回它们。,"g.V().has('country', 'name', '中国').as('a').bothE().otherV().hasLabel('university').as('b').select('a').bothE('contain').otherV().hasLabel('city').as('c').select('a', 'b', 'c')"
"以237,545,330,225作为请求点id, 源点的id等于输入表id,帮我查询所有源点标签为卖家,目标点标签为商品,标签为seller_has_goods的边","g.inject([237, 545, 330, 225]).as('p').unfold().as('id').V().hasLabel('seller').has('id', __.select('id')).outE('seller_has_goods').as('e').inV().hasLabel('goods').select('e')"
"找出与评论Comment_335存在属于关系,且与标签喜剧存在拥有关系的电影节点，返回这些电影的id,及评论Comment_335的名字,及标签喜剧的价值","g.V().hasLabel('comment').has('name', 'Comment_335').as('a').outE('belong').inV().hasLabel('film').as('b').inE('has').outV().hasLabel('tag').has('name', '喜剧').as('c').select('a', 'b', 'c').by('name').by('id').by('value')"
"找出person孙宏认识的person, 令person(b)的薪资等于person(a)的salary的求和值减薪资的数量,令person(b)的年龄等于person(a)的名字的最大值, 返回person(a)的年龄, person(b)的id","g.V().has('person', 'name', '孙宏').as('a').outE('knows').inV().hasLabel('person').as('b').project('a_age', 'b_id').by(select('a').values('age')).by(select('b').values('id'))"
"查找has department经管学院has的student,的department","g.V().has('department', 'name', '经管学院').out('has').as('b').in('has').hasLabel('department').as('c').select('b', 'c')"
"找出名字不是PR-434的合并请求属于的仓库的名称,以及这些仓库 拥有的用户的名称","g.V().hasLabel('pullRequest').has('name', neq('PR-434')).out('belong').hasLabel('repository').as('b').out('has').hasLabel('user').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 找出与学生徐宏有has关系的department。,"g.V().hasLabel('student').has('name', '徐宏').inE('has').outV().hasLabel('department')"
"帮我查询名为陈红的点buy的software,并对这些software的lang进行求和","g.V().has('name', '陈红').outE('buy').inV().hasLabel('software').values('lang').sum()"
"返回标签等于论坛的点,返回13个",g.V().hasLabel('forum').limit(13)
"找出与编辑吴建国有关,且与书罪与罚有关系的书节点","g.V().has('publisher', 'name', '吴建国').out('publish').as('b').out('refers').has('book', 'name', '罪与罚').select('b')"
"给出贷款loan_46存款的账号,被其他贷款存款的数量","g.V().has('loan', 'name', 'loan_46').outE('deposit').inV().hasLabel('account').inE('deposit').outV().hasLabel('loan').count()"
"给出id为188的pullRequest有关的repository的partner, 再给出和repository有关系的relation","g.V().has('pullRequest', 'id', 188).as('a').bothE().otherV().hasLabel('repository').as('b').both().hasLabel('repository').bothE('partner').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"找出26个名为郑建国的点likes的类型为book的节点,且节点name是呐喊或name为悲惨世界","g.V().has('name', '郑建国').outE('likes').inV().hasLabel('book').has('name', within('呐喊', '悲惨世界')).limit(26)"
"请帮我查找和大学浙江大学有属于关系的城市,再请帮我查找以合作关系关联了浙江大学的公司","g.V().has('university', 'name', '浙江大学').as('a').outE('belong').inV().hasLabel('city').as('b').select('a').inE('cooperate').outV().hasLabel('company').as('c').select('a', 'b', 'c')"
"查找课程的三角的环,边类型是属于, 并返回这些点的id","g.V().hasLabel('course').as('a').outE('belong').inV().as('b').outE('belong').inV().as('c').where(eq('a')).select('a', 'b', 'c').by().by(id).by(id).project('a', 'b_id', 'c_id').by().by(select('b')).by(select('c'))"
请帮我找出类型为电影且与Comment_247和Comment_365两点都有关联的节点,"g.V().has('name', 'Comment_247').outE('belong').inV().hasLabel('film').as('b').inE('belong').outV().has('name', 'Comment_365').select('b')"
"请帮我找出全部和名为知网的forum有friend关系,或有friend的friend关系的post","g.V().has('forum', 'name', '知网').repeat(out('friend')).times(2).hasLabel('post')"
"输入表的列为address,size,name, 数据为('西区',732,'UME'),('南区',9,'大众影院'), 以属性name作为相等条件,查询前175个创建时间为2025年06月12日的评论","g.inject(['西区',732,'UME'], ['南区',9,'大众影院']).as('p').select('p').unfold().as('row').project('address', 'size', 'name').by(__.select('row').limit(1)).by(__.select('row').skip(1).limit(1)).by(__.select('row').skip(2).limit(1)).as('p').V().hasLabel('comment').as('a').where(__.select('a').values('name').is(__.select('p').select('name'))).has('createTime', '2025-06-12').select('a').limit(175)"
 获取文学院和物理学院，类型为部门节点，共同拥有的'朋友'节点列表。,"g.V().has('department', 'name', '文学院').out('friend').as('b').in('friend').has('department', 'name', '物理学院').select('b').values('name')"
"帮我查询所有名为黄月的点的,创建时间不是2013年09月27日且名字不是Comment_425的伙伴,返回这些伙伴的字数,和边的权重,f1","g.V().has('name', '黄月').outE('partner').as('e').inV().has('createTime', neq('2013-09-27')).has('name', neq('Comment_425')).project('b_wordCount', 'e_weight', 'e_f1').by(values('wordCount')).by(select('e').values('weight')).by(select('e').values('f1'))"
请帮我查找全部与标签科幻有关系的评论的字数,"g.V().has('tag', 'name', '科幻').bothE().otherV().hasLabel('comment').values('wordCount')"
帮我找找forum中国诗词论坛和历史相关的帖子,"g.V().hasLabel('forum').has('name', '中国诗词论坛').outE('contain').inV().hasLabel('post').as('b').outE('has').inV().hasLabel('tag').has('name', '历史').select('b')"
 评论Comment_206属于的电影数量没有被明确说明。,"g.V().has('comment', 'name', 'Comment_206').out('belong').in('belong').hasLabel('comment').count()"
"帮我查询卖家的三角的环,边标签为拥有, 并返回这些点的id","g.V().hasLabel('seller').as('a').out('has').as('b').out('has').as('c').where(__.as('c').out('has').as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
请帮我找出与用户赵科和文艺标签相关的帖子。,"g.V().has('user', 'name', '赵科').bothE('likes').otherV().hasLabel('post').bothE('has').otherV().has('tag', 'name', '文艺').select('post')"
"帮我查询person张红关联的person,被其他person认识的数量","g.V().has('person', 'name', '张红').outE('relates').inV().hasLabel('person').inE('knows').outV().hasLabel('person').count()"
"用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找与订单Order_179有关系的买家的薪资","g.V().hasLabel('orders').has('name', 'Order_179').bothE().otherV().hasLabel('buyer').values('salary')"
找出共同拥有'大学'标签且名称包含'重庆大学'或'武汉大学'的节点列表。,"g.V().has('university', 'name', '重庆大学').outE('relation').inV().as('b').inE('relation').outV().has('university', 'name', '武汉大学').select('b').values('name')"
 返回医生类型且按照性别从小到大排序的所有点。,"g.V().hasLabel('doctor').order().by('gender', asc)"
"找出和person点有购买关系的软件节点,且边满足条件源点id为空,目标软件节点满足条件星数在676到973之间","g.V().hasLabel('person').as('a').outE('buy').has('srcId', null).as('e').inV().hasLabel('software').has('stars', between(676, 973)).as('b').select('b')"
"调用triangleCount函数,以'jd', 24作为输入,返回number","g.call(""triangleCount"").with(""graphName"", ""jd"").with(""maxIterations"", 24).select(""number"")"
"请帮我找出订单的三角的环,边标签等于包含, 并返回这些点的id","g.V().hasLabel('orders').as('a').outE('contain').inV().as('b').outE('contain').inV().as('c').where(__.outE('contain').inV().as('a')).select('a', 'b', 'c').by().by('id').by('id').project('a', 'b_id', 'c_id').by().by(select('b').id()).by(select('c').id())"
"请帮我查找52个和类型是大学的点有合作关系的公司,并且和这些公司有属于关系的城市",g.V().hasLabel('university').as('a').outE('cooperate').as('e').inV().hasLabel('company').as('b').outE('belong').as('e2').inV().hasLabel('city').as('c').select('c').limit(52)
找出与出版社标签相关的13本书，以及它们引用的其他书籍。,g.V().hasLabel('publisher').as('a').outE('publish').as('e').inV().hasLabel('book').as('b').outE('refers').as('e2').inV().hasLabel('book').as('c').select('c').limit(13)
"输入请求点id的列表892,750,542,702, 源点的id等于输入表id,请帮我查找病人孙宏的相关者的朋友的朋友","g.withSideEffect('p', [892, 750, 542, 702]).V().hasLabel('patient').has('id', within('p')).has('name', '孙宏').out('relation').out('friend').out('friend')"
请帮我找出与标签为'university'的点有'has'关系的部门，以及这些部门有'has'关系的学生，以及这些学生有'selects'关系的课程。,g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('student').out('selects').hasLabel('course')
请帮我查找与赵建聪相关的人员，以及赵建聪喜欢的其他人员，并将他们返回。,"g.V().has('person', 'name', '赵建聪').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('likes').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
"返回名为复旦大学和电子科技大学的,类型为大学的点公共的相关者节点的名单","g.V().has('university', 'name', '复旦大学').outE('relation').inV().as('b').inE('relation').outV().has('university', 'name', '电子科技大学').select('b').values('name')"
"返回54个字数小于109或id大于等于36的评论,根据字数升序排列","g.V().hasLabel('comment').or(has('wordCount', lt(109)), has('id', gte(36))).order().by('wordCount', asc).limit(54)"
 谁与李梅有认识关系？,"g.V().hasLabel('person').has('name', '李梅').inE('knows').outV().dedup()"
"请帮我找出标签为film,名为我不是药神的点,返回这些点的name","g.V().hasLabel('film').has('name', '我不是药神').values('name')"
"以613,995,426作为请求点id, 源点的id等于输入表id,返回账号TheShy的所有label为朋友的边,并根据f0从小到大排列,返回183个","g.withSideEffect('p', [613, 995, 426]).V().hasLabel('account').as('a').where(and(__.select('a').values('id').is(within(__.select('p'))), __.select('a').has('name', 'TheShy'))).outE('friend').as('e').order().by('f0', asc).limit(183).inV().as('b').select('b')"
"请帮我查找id为116的reader有关的author的partner, 再请帮我查找和author有关系的partner","g.V().has('reader', 'id', 116).as('a').bothE().otherV().hasLabel('author').as('b').bothE('partner').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
查询与software Zookeeper有uses关系的1跳的环,"g.V().has('software', 'name', 'Zookeeper').as('a').outE('uses').inV().as('b').where(__.select('a').where(eq('b'))).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"请帮我找出和国家越南有关的公司,称为X,再请帮我找出和这个X有关联的其他公司,以及和X有关联的大学","g.V().has('country', 'name', '越南').as('a').bothE().otherV().hasLabel('company').as('b').bothE().otherV().hasLabel('company').where(neq('b')).as('c').select('b').bothE().otherV().hasLabel('university').as('d').select('a', 'b', 'c', 'd')"
"给出被person徐轩属于的公司,和徐轩认识的person","g.V().hasLabel('person').has('name', '徐轩').as('b').outE('belong').inV().hasLabel('company').as('a').select('b').outE('knows').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
查询与company相关的loan节点，按weight和amount进行分组，并返回weight和amount。,"g.V().hasLabel('company').bothE('apply').otherV().hasLabel('loan').group().by(values('weight', 'amount')).select(keys)"
 查询陈若涵和孙宏共同的朋友。,"g.V().has('user', 'name', '陈若涵').outE('friend').inV().as('b').inE('friend').outV().has('user', 'name', '孙宏').select('b').limit(138)"
"给出创造评论Comment_308的person,和这些person创造的评论","g.V().has('comment', 'name', 'Comment_308').in('creates').as('b').out('creates').hasLabel('comment').as('c').select('b', 'c')"
"查找大学的三角的环,边标签为合作, 并返回这些点的id","g.V().hasLabel('university').as('a').outE('cooperate').inV().as('b').outE('cooperate').inV().as('c').where(__.outE('cooperate').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"找出所有徐思琪的点关联的person,然后找出徐思琪被认识的person,一起返回","g.V().has('name', '徐思琪').as('a').outE('relates').inV().hasLabel('person').as('b').select('a').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
 查询男性用户发布的帖子名称和它们所带的标签。,"g.V().hasLabel('user').has('gender', 'famale').outE('publish').inV().hasLabel('post').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"输入请求点id的列表36,641,392, 以属性id作为相等条件,查找与公司华为和字节都存在company_cooperate_university关系的点","g.withSideEffect('p', [36, 641, 392]).V().hasLabel('company').has('id', within('p')).has('name', '华为').outE('company_cooperate_university').inV().as('b').inE('company_cooperate_university').outV().hasLabel('company').has('name', '字节').select('b').dedup()"
"输入请求点id的列表937, 源点的id等于输入表id,查询被person杜若涵invest的company","g.withSideEffect('p', [937]).V().hasLabel('company').has('id', within('p')).as('a').in('person_invest_company').hasLabel('person').has('name', '杜若涵').as('b').select('a', 'b')"
"返回label为软件,名为Hive的点,返回这些点的名字,是否开源,价值","g.V().hasLabel('software').has('name', 'Hive').project('a.name', 'a.openSource', 'a.value').by('name').by('openSource').by('value')"
请帮我找出与label为person的点有支付关系，并且与这些人有喜欢关系的person，总共有181个。,g.V().hasLabel('person').as('a').outE('pay').inV().hasLabel('person').as('b').outE('likes').inV().hasLabel('person').as('c').select('c').limit(181)
"返回医生吴国强诊断的病人,以及诊断这些病人的医生, 令病人的名字等于病人的id乘66,令医生的id等于医生的名字的平均值, 返回医生(a)的年龄,病人(b)的性别,医生(c)的名字","g.V().hasLabel('doctor').has('name', '吴国强').as('a').outE('diagnose').inV().hasLabel('patient').as('b').inE('diagnose').outV().hasLabel('doctor').as('c').select('a', 'b', 'c').by(project('age').by('age')).by(project('gender').by('gender')).by(project('name').by('name'))"
"查找全部id为10的医生关联的部门,和以属于关系关联了这些部门的其他医生","g.V().hasLabel('doctor').has('id', 10).as('a').bothE().as('e').otherV().hasLabel('department').as('b').inE('belong').as('e2').outV().hasLabel('doctor').as('c').select('b', 'c')"
找出医生标签的点，它们既是Alan的伙伴又是马思琪的伙伴。,"g.V().hasLabel('doctor').has('name', 'Alan').outE('partner').inV().as('b').inE('partner').outV().hasLabel('doctor').has('name', '马思琪').select('b').values('name')"
"找出university电子科技大学cooperate的company,以及contain这些company的city, 令company的name等于company的id乘31加854,令city的name等于university的name, 返回university的name,company的scale,city的name","g.V().has('university', 'name', '电子科技大学').as('a').outE('cooperate').inV().hasLabel('company').as('b').inE('contain').outV().hasLabel('city').as('c').select('a', 'b', 'c').by('name').by(values('scale')).by(project('name').by(constant('电子科技大学')).select('name')).project('a_name', 'b_scale', 'c_name').by(select('a')).by(select('b')).by(select('c'))"
"请帮我查找和仓库点有拥有关系的合并请求节点,且边满足条件f1不等于true,目标合并请求节点名字不是PR-163","g.V().hasLabel('repository').as('a').outE('has').has('f1', neq(true)).as('e').inV().hasLabel('pullRequest').has('name', neq('PR-163')).as('b').select('b')"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));查询所有id为86的大学关联的公司,和以合作关系关联了这些公司的其他大学","g.V().has('university', 'id', 86).bothE().otherV().hasLabel('company').as('b').inE('university_cooperate_company').outV().hasLabel('university').as('c').select('b', 'c')"
"以174作为请求点id, 源点的id等于输入表id,查询person韩轩relates的person,被其他person relates的数量","g.withSideEffect('p', [174]).V().hasLabel('person').has('id', __.select('p')).has('name', '韩轩').as('a').outE('relates').inV().hasLabel('person').as('b').inE('relates').outV().hasLabel('person').as('c').select('c').count()"
返回与Order_444相关的订单，以及包含在Order_444中的其他商品。,"g.V().hasLabel('orders').has('name', 'Order_444').as('a').bothE().otherV().hasLabel('orders').as('b').select('a').outE('contain').inV().hasLabel('goods').as('c').select('a', 'b', 'c')"
"找出被贷款loan_63存款的账号,和loan_63存款的账号","g.V().has('loan', 'name', 'loan_63').as('b').outE('deposit').inV().hasLabel('account').as('a').select('b').outE('deposit').inV().hasLabel('account').as('c').select('a', 'b', 'c')"
"查询person赵宏的所有类型是相关者的边,并根据权重升序排列,返回6个","g.V().has('person', 'name', '赵宏').outE('relation').order().by('weight', asc).limit(6).inV()"
帮我查询103个与知乎和百度贴吧都存在关系的论坛节点,"g.V().has('name', '知乎').outE().as('e').inV().hasLabel('forum').as('b').inE().as('e2').outV().has('name', '百度贴吧').select('b').limit(103)"
 找出两个名字为何强和张强，标签为用户的节点，它们之间的相关者节点。,"g.V().has('user', 'name', '何强').as('a').outE('relation').inV().as('b').inE('relation').outV().has('user', 'name', '张强').as('c').select('b').values('name')"
查询与商品香蕉有has关系的所有卖家,"g.V().hasLabel('goods').has('name', '香蕉').inE('has').outV().hasLabel('seller')"
 找出年龄大于等于49岁且身高大于等于167厘米且性别不是男性的190个人，并按照年龄从小到大排序。,"g.V().hasLabel('person').or(and(has('gender', neq('male')), has('age', gte(49))), has('height', gte(167))).order().by('age', asc).limit(190)"
"给出全部和药品阿司匹林有关系的医生或药品,返回这些点的价格","g.V().has('medicine', 'name', '阿司匹林').bothE().otherV().hasLabel(within('doctor', 'medicine')).values('price')"
请帮我找出被用户韩月发布的帖子,"g.V().hasLabel('user').has('name', '韩月').outE('publish').inV().hasLabel('post').as('b').select('b').by().as('a').select('a', 'b')"
"帮我查询161个名为王红的点likes的标签为book的节点,且其createTime为2006年02月02日","g.V().has('name', '王红').outE('likes').inV().hasLabel('book').has('createTime', '2006-02-02').limit(161)"
"以'Iw', 'KV', 65作为输入调用KHOP函数,返回id, kValue","g.call('KHOP').with('arg0', 'Iw').with('arg1', 'KV').with('arg2', 65).select('id', 'kValue')"
 查询所有起点标记为'person'，终点标记为'company'，且标签为'invest'的边。,g.V().hasLabel('person').outE('invest').as('e').inV().hasLabel('company').select('e')
 查询马建国关联的人，即马建国关系链中下一个关联的人。,"g.V().has('person', 'name', '马建国').out('relates').out('relates')"
请帮我找出前86个性别不等于famale或身高为空或薪资在7716到9544之间的person,"g.V().hasLabel('person').or(has('gender', neq('famale')), hasNot('height'), has('salary', between(7716, 9544))).limit(86)"
"返回类型是accept,并且满足条件f0小于等于925,srcId小于50,或f0为656的边","g.E().hasLabel('accept').or(and(has('f0', lte(925)), has('srcId', lt(50))), has('f0', 656))"
 查询所有forum的合作伙伴，或它们的合作伙伴。,"g.V().hasLabel('forum').outE('partner').inV().range(1, 2).dedup()"
帮我查询前186个label为申请的边,g.E().hasLabel('apply').limit(186)
"请帮我查找person马强own的account, 令account的createTime等于account的id对id取余减0,令account的createTime等于account的createTime,令person的value等于account的value加713加945, 返回person的gender, account的id","g.V().has('person', 'name', '马强').as('a').outE('own').as('e').inV().hasLabel('account').as('b').project('a_gender', 'b_id').by(select('a').values('gender')).by(select('b').values('id'))"
"请帮我找出和仓库有关联的合并请求节点,并根据其创建时间,名字,id分组,返回创建时间,名字,id,以及id除id的值","g.V().hasLabel('repository').as('a').bothE('has').otherV().hasLabel('pullRequest').as('b').select('b').group().by(project('createTime', 'name', 'id').by(values('createTime')).by(values('name')).by(values('id'))).by(project('createTime', 'name', 'id', 'id_div_id').by(values('createTime')).by(values('name')).by(values('id')).by(constant(1))).unfold().select(values).project('createTime', 'name', 'id', 'id_div_id').by(select('createTime')).by(select('name')).by(select('id')).by(select('id_div_id'))"
找出被person李建聪认识的person,"g.V().hasLabel('person').has('name', '李建聪').as('b').outE('knows').as('e').inV().as('a').select('a', 'b')"
"找出公司的相关者,或其相关者的相关者","g.V().hasLabel('company').outE('relation').inV().range(1, 2).dedup()"
"根据height分组,计算height的个数加188的值",g.V().hasLabel('a').group().by('height').by(count()).unfold().select(values).math('_ + 188')
"以(82,526,422),(5,241,719)作为请求表数据,属性分别为id,wordCount,value, 以属性id作为相等条件,给出user徐建国publish的post节点has的tag","g.withSideEffect('p', [[id:82, wordCount:526, value:422], [id:5, wordCount:241, value:719]]).V().hasLabel('user').as('a').where(and(__.select('a').values('id').is(within(select('p').unfold().values('id'))), __.select('a').values('name').is(eq('徐建国')))).outE('user_publish_post').inV().hasLabel('post').as('b').outE('post_has_tag').inV().hasLabel('tag').as('c').select('c')"
id除id的平均值,g.V().hasLabel('a').project('avg').by(values('id').math('_ / _').mean()).select('avg')
查找person韩建聪支付的person节点喜欢的person,"g.V().hasLabel('person').has('name', '韩建聪').outE('pay').inV().hasLabel('person').outE('likes').inV().hasLabel('person')"
" 找出与类型为company的点有belongs-to关系的city,并找出与这些city有contains关系的company。",g.V().hasLabel('company').as('a').out('belong').hasLabel('city').as('b').out('contain').hasLabel('company').as('c').select('c').limit(168)
返回与吴红相关的cinema，然后返回吴红喜欢的其他评论。,"g.V().has('person', 'name', '吴红').as('a').bothE().otherV().hasLabel('cinema').as('b').select('a').outE('likes').inV().hasLabel('comment').as('c').select('a', 'b', 'c')"
"查询公司属于的城市,返回其源点的价值除572的值,以及目标点的id除id的最小值","g.V().hasLabel('company').as('a').outE('belong').as('e').inV().hasLabel('city').as('b').project('a.value_div_572', 'min_b_id_div_id').by(select('a').values('value').math('_ / 572')).by(select('b').values('id').math('_ / _').min())"
"请帮我找出名为陈科和吴强的,标签为person的点公共的朋友节点的名单","g.V().has('person', 'name', '陈科').outE('friend').inV().as('b').inE('friend').outV().has('person', 'name', '吴强').select('b').values('name')"
"找出全部部门的相关者,或其相关者的相关者",g.V().hasLabel('department').outE('relation').inV().outE('relation').inV().dedup()
"请帮我查找112个名为马思琪的点认识的label为person的节点,且节点id不等于35且id除42小于等于65","g.V().has('name', '马思琪').outE('knows').inV().hasLabel('person').has('id', neq(35)).has('id', lt(43)).limit(112)"
查询被department物理学院has的teacher,"g.V().hasLabel('department').has('name', '物理学院').inE('has').outV().hasLabel('teacher').as('b').outE('has').inV().hasLabel('teacher').as('a').select('a', 'b')"
"以247作为请求点id, 源点的id等于输入表id,给出buyer徐建国的所有label为relation的边,并根据targetId从小到大排列,返回18个","g.withSideEffect('p', [247]).V().hasLabel('buyer').has('id', __.select('p')).has('name', '徐建国').outE('relation').order().by('targetId').limit(18).inV()"
"使用列为height,id,name, 数据为(199,37,'张宏')的子查询作为输入表, 以属性height作为相等条件,找出author张月 write的book,返回book knows的book的wordCount减307的值 ","g.withSideEffect('p', [['height':199, 'id':37, 'name':'张宏']]).V().hasLabel('author').has('height', __.select('p').unfold().select('height')).has('name', '张月').outE('author_write_book').inV().hasLabel('book').outE('knows').inV().hasLabel('book').values('wordCount').math('_ - 307')"
查询以认识关系关联了person李国强的person,"g.V().hasLabel('person').has('name', '李国强').inE('knows').outV().dedup()"
找出与徐思琪有关的医生，并获取徐思琪接受过的所有处方，然后将两者一起返回。,"g.V().hasLabel('patient').has('name', '徐思琪').as('a').bothE().otherV().hasLabel('doctor').as('b').select('a').outE('accept').inV().hasLabel('prescription').as('c').select('a', 'b', 'c')"
获取出版社ID为15的书籍相关的合作伙伴，然后获取与该出版社有合作关系的朋友。,"g.V().has('book', 'id', '15').as('a').bothE().otherV().hasLabel('publisher').as('b').bothE('partner').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
"查找id为178的book relates的book, 并将book有关的author的age的平均值赋值给book的id, 接着查询book的id小于178的book relates的book","g.V().has('book', 'id', 178).out('relates').hasLabel('book').as('b').project('b_id', 'd').by(coalesce(__.select('b').bothE().otherV().hasLabel('author').values('age').mean(), constant(0))).by(__.select('b').has('id', lt(178)).out('relates').hasLabel('book'))"
"给出和书白夜行有引用关系的书,再给出以引用关系关联了白夜行的书","g.V().hasLabel('book').has('name', '白夜行').as('a').bothE('refers').otherV().hasLabel('book').as('b', 'c').select('a', 'b', 'c')"
 找Comment_248belong电影节点标签has的。,"g.V().hasLabel('comment').has('name', 'Comment_248').out('belong').hasLabel('film').out('has').hasLabel('tag')"
"请帮我查找belong doctor孙雪belong的department,的doctor","g.V().hasLabel('doctor').has('name', '孙雪').outE('belong').inV().hasLabel('department').as('b').inE('belong').outV().hasLabel('doctor').as('c').select('b', 'c')"
"请帮我找出课程的三角的环,边label为属于, 并返回这些点的id","g.V().hasLabel('course').as('a').outE('belong').as('e').inV().as('b').outE('belong').as('e2').inV().as('c').where('a', eq('c')).select('a', 'b', 'c').by().by('id').by('id').project('a', 'b_id', 'c_id').by().by(select('b')).by(select('c'))"
给出被account Light repay的loan,"g.V().hasLabel('account').has('name', 'Light').outE('repay').inV().hasLabel('loan').as('b', 'a').select('a', 'b')"
"用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));返回account Light的所有标签为partner的边,并根据f1从小到大排列,返回116个","g.V().has('account', 'name', 'Light').outE('partner').order().by('f1', asc).limit(116).inV()"
"查找和编辑王建聪有发布关系的书,再查找以发布关系关联了王建聪的书","g.V().has('publisher', 'name', '王建聪').as('a').outE('publish').inV().hasLabel('book').as('b').select('a').inE('publish').outV().hasLabel('book').as('c').select('a', 'b', 'c')"
"用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询与person黄月和何红都存在person_colleague_person关系的点","g.V().has('person', 'name', '黄月').out('person_colleague_person').as('b').in('person_colleague_person').has('person', 'name', '何红').select('b')"
给出前72个类型为belong的边,g.E().hasLabel('belong').limit(72)
请帮我查找city的3度的环,"g.V().hasLabel('city').as('a').repeat(both().simplePath()).times(2).where(loops().is(2)).as('b').where(out().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').values('id')).by(select('b').values('id'))"
找出与名为韩建国的 person 有关联的 partner 或 partner 的 partner 的 loan,"g.V().has('person', 'name', '韩建国').out('partner').repeat(out('partner')).times(2).hasLabel('loan')"
"找出全部id为92的person关联的person,和以pay关系关联了这些person的其他person","g.V().has('person', 'id', 92).as('a').bothE().as('e').otherV().hasLabel('person').as('b').inE('pay').as('e2').outV().hasLabel('person').as('c').select('b', 'c').dedup()"
 请帮我把 prescription 按照 id 进行分组，然后按从大到小的顺序排序。,"g.V().hasLabel('prescription').group().by('id').order(local).by(keys, desc).select(values).unfold()"
找出与仓库FSM和Kafka都存在拥有关系的点,"g.V().has('repository', 'name', 'FSM').out('has').where(__.in('has').has('repository', 'name', 'Kafka'))"
帮我查询全部和course数据结构之间有belong关系的department,"g.V().has('course', 'name', '数据结构').out('belong').hasLabel('department')"
"帮我查询所有和person点有属于关系的公司节点,且边满足条件权重是198.17,目标公司节点id小于等于25","g.V().hasLabel('person').as('a').outE('belong').has('weight', 198.17).as('e').inV().hasLabel('company').has('id', lte(25)).as('b').select('b')"
"返回类型是teach,并且f0为空且f0大于920,f1不是false的边","g.E().hasLabel('teach').has('f0', null).has('f0', gt(920)).has('f1', neq(false))"
查找全部和loan loan_28之间有deposit关系的account,"g.V().hasLabel('loan').has('name', 'loan_28').outE('deposit').inV().hasLabel('account')"
找出所有与person徐雪有关系的电影的id,"g.V().has('person', 'name', '徐雪').bothE().otherV().hasLabel('film').id()"
"查找名为外科的doctor,以及与其有关的doctor,并返回外科的name和这些doctor的salary","g.V().hasLabel('doctor').has('name', '外科').bothE().otherV().hasLabel('doctor').project('a_name', 'b_salary').by(select(all, 'a').unfold().values('name')).by(values('salary'))"
"查询全部与周轩存在write关系的book,book与book存在refers关系的点,返回这些点的createTime","g.V().has('name', '周轩').outE('write').inV().hasLabel('book').outE('refers').inV().hasLabel('book').values('createTime')"
 请帮我找出14个与标签为'person'的地点有同事关系的地点，以及与这些地点有同事关系的地点。,g.V().hasLabel('person').as('a').outE('colleague').as('e').inV().hasLabel('person').as('b').outE('colleague').as('e2').inV().hasLabel('person').as('c').select('c').limit(14)
"帮我查询releases person黄伟watch的film,的cinema","g.V().hasLabel('person').has('name', '黄伟').outE('watch').inV().hasLabel('film').as('b').inE('releases').outV().hasLabel('cinema').as('c').select('b', 'c')"
返回作家的所有朋友，或者他们朋友的朋友。,"g.V().hasLabel('author').as('a').outE('friend').inV().hasLabel('author').range(1, 2).as('b').select('b')"
"以('small',201,99),('small',368,83),('medium',234,81)作为请求表数据,属性分别为scale,value,id, 以属性value作为相等条件,查询全部源点类型是company,边类型是company_belong_city,且满足条件srcId在49到58之间的边","g.withSideEffect('p', [['scale': 'small', 'value': 201, 'id': 99], ['scale': 'small', 'value': 368, 'id': 83], ['scale': 'medium', 'value': 234, 'id': 81]]).V().hasLabel('company').as('a').where(__.select('a').values('value').is(within(__.select('p').unfold().values('value')))).outE('company_belong_city').as('e').where(__.select('e').values('srcId').is(between(49, 58))).select('e')"
 返回与大学类型的点有拥有关系的部门，以及与这些部门有拥有关系的教师，以及与这些教师有教关系的课程。,g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('teacher').out('teach').hasLabel('course')
"查询医生属于的部门, 令部门的id的值等于属于部门的医生的名字的和, 再查找部门拥有的医生","g.V().hasLabel('doctor').as('a').outE('belong').as('e').inV().hasLabel('department').as('b').group().by(identity()).by(__.in('belong').hasLabel('doctor').values('name').sum()).select(values).unfold().as('b').out('has').hasLabel('doctor').as('d').select('b', 'd').by('id').by()"
查询所有与company美团有关系的company的peopleNumber,"g.V().has('company', 'name', '美团').bothE().otherV().hasLabel('company').values('peopleNumber')"
"请帮我找出名为孙红和周科的,类型是卖家的点公共的相关者节点的名单","g.V().has('seller', 'name', '孙红').outE('relation').inV().as('b').inE('relation').outV().has('seller', 'name', '周科').select('b').values('name')"
 返回与美团和蚂蚁集团有关系的国家节点，并返回它们的area和name。,"g.V().has('company', 'name', '美团').outE().inV().hasLabel('country').as('b').inE().outV().has('company', 'name', '蚂蚁集团').select('b').project('area', 'name').by(values('area')).by(values('name'))"
"输入请求点id的列表578,157, 源点的id等于输入表id,查找buyer李思琪cancel的orders,被其他buyer creates的数量","g.withSideEffect('p', [578, 157]).V().hasLabel('buyer').where(and(__.has('id', within('p')), __.has('name', '李思琪'))).outE('buyer_cancel_orders').inV().hasLabel('orders').inE('buyer_creates_orders').outV().hasLabel('buyer').count()"
"输入表的列为id,value,name, 数据为(52,343,'蚂蚁集团'),(54,974,'华为'), 以属性name作为相等条件,给出id为169的点的人数,名字,id","g.inject([['id':52, 'value':343, 'name':'蚂蚁集团'], ['id':54, 'value':974, 'name':'华为']]).as('p').V().has('name', within(select('p').unfold().values('name'))).has('id', '169').project('peopleNumber', 'name', 'id').by(values('peopleNumber')).by(values('name')).by(values('id'))"
给出全部和person李科之间有pay关系的person,"g.V().hasLabel('person').has('name', '李科').outE('pay').inV().hasLabel('person')"
"查询名为郑雪的person,以及与其有关的person,并返回郑雪的薪资和这些person的名字","g.V().has('person', 'name', '郑雪').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('salary').by('name')"
查询forum的3跳的环,"g.V().hasLabel('forum').as('a').repeat(both().simplePath()).times(3).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').values('id')).by(select('b').values('id'))"
id减47的值,g.V().has('id').project('result').by(values('id').math('_ - 47'))
"用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找与名为张建国和何宏的点共同喜欢的,类型为帖子的节点","g.V().has('name', '张建国').outE('user_likes_post').inV().hasLabel('post').as('b').inE('user_likes_post').outV().has('name', '何宏').select('b')"
"查询源点标签等于person,边标签等于喜欢,且满足条件源点id大于等于82或f1不等于true或f0不是866的边","g.V().hasLabel('person').as('a').outE('likes').as('e').where(or(__.select('e').has('srcId', gte(82)), __.select('e').has('f1', neq(true)), __.select('e').has('f0', neq(866)))).select('e')"
 找出与郑思琪和马若涵有关联的55个人。,"g.V().has('name', '郑思琪').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '马若涵').select('b').limit(55)"
 请帮我找出孙雪喜欢过的书和Alice发布过的书，然后把它们都发给我。,"g.V().has('reader', 'name', '孙雪').as('a').out('likes').as('b').select('a').V().has('publisher', 'name', 'Alice').as('c').out('publish').as('d').select('a', 'b', 'c', 'd')"
请提供与ID为64的处方相关的部门合作伙伴，以及与该部门相关联的所有人员。,"g.V().has('prescription', 'id', '64').as('a').bothE().otherV().hasLabel('department').as('b').bothE('partner').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));返回全部源点标签为城市,目标点标签为国家,标签为city_belong_country的边",g.E().hasLabel('city_belong_country').where(outV().hasLabel('city')).where(inV().hasLabel('country'))
"返回所有源点名字不等于深圳,目标点名字不等于谷歌,且标签等于包含的边","g.V().has('name', neq('深圳')).outE('contain').as('e').inV().has('name', neq('谷歌')).select('e')"
"输入请求点id的列表785, 以属性id作为相等条件,找出179个gender等于famale或gender不是famale或age减94对165取余是181的buyer,根据gender升序排列","g.inject(785).as('p').V().hasLabel('buyer').has('id', __.as('p')).or(has('gender', 'famale'), has('gender', neq('famale')), math('age - 94 % 165').is(181)).order().by('gender', asc).limit(179)"
"返回所有id为53的大学关联的大学,和以包含关系关联了这些大学的其他城市","g.V().has('university', 'id', 53).as('a').bothE().as('e').otherV().hasLabel('university').as('b').inE('contain').as('e2').outV().hasLabel('city').as('c').select('b', 'c')"
"请帮我找出名为韩梅的person,以及与其有关的person,并返回韩梅的年龄和这些person的身高","g.V().hasLabel('person').has('name', '韩梅').as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a', 'b').by('age').by('height')"
请帮我找出满足条件名字等于知乎的节点,"g.V().has('name', '知乎')"
"找出全部Order_280的点contain的goods,然后找出Order_280被cancel的buyer,一起返回","g.V().has('name', 'Order_280').as('a').outE('contain').inV().hasLabel('goods').as('b').select('a').inE('cancel').outV().hasLabel('buyer').as('c').select('a', 'b', 'c')"
查找前179个类型是包含的边,g.E().hasLabel('contain').limit(179)
"返回和作家有关联的书节点,并根据其价格,id分组,返回价格,id,以及id除60的值","g.V().hasLabel('author').as('a').outE('write').as('e').inV().hasLabel('book').as('b').group().by(select('b').values('price', 'id').fold()).by(select('b').project('price', 'id', 'id_div_60').by(values('price')).by(values('id')).by(math('id / 60')).fold())"
帮我查询person郑思琪喜欢的评论节点属于的电影,"g.V().hasLabel('person').has('name', '郑思琪').out('likes').hasLabel('comment').out('belong').hasLabel('film')"
"查询名为李轩的person,以及与其有关的person,并返回李轩的薪资和这些person的年龄","g.V().has('person', 'name', '李轩').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('salary').by('age')"
"以385作为请求点id, 以属性id作为相等条件,给出前62个类型为person_knows_person的边","g.V().has('id', 385).outE('person_knows_person').limit(62)"
"找出标签等于认识,并且f1为false的边","g.E().hasLabel('knows').has('f1', false)"
给出person的2跳的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(2).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').values('id')).by(select('b').values('id'))"
请帮我找出所有与XXD有转账关系的账号，并返回他们之间的转账价值。,"g.V().has('name', 'XXD').outE('transfer').inV().hasLabel('account').outE('transfer').inV().hasLabel('account').values('value')"
帮我查询所有和贷款loan_17有3跳关系的账号,"g.V().has('loan', 'name', 'loan_17').repeat(out().simplePath()).times(3).hasLabel('account')"
 返回所有与给定人物相关的其他人，以及这些人与给定人物之间的认识关系。,"g.V().has('person', 'id', '30').bothE().otherV().hasLabel('person').as('b').inE('knows').otherV().hasLabel('person').as('c').select('b', 'c')"
 查询4号id到9号id(包含4和9)之间的作者写的书的名称，以及这些书相关联的书的名称。,"g.V().hasLabel('author').has('id', between(4, 9)).out('write').as('b').out('relates').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
返回全部和公司美团之间有申请关系的贷款,"g.V().hasLabel('company').has('name', '美团').outE('apply').inV().hasLabel('loan')"
找到名为Prescription_246的处方,"g.V().hasLabel('prescription').has('name', 'Prescription_246')"
帮我查询全部名为徐雪的节点喜欢的person,"g.V().has('name', '徐雪').outE('likes').inV().hasLabel('person')"
"查找3个和类型是person的点有申请关系的贷款,并且和这些贷款有存款关系的账号",g.V().hasLabel('person').as('a').outE('apply').as('e').inV().hasLabel('loan').as('b').outE('deposit').as('e2').inV().hasLabel('account').as('c').select('c').limit(3)
"使用这个图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));给出名为电子科技大学的大学,以及与其有关的城市,并返回电子科技大学的名字和这些城市的人数","g.V().has('university', 'name', '电子科技大学').as('a').both().hasLabel('city').as('b').select('a', 'b').by('name').by('peopleNumber')"
"以876作为请求点id, 源点的id等于输入表id,请帮我找出源点name等于郑轩或gender等于7633,且height不为空,边类型为user_publish_post,且满足条件f1等于true的边,返回这些边的srcId加srcId的最大值","g.withSideEffect('p', [[876]]).V().has('id', within(select('p').unfold())).filter(and(has('name', '郑轩').or().has('gender', 7633), has('height', neq(null)))).outE('user_publish_post').has('f1', true).project('sum').by(values('srcId', 'srcId').sum()).select('sum').max()"
"查询名为马宏和徐宏的,label为person的点公共的伙伴节点的名单","g.V().hasLabel('person').has('name', '马宏').outE('partner').inV().as('b').inE('partner').outV().hasLabel('person').has('name', '徐宏').select('b').values('name')"
"输入请求点id的列表334,337, 以属性id作为相等条件,查询所有与company Bilibili有关系的person的gender","g.inject([334, 337]).unfold().as('p').V().hasLabel('company').has('id', __.select('p')).has('name', 'Bilibili').bothE().otherV().hasLabel('person').values('gender')"
帮我查询全部与部门放射科有关系的医生的id,"g.V().has('department', 'name', '放射科').bothE().otherV().hasLabel('doctor').values('id')"
"返回person徐伟关联的person,被其他person认识的数量","g.V().hasLabel('person').has('name', '徐伟').outE('relates').inV().hasLabel('person').inE('knows').outV().hasLabel('person').count()"
 请帮我找出开具处方Prescription_226的医生，以及返回该处方中包含的其他药品。,"g.V().hasLabel('prescription').has('name', 'Prescription_226').as('a').bothE().otherV().hasLabel('doctor').as('b').select('a').outE('contain').inV().hasLabel('medicine').as('c').select('a', 'b', 'c')"
"查询事项ISSUE-333的朋友,的f0减914的值","g.V().has('issue', 'name', 'ISSUE-333').outE('friend').as('e').inV().select('e').values('f0').math('_ - 914')"
"返回买家李思琪查看的商品,以及拥有这些商品的卖家, 令买家的id等于买家的名字的平均值,令卖家的名字等于买家的薪资的个数, 返回买家的id,商品的价值,卖家的名字","g.V().has('buyer', 'name', '李思琪').as('a').out('look').as('b').in('has').hasLabel('seller').as('c').select('a', 'b', 'c').by(project('id', 'name').by(__.values('name').mean()).by(__.values('name'))).by(values('value')).by(project('name').by(__.select('a').values('salary').count()))"
"帮我查询全部名为韩雪的,薪资小于等于9576的朋友,返回这些朋友的id,和边的f1","g.V().has('name', '韩雪').outE('friend').as('e').inV().has('salary', lte(9576)).project('b.id', 'e.f1').by(id()).by(select('e').values('f1'))"
"调用triangleCount函数,以'KJ'作为输入,返回运算结果","g.call('triangleCount').with('input', 'KJ').select('number')"
"返回名为李宏和张梅的,类型是person的点公共的friend节点的名单","g.V().has('person', 'name', '李宏').out('friend').as('b').in('friend').has('person', 'name', '张梅').select('b').values('name')"
"以93作为输入调用personalRank函数,返回运算结果","g.call('PERSONALRANK').with('input', 93).select('id', 'value')"
"请帮我找出名为中国科技大学的点拥有的所有部门,并对这些部门的名字进行求和","g.V().has('name', '中国科技大学').out('has').hasLabel('department').values('name').sum()"
 返回一个人同事的同事，或同事同事的同事。,g.V().hasLabel('person').as('a').outE('colleague').inV().hasLabel('person').as('b').select('b')
"请帮我查找和标签等于作家的点有认识关系的作家,以及和这些作家有认识关系的作家,以及和这些作家有认识关系的作家",g.V().hasLabel('author').as('a').out('knows').hasLabel('author').as('b').out('knows').hasLabel('author').as('c').out('knows').hasLabel('author').as('d').select('d')
"以'tD', 'wv'作为输入调用triangleCount函数,返回运算结果","g.call('triangleCount').with('graphName', 'tD').with('weightProperty', 'wv').select('number')"
"请帮我找出所有和person点有认识关系的person节点,且边满足条件f1等于true,目标person节点id大于等于29","g.V().hasLabel('person').as('a').outE('knows').has('f1', true).as('e').inV().hasLabel('person').has('id', gte(29)).as('b').select('b')"
"找出27个id等于77且id在61到86之间且名字不等于百度贴吧的论坛,根据人数从小到大排列","g.V().hasLabel('forum').has('id', 77).has('id', between(61, 86)).has('name', neq('百度贴吧')).order().by('peopleNumber', asc).limit(27)"
查找全部与person张科有关系的person的id,"g.V().has('person', 'name', '张科').bothE().otherV().hasLabel('person').id()"
给出和person黄雪之间有friend关系的person,"g.V().has('person', 'name', '黄雪').out('friend').hasLabel('person')"
id对id取余的值,g.V().project('result').by(values('id').math('_ / _').by(constant(1)))
 查询Post_314的关系对象的关系对象。,"g.V().hasLabel('post').has('name', 'Post_314').outE('relation').inV().outE('relation').inV().outE('partner').inV()"
"输入表的列为category,name,weight, 数据为('皮肤药','布洛芬',910),('发烧药','枇杷糖浆',655),('感冒药','医疗酒精',233), 以属性name作为相等条件,请帮我查找医生韩若涵诊断的病人,被其他医生诊断的数量","g.V().hasLabel('doctor').has('name', '韩若涵').outE('doctor_diagnose_patient').inV().hasLabel('patient').inE('doctor_diagnose_patient').outV().hasLabel('doctor').dedup().count()"
"查找与大学华中科技大学有关,且与学生张月有关系的部门节点","g.V().has('university', 'name', '华中科技大学').out('has').hasLabel('department').where(__.in('has').has('student', 'name', '张月')).dedup()"
"找出类型为发布,以及目标点id不是55的边","g.E().hasLabel('publish').has('targetId', neq(55))"
"帮我查询与名为吴思思和陈梅的点共同属于的,类型是部门的节点","g.V().has('name', '吴思思').outE('belong').inV().hasLabel('department').as('b').inE('belong').outV().has('name', '陈梅').select('b')"
"以759作为请求点id, 以属性id作为相等条件,给出被买家孙思思查看的商品","g.withSideEffect('p', [759]).V().hasLabel('goods').has('id', __.select('p')).as('a').in('buyer_look_goods').hasLabel('buyer').has('name', '孙思思').as('b').select('a', 'b')"
"查询与医生何思思有关,且与医生孙雪有关系的部门节点","g.V().hasLabel('doctor').has('name', '何思思').as('a').outE('belong').inV().hasLabel('department').as('b').inE('has').outV().hasLabel('doctor').has('name', '孙雪').select('b')"
查找所有和买家徐建国有3度关系的卖家,"g.V().has('buyer', 'name', '徐建国').repeat(out().simplePath()).times(3).hasLabel('seller').dedup()"
获取id为85的人的伴侣，以及与该人相关的朋友。,"g.V().has('person', 'id', '85').as('a').bothE().otherV().hasLabel('person').as('b').where(__.outE('partner').otherV().hasLabel('person').as('c')).where(__.outE('friend').otherV().as('d')).select('a', 'b', 'c', 'd')"
"返回label为apply,以及满足条件f1等于false,targetId为184,srcId小于183的边","g.E().hasLabel('apply').has('f1', false).has('targetId', 184).has('srcId', lt(183))"
"用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出名为Comment_447的comment,以及与其有关的film,并返回Comment_447的wordCount和这些film的id","g.V().has('comment', 'name', 'Comment_447').as('a').bothE().otherV().hasLabel('film').as('b').select('a', 'b').by('wordCount').by('id')"
"输入请求点id的列表513,943, 源点的id等于输入表id,请帮我查找与国家美国存在country_contain_city关系,且与国家韩国存在city_belong_country关系的城市节点，返回这些城市的面积,id,及国家美国的名字,及国家韩国的价值","g.withSideEffect('p', [513, 943]).V().hasLabel('country').where(__.values('id').is(within('p'))).has('name', '美国').outE('country_contain_city').inV().hasLabel('city').as('b').inE('city_belong_country').outV().hasLabel('country').has('name', '韩国').as('c').select('b').project('a_name', 'b_area', 'b_id', 'c_value').by(__.select('b').by(__.inE('country_contain_city').outV().hasLabel('country').has('name', '美国').values('name'))).by(__.values('area')).by(__.values('id')).by(__.select('c').values('value'))"
 找出经济学院关系的朋友关系,"g.V().has('department', 'name', '经管学院').outE('relation').inV().outE('friend').inV().outE('relation').inV()"
请找出与买家陈国强已取消的订单，以及与买家吴月有关联的商品，并将它们全部返回。,"g.V().hasLabel('buyer').has('name', '陈国强').as('a').outE('cancel').inV().hasLabel('orders').as('b').select('a').V().hasLabel('buyer').has('name', '吴月').as('c').outE('look').inV().hasLabel('goods').as('d').select('a', 'b', 'c', 'd')"
查询与名为赵月和韩轩的点有关系的、标签为person的节点,"g.V().has('name', '赵月').outE('relates').inV().hasLabel('person').as('b').inE('relates').outV().has('name', '韩轩').select('b')"
查询所有与名为'内科'的部门有关联关系，或者与这些关联关系有关联关系的医生。,"g.V().has('department', 'name', '内科').bothE('relation').bothV().hasLabel('doctor').dedup()"
"用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出label为person的点,返回102个",g.V().hasLabel('person').limit(102)
"输入表的列为height,salary,age, 数据为(192,2080,76),(156,5184,56),(192,1659,9),(152,9744,96), 以属性height作为相等条件,请帮我查找person的三角的环,边类型是person_knows_person, 并返回这些点的id","g.withSideEffect('p', [[192,2080,76],[156,5184,56],[192,1659,9],[152,9744,96]]).V().hasLabel('person').as('a').where(__.select('a').values('height').is(within(__.select('p').unfold().project('height').by(__.limit(1)).dedup()))).bothE('person_knows_person').otherV().as('b').bothE('person_knows_person').otherV().as('c').where(__.select('c').bothE('person_knows_person').otherV().where(eq('a'))).select('a', 'b', 'c').by('id').by('id').by('id')"
"查找与person马雪有关,且与tag其他有关系的film节点","g.V().hasLabel('person').has('name', '马雪').outE('watch').inV().hasLabel('film').as('b').inE('has').outV().hasLabel('tag').has('name', '其他').select('b')"
"给出contain forum知网contain的post,的forum","g.V().hasLabel('forum').has('name', '知网').outE('contain').inV().hasLabel('post').as('b').inE('contain').outV().hasLabel('forum').as('c').select('b', 'c')"
"帮我查询创造评论Comment_344的person,和这些person观看的电影","g.V().has('comment', 'name', 'Comment_344').in('creates').as('b').out('watch').as('c').select('b', 'c')"
"给出37个名为李红的点喜欢的类型为person的节点,且其身高为空或年龄小于等于72","g.V().has('name', '李红').outE('likes').inV().hasLabel('person').or(hasNot('height'), has('age', lte(72))).limit(37)"
"以(26,8571,'famale'),(88,5055,'male'),(85,2864,'male')作为请求表数据,属性分别为id,salary,gender, 以属性gender作为相等条件,帮我查询和订单点有包含关系的商品节点,且边满足条件f0小于等于972,目标商品节点满足条件id不为空","g.inject([['id':26,'salary':8571,'gender':'famale'],['id':88,'salary':5055,'gender':'male'],['id':85,'salary':2864,'gender':'male']]).as('p').unfold().as('p_row').select('p_row').by(values('gender')).as('gender_val').V().hasLabel('orders').as('a').where(__.as('a').values('gender').as('a_gender').select('gender_val').where(eq('a_gender'))).outE('orders_contain_goods').has('f0', lte(972)).as('e').inV().hasLabel('goods').has('id', neq(null)).as('b').select('b')"
请帮我找出与买家王月有关联的咨询记录，以及与此记录相关的卖家。,"g.V().hasLabel('buyer').has('name', '王月').as('a').outE('consult').inV().hasLabel('seller').as('b').select('a').inE('consult').outV().hasLabel('seller').as('c').select('a', 'b', 'c')"
"返回雇佣person王宏的公司,和这些公司雇佣的person","g.V().has('person', 'name', '王宏').as('a').in('employee').hasLabel('company').as('b').out('employee').as('c').select('b', 'c')"
 找出某人同事的家人或亲戚。,"g.V().has('person', 'name', '何月').outE('colleague').inV().outE('family').inV().outE('family').inV()"
"帮我查询book呐喊knows的book,以及likes这些book的reader, 令book的category等于book的name,令reader的createTime等于book的id的最大值乘7加id, 返回book(a)的createTime,book(b)的category,reader(c)的id","g.V().hasLabel('book').has('name', '呐喊').as('a').outE('knows').inV().hasLabel('book').as('b').inE('likes').outV().hasLabel('reader').as('c').select('a', 'b', 'c').by(project('createTime', 'category').by('createTime').by(values('name'))).by(project('category').by('category')).by(project('id').by('id')).select(values).unfold().project('a.createTime', 'b.category', 'c.id').by(select('a').select('createTime')).by(select('b').select('category')).by(select('c').select('id'))"
"以850,178,545,998,604作为请求点id, 以属性id作为相等条件,查询被person孙强buy的software","g.withSideEffect('p', [850, 178, 545, 998, 604]).V().hasLabel('software').where(__.values('id').is(within('p'))).as('a').in('person_buy_software').hasLabel('person').has('name', '孙强').as('b').select('a', 'b')"
请帮我查找与id为78的处方相关的用户朋友，以及与该用户相关的合作伙伴。,"g.V().has('prescription', 'id', '78').as('a').bothE().otherV().hasLabel('user').as('b').outE('friend').inV().as('c').select('b').outE('partner').inV().as('d').select('a', 'b', 'c', 'd')"
查找重庆大学拥有的部门,"g.V().hasLabel('university').has('name', '重庆大学').as('b').outE('has').as('e').inV().hasLabel('department').as('a').select('a', 'b')"
"调用personalRank函数,以43, 51作为输入,返回运算结果","g.call('PERSONALRANK').with('arg1', 43).with('arg2', 51).project('id', 'value').by(__.select('id')).by(__.select('value'))"
"请帮我找出名为郑梅和郑强的,类型为用户的点公共的朋友节点的名单","g.V().has('user', 'name', '郑梅').outE('friend').inV().as('b').inE('friend').outV().has('user', 'name', '郑强').select('b').values('name')"
"查找和标签为医生的点有属于关系的部门,以及和这些部门有拥有关系的医生,以及和这些医生有创造关系的处方",g.V().hasLabel('doctor').as('a').out('belong').hasLabel('department').as('b').in('has').hasLabel('doctor').as('c').out('creates').hasLabel('prescription').as('d').select('d')
"使用列为salary,id,gender, 数据为(8856,37,'famale'),(1498,92,'famale')的子查询作为输入表, 源点的gender等于输入表gender,查找id为85的点的name,address,size","g.inject([['salary':8856,'id':37,'gender':'famale'],['salary':1498,'id':92,'gender':'famale']]).as('p').unfold().as('p_row').select('p_row').by(__.values('gender')).as('p_gender').V().has('gender', __.where(eq('p_gender'))).has('id', '85').project('name', 'address', 'size').by(__.values('name')).by(__.values('address')).by(__.values('size'))"
"给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));返回被person吴建聪创造的评论","g.V().hasLabel('person').has('name', '吴建聪').outE('person_creates_comment').inV().hasLabel('comment').as('a').select('a').by().as('b').select('a', 'b')"
"请帮我找出类型是company的点,返回31个",g.V().hasLabel('company').limit(31)
"查找仓库FSM 拥有的事项,返回事项 属于的仓库的星数减43的值","g.V().hasLabel('repository').has('name', 'FSM').out('has').as('b').in('belong').hasLabel('repository').as('c').select('c').by(values('stars').is(neq(null))).math('_ - 43')"
返回与病人马强和黄强都存在接受关系的点,"g.V().has('patient', 'name', '马强').outE('accept').inV().as('b').inE('accept').outV().has('patient', 'name', '黄强').select('b')"
请帮我找出与person节点相关的person节点，并按身高和年龄进行分组，然后返回身高和年龄。,"g.V().hasLabel('person').as('a').bothE('knows').otherV().hasLabel('person').as('b').select('b').group().by(values('height', 'age').fold()).by(count())"
"查找全部医生以年龄分组的年龄, 根据年龄从小到大排序",g.V().hasLabel('doctor').group().by('age').select(values).unfold().order().by(asc)
"给出属于公司蚂蚁集团的person,和这些person认识的person","g.V().hasLabel('company').has('name', '蚂蚁集团').inE('belong').outV().as('b').outE('knows').inV().as('c').select('b', 'c')"
"以280,813,911,481,33作为请求点id, 以属性id作为相等条件,查询年龄不是42的person拥有的账号的名称,以及这些账号 转账的账号的名称","g.inject([280, 813, 911, 481, 33]).as('p').V().hasLabel('person').as('a').where('a', eq('p')).by('id').by().has('age', neq(42)).outE('person_own_account').as('e').inV().hasLabel('account').as('b').outE('account_transfer_account').as('e2').inV().hasLabel('account').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
查找所有和person徐红之间有支付关系的person,"g.V().hasLabel('person').has('name', '徐红').outE('pay').inV().hasLabel('person').dedup()"
"返回129个性别等于male或性别不等于male的person,根据薪资升序排列","g.V().hasLabel('person').order().by('salary', asc).limit(129)"
"查找源点area小于等于46668,value大于8293,或area大于62143,目标点name等于华中科技大学且id为954,且类型为contain的边","g.E().hasLabel('contain').where(or(and(outV().has('area', lte(46668)).has('value', gt(8293)), outV().has('area', gt(62143)))).and(inV().has('name', '华中科技大学').has('id', 954)))"
 找出韩红和周思琪的，类型为患者（patient)的共同关系节点。,"g.V().has('patient', 'name', '韩红').outE('relation').inV().as('b').inE('relation').outV().has('patient', 'name', '周思琪').select('b').values('name')"
"查找名为黄科的学生,以及与其有关的教师,并返回黄科的id和这些教师的年龄","g.V().hasLabel('student').has('name', '黄科').as('a').bothE().as('e').otherV().hasLabel('teacher').as('b').select('a', 'b').by('id').by('age')"
"输入表的列为name,id,value, 数据为('西虹市首富',55,155), 以属性id作为相等条件,查找和cinema有关联的film节点,并根据其id,value分组,返回id,value,以及value除230的值","g.withSideEffect('p', [['name': '西虹市首富', 'id': 55, 'value': 155]]).V().hasLabel('cinema').has('id', __.select('p').unfold().select('id')).outE('cinema_releases_film').inV().hasLabel('film').project('id', 'value', 'value_div_230').by(__.select('b').id()).by(__.select('b').values('value')).by(__.select('b').values('value').math('_ / 230')).group().by(__.select('id', 'value').fold()).by(__.select('value_div_230').fold())"
帮我查询所有名为杜雪的节点咨询的卖家或买家或商品,"g.V().has('name', '杜雪').outE('consult').inV().hasLabel(within('seller', 'buyer', 'goods')).dedup()"
 给出医生的伴侣，或伴侣的伴侣。,g.V().hasLabel('doctor').outE('partner').inV().outE('partner').inV().dedup()
"帮我查询person的三角的环,边类型为friend, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('friend').inV().as('b').outE('friend').inV().as('c').where(__.inE('friend').outV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
 UME和横店影院是名为cinema的共同合作伙伴节点。,"g.V().has('cinema', 'name', 'UME').outE('partner').inV().as('b').inE('partner').outV().has('cinema', 'name', '横店影院').select('b').values('name')"
请帮我找出Post_305的partner的partner的关系,"g.V().has('post', 'name', 'Post_305').out('partner').out('partner').out('relation').dedup()"
"给出年龄在35到88之间且名字等于张伟的person喜欢的person的名称,以及这些person 支付的person的名称","g.V().hasLabel('person').has('age', between(35, 88)).has('name', '张伟').out('likes').hasLabel('person').as('b').out('pay').hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"找出110个名为XiaoHu的点transfer的类型为account的节点,且其createTime是2020年07月26日或value为274","g.V().has('name', 'XiaoHu').outE('transfer').inV().hasLabel('account').has('createTime', '2020-07-26').or(has('value', 274)).limit(110)"
帮我查询145个与艺术学院和体育学院都存在关系的student或teacher节点,"g.V().has('name', '艺术学院').outE().inV().hasLabel(within('student', 'teacher')).as('b').inE().outV().has('name', '体育学院').select('b').limit(145)"
"请帮我找出部门拥有的医生,返回其源点的id对27取余的最大值,以及目标点的年龄减26加id的值","g.V().hasLabel('department').as('a').outE('has').as('e').inV().hasLabel('doctor').as('b').project('max_a_id_mod_27', 'b_age_minus_26_plus_id').by(__.select('a').values('id').math('_ % 27').max()).by(__.select('b').math('_.age - 26 + _.id'))"
查询全部和部门文学院之间有拥有关系的学生,"g.V().has('department', 'name', '文学院').out('has').hasLabel('student')"
请帮我查找所有和person黄月之间有认识关系的person,"g.V().has('person', 'name', '黄月').out('knows').hasLabel('person')"
帮我查询全部名为徐国强的点publish的book,"g.V().has('name', '徐国强').outE('publish').inV().hasLabel('book')"
"以384,180,313,510作为请求点id, 源点的id等于输入表id,帮我查询117个value在202到627之间的account,根据createTime从小到大排列","g.inject([384, 180, 313, 510]).unfold().as('p').V().hasLabel('account').has('id', __.where(eq('p'))).has('value', between(202, 627)).order().by('createTime', asc).limit(117)"
" 给出所有与李国强存在同事关系的 people,找出这些人中男性和女性同事的分布情况。","g.V().has('name', '李国强').outE('colleague').inV().hasLabel('person').outE('colleague').inV().hasLabel('person').values('gender')"
 所有起点和终点都是人，且标签为'知道'的边。,g.V().hasLabel('person').outE('knows').where(inV().hasLabel('person'))
"请帮我查找和软件SprintBoot有关的软件,再请帮我查找和SprintBoot使用的其他软件,返回它们","g.V().has('software', 'name', 'SprintBoot').as('a').bothE().otherV().hasLabel('software').as('b').select('a').outE('uses').inV().hasLabel('software').as('c').select('a', 'b', 'c')"
"给出标签等于pullRequest,名为PR-192的点,返回这些点的createTime","g.V().hasLabel('pullRequest').has('name', 'PR-192').values('createTime')"
请帮我查找被comment Comment_456 belong的film,"g.V().hasLabel('comment').has('name', 'Comment_456').outE('belong').inV().hasLabel('film').as('b').select('b').by().as('a').select('a', 'b')"
"给出和person陈轩有支付关系的person,再给出以喜欢关系关联了陈轩的person","g.V().has('person', 'name', '陈轩').as('a').outE('pay').inV().as('b').select('a').inE('likes').outV().as('c').select('a', 'b', 'c')"
查询以关联关系关联了person黄国强的person,"g.V().hasLabel('person').has('name', '黄国强').inE('relates').outV()"
"以(7439,'famale','王思琪')作为请求表数据,属性分别为salary,gender,name, 源点的gender等于输入表gender,帮我查询和person有关联的comment节点,并根据其wordCount,id分组,返回wordCount,id,以及wordCount除949的最大值","g.withSideEffect('p', [['salary': 7439, 'gender': 'famale', 'name': '王思琪']]).V().hasLabel('person').has('gender', __.select('p').unfold().select('gender')).bothE('person_likes_comment').otherV().hasLabel('comment').group().by(union(__.values('wordCount'), __.values('id')).fold()).by(__.values('wordCount').math('_ / 949').max())"
请帮我找到徐建国和Amily共同发布的label为post的节点,"g.V().has('name', '徐建国').outE('publish').inV().hasLabel('post').as('b').inE('publish').outV().has('name', 'Amily').select('b')"
"请帮我找出label为存款,以及满足条件源点id不为空或时间戳等于2009年05月14日,且f1不是true的边","g.E().hasLabel('deposit').and(has('srcId', neq(null)).or().has('timeStamp', '2009-05-14')).has('f1', neq(true))"
"查找全部person以薪资分组的身高, 根据身高从小到大排序","g.V().hasLabel('person').group().by('salary').by(values('height').fold()).order(local).by(values, asc)"
 找出包含帖子Post_125的论坛。,"g.V().hasLabel('post').has('name', 'Post_125').inE('contain').outV().hasLabel('forum')"
"查找127个名为kate的点教的标签等于课程的节点,且其价值大于等于223或课时是49","g.V().has('name', 'kate').outE('teach').inV().hasLabel('course').or(has('value', gte(223)), has('courseHour', 49)).limit(127)"
"以763,625作为请求点id, 源点的id等于输入表id,请帮我查找名为中国诗词论坛的点contain的person","g.withSideEffect('p', [763, 625]).V().where(and(__.id().is(within('p')), __.values('name').is('中国诗词论坛'))).outE('forum_contain_person').inV().hasLabel('person')"
找出前158个类型是拥有的边,g.E().hasLabel('has').limit(158)
请帮我查找以使用关系关联了软件Hive的软件,"g.V().hasLabel('software').has('name', 'Hive').inE('uses').outV().hasLabel('software')"
"查找所有和名为黄思琪的读者有伙伴关系,或有伙伴的伙伴关系的书","g.V().hasLabel('reader').has('name', '黄思琪').repeat(out('partner')).times(2).hasLabel('book').dedup()"
"请帮我查找person何雪关联的person,被其他person认识的数量","g.V().hasLabel('person').has('name', '何雪').outE('relates').inV().hasLabel('person').inE('knows').outV().hasLabel('person').count()"
"请帮我找出城市天津的所有类型为朋友的边,并根据源点id从小到大排列,返回80个","g.V().has('city', 'name', '天津').outE('friend').order().by('srcId', asc).limit(80).inV()"
 请帮我查询一下，哪些国家的城市包含有大学，以及这些城市分别是哪几个。,"g.V().hasLabel('country').has('id', neq(null)).out('contain').hasLabel('city').as('b').out('contain').hasLabel('university').as('c').select('b', 'c').by('name').by('name')"
查询与person何建聪和王思思都存在认识关系的点,"g.V().has('person', 'name', '何建聪').out('knows').as('b').in('knows').has('person', 'name', '王思思').select('b')"
 查找与两个人都有关系的69个book节点。,"g.V().has('name', '王思思').outE().inV().hasLabel('book').as('b').inE().outV().has('name', '吴建聪').select('b').limit(69)"
"用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询标签为book,名为白夜行的点,返回这些点的name,name","g.V().hasLabel('book').has('name', '白夜行').project('a.name', 'a.name').by('name').by('name')"
"请帮我查找和person点有knows关系的person节点,且边满足条件weight在128.06到178.28之间,目标person节点id小于44","g.V().hasLabel('person').as('a').outE('knows').has('weight', between(128.06, 178.28)).as('e').inV().hasLabel('person').has('id', lt(44)).as('b').select('b')"
 找出南京大学和浙江大学的朋友，共有188个。,"g.V().has('university', 'name', '南京大学').out('friend').as('b').in('friend').has('university', 'name', '浙江大学').select('b').limit(188)"
"用如下schema的图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询名为周宏和孙轩的,标签等于buyer的点公共的partner节点的名单","g.V().has('buyer', 'name', '周宏').out('partner').as('b').in('partner').has('buyer', 'name', '孙轩').select('b').values('name')"
"以204,943,701,217,781作为请求点id, 源点的id等于输入表id,请帮我查找65个名为孙思琪的点诊断的类型为病人的节点,且其id为空且id大于等于5","g.inject([204, 943, 701, 217, 781]).as('p').unfold().as('id').V().has('id', __.as('id')).has('name', '孙思琪').outE('doctor_diagnose_patient').inV().hasLabel('patient').has('id', null).has('id', P.gte(5)).limit(65)"
"帮我查询119个国家美国和日本,共同的伙伴","g.V().has('country', 'name', '美国').outE('partner').inV().as('b').inE('partner').outV().has('country', 'name', '日本').select('b').limit(119)"
"请帮我找出id为49的city belong的country, 并将country有关的company的peopleNumber的求和值赋值给country的peopleNumber, 接着查询country的peopleNumber小于49的country contain的city","g.V().has('city', 'id', 49).out('belong').hasLabel('country').as('b').sideEffect(select('b').sack(assign).by(constant(0)).sack(sum).by(__.in().hasLabel('company').values('peopleNumber').sum()).property('peopleNumber', sack())).filter(select('b').values('peopleNumber').is(lt(49))).out('contain').hasLabel('city').as('d').select('b', 'd').by('peopleNumber').by()"
请帮我查询所有源点为person且边类型为knows的边，返回这些边的srcId加上64以及f0减去865的结果。,"g.V().hasLabel('person').outE('knows').project('srcId_plus_64', 'f0_minus_865').by(values('srcId').math('_ + 64')).by(values('f0').math('_ - 865'))"
"帮我查询所有源点类型为部门,边类型为拥有的边,返回这些边的weight的最小值对143.06取余的值,和targetId的数量除12的平均值","g.V().hasLabel('department').outE('has').project('min_weight_mod', 'avg_count_div_12').by(values('weight').min().math('_ % 143.06')).by(outV().outE('has').values('targetId').count().math('_ / 12').mean())"
 请帮我查询星际穿越的标签，并查询星际穿越在哪些电影院上映，然后把结果一起告诉我。,"g.V().has('name', '星际穿越').as('a').outE('has').inV().hasLabel('tag').as('b').select('a').inE('releases').outV().hasLabel('cinema').as('c').select('a', 'b', 'c')"
"以(58,'古代',117),(94,'科幻',889)作为请求表数据,属性分别为id,name,value, 源点的id等于输入表id,查询id为59的标签有关的person的伙伴, 再查询和person有关系的朋友","g.inject([['id':58,'name':'古代','value':117],['id':94,'name':'科幻','value':889]]).as('p').unfold().as('p_row').select('p_row').by(__.project('id','name','value').by(__.select('id')).by(__.select('name')).by(__.select('value'))).V().hasLabel('tag').has('id', __.where(__.select('p_row').select('id')).where(__.has('id', '59'))).as('a').bothE().as('e').otherV().hasLabel('person').as('b').outE('partner').as('e2').inV().as('c').select('b').outE('friend').as('e3').inV().as('d').select('a','b','c','d')"
"返回id为166的点的身高,名字,年龄","g.V().has('id', 166).project('height', 'name', 'age').by(values('height')).by(values('name')).by(values('age'))"
"请帮我查找comment Comment_414 belong的film,以及releases这些film的cinema","g.V().hasLabel('comment').has('name', 'Comment_414').outE('belong').inV().hasLabel('film').as('b').inE('releases').outV().hasLabel('cinema').as('c').select('b', 'c')"
"以(94,'famale','吴红'),(82,'famale','徐若涵'),(51,'male','马若涵'),(91,'famale','陈思琪')作为请求表数据,属性分别为id,gender,name, 源点的id等于输入表id,返回用户张伟的全部标签为相关者的边,并根据f0从小到大排列,返回181个","g.withSideEffect('p', [['id':94, 'gender':'famale', 'name':'吴红'], ['id':82, 'gender':'famale', 'name':'徐若涵'], ['id':51, 'gender':'male', 'name':'马若涵'], ['id':91, 'gender':'famale', 'name':'陈思琪']]).V().hasLabel('user').where(__.in('p').has('id', __.select('p').unfold().select('id')).has('name', '张伟')).outE('relation').order().by('f0', asc).limit(181).inV()"
 找出买家郑宏取消的订单和买家黄雪查看的货物，返回它们。,"g.V().hasLabel('buyer').has('name', '郑宏').as('a').outE('cancel').inV().hasLabel('orders').as('b').select('a').V().hasLabel('buyer').has('name', '黄雪').as('c').outE('look').inV().hasLabel('goods').as('d').select('a', 'b', 'c', 'd')"
 找出认识孙思琪的人。,"g.V().hasLabel('person').has('name', '孙思琪').as('b').inE('knows').as('e').outV().as('a').select('a', 'b')"
 请问能否帮我查找与好视影院有关，且标签为文艺的电影？,"g.V().hasLabel('cinema').has('name', '好视影院').outE('releases').inV().hasLabel('film').as('b').outE('has').inV().hasLabel('tag').has('name', '文艺').select('b')"
"使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找68个与BIN和Geaflow123都存在关系的person节点","g.V().has('name', 'BIN').outE().inV().hasLabel('person').as('b').inE().outV().has('name', 'Geaflow123').select('b').limit(68)"
获取Comment_499belong的film节点的tag,"g.V().hasLabel('comment').has('name', 'Comment_499').out('belong').hasLabel('film').out('has').hasLabel('tag')"
 请帮我找出所有编辑的同事，或者同事的同事。,g.V().hasLabel('publisher').outE('partner').inV().hasLabel('publisher').path().by('id').by('id').limit(2).select('b')
请帮我找出薪资不为空且在1771到2034之间的医生所在的部门及其医生姓名,"g.V().hasLabel('doctor').has('salary', neq(null)).or(has('salary', between(1771, 2034))).as('a').outE('belong').as('e').inV().hasLabel('department').as('b').outE('has').as('e2').inV().hasLabel('doctor').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"根据地址,id分组,计算权重减501的值",g.V().hasLabel('a').group().by('address').by(group().by('id').by(values('weight').math('_ - 501')))
按年龄分组医生的薪水，然后按照薪水升序排序。,"g.V().hasLabel('doctor').group().by('age').by(values('salary').fold()).order(local).by(values, asc)"
"使用列为name,height,gender, 数据为('周月',153,'famale'),('何宏',181,'male'),('黄月',164,'famale')的子查询作为输入表, 以属性gender作为相等条件,请帮我查找以包含关系关联了药品阿莫新林的处方","g.inject([['周月',153,'famale'],['何宏',181,'male'],['黄月',164,'famale']]).as('p').V().hasLabel('medicine').has('name','阿莫新林').as('a').where(__.select('p').unfold().as('row').select('a').values('gender').where(eq('row')).by(tail(local))).in('prescription_contain_medicine').hasLabel('prescription').as('b').select('b')"
"以574,15,831作为请求点id, 以属性id作为相等条件,查找8个与其他和动作都存在关系的论坛节点","g.inject([574, 15, 831]).unfold().as('p').V().has('id', __.where(eq('p'))).has('name', '其他').as('a').outE().as('e').inV().hasLabel('forum').as('b').inE().as('e2').outV().has('name', '动作').as('c').select('b').limit(8)"
 查询与公司ID为139的账户有合作的伙伴，再查询与账户有关系的联系人。,"g.V().has('company', 'id', '139').as('a').bothE().otherV().hasLabel('account').as('b').bothE('partner').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
"请帮我找出类型为标签的点,返回121个",g.V().hasLabel('tag').limit(121)
返回75个与徐月和李思琪都存在关系的卖家或买家节点,"g.V().has('name', '徐月').as('a').outE().as('e').inV().hasLabel(within('seller', 'buyer')).as('b').inE().as('e2').outV().has('name', '李思琪').as('c').select('b').limit(75)"
"找出与作家吴梅有关,且与书悲惨世界有关系的书节点","g.V().has('author', 'name', '吴梅').out('write').as('b').in('refers').has('book', 'name', '悲惨世界').select('b')"
"查询和电影院横店影院有上映关系的电影,再查询以上映关系关联了横店影院的电影","g.V().has('cinema', 'name', '横店影院').as('a').outE('releases').inV().hasLabel('film').as('b').select('a').inE('releases').outV().hasLabel('film').as('c').select('a', 'b', 'c')"
"查找事项的三角的环,边label为属于, 并返回这些点的id","g.V().hasLabel('issue').as('a').out('belong').as('b').out('belong').as('c').where('a', eq('c')).by(T.id).select('a', 'b', 'c').by().by(T.id).by(T.id).project('a', 'b_id', 'c_id').by().by(select('b')).by(select('c'))"
"查询源点年龄小于56,边标签等于发布,且f0是589,targetId的最大值减52的最小值小于176.82,或权重为空的边,返回这些边的权重对权重取余的平均值","g.V().has('age', lt(56)).outE('publish').where(or(and(has('f0', 589), project('maxTargetId').by(values('targetId').max()).math('maxTargetId - 52').min().is(lt(176.82))), not(values('weight')))).values('weight').math('_ / _ * _ - _').mean()"
"请帮我查找与person周雪有关,且与person徐思思有关系的person节点","g.V().has('person', 'name', '周雪').as('a').bothE('lover').otherV().hasLabel('person').as('b').bothE('colleague').otherV().has('person', 'name', '徐思思').select('b')"
请帮我查找与公司美团和滴滴都存在雇佣关系的点,"g.V().has('company', 'name', '美团').outE('employee').inV().as('b').inE('employee').outV().has('company', 'name', '滴滴').select('b').dedup()"
"以'ya', 84, 3作为输入调用KHOP函数,返回id, kValue","g.call(""KHOP"").with(""arg0"", ""ya"").with(""arg1"", 84).with(""arg2"", 3).select(""id"", ""kValue"")"
"输入请求点id的列表754,879,814,679, 源点的id等于输入表id,请帮我查找以knows关系关联了author黄建国的author","g.inject([754, 879, 814, 679]).unfold().as('p').V().hasLabel('author').has('id', __.select('p')).has('name', '黄建国').in('author_knows_author').as('b').select('b')"
"查找名为郑强的教师,以及与其有关的教师,并返回郑强的身高和这些教师的性别","g.V().has('teacher', 'name', '郑强').as('a').bothE().otherV().hasLabel('teacher').as('b').select('a', 'b').by('height').by('gender')"
"返回用户马雪的所有伙伴,的f0的和乘f0的个数","g.V().has('user', 'name', '马雪').outE('partner').as('e').inV().select('e').values('f0').sum().sack(assign).by(constant(1L)).sum().sack(mult).by(sack()).sack()"
"找出被person马伟invest的company,和马伟apply的loan","g.V().hasLabel('person').has('name', '马伟').as('b').outE('invest').as('e').inV().hasLabel('company').as('a').select('b').outE('apply').as('e2').inV().hasLabel('loan').as('c').select('a', 'b', 'c')"
请帮我找出166个与马红和陈月都存在关系的person节点,"g.V().has('name', '马红').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '陈月').select('b').limit(166)"
"查询全部公司以id,名字分组的价值, 根据价值升序排序","g.V().hasLabel('company').group().by(project('id', 'name').by('id').by('name')).by(values('value').fold()).order(local).by(values, asc)"
"返回所有id为150的prescription关联的patient,和以diagnose关系关联了这些patient的其他doctor","g.V().hasLabel('prescription').has('id', 150).bothE().otherV().hasLabel('patient').as('b').inE('diagnose').otherV().hasLabel('doctor').as('c').select('b', 'c')"
请帮我找出所有标有'神探狄仁杰'标签的点，以及观看过这个节目的人。,"g.V().has('name', '神探狄仁杰').as('a').outE('has').inV().hasLabel('tag').as('b').select('a').inE('watch').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"输入请求点id的列表222,641,231,178,983, 以属性id作为相等条件,请帮我查找和person徐红有关的person,称为X,再请帮我查找和这个X有关联的其他person,以及和X有关联的person","g.withSideEffect('p', [222, 641, 231, 178, 983]).V().hasLabel('person').where(and(__.has('id', within('p')), __.has('name', '徐红'))).as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"查找前144个满足条件上次登录时间不是2005年04月25日或是否冻结不等于false,且价值不是714的账号","g.V().hasLabel('account').and(has('lastLoginTime', neq('2005-04-25')).or().has('isBlock', neq(false))).has('value', neq(714)).limit(144)"
"请帮我查找名为呐喊的publisher或book或reader,以及与其有关的publisher,并返回呐喊的id和这些publisher的gender","g.V().has(label, within('publisher', 'book', 'reader')).has('name', '呐喊').bothE().otherV().has(label, 'publisher').project('a_id', 'b_gender').by(select(all, 'a').id()).by(select(all, 'b').values('gender'))"
 返回与教师陈宏有联系的部门。,"g.V().has('teacher', 'name', '陈宏').in('has').hasLabel('department')"
"给出所有源点类型是person,边类型是likes,以及f1不是false且f0大于562,或targetId除targetId小于等于931的边","g.V().hasLabel('person').outE('likes').where(or(and(has('f1', neq(false)), has('f0', gt(562))), math('targetId / targetId').is(lte(931)))).select('e')"
"返回id为132的用户喜欢的仓库, 并将仓库有关的合并请求的id的最大值赋值给仓库的id, 接着查询仓库的id小于132的仓库拥有的用户","g.V().has('user', 'id', 132).out('likes').hasLabel('repository').as('b').sideEffect(__.inE().hasLabel('likes').outV().hasLabel('pullRequest').values('id').max().store('b_id')).select('b').has('id', lt(132)).out('has').hasLabel('user').as('d').select('b', 'd').by('id').by()"
帮我查询和teacher王思思之间有teach关系的course,"g.V().hasLabel('teacher').has('name', '王思思').outE('teach').inV().hasLabel('course')"
 请帮我查找与作家类型相关的书籍，并找出与这些书籍有引用关系的其他书籍。,g.V().hasLabel('author').as('a').outE('write').inV().hasLabel('book').as('b').outE('refers').inV().hasLabel('book').as('c').outE('refers').inV().hasLabel('book').as('d').select('d')
请帮我查找153个与香蕉和苹果都存在关系的orders节点,"g.V().has('name', '香蕉').outE().inV().hasLabel('orders').as('b').inE().outV().has('name', '苹果').select('b').limit(153)"
 返回马轩和黄伟共同存在的同事。,"g.V().has('person', 'name', '马轩').as('a').outE('colleague').inV().as('b').inE('colleague').outV().has('person', 'name', '黄伟').as('c').select('b').dedup()"
查找83个与孙国强和周思思都存在关系的person节点,"g.V().has('name', '孙国强').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '周思思').select('b').limit(83)"
"请帮我查找person关联的person,返回其源点的年龄减47除157减31对id取余的个数,以及目标点的薪资加薪资减年龄的值","g.V().hasLabel('person').as('a').outE('relates').as('e').inV().hasLabel('person').as('b').project('expr1', 'expr2').by(__.select('a').values('age').math('(_ - 47) / 157 - 31 % ').by(__.select('a').values('id')).count()).by(__.select('b').values('salary').math('_ + _ - ').by(__.select('b').values('age')))"
"返回被person吴强knows的person,和吴强pay的person","g.V().hasLabel('person').has('name', '吴强').as('b').outE('knows').inV().hasLabel('person').as('a').select('b').outE('pay').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
"返回前151个满足条件value是699且scale是small,或peopleNumber大于等于92的company","g.V().hasLabel('company').or(has('value', 699).has('scale', 'small'), has('peopleNumber', gte(92))).limit(151)"
查找和作家何轩之间有认识关系的作家,"g.V().has('author', 'name', '何轩').out('knows').hasLabel('author')"
"以610,391,848,350作为请求点id, 以属性id作为相等条件,请帮我查找全部源点类型是person,边类型是person_creates_comment的边,返回这些边的srcId减43的值,和targetId的最大值对186取余的值","g.inject([610, 391, 848, 350]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).outE('person_creates_comment').as('e').select('e').project('expr1', 'expr2').by(__.values('srcId').math('_ - 43')).by(__.values('targetId').fold().math('_ max').math('_ % 186'))"
"输入请求点id的列表833,479,842, 以属性id作为相等条件,查询与person黄雪和王国强都存在person_family_person关系的点","g.inject([833, 479, 842]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('name', '黄雪').as('a').outE('person_family_person').as('e').inV().as('b').inE('person_family_person').as('e2').outV().hasLabel('person').has('name', '王国强').as('c').select('b').dedup()"
"输入请求点id的列表488,999,195,121, 源点的id等于输入表id,帮我查询39个医生吴雪和Bob,共同的相关者","g.inject([488, 999, 195, 121]).as('p').flatMap(select('p').unfold().as('id')).V().hasLabel('doctor').as('a').where(and(__.values('id').as('a_id').where(eq('id')), __.has('name', '吴雪'))).outE('relation').as('e').inV().as('b').inE('relation').as('e2').outV().as('c').hasLabel('doctor').has('name', 'Bob').select('b').limit(39)"
"以2, 52作为输入调用personalRank函数,返回运算结果","g.call('PERSONALRANK').with('input1', 2).with('input2', 52).select('id', 'value')"
"用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出university北京大学的所有标签为relation的边,并根据f0从小到大排列,返回79个","g.V().has('university', 'name', '北京大学').outE('relation').order().by('f0', asc).limit(79).inV()"
找出与孙思思和何建国都认识的点,"g.V().has('person', 'name', '孙思思').outE('knows').inV().as('b').inE('knows').outV().has('person', 'name', '何建国').select('b')"
"输入请求点id的列表645,696,622,874, 以属性id作为相等条件,返回全部源点类型是reader,边类型是reader_likes_book,以及满足条件f0不为空的边","g.inject([645, 696, 622, 874]).unfold().as('p').V().hasLabel('reader').has('id', __.as('p')).outE('reader_likes_book').has('f0', neq(null)).as('e').select('e')"
请帮我找出所有名为ISSUE-374的点属于的仓库,"g.V().has('name', 'ISSUE-374').outE('belong').inV().hasLabel('repository')"
"输入请求点id的列表19,974,757,284,993, 以属性id作为相等条件,返回98个编辑郑思琪和Bob,共同的朋友","g.withSideEffect('p', [19, 974, 757, 284, 993]).V().has('publisher', 'id', within('p')).has('name', '郑思琪').as('a').outE('friend').inV().as('b').inE('friend').outV().has('publisher', 'name', 'Bob').select('b').limit(98)"
"根据id,价值分组,计算id加14的最大值","g.V().hasLabel('a').group().by(union(values('id'), values('value')).fold()).by(values('id').math('_ + 14').max())"
"查询所有名为横店影院的,category不是悬疑的partner,返回这些partner的category,和边的f1","g.V().has('name', '横店影院').outE('partner').as('e').inV().has('category', neq('悬疑')).as('b').select('b', 'e').by(values('category')).by(values('f1'))"
 返回与王月有has关系的department。,"g.V().hasLabel('student').has('name', '王月').inE('has').outV().hasLabel('department')"
找出与person王国强和赵强都存在家人关系的点,"g.V().has('person', 'name', '王国强').outE('family').inV().as('b').inE('family').outV().has('person', 'name', '赵强').select('b')"
请帮我找出名为赵伟的节点诊断的处方或部门或病人,"g.V().has('name', '赵伟').outE('diagnose').inV().hasLabel(within('prescription', 'department', 'patient')).dedup()"
 请帮我查找与南京大学有关的公司，并查找与南京大学有合作的其他公司，返回它们。,"g.V().has('university', 'name', '南京大学').as('a').bothE().otherV().hasLabel('company').as('b').select('a').bothE('cooperate').otherV().hasLabel('company').as('c').select('a', 'b', 'c')"
"查询和seller吴若涵有关的orders,称为X,再查询和这个X有关联的其他goods,以及和X有关联的buyer","g.V().has('seller', 'name', '吴若涵').as('a').bothE().otherV().hasLabel('orders').as('b').bothE().otherV().hasLabel('goods').as('c').select('b').bothE().otherV().hasLabel('buyer').as('d').select('a', 'b', 'c', 'd')"
"返回全部person以salary,gender,height分组的age, 根据age升序排序","g.V().hasLabel('person').group().by(values('salary', 'gender', 'height').fold()).by(values('age').fold()).order(local).by(values('age').unfold().min(), asc)"
找出与电影院好视影院有上映关系的2跳的环,"g.V().has('cinema', 'name', '好视影院').as('a').repeat(bothE().otherV().simplePath()).times(2).where(cyclicPath()).where(eq('a')).project('a.id', 'b_id').by(select('a').id()).by(id())"
"查找所有源点标签为教师,目标点标签为课程,标签为大学或部门或课程的边","g.V().hasLabel('teacher').outE('university', 'department', 'course').as('e').inV().hasLabel('course').select('e')"
"找出喜欢评论Comment_385的person,和这些person创造的评论","g.V().hasLabel('comment').has('name', 'Comment_385').as('a').in('likes').hasLabel('person').as('b').out('creates').hasLabel('comment').as('c').select('b', 'c')"
请帮我查找与我所在的部门有联系的医生，以及那些与这些医生有关联的其他部门。,"g.V().has('department', 'id', '173').bothE().otherV().hasLabel('doctor').as('b').inE('has').outV().hasLabel('department').as('c').select('b', 'c')"
"查找80个名为郑建聪的点支付的label为person的节点,且其年龄小于54,身高不等于191","g.V().has('name', '郑建聪').outE('pay').inV().hasLabel('person').has('age', lt(54)).has('height', neq(191)).limit(80)"
"找出全部和作家陈红有关系的作家,返回这些点的id","g.V().has('author', 'name', '陈红').bothE().otherV().hasLabel('author').id()"
找出person Jimmy认识的person节点支付的person,"g.V().hasLabel('person').has('name', 'Jimmy').out('knows').hasLabel('person').out('pay').hasLabel('person')"
"给出全部和名为吴梅的买家有伙伴关系,或有伙伴的伙伴关系的卖家","g.V().has('buyer', 'name', '吴梅').repeat(out('partner')).times(2).hasLabel('seller').dedup()"
"查找id为90的点的createTime,name,weight","g.V().has('id', 90).project('createTime', 'name', 'weight').by('createTime').by('name').by('weight')"
"以42,130作为请求点id, 以属性id作为相等条件,给出全部标签为reader的点","g.inject([42, 130]).unfold().as('p').V().hasLabel('reader').has('id', __.select('p')).dedup()"
 请帮我找出与读者陈建国有关，并且与计算机网络有关的书。,"g.V().has('reader', 'name', '陈建国').bothE('likes').otherV().hasLabel('book').bothE('refers').otherV().has('book', 'name', '计算机网络').path().unfold().hasLabel('book').dedup()"
查找所有标签等于论坛或用户的点,"g.V().hasLabel(within('forum', 'user'))"
返回被person韩月认识的person,"g.V().has('person', 'name', '韩月').as('b').outE('knows').as('e').inV().as('a').select('a', 'b')"
"请帮我查找id为79的标签有关的person的朋友, 再请帮我查找和person有关系的朋友","g.V().has('tag', 'id', 79).as('a').bothE().otherV().hasLabel('person').as('b').bothE('friend').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
 找出人名徐若涵的所有点，并返回这些点的id和性别。,"g.V().hasLabel('person').has('name', '徐若涵').project('a.id', 'a.gender').by('id').by('gender')"
"输入表的列为id,createTime,name, 数据为(56,2028-11-06,'Comment_330'),(60,2026-02-01,'Comment_274'),(38,2017-10-05,'Comment_496'),(39,2017-03-15,'Comment_396'), 以属性createTime作为相等条件,找出id为162的点的字数","g.inject([['id':56,'createTime':'2028-11-06','name':'Comment_330'],['id':60,'createTime':'2026-02-01','name':'Comment_274'],['id':38,'createTime':'2017-10-05','name':'Comment_496'],['id':39,'createTime':'2017-03-15','name':'Comment_396']]).as('p').V().has('createTime', within(select('p').unfold().values('createTime'))).has('id', '162').values('wordCount')"
找出杜梅和赵建聪共同的朋友列表，这些朋友的label是person。,"g.V().has('person', 'name', '杜梅').out('friend').as('b').in('friend').has('person', 'name', '赵建聪').select('b').values('name')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出所有person以年龄分组的身高, 根据身高从小到大排序","g.V().hasLabel('person').group().by('age').by(values('height').fold()).order(local).by(values, asc)"
"请帮我找出所有源点类型为城市,边类型为包含,并且权重的数量大于183,f1为false的边","g.V().hasLabel('city').outE('contain').has('f1', false).where(values('weight').count().is(gt(183))).dedup()"
"帮我查询类型是标签,名为科幻的点,返回这些点的名字","g.V().hasLabel('tag').has('name', '科幻').values('name')"
"给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));找出全部cinema的partner,或其partner的partner","g.V().hasLabel('cinema').as('a').outE('partner').as('e').inV().as('b').select('b').union(__.identity(), __.outE('partner').inV()).dedup()"
"输入请求点id的列表304,490,156, 以属性id作为相等条件,给出所有id为50的订单关联的卖家,和以咨询关系关联了这些卖家的其他买家","g.withSideEffect('p', [304, 490, 156]).V().hasLabel('orders').where(__.values('id').is(within('p')).and(__.values('id').is(eq('50')))).bothE().otherV().hasLabel('seller').as('b').in('buyer_consult_seller').hasLabel('buyer').as('c').select('b', 'c')"
请帮我找出与63个类型为company的点有belong关系的城市，以及这些城市中有contain关系的大学。,g.V().hasLabel('company').as('a').out('belong').hasLabel('city').as('b').out('contain').hasLabel('university').as('c').select('c').limit(63)
找出和韩宏、周梅都有关系的用户，并返回他们的身高,"g.V().has('user', 'name', '韩宏').outE().inV().hasLabel('user').as('b').inE().outV().has('user', 'name', '周梅').select('b').values('height')"
帮我查询以包含关系关联了用户马思思的论坛,"g.V().hasLabel('user').has('name', '马思思').inE('contain').outV().hasLabel('forum')"
 找出与电影我不是药神有关且与评论Comment_145有关的电影节点，并返回它们的类别。,"g.V().has('film', 'name', '我不是药神').outE().inV().hasLabel('film').as('b').inE().outV().has('comment', 'name', 'Comment_145').select('b').values('category')"
 查找MySQL使用的软件。,"g.V().hasLabel('software').has('name', 'Mysql').as('b').outE('uses').inV().as('a').select('a', 'b')"
 请帮我查询张国强和何红之间是否存在接受关系。,"g.V().has('patient', 'name', '张国强').outE('accept').inV().as('b').inE('accept').outV().has('patient', 'name', '何红').select('b')"
"查询和post Post_245有has关系的tag,再查询以has关系关联了Post_245的tag","g.V().hasLabel('post').has('name', 'Post_245').as('a').bothE('has').otherV().hasLabel('tag').as('b', 'c').select('a', 'b', 'c')"
"请帮我查找与张梅存在likes关系的comment,comment与film存在belong关系的点,返回这些点的category","g.V().has('name', '张梅').out('likes').hasLabel('comment').out('belong').hasLabel('film').values('category')"
"请帮我查找全部和处方Prescription_425有关系的病人或处方,返回这些点的名字,年龄,身高","g.V().has('prescription', 'name', 'Prescription_425').bothE().otherV().hasLabel(within('patient', 'prescription')).project('name', 'age', 'height').by(values('name')).by(values('age')).by(values('height'))"
 查询与Bob和何轩有关联的人，返回他们的姓名和薪资。,"g.V().has('person', 'name', 'Bob').outE().inV().hasLabel('person').as('b').inE().outV().has('person', 'name', '何轩').select('b').values('name', 'salary')"
"查找belong film少年足球的comment,和这些comment belong的film","g.V().hasLabel('film').has('name', '少年足球').in('belong').as('b').out('belong').as('c').select('b', 'c')"
"给出与department文学院存在has关系,且与course马克思原理存在teach关系的teacher节点，返回这些teacher的height,id,salary,及department文学院的id,及course马克思原理的id","g.V().has('department', 'name', '文学院').as('a').out('has').hasLabel('teacher').as('b').in('teach').has('course', 'name', '马克思原理').as('c').select('a', 'b', 'c').by('id').by(values('height', 'id', 'salary')).by('id')"
"使用列为salary,age,gender, 数据为(4128,34,'famale'),(5784,49,'famale'),(9377,37,'famale'),(4564,93,'famale')的子查询作为输入表, 以属性salary作为相等条件,请帮我查找全部标签为公司的点","g.inject([['salary':4128,'age':34,'gender':'famale'],['salary':5784,'age':49,'gender':'famale'],['salary':9377,'age':37,'gender':'famale'],['salary':4564,'age':93,'gender':'famale']]).as('p').flatMap(select('p')).unfold().as('row').select(values).as('salaryVal').select('salaryVal').by(select(keys).by().limit(local, 1)).V().hasLabel('company').as('a').where(eq('a')).by('salary').by(select('salaryVal')).select('a')"
请帮我查找与美团公司和账号Geaflow123相关的贷款记录,"g.V().hasLabel('company').has('name', '美团').bothE('apply').otherV().hasLabel('loan').bothE('deposit').otherV().hasLabel('account').has('name', 'Geaflow123').select('b')"
"帮我查询耳鼻喉科的点拥有的医生,然后帮我查询耳鼻喉科被属于的医生,一起返回","g.V().has('name', '耳鼻喉科').as('a').outE('has').inV().hasLabel('doctor').as('b').select('a').inE('belong').outV().hasLabel('doctor').as('c').select('a', 'b', 'c')"
"请帮我查找名为布洛芬的药品,以及与其有关的部门,并返回布洛芬的名字和这些部门的名字","g.V().hasLabel('medicine').has('name', '布洛芬').as('a').bothE().as('e').otherV().hasLabel('department').as('b').select('a', 'b').by('name').by('name')"
 找出所有源点类型为账号，目标点类型为账号，且类型为转账的边。,g.V().hasLabel('account').outE('transfer').where(inV().hasLabel('account'))
请帮我找出与person节点相关的person节点，按照薪资和id进行分组，并返回薪资和id。,"g.V().hasLabel('person').as('a').bothE('parent').otherV().hasLabel('person').as('b').select('b').values('salary', 'id').group().by().by(fold())"
返回以has关系关联了tag喜剧的post,"g.V().hasLabel('tag').has('name', '喜剧').in('has').hasLabel('post')"
"帮我查询学生的相关者,或其相关者的相关者",g.V().hasLabel('student').outE('relation').inV().outE('relation').inV().dedup()
"用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出标签为forum_contain_post,并且满足条件f1不等于true的边","g.E().hasLabel('forum_contain_post').has('f1', neq(true))"
"返回城市杭州包含的公司,被其他大学合作的数量","g.V().has('city', 'name', '杭州').out('contain').as('b').in('cooperate').hasLabel('university').as('c').select('c').count()"
"用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));找出与部门文学院存在department_has_student关系,且与课程计算机体系结构存在student_selects_course关系的学生节点，返回这些学生的性别,及部门文学院的名字,及课程计算机体系结构的学分","g.V().has('department', 'name', '文学院').as('a').outE('department_has_student').inV().hasLabel('student').as('b').inE('student_selects_course').outV().has('course', 'name', '计算机体系结构').as('c').select('a', 'b', 'c').by('name').by('gender').by('credit')"
返回与艺术学院有隶属关系的学生，以及由教师陈强授课的所有课程。,"g.V().has('department', 'name', '艺术学院').as('a').out('has').as('b').select('a').V().has('teacher', 'name', '陈强').as('c').out('teach').as('d').select('a', 'b', 'c', 'd')"
 查询与处方384和312有关的143个用户节点。,"g.V().has('name', 'Prescription_384').outE().inV().hasLabel('user').as('b').inE().outV().has('name', 'Prescription_312').select('b').limit(143)"
找出以拥有关系关联了商品短袖的卖家,"g.V().hasLabel('goods').has('name', '短袖').inE('has').outV().hasLabel('seller')"
"给出被buyer creates数量大于53的orders,记为relationCount,再查询这些orders creates的seller","g.V().hasLabel('orders').as('a').project('a', 'relationCount').by(identity()).by(__.in('creates').hasLabel('buyer').id().count()).select('a', 'relationCount').as('pair').select('relationCount').is(gt(53)).select('pair').select('a').out('creates').hasLabel('seller').dedup()"
"找出pullRequest PR-182 belong的repository,以及belong这些repository的issue, 令issue的createTime等于repository的createTime,令issue的lang等于repository的weight对weight取余, 返回pullRequest的id,repository的stars,issue的weight","g.V().hasLabel('pullRequest').has('name', 'PR-182').as('a').outE('belong').inV().hasLabel('repository').as('b').inE('belong').outV().hasLabel('issue').as('c').sideEffect(select('c').property('createTime', select('b').values('createTime'))).sideEffect(select('c').property('lang', select('b').values('weight').math('_ % _'))).select('a', 'b', 'c').by('id').by('stars').by('weight')"
请帮我找出与电影《西虹市首富》和人物何红有关的电影节点，包括它们的价值、ID和类别。,"g.V().has('film', 'name', '西虹市首富').outE().inV().hasLabel('film').as('b').inE().outV().has('person', 'name', '何红').select('b').project('value', 'id', 'category').by(values('value')).by(values('id')).by(values('category'))"
"返回全部部门的相关者,或其相关者的相关者",g.V().hasLabel('department').outE('relation').inV().hasLabel('department').outE('relation').inV().hasLabel('department').dedup()
"请帮我找出全部id为22的软件关联的公司,和以属于关系关联了这些公司的其他person","g.V().has('software', 'id', 22).bothE().otherV().hasLabel('company').as('b').inE('belong').otherV().hasLabel('person').as('c').select('b', 'c')"
请帮我找出所有与作者周红有关或者与周红有关的作者,"g.V().has('author', 'name', '周红').outE('relation').inV().hasLabel('author').dedup()"
"根据名字,id分组,计算value的个数除345的值","g.V().hasLabel('a').group().by('name').by('id').by(count().by('value')).select(values).unfold().project('name', 'id', 'result').by(select(keys).select('name')).by(select(keys).select('id')).by(math('_ / 345'))"
"帮我查询论坛的三角的环,边类型是包含, 并返回这些点的id","g.V().hasLabel('forum').as('a').outE('contain').inV().as('b').outE('contain').inV().as('c').where(__.out('contain').as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"给出id为108的pullRequest belong的repository, 并将repository有关的user的gender的最小值赋值给repository的lang, 接着查询repository的lang小于108的repository has的issue","g.V().has('pullRequest', 'id', 108).as('a').outE('belong').inV().hasLabel('repository').as('b').sideEffect(select('b').aggregate('b_set')).select('b').inE().as('e2').outV().hasLabel('user').as('c').select('b', 'c').by().by('gender').group().by(select('b')).by(values('c').min()).unfold().as('lang_entry').select('b_set').unfold().as('b').select('lang_entry').where(select('b').as('b_key').select('lang_entry').by(keys).where(eq('b_key'))).select('lang_entry').by(values).as('min_gender').select('b').sideEffect(property('lang', select('min_gender'))).select('b').has('lang', lt(108)).outE('has').inV().hasLabel('issue').as('d').select('b', 'd').by('lang').by()"
"帮我查询135个和标签为医生的点有创造关系的处方,以及和这些处方有包含关系的药品",g.V().hasLabel('doctor').outE('creates').inV().hasLabel('prescription').outE('contain').inV().hasLabel('medicine').limit(135)
"帮我查询所有名为孙伟的点的,gender不是male,height大于190的friend,返回这些friend的id,和边的f0","g.V().has('name', '孙伟').outE('friend').as('e').inV().has('gender', neq('male')).has('height', gt(190)).project('b.id', 'e.f0').by(id()).by(select('e').values('f0'))"
"以938,436,977作为请求点id, 源点的id等于输入表id,返回帖子的三角的环,边类型为post_has_tag, 并返回这些点的id","g.inject([938, 436, 977]).unfold().as('p').V().has('post', 'id', __.select('p')).as('a').outE('post_has_tag').inV().as('b').outE('post_has_tag').inV().as('c').where(__.as('c').out('post_has_tag').as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
 给出与商品ID为199的订单有关的朋友，再给出与订单有关的朋友。,"g.V().has('goods', 'id', '199').bothE().otherV().hasLabel('orders').as('b').bothE('friend').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd').by(elementMap())"
返回性别是male或id大于等于79的节点,"g.V().or(has('gender', 'male'), has('id', gte(79)))"
获取赵思琪相关的古代主题帖,"g.V().hasLabel('user').has('name', '赵思琪').outE('publish').inV().hasLabel('post').as('b').outE('has').inV().hasLabel('tag').has('name', '古代').select('b')"
查找person郑强关联的person节点认识的person,"g.V().hasLabel('person').has('name', '郑强').outE('relates').inV().hasLabel('person').outE('knows').inV().hasLabel('person')"
"查找名为Flink的,状态不等于Closed且权重不是163的伙伴,返回这些伙伴的权重,和边的权重,源点id","g.V().has('name', 'Flink').outE('partner').as('e').inV().has('status', neq('Closed')).has('weight', neq(163)).project('b_weight', 'e_weight', 'srcId').by('weight').by(select('e').values('weight')).by(select('e').values('srcId'))"
"请帮我查找与公司腾讯存在合作关系,且与公司谷歌存在合作关系的大学节点，返回这些大学的等级,价值,id,及公司腾讯的名字,及公司谷歌的id","g.V().has('company', 'name', '腾讯').as('a').outE('cooperate').inV().hasLabel('university').as('b').inE('cooperate').outV().has('company', 'name', '谷歌').as('c').select('a', 'b', 'c').by('name').by(values('level', 'value', 'id')).by('id')"
"用这个schema:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询id为178的点的name,weight,id","g.V().has('id', '178').project('a.name', 'a.weight', 'a.id').by('name').by('weight').by('id')"
查询id为167的person的相关partner，再查询与该person相关的partner,"g.V().has('person', 'id', '167').as('a').bothE().otherV().hasLabel('person').as('b').bothE().hasLabel('partner').otherV().as('c').select('b').bothE().hasLabel('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
返回前39个label为咨询的边,g.E().hasLabel('consult').limit(39)
 王思思写的书被其他出版社出版的数量。,"g.V().has('author', 'name', '王思思').out('write').in('publish').hasLabel('publisher').count()"
查询XXD账户还款的贷款对应的存款账号,"g.V().has('account', 'name', 'XXD').outE('repay').inV().hasLabel('loan').outE('deposit').inV().hasLabel('account')"
"找出全部与张月存在consult关系的seller,seller与goods存在has关系的点,返回这些点的value","g.V().has('name', '张月').out('consult').hasLabel('seller').out('has').hasLabel('goods').values('value')"
"给出名为喜剧的评论或电影院,以及与其有关的标签,并返回喜剧的名字和这些标签的价值","g.V().hasLabel('comment', 'cinema').has('name', '喜剧').bothE().otherV().hasLabel('tag').project('a.name', 'b.value').by(select('a').values('name')).by(values('value'))"
 查询与陈建国和何国强存在关系的189个学生节点。,"g.V().has('name', '陈建国').outE().inV().hasLabel('student').where(__.inE().outV().has('name', '何国强')).limit(189)"
给出名为徐梅的点knows的person,"g.V().has('name', '徐梅').out('knows').hasLabel('person')"
"用如下schema的图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));给出prescription以name,id,weight分组的name, 根据name升序排序","g.V().hasLabel('prescription').group().by(project('name', 'id', 'weight').by('name').by('id').by('weight')).select(values).unfold().project('name').by(select('name')).order().by('name', asc)"
"以222,594作为请求点id, 源点的id等于输入表id,查询全部名为李伟的点knows的person","g.inject([222, 594]).as('p').flatMap(select('p')).as('id').flatMap(__.V().has('id', select('id')).has('name', '李伟').outE('knows').inV().hasLabel('person')).dedup()"
 找出与公司ID为20的某个人有关系的伙伴，再找出与这个人相关的其他人。,"g.V().has('company', 'id', '20').as('a').bothE().otherV().hasLabel('person').as('b').bothE('relation').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"帮我查询所有与孙科存在喜欢关系的评论,评论与电影存在属于关系的点,返回这些点的类别","g.V().has('name', '孙科').outE('likes').inV().hasLabel('comment').outE('belong').inV().hasLabel('film').values('category')"
"查找名为Redis和Mysql的,类型是软件的点公共的相关者节点的名单","g.V().has('software', 'name', 'Redis').outE('relation').inV().as('b').inE('relation').outV().has('software', 'name', 'Mysql').select('b').values('name')"
 请问外科在哪里？,"g.V().hasLabel('department').has('name', '外科')"
"查询person吴宏pay的person, 令person的id等于person的age,令person(b)的gender等于person(a)的id对23取余加7, 返回person(a)的name, person(b)的name","g.V().hasLabel('person').has('name', '吴宏').as('a').outE('pay').inV().hasLabel('person').as('b').project('a_name', 'b_name').by(select('a').values('name')).by(select('b').values('name'))"
"返回和person黄红有关的person,再返回和黄红lover的其他person,返回它们","g.V().has('person', 'name', '黄红').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('lover').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
"请帮我找出person的三角的环,边label为watch, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('watch').inV().as('b').outE('watch').inV().as('c').where(__.inE('watch').outV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
找出全部类型是person的点,g.V().hasLabel('person')
给出person的2跳以内的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(2).where(loops().is(1).or().loops().is(2)).as('b').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"找出源点类型为person,目标点类型为贷款,类型为person或贷款的边","g.V().hasLabel('person').outE('person', 'loan').where(inV().hasLabel('loan')).valueMap(true)"
 何科和徐国强认识吗？,"g.V().has('person', 'name', '何科').outE('knows').inV().as('b').inE('knows').outV().has('person', 'name', '徐国强').select('b')"
请帮我找出全部与国家日本有关系的国家的人数,"g.V().has('country', 'name', '日本').bothE().otherV().hasLabel('country').values('peopleNumber')"
"使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找所有帖子的相关者,或其相关者的相关者","g.V().hasLabel('post').outE('relation').inV().range(1, 2).dedup()"
找出所有与电影院大众影院有关系的标签的名字,"g.V().has('cinema', 'name', '大众影院').bothE().otherV().hasLabel('tag').values('name')"
 按照年龄从小到大排序，对person的id、身高和薪资进行分组。,"g.V().hasLabel('person').group().by(project('id', 'height', 'salary').by('id').by('height').by('salary')).by(values('age').fold()).order(local).by(values, asc)"
 请问周若涵认识了多少个其他人士？,"g.V().has('person', 'name', '周若涵').out('knows').in('knows').dedup().count()"
查找被person孙梅观看的电影,"g.V().hasLabel('person').has('name', '孙梅').outE('watch').inV().hasLabel('film').as('b').inE('watch').outV().as('a').select('a', 'b')"
"查找和person周强有关的person,再查找和周强认识的其他person,返回它们","g.V().has('person', 'name', '周强').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('knows').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
"给出id为131的person关联的person, 并将person有关的person的年龄的最小值赋值给person(b)的id, 接着查询person(b)的id小于131的person关联的person","g.V().has('person', 'id', 131).outE('relates').inV().hasLabel('person').as('b').project('b_id', 'd').by(choose(outE().inV().hasLabel('person').values('age').min(), constant(-1))).by(choose(has('id', lt(131)), outE('relates').inV().hasLabel('person'), constant(null)))"
 请帮我查找与微软存在员工关系且与郑思琪有认识关系的个人，并返回他们的ID、工资、年龄、微软的名称和郑思琪的名称。,"g.V().hasLabel('company').has('name', '微软').as('a').outE('employee').inV().hasLabel('person').as('b').inE('knows').outV().hasLabel('person').has('name', '郑思琪').as('c').select('a', 'b', 'c').by('name').by(values('id', 'salary', 'age')).by('name')"
给出所有名为吴思思的点teach的course,"g.V().has('name', '吴思思').outE('teach').inV().hasLabel('course')"
帮我找一下中国诗词论坛里被其他用户喜欢的帖子数量,"g.V().has('forum', 'name', '中国诗词论坛').outE('contain').inV().hasLabel('post').inE('likes').outV().hasLabel('user').count()"
请帮我查找以认识关系关联了person赵梅的person,"g.V().hasLabel('person').has('name', '赵梅').in('knows').hasLabel('person')"
"查找和城市武汉有关的国家,称为X,再查找和这个X有关联的其他国家,以及和X有关联的公司","g.V().has('city', 'name', '武汉').as('a').bothE().otherV().hasLabel('country').as('b').bothE().otherV().hasLabel('country').where(neq('b')).as('c').select('b').bothE().otherV().hasLabel('company').as('d').select('a', 'b', 'c', 'd')"
请帮我找出和person孙思琪之间有likes关系的comment,"g.V().hasLabel('person').has('name', '孙思琪').outE('likes').inV().hasLabel('comment')"
 查询所有从'loan'源点流向'account'目标点且标签为'deposit'的边。,g.V().hasLabel('loan').outE('deposit').as('e').inV().hasLabel('account').select('e')
查找全部与person徐雪有关系的person的性别,"g.V().hasLabel('person').has('name', '徐雪').bothE().otherV().hasLabel('person').values('gender')"
"返回标签等于学生的点,返回24个",g.V().hasLabel('student').limit(24)
"帮我查询卖家以名字分组的身高, 根据身高从小到大排序","g.V().hasLabel('seller').group().by('name').by(values('height').fold()).order(local).by(values, asc)"
 请帮我找出吴思思教授的课程和她所在的部门，谢谢。,"g.V().has('name', '吴思思').as('a').outE('teach').inV().hasLabel('course').as('b').select('a').inE('has').outV().hasLabel('department').as('c').select('a', 'b', 'c')"
 返回与编辑韩轩和王月都发布过内容。,"g.V().has('publisher', 'name', '韩轩').outE('publish').inV().as('b').inE('publish').outV().has('publisher', 'name', '王月').select('b').dedup()"
帮我查询标签为读者的点,g.V().hasLabel('reader')
 按照性别和薪资分组，然后按照身高从小到大排序。,"g.V().hasLabel('person').group().by(values('gender', 'salary').fold()).by(values('height').fold().order(local)).unfold().select(values).unfold()"
 查找与Prescription_443和Prescription_330有关系的24个医生节点。,"g.V().has('name', 'Prescription_443').outE().inV().hasLabel('doctor').as('b').inE().outV().has('name', 'Prescription_330').select('b').limit(24)"
"帮我查询所有张科的点回答的买家,然后帮我查询张科被咨询的买家,一起返回","g.V().has('name', '张科').as('a').outE('ask').inV().hasLabel('buyer').as('b').select('a').inE('consult').outV().hasLabel('buyer').as('c').select('a', 'b', 'c')"
"请帮我找出部门皮肤科拥有的医生, 令医生的性别等于医生的年龄,令医生的权重等于部门的地址, 返回部门的id, 医生的年龄","g.V().hasLabel('department').has('name', '皮肤科').as('a').outE('has').inV().hasLabel('doctor').as('b').sideEffect(select('b').property('gender', select('b').values('age'))).sideEffect(select('b').property('weight', select('a').values('address'))).select('a', 'b').by('id').by('age')"
"给出和标签为买家的点有咨询关系的卖家,并且和这些卖家有回答关系的买家,并且和这些买家有取消关系的订单",g.V().hasLabel('buyer').as('a').outE('consult').as('e').inV().hasLabel('seller').as('b').outE('ask').as('e2').inV().hasLabel('buyer').as('c').outE('cancel').as('e3').inV().hasLabel('orders').as('d').select('d')
返回全部和person kate之间有喜欢关系的评论,"g.V().hasLabel('person').has('name', 'kate').outE('likes').inV().hasLabel('comment').dedup()"
 查询周伟在电影《少年足球》中的评论。,"g.V().has('person', 'name', '周伟').bothE('likes').otherV().hasLabel('comment').bothE('belong').otherV().has('film', 'name', '少年足球').select('comment').dedup()"
请帮我找出与书三体和呐喊都存在引用关系的点,"g.V().has('book', 'name', '三体').outE('refers').inV().as('b').inE('refers').outV().has('book', 'name', '呐喊').select('b')"
"用如下schema的图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));返回前143个满足条件weight大于等于826或createTime为148的prescription","g.V().hasLabel('prescription').or(has('weight', gte(826)), has('createTime', 148)).limit(143)"
 请帮我找出与买家相关的人，或者相关者的相关者。,g.V().hasLabel('buyer').outE('relation').inV().hasLabel('buyer').path().by('id').by('id').limit(2).dedup().select('b')
"找出名为北京大学和电子科技大学的,标签等于university的点公共的partner节点的名单","g.V().has('university', 'name', '北京大学').out('partner').as('b').in('partner').has('university', 'name', '电子科技大学').select('b').values('name')"
"帮我查询与person何国强存在lover关系,且与person孙建国存在lover关系的person节点，返回这些person的age,height,及person何国强的gender,及person孙建国的gender","g.V().has('person', 'name', '何国强').as('a').outE('lover').inV().hasLabel('person').as('b').inE('lover').outV().has('person', 'name', '孙建国').as('c').select('a', 'b', 'c').by('gender').by(values('age', 'height')).by('gender')"
"使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出和用户王建国有1跳或2跳关系的person","g.V().has('user', 'name', '王建国').bothE().otherV().hasLabel('person').path().by('name').by(label).limit(1).union(__.identity(), __.bothE().otherV().hasLabel('person')).dedup().values('name')"
查询用户的3度以内的环,"g.V().hasLabel('user').as('a').repeat(both().simplePath()).times(3).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id')"
请帮我查找贷款loan_45存款的账号节点转账的账号,"g.V().hasLabel('loan').has('name', 'loan_45').outE('deposit').inV().hasLabel('account').outE('transfer').inV().hasLabel('account')"
"以199,128,843,321,689作为请求点id, 源点的id等于输入表id,查找名为计算机网络的,name等于孤城的refers,返回这些refers的createTime,和边的weight,f0,targetId","g.withSideEffect('p', [199, 128, 843, 321, 689]).V().has('id', within('p')).has('name', '计算机网络').outE('book_refers_book').as('e').inV().has('name', '孤城').select('e').project('b.createTime', 'e.weight', 'e.f0', 'e.targetId').by(__.inV().values('createTime')).by(values('weight')).by(values('f0')).by(values('targetId'))"
"根据value分组,计算value加650减87减id的值","g.V().hasLabel('a').group().by('value').by(values('value', 'id').math('_1 + 650 - 87 - _2'))"
"帮我查询patient的relation,或其relation的relation","g.V().hasLabel('patient').outE('relation').inV().outE('relation').inV().path().by(__.coalesce(__.label(), __.label())).unfold().tail(1)"
"找出和person周强有关的person,再找出和周强knows的其他person,返回它们","g.V().has('person', 'name', '周强').as('a').bothE().otherV().hasLabel('person').as('b').select('a').bothE('knows').otherV().hasLabel('person').as('c').select('a', 'b', 'c')"
"输入请求点id的列表790,407,34,946, 以属性id作为相等条件,给出所有id为85的medicine关联的department,和以belong关系关联了这些department的其他doctor","g.inject([790, 407, 34, 946]).as('p').V().hasLabel('medicine').has('id', within('p')).has('id', '85').bothE().as('e').otherV().hasLabel('department').as('b').inE('doctor_belong_department').as('e2').otherV().hasLabel('doctor').as('c').select('b', 'c')"
请帮我查找全部与用户何建国有关系的标签的名字,"g.V().has('user', 'name', '何建国').bothE().otherV().hasLabel('tag').values('name')"
找出与计算机学院有关的学生，然后找出与计算机学院有关的教师。,"g.V().has('department', 'name', '计算机学院').as('a').out('has').as('b').select('a').in('has').hasLabel('teacher').as('c').select('a', 'b', 'c')"
返回所有和reader赵红之间有likes关系的book,"g.V().hasLabel('reader').has('name', '赵红').outE('likes').inV().hasLabel('book')"
帮我查找天涯论坛中提到的人,"g.V().hasLabel('forum').has('name', '天涯论坛').as('b').outE('contain').as('e').inV().hasLabel('person').as('a').select('a', 'b')"
"返回部门的三角的环,边类型为拥有, 并返回这些点的id","g.V().hasLabel('department').as('a').outE('has').inV().as('b').outE('has').inV().as('c').where(__.inE('has').outV().as('a')).select('a', 'b', 'c').by(valueMap('id')).project('a', 'b_id', 'c_id').by(select('a')).by(select('b').select('id')).by(select('c').select('id'))"
返回重庆大学相关者的朋友们的朋友,"g.V().has('university', 'name', '重庆大学').out('relation').out('friend').out('friend')"
"找出全部Amily的点publish的post,然后找出Amily被contain的forum,一起返回","g.V().has('name', 'Amily').as('a').outE('publish').inV().hasLabel('post').as('b').select('a').inE('contain').outV().hasLabel('forum').as('c').select('a', 'b', 'c')"
 请帮我查询与department呼吸科有has关系的医生，以及与医生马国强有creates关系的处方，并返回它们。,"g.V().hasLabel('department').has('name', '呼吸科').as('a').outE('has').inV().hasLabel('doctor').as('b').select('a').V().hasLabel('doctor').has('name', '马国强').as('c').outE('creates').inV().hasLabel('prescription').as('d').select('a', 'b', 'c', 'd')"
"查找与名为韩科和周月的点共同拥有的,label为账号的节点","g.V().has('name', '韩科').outE('own').inV().hasLabel('account').as('b').inE('own').outV().has('name', '周月').select('b')"
 返回与买家点有联系的商品节点，并按类别、价值和销量分组。,"g.V().hasLabel('buyer').bothE('look').otherV().hasLabel('goods').group().by(project('category', 'value', 'sellerNumber').by(values('category')).by(values('value')).by(values('sellerNumber'))).select(values).unfold().project('b.category', 'b.value', 'b.sellerNumber').by(select('category')).by(select('value')).by(select('sellerNumber'))"
"以('male',3634,21),('male',1597,87)作为请求表数据,属性分别为gender,salary,id, 源点的id等于输入表id,查找类型为buyer,名为徐建聪的点,返回这些点的gender,name","g.inject([['male', 3634, 21], ['male', 1597, 87]]).as('p').unfold().as('row').select('row').by(__.project('gender', 'salary', 'id').by(__.limit(local, 1)).by(__.limit(local, 2)).by(__.limit(local, 3))).V().hasLabel('buyer').has('id', __.select('row').select('id')).has('name', '徐建聪').project('gender', 'name').by(__.values('gender')).by(__.values('name'))"
"输入表的列为id,gender,name, 数据为(62,'famale','周建国'),(83,'famale','孙月'),(75,'famale','何建聪'),(44,'male','何若涵'), 以属性id作为相等条件,返回全部源点类型为买家,目标点类型为订单,类型为buyer_creates_orders的边","g.inject([['id':62,'gender':'famale','name':'周建国'],['id':83,'gender':'famale','name':'孙月'],['id':75,'gender':'famale','name':'何建聪'],['id':44,'gender':'male','name':'何若涵']]).unfold().as('p').V().hasLabel('buyer').has('id', __.select('p').select('id')).as('a').outE('buyer_creates_orders').as('e').inV().hasLabel('orders').as('b').select('e')"
"找出86个和类型是评论的点有属于关系的电影,且和这些电影有拥有关系的标签",g.V().hasLabel('comment').as('a').out('belong').hasLabel('film').as('b').out('has').hasLabel('tag').as('c').select('c').limit(86)
 请帮我找出与Amile和Mao Jian共同相关的人。,"g.V().has('person', 'name', 'Amily').outE('relation').inV().as('b').inE('relation').outV().has('person', 'name', '马建国').select('b').limit(67)"
查询用户名为Amily的所有点，返回它们的id、salary和gender信息。,"g.V().hasLabel('user').has('name', 'Amily').project('id', 'salary', 'gender').by('id').by('salary').by('gender')"
"根据name,id分组,计算weight的最大值对632取余的值","g.V().hasLabel('a').group().by(union(identity().values('name'), identity().values('id')).fold()).by(values('weight').max()).unfold().project('a.name', 'a.id', 'result').by(select(keys).select('name')).by(select(keys).select('id')).by(select(values).math('_ % 632'))"
"帮我查询relates person李雪relates的person,的person","g.V().hasLabel('person').has('name', '李雪').as('a').outE('relates').as('e').inV().as('b').inE('relates').as('e2').outV().as('c').select('b', 'c')"
请帮我找出前38个性别是famale且薪资不等于9689的person,"g.V().hasLabel('person').has('gender', 'famale').has('salary', neq(9689)).limit(38)"
找出电影院的2跳的环,"g.V().hasLabel('cinema').as('a').repeat(both().simplePath()).times(2).where(loops().is(2)).where(__.both().where(eq('a'))).dedup().project('a.id', 'b_id').by(__.select('a').id()).by(id())"
 查询与标签为'account'的点有转移关系的166个账户，以及与这些账户有偿还关系的贷款。,g.V().hasLabel('account').as('a').outE('transfer').as('e').inV().hasLabel('account').as('b').outE('repay').as('e2').inV().hasLabel('loan').as('c').select('c').limit(166)
"找出company阿里 belong的city,返回city belong的country的peopleNumber除peopleNumber的值","g.V().hasLabel('company').has('name', '阿里').outE('belong').inV().hasLabel('city').outE('belong').inV().hasLabel('country').project('result').by(values('peopleNumber').math('_ / _'))"
"请帮我找出和label为person的点有创造关系的评论,以及和这些评论有属于关系的电影,以及和这些电影有拥有关系的标签",g.V().hasLabel('person').as('a').out('creates').hasLabel('comment').as('b').out('belong').hasLabel('film').as('c').out('has').hasLabel('tag').as('d').select('d')
"用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询标签为person_creates_comment,以及timeStamp等于2022年09月08日的边","g.E().hasLabel('person_creates_comment').has('timeStamp', '2022-09-08')"
"查询被person关联数量大于150的person,记为relationCount,再查询这些person认识的person","g.V().hasLabel('person').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('relates').hasLabel('person').values('id').min()).select('a', 'relationCount').as('a_with_count').where(__.select('relationCount').is(gt(150))).select('a').out('knows').hasLabel('person').as('c').select('c')"
"用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出源点年龄是91,id不为空,边label为user_likes_post,且时间戳等于2001年01月03日或目标点id除目标点id对源点id取余大于等于917的边,返回这些边的目标点id除182的值","g.V().hasLabel('user').has('age', 91).has('id', neq(null)).outE('user_likes_post').where(or(has('timeStamp', '2001-01-03'), math('targetId / targetId % srcId').is(gte(917)))).project('result').by(math('targetId / 182'))"
"请帮我找出与person吴轩有关,且与person郑轩有关系的person节点","g.V().has('person', 'name', '吴轩').bothE('lover').otherV().hasLabel('person').where(bothE('parent').otherV().has('person', 'name', '郑轩')).dedup()"
"查询薪资是1964,id大于150的卖家回答的买家的名称,以及这些买家 创造的订单的名称","g.V().hasLabel('seller').has('salary', 1964).has('id', gt(150)).outE('ask').inV().hasLabel('buyer').as('b').outE('creates').inV().hasLabel('orders').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 请帮我查找Comment_208所属电影节点has的标签。,"g.V().hasLabel('comment').has('name', 'Comment_208').out('belong').hasLabel('film').out('has').hasLabel('tag')"
"查询和标签等于公司的点有雇佣关系的person,以及和这些person有提交关系的软件,以及和这些软件有使用关系的软件",g.V().hasLabel('company').as('a').out('employee').hasLabel('person').as('b').out('commits').hasLabel('software').as('c').out('uses').hasLabel('software').as('d').select('d')
"帮我查询person王若涵的全部家人,的目标点id减目标点id的值","g.V().has('person', 'name', '王若涵').outE('family').inV().project('result').by(values('targetId').math('_ - _'))"
"返回全部与传染部存在拥有关系的医生,医生与病人存在诊断关系的点,返回这些点的性别","g.V().has('name', '传染部').out('has').hasLabel('doctor').out('diagnose').hasLabel('patient').values('gender')"
请帮我找出所有标签为'国家'且名称为'澳大利亚'的点，并返回它们的名字,"g.V().hasLabel('country').has('name', '澳大利亚').values('name')"
请帮我查找前187个类型为family的边,g.E().hasLabel('family').limit(187)
"找出拥有课程大学物理属于的部门,的大学","g.V().has('course', 'name', '大学物理').out('belong').as('b').in('has').hasLabel('university').as('c').select('b', 'c')"
"用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));返回前143个height小于22或salary是6942的student","g.V().hasLabel('student').or(has('height', lt(22)), has('salary', 6942)).limit(143)"
请帮我找出136个与周强和韩建聪都存在关系的账号或贷款或person节点,"g.V().has('name', '周强').as('a').outE().as('e').inV().hasLabel(within('account', 'loan', 'person')).as('b').inE().as('e2').outV().has('name', '韩建聪').as('c').select('b').limit(136)"
"用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部源点满足条件创建时间小于67且价格小于39,id等于20,目标点满足条件类别是文学,且类型是book_refers_book的边","g.E().hasLabel('book_refers_book').where(__.outV().and(__.has('createTime', lt(67)), __.has('price', lt(39)), __.has('id', 20))).where(__.inV().has('category', '文学'))"
找出公司的1跳的环,"g.V().hasLabel('company').as('a').bothE().bothV().where(eq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
找出与王国强和周宏共同投资的公司节点,"g.V().has('name', '王国强').outE('invest').inV().hasLabel('company').as('b').inE('invest').outV().has('name', '周宏').select('b')"
请帮我查找和account TheShy有3跳关系的loan,"g.V().has('account', 'name', 'TheShy').repeat(bothE().otherV().simplePath()).times(3).hasLabel('loan')"
"根据salary,gender,id分组,计算age的最大值对89取余的值","g.V().hasLabel('a').group().by(__.project('salary', 'gender', 'id').by('salary').by('gender').by('id')).by(__.values('age').max()).unfold().project('salary', 'gender', 'id', 'result').by(__.select(keys).select('salary')).by(__.select(keys).select('gender')).by(__.select(keys).select('id')).by(__.select(values).math('_ % 89'))"
帮我找一下叫赵伟的人的信息,"g.V().hasLabel('person').has('name', '赵伟')"
"以369,26,723作为请求点id, 源点的id等于输入表id,查询被city纽约contain的university","g.withSideEffect('p', [369, 26, 723]).V().hasLabel('university').as('a').where(within('p')).by('id').inE('city_contain_university').outV().hasLabel('city').has('name', '纽约').as('b').select('a', 'b')"
"输入表的列为lang,openSource,id, 数据为('java',true,27), 以属性lang作为相等条件,查询company的1度以内的环","g.withSideEffect('p', [['lang':'java','openSource':true,'id':27]]).V().hasLabel('company').has('lang', __.select('p').unfold().select('lang')).as('a').bothE().otherV().as('b').where(__.as('b').bothE().otherV().as('a')).select('a','b').by('id').by('id').project('a.id','b_id').by(select('a')).by(select('b'))"
请帮我查找36个与Order_284和Order_235都存在关系的买家或商品节点,"g.V().has('name', 'Order_284').outE().inV().or(hasLabel('buyer'), hasLabel('goods')).as('b').inE().outV().has('name', 'Order_235').select('b').limit(36)"
"找出标签为事项的点,返回189个",g.V().hasLabel('issue').limit(189)
 查询与知乎有关的用户，再查询包含知乎的其他人物，返回它们。,"g.V().hasLabel('forum').has('name', '知乎').as('a').bothE().otherV().hasLabel('user').as('b').select('a').outE('contain').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
找出与学生杜建国有选择关系的课程，然后找出这些课程中与杜建国有选择关系的。,"g.V().has('student', 'name', '杜建国').as('a').outE('selects').inV().hasLabel('course').as('b').select('a').inE('selects').outV().hasLabel('course').as('c').select('a', 'b', 'c')"
"以515作为请求点id, 以属性id作为相等条件,查找与用户韩雪和张强都存在user_creates_issue关系的点","g.withSideEffect('p', [515]).V().hasLabel('user').has('id', within('p')).has('name', '韩雪').outE('user_creates_issue').inV().as('b').inE('user_creates_issue').outV().hasLabel('user').has('name', '张强').select('b')"
"给出名为徐伟的person,以及与其有关的person,并返回徐伟的id和这些person的年龄","g.V().hasLabel('person').has('name', '徐伟').bothE().otherV().hasLabel('person').project('a_id', 'b_age').by(__.select('a').id()).by(__.select('b').values('age'))"
给出以合作关系关联了公司滴滴的大学,"g.V().hasLabel('company').has('name', '滴滴').inE('cooperate').outV().hasLabel('university')"
"以61,672,604作为请求点id, 以属性id作为相等条件,请帮我查找和person有关联的person节点,并根据其gender分组,返回gender,以及id加21减age乘9222的值","g.inject([61, 672, 604]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).bothE('person_likes_person').otherV().hasLabel('person').as('b').select('b').by('gender').by(__.math('(id + 21 - age) * 9222')).group().by('gender').by(__.select('b').by(__.math('(id + 21 - age) * 9222')).fold())"
查询person的3度的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(2).where(loops().is(2)).as('b').where(__.out().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').by('id')).by(select('b').by('id'))"
 返回buyer Alice的合作伙伴的合作伙伴,"g.V().has('buyer', 'name', 'Alice').out('partner').out('relation').out('partner')"
"帮我查询和城市上海有包含关系的大学,再帮我查询以属于关系关联了上海的国家","g.V().has('city', 'name', '上海').as('a').out('contain').hasLabel('university').as('b').select('a').in('belong').hasLabel('country').as('c').select('a', 'b', 'c')"
"用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部和名为电子科技大学的university有friend关系,或有friend的friend关系的city","g.V().has('university', 'name', '电子科技大学').bothE('friend').bothV().hasLabel('city').dedup()"
查找和person何建国之间有购买关系的软件,"g.V().hasLabel('person').has('name', '何建国').outE('buy').inV().hasLabel('software')"
"以('famale',80,155)作为请求表数据,属性分别为gender,id,height, 以属性height作为相等条件,帮我查询31个年龄大于50或年龄大于等于73的person,根据性别升序排列","g.inject(['famale', 80, 155]).as('p').V().hasLabel('person').as('a').where('a', eq('p')).by('height').by(tail(local, 2)).and(or(__.values('age').is(gt(50)), __.values('age').is(gte(73)))).select('a').order().by('gender', asc).limit(31)"
"查找包含商品矿泉水的订单,和这些订单包含的商品","g.V().hasLabel('goods').has('name', '矿泉水').inE('contain').outV().as('b').outE('contain').inV().hasLabel('goods').as('c').select('b', 'c')"
"请帮我找出label为family,且满足条件srcId不是194.40或srcId大于163或srcId不为空的边","g.E().hasLabel('family').or(has('srcId', neq(194.40)), has('srcId', gt(163)), has('srcId', neq(null)))"
" 按照年龄和性别分组，找出每个人的ID,然后按从大到小的顺序排序。","g.V().hasLabel('person').group().by(values('age', 'gender')).by(values('id').fold()).order(local).by(keys, desc).unfold().project('a.id').by(select(values).unfold()).order().by(select('a.id'), desc)"
查询王梅和孙强这两位person共同拥有的friend，数量为72。,"g.V().has('person', 'name', '王梅').out('friend').as('b').in('friend').has('person', 'name', '孙强').select('b').limit(72)"
查询79个与孙伟和杜若涵都存在关系的编辑或读者或书节点,"g.V().has('name', '孙伟').as('a').outE().as('e').inV().or(hasLabel('publisher'), hasLabel('reader'), hasLabel('book')).as('b').inE().as('e2').outV().has('name', '杜若涵').as('c').select('b').limit(79)"
"以373,805作为请求点id, 以属性id作为相等条件,返回全部和person黄思思之间有person_pay_person关系的person","g.inject([373, 805]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('name', '黄思思').outE('person_pay_person').inV().hasLabel('person').dedup()"
"给出和用户点有发布关系的帖子节点,且边满足条件源点id为空,目标帖子节点满足条件字数小于778","g.V().hasLabel('user').as('a').outE('publish').has('srcId', null).as('e').inV().hasLabel('post').has('wordCount', lt(778)).as('b').select('b')"
id减91的值,g.V().hasLabel('a').project('result').by(values('id').math('_ - 91'))
"查找与事项ISSUE-306有关,且与合并请求PR-352有关系的仓库节点","g.V().hasLabel('issue').has('name', 'ISSUE-306').bothE('belong').otherV().hasLabel('repository').as('b').bothE('has').otherV().hasLabel('pullRequest').has('name', 'PR-352').select('b')"
"查找公司微软创造的软件,以及使用这些软件的软件","g.V().has('company', 'name', '微软').outE('creates').inV().hasLabel('software').as('b').inE('uses').outV().hasLabel('software').as('c').select('b', 'c')"
 给定文学院的学生，以及这些学生选择的课程，返回这些课程的课时。,"g.V().has('name', '文学院').out('has').hasLabel('student').out('selects').values('courseHour')"
"请帮我找出value大于等于383或peopleNumber为空的forum contain的user的名称,以及这些user likes的post的名称","g.V().hasLabel('forum').or(has('value', gte(383)), hasNot('peopleNumber')).outE('contain').inV().hasLabel('user').as('b').outE('likes').inV().hasLabel('post').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
