question,gremlin_query
请帮我找出与名为李思思和何思思的用户标签相同的节点,"g.V().has('user', 'name', '李思思').outE('relation').inV().as('b').inE('relation').outV().has('user', 'name', '何思思').select('b').values('name')"
"查找所有名为赵伟的点的,性别为famale或名字不是韩科的伙伴,返回这些伙伴的薪资,和边的权重,f0,源点id","g.V().has('name', '赵伟').as('a').outE('partner').as('e').inV().as('b').where(or(__.has('gender', 'famale'), __.has('name', neq('韩科')))).select('b', 'e').by(select('salary')).by(union(select('weight'), select('f0'), select('srcId')).fold())"
"输入请求点id的列表564,146,328,762,428, 以属性id作为相等条件,帮我查询author write的book,返回其源点的height对height取余的平均值,以及目标点的wordCount的求和值对24取余的求和值","g.inject([564, 146, 328, 762, 428]).as('p').unfold().as('id').V().hasLabel('author').has('id', __.select('id')).as('a').outE('author_write_book').as('e').inV().hasLabel('book').as('b').select('a', 'b').by().project('height_mod', 'wordCount_sum').by(__.select('a').values('height').math('_ % _')).by(__.select('b').values('wordCount').sum()).select('wordCount_sum').math('_ % 24').as('wordCount_mod').select('height_mod', 'wordCount_mod').fold().project('avg_height_mod', 'sum_wordCount_mod').by(__.unfold().select('height_mod').mean()).by(__.unfold().select('wordCount_mod').sum())"
请找出赵梅和吴强共同创建的点,"g.V().has('person', 'name', '赵梅').outE('creates').inV().as('b').inE('creates').outV().has('person', 'name', '吴强').select('b')"
 查询同时拥有标签和名称为Post_179和Post_340的节点的信息。,"g.V().has('name', 'Post_179').outE('has').inV().hasLabel('tag').as('b').inE('has').outV().has('name', 'Post_340').select('b')"
"查询184个处方Prescription_359和Prescription_151,共同的伙伴","g.V().has('prescription', 'name', 'Prescription_359').outE('partner').inV().as('b').inE('partner').outV().has('prescription', 'name', 'Prescription_151').select('b').limit(184)"
"请帮我找出雇佣person郑国强认识的person,的公司","g.V().has('person', 'name', '郑国强').out('knows').as('b').in('employee').hasLabel('company').as('c').select('b', 'c')"
"给出全部和person吴国强有关系的person,返回这些点的id,height,salary","g.V().hasLabel('person').has('name', '吴国强').bothE().otherV().hasLabel('person').project('id', 'height', 'salary').by('id').by('height').by('salary')"
 请帮我查找郑伟的点接受的处方，以及郑伟被诊断的医生，然后一起回复我。,"g.V().has('name', '郑伟').as('a').outE('accept').inV().hasLabel('prescription').as('b').select('a').inE('diagnose').outV().hasLabel('doctor').as('c').select('a', 'b', 'c')"
"输入请求点id的列表648,730,297,123,151, 以属性id作为相等条件,查询和label为person的点有person_likes_person关系的person,且和这些person有person_knows_person关系的person,且和这些person有person_pay_person关系的person","g.inject([648, 730, 297, 123, 151]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).as('a').outE('person_likes_person').inV().hasLabel('person').as('b').outE('person_knows_person').inV().hasLabel('person').as('c').outE('person_pay_person').inV().hasLabel('person').as('d').select('d')"
"给出被城市上海包含的公司,和上海属于的国家","g.V().hasLabel('city').has('name', '上海').as('b').outE('belong').inV().hasLabel('country').as('c').select('b').inE('contain').outV().hasLabel('company').as('a').select('a', 'b', 'c')"
找出标签为'person'且同时属于杜雪和吴思思的relation节点列表。,"g.V().hasLabel('person').has('name', '杜雪').outE('relation').inV().as('b').inE('relation').outV().hasLabel('person').has('name', '吴思思').select('b').values('name')"
"以(60,'其他',184),(58,'喜剧',59)作为请求表数据,属性分别为id,name,value, 以属性value作为相等条件,查找和forum有关联的post节点,并根据其value,name分组,返回value,name,以及wordCount对366取余的值","g.inject([['id':60,'name':'其他','value':184],['id':58,'name':'喜剧','value':59]]).as('p').unfold().as('p_row').select('p_row').by(values).as('p_val').V().hasLabel('forum').as('a').where(eq('p_val')).by('value').bothE('forum_contain_post').otherV().hasLabel('post').as('b').select('b').by(valueMap('value','name','wordCount')).as('b_map').select('b_map').by(project('value','name','wordCount_mod').by(select('value')).by(select('name')).by(select('wordCount').math('_ % 366'))).dedup().by(select('value','name')).select('value','name','wordCount_mod')"
返回与腾讯和电子科技大学都有关联的公司的信息，包括规格、人数和名称。,"g.V().has('company', 'name', '腾讯').outE().inV().hasLabel('company').as('b').inE().outV().has('university', 'name', '电子科技大学').select('b').values('scale', 'peopleNumber', 'name')"
"请帮我查找74个买家马梅和何思琪,共同的伙伴","g.V().has('buyer', 'name', '马梅').as('a').outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().has('buyer', 'name', '何思琪').as('c').select('b').limit(74)"
"使用列为name,area,value, 数据为('俄罗斯',85309,222),('美国',72565,631),('韩国',91756,454)的子查询作为输入表, 源点的area等于输入表area,请帮我找出city深圳的friend的friend的partner","g.withSideEffect('p', [['俄罗斯', 85309, 222], ['美国', 72565, 631], ['韩国', 91756, 454]]).V().hasLabel('city').has('name', '深圳').where(__.values('area').is(within(__.select('p').unfold().tail(2).limit(1)))).out('friend').out('friend').out('partner')"
 找出南京大学中类型为university的地点，返回它们的ID、名称和级别。,"g.V().hasLabel('university').has('name', '南京大学').project('a.id', 'a.name', 'a.level').by(values('id')).by(values('name')).by(values('level'))"
给出与读者杜梅有喜欢关系的2度以内的环,"g.V().has('reader', 'name', '杜梅').as('a').bothE('likes').otherV().as('b').where(__.as('b').both().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"请帮我找出和company阿里有关的company,再请帮我找出和阿里creates的其他software,返回它们","g.V().hasLabel('company').has('name', '阿里').as('a').bothE().otherV().hasLabel('company').as('b').select('a').outE('creates').inV().hasLabel('software').as('c').select('a', 'b', 'c')"
找出与马梅和孙思琪都相关联的161位用户,"g.V().has('user', 'name', '马梅').outE('relation').inV().as('b').inE('relation').outV().has('user', 'name', '孙思琪').select('b').limit(161)"
"给出所有与美国存在包含关系的城市,城市与国家存在属于关系的点,返回这些点的面积","g.V().has('name', '美国').out('contain').hasLabel('city').out('belong').hasLabel('country').values('area')"
"查询状态是Running且id小于37的事项属于的仓库的名称,以及这些仓库 拥有的事项的名称","g.V().hasLabel('issue').has('status', 'Running').has('id', lt(37)).outE('belong').inV().hasLabel('repository').as('b').outE('has').inV().hasLabel('issue').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
请帮我找出性别不是女性或者身高不超过193的用户喜欢的帖子的名称，以及这些帖子所带的标签的名称。,"g.V().hasLabel('user').has('gender', neq('famale')).or().has('height', lte(193)).outE('likes').inV().hasLabel('post').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我找出名为赵雪的,salary等于3160的relation,返回这些relation的height,和边的targetId,weight,srcId","g.V().has('name', '赵雪').outE('relation').as('e').inV().has('salary', 3160).as('b').select('b', 'e').by('height').by(values('targetId', 'weight', 'srcId'))"
请帮我找出重庆大学和南京大学共同的167个合作伙伴。,"g.V().has('university', 'name', '重庆大学').outE('partner').inV().as('b').inE('partner').outV().has('university', 'name', '南京大学').select('b').limit(167)"
查询与作家相关的书籍节点，按创建时间和ID分组，并返回创建时间和ID。,"g.V().hasLabel('author').as('a').outE('write').as('e').inV().hasLabel('book').as('b').select('b').values('createTime', 'id').group().by().by(fold())"
查询名为Jimmy的节点knows的company或software,"g.V().has('name', 'Jimmy').outE('knows').inV().or(hasLabel('company'), hasLabel('software')).values('name')"
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出和软件Mysql有关的公司,称为X,再请帮我找出和这个X有关联的其他公司,以及和X有关联的公司","g.V().has('software', 'name', 'Mysql').as('a').bothE().otherV().hasLabel('company').as('b').bothE().otherV().hasLabel('company').as('c').select('b').bothE().otherV().hasLabel('company').as('d').select('a', 'b', 'c', 'd')"
"返回23个名为杜科的点购买的标签等于软件的节点,且节点价值小于604,语言不是c","g.V().has('name', '杜科').outE('buy').inV().hasLabel('software').has('value', lt(604)).has('lang', neq('c')).limit(23)"
"帮我查询和论坛有关联的用户节点,并根据其性别分组,返回性别,以及salary的最小值减6355的和",g.V().hasLabel('forum').as('a').bothE('contain').otherV().hasLabel('user').as('b').group().by('b.gender').by(__.select('b').values('salary').min().is(neq(null)).math('_ - 6355').sum())
"以('Comment_343',2001-06-05,36)作为请求表数据,属性分别为name,createTime,id, 以属性name作为相等条件,找出名为何雪和周红的,标签为person的点公共的朋友节点的名单","g.withSideEffect('p', [['name':'Comment_343','createTime':'2001-06-05','id':36]]).V().hasLabel('person').as('a').where(and(__.select('a').values('name').is(eq(constant('何雪'))), __.select('a').values('name').is(eq(__.select('p').unfold().select('name'))))).outE('friend').inV().as('b').inE('friend').outV().hasLabel('person').as('c').where(__.select('c').values('name').is(eq(constant('周红')))).select('b').values('name')"
找出张建聪和韩思琪这两位买家之间的关系。,"g.V().hasLabel('buyer').has('name', '张建聪').as('a').outE('relation').as('e').inV().as('b').inE('relation').as('e2').outV().hasLabel('buyer').has('name', '韩思琪').as('c').select('b').limit(103)"
"查询与大学浙江大学有关,且与公司腾讯有关系的城市节点","g.V().has('university', 'name', '浙江大学').bothE('belong').otherV().hasLabel('city').bothE('contain').otherV().has('company', 'name', '腾讯').path().by(__.choose(__.hasLabel('city'), __.identity(), __.otherV())).unfold().filter(__.hasLabel('city')).dedup()"
找出77个与loan_74和loan_7都存在关系的company或loan或person节点,"g.V().has('name', 'loan_74').outE().inV().hasLabel(within('company', 'loan', 'person')).as('b').inE().outV().has('name', 'loan_7').select('b').limit(77)"
"找出名为腾讯的点合作的全部大学,并对这些大学的名字进行求和","g.V().has('name', '腾讯').outE('cooperate').inV().hasLabel('university').values('name').sum()"
"以441,34,566,617作为请求点id, 以属性id作为相等条件,帮我查询名为郑梅和徐建国的,标签等于buyer的点公共的friend节点的名单","g.inject([441, 34, 566, 617]).as('p').unfold().as('id').V().hasLabel('buyer').has('id', __.select('id')).has('name', '郑梅').as('a').out('friend').as('b').in('friend').hasLabel('buyer').has('name', '徐建国').as('c').select('b').values('name').dedup()"
 查找与王若涵有关且出售短袖商品的卖家。,"g.V().has('buyer', 'name', '王若涵').bothE('consult').otherV().hasLabel('seller').bothE('has').otherV().has('goods', 'name', '短袖').select('b')"
"帮我查询141个person郑若涵和杜思思,共同的父母","g.V().has('person', 'name', '郑若涵').outE('parent').inV().as('b').inE('parent').as('e2').outV().has('person', 'name', '杜思思').select('b').limit(141)"
"帮我查询person赵月relates的person,以及knows这些person的person","g.V().has('person', 'name', '赵月').outE('relates').inV().hasLabel('person').as('b').inE('knows').outV().hasLabel('person').as('c').select('b', 'c')"
请帮我找出所有和部门法学院有1跳关系的课程,"g.V().has('department', 'name', '法学院').out().hasLabel('course')"
"帮我查询拥有学生李强的部门,和这些部门拥有的学生","g.V().hasLabel('student').has('name', '李强').as('a').in('has').hasLabel('department').as('b').out('has').hasLabel('student').as('c').select('b', 'c')"
"以554,690,754,643,689作为请求点id, 源点的id等于输入表id,请帮我找出所有和论坛百度贴吧有关系的论坛节点,返回这些点的名字","g.inject([554, 690, 754, 643, 689]).as('p').V().hasLabel('forum').has('id', within('p')).has('name', '百度贴吧').bothE().otherV().hasLabel('forum').values('name')"
"帮我查询用户王伟喜欢的帖子,以及包含这些帖子的论坛, 令论坛的薪资等于用户的年龄,令论坛的名字等于论坛的创建时间, 返回用户的名字,帖子的价值,论坛的人数","g.V().has('user', 'name', '王伟').as('a').outE('likes').inV().hasLabel('post').as('b').inE('contain').outV().hasLabel('forum').as('c').sideEffect(select('c').property('salary', select('a').values('age'))).sideEffect(select('c').property('name', select('c').values('createTime'))).select('a', 'b', 'c').by('name').by('value').by('peopleNumber')"
"给出公司合作的大学,返回其源点的人数对770取余加911除24乘758对32取余的数量,以及目标点的id乘id加3的值","g.V().hasLabel('company').as('a').outE('cooperate').as('e').inV().hasLabel('university').as('b').project('expr1', 'expr2').by(__.select('a').values('peopleNumber').math('_ % 770').math('_ + 911').math('_ / 24').math('_ * 758').math('_ % 32').count(local)).by(__.select('b').values('id').math('_ * _').math('_ + 3'))"
"返回20个age减80大于等于28的author,根据age升序排列","g.V().hasLabel('author').has('age', P.gte(108)).order().by('age', Order.asc).limit(20)"
查找所有名为韩红的节点购买的person,"g.V().has('name', '韩红').outE('buy').inV().hasLabel('person')"
"用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查找标签等于teacher的点,返回17个",g.V().hasLabel('teacher').limit(17)
请帮我找出与医生郑月有创造关系的3度的环,"g.V().has('doctor', 'name', '郑月').as('a').repeat(bothE().otherV().simplePath()).times(2).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
 先查找与ID为15的人有关联的人，再查找这些人的人际关系。,"g.V().has('person', 'id', '15').as('a').bothE().otherV().hasLabel('person').as('b').both().hasLabel('person').as('c').select('b').bothE('friend').otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"给出仓库拥有的事项, 令事项的状态的值等于创造事项的用户的名字的平均值, 再查找事项属于的仓库","g.V().hasLabel('repository').as('a').outE('has').hasLabel('has').inV().hasLabel('issue').as('b').sideEffect(__.project('status').by(__.select('b').inE('creates').hasLabel('creates').outV().hasLabel('user').values('name').mean())).select('b').outE('belong').hasLabel('belong').inV().hasLabel('repository').as('d').select('b', 'd').by('status').by()"
"返回company employee的person,返回其源点的peopleNumber加552的值,以及目标点的salary减9753的最小值","g.V().hasLabel('company').as('a').outE('employee').as('e').inV().hasLabel('person').as('b').project('peopleNumber_plus_552', 'min_salary_minus_9753').by(select('a').values('peopleNumber').math('_ + 552')).by(select('b').values('salary').math('_ - 9753').min())"
请帮我找出那些与'cinema好视影院'有'releases'关系，并且与'tag文艺'有'has'关系的'film'节点。请返回这些'film'的'value'、'id'、'category'以及'cinema好视影院'的'address'和'tag文艺'的'value'。,"g.V().hasLabel('cinema').has('name', '好视影院').as('a').outE('releases').inV().hasLabel('film').as('b').inE('has').outV().hasLabel('tag').has('name', '文艺').as('c').select('a', 'b', 'c').by('address').by(values('value', 'id', 'category')).by('value')"
找到所有源点标签为'book'，边标签为'refers'的边。返回这些边的srcId除以srcId的结果，以及targetId对32取余后加124.85的最大值。,"g.E().hasLabel('refers').where(outV().hasLabel('book')).project('expr1', 'expr2').by(values('srcId').math('_ / _')).by(values('targetId').math('_ % 32').math('_ + 124.85')).select(values).select('expr2').max()"
"请帮我找出所有源点类型为country,边类型为contain,且srcId大于等于120且srcId为14且f0大于787的边","g.V().hasLabel('country').as('a').outE('contain').has('srcId', gte(120)).has('srcId', 14).has('f0', gt(787)).as('e').select('e')"
"查询源点名字不是周雪,年龄在15到33之间,目标点年龄小于30,年龄小于3,且类型是家人的边","g.V().has('name', neq('周雪')).has('age', between(15, 33)).outE('family').as('e').inV().has('age', lt(30)).has('age', lt(3)).select('e')"
找出与22个买家类型的点存在关联关系的订单，并且这些订单中包含的商品。,g.V().hasLabel('buyer').limit(22).out('creates').hasLabel('orders').out('contain').hasLabel('goods')
"用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出前170个标签为person_pay_person的边",g.E().hasLabel('person_pay_person').limit(170)
请帮我找出与'呐喊'和'罪与罚'都有关联，并返回它们各自的id、wordCount、price以及'呐喊'和'罪与罚'的名称。,"g.V().has('book', 'name', '呐喊').as('a').outE('refers').inV().hasLabel('book').as('b').inE('refers').outV().has('book', 'name', '罪与罚').as('c').select('a', 'b', 'c').by('name').by(values('id', 'wordCount', 'price')).by('id')"
"查找与person杜强有关,且与person黄建国有关系的person节点","g.V().has('person', 'name', '杜强').bothE('parent').otherV().hasLabel('person').bothE('lover').otherV().has('person', 'name', '黄建国').select('b')"
"以('我不是药神',1,815),('少年足球',27,502)作为请求表数据,属性分别为name,id,value, 以属性id作为相等条件,给出label为cinema的点,返回103个","g.inject([['我不是药神', 1, 815], ['少年足球', 27, 502]]).as('p').unfold().as('row').select('p').unfold().as('p_row').V().hasLabel('cinema').has('id', __.select('p_row').select('id')).limit(103)"
查找所有和评论Comment_480之间有属于关系的电影,"g.V().hasLabel('comment').has('name', 'Comment_480').outE('belong').inV().hasLabel('film')"
"查找所有名为赵科的,身高不等于183的朋友,返回这些朋友的年龄,和边的权重","g.V().has('name', '赵科').outE('friend').as('e').inV().has('height', neq(183)).project('b.age', 'e.weight').by('age').by(select('e').values('weight'))"
"找出账号的朋友,或其朋友的朋友","g.V().hasLabel('account').as('a').outE('friend').inV().hasLabel('account').range(1, 2).as('b').select('b')"
 搜索四川大学的大学。,"g.V().hasLabel('university').has('name', '四川大学')"
"用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));找出书呐喊的所有类型为引用的边,并根据f0从小到大排列,返回153个","g.V().has('book', 'name', '呐喊').outE('book_refers_book').as('e').inV().as('b').select('e', 'b').order().by(select('e').values('f0'), asc).limit(153).select('b')"
"帮我查询8个和类型是软件的点有使用关系的软件,且和这些软件有使用关系的软件",g.V().hasLabel('software').as('a').out('uses').hasLabel('software').as('b').out('uses').hasLabel('software').as('c').select('c').limit(8)
"请帮我查找和名为Tom的person有相关者关系,或有相关者的相关者关系的person","g.V().hasLabel('person').has('name', 'Tom').outE('relation').inV().hasLabel('person').simplePath().times(2).emit().dedup().values('name')"
给出88个与吴月和韩科都存在关系的书或读者节点,"g.V().has('name', '吴月').as('a').outE().as('e').inV().as('b').or(hasLabel('book'), hasLabel('reader')).as('b').inE().as('e2').outV().as('c').has('name', '韩科').select('b').limit(88)"
请找出与病人周建聪和李轩都有关联的药品节点，并返回它们的名字、价格和ID。,"g.V().has('patient', 'name', '周建聪').outE().inV().hasLabel('medicine').as('b').inE().outV().has('patient', 'name', '李轩').select('b').values('name', 'price', 'id')"
 请问有没有一个叫马宏和马思思的人，他们之间是否有共同的友人？,"g.V().has('user', 'name', '马宏').outE('friend').inV().as('b').inE('friend').outV().has('user', 'name', '马思思').select('b').limit(176)"
"查找喜欢用户周若涵发布的帖子,的用户","g.V().has('user', 'name', '周若涵').outE('publish').inV().hasLabel('post').as('b').inE('likes').outV().hasLabel('user').as('c').select('b', 'c')"
"请帮我找出label为课程的点,返回67个",g.V().hasLabel('course').limit(67)
"查询和标签等于论坛的点有包含关系的用户,且和这些用户有喜欢关系的帖子,且和这些帖子有拥有关系的标签",g.V().hasLabel('forum').as('a').out('contain').hasLabel('user').as('b').out('likes').hasLabel('post').as('c').out('has').hasLabel('tag').as('d').select('d')
"以('famale',50,2518),('famale',10,6721),('male',33,1330),('famale',64,1125)作为请求表数据,属性分别为gender,id,salary, 以属性id作为相等条件,给出158个名为艺术学院的点拥有的类型是学生的节点,且其性别不是male","g.withSideEffect('p', [['gender': 'famale', 'id': 50, 'salary': 2518], ['gender': 'famale', 'id': 10, 'salary': 6721], ['gender': 'male', 'id': 33, 'salary': 1330], ['gender': 'famale', 'id': 64, 'salary': 1125]]).V().has('name', '艺术学院').where(__.in('department_has_student').has('id', within(__.select('p').unfold().select('id')))).out('department_has_student').hasLabel('student').has('gender', neq('male')).limit(158)"
查询全部和university重庆大学之间有has关系的department,"g.V().hasLabel('university').has('name', '重庆大学').outE('has').inV().hasLabel('department')"
"返回城市包含的公司, 令公司的规格的值等于合作公司的大学的名字的平均值, 再查找公司合作的大学","g.V().hasLabel('city').as('a').outE('contain').inV().hasLabel('company').as('b').sideEffect(__.select('b').aggregate('companies')).barrier().select('companies').unfold().as('b').project('scale', 'd').by(__.select('b').inE('cooperate').outV().hasLabel('university').values('name').mean()).by(__.select('b').outE('cooperate').inV().hasLabel('university').as('d').select('d'))"
找出事项的2跳以内的环,"g.V().hasLabel('issue').as('a').repeat(both().simplePath()).times(2).where(loops().is(gt(0))).where(path().unfold().tail(1).is(eq('a'))).dedup().project('a.id', 'b_id').by(select('a').id()).by(tail(local, 1).id())"
"请帮我查找所有和user点有creates关系的pullRequest节点,且边满足条件timeStamp大于11,目标pullRequest节点createTime不是2004年08月24日","g.V().hasLabel('user').as('a').outE('creates').has('timeStamp', gt(11)).as('e').inV().hasLabel('pullRequest').has('createTime', neq('2004-08-24')).as('b').select('b')"
"查找和prescription Prescription_159有关系的department,返回这些点的name,weight,price","g.V().hasLabel('prescription').has('name', 'Prescription_159').bothE().otherV().hasLabel('department').project('name', 'weight', 'price').by(values('name')).by(values('weight')).by(values('price'))"
 请帮我查找与医生韩国强有诊断关系的患者，再帮我查找与韩国强的处方创建关系。,"g.V().hasLabel('doctor').has('name', '韩国强').as('a').outE('diagnose').inV().hasLabel('patient').as('b').select('a').inE('creates').outV().hasLabel('prescription').as('c').select('a', 'b', 'c')"
"请帮我查找和类型是person的点有likes关系的person,以及和这些person有pay关系的person,以及和这些person有pay关系的person",g.V().hasLabel('person').as('a').outE('likes').inV().hasLabel('person').as('b').outE('pay').inV().hasLabel('person').as('c').outE('pay').inV().hasLabel('person').as('d').select('d')
帮我查询全部和publisher郑若涵之间有publish关系的book,"g.V().hasLabel('publisher').has('name', '郑若涵').outE('publish').inV().hasLabel('book')"
"请帮我找出id为37的person有关的person的parent, 再请帮我找出和person有关系的lover","g.V().has('person', 'id', 37).as('a').bothE().otherV().hasLabel('person').as('b').both().hasLabel('person').as('temp').select('b').outE('parent').inV().hasLabel('person').as('c').select('b').outE('lover').inV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"以290作为请求点id, 以属性id作为相等条件,帮我查询city伦敦contain的university,被其他city contain的数量","g.withSideEffect('p_id', 290).V().hasLabel('city').has('id', 'p_id').has('name', '伦敦').out('city_contain_university').in('city_contain_university').where(neq('p_id')).dedup().count()"
返回作者陈轩和张宏有关系的所有作者节点，以及他们的薪水和姓名。,"g.V().has('author', 'name', '陈轩').as('a').outE().as('e').inV().hasLabel('author').as('b').inE().as('e2').outV().has('author', 'name', '张宏').as('c').select('b').values('salary', 'name')"
查询全部名为loan_23的节点存款的账号或贷款,"g.V().has('name', 'loan_23').outE('deposit').inV().hasLabel(within('account', 'loan')).dedup()"
"查找名为武汉的公司或城市或大学,以及与其有关的国家,并返回武汉的id和这些国家的名字","g.V().has('name', '武汉').hasLabel(within('company', 'city', 'university')).bothE().otherV().hasLabel('country').project('a_id', 'b_name').by(select(all, 'a').by('id')).by('name')"
"用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找名为马思思的,name等于陈月的family,返回这些family的name,和边的f1","g.V().has('person', 'name', '马思思').outE('person_family_person').as('e').inV().has('person', 'name', '陈月').select('e').project('b_name', 'e_f1').by(__.inV().values('name')).by(values('f1'))"
"找出30个和类型是书的点有引用关系的书,且和这些书有引用关系的书",g.V().hasLabel('book').as('a').out('refers').hasLabel('book').as('b').out('refers').hasLabel('book').as('c').select('c').limit(30)
"给出和标签为编辑的点有发布关系的书,以及和这些书有引用关系的书,以及和这些书有引用关系的书",g.V().hasLabel('publisher').as('a').out('publish').hasLabel('book').as('b').out('refers').hasLabel('book').as('c').out('refers').hasLabel('book').as('d').select('d')
"查找61个和label为author的点有knows关系的author,以及和这些author有knows关系的author",g.V().hasLabel('author').as('a').out('knows').hasLabel('author').as('b').out('knows').hasLabel('author').as('c').select('c').limit(61)
 找出所有读者和书之间的喜欢边。,g.V().hasLabel('reader').outE('likes').as('e').inV().hasLabel('book').select('e')
"查找id为32的person申请的贷款, 并将贷款有关的person的薪资的个数赋值给贷款的权重, 接着查询贷款的权重小于32的贷款存款的账号","g.V().has('person', 'id', 32).as('a').outE('apply').inV().hasLabel('loan').as('b').sideEffect(__.select('b').aggregate('b_agg')).select('b').as('b_temp').inE().outV().hasLabel('person').values('salary').dedup().count().as('weight').select('b_temp').sideEffect(__.property('weight', __.select('weight'))).select('b_agg').unfold().as('b').has('weight', lt(32)).outE('deposit').inV().hasLabel('account').as('d').select('b', 'd').by('weight').by()"
"给出与名为韩建聪和何科的点共同支付的,类型是person的节点","g.V().has('name', '韩建聪').outE('pay').inV().hasLabel('person').as('b').inE('pay').outV().has('name', '何科').select('b')"
找出id为62的点的名字,"g.V().has('id', 62).values('name')"
"给出和商品杯子有关的订单,称为X,再给出和这个X有关联的其他卖家,以及和X有关联的买家","g.V().has('goods', 'name', '杯子').as('a').bothE().otherV().hasLabel('orders').as('b').bothE().otherV().hasLabel('seller').as('c').select('b').bothE().otherV().hasLabel('buyer').as('d').select('a', 'b', 'c', 'd')"
"请帮我查找部门的三角的环,边类型是拥有, 并返回这些点的id","g.V().hasLabel('department').as('a').outE('has').inV().as('b').outE('has').inV().as('c').where(__.out('has').as('a')).select('a', 'b', 'c').by().by(id).by(id).project('a', 'b_id', 'c_id').by().by(select('b').id()).by(select('c').id())"
"帮我查询被部门生物学院拥有的学生,和生物学院拥有的教师","g.V().hasLabel('department').has('name', '生物学院').as('b').bothE('has').otherV().hasLabel('student').as('a').select('b').bothE('has').otherV().hasLabel('teacher').as('c').select('a', 'b', 'c')"
"请帮我查找与名为XXD和Geaflow123的点共同repay的,label为loan的节点","g.V().has('name', 'XXD').outE('repay').inV().hasLabel('loan').as('b').inE('repay').outV().has('name', 'Geaflow123').select('b')"
"找出35个名为孙科的点likes的label为post的节点,且节点createTime等于2008年06月05日,createTime不等于2031年11月06日","g.V().has('name', '孙科').outE('likes').inV().hasLabel('post').has('createTime', '2008-06-05').has('createTime', neq('2031-11-06')).limit(35)"
 找出与person节点有关联的person节点，按其salary分组并返回。,g.V().hasLabel('person').as('a').bothE('likes').otherV().hasLabel('person').as('b').select('b').values('salary').groupCount()
查询所有与company美团有关系的company的scale,"g.V().has('company', 'name', '美团').bothE().otherV().hasLabel('company').values('scale')"
查找全部和person杜伟之间有朋友关系的person,"g.V().has('person', 'name', '杜伟').out('friend').hasLabel('person')"
 请帮我查找李宏的父母的家庭背景。,"g.V().has('person', 'name', '李宏').out('parent').out('family').out('parent')"
从'Faker'点获取账户，然后返回这些点是否是块。,"g.V().hasLabel('account').has('name', 'Faker').values('isBlock')"
"查询和书白夜行有关的编辑,再查询和白夜行引用的其他书,返回它们","g.V().hasLabel('book').has('name', '白夜行').as('a').bothE().as('e').otherV().hasLabel('publisher').as('b').select('a').outE('refers').as('e2').inV().hasLabel('book').as('c').select('a', 'b', 'c')"
"以995,598,379,149作为请求点id, 源点的id等于输入表id,查找标签等于user的点,返回87个","g.inject([995, 598, 379, 149]).unfold().as('p').V().hasLabel('user').has('id', __.select('p')).limit(87)"
找出所有标签为学生或大学的点,"g.V().hasLabel(within('student', 'university'))"
找出属于类型为film且同时与Comment_228和Comment_176两点都相关的所有节点。,"g.V().has('name', 'Comment_228').outE('belong').inV().hasLabel('film').as('b').inE('belong').outV().has('name', 'Comment_176').select('b')"
帮我查询全部与person郑红有关系的person的身高,"g.V().hasLabel('person').has('name', '郑红').bothE().otherV().hasLabel('person').values('height')"
"使用列为f0,f1,srcId, 数据为(953,true,45)的子查询作为输入表, 源点的f0等于输入表f0,帮我查询所有id为103的medicine关联的patient,和以diagnose关系关联了这些patient的其他doctor","g.withSideEffect('p', [[953, true, 45]]).V().hasLabel('medicine').has('f0', __.select('p').unfold().select('f0')).has('id', '103').bothE().otherV().hasLabel('patient').as('b').inE('doctor_diagnose_patient').otherV().hasLabel('doctor').as('c').select('b', 'c')"
查询贷款defaultName的相关者及其伙伴,"g.V().hasLabel('loan').has('name', 'defaultName').outE('relation').inV().outE('relation').inV().outE('partner').inV()"
"请帮我找出从department内科出发,经过label为has的边,走3到6度到达的doctor点","g.V().has('department', 'name', '内科').repeat(outE('has').otherV()).times(3).emit().repeat(outE('has').otherV()).times(3).hasLabel('doctor').dedup()"
找出与部门艺术学院和土木学院都存在拥有关系的点,"g.V().hasLabel('department').has('name', '艺术学院').outE('has').inV().as('b').inE('has').outV().hasLabel('department').has('name', '土木学院').select('b')"
返回与person韩思琪和张建国都存在likes关系的点,"g.V().has('person', 'name', '韩思琪').out('likes').as('b').in('likes').has('person', 'name', '张建国').select('b')"
查询label为person的点,g.V().hasLabel('person')
 请帮我查找买家张伟和订单Order_198之间的关联订单，并返回它们的价格和ID。,"g.V().has('buyer', 'name', '张伟').outE().inV().has('orders').as('b').inE().outV().has('orders', 'name', 'Order_198').select('b').values('price', 'id')"
"找出类型是大学,名为重庆大学的点,返回这些点的价值,等级,名字","g.V().hasLabel('university').has('name', '重庆大学').project('a.value', 'a.level', 'a.name').by(values('value')).by(values('level')).by(values('name'))"
找出全部和account BIN之间有repay关系的loan,"g.V().hasLabel('account').has('name', 'BIN').outE('repay').inV().hasLabel('loan')"
"帮我查询和用户王建聪有关的用户,称为X,再帮我查询和这个X有关联的其他论坛,以及和X有关联的帖子","g.V().has('user', 'name', '王建聪').as('a').bothE().otherV().hasLabel('user').as('b').bothE().otherV().hasLabel('forum').as('c').select('b').bothE().otherV().hasLabel('post').as('d').select('a', 'b', 'c', 'd')"
 给出与知乎和推特相关的106个论坛节点。,"g.V().has('name', '知乎').outE().as('e').inV().hasLabel('forum').as('b').inE().as('e2').outV().has('name', '推特').select('b').limit(106)"
请帮我查找buyer郑科consult的seller节点ask的buyer,"g.V().hasLabel('buyer').has('name', '郑科').out('consult').hasLabel('seller').out('ask').hasLabel('buyer')"
"找出全部和university清华大学有关系的company或city,返回这些点的area","g.V().has('university', 'name', '清华大学').bothE().otherV().hasLabel(within('company', 'city')).values('area')"
"查询用户孙思思的所有相关者,的源点id减124除83的值","g.V().has('user', 'name', '孙思思').outE('relation').project('result').by(math('(srcId - 124) / 83'))"
"请帮我查找所有陈若涵的点认识的person,然后请帮我查找陈若涵被喜欢的person,一起返回","g.V().has('name', '陈若涵').as('a').outE('knows').inV().as('b').select('a').inE('likes').outV().as('c').select('a', 'b', 'c')"
"返回peopleNumber为空且area为空的city contain的company的名称,以及这些company belong的city的名称","g.V().hasLabel('city').has('peopleNumber', null).has('area', null).out('contain').hasLabel('company').as('b').out('belong').hasLabel('city').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
帮我查询被department放射科has的doctor,"g.V().hasLabel('department').has('name', '放射科').inE('has').outV().hasLabel('doctor').as('b').outE('has').inV().hasLabel('doctor').as('a').select('a', 'b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出所有和账号点有转账关系的账号节点,且边满足条件f0大于961,目标账号节点满足条件创建时间不是2003年04月08日","g.V().hasLabel('account').as('a').outE('account_transfer_account').has('f0', gt(961)).as('e').inV().hasLabel('account').has('createTime', neq('2003-04-08')).as('b').select('b')"
帮我找出所有医生的朋友，或者他们朋友的朋友,g.V().hasLabel('doctor').repeat(out('friend')).times(2).dedup()
 请帮我查询与ID为65的教师有关系的其他教师，然后再帮我查询与这些教师有关系的其他伙伴。,"g.V().has('teacher', 'id', '65').as('a').bothE().otherV().hasLabel('teacher').as('b').bothE('partner').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"帮我查询146个名为吴强的点knows的类型是person的节点,且节点height大于等于162","g.V().has('name', '吴强').outE('knows').inV().hasLabel('person').has('height', gte(162)).limit(146)"
"请帮我找出拥有标签悬疑的帖子,和这些帖子拥有的标签","g.V().hasLabel('tag').has('name', '悬疑').inE('has').outV().as('b').outE('has').inV().as('c').select('b', 'c')"
帮我找一下徐伟的病人的关系伙伴的朋友,"g.V().has('patient', 'name', '徐伟').out('relation').out('partner').out('friend')"
查找与author徐伟有knows关系的3度的环,"g.V().has('author', 'name', '徐伟').as('a').repeat(bothE('knows').otherV().simplePath()).times(2).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
 请帮我找出university的朋友，或者是朋友的朋友。,"g.V().hasLabel('university').out('friend').range(1, 2).dedup()"
找出与标签为publisher的点有publish关系的112本书，以及这些书有refers关系的其他书籍。,g.V().hasLabel('publisher').as('a').out('publish').hasLabel('book').as('b').out('refers').hasLabel('book').as('c').select('c').limit(112)
请帮我查找以属于关系关联了电影功夫的评论,"g.V().hasLabel('film').has('name', '功夫').inE('belong').outV().hasLabel('comment')"
 查询与周思琪有关的公司，再查询周思琪购买的其他软件，返回它们。,"g.V().has('person', 'name', '周思琪').as('a').bothE().otherV().hasLabel('company').as('b').select('a').outE('buy').inV().hasLabel('software').as('c').select('a', 'b', 'c')"
查询全部名为Faker的节点还款的公司或账号,"g.V().has('name', 'Faker').outE('repay').inV().or(hasLabel('company'), hasLabel('account'))"
 请帮我查找40个与用户类型为'user'的点有'likes'关系的帖子，并且这些帖子与相应的标签有'has'关系。,g.V().hasLabel('user').out('likes').hasLabel('post').out('has').hasLabel('tag').limit(40)
帮我查询医生韩雪创造的处方节点包含的药品,"g.V().hasLabel('doctor').has('name', '韩雪').outE('creates').inV().hasLabel('prescription').outE('contain').inV().hasLabel('medicine')"
帮我找出与我相关的帖子，以及发布这些帖子的其他用户,"g.V().has('user', 'id', '173').bothE().otherV().hasLabel('post').as('b').inE('publish').otherV().hasLabel('user').as('c').select('b', 'c')"
请找出与微软公司有归属关系，并且与滴滴公司有包含关系的城市节点。返回这些城市的名称、微软公司的名称以及滴滴公司的员工人数。,"g.V().has('company', 'name', '微软').as('a').outE('belong').inV().hasLabel('city').as('b').inE('contain').outV().has('company', 'name', '滴滴').as('c').select('a', 'b', 'c').by('name').by('name').by('peopleNumber')"
"帮我查询id为16的用户有关的仓库的伙伴, 再帮我查询和仓库有关系的朋友","g.V().has('user', 'id', 16).as('a').bothE().as('e').otherV().hasLabel('repository').as('b').bothE('partner').as('e2').otherV().as('c').select('b').bothE('friend').as('e3').otherV().as('d').select('a', 'b', 'c', 'd')"
查找和person李轩之间有属于关系的公司,"g.V().has('person', 'name', '李轩').outE('belong').inV().hasLabel('company')"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找person吴强喜欢的person,被其他person喜欢的数量","g.V().has('person', 'name', '吴强').out('person_likes_person').in('person_likes_person').where(neq('吴强')).count()"
"找出146个名为谷歌的点雇佣的标签为person的节点,且其id大于64","g.V().has('name', '谷歌').outE('employee').inV().hasLabel('person').has('id', gt(64)).limit(146)"
"查找id为7的仓库有关的用户的伙伴, 再查找和用户有关系的伙伴","g.V().has('repository', 'id', 7).as('a').bothE().otherV().hasLabel('user').as('b').bothE('partner').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"请帮我找出id为85的person关联的comment,和以creates关系关联了这些comment的其他person","g.V().has('person', 'id', 85).bothE().otherV().hasLabel('comment').as('b').inE('creates').otherV().hasLabel('person').as('c').select('b', 'c')"
请帮我查找前23个满足条件名字为推特的论坛,"g.V().hasLabel('forum').has('name', '推特').limit(23)"
"返回前169个价值不等于70且人数等于5303,或价值小于57的城市","g.V().hasLabel('city').or(and(has('value', neq(70)), has('peopleNumber', 5303)), has('value', lt(57))).limit(169)"
 查询所有Post_419中包含标签的元素，并返回这些元素所关联的用户。,"g.V().has('name', 'Post_419').as('a').outE('has').inV().hasLabel('tag').as('b').select('a').inE('publish').outV().hasLabel('user').as('c').select('a', 'b', 'c')"
"给出从电影院横店影院出发,经过标签等于上映的边,走2跳到达的电影点","g.V().has('cinema', 'name', '横店影院').outE('releases').inV().outE('releases').inV().hasLabel('film')"
"请帮我找出id为14的company有关的software的partner, 再请帮我找出和software有关系的relation","g.V().has('company', 'id', 14).as('a').bothE().otherV().hasLabel('software').as('b').bothE('partner').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
找出id小于25且id为空的电影院上映的电影的名称和它们拥有的标签的名称,"g.V().hasLabel('cinema').has('id', lt(25)).has('id', null).outE('releases').inV().hasLabel('film').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"给出138个名为ISSUE-77的点belong的类型为repository的节点,且节点name不是Tugraph","g.V().has('name', 'ISSUE-77').outE('belong').inV().hasLabel('repository').has('name', neq('Tugraph')).limit(138)"
 请帮我找出与重庆大学合作的company。,"g.V().hasLabel('university').has('name', '重庆大学').as('b').outE('cooperate').as('e').inV().hasLabel('company').as('a').select('a', 'b')"
"帮我查询用户孙思琪发布的帖子,以及包含这些帖子的论坛, 令论坛的字数等于帖子的id, 返回用户的薪资,帖子的语言,论坛的价值","g.V().hasLabel('user').has('name', '孙思琪').as('a').outE('publish').inV().hasLabel('post').as('b').inE('contain').outV().hasLabel('forum').as('c').sideEffect(select('c').property('wordCount', select('b').values('id'))).select('a', 'b', 'c').by('salary').by('lang').by('value')"
"用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));找出源点gender不等于famale或salary小于等于1233,且id为空,边label为author_write_book,且srcId不为空的边,返回这些边的f0减f0的最小值","g.V().hasLabel('author').and(has('gender', neq('famale')).or().has('salary', lte(1233))).has('id', eq(null)).outE('author_write_book').has('srcId', neq(null)).project('diff').by(values('f0', 'f0').math('_ - _')).select('diff').min()"
找出id为161的doctor的关系，再找出与该doctor相关的其他关系。,"g.V().has('doctor', 'id', '161').as('a').bothE().otherV().hasLabel('doctor').as('b').bothE('relation').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"找出名为陈红和张强的,标签为person的点公共的朋友节点的名单","g.V().has('person', 'name', '陈红').out('friend').as('b').in('friend').has('person', 'name', '张强').select('b').values('name')"
"给出标签为拥有,并且f1不等于true或f1不等于false的边","g.E().hasLabel('has').or(has('f1', neq(true)), has('f1', neq(false)))"
"请帮我找出名为传染部的prescription,以及与其有关的medicine,并返回传染部的id和这些medicine的id","g.V().hasLabel('prescription').has('name', '传染部').as('a').bothE().otherV().hasLabel('medicine').as('b').select('a', 'b').by('id').by('id')"
"给出和orders Order_245有关系的seller,返回这些点的gender","g.V().hasLabel('orders').has('name', 'Order_245').bothE().otherV().hasLabel('seller').values('gender')"
"给出143个名为中国的点contain的类型是city的节点,且其name为巴黎且peopleNumber为空","g.V().has('name', '中国').outE('contain').inV().hasLabel('city').has('name', '巴黎').hasNot('peopleNumber').limit(143)"
"查找和国家澳大利亚有关的城市,称为X,再查找和这个X有关联的其他大学,以及和X有关联的国家","g.V().has('country', 'name', '澳大利亚').as('a').bothE().otherV().hasLabel('city').as('b').bothE().otherV().hasLabel('university').as('c').select('b').bothE().otherV().hasLabel('country').as('d').select('a', 'b', 'c', 'd')"
请帮我查找名为JavaGuid的节点拥有的合并请求或用户或仓库,"g.V().has('name', 'JavaGuid').out('has').hasLabel(within('pullRequest', 'user', 'repository'))"
请帮我查找与person王思思有关系的person的薪资,"g.V().has('person', 'name', '王思思').bothE().otherV().hasLabel('person').values('salary')"
"帮我查询名为李雪的点观看的所有电影,并对这些电影的价值进行求和","g.V().has('name', '李雪').outE('watch').inV().hasLabel('film').values('value').sum()"
"返回全部吴建聪的点relates的person,然后返回吴建聪被relates的person,一起返回","g.V().has('name', '吴建聪').as('a').bothE('relates').otherV().hasLabel('person').as('b').select('a', 'b')"
 查找孙科接受的处方，返回处方中包含的药物的价格。,"g.V().has('patient', 'name', '孙科').outE('accept').inV().hasLabel('prescription').outE('contain').inV().hasLabel('medicine').values('price')"
"帮我查询标签等于person,名为黄红的点,返回这些点的薪资,id,年龄","g.V().hasLabel('person').has('name', '黄红').project('salary', 'id', 'age').by('salary').by('id').by('age')"
"找出与蚂蚁集团存在雇佣关系的person,person与公司存在属于关系的点,返回这些点的名字","g.V().has('name', '蚂蚁集团').out('employee').hasLabel('person').out('belong').hasLabel('company').values('name')"
 找出与处方ID为93的医生有伙伴关系的相关者。,"g.V().has('prescription', 'id', '93').as('a').bothE().otherV().hasLabel('doctor').as('b').bothE('partner').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"帮我查询person马国强购买的软件, 令软件的星数等于软件的星数乘577的最小值, 返回person的名字, 软件的价值","g.V().has('person', 'name', '马国强').as('a').outE('buy').inV().hasLabel('software').as('b').project('a_name', 'b_value').by(select('a').values('name')).by(select('b').values('value')).dedup()"
"查找person周红的所有朋友,的f0对f0取余的值","g.V().has('person', 'name', '周红').outE('friend').inV().project('result').by(values('f0').math('_ % _'))"
"请帮我查找和公司美团有申请关系的贷款,再请帮我查找以申请关系关联了美团的贷款","g.V().has('company', 'name', '美团').as('a').outE('apply').inV().as('b').select('a').inE('apply').outV().as('c').select('a', 'b', 'c')"
"找出与名为黄红和何月的点共同认识的,label为person的节点","g.V().has('name', '黄红').out('knows').as('b').in('knows').has('name', '何月').select('b')"
"给出全部名为马国强的,名字等于阿里的朋友,返回这些朋友的名字,和边的f0","g.V().has('name', '马国强').outE('friend').as('e').inV().has('name', '阿里').select('e', 'b').by('f0').by('name')"
"找出拥有用户黄强创造的合并请求,的仓库","g.V().hasLabel('user').has('name', '黄强').outE('creates').inV().hasLabel('pullRequest').as('b').inE('has').outV().hasLabel('repository').as('c').select('b', 'c')"
查找部门急诊部拥有的医生节点创造的处方,"g.V().hasLabel('department').has('name', '急诊部').out('has').hasLabel('doctor').out('creates').hasLabel('prescription')"
帮我查询名为Post_291的节点拥有的标签或论坛或用户,"g.V().has('name', 'Post_291').out('has').hasLabel(within('tag', 'forum', 'user'))"
帮我查询department外科has的doctor节点belong的department,"g.V().hasLabel('department').has('name', '外科').out('has').hasLabel('doctor').out('belong').hasLabel('department')"
"查找person的relation,或其relation的relation",g.V().hasLabel('person').outE('relation').inV().outE('relation').inV().dedup()
给出前98个价值小于581或名字不等于572或规格不是large的公司,"g.V().hasLabel('company').or(has('value', lt(581)), has('name', neq(572)), has('scale', neq('large'))).limit(98)"
"以740,740作为请求点id, 以属性id作为相等条件,查找所有和company点有apply关系的loan节点,且边满足条件f1等于true,目标loan节点满足条件id大于52","g.withSideEffect('p', [740, 740]).V().hasLabel('company').as('a').where(__.select('a').values('id').is(within(select('p')))).outE('company_apply_loan').has('f1', true).inV().hasLabel('loan').has('id', gt(52)).dedup()"
 查询与谷歌公司合作的大学,"g.V().hasLabel('company').has('name', '谷歌').inE('cooperate').outV().hasLabel('university')"
 查询认识王轩的人。,"g.V().hasLabel('person').has('name', '王轩').as('b').outE('knows').inV().hasLabel('person').as('a').select('a', 'b')"
"使用列为id,name,value, 数据为(41,'动作',769),(12,'历史',932),(25,'动作',76),(16,'文艺',94)的子查询作为输入表, 源点的value等于输入表value,查找22个名为郑轩的点喜欢的标签等于评论的节点,且其字数在367到673之间","g.withSideEffect('p', [[41, '动作', 769], [12, '历史', 932], [25, '动作', 76], [16, '文艺', 94]]).V().has('value', within(__.select('p').unfold().tail(2))).has('name', '郑轩').outE('person_likes_comment').inV().hasLabel('comment').has('wordCount', between(367, 673)).limit(22)"
 查询154个名称不为伦敦且人口数小于等于6362或人口数为空的城市的名称，并按人口数从小到大地排序。,"g.V().hasLabel('city').has('name', neq('伦敦')).has('peopleNumber', lte(6362)).or(__.has('peopleNumber', null)).order().by('peopleNumber', asc).limit(154)"
"以219作为请求点id, 以属性id作为相等条件,找出和forum有关联的post节点,并根据其id分组,返回id,以及id乘26加892的值","g.withSideEffect('p', [219]).V().hasLabel('forum').has('id', select('p')).outE('forum_contain_post').inV().hasLabel('post').group().by('id').by(project('id', 'calc').by(select('id')).by(math('id * 26 + 892')).select(values).unfold().select('id', 'calc'))"
请帮我找出与病人李伟和杜思琪都存在接受关系的点,"g.V().has('patient', 'name', '李伟').outE('accept').inV().as('b').inE('accept').outV().has('patient', 'name', '杜思琪').select('b')"
"帮我查询和合并请求PR-122有关的用户,再帮我查询和PR-122属于的其他仓库,返回它们","g.V().hasLabel('pullRequest').has('name', 'PR-122').as('a').bothE().otherV().hasLabel('user').as('b').select('a').outE('belong').inV().hasLabel('repository').as('c').select('a', 'b', 'c')"
"找出26个和类型为forum的点有contain关系的user,以及和这些user有publish关系的post",g.V().hasLabel('forum').as('a').outE('contain').inV().hasLabel('user').as('b').outE('publish').inV().hasLabel('post').as('c').select('c').limit(26)
返回所有和用户王国强之间有发布关系的帖子,"g.V().has('user', 'name', '王国强').outE('publish').inV().hasLabel('post')"
"以280,624作为请求点id, 以属性id作为相等条件,请帮我查找86个和类型为person的点有person_knows_person关系的person,并且和这些person有person_likes_person关系的person","g.withSideEffect('p', [280, 624]).V().hasLabel('person').where(__.values('id').is(within('p'))).as('a').outE('person_knows_person').inV().hasLabel('person').as('b').outE('person_likes_person').inV().hasLabel('person').as('c').select('c').limit(86)"
"查询与数学学院存在拥有关系的教师,教师与课程存在教关系的点,返回这些点的价值","g.V().has('name', '数学学院').out('has').hasLabel('teacher').out('teach').hasLabel('course').values('value')"
" 请帮我找出149个软件，其中一些软件的Stars值在486到951之间或小于等于198,并且它们的ID是45,然后按Stars值从小到大排序。","g.V().hasLabel('software').has('id', 45).or(has('stars', between(486, 951)), has('stars', lte(198))).order().by('stars', asc).limit(149)"
"输入请求点id的列表55, 源点的id等于输入表id,给出病人的1跳以内的环","g.withSideEffect('p', [55]).V().hasLabel('patient').has('id', within('p')).as('a').both().as('b').where(__.select('b').both().where(eq('a'))).select('a', 'b').by('id').by('id')"
"找出和公司蚂蚁集团有关系的person或公司或账号,返回这些点的id,性别,名字","g.V().hasLabel('company').has('name', '蚂蚁集团').bothE().otherV().hasLabel(within('person', 'company', 'account')).project('b.id', 'b.gender', 'b.name').by(values('id')).by(values('gender')).by(values('name'))"
 找出与标签为'person'的点有隶属关系的公司，以及与这些公司有雇佣关系的个人，以及与这些个人有认识关系的个人。,g.V().hasLabel('person').as('a').outE('belong').hasLabel('belong').as('e').inV().hasLabel('company').as('b').outE('employee').hasLabel('employee').as('e2').inV().hasLabel('person').as('c').outE('knows').hasLabel('knows').as('e3').inV().hasLabel('person').as('d').select('d')
"找出大学合作的公司,返回其源点的id除id的值,以及目标点的id对57取余的最小值","g.V().hasLabel('university').as('a').outE('cooperate').as('e').inV().hasLabel('company').as('b').select('a', 'b').by(id()).by(id()).project('a.id_div_a.id', 'min_b.id_mod_57').by(select('a').math('_ / _')).by(select('b').math('_ % 57').min())"
 请帮我查询和医生相关的处方节点，并按重量分组，返回重量。,g.V().hasLabel('doctor').bothE('creates').otherV().hasLabel('prescription').values('weight').groupCount()
"返回与论坛知乎有关,且与标签文艺有关系的帖子节点","g.V().hasLabel('forum').has('name', '知乎').outE('contain').inV().hasLabel('post').as('b').inE('has').outV().hasLabel('tag').has('name', '文艺').select('b')"
"找出标签为cancel,且满足条件targetId在111到198之间,timeStamp不等于2003年05月12日,或srcId小于57的边","g.E().hasLabel('cancel').or(and(has('targetId', between(111, 198)), has('timeStamp', neq('2003-05-12'))), has('srcId', lt(57)))"
找出郑伟喜欢的所有人，以及郑伟认识的所有人，并将它们一起返回。,"g.V().has('name', '郑伟').as('a').outE('likes').inV().hasLabel('person').as('b').select('a').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
 找出某人或其父母的父母。,"g.V().hasLabel('person').as('a').outE('parent').inV().hasLabel('person').range(1, 2).as('b').select('b')"
"找出76个forum中国军事论坛和CSDN,共同的partner","g.V().hasLabel('forum').has('name', '中国军事论坛').outE('partner').inV().as('b').inE('partner').outV().hasLabel('forum').has('name', 'CSDN').select('b').limit(76)"
"查询与名为Order_329和Order_394的点共同contain的,类型是goods的节点","g.V().has('name', 'Order_329').out('contain').hasLabel('goods').as('b').in('contain').has('name', 'Order_394').select('b')"
"查找被person杜梅认识的person,和杜梅认识的person","g.V().hasLabel('person').has('name', '杜梅').as('b').outE('knows').inV().as('a').select('b').outE('knows').inV().as('c').select('a', 'b', 'c')"
找出与标签为'person'且有同事关系的44个'person'，以及与这些'person'有父母关系的'person'。,g.V().hasLabel('person').as('a').outE('colleague').as('e').inV().hasLabel('person').as('b').outE('parent').as('e2').inV().hasLabel('person').as('c').select('c').limit(44)
"请帮我查找id为87的comment有关的film的relation, 再请帮我查找和film有关系的relation","g.V().has('comment', 'id', 87).as('a').bothE().otherV().hasLabel('film').as('b').bothE('relation').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
返回全部名为天涯论坛的节点包含的用户或帖子或标签,"g.V().has('name', '天涯论坛').outE('contain').inV().hasLabel(within('user', 'post', 'tag')).dedup()"
"给出127个名为郑月的点关联的标签等于person的节点,且其名字不是黄梅","g.V().has('name', '郑月').outE('relates').inV().hasLabel('person').has('name', neq('黄梅')).limit(127)"
"返回label为issue的点,返回104个",g.V().hasLabel('issue').limit(104)
"请帮我找出被电影拥有数量大于90的标签,记为relationCount,再查询这些标签拥有的电影院","g.V().hasLabel('tag').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('has').hasLabel('film').count()).where(__.select('relationCount').is(gt(90))).select('a').out('has').hasLabel('cinema')"
"查找person马国强pay的person, 令person(a)的id等于person(b)的id, 返回person(a)的age, person(b)的id","g.V().hasLabel('person').has('name', '马国强').as('a').outE('pay').inV().hasLabel('person').as('b').select('a', 'b').by(choose(values('id')).option(none, select('b').values('id')).option(none, identity())).by(values('id')).project('a.age', 'b.id').by(select('a').values('age')).by(select('b').values('id'))"
"帮我查询125个名为重庆的点属于的类型是国家的节点,且其价值大于75","g.V().has('name', '重庆').outE('belong').inV().hasLabel('country').has('value', gt(75)).limit(125)"
"查找与person何月有关,且与标签文艺有关系的电影节点","g.V().has('person', 'name', '何月').bothE('watch').otherV().hasLabel('film').bothE('has').otherV().has('tag', 'name', '文艺').select('film')"
"帮我查询id为177的person关联的评论,和以喜欢关系关联了这些评论的其他person","g.V().has('person', 'id', 177).bothE().otherV().hasLabel('comment').as('b').inE('likes').outV().hasLabel('person').as('c').select('b', 'c')"
"帮我查询与医生周思思有关,且与医生张思思有关系的部门节点","g.V().hasLabel('doctor').has('name', '周思思').as('a').outE('belong').inV().hasLabel('department').as('b').inE('has').outV().hasLabel('doctor').has('name', '张思思').select('b')"
"输入表的列为age,name,salary, 数据为(51,'郑轩',4575), 以属性salary作为相等条件,查找名为黄宏和杜强的,标签等于person的点公共的friend节点的名单","g.withSideEffect('p', [['age': 51, 'name': '郑轩', 'salary': 4575]]).V().hasLabel('person').has('salary', select('p').unfold().values('salary')).has('name', '黄宏').outE('friend').inV().as('b').inE('friend').outV().hasLabel('person').has('name', '杜强').select('b').values('name')"
返回与department标签相关的74个点，它们与doctor有has关系，并且这些doctor与prescription有creates关系。,g.V().hasLabel('department').out('has').hasLabel('doctor').out('creates').hasLabel('prescription').limit(74)
 找到45个杜宏和孙梅的共同作家朋友。,"g.V().has('author', 'name', '杜宏').outE('relation').inV().as('b').inE('relation').outV().has('author', 'name', '孙梅').select('b').limit(45)"
 按照性别从小到大排序，搜索所有person类型的数据。,"g.V().hasLabel('person').order().by('gender', asc)"
给出以申请关系关联了贷款loan_56的公司,"g.V().hasLabel('loan').has('name', 'loan_56').in('apply').hasLabel('company')"
请帮我查找所有与电影院相关的评论，以及创建这些评论与其他人的关系。,"g.V().hasLabel('cinema').has('id', '182').bothE().otherV().hasLabel('comment').as('b').inE('creates').otherV().hasLabel('person').as('c').select('b', 'c')"
查询与周科和徐科都有关联的person节点,"g.V().has('person', 'name', '周科').bothE('likes').otherV().hasLabel('person').as('b').bothE('knows').otherV().has('person', 'name', '徐科').select('b')"
"查找person提交的软件, 令软件(b)的id的值等于使用软件的软件的价值的最大值, 再查找软件使用的软件","g.V().hasLabel('person').as('a').outE('commits').inV().hasLabel('software').as('b').sideEffect(__.select('b').inE('uses').outV().hasLabel('software').values('value').max().as('maxValue').select('b').property('id', __.select('maxValue'))).outE('uses').inV().hasLabel('software').as('d').select('b', 'd').by('id').by()"
请帮我查询名为何建国或者name字段小于91的author写的所有book的名称，以及这些book认识的所有book的名称。,"g.V().hasLabel('author').or(has('name', '何建国'), has('name', lt(91))).out('write').hasLabel('book').as('b').out('knows').hasLabel('book').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"找出seller的relation,或其relation的relation",g.V().hasLabel('seller').outE('relation').inV().outE('relation').inV().dedup()
"给出作家认识的作家, 令作家(b)的年龄的值等于认识作家的作家的id的个数, 再查找作家撰写的书","g.V().hasLabel('author').as('a').outE('knows').inV().hasLabel('author').as('b').select('b').as('b_node').project('age', 'd').by(__.select('b_node').inE('knows').outV().hasLabel('author').values('id').count()).by(__.select('b_node').outE('write').inV().hasLabel('book').fold())"
"以58,159,658,456作为请求点id, 源点的id等于输入表id,请帮我找出被用户王建国发布的帖子","g.inject([58, 159, 658, 456]).unfold().as('p').V().hasLabel('post').has('id', __.select('p')).as('a').in('user_publish_post').hasLabel('user').has('name', '王建国').as('b').select('a', 'b')"
"帮我查询名为日本的,id小于等于32,value不是160的friend,返回这些friend的area,和边的weight","g.V().has('name', '日本').outE('friend').as('e').inV().has('id', lte(32)).has('value', neq(160)).project('area', 'weight').by('area').by(select('e').values('weight'))"
"帮我查询病人接受的处方,返回其源点的id减8的值,以及目标点的权重除权重乘84的最大值","g.V().hasLabel('patient').as('a').outE('accept').as('e').inV().hasLabel('prescription').as('b').project('a_id_minus_8', 'max_expr').by(select('a').values('id').math('_ - 8')).by(select('b').values('weight').math('_ / _ * 84').max())"
"输入表的列为name,age,height, 数据为('赵建聪',45,183),('张强',55,191), 以属性age作为相等条件,查找编辑王轩发布的书,被其他编辑发布的数量","g.withSideEffect('p', [['name':'赵建聪','age':45,'height':183], ['name':'张强','age':55,'height':191]]).V().hasLabel('publisher').has('name','王轩').as('a').bothE('publisher_publish_book').otherV().hasLabel('book').as('b').inE('publisher_publish_book').otherV().hasLabel('publisher').as('c').where(and(__.select('a').values('age').is(eq(__.select('p').unfold().values('age'))), __.select('c').values('age').is(eq(__.select('p').unfold().values('age'))))).select('c').dedup().count()"
"返回公司美团属于的城市, 令公司的人数等于公司的价值,令城市的人数等于城市的价值,令公司的名字等于公司的id减67, 返回公司的名字, 城市的人数","g.V().hasLabel('company').has('name', '美团').as('a').outE('belong').inV().hasLabel('city').as('b').select('a', 'b').by(__.project('name', 'peopleNumber').by(__.values('id').is(neq(null)).math('_ - 67')).by(__.values('value'))).by(__.project('peopleNumber').by(__.values('value'))).select(values).unfold().project('a.name', 'b.peopleNumber').by(select('name')).by(select('peopleNumber'))"
找出91个与孙强和陈思思都存在关系的person节点,"g.V().has('name', '孙强').as('a').outE().as('e').inV().hasLabel('person').as('b').inE().as('e2').outV().has('name', '陈思思').as('c').select('b').limit(91)"
"根据address分组,计算size除164除505减805的值",g.V().hasLabel('a').group().by('address').by(values('size').math('_ / 164 / 505 - 805'))
"请帮我查找名为徐宏的person,以及与其有关的person,并返回徐宏的身高和这些person的id","g.V().has('person', 'name', '徐宏').as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a', 'b').by('height').by('id')"
查找所有和person赵轩有3度关系的软件,"g.V().has('person', 'name', '赵轩').repeat(out()).times(3).hasLabel('software')"
找出类型为person的点,g.V().hasLabel('person')
请帮我查找所有和贷款loan_68之间有存款关系的账号,"g.V().hasLabel('loan').has('name', 'loan_68').outE('deposit').inV().hasLabel('account')"
获取与person节点相关的account节点，并按其value进行分组，最后返回这些group。,g.V().hasLabel('person').bothE('own').bothV().hasLabel('account').values('value').groupCount()
 介绍一下名叫黄雪的人。,"g.V().hasLabel('person').has('name', '黄雪')"
 请帮我查询陈若涵女士的账户，并告诉我她需要还多少钱。,"g.V().has('person', 'name', '陈若涵').outE('own').inV().hasLabel('account').outE('repay').inV().hasLabel('loan').values('amount')"
"帮我查询韩建聪的点认识的person,然后帮我查询韩建聪被雇佣的公司,一起返回","g.V().has('name', '韩建聪').as('a').out('knows').hasLabel('person').as('b').select('a').in('employee').hasLabel('company').as('c').select('a', 'b', 'c')"
"查找所有和名为徐强的用户有伙伴关系,或有伙伴的伙伴关系的事项","g.V().has('user', 'name', '徐强').outE('partner').inV().hasLabel('issue').union(__.identity(), __.outE('partner').inV().hasLabel('issue')).dedup()"
找出与澳大利亚相关的城市，然后列出澳大利亚包含的其他城市，并将它们全部返回。,"g.V().has('country', 'name', '澳大利亚').as('a').bothE().otherV().hasLabel('city').as('b').select('a').outE('contain').inV().hasLabel('city').as('c').select('a', 'b', 'c')"
"请帮我查找被用户杜建国创造的合并请求,和杜建国创造的事项","g.V().hasLabel('user').has('name', '杜建国').as('b').outE('creates').as('e').inV().hasLabel('pullRequest').as('a').select('b').outE('creates').as('e2').inV().hasLabel('issue').as('c').select('a', 'b', 'c')"
"查找被卖家回答数量大于173的买家,记为relationCount,再查询这些买家回答的订单","g.V().hasLabel('buyer').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('ask').hasLabel('seller').values('id').min()).select('a', 'relationCount').as('b').where(__.select('relationCount').is(gt(173))).select('a').out('ask').hasLabel('orders').as('c').select('c')"
"给出所有源点label为account,边label为repay,并且满足条件f1等于false且f0在532到564之间,或targetId大于等于5的边","g.V().hasLabel('account').outE('repay').where(or(and(has('f1', false), has('f0', between(532, 564))), has('targetId', gte(5))))"
"以(2032-11-05,31,727),(2015-08-25,68,442),(2004-03-24,44,81),(2004-11-03,38,357)作为请求表数据,属性分别为createTime,id,weight, 源点的createTime等于输入表createTime,请帮我查找id为143的点的类别,权重","g.inject([['createTime': '2032-11-05', 'id': 31, 'weight': 727], ['createTime': '2015-08-25', 'id': 68, 'weight': 442], ['createTime': '2004-03-24', 'id': 44, 'weight': 81], ['createTime': '2004-11-03', 'id': 38, 'weight': 357]]).as('p').V().as('a').where(and(__.select('a').values('createTime').as('a_createTime'), __.select('p').unfold().values('createTime').as('p_createTime'), __.select('a_createTime').where(eq('p_createTime')), __.select('a').values('id').is(eq('143')))).select('a').project('category', 'weight').by(values('category')).by(values('weight'))"
"查询被教师马轩教的课程,和马轩教的课程","g.V().hasLabel('teacher').has('name', '马轩').as('b').outE('teach').inV().hasLabel('course').as('a').select('b').outE('teach').inV().hasLabel('course').as('c').select('a', 'b', 'c')"
找出全部名为何建国的节点观看的评论或电影或标签,"g.V().has('name', '何建国').outE('watch').inV().hasLabel(within('comment', 'film', 'tag')).dedup()"
 找出与软件Spark有使用关系，以及与赵思思有关键提交的软件。,"g.V().has('software', 'name', 'Spark').as('a').outE('uses').inV().as('b').V().has('person', 'name', '赵思思').as('c').outE('commits').inV().as('d').select('a', 'b', 'c', 'd')"
查找被repository Mybatis has的pullRequest,"g.V().hasLabel('repository').has('name', 'Mybatis').outE('has').inV().hasLabel('pullRequest').as('b', 'a').select('a', 'b')"
"返回公司申请的贷款, 令贷款的权重的值等于申请贷款的公司的id的最小值, 再查找贷款存款的账号","g.V().hasLabel('company').as('a').outE('apply').as('e').inV().hasLabel('loan').as('b').project('b', 'weight').by(identity()).by(__.in('apply').hasLabel('company').values('id').min()).select('b', 'weight').as('b_weight').select('b').outE('deposit').as('e3').inV().hasLabel('account').as('d').select('b_weight', 'd')"
找出以喜欢关系关联了帖子Post_392的用户,"g.V().hasLabel('post').has('name', 'Post_392').inE('likes').outV().dedup()"
请帮我找出与账号XiaoHu有存款和还款关系的贷款节点，并返回它们的权重、金额以及XiaoHu账号的创建日期。,"g.V().hasLabel('account').has('name', 'XiaoHu').as('a').outE('repay').inV().hasLabel('loan').as('b').inE('deposit').outV().hasLabel('account').has('name', 'XiaoHu').as('c').select('a', 'b', 'c').by('createTime').by(values('weight', 'amount').fold()).by('createTime')"
 请问文学院有哪些教师与您有亲友关系？,"g.V().has('department', 'name', '文学院').outE('friend').has('weight', within(1, 2)).inV().hasLabel('teacher')"
 请问能否帮我查询一个与标签为'大学'的点有has关系的部门，以及与这些部门有has关系的学生？,g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('student').limit(1)
"找出名为陈强的点的,salary不等于2084的parent,返回这些parent的height,和边的srcId,f0,targetId","g.V().has('name', '陈强').outE('parent').as('e').inV().has('salary', neq(2084)).as('b').select('b', 'e').by('height').by(project('srcId', 'f0', 'targetId').by(__.select('e').id()).by(__.select('e').values('f0')).by(__.select('e').inV().id()))"
"调用SSSP函数,以'DW', 55作为输入,返回id, distance","g.withSideEffect('DW', 55).V().has('id', 'DW').shortestPath().with('target', 55).path().by('id').by('distance')"
"使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部tag以id,name,value分组的name, 根据name降序排序","g.V().hasLabel('tag').group().by(project('id', 'name', 'value').by('id').by('name').by('value')).by(values('name').fold()).order(local).by(keys, desc)"
"输入请求点id的列表164, 源点的id等于输入表id,返回person的三角的环,边类型为person_pay_person, 并返回这些点的id","g.withSideEffect('p', [164]).V().has('person', 'id', __.select('p')).as('a').outE('person_pay_person').inV().as('b').outE('person_pay_person').inV().as('c').where(outE('person_pay_person').inV().as('a')).select('a', 'b', 'c').by().by(__.id()).by(__.id())"
返回物理学院的所有教师及其所教课程的ID和名称。,"g.V().has('department', 'name', '物理学院').out('has').hasLabel('teacher').out('teach').hasLabel('course').project('id', 'value').by('id').by('value')"
 找到郑若涵和周科都提交过的内容。,"g.V().has('person', 'name', '郑若涵').outE('commits').inV().as('b').inE('commits').outV().has('person', 'name', '周科').select('b')"
"查询所有名为内科的,薪资的最小值为181或性别不是male的朋友,返回这些朋友的性别,和边的f0,源点id,权重","g.V().has('name', '内科').as('a').outE('friend').as('e').inV().as('b').where(or(__.select('b').values('salary').min().is(181), __.select('b').has('gender', neq('male')))).select('b', 'e').by('gender').by(union(values('f0'), values('srcId'), values('weight')).fold())"
请帮我找出赵思琪和杜国强这两位人士的家族关系,"g.V().has('person', 'name', '赵思琪').outE('family').inV().as('b').inE('family').as('e2').outV().has('person', 'name', '杜国强').select('b').limit(102)"
 请帮我查找订单Order_120中，与买家郑宏有关联的买家节点，并返回他们的薪资和姓名。,"g.V().hasLabel('orders').has('name', 'Order_120').outE().as('e').inV().hasLabel('buyer').as('b').inE().as('e2').outV().hasLabel('buyer').has('name', '郑宏').as('c').select('b').values('salary', 'name')"
"以591作为请求点id, 源点的id等于输入表id,帮我查询全部orders以value,name分组的value, 根据value降序排序","g.inject(591).as('p').V().hasLabel('orders').as('a').where(eq('p')).by().by('id').select('a').group().by(union(values('value'), values('name')).fold()).by().order(local).by(keys, desc)"
请帮我找出与教师张建聪有关的课程，以及属于体育学院的教师，并将这些信息全部返回。,"g.V().has('teacher', 'name', '张建聪').as('a').outE('teach').inV().as('b').select('a').V().has('department', 'name', '体育学院').as('c').outE('has').inV().hasLabel('teacher').as('d').select('a', 'b', 'c', 'd')"
帮我查询身高等于153的节点,"g.V().has('height', 153)"
查询名为徐建聪且标签为seller的点的id、height和name。,"g.V().hasLabel('seller').has('name', '徐建聪').project('a.id', 'a.height', 'a.name').by('id').by('height').by('name')"
请帮我找出所有与贷款相关的账号，以及这些账号之间的转账关系,"g.V().has('loan', 'id', '150').bothE().otherV().hasLabel('account').as('b').inE('transfer').outV().hasLabel('account').as('c').select('b', 'c')"
"返回所有谷歌的点employee的person,然后返回谷歌被belong的person,一起返回","g.V().has('name', '谷歌').as('a').outE('employee').inV().hasLabel('person').as('b').select('a').inE('belong').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找person赵轩的朋友的朋友的相关者","g.V().has('person', 'name', '赵轩').out('friend').out('friend').out('relation').dedup()"
"根据age分组,计算height减198的值",g.V().hasLabel('a').group().by('age').by(values('height').math('_ - 198'))
"请帮我找出全部company以peopleNumber分组的scale, 根据scale升序排序","g.V().hasLabel('company').group().by('peopleNumber').by(values('scale').fold()).order(local).by(values, asc)"
"以504作为请求点id, 源点的id等于输入表id,帮我查询id为87的city有关的university的partner, 再帮我查询和university有关系的relation","g.withSideEffect('p', [504]).V().hasLabel('city').has('id', within('p')).has('id', '87').as('a').bothE().otherV().hasLabel('university').as('b').bothE().hasLabel('partner').otherV().as('c').select('b').bothE().hasLabel('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
请找出与吴红是同事的人，以及与吴思思是父母关系的人，并将他们全部返回。,"g.V().has('person', 'name', '吴红').as('a').out('colleague').hasLabel('person').as('b').select('a').V().has('person', 'name', '吴思思').as('c').out('parent').hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"返回buyer杜雪creates的orders,以及creates这些orders的buyer","g.V().hasLabel('buyer').has('name', '杜雪').outE('creates').inV().hasLabel('orders').as('b').inE('creates').outV().hasLabel('buyer').as('c').select('b', 'c')"
"帮我查询和仓库Tugraph有关的仓库,称为X,再帮我查询和这个X有关联的其他合并请求,以及和X有关联的事项","g.V().has('repository', 'name', 'Tugraph').as('a').bothE().otherV().hasLabel('repository').as('b').bothE().otherV().hasLabel('pullRequest').as('c').select('b').bothE().otherV().hasLabel('issue').as('d').select('a', 'b', 'c', 'd')"
"请帮我找出标签为包含,以及f0小于793且权重小于150.28,或目标点id不是131的边","g.E().hasLabel('contain').or(and(has('f0', lt(793)), has('weight', lt(150.28))), has('targetId', neq(131)))"
"帮我查询与department生物学院有关,且与course数据结构有关系的teacher节点","g.V().has('department', 'name', '生物学院').out('has').hasLabel('teacher').as('b').out('teach').has('course', 'name', '数据结构').select('b')"
 请帮我查询韩雪和Jack的读者节点公共合作伙伴名单。,"g.V().has('reader', 'name', '韩雪').as('a').outE('partner').inV().as('b').inE('partner').outV().has('reader', 'name', 'Jack').as('c').select('b').values('name')"
"查询所有与韩月存在认识关系的person,person与软件存在提交关系的点,返回这些点的id","g.V().has('name', '韩月').out('knows').hasLabel('person').out('commits').hasLabel('software').id()"
"请帮我查找所有与person有关系的person节点,且person节点的身高不为空,并返回这些person的age的平均值减91除年龄的最大值,以及person的薪资乘8624的值","g.V().hasLabel('person').as('a').outE().inV().hasLabel('person').has('height', neq(null)).as('b').select('b').dedup().project('expr1', 'expr2').by(__.values('age').mean().is(neq(null)).math('(_ - 91) / _').max()).by(__.values('salary').math('_ * 8624'))"
"返回person relates的person, 令person(b)的age的值等于relatesperson的person的height的最小值, 再查找person relates的person","g.V().hasLabel('person').as('a').outE('relates').inV().hasLabel('person').as('b').select('b').as('b_node').select('b').inE('relates').outV().hasLabel('person').values('height').min().as('min_height').select('b_node').sideEffect(__.property('age', __.select('min_height'))).select('b_node').outE('relates').inV().hasLabel('person').as('d').select('b_node').values('age').as('b_age').select('b_age', 'd')"
"请帮我查找repository has的pullRequest,返回其源点的stars除857加weight加284的值,以及目标点的changeFileNumber除167的值","g.V().hasLabel('repository').as('a').outE('has').as('e').inV().hasLabel('pullRequest').as('b').project('expr1', 'expr2').by(__.select('a').values('stars').math('_ / 857').math('_ + a.weight').math('_ + 284')).by(__.select('b').values('changeFileNumber').math('_ / 167'))"
"查询所有与韩科存在父母关系的person,person与person存在恋人关系的点,返回这些点的性别","g.V().has('name', '韩科').as('a').outE('parent').inV().hasLabel('person').as('b').outE('lover').inV().hasLabel('person').as('c').select('c').values('gender')"
"给出person何月属于的公司, 令公司的年龄等于person的薪资, 返回person的性别, 公司的人数","g.V().has('person', 'name', '何月').as('a').outE('belong').inV().hasLabel('company').as('b').sideEffect(__.select('b').property('age', __.select('a').values('salary'))).select('a', 'b').by('gender').by('peopleNumber')"
"以701,387作为请求点id, 源点的id等于输入表id,返回与person Tom有关,且与person陈若涵有关系的person节点","g.withSideEffect('p', [[701], [387]]).V().hasLabel('person').where(__.as('a').has('id', within('p')).has('name', 'Tom')).as('a').outE('person_likes_person').inV().hasLabel('person').as('b').outE('person_knows_person').inV().hasLabel('person').has('name', '陈若涵').select('b')"
请帮我查找以认识关系关联了书孤城的书,"g.V().hasLabel('book').has('name', '孤城').inE('knows').outV().hasLabel('book')"
age减age的最小值,"g.V().hasLabel('a').project('ageMinusAge').by(values('age').fold().project('age1', 'age2').by(unfold()).by(unfold()).select(values).math('age1 - age2').min())"
"给出所有和编辑李伟有关系的书或读者或编辑,返回这些点的id,创建时间","g.V().has('publisher', 'name', '李伟').bothE().otherV().hasLabel(within('book', 'reader', 'publisher')).project('id', 'createTime').by(values('id')).by(values('createTime'))"
找出与贷款defaultName有存款和还款关系的账号，并返回它们的上次登录时间、贷款defaultName的id以及权重。,"g.V().has('loan', 'name', 'defaultName').as('a').outE('deposit').inV().hasLabel('account').as('b').inE('repay').outV().has('loan', 'name', 'defaultName').as('c').select('a', 'b', 'c').by('id').by('lastLoginTime').by('weight')"
"找出department has的teacher, 令teacher的age的值等于hasteacher的department的name的求和值, 再查找teacher teach的course","g.V().hasLabel('department').as('a').outE('has').inV().hasLabel('teacher').as('b').select('b').sideEffect(__.as('b').inE('has').outV().hasLabel('department').values('name').sum().as('age')).select('b').outE('teach').inV().hasLabel('course').as('d').select('b', 'd').by('age').by()"
"输入请求点id的列表550,901,336,963,641, 以属性id作为相等条件,请帮我找出以拥有关系关联了标签文艺的电影","g.withSideEffect('p', [550, 901, 336, 963, 641]).V().hasLabel('tag').has('id', within('p')).has('name', '文艺').in('film_has_tag').hasLabel('film')"
返回周建国和王宏这两位医生共同的伙伴信息，共有101条。,"g.V().has('doctor', 'name', '周建国').outE('partner').inV().as('b').inE('partner').outV().has('doctor', 'name', '王宏').select('b').limit(101)"
请帮我查找49个与Bob和郑建国都存在关系的software节点,"g.V().has('name', 'Bob').outE().inV().hasLabel('software').as('b').inE().outV().has('name', '郑建国').select('b').limit(49)"
"查找名为赵建聪的person,以及与其有关的person,并返回赵建聪的薪资和这些person的年龄","g.V().has('person', 'name', '赵建聪').as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a', 'b').by('salary').by('age')"
给出194个与Order_446和Order_284都存在关系的买家节点,"g.V().has('name', 'Order_446').outE().inV().hasLabel('buyer').as('b').inE().outV().has('name', 'Order_284').select('b').limit(194)"
返回名为何科的节点创造的卖家或订单,"g.V().has('name', '何科').outE('creates').inV().hasLabel(within('seller', 'orders')).dedup()"
请帮我查找全部与订单Order_411有关系的订单的价值,"g.V().hasLabel('orders').has('name', 'Order_411').bothE().otherV().hasLabel('orders').values('value')"
"输入表的列为value,name,id, 数据为(87,'中国军事论坛',70), 源点的id等于输入表id,请帮我查找名为知网和天涯论坛的,label为forum的点公共的friend节点的名单","g.withSideEffect('p', [['value', 87], ['name', '中国军事论坛'], ['id', 70]]).V().hasLabel('forum').has('id', __.select('p').select('id')).has('name', '知网').out('friend').as('b').in('friend').hasLabel('forum').has('name', '天涯论坛').select('b').values('name')"
"给定图的schema如下:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出论坛天涯论坛包含的person,被其他论坛包含的数量","g.V().has('forum', 'name', '天涯论坛').out('forum_contain_person').in('forum_contain_person').hasLabel('forum').dedup().count()"
"返回和类型是person的点有likes关系的person,且和这些person有knows关系的person,且和这些person有knows关系的person",g.V().hasLabel('person').as('a').out('likes').hasLabel('person').as('b').out('knows').hasLabel('person').as('c').out('knows').hasLabel('person').as('d').select('d')
 找出与标签11相关的用户的朋友，再找出这些用户的朋友。,"g.V().has('tag', 'id', '11').as('a').bothE().otherV().hasLabel('user').as('b').bothE('friend').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
找出赵月出版的并且他知道的书,"g.V().has('publisher', 'name', '赵月').out('publish').as('b').out('knows').as('c').select('c')"
"请帮我查找名为李伟和Sam的,类型是student的点公共的partner节点的名单","g.V().has('student', 'name', '李伟').outE('partner').inV().as('b').inE('partner').outV().has('student', 'name', 'Sam').select('b').values('name')"
请帮我找出所有与person陈月有关系的person的id,"g.V().hasLabel('person').has('name', '陈月').bothE().otherV().hasLabel('person').id()"
"请帮我找出孙雪的点发布的帖子,然后请帮我找出孙雪被包含的论坛,一起返回","g.V().has('name', '孙雪').as('a').outE('publish').inV().hasLabel('post').as('b').select('a').inE('contain').outV().hasLabel('forum').as('c').select('a', 'b', 'c')"
获取所有源点为forum，边类型为contain的边。返回这些边的targetId减去776后的值，以及srcId除以160的余数。,"g.V().hasLabel('forum').outE('contain').project('targetId_minus_776', 'srcId_mod_160').by(values('targetId').math('_ - 776')).by(values('srcId').math('_ % 160'))"
"查找性别是male或名字不等于李宏的编辑发布的书的名称,以及这些书 认识的书的名称","g.V().hasLabel('publisher').has('gender', 'male').or().has('name', neq('李宏')).outE('publish').inV().hasLabel('book').as('b').outE('knows').inV().hasLabel('book').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"输入请求点id的列表156,811,662,137,682, 源点的id等于输入表id,帮我查询名为Order_178的,类别不等于水果或销量小于1704.21的朋友,返回这些朋友的名字,和边的权重,目标点id","g.inject([156, 811, 662, 137, 682]).unfold().as('p').V().has('id', __.as('p')).has('name', 'Order_178').outE('friend').as('e').inV().as('b').where(__.or(__.not(__.has('category', '水果')), __.has('sellerNumber', lt(1704.21)))).select('b', 'e').by('name').by(__.project('weight', 'targetId').by('weight').by(__.select('e').inV().id())).select(values)"
"给出和部门有关联的教师节点,并根据其薪资,性别,身高分组,返回薪资,性别,身高,以及薪资对4059取余的值","g.V().hasLabel('department').bothE('has').otherV().hasLabel('teacher').project('salary', 'gender', 'height', 'salary_mod').by(values('salary')).by(values('gender')).by(values('height')).by(math('salary % 4059')).dedup().group().by(project('salary', 'gender', 'height').by(values('salary')).by(values('gender')).by(values('height'))).by(fold())"
"给出名为马宏的点支付的所有person,并对这些person的性别进行求和","g.V().has('name', '马宏').outE('pay').inV().hasLabel('person').values('gender').sum()"
查询与李雪和马建国都有关系的所有 person 节点。,"g.V().has('name', '李雪').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '马建国').select('b').limit(83)"
"以(191,31,7132)作为请求表数据,属性分别为height,id,salary, 以属性height作为相等条件,请帮我找出与用户孙轩有user_creates_issue关系的1跳的环","g.withSideEffect('p', [['height':191, 'id':31, 'salary':7132]]).V().hasLabel('user').has('height', __.select('p').unfold().select('height')).has('name', '孙轩').as('a').bothE('user_creates_issue').bothV().where(eq('a')).as('b').select('a', 'b').by('id').by('id').select(values)"
找出同时与电影《我不是药神》和《复仇者联盟》有关系的点。,"g.V().has('film', 'name', '我不是药神').out('has').as('b').in('has').has('film', 'name', '复仇者联盟').select('b')"
"输入请求点id的列表835,855,163,418,295, 源点的id等于输入表id,请帮我找出和电影有关联的标签节点,并根据其名字分组,返回名字,以及id的最大值加69的值","g.withSideEffect('p', [835, 855, 163, 418, 295]).V().hasLabel('film').has('id', within('p')).outE('film_has_tag').inV().hasLabel('tag').group().by('name').by(__.values('id').max().math('_ + 69')).select(values).unfold().project('b.name', 'MAX(b.id) + 69').by(select(keys)).by(select(values))"
给出事项ISSUE-402属于的仓库节点拥有的用户,"g.V().hasLabel('issue').has('name', 'ISSUE-402').out('belong').hasLabel('repository').out('has').hasLabel('user')"
查找goods的1度的环,"g.V().hasLabel('goods').as('a').out().as('b').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
请找出与郑雪有关的账户，以及与徐月有关的投资公司，并将它们全部返回。,"g.V().has('person', 'name', '郑雪').as('a').out('own').as('b').select('a').V().has('person', 'name', '徐月').as('c').out('invest').as('d').select('a', 'b', 'c', 'd')"
"查找id为63的person关联的person,和以关联关系关联了这些person的其他person","g.V().has('person', 'id', 63).bothE().otherV().hasLabel('person').as('b').inE('relates').otherV().hasLabel('person').as('c').select('b', 'c')"
"输入表的列为height,gender,age, 数据为(172,'famale',30), 源点的age等于输入表age,请帮我查找全部id为172的person关联的person,和以pay关系关联了这些person的其他person","g.withSideEffect('p', [['height': 172, 'gender': 'famale', 'age': 30]]).V().hasLabel('person').has('age', __.select('p').unfold().select('age')).has('id', '172').bothE().otherV().hasLabel('person').as('b').inE('person_pay_person').otherV().hasLabel('person').as('c').select('b', 'c')"
"请帮我查找与person陈建聪有关,且与person徐建国有关系的person节点","g.V().has('person', 'name', '陈建聪').bothE('pay').bothV().hasLabel('person').where(__.bothE('knows').bothV().has('person', 'name', '徐建国')).dedup()"
"请帮我找出post Post_466 has的tag,以及has这些tag的post","g.V().hasLabel('post').has('name', 'Post_466').out('has').as('b').in('has').as('c').select('b', 'c')"
"以(8,186,'感冒药')作为请求表数据,属性分别为id,price,category, 以属性category作为相等条件,请帮我查找与部门放射科和呼吸科都存在department_has_doctor关系的点","g.withSideEffect('p', [['id':8, 'price':186, 'category':'感冒药']]).V().hasLabel('department').has('category', __.select('p').unfold().select('category')).has('name', '放射科').out('department_has_doctor').as('b').in('department_has_doctor').hasLabel('department').has('name', '呼吸科').select('b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找24个与杜宏和李国强都存在关系的orders节点","g.V().has('name', '杜宏').outE().inV().hasLabel('orders').as('b').inE().outV().has('name', '李国强').select('b').limit(24)"
"输入请求点id的列表564,73,539, 以属性id作为相等条件,找出与publisher郑梅和杜红都存在publisher_publish_book关系的点","g.withSideEffect('p', [564, 73, 539]).V().hasLabel('publisher').where(within('p')).by('id').has('name', '郑梅').outE('publisher_publish_book').inV().as('b').inE('publisher_publish_book').outV().hasLabel('publisher').has('name', '杜红').select('b').dedup()"
请帮我找出与张建聪存在咨询关系的卖家，以及这些卖家拥有的商品，并返回这些商品的名字。,"g.V().has('name', '张建聪').out('consult').hasLabel('seller').out('has').hasLabel('goods').values('name')"
"输入请求点id的列表11,174,331,142, 源点的id等于输入表id,查找全部教师的相关者,或其相关者的相关者","g.inject([11, 174, 331, 142]).unfold().as('p').V().has('teacher', 'id', __.select('p')).repeat(out('relation')).times(2).emit().dedup()"
 请帮我查找吴伟创建的评论，并统计其他人喜欢的数量。,"g.V().has('person', 'name', '吴伟').outE('creates').inV().hasLabel('comment').inE('likes').outV().hasLabel('person').count()"
"请帮我找出类型是city的所有点,并根据name从小到大排列","g.V().hasLabel('city').order().by('name', asc)"
"查找和仓库有关联的用户节点,并根据其id,身高,性别分组,返回id,身高,性别,以及age的数量除47的值","g.V().hasLabel('repository').as('a').bothE('has').as('e').otherV().hasLabel('user').as('b').group().by(select('b').values('id', 'height', 'gender')).by(select('b').values('age').count().math('_ / 47')).select(values).unfold().project('b.id', 'b.height', 'b.gender', 'COUNT(b.age) / 47').by(select(keys).select('id')).by(select(keys).select('height')).by(select(keys).select('gender')).by(select(values))"
请帮我查找并编辑与徐宏相关的作家信息，同时查询徐宏发布的其他书籍，并将结果返回。,"g.V().hasLabel('publisher').has('name', '徐宏').as('a').bothE().otherV().hasLabel('author').as('b').select('a').outE('publish').otherV().hasLabel('book').as('c').select('a', 'b', 'c')"
"返回类型是person,名为杜轩的点,返回这些点的height,salary,gender","g.V().hasLabel('person').has('name', '杜轩').project('height', 'salary', 'gender').by('height').by('salary').by('gender')"
"用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));查找所有和城市深圳之间有city_contain_company关系的公司","g.V().hasLabel('city').has('name', '深圳').outE('city_contain_company').inV().hasLabel('company')"
"返回和病人陈宏有关的病人,称为X,再返回和这个X有关联的其他处方,以及和X有关联的药品","g.V().has('patient', 'name', '陈宏').as('a').bothE().otherV().hasLabel('patient').as('b').bothE().otherV().hasLabel('prescription').as('c').select('b').bothE().otherV().hasLabel('medicine').as('d').select('a', 'b', 'c', 'd')"
"请帮我找出course的friend,或其friend的friend","g.V().hasLabel('course').out('friend').range(1, 2).dedup()"
"查找所有买家的相关者,或其相关者的相关者",g.V().hasLabel('buyer').outE('relation').inV().hasLabel('buyer').simplePath().by(T.id).times(2).emit().dedup().project('b').by()
返回buyer的3度的环,"g.V().hasLabel('buyer').as('a').repeat(both().simplePath()).times(3).where(loops().is(3)).where(__.both().where(eq('a'))).dedup().project('a.id', 'b_id').by(__.select('a').id()).by(id())"
"查找全部与张宏存在colleague关系的person,person与person存在parent关系的点,返回这些点的salary","g.V().has('name', '张宏').out('colleague').hasLabel('person').out('parent').hasLabel('person').values('salary')"
"输入表的列为price,id,name, 数据为(118,25,'阿司匹林'),(112,55,'999感冒灵'),(50,69,'阿司匹林'),(209,51,'布洛芬'), 以属性name作为相等条件,请帮我找出id为153的patient关联的prescription,和以creates关系关联了这些prescription的其他doctor","g.inject([['price':118,'id':25,'name':'阿司匹林'],['price':112,'id':55,'name':'999感冒灵'],['price':50,'id':69,'name':'阿司匹林'],['price':209,'id':51,'name':'布洛芬']]).as('p').V().hasLabel('patient').has('name', within(select('p').unfold().values('name'))).has('id', '153').as('a').bothE().as('e').otherV().hasLabel('prescription').as('b').inE('doctor_creates_prescription').as('e2').outV().hasLabel('doctor').as('c').select('b', 'c')"
"查找大学南京大学合作的公司,以及合作这些公司的大学","g.V().has('university', 'name', '南京大学').outE('cooperate').inV().hasLabel('company').as('b').inE('cooperate').outV().hasLabel('university').as('c').select('b', 'c')"
"帮我查询全部id为61的film关联的comment,和以likes关系关联了这些comment的其他person","g.V().has('film', 'id', 61).bothE().otherV().hasLabel('comment').as('b').inE('likes').otherV().hasLabel('person').as('c').select('b', 'c')"
"找出和医生点有诊断关系的病人节点,且边满足条件f0小于513,目标病人节点满足条件薪资小于1613","g.V().hasLabel('doctor').as('a').outE('diagnose').has('f0', lt(513)).as('e').inV().hasLabel('patient').has('salary', lt(1613)).as('b').select('b')"
查找前142个满足条件gender不是famale的person,"g.V().hasLabel('person').has('gender', neq('famale')).limit(142)"
"请帮我查找源点标签为大学,边标签为拥有,并且权重的最大值大于77的边",g.V().hasLabel('university').as('a').outE('has').as('e').group().by().by(values('weight').max()).unfold().filter(select(values).is(gt(77))).select('e')
 查找孙思思合作伙伴的朋友的朋友,"g.V().has('seller', 'name', '孙思思').outE('partner').inV().outE('friend').inV().outE('friend').inV()"
"返回user creates的pullRequest, 令pullRequest的createTime的值等于haspullRequest的repository的name的平均值, 再查找pullRequest belong的repository","g.V().hasLabel('user').as('a').outE('creates').inV().hasLabel('pullRequest').as('b').sideEffect(__.select('b').coalesce(__.inE('has').outV().hasLabel('repository').values('name').mean(), __.constant(0)).property('createTime', __.select('b').coalesce(__.inE('has').outV().hasLabel('repository').values('name').mean(), __.constant(0)))).select('b').outE('belong').inV().hasLabel('repository').as('d').select('b', 'd').by('createTime').by()"
"查找公司微软属于的城市,以及包含这些城市的国家, 令国家的面积等于国家的价值的最大值,令国家的人数等于公司的id对id取余的最大值,令城市的规格等于公司的人数, 返回公司的名字,城市的人数,国家的名字","g.V().has('company', 'name', '微软').as('a').outE('belong').inV().hasLabel('city').as('b').inE('contain').outV().hasLabel('country').as('c').project('a_name', 'b_peopleNumber', 'c_name').by(select('a').values('name')).by(select('b').values('peopleNumber')).by(select('c').values('name'))"
"帮我查询183个名为陈雪的点拥有的类型为商品的节点,且节点类别是电子产品","g.V().has('name', '陈雪').outE('has').inV().hasLabel('goods').has('category', '电子产品').limit(183)"
"查找person王强的全部标签为伙伴的边,并根据目标点id升序排列,返回6个","g.V().has('person', 'name', '王强').outE('partner').as('e').inV().as('b').select('e', 'b').order().by(select('e').values('targetId'), asc).limit(6).select('b')"
"帮我查询120个名为华中科技大学的点合作的类型是公司的节点,且其人数大于740,名字等于腾讯","g.V().has('name', '华中科技大学').outE('cooperate').inV().hasLabel('company').has('peopleNumber', gt(740)).has('name', '腾讯').limit(120)"
"给出doctor赵若涵 creates的prescription,返回prescription contain的medicine的weight的和除weight的值","g.V().hasLabel('doctor').has('name', '赵若涵').outE('creates').inV().hasLabel('prescription').outE('contain').inV().hasLabel('medicine').group().by(identity()).by(values('weight').sum()).unfold().select(values).as('sum_weight').select(keys).values('weight').as('weight').select('sum_weight', 'weight').by().by().math('sum_weight / weight')"
"帮我查询31个和标签等于person的点有同事关系的person,且和这些person有同事关系的person",g.V().hasLabel('person').as('a').outE('colleague').inV().hasLabel('person').as('b').outE('colleague').inV().hasLabel('person').as('c').select('c').limit(31)
"使用列为name,height,age, 数据为('吴国强',159,66),('孙轩',177,69)的子查询作为输入表, 以属性age作为相等条件,找出与person马雪和马月都存在person_lover_person关系的点","g.withSideEffect('p', [['name': '吴国强', 'height': 159, 'age': 66], ['name': '孙轩', 'height': 177, 'age': 69]]).V().hasLabel('person').has('name', '马雪').as('a').outE('person_lover_person').inV().as('b').where(__.inE('person_lover_person').outV().hasLabel('person').has('name', '马月')).select('b')"
"给出公司蚂蚁集团雇佣的person,以及雇佣这些person的公司, 令person的价值等于公司的名字, 返回公司(a)的价值,person(b)的id,公司(c)的人数","g.V().has('company', 'name', '蚂蚁集团').as('a').outE('employee').inV().hasLabel('person').as('b').inE('employee').outV().hasLabel('company').as('c').project('a.value', 'b.id', 'c.peopleNumber').by(select('a').values('name')).by(select('b').id()).by(select('c').values('peopleNumber'))"
"用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查找所有名为黄科的点认识的作家","g.V().has('author', 'name', '黄科').out('author_knows_author').hasLabel('author')"
"给出从城市伦敦出发,经过类型是属于的边,走2跳到达的国家点","g.V().has('city', 'name', '伦敦').repeat(outE('belong').inV()).times(2).hasLabel('country')"
查询与指定出版商有关联的所有书籍，以及通过'knows'关系与其他这些书籍相关联的其他所有书籍。,"g.V().has('publisher', 'id', '47').bothE().otherV().hasLabel('book').as('b').inE('knows').otherV().hasLabel('book').as('c').select('b', 'c')"
"给出和医生韩若涵有创造关系的处方,再给出以诊断关系关联了韩若涵的病人","g.V().hasLabel('doctor').has('name', '韩若涵').as('a').outE('creates').inV().as('b').select('a').inE('diagnose').outV().as('c').select('a', 'b', 'c')"
请帮我找出与person节点相关的所有person节点，然后按照它们的id进行分组，并返回这些id。,g.V().hasLabel('person').as('a').bothE('parent').otherV().hasLabel('person').as('b').select('b').values('id').group().by(identity()).by(count())
找出前94个标签为包含的边,g.E().hasLabel('contain').limit(94)
 找出教授高等数学的教师，他们之间存在teach关系。,"g.V().hasLabel('course').has('name', '高等数学').inE('teach').outV().dedup()"
 查询张轩点支付的人和被认识的人，一起返回。,"g.V().has('name', '张轩').as('a').outE('pay').inV().hasLabel('person').as('b').select('a').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部person以薪资,id分组的薪资, 根据薪资降序排序","g.V().hasLabel('person').group().by(values('salary', 'id')).order(local).by(keys, desc)"
请帮我找出属于department外科的doctor节点,"g.V().hasLabel('department').has('name', '外科').out('has').hasLabel('doctor').out('belong').hasLabel('department').dedup()"
请帮我查找与用户陈建聪有喜欢关系的3跳以内的环,"g.V().has('user', 'name', '陈建聪').as('a').repeat(bothE('likes').otherV().simplePath()).times(3).where(cyclicPath()).path().by('id')"
"以667,525,15,941作为请求点id, 以属性id作为相等条件,找出和person黄月有关的person,再找出和黄月person_likes_person的其他person,返回它们","g.withSideEffect('p', [667, 525, 15, 941]).V().hasLabel('person').has('id', within('p')).has('name', '黄月').as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a').outE('person_likes_person').as('e2').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
"以('陈强',81,'male'),('孙红',12,'male'),('何思思',86,'famale'),('周若涵',5,'male')作为请求表数据,属性分别为name,age,gender, 以属性age作为相等条件,请帮我查找id为119的person有关的person的伙伴, 再请帮我查找和person有关系的相关者","g.withSideEffect('p', [['name': '陈强', 'age': 81, 'gender': 'male'], ['name': '孙红', 'age': 12, 'gender': 'male'], ['name': '何思思', 'age': 86, 'gender': 'famale'], ['name': '周若涵', 'age': 5, 'gender': 'male']]).V().hasLabel('person').has('id', '119').as('a').filter(__.select('a').values('age').is(within(__.select('p').unfold().values('age')))).bothE().otherV().hasLabel('person').as('b').outE('partner').otherV().as('c').select('b').outE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"以355,59,314,727作为请求点id, 以属性id作为相等条件,请帮我查找所有名为Bilibili的点雇佣的person","g.inject([355, 59, 314, 727]).unfold().as('p').V().has('id', __.where(eq('p'))).has('name', 'Bilibili').outE('company_employee_person').inV().hasLabel('person').dedup()"
请帮我查找名字是英国的节点,"g.V().has('name', '英国')"
从医生黄强出发，通过归属关系的边，走三步到达的部门。,"g.V().hasLabel('doctor').has('name', '黄强').repeat(outE('belong').inV().simplePath()).times(3).hasLabel('department').dedup()"
 请问CSDN论坛中某个帖子被其他用户喜欢的数量是多少？,"g.V().has('forum', 'name', 'CSDN').outE('contain').inV().hasLabel('post').inE('likes').outV().hasLabel('user').count()"
"查找拥有合并请求PR-232的仓库,和这些仓库拥有的事项","g.V().hasLabel('pullRequest').has('name', 'PR-232').as('a').inE('has').outV().hasLabel('repository').as('b').outE('has').inV().hasLabel('issue').as('c').select('b', 'c')"
"以113作为请求点id, 以属性id作为相等条件,给出user黄建国likes的post节点has的tag","g.V().hasLabel('user').has('id', 113).has('name', '黄建国').out('user_likes_post').out('post_has_tag')"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找名为徐宏的person","g.V().hasLabel('person').has('name', '徐宏')"
 找韩宏的出版社。,"g.V().hasLabel('publisher').has('name', '韩宏')"
给出168个与程序设计和高等数学都存在关系的教师或学生或大学节点,"g.V().has('name', '程序设计').bothE().otherV().hasLabel(within('teacher', 'student', 'university')).where(__.bothE().otherV().has('name', '高等数学')).limit(168)"
"查询与名为Prescription_297和Prescription_491的点共同contain的,label为medicine的节点","g.V().has('name', 'Prescription_297').out('contain').hasLabel('medicine').as('b').in('contain').has('name', 'Prescription_491').select('b')"
"使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出与名为吴梅和孙红的点共同invest的,类型为company的节点","g.V().has('person', 'name', '吴梅').out('person_invest_company').hasLabel('company').as('b').in('person_invest_company').has('person', 'name', '孙红').select('b')"
请帮我找出陈思琪发布的，被喜欢过的，走过1到3步的帖子,"g.V().hasLabel('user').has('name', '陈思琪').outE('likes').inV().hasLabel('post').range(1, 3).values('name')"
提供所有与药品相关的药品，以及包含这些药品的其他处方。,"g.V().hasLabel('medicine').has('id', '33').bothE().otherV().hasLabel('medicine').as('b').inE('contain').outV().hasLabel('prescription').as('c').select('b', 'c')"
 找出与账户Faker有转移关系的账户。,"g.V().has('account', 'name', 'Faker').inE('transfer').outV()"
"查找label为person的点,返回127个",g.V().hasLabel('person').limit(127)
"帮我查询所有源点标签为大学,目标点标签为部门,标签为教师的边",g.V().hasLabel('university').outE('teacher').where(inV().hasLabel('department'))
"查找所有id为139的处方关联的病人,和以诊断关系关联了这些病人的其他医生","g.V().has('prescription', 'id', 139).bothE().otherV().hasLabel('patient').as('b').inE('diagnose').otherV().hasLabel('doctor').as('c').select('b', 'c')"
 找出Comment的朋友，或者找到Comment朋友的朋友。,"g.V().hasLabel('comment').outE('friend').inV().range(1, 2).dedup()"
 请帮我查找Kate和吴国强共同取消的orders节点。,"g.V().has('name', 'kate').outE('cancel').inV().hasLabel('orders').as('b').inE('cancel').outV().has('name', '吴国强').select('b')"
"请帮我找出与买家王轩有关,且与商品电脑有关系的卖家节点","g.V().hasLabel('buyer').has('name', '王轩').bothE('consult').otherV().hasLabel('seller').bothE('has').otherV().hasLabel('goods').has('name', '电脑').select('b')"
"返回所有和person陈红有关系的person,返回这些点的身高,年龄","g.V().has('person', 'name', '陈红').bothE().otherV().hasLabel('person').project('b.height', 'b.age').by(values('height')).by(values('age'))"
"使用这个图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询85个公司美团和华为,共同的朋友","g.V().has('company', 'name', '美团').out('friend').as('b').in('friend').has('company', 'name', '华为').select('b').limit(85)"
"请帮我找出全部源点标签等于公司,目标点标签等于person,标签等于person或公司或软件的边","g.V().hasLabel('company').outE('person', 'company', 'software').as('e').inV().hasLabel('person').select('e')"
"查询label为作家的点,返回6个",g.V().hasLabel('author').limit(6)
"请帮我查找源点标签为用户,边标签为创造的边,返回这些边的权重加权重的值,和权重加124.86的值","g.V().hasLabel('user').outE('creates').project('expr1', 'expr2').by(values('weight').math('_ + _')).by(values('weight').math('_ + 124.86'))"
"帮我查询id在27到58之间且性别等于male的person认识的person的名称,以及这些person 认识的person的名称","g.V().hasLabel('person').has('id', between(27, 58)).has('gender', 'male').out('knows').as('b').out('knows').as('c').select('b', 'c').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"以958,879,198,945,624作为请求点id, 源点的id等于输入表id,查询所有部门的朋友,或其朋友的朋友","g.inject([958, 879, 198, 945, 624]).unfold().as('p').V().has('department', 'id', __.as('p')).repeat(out('friend')).times(2).emit().dedup()"
 请帮我查找和Spark相关的公司，以及与Spark使用的其他软件，并返回它们。,"g.V().hasLabel('software').has('name', 'Spark').as('a').bothE().otherV().hasLabel('company').as('b').select('a').outE('uses').inV().hasLabel('software').as('c').select('a', 'b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部源点类型是person,边类型是person_knows_person,以及f1是true且权重对165.41取余减561大于682,或目标点id的最小值小于等于118.99的边","g.V().hasLabel('person').as('a').outE('person_knows_person').as('e').inV().as('b').where(or(and(__.select('e').has('f1', true), __.select('e').values('weight').math('_ % 165.41 - 561').is(gt(682))), __.select('e').values('targetId').min().is(lte(118.99)))).select('e')"
"输入表的列为id,gender,height, 数据为(84,'male',159),(86,'male',156),(77,'male',194),(19,'famale',154), 源点的gender等于输入表gender,找出与person徐建国和Alice都存在person_knows_person关系的点","g.withSideEffect('p', [['id':84, 'gender':'male', 'height':159], ['id':86, 'gender':'male', 'height':156], ['id':77, 'gender':'male', 'height':194], ['id':19, 'gender':'famale', 'height':154]]).V().hasLabel('person').has('name', '徐建国').as('a').bothE('person_knows_person').otherV().as('b').bothE('person_knows_person').otherV().hasLabel('person').has('name', 'Alice').as('c').select('b').dedup()"
 请帮我查找所有医生（源点）到处方（目标）的边，并且这些边都带有'creates'标签。,g.V().hasLabel('doctor').outE('creates').as('e').inV().hasLabel('prescription').select('e')
 找到一个同时与徐国强和吴伟存在父母关系的点。,"g.V().has('person', 'name', '徐国强').out('parent').as('b').in('parent').has('person', 'name', '吴伟').select('b')"
"查找所有源点label为作家,目标点label为书,label为读者的边",g.V().hasLabel('author').outE('reader').inV().hasLabel('book').select('e')
给出以拥有关系关联了合并请求PR-221的仓库,"g.V().hasLabel('pullRequest').has('name', 'PR-221').in('has').hasLabel('repository')"
"找出名为loan_68的,isBlock不等于false的friend,返回这些friend的isBlock,和边的timeStamp","g.V().has('name', 'loan_68').outE('friend').as('e').inV().has('isBlock', neq(false)).as('b').select('b', 'e').by('isBlock').by('timeStamp')"
"帮我查询全部和名为Post_276的post有friend关系,或有friend的friend关系的tag","g.V().hasLabel('post').has('name', 'Post_276').out('friend').out('friend').hasLabel('tag').dedup()"
"根据名字,id分组,计算价值除价值的值",g.V().hasLabel('a').group().by('name').by('id').by(values('value').fold().mean())
"帮我查询用户的相关者,或其相关者的相关者","g.V().hasLabel('user').as('a').outE('relation').inV().hasLabel('user').range(1, 2).as('b').select('b')"
"用这个schema:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询user的三角的环,边类型是user_likes_repository, 并返回这些点的id","g.V().hasLabel('user').as('a').outE('user_likes_repository').inV().as('b').outE('user_likes_repository').inV().as('c').where('a', eq('c')).select('a', 'b', 'c').by(id()).by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
"给出全部源点价值小于等于636,目标点价值为空,且标签等于合作的边","g.V().has('value', lte(636)).outE('cooperate').as('e').inV().has('value', eq(null)).select('e')"
请帮我查找被person吴月knows的person,"g.V().hasLabel('person').has('name', '吴月').as('b').outE('knows').as('e').inV().as('a').select('a', 'b')"
返回全部和电影院人人影城之间有上映关系的电影,"g.V().has('cinema', 'name', '人人影城').out('releases').hasLabel('film')"
"输入请求点id的列表583,632,901,368, 源点的id等于输入表id,给出全部书的引用,或其引用的引用","g.inject([583, 632, 901, 368]).unfold().as('p').V().has('book', 'id', __.select('p')).repeat(out('book_refers_book')).times(2).dedup()"
查找论坛的2跳以内的环,"g.V().hasLabel('forum').as('a').repeat(both().simplePath()).times(2).where(loops().is(1).or().loops().is(2)).as('b').where(__.select('a').where(eq('b'))).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
请帮我找出与TheShy和LX001账号都有repay关系的点,"g.V().hasLabel('account').has('name', 'TheShy').outE('repay').inV().as('b').inE('repay').outV().hasLabel('account').has('name', 'LX001').select('b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出满足条件scale等于medium,scale等于large的节点","g.V().has('scale', 'medium').has('scale', 'large')"
请帮我查找id为113的点的课时,"g.V().has('id', 113).values('courseHour')"
"请帮我查找与university中国科技大学有关,且与teacher何若涵有关系的department节点","g.V().has('university', 'name', '中国科技大学').out('has').as('b').in('has').has('teacher', 'name', '何若涵').select('b')"
"请帮我查找认识person郑红的person,和这些person家人的person","g.V().hasLabel('person').has('name', '郑红').as('a').inE('knows').as('e').outV().as('b').hasLabel('person').outE('family').as('e2').inV().as('c').hasLabel('person').select('b', 'c')"
"给出全部名为陈伟的,名字等于Hadoop或语言等于java的朋友,返回这些朋友的星数,和边的f1,目标点id","g.V().has('name', '陈伟').outE('friend').as('e').inV().has('name', 'Hadoop').or().has('lang', 'java').project('b.stars', 'e.f1', 'e.targetId').by(values('stars')).by(select('e').values('f1')).by(select('e').values('targetId'))"
"查找和评论Comment_413有关的person,再查找和Comment_413属于的其他电影,返回它们","g.V().hasLabel('comment').has('name', 'Comment_413').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('belong').inV().hasLabel('film').as('c').select('a', 'b', 'c')"
"使用列为name,id,salary, 数据为('徐强',56,2054),('陈思思',33,3542)的子查询作为输入表, 源点的id等于输入表id,查询源点类型为公司,目标点类型为person,类型为company_employee_person的边","g.inject(['徐强',56,2054], ['陈思思',33,3542]).as('p').select('p').unfold().as('row').select('row').by(limit(3)).as('name','id','salary').select('id').as('inputId').V().hasLabel('company').has('id', __.where(eq('inputId'))).outE('company_employee_person').as('e').inV().hasLabel('person').select('e')"
"输入表的列为age,salary,gender, 数据为(47,9751,'male'),(73,5310,'male'), 源点的age等于输入表age,找出与person黄轩有关系的person, 返回和这些person有关联的person的,身高乘身高的值","g.inject([['age': 47, 'salary': 9751, 'gender': 'male'], ['age': 73, 'salary': 5310, 'gender': 'male']]).as('p').unfold().as('p_row').select('p_row').by(__.values('age', 'salary', 'gender').fold()).V().hasLabel('person').has('age', __.select('p_row').unfold().limit(1)).has('name', '黄轩').as('a').bothE().as('e').otherV().hasLabel('person').as('b').bothE().as('e2').otherV().hasLabel('person').as('c').select('c').by('height').math('_ * _').as('result').select('result')"
"以164作为请求点id, 以属性id作为相等条件,找出所有和country法国有关系的university节点,返回这些点的value","g.withSideEffect('p', [164]).V().hasLabel('country').has('id', __.select('p')).has('name', '法国').bothE().otherV().hasLabel('university').values('value')"
找出与CSDN有包含关系的帖子，以及这些帖子与标签有'has'关系的点，并返回这些点的名称。,"g.V().has('name', 'CSDN').out('contain').hasLabel('post').out('has').values('name')"
 查找33号读者与作家之间的朋友，然后再查找作家与这些朋友之间的关系。,"g.V().has('reader', 'id', '33').as('a').bothE().otherV().hasLabel('author').as('b').bothE('partner').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
"查询与buyer周国强存在consult关系,且与goods椅子存在has关系的seller节点，返回这些seller的salary,id,及buyer周国强的name,及goods椅子的value","g.V().hasLabel('buyer').has('name', '周国强').as('a').outE('consult').inV().hasLabel('seller').as('b').inE('has').outV().hasLabel('goods').has('name', '椅子').as('c').select('a', 'b', 'c').by('name').by(values('salary', 'id')).by('value')"
找出孙国强投资的公司,"g.V().hasLabel('person').has('name', '孙国强').as('b').outE('invest').as('e').inV().hasLabel('company').as('a').select('a', 'b')"
 帮我找陈轩这个人。,"g.V().hasLabel('person').has('name', '陈轩')"
查询全部标签等于university或teacher或student的点,"g.V().hasLabel(within('university', 'teacher', 'student'))"
"查找city广州contain的university,以及cooperate这些university的company, 令university的name等于city的peopleNumber除2625的最大值,令city的peopleNumber等于company的name的最大值, 返回city的value,university的level,company的peopleNumber","g.V().has('city', 'name', '广州').as('a').outE('contain').inV().hasLabel('university').as('b').inE('cooperate').outV().hasLabel('company').as('c').select('a', 'b', 'c').by('value').by('level').by('peopleNumber')"
"使用列为category,wordCount,createTime, 数据为('诗集',182,2001-11-18),('科普',317,2025-04-30),('科普',974,2014-09-19)的子查询作为输入表, 以属性category作为相等条件,帮我查询类型是book_refers_book,且目标点id不为空,目标点id不是104的边","g.inject(['诗集', 182, '2001-11-18'], ['科普', 317, '2025-04-30'], ['科普', 974, '2014-09-19']).as('p').flatMap(select('p').unfold().as('row').select('row').limit(1).as('category').select('row').skip(1).as('wordCount').select('row').skip(2).as('createTime')).V().has('category', select('category').select('category')).as('a').outE('book_refers_book').has('targetId', neq(null)).has('targetId', neq(104)).as('e').inV().as('b').select('e')"
"查找和software Mysql有关的person,再查找和Mysql uses的其他software,返回它们","g.V().hasLabel('software').has('name', 'Mysql').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('uses').inV().hasLabel('software').as('c').select('a', 'b', 'c')"
请帮我按医生点的名字分组，查询相关的处方节点。,g.V().hasLabel('doctor').bothE('creates').bothV().hasLabel('prescription').values('name').group().by(identity()).select(values)
"找出与名为李月和周月的点共同投资的,label为公司的节点","g.V().has('name', '李月').as('a').outE('invest').inV().hasLabel('company').as('b').inE('invest').outV().has('name', '周月').as('c').select('b')"
"帮我查询标签等于包含,且源点id的个数是112.80,f0大于682的边","g.E().hasLabel('contain').where(__.outV().id().count().is(eq(112.80))).has('f0', gt(682))"
返回与reader张国强有likes关系的3跳以内的环,"g.V().has('reader', 'name', '张国强').as('a').repeat(bothE().otherV().simplePath()).times(3).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id')"
"返回全部名为中国的点的,面积不为空或人数不等于34254的朋友,返回这些朋友的名字,和边的f1,权重","g.V().has('name', '中国').outE('friend').as('e').inV().as('b').where(or(__.has('area', neq(null)), __.has('peopleNumber', neq(34254)))).select('b', 'e').by('name').by(project('f1', 'weight').by('f1').by('weight'))"
"找出和person郑国强有关的person,称为X,再找出和这个X有关联的其他person,以及和X有关联的person","g.V().has('person', 'name', '郑国强').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
返回191个与孙思思和王若涵都存在关系的订单或商品节点,"g.V().has('name', '孙思思').as('a').outE().as('e').inV().has(label, within('orders', 'goods')).as('b').inE().as('e2').outV().has('name', '王若涵').as('c').select('b').limit(191)"
 查询与类型为'country'的节点有'contain'关系的节点，以及与这些节点有'belongs'关系的节点，以及与这些节点有'contain'关系的节点。,g.V().hasLabel('country').out('contain').out('belong').out('contain')
"使用列为value,createTime,name, 数据为(202,1997-12-29,'百度贴吧'),(593,1999-10-27,'知乎'),(210,2019-05-08,'天涯论坛'),(738,2009-12-09,'中国诗词论坛')的子查询作为输入表, 源点的createTime等于输入表createTime,返回和user有关联的post节点,并根据其lang,value分组,返回lang,value,以及id对0取余的平均值","g.inject([['value':202,'createTime':'1997-12-29','name':'百度贴吧'],['value':593,'createTime':'1999-10-27','name':'知乎'],['value':210,'createTime':'2019-05-08','name':'天涯论坛'],['value':738,'createTime':'2009-12-09','name':'中国诗词论坛']]).as('p').unfold().as('row').select('row').by(__.values('createTime')).as('createTime').V().hasLabel('user').has('createTime', __.select('createTime')).bothE('user_publish_post').otherV().hasLabel('post').as('b').select('b').by(__.values('lang')).as('lang').select('b').by(__.values('value')).as('value').select('b').by(__.values('id')).as('id').select('lang','value','id').group().by(__.select('lang','value')).by(__.select('id').fold().map(__.math('_ / 0').fold().mean())).unfold().project('lang','value','avg_id_mod_0').by(__.select(keys).select('lang')).by(__.select(keys).select('value')).by(__.select(values))"
"找出label为person,名为赵若涵的点,返回这些点的age,gender,height","g.V().hasLabel('person').has('name', '赵若涵').project('age', 'gender', 'height').by('age').by('gender').by('height')"
"给出源点类型是account,边类型是transfer,以及srcId不为空且weight不是169,或f0小于等于851的边","g.V().hasLabel('account').as('a').outE('transfer').as('e').where(or(and(has('srcId', neq(null)), has('weight', neq(169))), has('f0', lte(851)))).inV().as('b').select('e')"
 给出所有和名为Comment_472的评论有伴侣关系，或者有伴侣的伴侣关系的电影。,"g.V().hasLabel('comment').has('name', 'Comment_472').repeat(out('partner')).times(2).emit().hasLabel('film').dedup()"
"请帮我查找全部和公司点有创造关系的软件节点,且边满足条件f1是false,目标软件节点名字为SprintBoot","g.V().hasLabel('company').as('a').outE('creates').has('f1', false).as('e').inV().hasLabel('software').has('name', 'SprintBoot').as('b').select('b')"
"查找id为178的点的createTime,name,changeFileNumber","g.V().has('id', 178).project('createTime', 'name', 'changeFileNumber').by(values('createTime')).by(values('name')).by(values('changeFileNumber'))"
查询杜思琪咨询的卖家的商品,"g.V().hasLabel('buyer').has('name', '杜思琪').out('consult').hasLabel('seller').out('has').hasLabel('goods')"
给出全部名为张若涵的节点likes的issue,"g.V().has('name', '张若涵').outE('likes').inV().hasLabel('issue')"
"用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出和用户马建国有关系的论坛节点,返回这些点的id,名字","g.V().hasLabel('user').has('name', '马建国').bothE().otherV().hasLabel('forum').project('b.id', 'b.name').by('id').by('name')"
找出与贷款defaultName有申请关系的公司,"g.V().hasLabel('loan').has('name', 'defaultName').inE('apply').outV().hasLabel('company')"
"输入表的列为address,weight,id, 数据为('C栋',632,2),('东区',892,62), 以属性address作为相等条件,帮我查询id为114的药品有关的医生的朋友, 再帮我查询和医生有关系的相关者","g.withSideEffect('p', [['C栋',632,2],['东区',892,62]]).V().hasLabel('medicine').has('address', within('C栋','东区')).has('id', '114').as('a').bothE().as('e').otherV().hasLabel('doctor').as('b').outE('friend').as('e2').inV().as('c').select('b').outE('relation').as('e3').inV().as('d').select('a','b','c','d')"
"查找id为102的点的id,name,value","g.V().has('id', 102).project('id', 'name', 'value').by('id').by('name').by('value')"
"请帮我查找大学四川大学拥有的部门,以及拥有这些部门的大学","g.V().has('university', 'name', '四川大学').out('has').as('b').in('has').hasLabel('university').as('c').select('b', 'c')"
"请帮我找出所有源点标签为账号,目标点标签为贷款,标签为贷款或person或账号的边","g.V().hasLabel('account').outE('loan', 'person', 'account').as('e').inV().hasLabel('loan').select('e')"
"输入请求点id的列表831,474,132,304, 源点的id等于输入表id,查找论坛包含的帖子,返回其源点的价值减444的最大值,以及目标点的value的最小值乘价值的最小值","g.withSideEffect('p', [831, 474, 132, 304]).V().hasLabel('forum').has('id', within('p')).as('a').outE('forum_contain_post').inV().hasLabel('post').as('b').select('a', 'b').by('value').project('max_a_minus_444', 'min_b_times_min_b').by(select('a').math('_ - 444').max()).by(select('b').min().math('_ * _').min())"
id的数量减id的数量,g.V().hasLabel('a').project('count_minus_id').by(count()).by(values('id').sum()).select('count_minus_id').math('_ - _')
找出医生李思思创造的处方节点包含的药品,"g.V().hasLabel('doctor').has('name', '李思思').outE('creates').inV().hasLabel('prescription').outE('contain').inV().hasLabel('medicine')"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找person杜梅认识的person,被其他person认识的数量","g.V().has('person', 'name', '杜梅').as('a').outE('person_knows_person').inV().hasLabel('person').as('b').inE('person_knows_person').outV().hasLabel('person').as('c').where(neq('a')).select('c').count()"
"以839,436作为请求点id, 以属性id作为相等条件,给出所有id为23的person关联的account,和以transfer关系关联了这些account的其他account","g.inject([839, 436]).as('p').select('p').unfold().as('id').V().hasLabel('person').has('id', '23').as('a').bothE().as('e').otherV().hasLabel('account').as('b').inE('account_transfer_account').as('e2').outV().hasLabel('account').as('c').select('b', 'c')"
"给出id为180的user有关的user的partner, 再给出和user有关系的partner","g.V().has('user', 'id', 180).as('a').bothE().otherV().hasLabel('user').as('b').bothE('partner').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"根据name分组,计算size减67的值",g.V().hasLabel('a').group().by('name').by(values('size').math('_ - 67'))
找出以提交关系关联了软件Hadoop的person,"g.V().hasLabel('software').has('name', 'Hadoop').inE('commits').outV().hasLabel('person')"
"使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));找出40个教师杜建聪和李科,共同的朋友","g.V().has('teacher', 'name', '杜建聪').outE('friend').inV().where(__.inE('friend').outV().has('teacher', 'name', '李科')).limit(40)"
请帮我找出所有徐思琪喜欢的书，并且这些书之间有引用关系，返回这些引用关系中的点名。,"g.V().has('name', '徐思琪').out('likes').hasLabel('book').out('refers').hasLabel('book').values('name')"
"请帮我查找和person马月有认识关系的person,再请帮我查找以支付关系关联了马月的person","g.V().has('person', 'name', '马月').as('a').outE('knows').inV().hasLabel('person').as('b').select('a').inE('pay').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
 找到张思琪和马轩之间共同的购买对象。,"g.V().hasLabel('person').has('name', '张思琪').as('a').outE('buy').as('e').inV().as('b').inE('buy').as('e2').outV().hasLabel('person').has('name', '马轩').as('c').select('b').dedup()"
 查找57个学院，按名称升序排序，其中57个学院中包括艺术和物理学院。,"g.V().hasLabel('department').has('name', within('艺术学院', '物理学院')).order().by('name', asc).limit(57)"
查询名为徐科的点关联的person,"g.V().has('name', '徐科').outE('relates').inV().hasLabel('person')"
 查询周思琪的伴侣的伴侣关系。,"g.V().has('person', 'name', '周思琪').out('partner').out('partner').out('relation')"
"帮我查询和公司有关联的person节点,并根据其性别分组,返回性别,以及年龄除91乘9128的值",g.V().hasLabel('company').as('a').bothE('employee').otherV().hasLabel('person').as('b').select('b').group().by('gender').by(__.values('age').math('_ / 91 * 9128').fold())
"给出所有与论坛有关系的论坛节点,且论坛节点的创建时间不等于2027年10月18日,并返回这些论坛的价值对171取余的值,以及论坛的id对89取余的值","g.V().hasLabel('forum').as('a').outE().inV().hasLabel('forum').has('createTime', neq('2027-10-18')).as('b').select('b').project('value_mod', 'id_mod').by(values('value').math('_ % 171')).by(values('id').math('_ % 89'))"
 请问张月写的所有书籍节点，它们所知道的书籍。,"g.V().hasLabel('author').has('name', '张月').out('write').as('b').out('knows').as('c').select('c')"
"返回和读者周月有关的读者,称为X,再返回和这个X有关联的其他编辑,以及和X有关联的书","g.V().hasLabel('reader').has('name', '周月').as('a').bothE().otherV().hasLabel('reader').as('b').bothE().otherV().hasLabel('publisher').as('c').select('b').bothE().otherV().hasLabel('book').as('d').select('a', 'b', 'c', 'd')"
"帮我查询所有源点label为person,边label为家人的边,返回这些边的f0乘f0的值,和weight的和对120.34取余的最小值","g.V().hasLabel('person').outE('family').as('e').project('f0_squared', 'weight_sum_mod').by(select('e').values('f0').math('_ * _')).by(values('weight').sum().math('_ % 120.34')).select('weight_sum_mod').min()"
"输入表的列为gender,salary,age, 数据为('male',5628,49),('male',1340,45),('famale',5065,46),('famale',2350,83), 源点的age等于输入表age,请帮我找出所有和名为周强的person有parent关系,或有parent的parent关系的person","g.withSideEffect('p', [['gender': 'male', 'salary': 5628, 'age': 49], ['gender': 'male', 'salary': 1340, 'age': 45], ['gender': 'famale', 'salary': 5065, 'age': 46], ['gender': 'famale', 'salary': 2350, 'age': 83]]).V().hasLabel('person').has('name', '周强').as('a').V().hasLabel('person').as('b').where(__.as('a').repeat(__.out('person_parent_person')).times(2).emit().as('b')).where(__.as('b').values('age').as('b_age').select('p').unfold().where(__.select('b_age').is(eq(__.select(values).select('age'))))).select('b')"
"请帮我找出薪资大于4610或性别是famale的person关联的person的名称,以及这些person 关联的person的名称","g.V().hasLabel('person').or(has('salary', gt(4610)), has('gender', 'famale')).as('a').outE('relates').as('e').inV().hasLabel('person').as('b').outE('relates').as('e2').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我找出源点年龄小于等于44且id在25到87之间,目标点名字不是TheShy或上次登录时间不等于2011年09月09日或价值在1到633之间,且类型是拥有的边","g.E().hasLabel('own').where(and(__.outV().has('age', lte(44)).has('id', between(25, 87)), or(__.inV().has('name', neq('TheShy')), __.inV().has('lastLoginTime', neq('2011-09-09')), __.inV().has('value', between(1, 633)))))"
请帮我找出与杜建聪和周强都有关联的69个人节点,"g.V().has('name', '杜建聪').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '周强').select('b').limit(69)"
"查询名为loan_54的点的,isBlock等于true的friend,返回这些friend的value,和边的targetId,f1","g.V().has('name', 'loan_54').outE('friend').as('e').inV().has('isBlock', true).as('b').select('b', 'e').by('value').by(union(__.select('targetId'), __.select('f1')).fold())"
"找出id为92的点的星数,语言","g.V().has('id', 92).project('stars', 'lang').by('stars').by('lang')"
给出16个与伦敦和巴黎都存在关系的university节点,"g.V().has('name', '伦敦').outE().inV().hasLabel('university').as('b').inE().outV().has('name', '巴黎').select('b').limit(16)"
"帮我查询标签为公司,名为华为的点,返回这些点的id,人数,名字","g.V().hasLabel('company').has('name', '华为').project('a.id', 'a.peopleNumber', 'a.name').by(id()).by(values('peopleNumber')).by(values('name'))"
"帮我查询film的partner,及其partner",g.V().hasLabel('film').outE('partner').inV().hasLabel('film').path().by('id').by('id').by('id').limit(2)
"使用列为value,id,price, 数据为(481,58,3097.93),(77,6,1799.85),(239,78,4410.33),(441,99,4497.90)的子查询作为输入表, 以属性id作为相等条件,请帮我查找所有源点标签等于buyer,边标签等于buyer_consult_seller的边,返回这些边的f0减554的值,和f0对f0取余的值","g.inject([['value':481,'id':58,'price':3097.93],['value':77,'id':6,'price':1799.85],['value':239,'id':78,'price':4410.33],['value':441,'id':99,'price':4497.90]]).unfold().as('p').V().hasLabel('buyer').has('id', __.select('p').select('id')).as('a').outE('buyer_consult_seller').as('e').select('e').project('expr1','expr2').by(__.values('f0').math('_ - 554')).by(__.values('f0').math('_ % _'))"
"请帮我查找标签为person,名为黄雪的点,返回这些点的年龄,薪资","g.V().hasLabel('person').has('name', '黄雪').project('age', 'salary').by('age').by('salary')"
 查询黄思思和杜雪之间共同存在的创造关系。,"g.V().has('user', 'name', '黄思思').outE('creates').inV().as('b').inE('creates').outV().has('user', 'name', '杜雪').select('b')"
请帮我查询与医生杜月有关联的部门,"g.V().hasLabel('doctor').has('name', '杜月').inE('has').outV().hasLabel('department')"
"请帮我查找国家的伙伴,或其伙伴的伙伴","g.V().hasLabel('country').as('a').outE('partner').inV().range(1, 2).as('b').select('b')"
"返回label为book的点,返回72个",g.V().hasLabel('book').limit(72)
"输入请求点id的列表933, 以属性id作为相等条件,查询id为11的person有关的person的friend, 再查询和person有关系的friend","g.withSideEffect('p', [933]).V().hasLabel('person').has('id', '11').as('a').bothE().otherV().hasLabel('person').as('b').outE('friend').otherV().as('c').select('b').outE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
 找名为韩轩的reader点，返回它们的age和id。,"g.V().hasLabel('reader').has('name', '韩轩').project('a.age', 'a.id').by('age').by('id')"
"请帮我找出用户张建国创造的事项, 令事项的名字等于事项的状态,令事项的状态等于事项的名字, 返回用户的id, 事项的名字","g.V().hasLabel('user').has('name', '张建国').as('a').outE('creates').inV().hasLabel('issue').as('b').project('a_id', 'b_name').by(select('a').values('id')).by(select('b').values('status'))"
"查询与student何雪存在selects关系,且与department物理学院存在belong关系的course节点，返回这些course的courseHour,value,credit,及student何雪的age,及department物理学院的name","g.V().has('student', 'name', '何雪').as('a').outE('selects').inV().hasLabel('course').as('b').inE('belong').outV().has('department', 'name', '物理学院').as('c').select('a', 'b', 'c').by('age').by(values('courseHour', 'value', 'credit')).by('name')"
请帮我找出与徐伟（person）存在parent关系，并与张宏（person）存在colleague关系的所有person节点。请返回这些person的salary、徐伟的gender和张宏的height,"g.V().has('person', 'name', '徐伟').as('a').out('parent').hasLabel('person').as('b').in('colleague').has('person', 'name', '张宏').as('c').select('a', 'b', 'c').by('gender').by('salary').by('height')"
"使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出以拥有关系关联了部门生物学院的大学","g.V().has('department', 'name', '生物学院').in('university_has_department').hasLabel('university')"
"调用KHOP函数,以16作为输入,返回运算结果","g.call('KHOP').with('input', 16).select('id', 'kValue')"
 提取与帖子点相关的标签节点，按名称分组并返回。,g.V().hasLabel('post').bothE('has').otherV().hasLabel('tag').values('name').groupCount()
 给医生徐若涵开处方，并给与徐若涵诊断相关的病人。,"g.V().hasLabel('doctor').has('name', '徐若涵').as('a').outE('creates').inV().hasLabel('prescription').as('b').select('a').inE('diagnose').outV().hasLabel('patient').as('c').select('a', 'b', 'c')"
"找出源点名字等于孙伟且年龄大于等于94,目标点类别的最小值大于1441.44或价格在1760.92到3995.84之间,且id为空,且类型是查看的边","g.V().has('name', '孙伟').has('age', gte(94)).outE('look').as('e').inV().as('b').where(or(__.select('b').values('category').min().is(gt(1441.44)), __.select('b').has('price', between(1760.92, 3995.84)))).has('id', null).select('e')"
找出与订单Order_318存在包含关系的商品，以及这些商品所关联的其他订单。,"g.V().hasLabel('orders').has('name', 'Order_318').as('a').outE('contain').inV().hasLabel('goods').as('b').select('a').inE('contain').outV().hasLabel('goods').as('c').select('a', 'b', 'c')"
查询部门放射科拥有的医生节点诊断的病人,"g.V().hasLabel('department').has('name', '放射科').out('has').hasLabel('doctor').out('diagnose').hasLabel('patient')"
帮我查询以观看关系关联了电影功夫的person,"g.V().hasLabel('film').has('name', '功夫').inE('watch').outV().hasLabel('person')"
"用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));返回与author黄轩和郑雪都存在author_knows_author关系的点","g.V().has('author', 'name', '黄轩').out('author_knows_author').as('b').in('author_knows_author').has('author', 'name', '郑雪').select('b')"
"使用列为id,height,salary, 数据为(48,175,3329)的子查询作为输入表, 以属性height作为相等条件,找出名为陈伟的person","g.withSideEffect('p', [['id':48, 'height':175, 'salary':3329]]).V().hasLabel('person').has('height', __.select('p').unfold().select('height')).has('name', '陈伟')"
 找出与张若涵有关联的公司，然后找出这些公司与贷款之间的关联，并返回这些点的权重。,"g.V().has('name', '张若涵').outE('invest').inV().hasLabel('company').outE('apply').inV().hasLabel('loan').values('weight')"
"给出全部与推特存在包含关系的用户,用户与帖子存在发布关系的点,返回这些点的id","g.V().has('name', '推特').out('contain').hasLabel('user').out('publish').hasLabel('post').id()"
 返回张梅医生的丈夫的朋友,"g.V().hasLabel('doctor').has('name', '张梅').outE('partner').inV().outE('partner').inV().outE('friend').inV()"
获取id在58到63之间的account repay的loan的名称，以及这些loan对应的deposit的account的名称。,"g.V().hasLabel('account').has('id', between(58, 63)).has('createTime', '1996-07-29').outE('repay').inV().hasLabel('loan').as('b').outE('deposit').inV().hasLabel('account').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"查询person张强认识的person, 令person(b)的薪资等于person(a)的id的最小值加76, 返回person(a)的名字, person(b)的id","g.V().has('person', 'name', '张强').as('a').outE('knows').inV().hasLabel('person').as('b').sideEffect(__.select('b').property('salary', __.select('a').values('id').min().math('_ + 76'))).select('a', 'b').by('name').by('id')"
"输入表的列为gender,salary,name, 数据为('male',5589,'郑伟'),('male',3608,'吴建国'), 源点的salary等于输入表salary,帮我查询teacher以name,age分组的salary, 根据salary降序排序","g.inject(['male', 5589, '郑伟'], ['male', 3608, '吴建国']).as('p').select('p').unfold().as('row').select(all, 'row').by().by(unfold()).V().hasLabel('teacher').as('a').where(eq('a')).by('salary').by(select('row').select('salary')).select('a').group().by(project('name', 'age').by('name').by('age')).by(select('a').values('salary').fold()).order(local).by(values, desc)"
 给出96个与城市有属于关系且与这些国家有包含关系的国家。,g.V().hasLabel('city').as('a').outE('belong').as('e').inV().hasLabel('country').as('b').outE('contain').as('e2').inV().hasLabel('city').as('c').select('c').limit(96)
"查找名为陈雪和张建国的,标签等于author的点公共的partner节点的名单","g.V().has('author', 'name', '陈雪').as('a').outE('partner').inV().as('b').inE('partner').outV().has('author', 'name', '张建国').as('c').select('b').values('name')"
 找出郑科店铺中所有商品，并找出向郑科咨询的买家，然后将两者一起返回。,"g.V().has('name', '郑科').as('a').outE('has').inV().hasLabel('goods').as('b').select('a').inE('consult').outV().hasLabel('buyer').as('c').select('a', 'b', 'c')"
"根据name,gender,age分组,计算salary减1588的值","g.V().hasLabel('a').group().by(values('name', 'gender', 'age')).by(values('salary').math('_ - 1588'))"
"帮我查询与名为Order_439和Order_318的点共同contain的,标签为goods的节点","g.V().has('name', 'Order_439').out('contain').hasLabel('goods').as('b').in('contain').has('name', 'Order_318').select('b')"
 查询与Calcite和Hive有关联的96个软件节点。,"g.V().has('name', 'Calcite').outE().as('e').inV().hasLabel('software').as('b').inE().as('e2').outV().has('name', 'Hive').as('c').select('b').limit(96)"
"输入请求点id的列表501,280,226, 源点的id等于输入表id,请帮我找出person徐建国的标签等于同事的边,并根据f0升序排列,返回50个","g.withSideEffect('p', [501, 280, 226]).V().hasLabel('person').where(__.values('id').is(within('p'))).has('name', '徐建国').outE('person_colleague_person').order().by('f0', asc).limit(50).inV()"
 查询标签为company且名称为滴滴的点，并返回这些点的名称。,"g.V().hasLabel('company').has('name', '滴滴').values('name')"
 给出王红老师的朋友的朋友,"g.V().hasLabel('teacher').has('name', '王红').outE('relation').inV().outE('friend').inV().outE('friend').inV()"
"查找和买家徐轩有关的卖家,称为X,再查找和这个X有关联的其他卖家,以及和X有关联的商品","g.V().has('buyer', 'name', '徐轩').as('a').bothE().otherV().hasLabel('seller').as('b').bothE().otherV().hasLabel('seller').as('c').select('b').bothE().otherV().hasLabel('goods').as('d').select('a', 'b', 'c', 'd')"
"找出名为Prescription_391和Prescription_176的,标签为prescription的点公共的partner节点的名单","g.V().has('prescription', 'name', 'Prescription_391').out('partner').as('b').in('partner').has('prescription', 'name', 'Prescription_176').select('b').values('name')"
"用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出全部名为Post_429的点拥有的标签","g.V().has('name', 'Post_429').outE('post_has_tag').inV().hasLabel('tag')"
"请帮我查找与郑宏存在喜欢关系的帖子,帖子与标签存在拥有关系的点,返回这些点的id","g.V().has('name', '郑宏').outE('likes').inV().hasLabel('post').outE('has').inV().hasLabel('tag').id()"
"查找创造事项ISSUE-466的用户,和这些用户创造的事项","g.V().has('issue', 'name', 'ISSUE-466').in('creates').as('b').out('creates').as('c').select('b', 'c')"
"用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出id为98的点的id","g.V().has('id', '98').values('id')"
"使用列为id,name,value, 数据为(39,'西虹市首富',899),(16,'少年足球',244),(32,'建国大业',38),(74,'功夫',250)的子查询作为输入表, 源点的name等于输入表name,查找所有标签以价值,id分组的价值, 根据价值降序排序","g.inject([['id':39,'name':'西虹市首富','value':899],['id':16,'name':'少年足球','value':244],['id':32,'name':'建国大业','value':38],['id':74,'name':'功夫','value':250]]).unfold().as('p').V().hasLabel('tag').has('name', __.select('p').select('name')).as('a').select('a').project('value','id').by(__.select('a').values('value')).by(__.select('a').values('id')).group().by(__.select('value')).by(__.select('id').fold()).order(local).by(keys, desc)"
"用如下schema的图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));找出所有id为127的university关联的country,和以belong关系关联了这些country的其他city","g.V().has('university', 'id', 127).bothE().otherV().hasLabel('country').as('b').inE('city_belong_country').otherV().hasLabel('city').as('c').select('b', 'c')"
"请帮我查找95个id小于等于49的评论,根据创建时间从小到大排列","g.V().hasLabel('comment').has('id', lte(49)).order().by('createTime', asc).limit(95)"
"查找与person李伟有关,且与person陈强有关系的person节点","g.V().has('person', 'name', '李伟').bothE('knows').otherV().hasLabel('person').where(bothE('knows').otherV().has('person', 'name', '陈强')).dedup()"
"帮我查询和仓库Tugraph有关的仓库,称为X,再帮我查询和这个X有关联的其他合并请求,以及和X有关联的仓库","g.V().has('repository', 'name', 'Tugraph').as('a').bothE().otherV().hasLabel('repository').as('b').bothE().as('e2').otherV().hasLabel('pullRequest').as('c').select('b').bothE().as('e3').otherV().hasLabel('repository').as('d').select('a', 'b', 'c', 'd')"
"返回151个名为何若涵的点认识的类型是作家的节点,且其薪资在5028到6603之间","g.V().has('name', '何若涵').outE('knows').inV().hasLabel('author').has('salary', between(5028, 6603)).limit(151)"
"查询147个名为韩国强的点撰写的label为书的节点,且其创建时间等于2033年10月24日,id等于57","g.V().has('name', '韩国强').outE('write').inV().hasLabel('book').has('createTime', '2033-10-24').has('id', 57).limit(147)"
"请帮我找出前192个满足条件创建时间为2025年03月03日或id不为空,且名字为Comment_207的评论","g.V().hasLabel('comment').has('createTime', '2025-03-03').or(has('id', neq(null))).has('name', 'Comment_207').limit(192)"
 找出与账号有关联的所有非Kate person节点，并找出这些节点中身高减去174后的最小值，以及身高乘155减去7841的值。,"g.V().hasLabel('account').as('a').outE().as('e').inV().hasLabel('person').has('name', neq('kate')).as('b').project('min_height_diff', 'height_calc').by(__.select('b').values('height').math('_ - 174').min()).by(__.select('b').values('height').math('_ * 155 - 7841'))"
"返回id为188的person belong的company, 并将company有关的software的lang的最大值赋值给company的name, 接着查询company的name小于188的company employee的person","g.V().has('person', 'id', 188).outE('belong').inV().hasLabel('company').as('b').sideEffect(__.select('b').aggregate('company').bothE().otherV().hasLabel('software').values('lang').max().as('maxLang').select('company').unfold().property('name', __.select('maxLang'))).select('b').has('name', lt(188)).outE('employee').inV().hasLabel('person').as('d').select('b', 'd').by('name').by()"
查询与一个人有恋人关系的人，以及与这些人有朋友关系的人，以及与这些人有父母关系的人。,g.V().hasLabel('person').as('a').out('lover').hasLabel('person').as('b').out('friend').hasLabel('person').as('c').out('parent').hasLabel('person').as('d').select('d')
 找出所有起点和终点都标记为'软件'，并且标签为'使用'的边。,g.V().hasLabel('software').outE('uses').where(inV().hasLabel('software'))
"查找id为16的帖子有关的论坛的伙伴, 再查找和论坛有关系的朋友","g.V().has('post', 'id', 16).as('a').bothE().otherV().hasLabel('forum').as('b').bothE().otherV().hasLabel('forum').as('b').outE('partner').inV().as('c').select('b').outE('friend').inV().as('d').select('a', 'b', 'c', 'd')"
"输入表的列为age,salary,gender, 数据为(29,4230,'famale'), 源点的gender等于输入表gender,请帮我找出和person吴思思之间有person_friend_person关系的person","g.withSideEffect('p', [['age': 29, 'salary': 4230, 'gender': 'famale']]).V().hasLabel('person').has('gender', __.select('p').unfold().select('gender')).has('name', '吴思思').outE('person_friend_person').inV().hasLabel('person')"
"请帮我查找person以性别,身高分组的年龄, 根据年龄降序排序","g.V().hasLabel('person').group().by('gender').by(group().by('height').by(values('age').fold())).order(local).by(values, desc)"
 请帮我查询与处方笺331相关的部门，并返回包含该处方的其他药物。,"g.V().hasLabel('prescription').has('name', 'Prescription_331').as('a').bothE().otherV().hasLabel('department').as('b').select('a').outE('contain').inV().hasLabel('medicine').as('c').select('a', 'b', 'c')"
"给出所有名为杜雪的点的,薪资大于等于3645或性别是famale的朋友,返回这些朋友的薪资,和边的f0","g.V().has('name', '杜雪').outE('friend').as('e').inV().has('salary', gte(3645)).or().has('gender', 'famale').as('b').select('b', 'e').by('salary').by('f0')"
"找出名为Geaflow123和Faker的,类型为账号的点公共的伙伴节点的名单","g.V().hasLabel('account').has('name', 'Geaflow123').as('a').outE('partner').inV().as('b').inE('partner').outV().hasLabel('account').has('name', 'Faker').as('c').select('b').values('name')"
"给出152个买家黄梅和Amily,共同的伙伴","g.V().has('buyer', 'name', '黄梅').as('a').outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().has('buyer', 'name', 'Amily').as('c').select('b').limit(152)"
找出位于广州的公司,"g.V().hasLabel('city').has('name', '广州').outE('contain').inV().hasLabel('company').as('b').select('b').as('a').select('a', 'b')"
 马雪认识的人。,"g.V().hasLabel('person').has('name', '马雪').out('relates').hasLabel('person').out('knows').hasLabel('person')"
"给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找所有名为Order_297的点contain的goods","g.V().has('name', 'Order_297').out('orders_contain_goods').hasLabel('goods')"
"以77, 'bl', 99作为输入调用KHOP函数,返回运算结果","g.call('KHOP').with('arg0', 77).with('arg1', 'bl').with('arg2', 99).select('id', 'kValue')"
"返回和类型为person的点有likes关系的person,且和这些person有knows关系的person,且和这些person有pay关系的person",g.V().hasLabel('person').as('a').outE('likes').inV().hasLabel('person').as('b').outE('knows').inV().hasLabel('person').as('c').outE('pay').inV().hasLabel('person').as('d').select('d')
"以812,726作为请求点id, 以属性id作为相等条件,帮我查询前160个满足条件height在169到191之间或age小于等于56的person","g.inject([812, 726]).unfold().as('p').V().hasLabel('person').as('a').where(eq('p')).by('id').by().and(or(and(has('height', between(169, 191))), has('age', lte(56)))).select('a').limit(160)"
返回与Post_173有has关系的所有tag，以及包含知乎的论坛的所有post。,"g.V().hasLabel('post').has('name', 'Post_173').as('a').outE('has').inV().hasLabel('tag').as('b').select('a').V().hasLabel('forum').has('name', '知乎').as('c').outE('contain').inV().hasLabel('post').as('d').select('a', 'b', 'c', 'd')"
"查询所有名为孙科的,薪资大于4596的伙伴,返回这些伙伴的薪资,和边的权重","g.V().has('name', '孙科').outE('partner').as('e').inV().has('salary', gt(4596)).project('b.salary', 'e.weight').by(values('salary')).by(select('e').values('weight'))"
"请帮我找出person的三角的环,边标签为提交, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('commits').inV().as('b').outE('commits').inV().as('c').where(__.outE('commits').inV().as('a')).select('a', 'b', 'c').by().by(id).by(id).project('a', 'b_id', 'c_id').by().by(select('b')).by(select('c'))"
请帮我查找与电子科技大学和学生韩梅相关的节点,"g.V().has('university', 'name', '电子科技大学').out('has').hasLabel('department').where(__.in('has').has('student', 'name', '韩梅')).dedup()"
 请帮我找出与类型为'书'的185个点有引用关系的书，并找出与这些书有引用关系的书。,g.V().hasLabel('book').as('a').out('refers').hasLabel('book').as('b').out('refers').hasLabel('book').as('c').select('c').limit(185)
"请帮我查找标签等于department的点,返回3个",g.V().hasLabel('department').limit(3)
"帮我查询id为128的点的id,amount,weight","g.V().has('id', 128).project('id', 'amount', 'weight').by(values('id')).by(values('amount')).by(values('weight'))"
"给出全部id为70的订单关联的订单,和以取消关系关联了这些订单的其他买家","g.V().hasLabel('orders').has('id', 70).bothE().otherV().hasLabel('orders').as('b').inE('cancel').outV().hasLabel('buyer').as('c').select('b', 'c')"
"请帮我查找所有源点类型为医生,边类型为诊断,且权重不为空或目标点id大于等于199或权重不等于188.41的边","g.V().hasLabel('doctor').outE('diagnose').or(has('weight', neq(null)), has('targetId', gte(199)), has('weight', neq(188.41))).dedup()"
请帮我找出所有性别为女性的与department有关联的doctor节点，然后返回这些节点的salary乘以salary的值和height的数量乘以height的值。,"g.V().hasLabel('department').as('a').outE().as('e').inV().hasLabel('doctor').has('gender', 'famale').as('b').project('salary_squared', 'height_count_times_height').by(select('b').values('salary').math('_ * _')).by(select('b').values('height').count().math('_ * _'))"
请找出与浙江大学有合作关系的公司，以及包含韩国的 city，并将它们全部返回。,"g.V().has('university', 'name', '浙江大学').as('a').outE('cooperate').inV().as('b').V().has('country', 'name', '韩国').as('c').outE('contain').inV().as('d').select('a', 'b', 'c', 'd')"
"返回名为王建聪的issue或pullRequest,以及与其有关的pullRequest,并返回王建聪的height和这些pullRequest的createTime","g.V().hasLabel(within('issue', 'pullRequest')).has('name', '王建聪').as('a').bothE().otherV().hasLabel('pullRequest').as('b').select('a', 'b').by(values('height')).by(values('createTime'))"
"使用列为gender,name,salary, 数据为('famale','杜国强',1782)的子查询作为输入表, 以属性gender作为相等条件,帮我查询论坛的3度以内的环","g.withSideEffect('p', [['gender': 'famale', 'name': '杜国强', 'salary': 1782]]).V().hasLabel('forum').has('gender', __.select('p').unfold().select('gender')).as('a').both().as('b').both().where(eq('a')).select('a', 'b').by('id').by('id')"
"帮我查询和处方Prescription_174有包含关系的药品,再帮我查询以包含关系关联了Prescription_174的药品","g.V().hasLabel('prescription').has('name', 'Prescription_174').as('a').outE('contain').inV().hasLabel('medicine').as('b').select('a').inE('contain').outV().hasLabel('medicine').as('c').select('a', 'b', 'c')"
"帮我查询所有Flink的点has的issue,然后帮我查询Flink被belong的issue,一起返回","g.V().has('name', 'Flink').as('a').outE('has').inV().hasLabel('issue').as('b').select('a').inE('belong').outV().hasLabel('issue').as('c').select('a', 'b', 'c')"
查找所有与书三体有关系的读者的id,"g.V().has('book', 'name', '三体').bothE().otherV().hasLabel('reader').id()"
按年龄和ID对卖家进行分组，然后按照性别从A到Z排序。,"g.V().hasLabel('seller').group().by(values('age', 'id')).by(values('gender').fold()).order(local).by(keys, asc).unfold().project('gender').by(select(values).unfold())"
"请帮我找出所有源点id不为空且id的平均值等于50,目标点销量是302.56或销量小于等于814.14,且标签等于拥有的边","g.V().has('id', neq(null)).where(__.mean().by('id').is(eq(50))).outE('has').where(__.inV().has('sellerNumber', within(302.56)).or().has('sellerNumber', lte(814.14))).dedup()"
"使用列为age,height,id, 数据为(89,156,85)的子查询作为输入表, 源点的age等于输入表age,请帮我查找account XiaoHu repay的loan,被其他account repay的数量","g.withSideEffect('p', [['age': 89, 'height': 156, 'id': 85]]).V().hasLabel('account').has('age', __.select('p').unfold().select('age')).has('name', 'XiaoHu').outE('account_repay_loan').inV().hasLabel('loan').inE('account_repay_loan').outV().hasLabel('account').count()"
找出所有与订单Order_402有关系的买家的性别,"g.V().hasLabel('orders').has('name', 'Order_402').bothE().otherV().hasLabel('buyer').values('gender')"
"给出label为likes,并且满足条件srcId在68到117之间或srcId减11大于等于892或f0在514到982之间的边","g.E().hasLabel('likes').or(has('srcId', between(68, 117)), has('srcId', P.gte(903)), has('f0', between(514, 982)))"
 找出标签为'部门'且名称为'体育学院'的点，并返回它们的大小。,"g.V().hasLabel('department').has('name', '体育学院').values('size')"
"帮我查询67个和类型是person的点有拥有关系的账号,并且和这些账号有还款关系的贷款",g.V().hasLabel('person').as('a').outE('own').as('e').inV().hasLabel('account').as('b').outE('repay').as('e2').inV().hasLabel('loan').as('c').select('c').limit(67)
查找被comment Comment_151 belong的film,"g.V().hasLabel('comment').has('name', 'Comment_151').outE('belong').inV().hasLabel('film').as('b').inV().as('a').select('a', 'b')"
"使用列为id,scale,value, 数据为(89,'medium',484),(7,'large',723),(54,'medium',329)的子查询作为输入表, 以属性scale作为相等条件,帮我查询和city有关联的country节点,并根据其peopleNumber,value分组,返回peopleNumber,value,以及value对value取余的个数","g.inject([['id':89,'scale':'medium','value':484],['id':7,'scale':'large','value':723],['id':54,'scale':'medium','value':329]]).as('p').unfold().as('row').select('row').by().project('scale').by(select('row').values('scale')).select('scale').as('p_scale').V().hasLabel('city').has('scale', select('p_scale')).as('a').bothE('city_belong_country').otherV().hasLabel('country').as('b').select('b').values('peopleNumber','value').as('peopleNumber','value').select('peopleNumber','value').group().by(project('peopleNumber','value').by(select('peopleNumber')).by(select('value'))).by(count()).select(values).unfold().project('peopleNumber','value','count').by(select(keys).select('peopleNumber')).by(select(keys).select('value')).by(select(values))"
 找出所有标签为'用户'的点，然后按它们对应的ID从小到大排序。,"g.V().hasLabel('user').order().by('id', asc)"
"请帮我查找与person赵建国有关,且与loan loan_47有关系的company节点","g.V().hasLabel('person').has('name', '赵建国').bothE('invest').otherV().hasLabel('company').bothE('apply').otherV().hasLabel('loan').has('name', 'loan_47').select('company').dedup()"
"查询publisher的partner,或其partner的partner","g.V().hasLabel('publisher').outE('partner').inV().range(1, 2).dedup()"
查询与《呐喊》有关的编辑，然后查询《呐喊》引用的其他书籍，并将它们返回。,"g.V().hasLabel('book').has('name', '呐喊').as('a').bothE().as('e').otherV().hasLabel('publisher').as('b').select('a').outE('refers').as('e2').inV().hasLabel('book').as('c').select('a', 'b', 'c')"
"以589作为请求点id, 以属性id作为相等条件,请帮我查找名为Prescription_246的prescription,以及与其有关的prescription,并返回Prescription_246的id和这些prescription的name","g.withSideEffect('p', [589]).V().hasLabel('prescription').has('id', __.select('p')).has('name', 'Prescription_246').as('a').bothE().as('e').otherV().hasLabel('prescription').as('b').select('a', 'b').by('id').by('name')"
"请帮我查找类型是标签的点,返回67个",g.V().hasLabel('tag').limit(67)
找出TheShy和Light的共同好友，共有95人。,"g.V().has('account', 'name', 'TheShy').out('friend').as('b').in('friend').has('account', 'name', 'Light').select('b').limit(95)"
 返回物理学院相关者的相关者。,"g.V().has('department', 'name', '物理学院').out('relation').out('relation').out('relation')"
"给出被医生黄建国属于的部门,和黄建国创造的处方","g.V().hasLabel('doctor').has('name', '黄建国').as('b').outE('creates').inV().hasLabel('prescription').as('c').select('b').inE('belong').outV().hasLabel('department').as('a').select('a', 'b', 'c')"
"找出全部account的friend,或其friend的friend","g.V().hasLabel('account').out('friend').range(1, 2).dedup()"
年龄除95除年龄的数量,g.V().hasLabel('a').project('result').by(values('age').math('/ 95').math('/ age')).count()
"请帮我查找作家何梅的全部朋友,的f0乘f0的最小值","g.V().has('author', 'name', '何梅').outE('friend').project('f0_squared').by(values('f0').math('_ * _')).select('f0_squared').min()"
 返回university武汉大学的学生薪资，需要先查询university武汉大学下属的部门，再查询每个部门的学生薪资。,"g.V().has('university', 'name', '武汉大学').out('has').hasLabel('department').out('has').hasLabel('student').values('salary')"
"根据性别,薪资,年龄分组,计算薪资减5929的值","g.V().hasLabel('a').group().by(values('gender', 'salary', 'age').fold()).by(values('salary').math('_ - 5929').fold())"
"以991,956,680,54作为请求点id, 以属性id作为相等条件,给出评论Comment_100的所有label为伙伴的边,并根据目标点id升序排列,返回28个","g.inject([991, 956, 680, 54]).unfold().as('p').V().hasLabel('comment').has('id', __.select('p')).has('name', 'Comment_100').outE('partner').as('e').inV().as('b').order().by(__.select('e').values('targetId'), asc).limit(28).select('b')"
"请帮我找出和标签等于作家的点有撰写关系的书,且和这些书有引用关系的书,且和这些书有引用关系的书",g.V().hasLabel('author').as('a').out('write').hasLabel('book').as('b').out('refers').hasLabel('book').as('c').out('refers').hasLabel('book').as('d').select('d')
 请问能否帮我查询一下，郑若涵认识的所有人的信息？,"g.V().has('person', 'name', '郑若涵').out('knows').out('knows').dedup()"
 请帮我查找与用户'孙梅'有关，且包含标签'其他'的帖子节点。,"g.V().has('user', 'name', '孙梅').bothE('likes').otherV().hasLabel('post').bothE('has').otherV().has('tag', 'name', '其他').select('b')"
"请帮我找出被person孙国强拥有的账号,和孙国强申请的贷款","g.V().hasLabel('person').has('name', '孙国强').as('b').outE('own').inV().hasLabel('account').as('a').select('b').outE('apply').inV().hasLabel('loan').as('c').select('a', 'b', 'c')"
帮我查一下郑思思点赞和被认识的所有人，一起返回,"g.V().has('name', '郑思思').as('a').outE('likes').inV().hasLabel('person').as('b').select('a').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"返回46个person孙月和何轩,共同的伙伴","g.V().has('person', 'name', '孙月').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '何轩').select('b').limit(46)"
"调用SSSP函数,以66, 'ZG'作为输入,返回id, distance","g.call('SSSP').with('input1', 66).with('input2', 'ZG').select('id', 'distance')"
 请帮我查询comment节点中，与张国强有关且与大众影院有关的评论，并返回它们的名称、创建时间和单词计数。,"g.V().has('person', 'name', '张国强').outE().inV().hasLabel('comment').as('b').inE().outV().has('cinema', 'name', '大众影院').select('b').values('name', 'createTime', 'wordCount')"
"请帮我找出153个buyer徐思琪和赵科,共同的partner","g.V().has('buyer', 'name', '徐思琪').outE('partner').inV().as('b').inE('partner').outV().has('buyer', 'name', '赵科').select('b').limit(153)"
"给出买家李轩创造的订单,以及取消这些订单的买家, 令订单的价格等于订单的id的平均值, 返回买家(a)的薪资,订单(b)的名字,买家(c)的名字","g.V().hasLabel('buyer').has('name', '李轩').as('a').outE('creates').inV().hasLabel('orders').as('b').inE('cancel').outV().hasLabel('buyer').as('c').select('a', 'b', 'c').by('salary').by('name').by('name').project('a_salary', 'b_name', 'c_name').by(select('a')).by(select('b')).by(select('c'))"
"返回和类型是买家的点有咨询关系的卖家,以及和这些卖家有回答关系的买家,以及和这些买家有咨询关系的卖家",g.V().hasLabel('buyer').as('a').out('consult').hasLabel('seller').as('b').in('ask').hasLabel('buyer').as('c').out('consult').hasLabel('seller').as('d').select('d')
"返回invest company美团的person,和这些person invest的company","g.V().hasLabel('company').has('name', '美团').in('invest').as('b').out('invest').as('c').select('b', 'c')"
请帮我找出全部label为university的点,g.V().hasLabel('university')
找到所有源点标签为公司，目标点标签为贷款，且标签为申请的边。,g.E().hasLabel('apply').where(outV().hasLabel('company')).where(inV().hasLabel('loan'))
"请帮我找出publisher周雪的所有relation,的srcId加96的值","g.V().has('publisher', 'name', '周雪').outE('relation').project('result').by(values('srcId').math('_ + 96'))"
给出与学生何雪和孙伟都存在选择关系的点,"g.V().has('student', 'name', '何雪').outE('selects').inV().as('b').inE('selects').outV().has('student', 'name', '孙伟').select('b').dedup()"
返回徐建国有喜欢关系的人，以及这些人中与徐建国有认识关系的人。,"g.V().has('person', 'name', '徐建国').as('a').out('likes').as('b').select('a').in('knows').as('c').select('a', 'b', 'c')"
"帮我查询公司华为的所有label为相关者的边,并根据源点id升序排列,返回126个","g.V().hasLabel('company').has('name', '华为').outE('relation').order().by('srcId', asc).limit(126).inV()"
"帮我查询全部和大学清华大学有关系的大学,返回这些点的面积","g.V().has('university', 'name', '清华大学').bothE().otherV().hasLabel('university').values('area')"
"以377,6作为请求点id, 源点的id等于输入表id,查询所有物理学院的点拥有的教师,然后查询物理学院被拥有的大学,一起返回","g.inject([377, 6]).as('p').flatMap(select('p').unfold().as('id')).V().has('id', where(eq('id'))).has('name', '物理学院').as('a').outE('department_has_teacher').inV().hasLabel('teacher').as('b').select('a').inE('university_has_department').outV().hasLabel('university').as('c').select('a', 'b', 'c')"
"帮我查询label为撰写,以及满足条件目标点id大于44的边","g.E().hasLabel('write').has('targetId', gt(44))"
"帮我查询全部和person点有申请关系的贷款节点,且边满足条件权重大于等于118.29,目标贷款节点满足条件id大于等于58","g.V().hasLabel('person').as('a').outE('apply').has('weight', gte(118.29)).as('e').inV().hasLabel('loan').has('id', gte(58)).as('b').select('b')"
"给出名为重庆大学的大学,以及与其有关的城市,并返回重庆大学的等级和这些城市的id","g.V().has('university', 'name', '重庆大学').as('a').bothE().as('e').otherV().hasLabel('city').as('b').select('a', 'b').by(values('level')).by(values('id'))"
"请帮我找出107个和标签为账号的点有转账关系的账号,且和这些账号有还款关系的贷款",g.V().hasLabel('account').as('a').outE('transfer').as('e').inV().hasLabel('account').as('b').outE('repay').as('e2').inV().hasLabel('loan').as('c').select('c').limit(107)
 找出与武汉有包含关系且与微软有合作关系的大学，返回它们的价值、ID、武汉的名称和微软的价值。,"g.V().has('city', 'name', '武汉').as('a').outE('contain').inV().hasLabel('university').as('b').inE('cooperate').outV().has('company', 'name', '微软').as('c').select('a', 'b', 'c').by('name').by(values('value', 'id')).by('value')"
 从韩月出发，沿着认识边走3度，到达哪个点？,"g.V().has('person', 'name', '韩月').repeat(out('knows')).times(3).hasLabel('person')"
请帮我找出与李伟和吴建国都相关的人。,"g.V().has('person', 'name', '李伟').bothE('pay').bothV().hasLabel('person').where(bothE('likes').bothV().has('person', 'name', '吴建国')).dedup()"
 列出XXD和Light之间转账的账户。,"g.V().hasLabel('account').has('name', 'XXD').outE('transfer').inV().as('b').inE('transfer').outV().hasLabel('account').has('name', 'Light').select('b')"
找出所有源点为电影院，目标点为电影且标签为上映的边。,g.V().hasLabel('cinema').outE('releases').as('e').inV().hasLabel('film').select('e')
"给出id不等于16的城市包含的公司的名称,以及这些公司 合作的大学的名称","g.V().hasLabel('city').has('id', neq(16)).outE('contain').inV().hasLabel('company').as('b').outE('cooperate').inV().hasLabel('university').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
找出以teach关系关联了course数据结构的teacher,"g.V().hasLabel('course').has('name', '数据结构').in('teach').hasLabel('teacher')"
"请帮我找出和person周若涵有关的person,称为X,再请帮我找出和这个X有关联的其他person,以及和X有关联的person","g.V().has('person', 'name', '周若涵').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
 请问医生陈建聪所在的部门有多少个其他医生也在那里工作？,"g.V().hasLabel('doctor').has('name', '陈建聪').outE('belong').inV().hasLabel('department').inE('belong').outV().hasLabel('doctor').where(neq('陈建聪')).count()"
查询id为70的点的价值,"g.V().has('id', 70).values('value')"
"查找所有名为何红的,id不等于50或名字是韩科的伙伴,返回这些伙伴的id,和边的源点id","g.V().has('name', '何红').as('a').outE('partner').as('e').inV().as('b').where(or(__.not(has('id', 50)), has('name', '韩科'))).select('b', 'e').by('id').by('srcId')"
"以(168,1,'male'),(191,62,'male'),(155,49,'male')作为请求表数据,属性分别为height,id,gender, 源点的id等于输入表id,请帮我找出编辑郑梅发布的书,被其他书认识的数量","g.inject([['height':168,'id':1,'gender':'male'],['height':191,'id':62,'gender':'male'],['height':155,'id':49,'gender':'male']]).as('p').unfold().as('p_row').select('p_row').by(__.project('height','id','gender').by(__.select('height')).by(__.select('id')).by(__.select('gender'))).V().hasLabel('publisher').has('id', __.select('p_row').select('id')).has('name', '郑梅').as('a').outE('publisher_publish_book').as('e').inV().hasLabel('book').as('b').inE('knows').as('e2').outV().hasLabel('book').as('c').select('c').count()"
"返回作家的相关者,或其相关者的相关者",g.V().hasLabel('author').outE('relation').inV().path().by(__.id()).by(__.id()).limit(2).unfold().tail(1).id()
"请帮我查找与person何国强存在申请关系,且与账号XiaoHu存在存款关系的贷款节点，返回这些贷款的id,金额,权重,及person何国强的性别,及账号XiaoHu的价值","g.V().has('person', 'name', '何国强').as('a').outE('apply').inV().hasLabel('loan').as('b').inE('deposit').outV().has('account', 'name', 'XiaoHu').as('c').select('a', 'b', 'c').by(values('gender')).by(values('id', 'amount', 'weight')).by(values('value'))"
"查询person的三角的环,边标签为own, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('own').inV().as('b').outE('own').inV().as('c').where(__.as('c').out('own').as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"请帮我找出id为59的person拥有的账号, 并将账号有关的贷款的金额的平均值赋值给账号的名字, 接着查询账号的名字小于59的账号转账的账号","g.V().has('person', 'id', 59).out('own').hasLabel('account').as('b').project('b_name', 'd').by(coalesce(select('b').bothE().otherV().hasLabel('loan').values('amount').mean(), constant(0))).by(select('b').filter(project('name').by(coalesce(select('b').bothE().otherV().hasLabel('loan').values('amount').mean(), constant(0))).select('name').is(lt(59))).out('transfer').hasLabel('account'))"
"查询和标签为publisher的点有publish关系的book,并且和这些book有refers关系的book,并且和这些book有refers关系的book",g.V().hasLabel('publisher').as('a').out('publish').hasLabel('book').as('b').out('refers').hasLabel('book').as('c').out('refers').hasLabel('book').as('d').select('d')
请帮我查找与教师韩建聪和何建国都存在教关系的点,"g.V().has('teacher', 'name', '韩建聪').outE('teach').inV().as('b').inE('teach').outV().has('teacher', 'name', '何建国').select('b')"
 请帮我查找订单类型为Order_289的点，并返回它们的名字。,"g.V().hasLabel('orders').has('name', 'Order_289').values('name')"
"以267,219,901,585作为请求点id, 以属性id作为相等条件,请帮我找出与student徐建国有关系的teacher的gender","g.inject([267, 219, 901, 585]).unfold().as('p').V().hasLabel('student').has('id', __.as('p')).has('name', '徐建国').bothE().otherV().hasLabel('teacher').values('gender')"
返回36个用户喜欢的帖子及其相关的标签,g.V().hasLabel('user').as('a').outE('likes').as('e').inV().hasLabel('post').as('b').outE('has').as('e2').inV().hasLabel('tag').as('c').select('c').limit(36)
"用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出名为XXD和Zeus的,标签等于账号的点公共的相关者节点的名单","g.V().has('account', 'name', 'XXD').outE('relation').inV().as('b').inE('relation').outV().has('account', 'name', 'Zeus').select('b').values('name')"
"请帮我找出id为72的点的名字,字数","g.V().has('id', 72).project('a.name', 'a.wordCount').by('name').by('wordCount')"
"查询全部吴思琪的点认识的作家,然后查询吴思琪被认识的作家,一起返回","g.V().has('name', '吴思琪').as('a').out('knows').hasLabel('author').as('b').select('a').in('knows').hasLabel('author').as('c').select('a', 'b', 'c')"
 找出周强发布的、与悬疑标签拥有关系的帖子，返回这些帖子的时间戳、周强的薪资和悬疑标签的ID。,"g.V().hasLabel('user').has('name', '周强').as('a').outE('publish').inV().hasLabel('post').as('b').inE('has').outV().hasLabel('tag').has('name', '悬疑').as('c').select('a', 'b', 'c').by('salary').by('createTime').by('id')"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询名为王月的person","g.V().hasLabel('person').has('name', '王月')"
"以('Order_168',4108.51,50),('Order_480',4787.47,40)作为请求表数据,属性分别为name,price,id, 以属性id作为相等条件,请帮我找出前6个标签为buyer_consult_seller的边","g.inject([['Order_168', 4108.51, 50], ['Order_480', 4787.47, 40]]).as('p').flatMap(select('p').unfold()).as('row').select('row').by(limit(local, 1)).as('name').select('row').by(limit(local, 2)).as('price').select('row').by(limit(local, 3)).as('id').select('id').V().has('id', eq(select('id'))).outE('buyer_consult_seller').limit(6)"
"以912,718,128,430作为请求点id, 源点的id等于输入表id,请帮我查找和person杜建国有person_knows_person关系的person,以及和person张梅有person_likes_person关系的person,将它们都返回","g.withSideEffect('p', [912, 718, 128, 430]).V().hasLabel('person').where(and(__.has('id', within('p')), __.has('name', '杜建国'))).as('a').outE('person_knows_person').inV().as('b').select('a').V().hasLabel('person').has('name', '张梅').as('c').outE('person_likes_person').inV().as('d').select('a', 'b', 'c', 'd')"
请帮我查找名为陈若涵的节点接受的部门或医生,"g.V().has('name', '陈若涵').outE('accept').inV().hasLabel(within('department', 'doctor')).dedup()"
"请帮我查找全部person的relation,或其relation的relation",g.V().hasLabel('person').outE('relation').inV().outE('relation').inV().dedup()
返回与post Post_168有has关系的1跳以内的环,"g.V().hasLabel('post').has('name', 'Post_168').as('a').bothE('has').bothV().where(neq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"返回所有名为计算机网络的,id为8或名字不等于java程序设计的引用,返回这些引用的字数,和边的源点id","g.V().has('name', '计算机网络').outE('refers').as('e').inV().has('id', 8).or().has('name', neq('java程序设计')).select('e').by('srcId').as('srcId').select('e').inV().values('wordCount').as('wordCount').select('srcId', 'wordCount')"
找出所有生物学院的教师，然后找出这些教师所在的大学，并将它们一起返回。,"g.V().has('name', '生物学院').as('a').outE('has').inV().hasLabel('teacher').as('b').select('a').inE('has').outV().hasLabel('university').as('c').select('a', 'b', 'c')"
"查找买家韩建国查看的商品, 令买家的id等于买家的性别的最大值,令商品的价格等于商品的名字,令买家的名字等于买家的名字, 返回买家的薪资, 商品的类别","g.V().hasLabel('buyer').has('name', '韩建国').as('a').outE('look').inV().hasLabel('goods').as('b').select('a', 'b').by(project('id', 'name', 'salary').by(select('a').values('gender').max()).by(select('a').values('name')).by(select('a').values('salary'))).by(project('price', 'category').by(select('b').values('name')).by(select('b').values('category'))).select(values).unfold().project('a.salary', 'b.category').by(select('a').select('salary')).by(select('b').select('category'))"
"给出person周若涵的全部类型为朋友的边,并根据源点id从小到大排列,返回39个","g.V().has('person', 'name', '周若涵').outE('friend').order().by('srcId', asc).limit(39).inV()"
获取country表中，包含id在54到93之间且value在167到304之间的city的城市名和这些city所属的country名。,"g.V().hasLabel('country').has('id', between(54, 93)).has('value', between(167, 304)).out('contain').hasLabel('city').as('b').out('belong').hasLabel('country').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我查找id为157的标签有关的评论的朋友, 再请帮我查找和评论有关系的相关者","g.V().has('tag', 'id', 157).as('a').bothE().otherV().hasLabel('comment').as('b').bothE('friend').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"查询全部与loan_41存在deposit关系的account,account与account存在transfer关系的点,返回这些点的id","g.V().has('name', 'loan_41').outE('deposit').inV().hasLabel('account').outE('transfer').inV().hasLabel('account').values('id')"
查询全部名为张强的节点发布的标签或用户或论坛,"g.V().has('name', '张强').outE('publish').inV().hasLabel(within('tag', 'user', 'forum')).dedup()"
给出前177个label为write的边,g.E().hasLabel('write').limit(177)
"帮我查询全部源点权重大于等于756,目标点id小于66或语言是go,且类型为属于的边","g.E().hasLabel('belong').where(and(__.outV().has('weight', gte(756)), or(__.inV().has('id', lt(66)), __.inV().has('lang', 'go'))))"
"查找所有和person陈月有关系的公司或贷款,返回这些点的创建时间,名字","g.V().has('person', 'name', '陈月').bothE().otherV().hasLabel(within('company', 'loan')).project('b.createTime', 'b.name').by(values('createTime')).by(values('name'))"
 返回吴伟的合作伙伴的合作伙伴。,"g.V().has('seller', 'name', '吴伟').out('partner').out('partner').dedup()"
 张轩认识哪些作家？,"g.V().hasLabel('author').has('name', '张轩').as('b').outE('knows').inV().hasLabel('author').as('a').select('a', 'b')"
计算所有城市的peopleNumber的最大值除人数加95的值,"g.V().hasLabel('city').values('peopleNumber').max().as('maxPeople').select('maxPeople').as('max').constant(95).as('constant').select('maxPeople').math('_ / __.select(""maxPeople"").value() + __.select(""constant"").value()')"
"请帮我找出所有和读者杜国强有关系的作家或书,返回这些点的id,创建时间,字数","g.V().has('reader', 'name', '杜国强').bothE().otherV().hasLabel(within('author', 'book')).project('id', 'createTime', 'wordCount').by(values('id')).by(values('createTime')).by(values('wordCount'))"
"查询学生周红的所有类型为相关者的边,并根据权重升序排列,返回155个","g.V().hasLabel('student').has('name', '周红').outE('relation').order().by('weight', asc).limit(155).inV()"
"请帮我找出全部公司以人数,价值,名字分组的id, 根据id降序排序","g.V().hasLabel('company').group().by(values('peopleNumber', 'value', 'name').fold()).by(values('id').fold()).order(local).by(keys, desc).select(values).unfold()"
"请帮我找出全部源点标签等于post,边标签等于has的边,返回这些边的srcId的平均值对11取余乘79的值,和srcId的平均值加93乘61的值","g.V().hasLabel('post').outE('has').project('avg_srcId_mod', 'avg_srcId_plus').by(__.values('srcId').mean().math('_ % 11 * 79')).by(__.values('srcId').mean().math('_ + 93 * 61'))"
"帮我查询课程大学物理属于的部门,被其他大学拥有的数量","g.V().has('course', 'name', '大学物理').out('belong').in('has').hasLabel('university').count()"
给出person的3跳的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(3).where(loops().is(3)).where(eq('a')).project('a.id', 'b_id').by(select('a').id()).by(id())"
"查找医生的相关者,或其相关者的相关者","g.V().hasLabel('doctor').outE('relation').inV().range(1, 2).dedup()"
"帮我查询名为韩建国的点取消的所有订单,并对这些订单的价格进行求和","g.V().has('name', '韩建国').outE('cancel').inV().hasLabel('orders').values('price').sum()"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部与person杜雪有关系的person的年龄","g.V().has('person', 'name', '杜雪').bothE().otherV().hasLabel('person').values('age')"
"帮我查询id为96的教师教的课程, 并将课程有关的大学的等级的求和值赋值给课程的名字, 接着查询课程的名字小于96的课程属于的部门","g.V().has('teacher', 'id', 96).outE('teach').inV().hasLabel('course').as('b').sideEffect(__.select('b').bothE().otherV().hasLabel('university').values('level').sum().as('sumLevel')).where(__.select('b').values('name').is(lt(96))).outE('belong').inV().hasLabel('department').as('d').select('b', 'd').by('name').by()"
 找出所有与韩国强有写作关系的书籍，然后找出这些书籍之间的引用关系，并返回引用关系的节点ID。,"g.V().has('name', '韩国强').outE('write').inV().hasLabel('book').as('b').outE('refers').inV().hasLabel('book').values('id')"
请帮我找出所有源点和目标点都为person，且标签为喜欢的边。,g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('person').as('b').select('e')
"返回全部名为李建聪的,id在12到53之间的伙伴,返回这些伙伴的上次登录时间,和边的f0,源点id","g.V().has('name', '李建聪').outE('partner').as('e').inV().has('id', between(12, 53)).as('b').select('b', 'e').by('lastLoginTime').by(project('f0', 'srcId').by('f0').by('srcId'))"
"帮我查询名为韩若涵和吴建聪的,标签为patient的点公共的relation节点的名单","g.V().has('patient', 'name', '韩若涵').outE('relation').inV().as('b').inE('relation').outV().has('patient', 'name', '吴建聪').select('b').values('name')"
"返回与学生何雪存在选择关系,且与部门体育学院存在属于关系的课程节点，返回这些课程的学分,名字,id,及学生何雪的id,及部门体育学院的id","g.V().hasLabel('student').has('name', '何雪').as('a').outE('selects').inV().hasLabel('course').as('b').inE('belong').outV().hasLabel('department').has('name', '体育学院').as('c').select('a', 'b', 'c').by('id').by(values('credit', 'name', 'id')).by('id')"
"查询和账号LX001有关的公司,再查询和LX001转账的其他账号,返回它们","g.V().has('account', 'name', 'LX001').as('a').bothE().otherV().hasLabel('company').as('b').select('a').outE('transfer').otherV().hasLabel('account').as('c').select('a', 'b', 'c')"
"给出和医生王建国有诊断关系的病人,再给出以属于关系关联了王建国的部门","g.V().hasLabel('doctor').has('name', '王建国').as('a').outE('diagnose').inV().hasLabel('patient').as('b').select('a').inE('belong').outV().hasLabel('department').as('c').select('a', 'b', 'c')"
"请帮我查找名为复旦大学的university,以及与其有关的course,并返回复旦大学的level和这些course的value","g.V().has('university', 'name', '复旦大学').as('a').bothE().as('e').otherV().hasLabel('course').as('b').select('a', 'b').by('level').by('value')"
 给出14个与Prescription_429和Prescription_338有关系的处方节点。,"g.V().has('name', 'Prescription_429').outE().inV().hasLabel('prescription').as('b').inE().outV().has('name', 'Prescription_338').select('b').limit(14)"
"查找186个名为Post_181的点has的标签等于tag的节点,且其id大于等于79或id大于等于74","g.V().has('name', 'Post_181').out('has').hasLabel('tag').or(has('id', gte(79)), has('id', gte(74))).limit(186)"
 请帮我查找与吴思琪和Bob共同认识的人，标签为'person'的节点。,"g.V().has('name', '吴思琪').outE('knows').inV().hasLabel('person').as('b').inE('knows').outV().has('name', 'Bob').select('b')"
"返回公司的三角的环,边label为合作, 并返回这些点的id","g.V().hasLabel('company').as('a').outE('cooperate').inV().as('b').outE('cooperate').inV().as('c').where(outE('cooperate').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
请帮我找出与seller郑轩有关的buyer，以及郑轩拥有的其他商品，并将它们返回。,"g.V().has('seller', 'name', '郑轩').as('a').bothE().otherV().hasLabel('buyer').as('b').select('a').outE('has').otherV().hasLabel('goods').as('c').select('a', 'b', 'c')"
找出与人有关联的人，这些人又与其他人有喜欢关系，并且这些人还与其他人有支付关系。,g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('person').as('b').outE('likes').as('e2').inV().hasLabel('person').as('c').outE('pay').as('e3').inV().hasLabel('person').as('d').select('d')
"找出和cinema UME有关的tag,再找出和UME releases的其他film,返回它们","g.V().hasLabel('cinema').has('name', 'UME').as('a').bothE().as('e').otherV().hasLabel('tag').as('b').select('a').outE('releases').as('e2').inV().hasLabel('film').as('c').select('a', 'b', 'c')"
返回孙科同事的家庭父母,"g.V().has('person', 'name', '孙科').outE('family').inV().outE('parent').inV().outE('colleague').inV()"
找出电子科技大学中按id升序排列的前41个名字,"g.V().has('university', 'name', '电子科技大学').order().by('id', asc).limit(41)"
"帮我查询用户黄若涵喜欢的仓库,被其他用户喜欢的数量","g.V().has('user', 'name', '黄若涵').out('likes').in('likes').hasLabel('user').count()"
"帮我查询全部与city有关系的company节点,且company节点的value小于545,并返回这些company的id的最大值乘27的求和值,以及company的peopleNumber对575取余的值","g.V().hasLabel('city').outE().inV().hasLabel('company').has('value', lt(545)).group().by('peopleNumber').by(__.values('id').max().math('_ * 27').sum()).select(values).unfold().project('sum_max_id_times_27', 'peopleNumber_mod_575').by(__.select(values)).by(__.select(keys).math('_ % 575'))"
 请帮我查询李轩和黄若涵的共同朋友，标签为publisher。,"g.V().has('publisher', 'name', '李轩').out('friend').as('b').in('friend').has('publisher', 'name', '黄若涵').select('b').values('name')"
"请帮我找出全部公司的朋友,或其朋友的朋友","g.V().hasLabel('company').out('friend').range(1, 2).dedup()"
 找出呼吸科拥有且与陈思琪有诊断关系的医生，并返回他们的性别、呼吸科的地址和陈思琪的年龄。,"g.V().hasLabel('department').has('name', '呼吸科').as('a').outE('has').inV().hasLabel('doctor').as('b').inE('diagnose').outV().hasLabel('patient').has('name', '陈思琪').as('c').select('a', 'b', 'c').by('address').by('gender').by('age')"
"给出与person徐红有关,且与软件Hadoop有关系的person节点","g.V().hasLabel('person').has('name', '徐红').bothE('knows').bothV().hasLabel('person').where(bothE('buy').bothV().hasLabel('software').has('name', 'Hadoop')).dedup()"
"请帮我查找源点薪资在4275到5919之间,目标点id小于等于39,创建时间为2017年06月04日,或字数大于等于756,且标签为喜欢的边","g.E().hasLabel('likes').where(and(__.outV().has('salary', between(4275, 5919)), or(__.inV().has('id', lte(39)).has('createTime', '2017-06-04'), __.inV().has('wordCount', gte(756)))))"
 返回马伟喜欢但标签为特定tag的帖子，并返回这些帖子的标签。,"g.V().has('name', '马伟').outE('likes').inV().hasLabel('post').outE('has').inV().hasLabel('tag').values('value')"
"查找id为64的论坛有关的用户的朋友, 再查找和用户有关系的伙伴","g.V().has('forum', 'id', 64).as('a').bothE().otherV().hasLabel('user').as('b').both().hasLabel('user').as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
请帮我查找所有标签为事项的点,g.V().hasLabel('issue')
查询和编辑Alice之间有发布关系的书,"g.V().hasLabel('publisher').has('name', 'Alice').outE('publish').inV().hasLabel('book')"
 请帮我找到Order_144的买家。,"g.V().hasLabel('orders').has('name', 'Order_144').in('creates').hasLabel('buyer')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出满足条件name不是吴轩,age大于57且id大于69的节点","g.V().has('name', neq('吴轩')).has('age', gt(57)).has('id', gt(69))"
"返回类型为belong,以及满足条件f0不等于874且f1不等于false,f0不为空的边","g.E().hasLabel('belong').has('f0', neq(874)).has('f1', neq(false)).has('f0', neq(null))"
 返回与软件相关的公司节点，其中公司节点名称为谷歌，并返回这些节点中人数减去620的人数，以及这些节点中每人价值乘976除以人数所得的最大值。,"g.V().hasLabel('software').as('a').outE().as('e').inV().hasLabel('company').has('name', '谷歌').as('b').select('b').by('peopleNumber').by(__.constant(620)).select(values).math('_ - _').count().as('countResult').select('b').by(__.math('value * 976 / peopleNumber')).max().as('maxResult').select('countResult', 'maxResult')"
"查找id为128的software有关的person的relation, 再查找和person有关系的friend","g.V().has('software', 'id', 128).as('a').bothE().as('e').otherV().hasLabel('person').as('b').outE('relation').as('e2').inV().as('c').select('b').outE('friend').as('e3').inV().as('d').select('a', 'b', 'c', 'd')"
"找出person的三角的环,边类型为支付, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('pay').inV().as('b').outE('pay').inV().as('c').where(__.as('c').outE('pay').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
帮我查询前190个标签等于创造的边,g.E().hasLabel('creates').limit(190)
"给出和卖家黄轩有关的卖家,称为X,再给出和这个X有关联的其他订单,以及和X有关联的订单","g.V().has('seller', 'name', '黄轩').as('a').bothE().otherV().hasLabel('seller').as('b').bothE().otherV().hasLabel('orders').as('c').select('b').bothE().otherV().hasLabel('orders').as('d').select('a', 'b', 'c', 'd')"
"以(25,'何科','male'),(99,'陈伟','famale'),(76,'韩思琪','male')作为请求表数据,属性分别为age,name,gender, 源点的gender等于输入表gender,给出56个与吴建聪和赵思琪都存在关系的person节点","g.withSideEffect('p', [['age':25, 'name':'何科', 'gender':'male'], ['age':99, 'name':'陈伟', 'gender':'famale'], ['age':76, 'name':'韩思琪', 'gender':'male']]).V().has('gender', within(select('p').unfold().values('gender'))).has('name', '吴建聪').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '赵思琪').select('b').limit(56)"
查询前95个标签等于创造的边,g.E().hasLabel('creates').limit(95)
查找和person Amily之间有family关系的person,"g.V().hasLabel('person').has('name', 'Amily').outE('family').inV().hasLabel('person')"
找出所有和person陈伟之间有认识关系的person,"g.V().hasLabel('person').has('name', '陈伟').outE('knows').inV().hasLabel('person')"
 找出经管学院和文学院都拥有的部门。,"g.V().has('department', 'name', '经管学院').out('has').as('b').in('has').has('department', 'name', '文学院').select('b')"
"给出和标签等于person的点有申请关系的贷款,并且和这些贷款有存款关系的账号,并且和这些账号有转账关系的账号",g.V().hasLabel('person').as('a').outE('apply').as('e').inV().hasLabel('loan').as('b').outE('deposit').as('e2').inV().hasLabel('account').as('c').outE('transfer').as('e3').inV().hasLabel('account').as('d').select('d')
 查询张宏喜欢的评论。,"g.V().hasLabel('person').has('name', '张宏').outE('likes').inV().hasLabel('comment').as('b', 'a').select('a', 'b')"
"请帮我找出名为周宏的,createTime是2030年05月27日或name等于Mybatis的friend,返回这些friend的name,和边的f0,weight,f1","g.V().has('name', '周宏').outE('friend').as('e').inV().has('createTime', '2030-05-27').or().has('name', 'Mybatis').as('b').select('b', 'e').by('name').by(project('f0', 'weight', 'f1').by('f0').by('weight').by('f1'))"
 请帮我查找与北京大学和四川大学共属于城市类型的节点。,"g.V().has('name', '北京大学').outE('belong').inV().hasLabel('city').as('b').inE('belong').outV().has('name', '四川大学').select('b')"
"找出部门拥有的医生, 令医生的id的值等于拥有医生的部门的id的最小值, 再查找医生诊断的病人","g.V().hasLabel('department').as('a').outE('has').inV().hasLabel('doctor').as('b').project('b_id', 'b').by(choose(__.inE('has').outV().hasLabel('department').values('id').min()).option(none, constant(null))).by(identity()).as('proj').select('proj').select('b').outE('diagnose').inV().hasLabel('patient').as('d').select('proj').select('b_id').as('b_id').select('b_id', 'd').by(identity()).by(identity())"
"以689,907,297,106,788作为请求点id, 以属性id作为相等条件,请帮我查找与名为谷歌和蚂蚁集团的点共同合作的,类型是大学的节点","g.withSideEffect('p', [689, 907, 297, 106, 788]).V().where(within('p')).has('name', '谷歌').outE('company_cooperate_university').inV().hasLabel('university').where(__.inE('company_cooperate_university').outV().has('name', '蚂蚁集团')).dedup()"
"帮我查询名为何若涵的点likes的所有book,并对这些book的id进行求和","g.V().has('name', '何若涵').out('likes').hasLabel('book').values('id').sum()"
"查找名为孙月的author,以及与其有关的publisher,并返回孙月的gender和这些publisher的id","g.V().has('author', 'name', '孙月').as('a').bothE().otherV().hasLabel('publisher').as('b').select('a', 'b').by('gender').by('id')"
"找出被医生属于数量大于39的部门,记为relationCount,再查询这些部门属于的部门",g.V().hasLabel('department').as('a').sideEffect(__.project('relationCount').by(__.in('belong').hasLabel('doctor').count())).select('a').where(__.select('relationCount').is(gt(39))).out('belong').hasLabel('department')
返回与person周宏有关，且与loan defaultName有关系的account节点。,"g.V().has('person', 'name', '周宏').bothE('own').otherV().hasLabel('account').as('b').bothE('repay').otherV().has('loan', 'name', 'defaultName').select('b')"
查询所有与公司Bilibili有关系的大学的价值,"g.V().has('company', 'name', 'Bilibili').bothE().otherV().hasLabel('university').values('value')"
"以'eb', 'jf'作为输入调用triangleCount函数,返回运算结果","g.call('triangleCount').with('input1', 'eb').with('input2', 'jf').select('number')"
"帮我查询和病人李强有接受关系的处方,再帮我查询以接受关系关联了李强的处方","g.V().has('patient', 'name', '李强').as('a').outE('accept').inV().hasLabel('prescription').as('b').select('a').inE('accept').outV().hasLabel('prescription').as('c').select('a', 'b', 'c')"
"以652,277,479,20作为请求点id, 源点的id等于输入表id,请帮我找出和buyer点有creates关系的orders节点,且边满足条件timeStamp是2008年05月26日,目标orders节点满足条件name不是Order_151","g.inject([652, 277, 479, 20]).unfold().as('p').V().hasLabel('buyer').has('id', __.as('p')).as('a').outE('buyer_creates_orders').has('timeStamp', '2008-05-26').as('e').inV().hasLabel('orders').has('name', neq('Order_151')).as('b').select('b')"
"请帮我查找所有马建国的点认识的person,然后请帮我查找马建国被认识的person,一起返回","g.V().has('name', '马建国').as('a').outE('knows').inV().hasLabel('person').as('b').select('a').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
请帮我查找全部与用户杜思琪有关系的论坛的创建时间,"g.V().has('user', 'name', '杜思琪').bothE().otherV().hasLabel('forum').values('createTime')"
"找出全部和person点有认识关系的person节点,且边满足条件f1不等于true,目标person节点满足条件名字不等于杜雪","g.V().hasLabel('person').as('a').outE('knows').has('f1', neq(true)).as('e').inV().hasLabel('person').has('name', neq('杜雪')).as('b').select('b')"
"给出和类型为person的点有创造关系的评论,并且和这些评论有属于关系的电影,并且和这些电影有拥有关系的标签",g.V().hasLabel('person').as('a').out('creates').hasLabel('comment').as('b').in('belong').hasLabel('film').as('c').out('has').hasLabel('tag').as('d').select('d')
"返回源点label为论坛,目标点label为帖子,label为论坛的边",g.V().hasLabel('forum').outE('forum').as('e').inV().hasLabel('post').select('e')
"请帮我查找电影院横店影院上映的电影,被其他person观看的数量","g.V().has('cinema', 'name', '横店影院').outE('releases').inV().hasLabel('film').inE('watch').outV().hasLabel('person').count()"
 返回越南的朋友的友人,"g.V().has('country', 'name', '越南').out('friend').out('friend').out('relation').dedup()"
"帮我查询全部源点满足条件gender不等于famale或salary不是4068,且id是43,目标点满足条件value在784到988之间,wordCount不为空,且label为publish的边","g.V().has('id', 43).has('gender', neq('famale')).or(has('salary', neq(4068))).outE('publish').as('e').inV().has('value', between(784, 988)).has('wordCount', neq(null)).select('e')"
请帮我查找所有与person郑轩有关系的person的id,"g.V().has('person', 'name', '郑轩').bothE().otherV().hasLabel('person').id()"
"查询所有和公司点有雇佣关系的person节点,且边满足条件目标点id为空,目标person节点满足条件名字是5420","g.V().hasLabel('company').as('a').outE('employee').has('targetId', null).as('e').inV().hasLabel('person').has('name', 5420).as('b').select('b')"
"输入请求点id的列表97,139,176,19,647, 源点的id等于输入表id,请帮我查找标签为reader,名为张轩的点,返回这些点的height,salary","g.V().hasLabel('reader').has('name', '张轩').has('id', within(97, 139, 176, 19, 647)).project('height', 'salary').by(values('height')).by(values('salary'))"
查询事项ISSUE-459属于的仓库节点拥有的合并请求,"g.V().hasLabel('issue').has('name', 'ISSUE-459').outE('belong').inV().hasLabel('repository').outE('has').inV().hasLabel('pullRequest')"
"查询名为王若涵和孙科的,类型为教师的点公共的伙伴节点的名单","g.V().has('teacher', 'name', '王若涵').as('a').outE('partner').inV().as('b').inE('partner').outV().has('teacher', 'name', '孙科').as('c').select('b').values('name')"
"请帮我找出person认识的person,返回其源点的薪资除5947对13取余的最大值,以及目标点的薪资除6560的值","g.V().hasLabel('person').as('a').outE('knows').as('e').inV().hasLabel('person').as('b').project('max_expr', 'b_salary_div').by(__.select('a').values('salary').math('/ 5947').math('% 13').max()).by(__.select('b').values('salary').math('/ 6560'))"
id减72的值,"g.V().has('id', 72).project('result').by(values('id').math('_ - 72'))"
返回前186个满足条件名字是杜若涵的person,"g.V().hasLabel('person').has('name', '杜若涵').limit(186)"
 给定与电影院好视影院存在上映关系，且标签为'古代'的电影节点，返回这些电影的名字、类别、电影院好视影院的ID以及标签古代的价值。,"g.V().hasLabel('cinema').has('name', '好视影院').as('a').outE('releases').inV().hasLabel('film').as('b').inE('has').outV().hasLabel('tag').has('name', '古代').as('c').select('a', 'b', 'c').by('id').by(values('name', 'category')).by('value')"
"查找全部和名为PR-340的pullRequest有partner关系,或有partner的partner关系的repository","g.V().hasLabel('pullRequest').has('name', 'PR-340').bothE('partner').otherV().hasLabel('repository').union(identity(), bothE('partner').otherV().hasLabel('repository')).dedup()"
"请帮我找出类型是person的点,返回145个",g.V().hasLabel('person').limit(145)
"返回标签为person,名为徐梅的点,返回这些点的id,身高","g.V().hasLabel('person').has('name', '徐梅').project('a.id', 'a.height').by('id').by('height')"
找出124个与华为和腾讯都存在关系的公司或贷款或person节点,"g.V().has('name', '华为').outE().as('e').inV().or(hasLabel('company'), hasLabel('loan'), hasLabel('person')).as('b').inE().as('e2').outV().has('name', '腾讯').select('b').limit(124)"
 查询与外科有联系且与李伟有关联的部门节点，并返回它们的ID、地址和名称。,"g.V().has('department', 'name', '外科').outE().inV().hasLabel('department').as('b').inE().outV().has('patient', 'name', '李伟').select('b').values('id', 'address', 'name')"
"输入请求点id的列表342,856,194,867,94, 以属性id作为相等条件,查询和person陈国强有person_knows_person关系的person,再查询以person_likes_person关系关联了陈国强的person","g.inject([342, 856, 194, 867, 94]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('name', '陈国强').as('a').outE('person_knows_person').inV().hasLabel('person').as('b').select('a').inE('person_likes_person').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
 找出同时与郑轩和徐雪有关联的人，返回他们的薪资和姓名。,"g.V().has('person', 'name', '郑轩').outE().inV().hasLabel('person').as('b').inE().outV().has('person', 'name', '徐雪').select('b').values('salary', 'name')"
"根据名字分组,计算价值加887的值",g.V().hasLabel('a').group().by('name').by(values('value').sum().math('_ + 887'))
 找出与教师杜强和学生黄月都有关系的大学节点，并返回它们的名字和价值。,"g.V().has('teacher', 'name', '杜强').outE().inV().has('university').as('b').inE().outV().has('student', 'name', '黄月').select('b').values('name', 'value')"
找出与person马思思有关系的person的age,"g.V().has('person', 'name', '马思思').bothE().otherV().hasLabel('person').values('age')"
"查找类型为issue的点,返回110个",g.V().hasLabel('issue').limit(110)
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询id为45的company关联的university,和以contain关系关联了这些university的其他city","g.V().has('company', 'id', 45).bothE().otherV().hasLabel('university').as('b').inE('city_contain_university').outV().hasLabel('city').as('c').select('b', 'c')"
 查询李若涵和吴若涵是否有恋人关系的共同点。,"g.V().has('person', 'name', '李若涵').outE('lover').inV().as('b').inE('lover').outV().has('person', 'name', '吴若涵').select('b')"
"返回全部源点标签等于doctor,边标签等于diagnose的边,返回这些边的targetId的最小值对155取余的值,和srcId对197取余的平均值","g.V().hasLabel('doctor').outE('diagnose').project('min_targetId_mod', 'avg_srcId_mod').by(values('targetId').min().math('_ % 155')).by(values('srcId').math('_ % 197').mean())"
 找出与杜雪有恋人关系的对象，以及与杜雪以朋友关系相关的对象。,"g.V().hasLabel('person').has('name', '杜雪').as('a').outE('lover').inV().hasLabel('person').as('b').select('a').inE('friend').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"请帮我找出拥有账号Geaflow123的person,和这些person申请的贷款","g.V().hasLabel('account').has('name', 'Geaflow123').in('own').hasLabel('person').as('b').out('apply').hasLabel('loan').as('c').select('b', 'c')"
找出与Bilibili公司有归属和包含关系的城市节点，并返回这些城市的面积、ID以及Bilibili公司的价值和规模。,"g.V().has('company', 'name', 'Bilibili').as('a').outE('belong').inV().hasLabel('city').as('b').inE('contain').outV().has('company', 'name', 'Bilibili').as('c').select('a', 'b', 'c').by('value').by(values('area', 'id')).by('scale')"
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));查询account以createTime分组的lastLoginTime, 根据lastLoginTime降序排序","g.V().hasLabel('account').group().by('createTime').by(values('lastLoginTime').fold()).order(local).by(values, desc)"
"返回与seller周建聪有关,且与seller陈思思有关系的buyer节点","g.V().has('seller', 'name', '周建聪').bothE('ask').bothV().hasLabel('buyer').as('b').bothE('consult').bothV().has('seller', 'name', '陈思思').select('b')"
请帮我查找名为张科的点认识的person,"g.V().has('name', '张科').outE('knows').inV().hasLabel('person')"
"帮我查询全部与陈思琪存在取消关系的订单,订单与商品存在包含关系的点,返回这些点的id","g.V().has('name', '陈思琪').outE('cancel').inV().hasLabel('orders').outE('contain').inV().hasLabel('goods').id()"
"以(2,314,'南京大学')作为请求表数据,属性分别为level,value,name, 以属性level作为相等条件,请帮我找出名为阿里的company,以及与其有关的company,并返回阿里的name和这些company的scale","g.withSideEffect('p', [['level': 2, 'value': 314, 'name': '南京大学']]).V().hasLabel('company').has('level', select('p').unfold().values('level')).has('name', '阿里').as('a').bothE().as('e').otherV().hasLabel('company').as('b').select('a', 'b').by('name').by('scale')"
"以70,724,977,901,155作为请求点id, 以属性id作为相等条件,请帮我找出源点标签为university,边标签为university_cooperate_company的边,返回这些边的targetId除119的值,和targetId除82的求和值","g.inject([70, 724, 977, 901, 155]).as('p').flatMap(select('p')).as('id').V().has('university', 'id', select('id')).outE('university_cooperate_company').as('e').project('expr1', 'sum_expr2').by(select('e').values('targetId').math('_ / 119')).by(select('e').values('targetId').math('_ / 82').sum())"
"给出与买家张雪有关,且与商品杯子有关系的订单节点","g.V().hasLabel('buyer').has('name', '张雪').bothE('cancel').bothV().hasLabel('orders').bothE('contain').bothV().hasLabel('goods').has('name', '杯子').select('b')"
 查询性别为female的40个人，按性别从小到大的顺序排列。,"g.V().hasLabel('person').has('gender', 'female').order().by('gender', asc).limit(40)"
 查询38个同时与Comment_169和Comment_126有关系的标签节点。,"g.V().has('name', 'Comment_169').outE().inV().hasLabel('tag').as('b').inE().outV().has('name', 'Comment_126').select('b').limit(38)"
 先查找与ID为98的人有关联的人，再进一步查找与这些人有关联的相关者。,"g.V().has('person', 'id', '98').bothE().otherV().hasLabel('person').as('a').bothE().otherV().hasLabel('person').as('b').bothE('friend').otherV().hasLabel('person').as('c').select('b').bothE('relation').otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"请帮我找出comment Comment_107 belong的film,以及watch这些film的person, 令film的salary等于person的salary的最小值, 返回comment的name,film的value,person的gender","g.V().has('comment', 'name', 'Comment_107').as('a').outE('belong').inV().hasLabel('film').as('b').inE('watch').outV().hasLabel('person').as('c').group().by(select('b')).by(select('c').values('salary').min()).as('minSalaries').select('a', 'b', 'c').by('name').by('value').by('gender').select(values).unfold().select('a', 'b', 'c').by().by().by().project('a_name', 'b_value', 'c_gender').by(select('a')).by(select('b')).by(select('c')).select('a_name', 'b_value', 'c_gender').by('name').by('value').by('gender')"
"查询id在8到18之间或id大于3,且id小于6的节点","g.V().has('id', between(8, 18)).or().has('id', gt(3)).has('id', lt(6))"
 请问能否帮我找出体育学院的学生节点，这些学生同时也在学习程序设计课程？,"g.V().has('department', 'name', '体育学院').out('has').as('b').out('selects').has('course', 'name', '程序设计').select('b')"
"调用personalRank函数,以'at', 36作为输入,返回运算结果","g.call('PERSONALRANK').with('input1', 'at').with('input2', 36).select('id', 'value')"
"根据isBlock分组,计算value减516的值",g.V().hasLabel('a').group().by('isBlock').by(values('value').math('_ - 516'))
"查找与person陈轩有关,且与标签悬疑有关系的电影节点","g.V().has('person', 'name', '陈轩').bothE('watch').otherV().hasLabel('film').bothE('has').otherV().has('tag', 'name', '悬疑').select('film')"
请帮我找出与陈思思和吴宏都有关联的195个publisher节点,"g.V().has('name', '陈思思').outE().inV().hasLabel('publisher').as('b').inE().outV().has('name', '吴宏').select('b').limit(195)"
 帮我查找 username 为 '吴伟' 的用户。,"g.V().hasLabel('user').has('name', '吴伟')"
"找出196个person黄宏和吴思思,共同的朋友","g.V().has('person', 'name', '黄宏').as('a').outE('friend').as('e').inV().as('b').inE('friend').as('e2').outV().has('person', 'name', '吴思思').as('c').select('b').limit(196)"
"查找label为电影院的全部点,并根据名字升序排列","g.V().hasLabel('cinema').order().by('name', asc)"
"给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出前142个满足条件名字为王思思的病人","g.V().hasLabel('patient').has('name', '王思思').limit(142)"
"返回所有与张月存在pay关系的person,person与person存在knows关系的点,返回这些点的age","g.V().has('name', '张月').outE('pay').inV().hasLabel('person').outE('knows').inV().hasLabel('person').values('age')"
 找出与卖家（seller)相关的商品（goods)节点，按其价值（value)分组并返回。,g.V().hasLabel('seller').bothE('has').otherV().hasLabel('goods').group().by('value').select(values)
找出Jack和郑建国都认识的人,"g.V().has('author', 'name', 'Jack').out('knows').as('b').in('knows').has('author', 'name', '郑建国').select('b')"
"找出国家英国包含的城市, 令城市的名字等于国家的价值,令城市的id等于城市的名字,令国家的id等于城市的面积减80140, 返回国家的人数, 城市的id","g.V().has('country', 'name', '英国').as('a').out('contain').hasLabel('city').as('b').project('peopleNumber', 'id').by(select('a').values('peopleNumber')).by(select('b').values('name'))"
查找作者为孙强的人,"g.V().hasLabel('author').has('name', '孙强')"
帮我查询repository FSM has的user节点creates的pullRequest,"g.V().has('repository', 'name', 'FSM').out('has').hasLabel('user').out('creates').hasLabel('pullRequest')"
"帮我查询被person何轩likes的person,和何轩pay的person","g.V().has('person', 'name', '何轩').as('b').outE('pay').inV().as('c').select('b').inE('likes').outV().as('a').select('a', 'b', 'c')"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找名为defaultName的贷款","g.V().hasLabel('loan').has('name', 'defaultName')"
"给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询20个id小于等于4的书,根据创建时间升序排列","g.V().hasLabel('book').has('id', lte(4)).order().by('createTime', asc).limit(20)"
查找73个与Comment_396和Comment_154都存在关系的comment或person节点,"g.V().has('name', 'Comment_396').outE().inV().or(hasLabel('comment'), hasLabel('person')).as('b').inE().outV().has('name', 'Comment_154').select('b').limit(73)"
返回何思思写的书,"g.V().has('author', 'name', '何思思').as('b').outE('write').as('e').inV().hasLabel('book').as('a').select('a', 'b')"
"帮我查询和标签为person的点有创造关系的评论,且和这些评论有属于关系的电影,且和这些电影有拥有关系的标签",g.V().hasLabel('person').as('a').out('creates').hasLabel('comment').as('b').out('belong').hasLabel('film').as('c').out('has').hasLabel('tag').as('d').select('d')
"给出和company美团有关的university,称为X,再给出和这个X有关联的其他company,以及和X有关联的city","g.V().has('company', 'name', '美团').as('a').bothE().otherV().hasLabel('university').as('b').bothE().otherV().hasLabel('company').as('c').select('b').bothE().otherV().hasLabel('city').as('d').select('a', 'b', 'c', 'd')"
"请帮我找出loan loan_44 deposit的account, 令account的id等于loan的id,令loan的lastLoginTime等于account的id的求和值,令account的id等于account的id加84, 返回loan的weight, account的name","g.V().hasLabel('loan').has('name', 'loan_44').as('a').outE('deposit').inV().hasLabel('account').as('b').select('a', 'b').by(__.project('weight', 'lastLoginTime', 'id').by('weight').by(__.select('b').values('id').sum()).by('id')).by(__.project('name', 'id').by('name').by(__.math('_ + 84').by(__.select('b').values('id')))).select(values).unfold().project('a.weight', 'b.name').by(select('a').select('weight')).by(select('b').select('name'))"
"给出与person何建国存在pay关系,且与person张建国存在pay关系的person节点，返回这些person的salary,name,及person何建国的age,及person张建国的salary","g.V().has('person', 'name', '何建国').as('a').outE('pay').inV().hasLabel('person').as('b').inE('pay').outV().has('person', 'name', '张建国').as('c').select('a', 'b', 'c').by('age').by(values('salary', 'name')).by('salary')"
"找出全部源点满足条件name不是周思琪或name不等于周建国或age在58到85之间,目标点满足条件id不是36且salary的数量不是18,age大于等于35,且标签为likes的边","g.V().has('name', neq('周思琪')).or().has('name', neq('周建国')).or().has('age', between(58, 85)).outE('likes').as('e').inV().has('id', neq(36)).has('age', gte(35)).where(__.values('salary').count().is(neq(18))).select('e')"
"找出全部源点类型是医生,目标点类型是部门,类型是药品或处方或病人的边","g.V().hasLabel('doctor').bothE('medicine', 'prescription', 'patient').where(otherV().hasLabel('department'))"
返回与公司滴滴有关系的公司的价值,"g.V().has('company', 'name', '滴滴').bothE().otherV().hasLabel('company').values('value')"
"请帮我查找和label为教师的点有教关系的课程,且和这些课程有属于关系的部门,且和这些部门有拥有关系的学生",g.V().hasLabel('teacher').as('a').outE('teach').as('e').inV().hasLabel('course').as('b').outE('belong').as('e2').inV().hasLabel('department').as('c').outE('has').as('e3').inV().hasLabel('student').as('d').select('d')
"找出全部源点类型为软件,目标点类型为软件,类型为person或公司或软件的边","g.V().hasLabel('software').outE('person', 'company', 'software').as('e').inV().hasLabel('software').select('e')"
返回与编辑马建聪有关的朋友的联系人,"g.V().has('publisher', 'name', '马建聪').out('friend').out('relation').out('relation')"
"查找id为111的person pay的person, 并将person有关的person的salary的最大值赋值给person(b)的name, 接着查询person(b)的name小于111的person pay的person","g.V().has('person', 'id', 111).outE('pay').inV().hasLabel('person').as('b').sideEffect(__.select('b').bothE().bothV().hasLabel('person').values('salary').max().store('b_name')).select('b').has('name', lt(111)).outE('pay').inV().hasLabel('person').as('d').select('b', 'd').by('name').by()"
"返回所有名为韩思思的点的,id大于等于39或名字小于26的相关者,返回这些相关者的名字,和边的权重,源点id","g.V().has('name', '韩思思').outE('relation').as('e').inV().as('b').where(or(__.has('id', gte(39)), __.has('name', lt(26)))).select('b', 'e').by('name').by(values('weight', 'srcId'))"
 请帮我查找与谷歌有关的大学，以及与谷歌合作的其他大学，并返回它们。,"g.V().hasLabel('company').has('name', '谷歌').as('a').bothE().otherV().hasLabel('university').as('b').select('a').bothE('cooperate').otherV().hasLabel('university').as('c').select('a', 'b', 'c')"
 查询所有买家关联的物品，以及与这些物品有has关系的其他卖家。,"g.V().has('buyer', 'id', '50').bothE().otherV().hasLabel('goods').as('b').inE('has').otherV().hasLabel('seller').as('c').select('b', 'c')"
 查询person或person的relation的relation。,g.V().hasLabel('person').outE('relation').inV().outE('relation').inV().dedup()
找出名为周轩的节点认识的person,"g.V().has('name', '周轩').out('knows').hasLabel('person')"
 请帮我查找与Prescription_314处方包含关系的药物，以及与急诊部department有拥有关系的医生，返回它们。,"g.V().hasLabel('prescription').has('name', 'Prescription_314').as('a').outE('contain').inV().hasLabel('medicine').as('b').select('a').V().hasLabel('department').has('name', '急诊部').as('c').outE('has').inV().hasLabel('doctor').as('d').select('a', 'b', 'c', 'd')"
"查询类型为公司,名为字节的点,返回这些点的价值,规格,id","g.V().hasLabel('company').has('name', '字节').project('value', 'scale', 'id').by('value').by('scale').by('id')"
"帮我查询全部与吴国强存在创造关系的合并请求,合并请求与仓库存在属于关系的点,返回这些点的权重","g.V().has('name', '吴国强').outE('creates').inV().hasLabel('pullRequest').outE('belong').inV().hasLabel('repository').values('weight')"
 查找何伟和王雪的共同联系人列表。,"g.V().has('person', 'name', '何伟').outE('relation').inV().as('b').inE('relation').outV().has('person', 'name', '王雪').select('b').values('name')"
"找出和label为repository的点有has关系的issue,以及和这些issue有belong关系的repository,以及和这些repository有has关系的issue",g.V().hasLabel('repository').as('a').out('has').hasLabel('issue').as('b').out('belong').hasLabel('repository').as('c').out('has').hasLabel('issue').as('d').select('d')
 列出马梅和赵建国两位医生作为相关者节点，他们所属的是医生这个类别。,"g.V().has('doctor', 'name', '马梅').outE('relation').inV().as('b').inE('relation').outV().has('doctor', 'name', '赵建国').select('b').values('name')"
"返回源点类型为person,目标点类型为software,类型为company的边",g.V().hasLabel('person').outE('company').where(inV().hasLabel('software'))
"请帮我查找和买家马宏有关系的订单或买家,返回这些点的价格","g.V().hasLabel('buyer').has('name', '马宏').bothE().otherV().hasLabel(within('orders', 'buyer')).values('price')"
返回与person何雪和王梅都存在关系的person节点，并获取他们的名字、身高和年龄。,"g.V().has('person', 'name', '何雪').outE().inV().hasLabel('person').as('b').inE().outV().has('person', 'name', '王梅').select('b').values('name', 'height', 'age')"
"查找label为读者,名为李轩的点,返回这些点的年龄","g.V().hasLabel('reader').has('name', '李轩').values('age')"
 找出韩月认识的所有人和韩月有关系的人，一起列出来。,"g.V().has('name', '韩月').as('a').bothE('knows').otherV().hasLabel('person').as('b').select('a').bothE('relates').otherV().hasLabel('person').as('c').select('a', 'b', 'c')"
找到所有与person有关联的人节点，这些人节点的性别不是female。然后返回这些人节点年龄数量减去75的结果，以及他们的身高除以162后的余数。,"g.V().hasLabel('person').as('a').outE().inV().hasLabel('person').has('gender', neq('famale')).as('b').select('b').dedup().project('count_minus_75', 'height_mod').by(__.values('age').count().math('_ - 75')).by(__.values('height').math('_ % 162'))"
查询名为周红的点喜欢的person,"g.V().has('name', '周红').out('likes').hasLabel('person')"
"请帮我查找software Mysql uses的software,被其他person buy的数量","g.V().has('software', 'name', 'Mysql').out('uses').in('buy').hasLabel('person').count()"
返回所有源点为forum，目标点为person，且标签为contain的边。,g.V().hasLabel('forum').outE('contain').where(inV().hasLabel('person'))
请帮我找出全部和读者陈若涵之间有喜欢关系的书,"g.V().hasLabel('reader').has('name', '陈若涵').outE('likes').inV().hasLabel('book')"
 请帮我找出张强教授的课程，以及与张强有教关系的课程。,"g.V().hasLabel('teacher').has('name', '张强').as('a').outE('teach').inV().hasLabel('course').as('b').select('a').inE('teach').outV().hasLabel('course').as('c').select('a', 'b', 'c')"
"输入请求点id的列表920,288, 源点的id等于输入表id,帮我查询与名为谷歌和腾讯的点共同属于的,标签为城市的节点","g.withSideEffect('p', [920, 288]).V().where(within('p')).has('name', '谷歌').outE('company_belong_city').inV().hasLabel('city').as('b').inE('company_belong_city').outV().has('name', '腾讯').select('b').dedup()"
"请帮我找出forum中国诗词论坛contain的post,被其他user likes的数量","g.V().has('forum', 'name', '中国诗词论坛').out('contain').in('likes').hasLabel('user').count()"
找出所有既引用了'book Java程序设计'又引用了'呐喊'的点。,"g.V().has('book', 'name', 'java程序设计').out('refers').as('b').in('refers').has('book', 'name', '呐喊').select('b')"
返回与用户何强有喜欢关系的帖子，以及与帖子Post_492有关联的标签。,"g.V().has('user', 'name', '何强').as('a').out('likes').as('b').V().has('post', 'name', 'Post_492').as('c').out('has').as('d').select('a', 'b', 'c', 'd')"
返回与person杜伟有invest关系的3跳的环,"g.V().has('person', 'name', '杜伟').as('a').repeat(out('invest')).times(2).as('b').where(out().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').values('id')).by(select('b').values('id'))"
 请帮我查询person点相关的评论节点，并按其ID分组，返回ID。,g.V().hasLabel('person').bothE('creates').bothV().hasLabel('comment').values('id').groupCount()
查询买家王思思创造的订单节点包含的商品,"g.V().hasLabel('buyer').has('name', '王思思').out('creates').hasLabel('orders').out('contain').hasLabel('goods')"
"请帮我找出源点age在9到12之间或salary不为空,且age小于等于92,目标点category为文学且createTime是2034年04月27日,createTime为2011年02月12日,且标签等于likes的边","g.V().has('age', between(9, 12)).or().has('salary', neq(null)).has('age', lte(92)).outE('likes').as('e').inV().has('category', '文学').has('createTime', '2034-04-27').has('createTime', '2011-02-12').select('e')"
帮我查询company阿里belong的city节点belong的country,"g.V().hasLabel('company').has('name', '阿里').out('belong').hasLabel('city').out('belong').hasLabel('country')"
请帮我查找所有类型是goods或buyer的点,"g.V().hasLabel(within('goods', 'buyer'))"
查找所有和医生张宏之间有创造关系的处方,"g.V().hasLabel('doctor').has('name', '张宏').outE('creates').inV().hasLabel('prescription')"
请帮我找出person的2跳以内的环,"g.V().hasLabel('person').as('a').both().both().where(eq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"以410,301作为请求点id, 以属性id作为相等条件,找出与person徐科有person_knows_person关系的3度以内的环","g.withSideEffect('p', [410, 301]).V().hasLabel('person').where(and(values('id').is(within('p')), values('name').is(eq('徐科')))).as('a').repeat(bothE('person_knows_person').otherV().simplePath()).times(2).emit().where(loops().is(gt(0))).as('b').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"找出与名为巴黎和天津的点共同包含的,标签为大学的节点","g.V().has('name', '巴黎').out('contain').hasLabel('university').as('b').in('contain').has('name', '天津').select('b')"
 请帮我查找名叫李月且ID小于等于47的人喜欢的对象，以及这些对象支付的对方。,"g.V().hasLabel('person').has('id', lte(47)).has('name', '李月').outE('likes').inV().as('b').outE('pay').inV().as('c').select('b', 'c').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
找到名为'Prescription_116'且类型为'prescription'的点，返回它们的weight和id。,"g.V().hasLabel('prescription').has('name', 'Prescription_116').project('weight', 'id').by('weight').by('id')"
请帮我找出所有从买家源点到卖家目标点，且类型为咨询的边。,g.V().hasLabel('buyer').outE('consult').where(inV().hasLabel('seller'))
"以(55,165,46),(31,176,20)作为请求表数据,属性分别为id,height,age, 源点的age等于输入表age,请帮我找出person的三角的环,边标签等于person_likes_person, 并返回这些点的id","g.withSideEffect('p', [['id':55, 'height':165, 'age':46], ['id':31, 'height':176, 'age':20]]).V().hasLabel('person').as('a').where(__.select('a').values('age').as('age').select('p').unfold().where(eq('age')).by().by('age')).outE('person_likes_person').inV().as('b').outE('person_likes_person').inV().as('c').where(outE('person_likes_person').inV().where(eq('a'))).select('a', 'b', 'c').by().by('id').by('id')"
"帮我查询和person马梅有关的person,称为X,再帮我查询和这个X有关联的其他person,以及和X有关联的person","g.V().hasLabel('person').has('name', '马梅').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"帮我查询和buyer杜宏有consult关系的seller,再帮我查询以creates关系关联了杜宏的orders","g.V().has('buyer', 'name', '杜宏').as('a').out('consult').as('b').select('a').in('creates').as('c').select('a', 'b', 'c')"
查找所有和读者徐思思之间有喜欢关系的书,"g.V().hasLabel('reader').has('name', '徐思思').out('likes').hasLabel('book')"
"请帮我查找全部与徐月存在投资关系的公司,公司与贷款存在申请关系的点,返回这些点的id","g.V().has('name', '徐月').out('invest').hasLabel('company').out('apply').hasLabel('loan').id()"
"请帮我查找学生选择的课程, 令课程的学分的值等于教课程的教师的性别的平均值, 再查找课程属于的部门","g.V().hasLabel('student').as('a').outE('selects').inV().hasLabel('course').as('b').sideEffect(__.select('b').inE('teach').outV().hasLabel('teacher').values('gender').mean().as('credit')).select('b').outE('belong').inV().hasLabel('department').as('d').select('credit', 'd')"
"请帮我找出名为张建聪的点publish的book,并对这些book的name进行求和","g.V().has('name', '张建聪').outE('publish').inV().hasLabel('book').values('name').sum()"
"以942,193作为请求点id, 以属性id作为相等条件,查找大学四川大学 拥有的部门,返回部门 拥有的学生的年龄减68的值 ","g.inject([942, 193]).unfold().as('p').V().hasLabel('university').has('id', __.select('p')).has('name', '四川大学').outE('university_has_department').inV().hasLabel('department').outE('department_has_student').inV().hasLabel('student').values('age').math('_ - 68')"
"请帮我找出源点类型为person,目标点类型为person,类型为person的边",g.V().hasLabel('person').outE('person').as('e').inV().hasLabel('person').select('e')
返回孙思思老师授课的课程，被其他学生选修的数量。,"g.V().has('teacher', 'name', '孙思思').outE('teach').inV().hasLabel('course').inE('selects').outV().hasLabel('student').count()"
帮我查询以支付关系关联了person徐科的person,"g.V().hasLabel('person').has('name', '徐科').inE('pay').outV().dedup()"
查询北京大学的部门,"g.V().hasLabel('university').has('name', '北京大学').outE('has').inV().hasLabel('department').as('b', 'a').select('a', 'b')"
"以(59,'吴建聪',7210)作为请求表数据,属性分别为age,name,salary, 源点的age等于输入表age,找出和person韩月有关的person,称为X,再找出和这个X有关联的其他person,以及和X有关联的person","g.withSideEffect('p', [['age': 59, 'name': '吴建聪', 'salary': 7210]]).V().hasLabel('person').has('age', select('p').unfold().select('age')).has('name', '韩月').as('a').bothE().as('e').otherV().hasLabel('person').as('b').bothE().as('e2').otherV().hasLabel('person').as('c').select('b').bothE().as('e3').otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"查询forum contain的user,返回其源点的id乘38除id的值,以及目标点的salary减4294的平均值","g.V().hasLabel('forum').as('a').outE('contain').inV().hasLabel('user').as('b').select('a', 'b').by(values('id')).by(values('salary')).project('expr1', 'expr2').by(select('a').math('_ * 38 / _')).by(select('b').math('_ - 4294').mean())"
"查找195个person张国强和郑雪,共同的伙伴","g.V().has('person', 'name', '张国强').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '郑雪').select('b').limit(195)"
"返回126个大学电子科技大学和重庆大学,共同的伙伴","g.V().has('university', 'name', '电子科技大学').outE('partner').inV().as('b').inE('partner').outV().has('university', 'name', '重庆大学').select('b').limit(126)"
请帮我找出与标签为'doctor'的点有'belong'关系的部门，以及这些部门与'has'关系的医生，以及这些医生与'creates'关系的处方。,g.V().hasLabel('doctor').as('a').out('belong').hasLabel('department').as('b').out('has').hasLabel('doctor').as('c').out('creates').hasLabel('prescription').as('d').select('d')
找出出版社名为何伟的点，返回它们的性别、薪水和年龄。,"g.V().hasLabel('publisher').has('name', '何伟').project('gender', 'salary', 'age').by(values('gender')).by(values('salary')).by(values('age'))"
 请帮我查找部门到教师之间的拥有边。,g.V().hasLabel('department').outE('has').as('e').inV().hasLabel('teacher').select('e')
 找出与seller节点关联的 goods 节点，按名称分组并返回名称。,g.V().hasLabel('seller').bothE('has').otherV().hasLabel('goods').values('name').group().by().select(values).unfold()
"给出名为美团的点申请的贷款,并对这些贷款的权重进行求和","g.V().has('name', '美团').outE('apply').inV().hasLabel('loan').values('weight').sum()"
"输入表的列为gender,age,salary, 数据为('famale',5,2123), 源点的gender等于输入表gender,给出前178个满足条件createTime不是2033年10月03日,id不为空的forum","g.withSideEffect('p', [['gender': 'famale', 'age': 5, 'salary': 2123]]).V().hasLabel('forum').as('a').where(and(__.select('a').values('gender').is(eq(__.select('p').unfold().select('gender'))), __.select('a').values('createTime').is(neq('2033-10-03')), __.select('a').has('id'))).select('a').limit(178)"
"请帮我查找名为杜思琪和吴若涵的,类型为买家的点公共的朋友节点的名单","g.V().has('buyer', 'name', '杜思琪').out('friend').as('b').in('friend').has('buyer', 'name', '吴若涵').select('b').values('name')"
"用如下schema的图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找113个与何轩和赵雪都存在关系的seller节点","g.V().has('name', '何轩').outE().inV().hasLabel('seller').as('b').inE().outV().has('name', '赵雪').select('b').limit(113)"
查询9个与王国强和黄建国都存在关系的person节点,"g.V().has('name', '王国强').outE().inV().hasLabel('person').where(__.inE().outV().has('name', '黄建国')).limit(9)"
帮我查询前87个类型为belong的边,g.E().hasLabel('belong').limit(87)
"帮我查询id为23的person提交的软件, 并将软件有关的person的年龄的和赋值给软件的名字, 接着查询软件的名字小于23的软件使用的软件","g.V().has('person', 'id', 23).outE('commits').inV().hasLabel('software').as('b').sideEffect(select('b').sack(assign).by(constant(0)).bothE().otherV().hasLabel('person').values('age').sack(sum).sack().as('name')).where(select('b').values('name').is(lt(23))).outE('uses').inV().hasLabel('software').as('d').select('b', 'd').by('name').by()"
"找出名为王伟的person,以及与其有关的person,并返回王伟的薪资和这些person的薪资","g.V().has('person', 'name', '王伟').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('salary')"
"帮我查询与person何梅有关系的person, 返回和这些person有关联的person的,salary的和对薪资取余除154除187的值","g.V().has('person', 'name', '何梅').bothE().otherV().hasLabel('person').bothE().otherV().hasLabel('person').values('salary').sum().fold().project('result').by(__.math('_ / 154 / 187'))"
请找出与处方Prescription_354有关联的所有药品，以及由医生徐宏创建的所有处方，并将它们全部返回。,"g.V().has('prescription', 'name', 'Prescription_354').as('a').out('contain').as('b').select('a').V().has('doctor', 'name', '徐宏').as('c').out('creates').as('d').select('a', 'b', 'c', 'd')"
"用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查询id为55的点的height,id","g.V().has('id', '55').project('height', 'id').by('height').by('id')"
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出类型是company_creates_software,且f1不等于false且weight小于163.18,或targetId不为空的边","g.E().hasLabel('company_creates_software').or(and(has('f1', neq(false)), has('weight', lt(163.18))), has('targetId', neq(null)))"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部和person点有提交关系的软件节点,且边满足条件源点id的求和值小于126.22,目标软件节点满足条件语言等于c","g.V().hasLabel('person').as('a').outE('person_commits_software').as('e').inV().hasLabel('software').has('lang', 'c').as('b').select('a', 'e', 'b').by().by().by().where(__.select('e').values('srcId').fold().sum().is(lt(126.22))).select('b')"
"查找创建时间为1999年02月16日且人数在39到119之间的论坛包含的用户的名称,以及这些用户 发布的帖子的名称","g.V().hasLabel('forum').has('createTime', '1999-02-16').has('peopleNumber', between(39, 119)).outE('contain').inV().hasLabel('user').as('b').outE('publish').inV().hasLabel('post').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"返回id为65的doctor diagnose的patient, 并将patient有关的department的id的最小值赋值给patient的name, 接着查询patient的name小于65的patient accept的prescription","g.V().hasLabel('doctor').has('id', 65).outE('diagnose').inV().hasLabel('patient').as('b').project('name', 'd').by(coalesce(select('b').bothE().inV().hasLabel('department').values('id').min(), constant(0))).by(select('b').outE('accept').inV().hasLabel('prescription').fold()).unfold().where(select('name').is(lt(65))).select('name', 'd')"
找出apply了贷款且贷款不为空的person，显示他们的姓名。同时，也显示他们贷款对应的存款账户的名称。,"g.V().hasLabel('person').has('salary').as('a').outE('apply').as('e').inV().hasLabel('loan').as('b').outE('deposit').as('e2').inV().hasLabel('account').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
帮我查询以包含关系关联了帖子Post_148的论坛,"g.V().hasLabel('post').has('name', 'Post_148').inE('contain').outV().hasLabel('forum')"
"输入请求点id的列表92,436, 源点的id等于输入表id,查询forum天涯论坛的friend的partner的friend","g.withSideEffect('p', [92, 436]).V().hasLabel('forum').has('id', within('p')).has('name', '天涯论坛').out('friend').out('partner').out('friend')"
"返回18个名为黄雪的点取消的label为订单的节点,且其价格大于3610.18或名字等于Order_142","g.V().has('name', '黄雪').outE('cancel').inV().hasLabel('orders').has('price', gt(3610.18)).or().has('name', 'Order_142').limit(18)"
 请帮我找出所有用户源点之间、标签为'创造'的边，并返回这些边中每个边的srcId平均值，再加上源点id除以156.26的值，以及目标点id乘以110的值。,"g.V().hasLabel('user').as('a').outE('creates').as('e').inV().as('b').project('result1', 'result2').by(__.math('(mean + srcId) / 156.26').by(__.select('e').values('srcId').mean()).by(__.select('e').values('srcId'))).by(__.select('b').values('targetId').math('_ * 110'))"
 找Comment_309belong这个评论所属的影片节点拥有的标签。,"g.V().hasLabel('comment').has('name', 'Comment_309').out('belong').hasLabel('film').out('has').hasLabel('tag')"
 找出与韩梅和陈科有关的人，共有151个。,"g.V().has('name', '韩梅').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '陈科').select('b').limit(151)"
"返回所有id为114的doctor关联的patient,和以diagnose关系关联了这些patient的其他doctor","g.V().hasLabel('doctor').has('id', 114).bothE().otherV().hasLabel('patient').as('b').inE('diagnose').otherV().hasLabel('doctor').as('c').select('b', 'c')"
"帮我查询和用户点有发布关系的帖子节点,且边满足条件f0小于856,目标帖子节点字数不为空","g.V().hasLabel('user').as('a').outE('publish').has('f0', lt(856)).as('e').inV().hasLabel('post').has('wordCount', neq(null)).as('b').select('b')"
 找出与电影院'好视影院'存在上映关系，且与标签'动作'存在拥有关系的电影节点，并返回这些电影的名字、价值和电影院'好视影院'的地址，以及标签'动作'的ID。,"g.V().hasLabel('cinema').has('name', '好视影院').as('a').outE('releases').inV().hasLabel('film').as('b').inE('has').outV().hasLabel('tag').has('name', '动作').as('c').select('a', 'b', 'c').by('address').by(values('name', 'value')).by('id')"
"以638,523,214作为请求点id, 以属性id作为相等条件,查询前47个类型是author_write_book的边","g.inject([638, 523, 214]).unfold().as('p').V().has('id', __.where(eq('p'))).outE('author_write_book').limit(47)"
"根据price,name分组,计算weight的和除weight的最大值",g.V().hasLabel('a').group().by('price').by(group().by('name').by(values('weight').sum())).unfold().select(values).unfold().select(values).as('sum_weight').select(keys).select('name').as('name').select(keys).select('price').as('price').select('sum_weight').as('sum').select('name').select('price').select('sum').math('sum / _').by(values('weight')).max()
"帮我查询50个名为字节的点申请的label为贷款的节点,且其id在6到31之间或金额不为空","g.V().has('name', '字节').outE('apply').inV().hasLabel('loan').or(has('id', between(6, 31)), has('amount', neq(null))).limit(50)"
"请帮我查找id为113的教师关联的课程,和以选择关系关联了这些课程的其他学生","g.V().has('teacher', 'id', 113).bothE().otherV().hasLabel('course').as('b').inE('selects').otherV().hasLabel('student').as('c').select('b', 'c')"
"给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询与seller徐思琪有seller_has_goods关系的2度以内的环","g.V().hasLabel('seller').has('name', '徐思琪').as('a').outE('seller_has_goods').inV().as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出和reader王梅有reader_likes_book关系的book,再请帮我找出以reader_likes_book关系关联了王梅的book","g.V().hasLabel('reader').has('name', '王梅').as('a').bothE('reader_likes_book').otherV().hasLabel('book').dedup().as('b', 'c').select('a', 'b', 'c')"
 查询与 Amily 买家有关，且商品为香蕉的订单。,"g.V().has('buyer', 'name', 'Amily').outE('creates').inV().hasLabel('orders').as('b').inE('contain').outV().has('goods', 'name', '香蕉').select('b')"
"返回从pullRequest PR-216出发,经过类型是belong的边,走3度到达的repository点","g.V().hasLabel('pullRequest').has('name', 'PR-216').repeat(outE('belong').inV()).times(3).hasLabel('repository')"
"查找repository Tugraph has的pullRequest,以及has这些pullRequest的repository, 令pullRequest的createTime等于repository的id对94取余, 返回repository(a)的lang,pullRequest(b)的name,repository(c)的stars","g.V().has('repository', 'name', 'Tugraph').as('a').outE('has').inV().hasLabel('pullRequest').as('b').inE('has').outV().hasLabel('repository').as('c').select('a', 'b', 'c').by(coalesce(values('lang'), constant(''))).by(coalesce(values('name'), constant(''))).by(coalesce(values('stars'), constant('')))"
"请帮我查找全部与何伟存在喜欢关系的person,person与person存在认识关系的点,返回这些点的身高","g.V().has('name', '何伟').out('likes').hasLabel('person').out('knows').hasLabel('person').values('height')"
"以112,182,164,843,357作为请求点id, 源点的id等于输入表id,请帮我找出名为孙雪的学生,以及与其有关的教师,并返回孙雪的薪资和这些教师的性别","g.inject([112, 182, 164, 843, 357]).as('p').unfold().as('id').V().hasLabel('student').has('id', __.select('id')).has('name', '孙雪').as('a').bothE().as('e').otherV().hasLabel('teacher').as('b').select('a', 'b').by('salary').by('gender')"
"查询46个创建时间不等于2025年11月22日,名字等于ISSUE-345,名字不是ISSUE-441的事项,根据id从小到大排列","g.V().hasLabel('issue').has('createTime', neq('2025-11-22')).has('name', 'ISSUE-345').has('name', neq('ISSUE-441')).order().by('id', asc).limit(46)"
 请帮我查找武汉所有被大学包含的点，以及武汉所包含的国家。,"g.V().has('name', '武汉').as('a').outE('contain').inV().hasLabel('university').as('b').select('a').inE('contain').outV().as('c').select('a', 'b', 'c')"
 找出与哔哩哔哩公司（company Bilibili)有借款关系的账户，以及与账户BIN(银行代码）有转账关系的账户，返回它们。,"g.V().has('company', 'name', 'Bilibili').as('a').out('apply').as('b').select('a').V().has('account', 'name', 'BIN').as('c').out('transfer').as('d').select('a', 'b', 'c', 'd')"
"找出创造医生徐轩创造的处方,的医生","g.V().hasLabel('doctor').has('name', '徐轩').outE('creates').inV().hasLabel('prescription').as('b').inE('creates').outV().hasLabel('doctor').as('c').select('b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询标签等于person的点,返回136个",g.V().hasLabel('person').limit(136)
"返回所有源点label为company,目标点label为loan,label为account或company的边","g.V().hasLabel('company').outE('account', 'company').as('e').inV().hasLabel('loan').select('e')"
请帮我找出源点是buyer，目标点是goods，类型是look的边。,g.V().hasLabel('buyer').outE('look').where(inV().hasLabel('goods'))
"找出名为郑建国的,name不等于少年闰土的partner,返回这些partner的price,和边的f1,weight,timeStamp","g.V().has('name', '郑建国').outE('partner').as('e').inV().has('name', neq('少年闰土')).as('b').select('b', 'e').by('price').by(values('f1', 'weight', 'timeStamp'))"
"查询名为杭州的点包含的全部公司,并对这些公司的名字进行求和","g.V().has('name', '杭州').out('contain').hasLabel('company').values('name').sum()"
"给出标签等于病人,名为赵强的点,返回这些点的身高","g.V().hasLabel('patient').has('name', '赵强').values('height')"
"找出全部id为188的大学关联的公司,和以包含关系关联了这些公司的其他城市","g.V().has('university', 'id', 188).bothE().otherV().hasLabel('company').as('b').inE('contain').otherV().hasLabel('city').as('c').select('b', 'c')"
"查找名为Bilibili的company,以及与其有关的person,并返回Bilibili的id和这些person的name","g.V().hasLabel('company').has('name', 'Bilibili').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('id').by('name')"
"帮我查询用户韩建聪喜欢的仓库,被其他合并请求属于的数量","g.V().has('user', 'name', '韩建聪').out('likes').in('belong').hasLabel('pullRequest').count()"
请帮我查找与'country'标签相关的城市，这些城市包含的公司与大学有合作关系。,g.V().hasLabel('country').out('contain').hasLabel('city').out('contain').hasLabel('company').out('cooperate').hasLabel('university')
帮我查询前37个类型是申请的边,g.E().hasLabel('apply').limit(37)
"查找与作家马梅有关,且与作家陈红有关系的作家节点","g.V().has('author', 'name', '马梅').bothE('knows').bothV().where(__.bothE('knows').bothV().has('author', 'name', '陈红')).dedup()"
大小对大小取余的最大值,g.V().hasLabel('a').project('mod').by(values('size').as('s').math('s % s')).select(values).max()
id除id的值,g.V().hasLabel('a').project('result').by(math('_ / _').by('id').by('id'))
请帮我找出146个与赵建聪和王国强都存在关系的person节点,"g.V().has('name', '赵建聪').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '王国强').select('b').limit(146)"
"请帮我找出与名为Calcite和Zookeeper的点共同使用的,类型是软件的节点","g.V().has('name', 'Calcite').out('uses').hasLabel('software').as('b').in('uses').has('name', 'Zookeeper').select('b')"
返回所有与person黄科有关系的person的id,"g.V().has('person', 'name', '黄科').bothE().otherV().hasLabel('person').id()"
"请帮我查找类型为belong,且满足条件f0在910到980之间的边","g.E().hasLabel('belong').has('f0', between(910, 980))"
"查询名为吴建聪的,性别不是famale的相关者,返回这些相关者的id,和边的f0,权重","g.V().has('name', '吴建聪').outE('relation').as('e').inV().has('gender', neq('famale')).as('b').select('b', 'e').by('id').by(project('f0', 'weight').by('f0').by('weight'))"
查找所有与电影建国大业有关系的评论的创建时间,"g.V().hasLabel('film').has('name', '建国大业').bothE().otherV().hasLabel('comment').values('createTime')"
"请帮我找出标签等于作家的点,返回97个",g.V().hasLabel('author').limit(97)
找出与黄科和马建国都认识的人。,"g.V().has('person', 'name', '黄科').out('knows').as('b').in('knows').has('person', 'name', '马建国').select('b')"
"使用列为height,salary,gender, 数据为(196,2310,'male')的子查询作为输入表, 以属性salary作为相等条件,查询与buyer陈梅有关,且与goods椅子有关系的orders节点","g.withSideEffect('p', [['height':196, 'salary':2310, 'gender':'male']]).V().hasLabel('buyer').has('salary', 2310).has('name', '陈梅').out('buyer_creates_orders').hasLabel('orders').where(out('orders_contain_goods').hasLabel('goods').has('name', '椅子'))"
返回与大学中国科技大学和清华大学都存在属于关系的点,"g.V().has('university', 'name', '中国科技大学').outE('belong').inV().as('b').inE('belong').outV().has('university', 'name', '清华大学').select('b')"
 请问腾讯公司所在的城市及其包含的大学ID、名称和价值是什么？,"g.V().has('company', 'name', '腾讯').out('belong').as('b').out('contain').as('c').select('c').by(__.values('id', 'value', 'name').fold())"
"查询全部源点标签为事项,目标点标签为仓库,标签为合并请求或用户的边","g.V().hasLabel('issue').bothE('pullRequest', 'user').where(otherV().hasLabel('repository'))"
"找出id为77的seller有关的buyer的relation, 再找出和buyer有关系的partner","g.V().has('seller', 'id', 77).as('a').bothE().as('e').otherV().hasLabel('buyer').as('b').bothE('relation').as('e2').otherV().as('c').select('b').bothE('partner').as('e3').otherV().as('d').select('a', 'b', 'c', 'd')"
"帮我查询所有源点标签为学生,边标签为选择,以及满足条件目标点id大于100或权重为空或f0小于773的边","g.V().hasLabel('student').as('a').outE('selects').as('e').inV().as('b').where(or(has('targetId', gt(100)), not(has('weight')), has('f0', lt(773)))).select('e')"
"查询属于医生王梅属于的部门,的医生","g.V().hasLabel('doctor').has('name', '王梅').as('a').outE('belong').as('e').inV().hasLabel('department').as('b').inE('belong').as('e2').outV().hasLabel('doctor').as('c').select('b', 'c')"
"请帮我找出公司滴滴雇佣的person, 令公司的id等于person的薪资, 返回公司的规格, person的薪资","g.V().hasLabel('company').has('name', '滴滴').as('a').outE('employee').inV().hasLabel('person').as('b').select('a', 'b').by(choose(__.has('id'), constant('id'), constant('b.salary'))).by('salary').select('a', 'b').by('scale').by('salary')"
查询141个与赵科和何伟都存在关系的person节点,"g.V().has('name', '赵科').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '何伟').select('b').limit(141)"
请帮我查找与何建国有关联的爱人，或者爱人的爱人。,"g.V().has('person', 'name', '何建国').outE('lover').inV().hasLabel('person').simplePath().times(2).emit().dedup().values('name')"
将所有源点标签设为person，目标点标签也为person，并且这些边的标签是家人。,g.V().hasLabel('person').outE('family').where(inV().hasLabel('person'))
 返回同时与赵红存在家人关系、与孙若涵存在同事关系的节点，并返回这些节点的年龄、ID、赵红的年龄和孙若涵的名字。,"g.V().has('person', 'name', '赵红').as('a').outE('family').inV().hasLabel('person').as('b').inE('colleague').outV().has('person', 'name', '孙若涵').as('c').select('a', 'b', 'c').by('age').by('age').by('id').by('name').project('a.age', 'b.age', 'b.id', 'c.name').by(select('a')).by(select('b')).by(select('b')).by(select('c'))"
"找出关联书孤城的书,和这些书引用的书","g.V().hasLabel('book').has('name', '孤城').in('relates').as('b').out('refers').as('c').select('b', 'c')"
返回所有从person类型的源点到评论类型的target点，且类型为创造的边。,g.V().hasLabel('person').outE('creates').where(inV().hasLabel('comment'))
"以184,778作为请求点id, 源点的id等于输入表id,查询和university电子科技大学有university_has_department关系的department,以及和student孙思思有student_selects_course关系的course,将它们都返回","g.withSideEffect('p', [184, 778]).V().hasLabel('university').where(__.values('id').is(within('p'))).has('name', '电子科技大学').as('a').outE('university_has_department').inV().hasLabel('department').as('b').select('a').V().hasLabel('student').has('name', '孙思思').as('c').outE('student_selects_course').inV().hasLabel('course').as('d').select('a', 'b', 'c', 'd')"
" 给出97个与类型为person的点有parent关系的person,并找出与这些person有colleague关系的person。",g.V().hasLabel('person').as('a').outE('parent').inV().hasLabel('person').as('b').outE('colleague').inV().hasLabel('person').as('c').select('c').limit(97)
请帮我找出前92个标签等于has的边,g.E().hasLabel('has').limit(92)
"查询所有名为李建聪的,字数在188到523之间的朋友,返回这些朋友的语言,和边的目标点id,权重","g.V().has('name', '李建聪').outE('friend').as('e').inV().has('wordCount', between(188, 523)).as('b').select('b', 'e').by('lang').by(union(id(), values('weight')).fold())"
"帮我查询id为129的点的名字,上次登录时间","g.V().has('id', 129).project('a.name', 'a.lastLoginTime').by('name').by('lastLoginTime')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回全部和person李科有关系的person节点,返回这些点的年龄,薪资,id","g.V().has('person', 'name', '李科').bothE().otherV().hasLabel('person').project('b.age', 'b.salary', 'b.id').by(values('age')).by(values('salary')).by(values('id'))"
 请帮我查找与王梅有购买关系的软件，以及与杜思琪有隶属关系的公司，并返回它们。,"g.V().has('person', 'name', '王梅').as('a').out('buy').hasLabel('software').as('b').select('a').V().has('person', 'name', '杜思琪').as('c').out('belong').hasLabel('company').as('d').select('a', 'b', 'c', 'd')"
获取 person 的关联人，或者关联人的关联人,g.V().hasLabel('person').outE('relation').inV().hasLabel('person').outE('relation').inV().hasLabel('person').dedup()
"输入表的列为category,id,name, 数据为('安眠药',92,'医疗酒精'),('感冒药',13,'头孢'), 以属性name作为相等条件,找出从处方Prescription_352出发,经过类型为prescription_contain_medicine的边,走3跳到达的药品点","g.withSideEffect('p', [['安眠药', 92, '医疗酒精'], ['感冒药', 13, '头孢']]).V().hasLabel('prescription').has('name', 'Prescription_352').repeat(outE('prescription_contain_medicine').inV().simplePath()).times(3).dedup()"
帮我查询和买家郑科之间有取消关系的订单,"g.V().hasLabel('buyer').has('name', '郑科').outE('cancel').inV().hasLabel('orders')"
请帮我查找所有与medicine头孢有关系的medicine的name,"g.V().hasLabel('medicine').has('name', '头孢').bothE().otherV().hasLabel('medicine').values('name')"
"输入表的列为scale,id,peopleNumber, 数据为('small',86,533), 以属性scale作为相等条件,给出全部名为华中科技大学的点的,peopleNumber在2226到7204之间的friend,返回这些friend的id,和边的srcId,f0,targetId","g.withSideEffect('p', [['scale': 'small', 'id': 86, 'peopleNumber': 533]]).V().has('scale', __.select('p').unfold().select('scale')).has('name', '华中科技大学').outE('friend').as('e').inV().has('peopleNumber', between(2226, 7204)).project('b.id', 'e.srcId', 'e.f0', 'e.targetId').by(__.id()).by(__.select('e').outV().id()).by(__.select('e').values('f0')).by(__.select('e').inV().id())"
返回包含在澳大利亚的所有城市，以及属于澳大利亚的城市。,"g.V().has('name', '澳大利亚').as('a').out('contain').hasLabel('city').as('b').select('a').in('belong').hasLabel('city').as('c').select('a', 'b', 'c')"
"给出源点类型为公司,目标点类型为大学,类型为大学的边",g.V().hasLabel('company').outE('university').as('e').inV().hasLabel('university').select('e')
"使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));查找所有名为Comment_116的,value为空或value不是815的partner,返回这些partner的value,和边的f1,f0,targetId","g.V().has('name', 'Comment_116').outE('partner').as('e').inV().as('b').where(or(__.not(has('value')), __.has('value', neq(815)))).select('b', 'e').by('value').by(project('f1', 'f0', 'targetId').by('f1').by('f0').by('targetId'))"
"查找满足条件名字为陈伟且身高等于186,或id小于等于35的节点","g.V().or(has('name', '陈伟').has('height', 186), has('id', lte(35)))"
"找出id为88的病人有关的医生的伙伴, 再找出和医生有关系的伙伴","g.V().hasLabel('patient').has('id', 88).as('a').bothE().as('e').otherV().hasLabel('doctor').as('b').bothE('partner').as('e2').otherV().as('c').select('b').bothE('partner').as('e3').otherV().as('d').select('a', 'b', 'c', 'd')"
"查询源点语言不是687,边类型为拥有,且满足条件目标点id不为空且源点id大于20,或f1为true的边,返回这些边的目标点id除65的个数","g.V().has('lang', neq(687)).as('a').outE('has').where(or(and(has('targetId', neq(null)), has('srcId', gt(20))), has('f1', true))).as('e').inV().as('b').select('e').values('targetId').math('_ / 65').count()"
 查询同时满足以下条件的点：它们被标记为'person'，并且与这些点有'喜欢'关系，并且与这些点有'支付'关系，并且与这些点有'喜欢'关系。,g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('person').as('b').outE('pay').as('e2').inV().hasLabel('person').as('c').outE('likes').as('e3').inV().hasLabel('person').as('d').select('d')
根据韩轩提供的人员信息，返回与该人员相关的人员的姓名和ID。,"g.V().has('person', 'name', '韩轩').out('knows').out('relates').project('c.name', 'c.id').by('name').by('id')"
"请帮我找出所有名为文学院的点的,年龄在24到78之间的相关者,返回这些相关者的性别,和边的f1","g.V().has('name', '文学院').outE('relation').as('e').inV().has('age', between(24, 78)).project('gender', 'f1').by(values('gender')).by(select('e').values('f1'))"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出person马红的全部标签为family的边,并根据srcId从小到大排列,返回111个","g.V().hasLabel('person').has('name', '马红').outE('person_family_person').order().by('srcId', asc).limit(111).inV()"
"返回全部源点类型为city,目标点类型为country,类型为country或university或company的边","g.V().hasLabel('city').outE('country', 'university', 'company').as('e').inV().hasLabel('country').select('e')"
"返回名为李国强和周雪的,标签等于person的点公共的colleague节点的名单","g.V().has('person', 'name', '李国强').outE('colleague').inV().as('b').inE('colleague').outV().has('person', 'name', '周雪').select('b').values('name')"
给出全部和person周国强之间有parent关系的person,"g.V().hasLabel('person').has('name', '周国强').out('parent').hasLabel('person')"
"以295,283作为请求点id, 源点的id等于输入表id,给出全部和论坛知乎有关系的标签节点,返回这些点的id,名字,价值","g.inject([295, 283]).as('p').flatMap(select('p').unfold().as('id')).V().hasLabel('forum').as('a').where(and(__.as('a').values('id').as('a_id'), __.as('id').select('id').as('p_id'), __.as('a_id').is(eq('p_id')))).has('name', '知乎').bothE().as('e').otherV().hasLabel('tag').as('b').select('b').by(__.values('id', 'name', 'value').fold())"
 返回与标签'其他'存在关系且与评论'Comment_110'存在关系的电影院节点的大小。,"g.V().has('tag', 'name', '其他').outE().inV().hasLabel('cinema').as('b').inE().outV().has('comment', 'name', 'Comment_110').select('b').values('size')"
"查找153个名为中国的点contain的标签为city的节点,且其name不等于重庆","g.V().has('name', '中国').out('contain').hasLabel('city').has('name', neq('重庆')).limit(153)"
"找出79个repository Kafka和XXRepo,共同的relation","g.V().has('repository', 'name', 'Kafka').outE('relation').inV().as('b').inE('relation').outV().has('repository', 'name', 'XXRepo').select('b').limit(79)"
 请问有没有一个叫张若涵和吴宏的医生，他们是否共同合作过？,"g.V().hasLabel('doctor').has('name', '张若涵').as('a').outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().hasLabel('doctor').has('name', '吴宏').as('c').select('b').limit(88)"
"请帮我查找名为计算机体系结构的,名字为生物学院或价值大于等于74的伙伴,返回这些伙伴的价值,和边的f1,权重,源点id","g.V().has('name', '计算机体系结构').outE('partner').as('e').inV().has('name', '生物学院').or().has('value', gte(74)).select('e').project('b.value', 'e.f1', 'e.weight', 'e.srcId').by(__.inV().values('value')).by(values('f1')).by(values('weight')).by(values('srcId'))"
找出与patient韩月和韩红都存在accept关系的点,"g.V().has('patient', 'name', '韩月').out('accept').as('b').in('accept').has('patient', 'name', '韩红').select('b')"
查找前192个等级小于等于2或价值为空或等级为空的大学,"g.V().hasLabel('university').or(has('level', lte(2)), hasNot('value'), hasNot('level')).limit(192)"
 请问从人人影城出发，经过上映的边，走3步可以到达哪个电影点？,"g.V().has('cinema', 'name', '人人影城').repeat(out('releases')).times(3).hasLabel('film')"
 查询赵建聪的朋友的朋友。,"g.V().has('person', 'name', '赵建聪').out('relation').out('relation').out('friend')"
找出病人的1度以内的环,"g.V().hasLabel('patient').as('a').both().as('b').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"请帮我找出person吴科购买的软件, 令person的id等于person的薪资的最小值, 返回person的薪资, 软件的价值","g.V().has('person', 'name', '吴科').as('a').outE('buy').inV().hasLabel('software').as('b').select('a', 'b').by(values('salary')).by(values('value')).project('a.salary', 'b.value').by(select('a')).by(select('b'))"
"返回被person吴宏认识的person,和吴宏关联的person","g.V().hasLabel('person').has('name', '吴宏').as('b').outE('relates').inV().as('c').select('b').inE('knows').outV().as('a').select('a', 'b', 'c')"
"请帮我查找病人郑宏接受的处方,以及创造这些处方的医生","g.V().has('patient', 'name', '郑宏').as('a').outE('accept').as('e').inV().hasLabel('prescription').as('b').inE('creates').as('e2').outV().hasLabel('doctor').as('c').select('b', 'c')"
返回关联《罪与罚》的书籍，以及这些书籍的类别。,"g.V().has('book', 'name', '罪与罚').out('relates').out('relates').values('category')"
"找出大学重庆大学属于的城市,被其他国家包含的数量","g.V().has('university', 'name', '重庆大学').out('belong').in('contain').dedup().count()"
查询与名为Light和LX001的点共享贷款标签的节点,"g.V().has('name', 'Light').outE('repay').inV().hasLabel('loan').as('b').inE('repay').outV().has('name', 'LX001').select('b')"
"给出被公司申请数量大于11的贷款,记为relationCount,再查询这些贷款申请的公司","g.V().hasLabel('loan').as('a').project('a', 'relationCount').by(identity()).by(__.in('apply').hasLabel('company').id().max()).where(__.select('relationCount').is(gt(11))).select('a').out('apply').hasLabel('company').dedup()"
"请帮我找出购买软件Spark使用的软件,的person","g.V().hasLabel('software').has('name', 'Spark').outE('uses').inV().as('b').inE('buy').outV().as('c').select('b', 'c')"
返回以撰写关系关联了书java程序设计的作家,"g.V().hasLabel('book').has('name', 'java程序设计').in('write').hasLabel('author')"
"查询创造评论Comment_155的person,和这些person观看的电影","g.V().hasLabel('comment').has('name', 'Comment_155').in('creates').as('b').out('watch').hasLabel('film').as('c').select('b', 'c')"
 请问能否帮我查询李轩发布的所有带标签名的文章？,"g.V().has('user', 'name', '李轩').outE('publish').inV().hasLabel('post').outE('has').inV().hasLabel('tag').values('name')"
请帮我找出182个与数据结构和高等数学都存在关系的部门或教师节点,"g.V().has('name', '数据结构').outE().inV().or(hasLabel('department'), hasLabel('teacher')).as('b').inE().outV().has('name', '高等数学').select('b').limit(182)"
请帮我找出与吴红有关的人，以及这些人被其他人关联的数量。,"g.V().has('person', 'name', '吴红').as('a').outE('relates').as('e').inV().hasLabel('person').as('b').inE('relates').as('e2').outV().hasLabel('person').as('c').select('c').count()"
"请帮我找出拥有学生杜思琪的部门,和这些部门拥有的学生","g.V().hasLabel('student').has('name', '杜思琪').as('a').inE('has').outV().hasLabel('department').as('b').outE('has').inV().hasLabel('student').as('c').select('b', 'c')"
"请帮我找出belong city纽约的university,和这些university cooperate的company","g.V().hasLabel('city').has('name', '纽约').inE('belong').outV().hasLabel('university').as('b').outE('cooperate').inV().hasLabel('company').as('c').select('b', 'c')"
"找出forum百度贴吧contain的user, 令user的name等于user的height,令user的name等于user的height, 返回forum的value, user的age","g.V().hasLabel('forum').has('name', '百度贴吧').outE('contain').inV().hasLabel('user').as('b').project('a_value', 'b_age').by(select('b').by(constant('b')).by('value')).by(select('b').by('age'))"
返回与韩红有喜欢关系的评论，以及这些评论中与电影Comment_418有关联的所有电影。,"g.V().has('person', 'name', '韩红').as('a').out('likes').hasLabel('comment').as('b').select('a', 'b').V().has('comment', 'name', 'Comment_418').as('c').out('belong').hasLabel('film').as('d').select('a', 'b', 'c', 'd')"
找出所有与Faker有转账关系的账号，并返回这些账号之间的转账价值。,"g.V().has('name', 'Faker').outE('transfer').inV().hasLabel('account').outE('transfer').inV().hasLabel('account').values('value')"
请帮我查找前174个label为creates的边,g.E().hasLabel('creates').limit(174)
"请帮我找出和用户李思思有关的合并请求,称为X,再请帮我找出和这个X有关联的其他事项,以及和X有关联的事项","g.V().has('user', 'name', '李思思').as('a').bothE().otherV().hasLabel('pullRequest').as('b').bothE().otherV().hasLabel('issue').as('c').select('b').bothE().otherV().hasLabel('issue').as('d').select('a', 'b', 'c', 'd')"
"找出person周梅拥有的账号,被其他账号转账的数量","g.V().hasLabel('person').has('name', '周梅').outE('own').inV().hasLabel('account').inE('transfer').outV().hasLabel('account').count()"
 找出与电影功夫有发行关系的电影院。,"g.V().hasLabel('film').has('name', '功夫').inE('releases').outV().hasLabel('cinema')"
"使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找全部和买家韩轩有关系的商品节点,返回这些点的名字,类别,价格","g.V().hasLabel('buyer').has('name', '韩轩').bothE().otherV().hasLabel('goods').project('b.name', 'b.category', 'b.price').by(values('name')).by(values('category')).by(values('price'))"
找出与《西虹市首富》和《神探狄仁杰》都有关系的41个评论节点。,"g.V().has('name', '西虹市首富').outE().inV().hasLabel('comment').as('b').inE().outV().has('name', '神探狄仁杰').select('b').limit(41)"
"调用KHOP函数,以33, 'to', 'Ml'作为输入,返回运算结果","g.call('KHOP').with('input', [33, 'to', 'Ml']).select('id', 'kValue')"
"输入请求点id的列表480, 源点的id等于输入表id,返回与user周科有user_creates_issue关系的2跳以内的环","g.withSideEffect('p', [480]).V().hasLabel('user').has('id', within('p')).has('name', '周科').as('a').bothE('user_creates_issue').bothV().where(neq('a')).simplePath().by(id).until(loops().is(2)).path().by(id).by(id).project('a.id', 'b_id').by(limit(local, 1)).by(tail(local, 1))"
"查找university has的department, 令department的name的值等于belongdepartment的course的name的最大值, 再查找department has的teacher","g.V().hasLabel('university').as('a').out('has').hasLabel('department').as('b').sideEffect(__.select('b').in('belong').hasLabel('course').values('name').max().as('maxName').select('b').property('name', __.select('maxName'))).out('has').hasLabel('teacher').as('d').select('b', 'd').by('name').by()"
请帮我找出天涯论坛上有关古代的帖子，并返回这些帖子的字数、创建时间和它们所在论坛以及标签的价值。,"g.V().hasLabel('forum').has('name', '天涯论坛').as('a').outE('contain').inV().hasLabel('post').as('b').inE('has').outV().hasLabel('tag').has('name', '古代').as('c').select('a', 'b', 'c').by('value').by('wordCount').by('value').project('a.value', 'b.wordCount', 'b.createTime', 'c.value').by(select('a')).by(select('b')).by(select('b').values('createTime')).by(select('c'))"
"查找191个和类型是cinema的点有releases关系的film,以及和这些film有has关系的tag",g.V().hasLabel('cinema').out('releases').hasLabel('film').out('has').hasLabel('tag').limit(191)
 请帮我找出所有作家按名字和年龄分组的薪资，并按薪资升序排序。,"g.V().hasLabel('author').group().by(values('name', 'age').fold()).by(values('salary').fold()).order(local).by(values, asc)"
"返回评论Comment_176属于的电影,以及观看这些电影的person","g.V().hasLabel('comment').has('name', 'Comment_176').outE('belong').inV().hasLabel('film').as('b').inE('watch').outV().hasLabel('person').as('c').select('b', 'c')"
"返回person杜建聪申请的贷款,被其他公司申请的数量","g.V().has('person', 'name', '杜建聪').outE('apply').inV().hasLabel('loan').as('b').inE('apply').outV().hasLabel('company').as('c').select('c').count()"
"查找喜欢书白夜行的读者,和这些读者喜欢的书","g.V().has('book', 'name', '白夜行').as('a').in('likes').as('b').out('likes').as('c').select('b', 'c')"
请找出与用户杜若涵和帖子Post_233有关的标签节点，并返回它们的ID和名称。,"g.V().has('user', 'name', '杜若涵').outE().inV().hasLabel('tag').as('b').inE().outV().has('post', 'name', 'Post_233').select('b').values('id', 'name')"
请帮我找出id为92的点的value,"g.V().has('id', 92).values('value')"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出类型为person_likes_person,且源点id在1到78之间的边","g.E().hasLabel('person_likes_person').has('srcId', between(1, 78))"
返回以咨询关系关联了卖家孙思思的买家,"g.V().hasLabel('seller').has('name', '孙思思').inE('consult').outV().hasLabel('buyer')"
 帮我查询李国强朋友的朋友,"g.V().has('person', 'name', '李国强').out('relation').out('friend').out('friend')"
"输入请求点id的列表527,746, 以属性id作为相等条件,请帮我找出全部和person点有关联关系的person节点,且边满足条件源点id是41,目标person节点满足条件身高在164到175之间","g.withSideEffect('p', [527, 746]).V().hasLabel('person').where(__.in('relates').has('srcId', 41).outV().hasLabel('person').has('id', within('p'))).has('height', between(164, 175))"
"请帮我找出所有源点标签等于department,目标点标签等于student,标签等于student的边",g.E().hasLabel('student').where(__.outV().hasLabel('department')).where(__.inV().hasLabel('student'))
请帮我找出所有与person有关的人，或者这些人再往上追溯的关联人员,g.V().hasLabel('person').outE('relation').inV().hasLabel('person').simplePath().by(T.id).times(2).emit().dedup()
请帮我查找与买家徐月和李思琪都存在取消关系的点,"g.V().has('buyer', 'name', '徐月').outE('cancel').inV().as('b').inE('cancel').outV().has('buyer', 'name', '李思琪').select('b')"
找赵科的伙伴的朋友,"g.V().hasLabel('person').has('name', '赵科').outE('relation').inV().outE('partner').inV().outE('friend').inV()"
 在大众电影院观看电影的人数,"g.V().hasLabel('cinema').has('name', '大众影院').outE('releases').inV().hasLabel('film').inE('watch').outV().hasLabel('person').count()"
"找出标签为订单的点,返回151个",g.V().hasLabel('orders').limit(151)
 电影绿巨人和泰坦尼克号存在共同点。,"g.V().hasLabel('film').has('name', '绿巨人').outE('has').inV().as('b').inE('has').outV().hasLabel('film').has('name', '泰坦尼克号').select('b')"
 给出Geaflow123的还款账户，以及所有点还款的贷款信息。,"g.V().has('name', 'Geaflow123').as('a').outE('repay').inV().hasLabel('loan').as('b').select('a').inE('transfer').outV().hasLabel('account').as('c').select('a', 'b', 'c')"
"查找所有名为物理学院的,id不等于28的朋友,返回这些朋友的名字,和边的权重,f0","g.V().has('name', '物理学院').outE('friend').as('e').inV().has('id', neq(28)).as('b').select('b', 'e').by('name').by(values('weight', 'f0'))"
给出与部门数学学院和计算机学院都存在拥有关系的点,"g.V().has('department', 'name', '数学学院').out('has').as('b').in('has').has('department', 'name', '计算机学院').select('b')"
查找与部门计算机学院和文学院都存在拥有关系的点,"g.V().hasLabel('department').has('name', '计算机学院').outE('has').inV().where(__.inE('has').outV().hasLabel('department').has('name', '文学院')).dedup()"
"使用列为id,createTime,weight, 数据为(92,2024-10-24,90)的子查询作为输入表, 以属性weight作为相等条件,给出类型是prescription的点,返回96个","g.withSideEffect('p', [['id':92, 'createTime':'2024-10-24', 'weight':90]]).V().hasLabel('prescription').as('a').where(eq('a')).by('weight').by(select('p').unfold().select('weight')).limit(96)"
 返回所有从标签为'film'的源节点到标签为'tag'的目标节点，标签为'has'的边的边。,g.V().hasLabel('film').outE('has').where(inV().hasLabel('tag'))
请找出与艺术学院和生物学院有关系的学生，并将他们全部返回。,"g.V().has('department', 'name', '艺术学院').as('a').out('has').as('b').select('a').V().has('department', 'name', '生物学院').as('c').out('has').as('d').select('a', 'b', 'c', 'd')"
"使用这个图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));查询和country美国有关的university,称为X,再查询和这个X有关联的其他university,以及和X有关联的university","g.V().has('country', 'name', '美国').as('a').bothE().otherV().hasLabel('university').as('b').bothE().as('e2').otherV().hasLabel('university').as('c').select('b').bothE().as('e3').otherV().hasLabel('university').as('d').select('a', 'b', 'c', 'd')"
"找出所有名为Geaflow的,价值大于等于459或语言不是rust的朋友,返回这些朋友的id,和边的目标点id,权重,f0","g.V().has('name', 'Geaflow').outE('friend').as('e').inV().as('b').where(or(__.has('value', gte(459)), __.has('lang', neq('rust')))).select('b', 'e').by('id').by(union(__.select('targetId'), __.select('weight'), __.select('f0')).fold())"
"找出名为郑轩的点的,name不是Comment_117或createTime是2008年05月30日的relation,返回这些relation的createTime,和边的srcId,targetId,f0","g.V().has('name', '郑轩').outE('relation').as('e').inV().as('b').where(or(__.not(has('name', 'Comment_117')), has('createTime', '2008-05-30'))).select('e', 'b').by(project('srcId', 'targetId', 'f0', 'createTime').by(__.select('e').values('srcId')).by(__.select('e').values('targetId')).by(__.select('e').values('f0')).by(__.select('b').values('createTime')))"
"找出所有和用户点有创造关系的合并请求节点,且边满足条件时间戳是2030年07月13日,目标合并请求节点满足条件创建时间为2025年12月08日","g.V().hasLabel('user').as('a').outE('creates').has('timeStamp', '2030-07-13').as('e').inV().hasLabel('pullRequest').has('createTime', '2025-12-08').as('b').select('b')"
找到所有标记为'person'且与名为杜轩和韩强的节点有关系的节点。,"g.V().has('name', '杜轩').out('relates').hasLabel('person').as('b').in('relates').has('name', '韩强').select('b')"
找出与标签为人的人有支付关系的161个人，以及他们喜欢的人。,g.V().hasLabel('person').as('a').outE('pay').as('e').inV().hasLabel('person').as('b').outE('likes').as('e2').inV().hasLabel('person').as('c').select('c').limit(161)
找出与person王国强和person王梅都有关联的人，并返回他们的身高、年龄和薪资。,"g.V().hasLabel('person').has('name', '王国强').as('a').outE().as('e').inV().hasLabel('person').as('b').inE().as('e2').outV().hasLabel('person').has('name', '王梅').as('c').select('b').values('height', 'age', 'salary')"
"帮我查询与阿里存在属于关系的城市,城市与国家存在属于关系的点,返回这些点的人数","g.V().has('name', '阿里').outE('belong').inV().hasLabel('city').outE('belong').inV().hasLabel('country').values('peopleNumber')"
"帮我查询person李宏申请的贷款,以及申请这些贷款的person","g.V().hasLabel('person').has('name', '李宏').as('a').outE('apply').as('e').inV().hasLabel('loan').as('b').inE('apply').as('e2').outV().hasLabel('person').as('c').select('b', 'c')"
"使用这个图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));返回全部源点标签为用户,边标签为user_creates_issue,并且满足条件源点id大于等于145且目标点id在50到174之间的边","g.E().hasLabel('user_creates_issue').where(and(__.outV().hasLabel('user'), __.outV().has('id', gte(145)), __.inV().has('id', between(50, 174)))).dedup()"
"返回143个大学南京大学和北京大学,共同的相关者","g.V().has('university', 'name', '南京大学').outE('relation').inV().as('b').inE('relation').outV().has('university', 'name', '北京大学').select('b').limit(143)"
"请帮我找出和account Faker有transfer关系的account,再请帮我找出以repay关系关联了Faker的loan","g.V().hasLabel('account').has('name', 'Faker').as('a').outE('transfer').inV().as('b').select('a').inE('repay').outV().hasLabel('loan').as('c').select('a', 'b', 'c')"
 找出陈思思教授的课程和文学院拥有的教师。,"g.V().hasLabel('teacher').has('name', '陈思思').as('a').outE('teach').inV().hasLabel('course').as('b').select('a').V().hasLabel('department').has('name', '文学院').as('c').outE('has').inV().hasLabel('teacher').as('d').select('a', 'b', 'c', 'd')"
"根据name,height分组,计算height乘height的值","g.V().group().by('name').by('height').unfold().select(values).project('name', 'height', 'result').by(select(keys).select('name')).by(select(keys).select('height')).by(select(values).math('_ * _'))"
"给出全部读者以性别,身高分组的性别, 根据性别从小到大排序","g.V().hasLabel('reader').group().by(values('gender', 'height').fold()).by(__.values('gender').fold()).order(local).by(keys, asc).select(values).unfold()"
"给出161个医生周思思和韩宏,共同的朋友","g.V().has('doctor', 'name', '周思思').outE('friend').inV().as('b').inE('friend').outV().has('doctor', 'name', '韩宏').select('b').limit(161)"
"查找源点name不是北京,name为武汉,或value是267,边标签为contain,且srcId大于93的边,返回这些边的srcId的个数乘srcId的个数","g.V().has('name', neq('北京')).has('name', '武汉').or().has('value', 267).outE('contain').has('srcId', gt(93)).project('count_srcId', 'srcId').by(count()).by(values('srcId')).select(values).unfold().sum()"
返回与滴滴合作的大学，以及与该大学合作的公司的人员数量。,"g.V().has('company', 'name', '滴滴').out('cooperate').hasLabel('university').out('cooperate').hasLabel('company').values('peopleNumber')"
 找出与蚂蚁集团有合作伙伴关系或具有合作伙伴关系的大学的所有学校。,"g.V().hasLabel('company').has('name', '蚂蚁集团').outE('partner').inV().hasLabel('university').dedup().values('name')"
"请帮我找出从teacher王建国出发,经过类型为teach的边,走1度到达的course点","g.V().has('teacher', 'name', '王建国').outE('teach').inV().hasLabel('course').limit(1)"
"用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查询全部标签等于编辑的点",g.V().hasLabel('publisher')
 谁是吴强的伴侣？,"g.V().hasLabel('person').has('name', '吴强').outE('relation').inV().outE('partner').inV().outE('relation').inV()"
 找出与标签为'person'的点有拥有关系的账号，找出这些账号的还款关系，找出这些还款关系的贷款，找出这些贷款的存款关系。,g.V().hasLabel('person').as('a').outE('own').as('e').inV().hasLabel('account').as('b').outE('repay').as('e2').inV().hasLabel('loan').as('c').outE('deposit').as('e3').inV().hasLabel('account').as('d').select('d')
"找出person黄国强relates的person,以及knows这些person的person","g.V().hasLabel('person').has('name', '黄国强').outE('relates').inV().hasLabel('person').as('b').inE('knows').outV().hasLabel('person').as('c').select('b', 'c')"
 找出13个与建国大业和功夫有关的评论节点。,"g.V().has('name', '建国大业').outE().as('e').inV().hasLabel('comment').as('b').inE().as('e2').outV().has('name', '功夫').select('b').limit(13)"
"使用列为scale,peopleNumber,name, 数据为('large',779,'字节'),('small',868,'Bilibili'),('small',574,'Bilibili')的子查询作为输入表, 以属性scale作为相等条件,请帮我找出person何强的全部标签等于partner的边,并根据targetId升序排列,返回169个","g.withSideEffect('p', [['large', 779, '字节'], ['small', 868, 'Bilibili'], ['small', 574, 'Bilibili']]).V().hasLabel('person').has('name', '何强').where(__.as('a').values('scale').is(within(__.select('p').unfold().limit(local, 1)))).outE('partner').order().by('targetId', asc).limit(169).inV()"
"找出源点标签为seller,边标签为ask的边,返回这些边的weight对102.93取余的数量,和weight乘155.60的值","g.V().hasLabel('seller').outE('ask').project('count_mod', 'weight_times').by(__.count()).by(__.values('weight').math('_ * 155.60')).select('count_mod', 'weight_times')"
查询person的3度的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(2).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"以(708,false,2020-02-11),(368,false,2024-07-10),(961,true,1997-04-23)作为请求表数据,属性分别为value,isBlock,lastLoginTime, 以属性lastLoginTime作为相等条件,计算所有账号的id的平均值减5的值","g.withSideEffect('p', [[708, false, '2020-02-11'], [368, false, '2024-07-10'], [961, true, '1997-04-23']]).V().hasLabel('account').as('a').where(__.select('a').values('lastLoginTime').is(within(__.select('p').unfold().tail(2)))).values('id').mean().math('_ - 5')"
"输入表的列为name,price,value, 数据为('Order_360',3979.07,556),('Order_399',2420.71,736),('Order_326',3193.74,426),('Order_186',1427.60,985), 源点的name等于输入表name,请帮我查找类别是书籍,id为空的节点","g.inject(['Order_360', 'Order_399', 'Order_326', 'Order_186']).as('names').V().has('name', within('names')).has('category', '书籍').hasNot('id').as('a').select('a')"
请帮我查找全部与书百年孤独有关系的作家的id,"g.V().has('book', 'name', '百年孤独').bothE().otherV().hasLabel('author').id()"
 查询与cinema UME存在releases关系，且与tag科幻存在has关系的film节点，返回这些film的ID、值、cinema UME的ID和tag科幻的名称。,"g.V().hasLabel('cinema').has('name', 'UME').as('a').outE('releases').inV().hasLabel('film').as('b').inE('has').outV().hasLabel('tag').has('name', '科幻').as('c').select('a', 'b', 'c').by('id').by('id').by('value').by('name')"
"以(152,22969,'上海')作为请求表数据,属性分别为value,area,name, 以属性area作为相等条件,给出id为124的university有关的university的friend, 再给出和university有关系的relation","g.withSideEffect('p', [['value':152, 'area':22969, 'name':'上海']]).V().hasLabel('university').has('area', __.select('p').unfold().select('area')).has('id', '124').as('a').bothE().otherV().hasLabel('university').as('b').bothE('friend').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"根据id,大小分组,计算id对80取余的最大值","g.V().hasLabel('a').group().by(union(identity(), values('size')).fold()).by(values('id').math('_ % 80').max())"
"查询所有Tugraph的点拥有的事项,然后查询Tugraph被喜欢的用户,一起返回","g.V().has('name', 'Tugraph').as('a').outE('has').inV().as('b').select('a').inE('likes').outV().as('c').select('a', 'b', 'c')"
返回107个与美团和字节都存在关系的person或company或software节点,"g.V().has('name', '美团').outE().inV().or(hasLabel('person'), hasLabel('company'), hasLabel('software')).as('b').inE().outV().has('name', '字节').select('b').limit(107)"
 请帮我查询与国家点相关的城市节点，并按名称分组返回。,g.V().hasLabel('country').bothE('contain').bothV().hasLabel('city').values('name').group().by(identity()).by(count())
返回满足条件名字为Comment_393且字数大于836的节点,"g.V().has('name', 'Comment_393').has('wordCount', gt(836))"
返回person的2跳以内的环,"g.V().hasLabel('person').as('a').both().both().where(eq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"查找类型是公司的点,并根据人数从小到大排列","g.V().hasLabel('company').order().by('peopleNumber', asc)"
"帮我查询193个名为PR-115的点属于的标签为仓库的节点,且其语言为java或权重小于等于820","g.V().has('name', 'PR-115').outE('belong').inV().hasLabel('repository').or(has('lang', 'java'), has('weight', lte(820))).limit(193)"
"给出issue belong的repository, 令repository的createTime的值等于likesrepository的user的name的最小值, 再查找repository has的user","g.V().hasLabel('issue').as('a').outE('belong').inV().hasLabel('repository').as('b').sideEffect(__.select('b').aggregate('b_node')).select('b').inE('likes').outV().hasLabel('user').values('name').min().as('min_name').select('b_node').unfold().sideEffect(__.property('createTime', __.select('min_name'))).select('b_node').unfold().outE('has').inV().hasLabel('user').as('d').select('b').values('createTime').as('b_createTime').select('b_createTime', 'd')"
"找出70个和标签等于医生的点有创造关系的处方,且和这些处方有包含关系的药品",g.V().hasLabel('doctor').outE('creates').inV().hasLabel('prescription').outE('contain').inV().hasLabel('medicine').limit(70)
查找合并请求的3度以内的环,"g.V().hasLabel('pullRequest').as('a').repeat(both().simplePath()).times(3).where(loops().is(3)).where(path().unfold().tail(1).is(eq('a'))).dedup().project('a.id', 'b_id').by(select('a').id()).by(tail(local, 1).id())"
"帮我查询107个帖子Post_235和Post_131,共同的朋友","g.V().hasLabel('post').has('name', 'Post_235').outE('friend').inV().where(__.inE('friend').outV().hasLabel('post').has('name', 'Post_131')).limit(107)"
请帮我找出陈雪创造的评论中，被其他用户喜欢的数量。,"g.V().has('person', 'name', '陈雪').outE('creates').inV().hasLabel('comment').inE('likes').outV().hasLabel('person').count()"
"查找department内科has的doctor,以及has这些doctor的department, 令department的name等于department的id加33,令department(c)的name等于department(a)的weight减weight, 返回department(a)的weight,doctor(b)的id,department(c)的id","g.V().hasLabel('department').has('name', '内科').as('a').outE('has').inV().hasLabel('doctor').as('b').inE('has').outV().hasLabel('department').as('c').select('a', 'b', 'c').by('weight').by('id').by('id')"
"找出所有名为韩雪的点的,身高小于82且身高加198小于9的恋人,返回这些恋人的薪资,和边的f1,源点id","g.V().has('name', '韩雪').outE('lover').as('e').inV().has('height', lt(82)).has('height', lt(-189)).project('b_salary', 'e_f1', 'e_srcId').by(values('salary')).by(select('e').values('f1')).by(select('e').values('srcId'))"
 查询与 person 节点关联的 person 节点，按 height、salary、name 分组，返回每个组的高度、薪资和名称。,"g.V().hasLabel('person').as('a').bothE('friend').otherV().hasLabel('person').as('b').select('b').group().by(project('height', 'salary', 'name').by(values('height')).by(values('salary')).by(values('name'))).unfold().project('b.height', 'b.salary', 'b.name').by(select(keys).select('height')).by(select(keys).select('salary')).by(select(keys).select('name'))"
请帮我找出所有名字按字母顺序排列且 id 大于等于 72 的标签，数量为 113。,"g.V().hasLabel('tag').has('id', gte(72)).order().by('name', asc).limit(113)"
找出所有名为呐喊的点认识的书,"g.V().has('name', '呐喊').out('knows').hasLabel('book')"
"请帮我查找标签等于contain,且weight小于等于165.10的边","g.E().hasLabel('contain').has('weight', lte(165.10))"
"查找和person何思思有colleague关系的person,再查找以colleague关系关联了何思思的person","g.V().hasLabel('person').has('name', '何思思').as('a').bothE('colleague').otherV().hasLabel('person').as('b').select('a').bothE('colleague').otherV().hasLabel('person').as('c').select('a', 'b', 'c')"
"使用这个图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));找出处方以名字,权重,创建时间分组的名字, 根据名字升序排序","g.V().hasLabel('prescription').group().by(values('name', 'weight', 'createTime')).by(values('name')).order(local).by(keys, asc)"
给出编辑的1跳以内的环,"g.V().hasLabel('publisher').as('a').bothE().bothV().where(eq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
请帮我查找和person孙思思有1跳或2跳关系的person,"g.V().has('person', 'name', '孙思思').bothE().otherV().hasLabel('person').simplePath().by(T.id).dedup().fold().union(__.identity(), __.unfold().bothE().otherV().hasLabel('person').simplePath().by(T.id).dedup()).unfold().dedup()"
返回与person徐月和韩宏都存在belong关系的点,"g.V().has('person', 'name', '徐月').outE('belong').inV().as('b').inE('belong').outV().has('person', 'name', '韩宏').select('b').dedup()"
"给出person吴思琪支付的person,以及认识这些person的person","g.V().has('person', 'name', '吴思琪').outE('pay').inV().hasLabel('person').as('b').inE('knows').outV().hasLabel('person').as('c').select('b', 'c')"
查询以watch关系关联了film绿巨人的person,"g.V().hasLabel('film').has('name', '绿巨人').inE('watch').outV().hasLabel('person')"
"使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出19个value不等于172或isBlock为false或id大于88的account,根据id升序排列","g.V().hasLabel('account').or(has('value', neq(172)), has('isBlock', false), has('id', gt(88))).order().by('id', asc).limit(19)"
"帮我查询label为tag的点,返回93个",g.V().hasLabel('tag').limit(93)
查找教师的3跳以内的环,g.V().hasLabel('teacher').as('a').repeat(both().simplePath()).times(3).where(cyclicPath()).path().by('id')
请帮我找出前177个标签为引用的边,g.E().hasLabel('refers').limit(177)
查询与名为中国科技大学的大学有直接或间接朋友关系的城市,"g.V().has('university', 'name', '中国科技大学').repeat(bothE('friend').otherV().simplePath()).times(2).emit().hasLabel('city').dedup()"
查询level大于4的节点,"g.V().has('level', gt(4))"
查询前13个类型为属于的边,g.E().hasLabel('belong').limit(13)
"请帮我查找论坛包含的用户,返回其源点的价值对549取余的平均值,以及目标点的身高除176的和","g.V().hasLabel('forum').as('a').outE('contain').as('e').inV().hasLabel('user').as('b').select('a', 'b').by(valueMap()).project('avg_value', 'sum_height').by(select('a').unfold().select('value').math('_ / 549').math('_ % 1').mean()).by(select('b').unfold().select('height').math('_ / 176').sum())"
"请帮我找出名为Post_384的帖子,以及与其有关的标签,并返回Post_384的语言和这些标签的价值","g.V().hasLabel('post').has('name', 'Post_384').bothE().otherV().hasLabel('tag').project('a.lang', 'b.value').by(select('a').values('lang')).by(values('value'))"
"使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询名为陈强的点creates的全部orders,并对这些点的name进行求和","g.V().has('buyer', 'name', '陈强').out('buyer_creates_orders').hasLabel('orders').values('name').sum()"
"帮我查询所有源点标签等于作家,目标点标签等于书,标签等于书或读者或作家的边","g.V().hasLabel('author').bothE('book', 'reader', 'author').where(otherV().hasLabel('book')).elementMap()"
"以670,305,597,656,772作为请求点id, 源点的id等于输入表id,给出全部名为UME的,类别等于悬疑或类别是动作的朋友,返回这些朋友的类别,和边的权重","g.inject([670, 305, 597, 656, 772]).unfold().as('p').V().has('id', __.as('p')).has('name', 'UME').outE('friend').as('e').inV().has('category', within('悬疑', '动作')).select('e', 'b').by('weight').by('category')"
"请帮我找出和book罪与罚有关的author,再请帮我找出和罪与罚refers的其他book,返回它们","g.V().hasLabel('book').has('name', '罪与罚').as('a').bothE().as('e').otherV().hasLabel('author').as('b').select('a').outE('refers').as('e2').inV().hasLabel('book').as('c').select('a', 'b', 'c')"
"查询和软件有关联的软件节点,并根据其id,语言分组,返回id,语言,以及stars的最大值减304的值","g.V().hasLabel('software').as('a').bothE('uses').otherV().hasLabel('software').as('b').select('b').group().by(union(values('id'), values('lang')).fold()).by(values('stars').max()).unfold().project('b.id', 'b.lang', 'MAX(b.stars) - 304').by(select(keys).limit(local, 1)).by(select(keys).tail(local, 1)).by(select(values).math('_ - 304'))"
"帮我查询和名为推特的论坛有朋友关系,或有朋友的朋友关系的用户","g.V().has('forum', 'name', '推特').out('friend').range(1, 2).hasLabel('user')"
 找出标签为post且名为Post_296的点，返回这些点的语言（lang)和创建时间（createTime)。,"g.V().hasLabel('post').has('name', 'Post_296').project('a.lang', 'a.createTime').by(values('lang')).by(values('createTime'))"
"帮我查询被person认识数量大于162的person,记为relationCount,再查询这些person认识的person","g.V().hasLabel('person').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('knows').hasLabel('person').id().max()).where(__.select('relationCount').is(gt(162))).select('a').out('knows').hasLabel('person').dedup()"
查询全部和账号Light之间有还款关系的贷款,"g.V().hasLabel('account').has('name', 'Light').outE('repay').inV().hasLabel('loan')"
请帮我查找所有和买家王建国之间有取消关系的订单,"g.V().hasLabel('buyer').has('name', '王建国').outE('cancel').inV().hasLabel('orders')"
"输入请求点id的列表876,531,887,678,772, 源点的id等于输入表id,给出编辑以性别,薪资分组的身高, 根据身高从小到大排序","g.inject([876, 531, 887, 678, 772]).as('p').V().hasLabel('publisher').as('a').where(eq('p')).by('id').by().select('a').group().by(values('gender', 'salary').fold()).by(values('height').fold()).order(local).by(values, asc)"
"查询被买家取消数量大于149的订单,记为relationCount,再查询这些订单取消的订单","g.V().hasLabel('orders').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('cancel').hasLabel('buyer').id().max()).select('a', 'relationCount').as('a_with_count').select('a_with_count').where(__.select('relationCount').is(gt(149))).select('a').out('cancel').hasLabel('orders')"
"找出和部门数学学院有关的课程,称为X,再找出和这个X有关联的其他课程,以及和X有关联的学生","g.V().has('department', 'name', '数学学院').as('a').bothE().otherV().hasLabel('course').as('b').bothE().otherV().hasLabel('course').where(neq('b')).as('c').select('b').bothE().otherV().hasLabel('student').as('d').select('a', 'b', 'c', 'd')"
 查询与英国有伙伴关系或互为伙伴关系的城市。,"g.V().has('country', 'name', '英国').outE('partner').inV().hasLabel('city').range(1, 2).values('name')"
"给出被company Bilibili cooperate的university,和Bilibili belong的city","g.V().hasLabel('company').has('name', 'Bilibili').as('b').outE('belong').inV().hasLabel('city').as('c').select('b').inE('cooperate').outV().hasLabel('university').as('a').select('a', 'b', 'c')"
给出前2个类型是拥有的边,g.E().hasLabel('has').limit(2)
"请帮我查找名为字节的company,以及与其有关的person,并返回字节的scale和这些person的height","g.V().has('company', 'name', '字节').as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a', 'b').by('scale').by('height')"
"帮我查询和学生徐若涵有关的学生,再帮我查询和徐若涵选择的其他课程,返回它们","g.V().has('student', 'name', '徐若涵').as('a').bothE().otherV().hasLabel('student').as('b').select('a').outE('selects').inV().hasLabel('course').as('c').select('a', 'b', 'c')"
"找出和贷款loan_41有关的person,称为X,再找出和这个X有关联的其他贷款,以及和X有关联的账号","g.V().has('loan', 'name', 'loan_41').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('loan').where(neq('a')).as('c').select('b').bothE().otherV().hasLabel('account').as('d').select('a', 'b', 'c', 'd')"
返回从国家到城市的包含边。,g.V().hasLabel('country').outE('contain').inV().hasLabel('city').select('e')
"帮我查询person认识的person, 令person(b)的名字的值等于认识person的person的名字的最大值, 再查找person认识的person","g.V().hasLabel('person').as('a').outE('knows').inV().hasLabel('person').as('b').select('b').project('b_name', 'd').by(coalesce(select('b').inE('knows').outV().hasLabel('person').values('name').max(), constant(''))).by(select('b').outE('knows').inV().hasLabel('person').fold())"
"输入表的列为name,value,price, 数据为('杯子',507,646.30), 以属性price作为相等条件,返回orders Order_462contain的goods,被其他buyer look的数量","g.withSideEffect('p', [['name':'杯子','value':507,'price':646.30]]).V().hasLabel('orders').has('name','Order_462').has('price',646.30).out('orders_contain_goods').hasLabel('goods').in('buyer_look_goods').hasLabel('buyer').count()"
返回与person相关的person节点，并按性别、年龄和姓名进行分组，然后返回性别、年龄和姓名。,"g.V().hasLabel('person').as('a').bothE('knows').otherV().hasLabel('person').as('b').select('b').values('gender', 'age', 'name').group().by().by(count())"
"用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找类型为作家的点",g.V().hasLabel('author')
查询前20个标签为属于的边,g.E().hasLabel('belong').limit(20)
 找出与person节点有关联的person节点，并按年龄分组返回。,g.V().hasLabel('person').as('a').bothE('pay').otherV().hasLabel('person').as('b').select('b').values('age').group().by(identity()).by(count())
"请帮我找出与周若涵存在同事关系的person,person与person存在家人关系的点,返回这些点的id","g.V().has('name', '周若涵').outE('colleague').inV().hasLabel('person').outE('family').inV().hasLabel('person').values('id')"
"请帮我查找与名为吴红和郑建国的点共同teach的,label为course的节点","g.V().has('name', '吴红').outE('teach').inV().hasLabel('course').as('b').inE('teach').outV().has('name', '郑建国').select('b')"
查找前73个类型为喜欢的边,g.E().hasLabel('likes').limit(73)
"帮我查询和仓库XXRepo有关的仓库,称为X,再帮我查询和这个X有关联的其他事项,以及和X有关联的用户","g.V().has('repository', 'name', 'XXRepo').as('a').bothE().otherV().hasLabel('repository').as('b').bothE().otherV().hasLabel('issue').as('c').select('b').bothE().otherV().hasLabel('user').as('d').select('a', 'b', 'c', 'd')"
查询卖家为杜建聪的所有点的性别、薪水和年龄。,"g.V().hasLabel('seller').has('name', '杜建聪').project('gender', 'salary', 'age').by(values('gender')).by(values('salary')).by(values('age'))"
 找一本叫做《Java程序设计》的书。,"g.V().hasLabel('book').has('name', 'java程序设计')"
查询前79个label为发布的边,g.E().hasLabel('publish').limit(79)
"给出标签为书,名为孤城的点,返回这些点的id,名字,创建时间","g.V().hasLabel('book').has('name', '孤城').project('id', 'name', 'createTime').by('id').by('name').by('createTime')"
找到从用户王轩出发，通过发布标签的边，走了3步到达的帖子节点。,"g.V().has('user', 'name', '王轩').repeat(out('publish')).times(3).hasLabel('post')"
"使用列为height,name,salary, 数据为(155,'杜思思',4097)的子查询作为输入表, 以属性salary作为相等条件,帮我查询person relates的person,返回其源点的height对152取余的最大值,以及目标点的id加16的值","g.withSideEffect('p', [['height': 155, 'name': '杜思思', 'salary': 4097]]).V().hasLabel('person').has('salary', select('p').unfold().values('salary')).as('a').outE('relates').as('e').inV().hasLabel('person').as('b').select('a', 'b').by(values('height').fold().math('_ / 152').math('_ % 1').math('_ * 152').fold()).by(values('id').math('_ + 16').fold()).select(values).unfold().group().by(keys).by(select(values).unfold().max()).select(values)"
给出被城市巴黎包含的公司,"g.V().hasLabel('city').has('name', '巴黎').outE('contain').inV().hasLabel('company').as('b').select('b').by().as('a').select('a', 'b')"
"返回名为周若涵和马宏的,label为person的点公共的friend节点的名单","g.V().has('person', 'name', '周若涵').out('friend').as('b').in('friend').has('person', 'name', '马宏').select('b').values('name')"
"查询pullRequest的三角的环,边标签等于belong, 并返回这些点的id","g.V().hasLabel('pullRequest').as('a').outE('belong').inV().as('b').outE('belong').inV().as('c').where(__.out('belong').as('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
"以(61,'古代',540),(19,'古代',844)作为请求表数据,属性分别为id,name,value, 以属性id作为相等条件,查询189个与Post_297和Post_257都存在关系的标签节点","g.inject([['id':61,'name':'古代','value':540],['id':19,'name':'古代','value':844]]).as('p').unfold().as('p_row').V().has('id',select('p_row').select('id')).has('name','Post_297').as('a').outE().as('e').inV().hasLabel('tag').as('b').inE().as('e2').outV().has('name','Post_257').as('c').select('b').limit(189)"
找出不属于皮肤科的部门中，医生的名字和他们所在的部门名。,"g.V().hasLabel('department').has('name', neq('皮肤科')).out('has').hasLabel('doctor').as('b').out('belong').hasLabel('department').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"返回所有名为Post_150的点的,价值小于等于10的相关者,返回这些相关者的名字,和边的权重,f1","g.V().has('name', 'Post_150').outE('relation').as('e').inV().has('value', lte(10)).as('b').select('b', 'e').by('name').by(values('weight', 'f1'))"
"输入请求点id的列表114,990, 源点的id等于输入表id,返回所有id为59的author关联的book,和以relates关系关联了这些book的其他book","g.inject([114, 990]).as('p').unfold().as('id').V().hasLabel('author').has('id', '59').as('a').where(eq('id')).by('id').by(identity()).bothE().otherV().hasLabel('book').as('b').inE('relates').otherV().hasLabel('book').as('c').select('b', 'c')"
"查找被卖家郑伟拥有的商品,和郑伟拥有的商品","g.V().hasLabel('seller').has('name', '郑伟').as('b').outE('has').inV().hasLabel('goods').as('a').select('b').outE('has').inV().hasLabel('goods').as('c').select('a', 'b', 'c')"
查找前36个薪资不为空或性别等于famale或身高大于等于153的person,"g.V().hasLabel('person').or(has('salary', neq(null)), has('gender', 'famale'), has('height', gte(153))).limit(36)"
请帮我查询Order_282中包含的商品，这些商品在其他卖家那里有多少库存。,"g.V().has('orders', 'name', 'Order_282').out('contain').in('has').hasLabel('seller').count()"
"输入请求点id的列表476,508,332,512, 源点的id等于输入表id,请帮我找出标签为company的点,返回182个","g.withSideEffect('ids', [476, 508, 332, 512]).V().hasLabel('company').has('id', within('ids')).limit(182)"
请帮我查找全部和person王建国之间有commits关系的software,"g.V().hasLabel('person').has('name', '王建国').outE('commits').inV().hasLabel('software')"
"找出被用户张建聪喜欢的帖子,和张建聪发布的帖子","g.V().hasLabel('user').has('name', '张建聪').as('b').outE('publish').inV().hasLabel('post').as('c').select('b').outE('likes').inV().hasLabel('post').as('a').select('a', 'b', 'c')"
"根据gender,height,age分组,计算salary的求和值减1760的值","g.V().hasLabel('a').group().by(values('gender', 'height', 'age').fold()).by(values('salary').sum()).unfold().project('gender', 'height', 'age', 'result').by(select(keys).select('gender')).by(select(keys).select('height')).by(select(keys).select('age')).by(select(values).math('_ - 1760'))"
请帮我找出所有与city上海有关系的country的peopleNumber,"g.V().has('city', 'name', '上海').bothE().otherV().hasLabel('country').values('peopleNumber')"
返回前34个创建时间不等于2017年10月07日或创建时间不等于2010年05月22日或语言小于等于23的帖子,"g.V().hasLabel('post').or(has('createTime', neq('2017-10-07')), has('createTime', neq('2010-05-22')), has('lang', lte(23))).limit(34)"
"返回全部与person有关系的person节点,且person节点的年龄为空,并返回这些person的id乘61的值,以及person的id减68的最小值","g.V().hasLabel('person').as('a').outE().inV().hasLabel('person').has('age', eq(null)).as('b').select('b').by(values('id').math('_ * 61')).aggregate('b_ids').by(values('id').math('_ - 68')).cap('b_ids').unfold().min()"
 找出赵科和王宏喜欢关系的共同点。,"g.V().has('person', 'name', '赵科').outE('likes').inV().as('b').inE('likes').outV().has('person', 'name', '王宏').select('b')"
"查询名为王若涵和吴伟的,类型是病人的点公共的朋友节点的名单","g.V().has('patient', 'name', '王若涵').out('friend').as('b').in('friend').has('patient', 'name', '吴伟').select('b').values('name')"
"请帮我查找名为孙伟的编辑,以及与其有关的书,并返回孙伟的性别和这些书的创建时间","g.V().hasLabel('publisher').has('name', '孙伟').as('a').bothE().otherV().hasLabel('book').as('b').select('a', 'b').by(values('gender')).by(values('createTime'))"
"请帮我找出person吴国强watch的film,以及releases这些film的cinema, 令film的size等于cinema的id,令cinema的category等于film的id加64, 返回person的gender,film的category,cinema的id","g.V().has('person', 'name', '吴国强').as('a').outE('watch').inV().hasLabel('film').as('b').inE('releases').outV().hasLabel('cinema').as('c').project('a_gender', 'b_category', 'c_id').by(select('a').values('gender')).by(select('b').values('id').math('_ + 64')).by(select('c').values('id'))"
"查询书的引用,或其引用的引用",g.V().hasLabel('book').outE('refers').inV().outE('refers').inV().dedup()
"以284,274作为请求点id, 以属性id作为相等条件,查找account XXD transfer的account,返回account repay的loan的weight除18的值 ","g.withSideEffect('p', [284, 274]).V().hasLabel('account').where(and(__.values('id').is(within('p')), __.has('name', 'XXD'))).outE('account_transfer_account').inV().hasLabel('account').outE('account_repay_loan').inV().hasLabel('loan').values('weight').math('_ / 18')"
" 按照升序排序，给定每个company的id、名称和价值，以id,name,value分组。","g.V().hasLabel('company').group().by(project('id', 'name', 'value').by('id').by('name').by('value')).by(values('scale').fold()).order(local).by(values, asc)"
"使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));返回prescription Prescription_185contain的medicine,被其他prescription contain的数量","g.V().has('prescription', 'name', 'Prescription_185').out('prescription_contain_medicine').in('prescription_contain_medicine').where(neq('Prescription_185')).dedup().count()"
"请帮我查找编辑张建国发布的书,以及撰写这些书的作家","g.V().hasLabel('publisher').has('name', '张建国').outE('publish').inV().hasLabel('book').as('b').inE('write').outV().hasLabel('author').as('c').select('b', 'c')"
"返回全部名为张国强的点的,字数小于等于618或类别等于科普的相关者,返回这些相关者的id,和边的f0,时间戳","g.V().has('name', '张国强').outE('relation').as('e').inV().as('b').where(or(__.has('wordCount', lte(618)), __.has('category', '科普'))).select('b', 'e').by('id').by(project('f0', 'timeStamp').by('f0').by('timeStamp'))"
"帮我查询与名为徐宏和李伟的点共同创造的,label为合并请求的节点","g.V().has('name', '徐宏').outE('creates').inV().hasLabel('pullRequest').as('b').inE('creates').outV().has('name', '李伟').select('b')"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));找出公司合作的大学,返回其源点的人数除702的值,以及目标点的价值除871的个数","g.V().hasLabel('company').as('a').outE('company_cooperate_university').as('e').inV().hasLabel('university').as('b').project('peopleNumber_div_702', 'count_value_div_871').by(select('a').values('peopleNumber').math('_ / 702')).by(select('b').values('value').math('_ / 871').count())"
"以(181,'male',90),(168,'famale',61)作为请求表数据,属性分别为height,gender,id, 源点的id等于输入表id,查询174个person黄强和赵月,共同的恋人","g.withSideEffect('p', [['height':181, 'gender':'male', 'id':90], ['height':168, 'gender':'famale', 'id':61]]).V().hasLabel('person').where(__.as('a').has('id', __.select('p').unfold().select('id')).has('name', '黄强').outE('person_lover_person').as('e').inV().as('b').inE('person_lover_person').as('e2').outV().as('c').hasLabel('person').has('name', '赵月')).select('b').limit(174)"
"给出person黄月拥有的账号,被其他账号转账的数量","g.V().has('person', 'name', '黄月').outE('own').inV().hasLabel('account').inE('transfer').outV().hasLabel('account').count()"
"用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询和person郑建聪有person_invest_company关系的公司,以及和公司Bilibili有company_apply_loan关系的贷款,将它们都返回","g.V().has('person', 'name', '郑建聪').as('a').outE('person_invest_company').inV().as('b').select('a').V().has('company', 'name', 'Bilibili').as('c').outE('company_apply_loan').inV().as('d').select('a', 'b', 'c', 'd')"
"给出全部源点星数对77取余大于等于62,目标点id在9到31之间且名字等于PR-264且id小于50,且标签等于拥有的边","g.V().has('stars', P.gte(62).and(P.inside(62, 77))).outE('has').as('e').inV().has('id', P.between(9, 31)).has('name', 'PR-264').has('id', P.lt(50)).select('e')"
找出孙宏和黄思琪共同的恋人节点列表。,"g.V().has('person', 'name', '孙宏').out('lover').as('b').in('lover').has('person', 'name', '黄思琪').select('b').values('name')"
"给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));返回所有源点满足条件address不是A座,目标点满足条件gender不等于male且height是162,height小于等于155,且label为department_has_doctor的边","g.E().hasLabel('department_has_doctor').where(outV().has('address', neq('A座'))).where(inV().has('gender', neq('male')).has('height', 162).has('height', lte(155)))"
"找出与名为悲惨世界和呐喊的点共同relates的,标签为book的节点","g.V().has('name', '悲惨世界').out('relates').hasLabel('book').as('b').in('relates').has('name', '呐喊').select('b')"
"输入表的列为id,name,value, 数据为(15,'历史',285),(16,'科幻',703), 以属性name作为相等条件,查找被电影绿巨人拥有的标签","g.withSideEffect('p', [['id':15, 'name':'历史', 'value':285], ['id':16, 'name':'科幻', 'value':703]]).V().hasLabel('tag').as('a').where(__.in('film_has_tag').hasLabel('film').has('name', '绿巨人')).where(__.select('a').values('name').is(within(__.select('p').unfold().values('name')))).select('a').project('a', 'b').by(__.identity()).by(__.in('film_has_tag').hasLabel('film').has('name', '绿巨人'))"
"请帮我查找所有名为李红的点的,名字不等于Comment_452的伙伴,返回这些伙伴的id,和边的f1,权重","g.V().has('name', '李红').outE('partner').as('e').inV().has('name', neq('Comment_452')).as('b').select('b', 'e').by('id').by(values('f1', 'weight').fold())"
找出与李思琪和何强都有投资关系的人。,"g.V().has('person', 'name', '李思琪').out('invest').as('b').in('invest').has('person', 'name', '何强').select('b')"
 找出label为goods且名称为矿泉水的点，并返回这些点的sellerNumber和name。,"g.V().hasLabel('goods').has('name', '矿泉水').project('sellerNumber', 'name').by('sellerNumber').by('name')"
 请帮我查找与ID为108的人有关的人，包括其恋人，以及与其有血缘关系的父母。,"g.V().has('person', 'id', '108').as('a').bothE().otherV().hasLabel('person').as('b').outE('lover').inV().as('c').select('b').outE('parent').inV().as('d').select('a', 'b', 'c', 'd')"
"请帮我找出与person周思琪存在creates关系,且与film少年足球存在belong关系的comment节点，返回这些comment的wordCount,id,createTime,及person周思琪的age,及film少年足球的value","g.V().has('person', 'name', '周思琪').as('a').outE('creates').inV().hasLabel('comment').as('b').inE('belong').outV().has('film', 'name', '少年足球').as('c').select('a', 'b', 'c').by('age').by(values('wordCount', 'id', 'createTime')).by('value')"
"请帮我查找person喜欢的person, 令person(b)的薪资的值等于喜欢person的person的id的数量, 再查找person认识的person","g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('person').as('b').sideEffect(__.sack(assign).by(__.in('likes').hasLabel('person').dedup().count()).sack()).as('b_salary').outE('knows').as('e3').inV().hasLabel('person').as('d').select('b_salary', 'd').by(__.sack()).by()"
"请帮我查找person黄梅belong的company, 令person的id等于company的peopleNumber减869, 返回person的name, company的name","g.V().hasLabel('person').has('name', '黄梅').as('a').outE('belong').as('e').inV().hasLabel('company').as('b').select('a', 'b').by('name').by('name').project('a_name', 'b_name').by(select('a')).by(select('b'))"
找到一个与赵轩和王雪都有联系的人。,"g.V().has('name', '赵轩').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '王雪').select('b').limit(1)"
"找出源点weight小于522或createTime是2032年08月17日,且lang不等于c,边类型是has,且满足条件srcId大于等于186的边,返回这些边的targetId的最小值减35减109减127.01乘142除f0的值","g.V().has('weight', lt(522)).or().has('createTime', '2032-08-17').has('lang', neq('c')).outE('has').has('srcId', gte(186)).project('result').by(values('targetId').min().math('_ - 35 - 109 - 127.01').math('_ * 142').math('_ / f0')).select('result')"
"帮我查询92个名为Post_447的点拥有的label为标签的节点,且其价值小于等于746,id在11到85之间","g.V().has('name', 'Post_447').out('has').hasLabel('tag').has('value', lte(746)).has('id', between(11, 85)).limit(92)"
"根据名字分组,计算价值加251的最小值",g.V().hasLabel('a').group().by('name').by(values('value').math('_ + 251').min())
帮我查询与company微软有belong关系的2跳的环,"g.V().has('company', 'name', '微软').as('a').bothE('belong').bothV().where(neq('a')).as('b').bothE('belong').bothV().where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
 何雪和何思琪共同的朋友,"g.V().has('person', 'name', '何雪').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '何思琪').select('b').limit(1)"
帮我查询全部与大学华中科技大学有关系的教师的名字,"g.V().has('university', 'name', '华中科技大学').bothE().otherV().hasLabel('teacher').values('name')"
"请帮我找出id小于785的department has的doctor的名称,以及这些doctor creates的prescription的名称","g.V().hasLabel('department').has('id', lt(785)).out('has').hasLabel('doctor').as('b').out('creates').hasLabel('prescription').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
返回175个与俄罗斯和越南都存在关系的公司或国家节点,"g.V().has('name', '俄罗斯').outE().inV().where(and(__.inE().outV().has('name', '越南'), or(hasLabel('company'), hasLabel('country')))).limit(175)"
"以(175,646,'美团'),(518,542,'腾讯'),(747,502,'蚂蚁集团')作为请求表数据,属性分别为value,peopleNumber,name, 以属性peopleNumber作为相等条件,查询57个贷款defaultName和defaultName1,共同的朋友","g.withSideEffect('p', [[175, 646, '美团'], [518, 542, '腾讯'], [747, 502, '蚂蚁集团']]).V().hasLabel('loan').as('a').where(and(__.select('a').values('peopleNumber').as('pn'), __.select('a').values('name').is('defaultName'), __.select('p').unfold().as('row').select('row').tail(2).is(__.select('pn')))).outE('friend').as('e').inV().as('b').inE('friend').as('e2').outV().as('c').hasLabel('loan').has('name', 'defaultName1').select('b').limit(57)"
"请帮我找出名为Bilibili的software,以及与其有关的software,并返回Bilibili的id和这些software的lang","g.V().hasLabel('software').has('name', 'Bilibili').as('a').bothE().as('e').otherV().hasLabel('software').as('b').select('a', 'b').by('id').by('lang')"
 找出Comment_117和Comment_482这两个标签为评论节点且它们的朋友节点共有的节点。,"g.V().has('comment', 'name', 'Comment_117').out('friend').as('b').in('friend').has('comment', 'name', 'Comment_482').select('b').values('name')"
请帮我查找person的3跳以内的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(2).where(loops().is(gt(0))).as('b').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"请帮我找出id为27的买家有关的卖家的伙伴, 再请帮我找出和卖家有关系的伙伴","g.V().has('buyer', 'id', 27).as('a').bothE().as('e').otherV().hasLabel('seller').as('b').bothE('partner').as('e2').otherV().as('c').select('b').bothE('partner').as('e3').otherV().as('d').select('a', 'b', 'c', 'd')"
返回与大学华中科技大学和四川大学都存在拥有关系的点,"g.V().has('university', 'name', '华中科技大学').out('has').as('b').in('has').has('university', 'name', '四川大学').select('b')"
"找出全部源点满足条件创建时间为2005年02月23日,名字不等于知乎,或名字是天涯论坛,目标点满足条件字数不等于510或语言为Japanese或字数在338到724之间,且类型为包含的边","g.V().or(and(has('createTime', '2005-02-23'), has('name', neq('知乎'))), has('name', '天涯论坛')).outE('contain').where(inV().or(has('wordCount', neq(510)), has('lang', 'Japanese'), has('wordCount', between(338, 724)))).dedup()"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找id为174的点的salary,gender","g.V().has('person', 'id', 174).project('salary', 'gender').by('salary').by('gender')"
"帮我查询作家撰写的书, 令书的id的值等于撰写书的作家的薪资的平均值, 再查找书关联的书","g.V().hasLabel('author').as('a').outE('write').inV().hasLabel('book').as('b').project('b_id', 'd').by(select('b').in('write').values('salary').mean()).by(select('b').out('relates').hasLabel('book').as('d').select('d'))"
"查找从forum中国军事论坛出发,经过类型是contain的边,走3跳到达的post点","g.V().has('forum', 'name', '中国军事论坛').repeat(out('contain')).times(3).hasLabel('post')"
获取所有与徐国强有likes关系的post，以及这些post关联的tag，返回这些tag的名称。,"g.V().has('name', '徐国强').out('likes').hasLabel('post').out('has').hasLabel('tag').values('name')"
 哪个账户被XXD转账了,"g.V().hasLabel('account').has('name', 'XXD').as('b').outE('transfer').as('e').inV().as('a').select('a', 'b')"
"根据类别分组,计算字数对字数取余的值",g.V().hasLabel('a').group().by('category').by(values('wordCount').as('wc').select('wc').math('_ % _'))
"返回id为199的卖家回答的买家, 并将买家有关的商品的价值的数量赋值给买家的身高, 接着查询买家的身高小于199的买家咨询的卖家","g.V().has('seller', 'id', 199).out('ask').hasLabel('buyer').as('b').sideEffect(select('b').outE().inV().hasLabel('goods').values('value').count().as('height')).where(select('b').values('height').is(lt(199))).out('consult').hasLabel('seller').as('d').select('b', 'd').by('height').by()"
 找出与名为孙红的人有相关者关系或相关者相关者关系的公司。,"g.V().hasLabel('person').has('name', '孙红').outE('relation').inV().hasLabel('company').simplePath().by(T.id).dedup().fold().as('a').V().hasLabel('person').has('name', '孙红').outE('relation').inV().outE('relation').inV().hasLabel('company').simplePath().by(T.id).dedup().fold().as('b').select('a', 'b').unfold().unfold().dedup()"
" 返回一个点（Post_471),标签为'帖子'，并返回该点的语言、ID和字数。","g.V().hasLabel('post').has('name', 'Post_471').project('a.lang', 'a.id', 'a.wordCount').by('lang').by('id').by('wordCount')"
返回前103个标签等于拥有的边,g.E().hasLabel('has').limit(103)
"请帮我找出person的三角的环,边类型是同事, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('colleague').inV().as('b').outE('colleague').inV().as('c').where(__.inE('colleague').outV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
"查找person以身高分组的年龄, 根据年龄从大到小排序","g.V().hasLabel('person').group().by('height').by(values('age').fold()).order(local).by(values, desc)"
"使用列为salary,height,gender, 数据为(9902,188,'famale')的子查询作为输入表, 源点的height等于输入表height,查找全部id为195的person关联的person,和以认识关系关联了这些person的其他person","g.withSideEffect('p', [['salary':9902, 'height':188, 'gender':'famale']]).V().hasLabel('person').has('height', __.select('p').unfold().select('height')).has('id', '195').bothE().otherV().hasLabel('person').as('b').inE('person_knows_person').otherV().hasLabel('person').as('c').select('b', 'c')"
"找出所有person的朋友,或其朋友的朋友",g.V().hasLabel('person').repeat(out('friend')).times(2).dedup()
请找出user陈国强和赵建聪共同创建的点,"g.V().has('user', 'name', '陈国强').outE('creates').inV().as('b').inE('creates').outV().has('user', 'name', '赵建聪').select('b')"
"请帮我找出喜欢person韩梅的person,和这些person支付的person","g.V().has('person', 'name', '韩梅').as('a').in('likes').as('b').out('pay').as('c').select('b', 'c')"
找到所有与名为李雪的医生有关联，或者与该医生关联的人所在的部门。,"g.V().has('doctor', 'name', '李雪').bothE('relation').otherV().hasLabel('department').dedup()"
请提供非陈强编辑出版的书籍及其关联书籍的名称。,"g.V().hasLabel('publisher').has('name', neq('陈强')).outE('publish').inV().hasLabel('book').as('b').outE('relates').inV().hasLabel('book').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 请帮我按照大学名称、价值、ID分组并按ID降序排序。,"g.V().hasLabel('university').group().by(values('value', 'name', 'id').fold()).by(values('id').fold()).order(local).by(keys, desc).select(values).unfold()"
请帮我找出所有与person有关联的person，以及这些person通过relates关系关联的其他person。,"g.V().has('person', 'id', '34').bothE().otherV().hasLabel('person').as('b').inE('relates').otherV().hasLabel('person').as('c').select('b', 'c')"
价值减价值的值,g.V().hasLabel('a').project('result').by(values('value').fold().math('_ - _'))
查询和person韩强之间有购买关系的软件,"g.V().hasLabel('person').has('name', '韩强').outE('buy').inV().hasLabel('software')"
"找出与买家赵建聪存在创造关系,且与商品键盘存在包含关系的订单节点，返回这些订单的价格,及买家赵建聪的性别,及商品键盘的价值","g.V().hasLabel('buyer').has('name', '赵建聪').as('a').outE('creates').inV().hasLabel('orders').as('b').inE('contain').outV().hasLabel('goods').has('name', '键盘').as('c').select('a', 'b', 'c').by('gender').by('price').by('value')"
查询以撰写关系关联了书白夜行的作家,"g.V().hasLabel('book').has('name', '白夜行').inE('write').outV().dedup()"
"返回所有person的朋友,或其朋友的朋友",g.V().hasLabel('person').outE('friend').inV().simplePath().by('id').repeat(outE('friend').inV().simplePath().by('id')).times(2).emit().dedup().values('name')
请帮我查找所有和作家Jack之间有认识关系的作家,"g.V().has('author', 'name', 'Jack').out('knows').hasLabel('author')"
"查询contain company蚂蚁集团belong的city,的country","g.V().has('company', 'name', '蚂蚁集团').out('belong').as('b').in('contain').as('c').select('b', 'c')"
找出49个与数据结构和高等数学都存在关系的学生或教师节点,"g.V().has('name', '数据结构').outE().inV().or(hasLabel('student'), hasLabel('teacher')).as('b').inE().outV().has('name', '高等数学').select('b').limit(49)"
返回前21个id不是66的贷款,"g.V().hasLabel('loan').has('id', neq(66)).limit(21)"
查询所有账户的朋友，或者他们朋友的朋友,"g.V().hasLabel('account').as('a').outE('friend').inV().hasLabel('account').range(1,2).as('b').select('b')"
返回与电影院大众影院有上映关系的1跳以内的环,"g.V().has('cinema', 'name', '大众影院').as('a').bothE('releases').bothV().where(neq('a')).simplePath().by(T.id).path().by(T.id).limit(1).project('a.id', 'b_id').by(limit(1).id()).by(tail(1).id())"
"请帮我查找源点gender等于male,目标点name为Tom,且标签为knows的边","g.V().has('gender', 'male').outE('knows').as('e').inV().has('name', 'Tom').select('e')"
"帮我查询账号的三角的环,边标签等于转账, 并返回这些点的id","g.V().hasLabel('account').as('a').outE('transfer').as('e').inV().as('b').outE('transfer').as('e2').inV().as('c').where(__.inE('transfer').where(__.outV().as('a'))).select('a', 'b', 'c').by('id').by('id').by('id')"
请帮我查找名为徐若涵的点likes的post,"g.V().has('name', '徐若涵').outE('likes').inV().hasLabel('post')"
查找前7个name不等于孙思琪或id大于2的person,"g.V().hasLabel('person').or(has('name', neq('孙思琪')), has('id', gt(2))).limit(7)"
帮我找出与帖子 Post_351 和 Post_187 都有关系的点,"g.V().hasLabel('post').has('name', 'Post_351').outE('has').inV().as('b').inE('has').outV().hasLabel('post').has('name', 'Post_187').select('b')"
"返回和名为杜梅的person有parent关系,或有parent的parent关系的person","g.V().has('person', 'name', '杜梅').repeat(out('parent')).times(2).emit().hasLabel('person').dedup()"
" 返回与何建国存在购买关系的所有软件的ID,这些软件之间存在使用关系。","g.V().has('name', '何建国').out('buy').hasLabel('software').out('uses').hasLabel('software').values('id')"
 返回吴国强发布的所有帖子和其他相关信息。,"g.V().hasLabel('user').has('name', '吴国强').as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a').outE('publish').as('e2').inV().hasLabel('post').as('c').select('a', 'b', 'c')"
 Prescription_435包含药物。,"g.V().hasLabel('prescription').has('name', 'Prescription_435').outE('contain').inV().hasLabel('medicine').as('b').select('b').by().as('a').select('a', 'b')"
"请帮我找出软件以id,是否开源,价值分组的语言, 根据语言从小到大排序","g.V().hasLabel('software').group().by(values('id', 'openSource', 'value').fold()).by(values('lang').fold()).order(local).by(keys, asc)"
"查找用户马宏发布的帖子, 令用户的语言等于帖子的value的最大值加价值对64取余,令用户的id等于用户的名字,令帖子的性别等于用户的id, 返回用户的身高, 帖子的id","g.V().has('user', 'name', '马宏').as('a').outE('publish').inV().hasLabel('post').as('b').select('a', 'b').by(project('height', 'id').by(values('height')).by(values('name'))).by(project('id', 'gender').by(values('id')).by(select('a').values('name'))).select(values).unfold().select('height', 'id').by(select('a').select('height')).by(select('b').select('id'))"
"输入请求点id的列表34,390,312,162, 以属性id作为相等条件,返回全部与person陈月有关系的person的身高","g.inject([34, 390, 312, 162]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('name', '陈月').bothE().otherV().hasLabel('person').values('height')"
"找出名为Tugraph的repository,以及与其有关的pullRequest,并返回Tugraph的stars和这些pullRequest的name","g.V().hasLabel('repository').has('name', 'Tugraph').as('a').bothE().otherV().hasLabel('pullRequest').as('b').select('a', 'b').by('stars').by('name')"
"给定图的schema如下:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出公司的3度以内的环","g.V().hasLabel('company').as('a').repeat(both().simplePath()).times(2).emit().where(loops().is(gt(0))).where(eq('a')).dedup().project('a.id', 'b_id').by(select('a').id()).by(id())"
请帮我查找与医生赵国强有属于关系的1跳的环,"g.V().has('doctor', 'name', '赵国强').as('a').bothE('belong').otherV().where(eq('a')).select('a').project('a.id', 'b_id').by(values('id')).by(select('a').values('id'))"
"给出71个和标签等于repository的点有has关系的user,并且和这些user有creates关系的issue",g.V().hasLabel('repository').as('a').out('has').hasLabel('user').as('b').out('creates').hasLabel('issue').as('c').select('c').limit(71)
"查找读者赵建国喜欢的书, 令书的字数等于书的创建时间, 返回读者的薪资, 书的类别","g.V().hasLabel('reader').has('name', '赵建国').as('a').outE('likes').inV().hasLabel('book').as('b').project('a_salary', 'b_category').by(select('a').values('salary')).by(select('b').values('category'))"
 查询department为呼吸科且doctor为杜红的medicine节点，返回它们的price和name。,"g.V().has('department', 'name', '呼吸科').outE().inV().hasLabel('medicine').as('b').inE().outV().has('doctor', 'name', '杜红').select('b').values('price', 'name')"
查找所有与部门土木学院有关系的教师的身高,"g.V().has('department', 'name', '土木学院').bothE().otherV().hasLabel('teacher').values('height')"
查询所有label为person的点，并按照年龄升序排序。,"g.V().hasLabel('person').order().by('age', asc)"
"找出和订单Order_457有关的买家,称为X,再找出和这个X有关联的其他卖家,以及和X有关联的商品","g.V().has('orders', 'name', 'Order_457').as('a').bothE().otherV().hasLabel('buyer').as('b').bothE().otherV().hasLabel('seller').as('c').select('b').bothE().otherV().hasLabel('goods').as('d').select('a', 'b', 'c', 'd')"
"请帮我查找和类型为user的点有creates关系的pullRequest,且和这些pullRequest有belong关系的repository,且和这些repository有has关系的user",g.V().hasLabel('user').as('a').out('creates').hasLabel('pullRequest').as('b').out('belong').hasLabel('repository').as('c').out('has').hasLabel('user').as('d').select('d')
"输入请求点id的列表692,605, 源点的id等于输入表id,查找买家的三角的环,边label为buyer_consult_seller, 并返回这些点的id","g.inject([692, 605]).as('p').unfold().as('id').V().hasLabel('buyer').has('id', __.select('id')).as('a').outE('buyer_consult_seller').inV().as('b').outE('buyer_consult_seller').inV().as('c').where(__.outE('buyer_consult_seller').where(__.inV().as('a'))).select('a', 'b', 'c').by('id').by('id').by('id')"
帮我查询与company蚂蚁集团和滴滴都存在belong关系的点,"g.V().has('company', 'name', '蚂蚁集团').out('belong').as('b').in('belong').has('company', 'name', '滴滴').select('b')"
"返回person张科关联的person,被其他person关联的数量","g.V().has('person', 'name', '张科').outE('relates').inV().hasLabel('person').inE('relates').outV().hasLabel('person').count()"
"请帮我找出与用户黄建聪存在喜欢关系,且与用户周轩存在拥有关系的仓库节点，返回这些仓库的创建时间,id,语言,及用户黄建聪的年龄,及用户周轩的性别","g.V().has('user', 'name', '黄建聪').as('a').out('likes').as('b').in('has').has('user', 'name', '周轩').as('c').select('a', 'b', 'c').by('age').by(values('createTime', 'id', 'lang')).by('gender')"
查找全部与用户郑宏有关系的用户的年龄,"g.V().has('user', 'name', '郑宏').bothE().otherV().hasLabel('user').values('age')"
"查找name不等于电子科技大学的university has的department的名称,以及这些department has的teacher的名称","g.V().hasLabel('university').has('name', neq('电子科技大学')).out('has').hasLabel('department').as('b').out('has').hasLabel('teacher').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找源点name是蚂蚁集团,边标签为company_belong_city,且满足条件srcId为空的边,返回这些边的srcId减181的值","g.V().has('company', 'name', '蚂蚁集团').outE('company_belong_city').has('srcId', null).project('result').by(values('srcId').math('_ - 181'))"
"返回和作家有关联的书节点,并根据其名字,创建时间分组,返回名字,创建时间,以及id加98的个数",g.V().hasLabel('author').as('a').outE('write').inV().hasLabel('book').as('b').select('b').by('name').by('createTime').by(values('id').math('_ + 98').count()).group().by(select('b').by('name').by('createTime')).by(select('b').by(values('id').math('_ + 98').count()).fold())
从author吴建国出发，通过knows类型的边，走3步到达的author节点。,"g.V().has('author', 'name', '吴建国').repeat(out('knows')).times(3).hasLabel('author')"
 请帮我查询杜思琪支付过的人中，有哪些人认识她。,"g.V().hasLabel('person').has('name', '杜思琪').out('pay').as('b').in('knows').hasLabel('person').as('c').select('c')"
"查找和课程点有属于关系的部门节点,且边满足条件f1不是true,目标部门节点满足条件大小小于55",g.V().hasLabel('course').as('a').outE('belong').as('e').inV().hasLabel('department').as('b').where(neq('true')).by('f1').where(lt(55)).by('size').select('b')
"找出全部名为浙江大学的点的,规格为medium,id在41到76之间的朋友,返回这些朋友的价值,和边的源点id,f0,权重","g.V().has('name', '浙江大学').outE('friend').as('e').inV().has('scale', 'medium').has('id', between(41, 76)).as('b').select('b', 'e').by('value').by(values('srcId', 'f0', 'weight'))"
"请帮我找出126个性别不等于male的person,根据身高从小到大排列","g.V().hasLabel('person').has('gender', neq('male')).order().by('height', asc).limit(126)"
id除65的值,g.V().hasLabel('a').project('result').by(values('id').math('_ / 65'))
 请帮我查找所有与名为'孙强'的人有相关者关系，或者与这些相关者相关者关系的评论。,"g.V().has('person', 'name', '孙强').outE('relation').inV().hasLabel('comment').dedup()"
"给出135个名为何梅的点认识的label为person的节点,且节点id不是4且id不是50","g.V().has('name', '何梅').out('knows').hasLabel('person').has('id', P.neq(4)).has('id', P.neq(50)).limit(135)"
"以703,785,796作为请求点id, 源点的id等于输入表id,返回165个与Post_438和Post_271都存在关系的person节点","g.withSideEffect('p', [703, 785, 796]).V().where(__.in('p').is(P.eq('p'))).has('name', 'Post_438').outE().inV().hasLabel('person').where(__.inE().outV().has('name', 'Post_271')).limit(165)"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出与person孙思思和李国强都存在person_likes_person关系的点","g.V().has('person', 'name', '孙思思').outE('person_likes_person').inV().as('b').inE('person_likes_person').outV().has('person', 'name', '李国强').select('b')"
"查询所有和医生杜若涵有关系的药品或处方或病人,返回这些点的创建时间","g.V().hasLabel('doctor').has('name', '杜若涵').bothE().otherV().hasLabel(within('medicine', 'prescription', 'patient')).values('createTime')"
 返回与buyer ID为194相关的买家的合作伙伴，再返回所有与买家有关系的合作伙伴。,"g.V().has('buyer', 'id', '194').as('a').bothE().otherV().hasLabel('buyer').as('b').both().hasLabel('buyer').as('b_dup').select('b').outE('partner').otherV().as('c').select('b').outE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
请帮我找出全部与论坛中国诗词论坛有关系的帖子的价值,"g.V().has('forum', 'name', '中国诗词论坛').bothE().otherV().hasLabel('post').values('value')"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部名为陈建聪的点的,id大于等于45的相关者,返回这些相关者的薪资,和边的f0,权重","g.V().has('person', 'name', '陈建聪').outE('relation').as('e').inV().has('id', gte(45)).project('b_salary', 'e_f0', 'e_weight').by(values('salary')).by(select('e').values('f0')).by(select('e').values('weight'))"
 找杜科的合作伙伴的朋友的朋友,"g.V().has('person', 'name', '杜科').out('partner').out('friend').out('friend')"
 王国强支付的人数，被他喜欢的人数。,"g.V().has('person', 'name', '王国强').outE('pay').inV().hasLabel('person').inE('likes').outV().hasLabel('person').count()"
请帮我查找id为74的person的朋友，以及与person有关的朋友。,"g.V().has('person', 'id', '74').as('a').bothE().otherV().hasLabel('person').as('b').bothE().hasLabel('friend').otherV().as('c').select('b').bothE().hasLabel('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
 找出与名为孙红的人有社交关系的人或账号。,"g.V().hasLabel('person').has('name', '孙红').outE('friend').inV().hasLabel('account').range(1, 2)"
"给出和大学浙江大学有关的城市,再给出和浙江大学属于的其他城市,返回它们","g.V().has('university', 'name', '浙江大学').as('a').bothE().as('e').otherV().hasLabel('city').as('b').select('a').bothE('belong').as('e2').otherV().hasLabel('city').as('c').select('a', 'b', 'c')"
"返回所有person的家人,或其家人的家人",g.V().hasLabel('person').outE('family').inV().hasLabel('person').outE('family').inV().hasLabel('person').dedup()
"输入请求点id的列表450,908,425, 以属性id作为相等条件,给出全部和book java程序设计有关系的publisher节点,返回这些点的height,age,gender","g.inject([450, 908, 425]).as('p').V().hasLabel('book').as('a').where('a', eq('p')).by('id').by().has('name', 'java程序设计').bothE().as('e').otherV().hasLabel('publisher').as('b').select('b').project('height', 'age', 'gender').by(values('height')).by(values('age')).by(values('gender'))"
"查询名为百度贴吧的,value小于505的relation,返回这些relation的createTime,和边的f1","g.V().has('name', '百度贴吧').outE('relation').as('e').inV().has('value', lt(505)).project('b.createTime', 'e.f1').by(values('createTime')).by(select('e').values('f1'))"
"查询peopleNumber为空,value大于643的company belong的city的名称,以及这些city contain的university的名称","g.V().hasLabel('company').has('peopleNumber', null).has('value', gt(643)).out('belong').hasLabel('city').as('b').out('contain').hasLabel('university').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回和订单Order_358有关的订单,称为X,再返回和这个X有关联的其他商品,以及和X有关联的卖家","g.V().hasLabel('orders').has('name', 'Order_358').as('a').bothE().otherV().hasLabel('orders').as('b').bothE().otherV().hasLabel('goods').as('c').select('b').bothE().otherV().hasLabel('seller').as('d').select('a', 'b', 'c', 'd')"
"返回和账号BIN有关的账号,再返回和BIN还款的其他贷款,返回它们","g.V().hasLabel('account').has('name', 'BIN').as('a').bothE().otherV().hasLabel('account').as('b').select('a').outE('repay').inV().hasLabel('loan').as('c').select('a', 'b', 'c')"
id对67取余的值,g.V().has('id').project('mod').by(values('id').math('_ % 67'))
"用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出全部源点标签等于user,边标签等于user_likes_post的边,返回这些边的targetId减32的最小值,和weight除170.78的求和值","g.V().hasLabel('user').outE('user_likes_post').project('min_targetId_minus_32', 'sum_weight_div_170_78').by(values('targetId').math('_ - 32').min()).by(values('weight').math('_ / 170.78').sum())"
"请帮我找出所有id为62的buyer关联的goods,和以contain关系关联了这些goods的其他orders","g.V().has('buyer', 'id', 62).bothE().otherV().hasLabel('goods').as('b').inE('contain').otherV().hasLabel('orders').as('c').select('b', 'c')"
"帮我查询id为64的software有关的person的friend, 再帮我查询和person有关系的friend","g.V().has('software', 'id', 64).as('a').bothE().as('e').otherV().hasLabel('person').as('b').bothE('friend').as('e2').otherV().as('c').select('b').bothE('friend').as('e3').otherV().as('d').select('a', 'b', 'c', 'd')"
 找出一个人所有的朋友，或一个人朋友的朋友。,g.V().hasLabel('person').outE('friend').inV().hasLabel('person').outE('friend').inV().hasLabel('person').dedup()
"用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));找出和电影绿巨人有2跳关系的电影","g.V().has('film', 'name', '绿巨人').repeat(bothE().otherV().simplePath()).times(2).hasLabel('film').dedup()"
 找名叫赵建聪的医生。,"g.V().hasLabel('doctor').has('name', '赵建聪')"
"返回赵月的点认识的person,然后返回赵月被认识的person,一起返回","g.V().has('name', '赵月').as('a').out('knows').as('b').select('a').in('knows').as('c').select('a', 'b', 'c')"
 请帮我找出与Account Light和TheShy之间存在转会关系的球员。,"g.V().hasLabel('account').has('name', 'Light').outE('transfer').inV().as('b').inE('transfer').outV().hasLabel('account').has('name', 'TheShy').select('b')"
找出与郑宏和吴思思都有关联的订单节点，返回它们的名称、价值和ID。,"g.V().has('buyer', 'name', '郑宏').outE().inV().hasLabel('orders').as('b').inE().outV().has('buyer', 'name', '吴思思').select('b').values('name', 'value', 'id')"
请帮我找出名为韩红的点喜欢的仓库,"g.V().has('name', '韩红').outE('likes').inV().hasLabel('repository')"
 请问您需要什么帮助？,"g.V().has('country', 'name', '俄罗斯').as('a').out('contain').as('b').select('a').V().has('company', 'name', '谷歌').as('c').out('cooperate').as('d').select('a', 'b', 'c', 'd')"
"请帮我查找被person认识数量大于163的person,记为relationCount,再查询这些person认识的person","g.V().hasLabel('person').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('knows').hasLabel('person').id().max()).where(__.select('relationCount').is(gt(163))).select('a').out('knows').hasLabel('person').dedup()"
"帮我查询所有person以名字分组的名字, 根据名字升序排序","g.V().hasLabel('person').values('name').group().by(identity()).order().by(keys, asc).select(keys)"
 查询与杭州存在归属关系的国家，以及这些国家中包含杭州的城市，并返回这些城市的名称。,"g.V().has('name', '杭州').outE('belong').inV().hasLabel('country').outE('contain').inV().hasLabel('city').values('name')"
给出107个与美团和蚂蚁集团都存在关系的公司或账号节点,"g.V().has('name', '美团').outE().as('e').inV().or(hasLabel('company'), hasLabel('account')).as('b').inE().as('e2').outV().has('name', '蚂蚁集团').select('b').limit(107)"
"用如下schema的图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));找出所有处方以权重,id,名字分组的创建时间, 根据创建时间降序排序","g.V().hasLabel('prescription').group().by(project('weight', 'id', 'name').by(values('weight')).by(values('id')).by(values('name'))).by(values('createTime')).unfold().order().by(select(values), desc)"
"找出和部门有关联的教师节点,并根据其性别,名字,年龄分组,返回性别,名字,年龄,以及id减id的值","g.V().hasLabel('department').bothE('has').otherV().hasLabel('teacher').group().by(values('gender', 'name', 'age')).by(__.project('gender', 'name', 'age', 'id_minus_id').by(__.select('gender')).by(__.select('name')).by(__.select('age')).by(__.select('id').math('_ - _'))).select(values).unfold()"
提供复仇者联盟电影的标签和发行电影院信息。,"g.V().has('name', '复仇者联盟').as('a').outE('has').inV().hasLabel('tag').as('b').select('a').inE('releases').outV().hasLabel('cinema').as('c').select('a', 'b', 'c')"
帮我找陈强这个人的点，他有哪些属性，如身高、年龄,"g.V().hasLabel('person').has('name', '陈强').project('height', 'age').by('height').by('age')"
"帮我查询id为172的公司有关的person的朋友, 再帮我查询和person有关系的伙伴","g.V().has('company', 'id', 172).as('a').bothE().otherV().hasLabel('person').as('b').both().hasLabel('person').as('c').select('b').bothE('partner').otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
 请找出中国军事论坛和天涯论坛的共同关系。,"g.V().has('forum', 'name', '中国军事论坛').outE('relation').inV().as('b').inE('relation').outV().has('forum', 'name', '天涯论坛').select('b').limit(99)"
帮我查询事项ISSUE-149属于的仓库节点拥有的合并请求,"g.V().hasLabel('issue').has('name', 'ISSUE-149').out('belong').hasLabel('repository').out('has').hasLabel('pullRequest')"
"输入请求点id的列表34,426, 以属性id作为相等条件,请帮我找出孤城的点knows的book,然后请帮我找出孤城被publish的publisher,一起返回","g.inject([34, 426]).as('p').select('p').unfold().as('id').V().has('id', __.select('id')).has('name', '孤城').as('a').outE('knows').inV().hasLabel('book').as('b').select('a').inE('publisher_publish_book').outV().hasLabel('publisher').as('c').select('a', 'b', 'c')"
返回所有label为company或country或university的点,"g.V().hasLabel('company', 'country', 'university')"
"以('Prescription_438',358,1999-09-28),('Prescription_459',225,2004-12-23),('Prescription_258',287,2007-05-06),('Prescription_151',460,2012-10-11)作为请求表数据,属性分别为name,weight,createTime, 以属性name作为相等条件,查找和doctor有关联的prescription节点,并根据其name,createTime,weight分组,返回name,createTime,weight,以及id减14的值","g.inject([['Prescription_438', 358, '1999-09-28'], ['Prescription_459', 225, '2004-12-23'], ['Prescription_258', 287, '2007-05-06'], ['Prescription_151', 460, '2012-10-11']]).as('p').select('p').unfold().as('row').select('row').project('name', 'weight', 'createTime').by(limit(local, 1)).by(limit(local, 2)).by(limit(local, 3)).as('p_data').V().hasLabel('doctor').as('a').where(eq('a')).by('name').by(select('p_data').select('name')).bothE('doctor_creates_prescription').otherV().hasLabel('prescription').as('b').select('b').project('name', 'createTime', 'weight', 'id_minus_14').by(values('name')).by(values('createTime')).by(values('weight')).by(math('id - 14')).group().by(project('name', 'createTime', 'weight').by(values('name')).by(values('createTime')).by(values('weight'))).by(fold())"
"查询和person徐轩有购买关系的软件,再查询以提交关系关联了徐轩的软件","g.V().has('person', 'name', '徐轩').as('a').out('buy').as('b').select('a').in('commits').as('c').select('a', 'b', 'c')"
"返回和company微软有关的city,称为X,再返回和这个X有关联的其他university,以及和X有关联的company","g.V().has('company', 'name', '微软').as('a').bothE().otherV().hasLabel('city').as('b').bothE().otherV().hasLabel('university').as('c').select('b').bothE().otherV().hasLabel('company').as('d').select('a', 'b', 'c', 'd')"
"查找与person黄轩有关,且与tag悬疑有关系的film节点","g.V().has('person', 'name', '黄轩').bothE('watch').bothV().hasLabel('film').bothE('has').bothV().has('tag', 'name', '悬疑').select('film')"
 查找薪资为3951或更高且ID大于等于65的人的姓名、他们所属的公司名称。,"g.V().hasLabel('person').has('salary', 3951).has('id', gte(65)).outE('knows').inV().hasLabel('person').as('b').outE('belong').inV().hasLabel('company').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我查找名字不是杜若涵或年龄不为空的作家撰写的书的名称,以及这些书 认识的书的名称","g.V().hasLabel('author').or(has('name', neq('杜若涵')), has('age')).outE('write').inV().hasLabel('book').as('b').outE('knows').inV().hasLabel('book').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"查询和seller韩宏有关的seller,再查询和韩宏ask的其他buyer,返回它们","g.V().has('seller', 'name', '韩宏').as('a').bothE().otherV().hasLabel('seller').as('b').select('a').bothE('ask').otherV().hasLabel('buyer').as('c').select('a', 'b', 'c')"
帮我查询以认识关系关联了person周月的person,"g.V().hasLabel('person').has('name', '周月').in('knows').hasLabel('person')"
"输入表的列为weight,f0,srcId, 数据为(107.16,847,172),(103.60,512,68), 源点的weight等于输入表weight,查询86个student马轩和徐雪,共同的partner","g.withSideEffect('p', [[107.16,847,172],[103.60,512,68]]).V().hasLabel('student').as('a').where(and(__.select('a').values('weight').is(within(__.select('p').unfold().limit(local, 1))), __.select('a').has('name', '马轩'))).outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().as('c').hasLabel('student').has('name', '徐雪').select('b').limit(86)"
给出与account Zeus和BIN都存在repay关系的点,"g.V().hasLabel('account').has('name', 'Zeus').as('a').outE('repay').as('e').inV().as('b').inE('repay').as('e2').outV().hasLabel('account').has('name', 'BIN').as('c').select('b').dedup()"
"找出作家撰写的书,返回其源点的身高乘174的数量,以及目标点的字数乘13的值","g.V().hasLabel('author').as('a').outE('write').as('e').inV().hasLabel('book').as('b').project('count_a_height_times_174', 'b_wordCount_times_13').by(__.select('a').values('height').math('_ * 174').count()).by(__.select('b').values('wordCount').math('_ * 13'))"
"以'Ee', 10作为输入调用pageRank函数,返回id, value","g.call('pageRank').with('edges', 'Ee').with('maxIterations', 10).select('id', 'value')"
 请帮我查找与李建国和Alan有关的评论。,"g.V().has('person', 'name', '李建国').as('a').outE('creates').as('e').inV().hasLabel('comment').as('b').select('a').V().has('person', 'name', 'Alan').as('c').outE('creates').as('e2').inV().hasLabel('comment').as('d').select('a', 'b', 'c', 'd')"
"以(9161,187,'周建国'),(7402,198,'黄国强'),(4723,194,'徐建国')作为请求表数据,属性分别为salary,height,name, 源点的salary等于输入表salary,查找卖家陈雪拥有的商品,被其他卖家拥有的数量","g.withSideEffect('p', [[9161, 187, '周建国'], [7402, 198, '黄国强'], [4723, 194, '徐建国']]).V().hasLabel('seller').has('name', '陈雪').as('a').out('seller_has_goods').as('b').in('seller_has_goods').as('c').where('c', neq('a')).where(__.select('a').values('salary').is(within(__.select('p').unfold().limit(1)))).select('c').dedup().count()"
 找出悬疑标签。,"g.V().hasLabel('tag').has('name', '悬疑')"
"找出和person孙轩有关的person,称为X,再找出和这个X有关联的其他loan,以及和X有关联的loan","g.V().has('person', 'name', '孙轩').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('loan').as('c').select('b').bothE().otherV().hasLabel('loan').as('d').select('a', 'b', 'c', 'd')"
 帮我查询马伟申请的贷款。,"g.V().hasLabel('person').has('name', '马伟').outE('apply').inV().hasLabel('loan').as('b').select('b').by(identity()).as('a').select('a', 'b')"
查询所有和person孙思琪之间有朋友关系的person,"g.V().hasLabel('person').has('name', '孙思琪').outE('friend').inV().hasLabel('person')"
请帮我查找和帖子Post_271之间有拥有关系的标签,"g.V().hasLabel('post').has('name', 'Post_271').out('has').hasLabel('tag')"
"请帮我找出源点名字是Jack,边类型是支付,且时间戳等于2002年10月02日的边,返回这些边的目标点id乘174的值","g.V().has('name', 'Jack').outE('pay').has('timeStamp', '2002-10-02').project('result').by(values('targetId').math('_ * 174'))"
"使用列为age,height,salary, 数据为(54,190,1840),(46,170,9259),(36,162,1224),(36,156,3422)的子查询作为输入表, 源点的salary等于输入表salary,查询id为118的点的name,value,id","g.withSideEffect('p', [[54, 190, 1840], [46, 170, 9259], [36, 162, 1224], [36, 156, 3422]]).V().has('id', '118').as('a').where(__.select('a').values('salary').as('s').select('p').unfold().where(__.select('s').is(eq(__.tail(local, 1))))).select('a').project('a.name', 'a.value', 'a.id').by(__.values('name')).by(__.values('value')).by(__.values('id'))"
帮我查询作家周建聪认识的作家节点认识的作家,"g.V().has('author', 'name', '周建聪').out('knows').out('knows').dedup()"
"返回和名为呼吸科的部门有朋友关系,或有朋友的朋友关系的医生","g.V().has('department', 'name', '呼吸科').bothE('friend').otherV().range(1, 2).hasLabel('doctor').dedup()"
查找47个与耳鼻喉科和内科都存在关系的doctor节点,"g.V().has('name', '耳鼻喉科').outE().inV().hasLabel('doctor').as('b').inE().outV().has('name', '内科').select('b').limit(47)"
"返回全部Prescription_133的点包含的药品,然后返回Prescription_133被创造的医生,一起返回","g.V().has('name', 'Prescription_133').as('a').out('contain').hasLabel('medicine').as('b').select('a').in('creates').hasLabel('doctor').as('c').select('a', 'b', 'c')"
"请帮我查找person王雪关联的person,被其他person认识的数量","g.V().has('person', 'name', '王雪').outE('relates').inV().hasLabel('person').inE('knows').outV().hasLabel('person').count()"
"输入请求点id的列表262,647,886,267, 以属性id作为相等条件,查找前99个标签等于person_family_person的边","g.inject([262, 647, 886, 267]).unfold().as('p').V().has('id', __.as('p')).outE('person_family_person').limit(99)"
 给出马红和吴强，他们两个是用户标签相同相关者节点的人。,"g.V().has('user', 'name', '马红').outE('relation').inV().as('b').inE('relation').outV().has('user', 'name', '吴强').select('b').values('name')"
请帮我找出全部名为徐若涵的节点喜欢的评论或标签,"g.V().has('name', '徐若涵').outE('likes').inV().hasLabel(within('comment', 'tag')).dedup()"
查询何红发布的帖子,"g.V().hasLabel('user').has('name', '何红').outE('publish').inV().hasLabel('post').as('b').select('b').by(__.inE('publish').outV()).as('a').select('a', 'b')"
"查询城市的三角的环,边类型是包含, 并返回这些点的id","g.V().hasLabel('city').as('a').outE('contain').inV().as('b').outE('contain').inV().as('c').where(__.as('c').outE('contain').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"返回名为PR-65的合并请求,以及与其有关的仓库,并返回PR-65的创建时间和这些仓库的名字","g.V().hasLabel('pullRequest').has('name', 'PR-65').as('a').bothE().as('e').otherV().hasLabel('repository').as('b').select('a', 'b').by('createTime').by('name')"
" 请帮我查找所有用户源点标签为user,边标签为creates的边，并返回这些边的srcId乘以srcId对733取余加143.40的值，以及targetId对169取余加29的值。","g.V().hasLabel('user').outE('creates').project('expr1', 'expr2').by(__.values('srcId').math('_ * _ % 733 + 143.40')).by(__.values('targetId').math('_ % 169 + 29'))"
 查询与名为马若涵的人有配偶关系或配偶关系的贷款。,"g.V().has('person', 'name', '马若涵').outE('partner').inV().hasLabel('loan').range(1, 2).values('name')"
找出所有label为电影院的点，按照id升序排序。,"g.V().hasLabel('cinema').order().by('id', asc)"
"找出与名为Post_401和Post_258的点共同拥有的,类型是标签的节点","g.V().has('name', 'Post_401').out('has').hasLabel('tag').as('b').in('has').has('name', 'Post_258').select('b')"
"返回买家周雪创造的订单,以及取消这些订单的买家","g.V().hasLabel('buyer').has('name', '周雪').outE('creates').inV().hasLabel('orders').as('b').inE('cancel').outV().hasLabel('buyer').as('c').select('b', 'c')"
"给出名为ISSUE-434的事项,以及与其有关的合并请求,并返回ISSUE-434的权重和这些合并请求的创建时间","g.V().has('issue', 'name', 'ISSUE-434').as('a').bothE().as('e').otherV().hasLabel('pullRequest').as('b').select('a', 'b').by('weight').by('createTime')"
"给出全部源点类型是person,边类型是likes的边,返回这些边的f0对f0取余的最小值,和srcId加188的值","g.V().hasLabel('person').outE('likes').project('min_mod', 'srcId_plus').by(math('_ / _').by('f0').by('f0').min()).by(values('srcId').math('_ + 188'))"
"帮我查询标签为person的点,返回157个",g.V().hasLabel('person').limit(157)
"给出名为张科的person,以及与其有关的person,并返回张科的性别和这些person的身高","g.V().has('person', 'name', '张科').as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a', 'b').by(values('gender')).by(values('height'))"
"根据age,name分组,计算age减68除199的最小值","g.V().hasLabel('a').group().by(values('age', 'name')).by(values('age').math('(_ - 68) / 199').min())"
"输入请求点id的列表949,179,327,170, 源点的id等于输入表id,返回与评论Comment_406存在comment_belong_film关系,且与标签喜剧存在film_has_tag关系的电影节点，返回这些电影的类别,价值,名字,及评论Comment_406的字数,及标签喜剧的名字","g.inject([949, 179, 327, 170]).unfold().as('p').V().hasLabel('comment').has('id', __.select('p')).has('name', 'Comment_406').as('a').outE('comment_belong_film').inV().hasLabel('film').as('b').inE('film_has_tag').outV().hasLabel('tag').has('name', '喜剧').as('c').select('a', 'b', 'c').by('wordCount').by(__.project('category', 'value', 'name').by('category').by('value').by('name')).by('name')"
"用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出所有源点满足条件id大于302,目标点满足条件名字不是悬疑或名字是文艺,且label为post_has_tag的边","g.E().hasLabel('post_has_tag').where(and(outV().has('id', gt(302)), inV().has('name', neq('悬疑')).or().inV().has('name', eq('文艺'))))"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部与person吴红有关系的person的salary","g.V().has('person', 'name', '吴红').bothE().otherV().hasLabel('person').values('salary')"
请帮我找出167位年龄在8到29岁之间，按照身高从低到高排序的用户。,"g.V().hasLabel('user').has('age', between(8, 29)).order().by('height', asc).limit(167)"
 请帮我查找杭州的公司，并返回它们与哪些大学有合作，包括等级、ID和名称。,"g.V().has('city', 'name', '杭州').out('contain').hasLabel('company').out('cooperate').hasLabel('university').project('level', 'id', 'name').by(values('level')).by(values('id')).by(values('name'))"
请帮我查找与卖家张红和孙伟都存在回答关系的点,"g.V().has('seller', 'name', '张红').outE('ask').inV().as('b').inE('ask').outV().has('seller', 'name', '孙伟').select('b')"
"查找名为Kafka和Flink的,label为仓库的点公共的伙伴节点的名单","g.V().hasLabel('repository').has('name', 'Kafka').as('a').outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().hasLabel('repository').has('name', 'Flink').as('c').select('b').values('name')"
"请帮我查找用户赵科喜欢的仓库,以及属于这些仓库的合并请求","g.V().hasLabel('user').has('name', '赵科').outE('likes').inV().hasLabel('repository').as('b').inE('belong').outV().hasLabel('pullRequest').as('c').select('b', 'c')"
"给出名为王红和黄科的,类型是user的点公共的partner节点的名单","g.V().has('user', 'name', '王红').out('partner').as('b').in('partner').has('user', 'name', '黄科').select('b').values('name')"
"请帮我找出类型为用户的点,返回135个",g.V().hasLabel('user').limit(135)
查询前26个标签为likes的边,g.E().hasLabel('likes').limit(26)
"请帮我找出全部名为Bilibili的,gender为famale且height大于等于189的relation,返回这些relation的salary,和边的targetId,f0,f1","g.V().has('name', 'Bilibili').outE('relation').as('e').inV().has('gender', 'famale').has('height', gte(189)).project('salary', 'targetId', 'f0', 'f1').by(values('salary')).by(select('e').values('targetId')).by(select('e').values('f0')).by(select('e').values('f1'))"
"请帮我查找29个person张建国和黄宏,共同的恋人","g.V().has('person', 'name', '张建国').out('lover').as('b').in('lover').has('person', 'name', '黄宏').select('b').limit(29)"
"输入表的列为salary,height,id, 数据为(9475,156,67),(8325,161,58),(9413,199,18),(3137,169,66), 源点的salary等于输入表salary,找出名为文学院和物理学院的,标签为部门的点公共的伙伴节点的名单","g.withSideEffect('p', [[9475,156,67],[8325,161,58],[9413,199,18],[3137,169,66]]).V().hasLabel('department').as('a').where(and(__.values('salary').is(within(__.select('p').unfold().limit(local, 1))), __.values('name').is(eq('文学院')))).outE('partner').inV().as('b').inE('partner').outV().hasLabel('department').as('c').where(__.values('name').is(eq('物理学院'))).select('b').values('name').dedup()"
"输入表的列为name,id,gender, 数据为('何伟',43,'famale'), 以属性name作为相等条件,返回电影院好视影院的所有标签等于朋友的边,并根据f0升序排列,返回71个","g.withSideEffect('p', [['name':'何伟','id':43,'gender':'famale']]).V().hasLabel('cinema').has('name', '好视影院').outE('friend').as('e').order().by('f0').limit(71).inV().as('b').select('b')"
"帮我查询与计算机学院存在has关系的teacher,teacher与course存在teach关系的点,返回这些点的name","g.V().has('name', '计算机学院').out('has').hasLabel('teacher').out('teach').hasLabel('course').values('name')"
"请帮我查找名为loan_64的account或company,以及与其有关的account,并返回loan_64的id和这些account的value","g.V().or(hasLabel('account'), hasLabel('company')).has('name', 'loan_64').bothE().otherV().hasLabel('account').project('a_id', 'b_value').by(select(all, 'v').unfold().hasLabel('account', 'company').has('name', 'loan_64').id()).by(values('value'))"
查找与buyer何雪有consult关系的2度以内的环,"g.V().has('buyer', 'name', '何雪').as('a').repeat(bothE('consult').otherV().simplePath()).times(2).where(loops().is(1).or().loops().is(2)).where(__.as('a')).select('a').by('id').project('a.id', 'b_id').by(select('a').id()).by(id())"
"帮我查询与名为赵红和韩国强的点共同撰写的,类型是书的节点","g.V().has('name', '赵红').outE('write').inV().hasLabel('book').as('b').inE('write').outV().has('name', '韩国强').select('b')"
"给出类型为仓库,名为Tugraph的点,返回这些点的语言,权重","g.V().hasLabel('repository').has('name', 'Tugraph').project('a.lang', 'a.weight').by(values('lang')).by(values('weight'))"
"请帮我找出88个名为马强的点喜欢的标签为评论的节点,且其创建时间不是2022年08月11日或名字小于114","g.V().has('name', '马强').outE('likes').inV().hasLabel('comment').has('createTime', neq('2022-08-11')).or().has('name', lt(114)).limit(88)"
"找出被company华为cooperate的university,和华为belong的city","g.V().hasLabel('company').has('name', '华为').as('b').outE('belong').inV().hasLabel('city').as('c').select('b').inE('cooperate').outV().hasLabel('university').as('a').select('a', 'b', 'c')"
查找以观看关系关联了电影泰坦尼克号的person,"g.V().hasLabel('film').has('name', '泰坦尼克号').in('watch').hasLabel('person')"
 请帮我找出与张建国喜欢过的书籍相关的书籍，以及与张建国喜欢的书籍有相似喜好的书籍。,"g.V().hasLabel('reader').has('name', '张建国').as('a').outE('likes').inV().hasLabel('book').as('b').select('a').inE('likes').outV().hasLabel('book').as('c').select('a', 'b', 'c')"
"返回和课程高等数学有关的部门,称为X,再返回和这个X有关联的其他学生,以及和X有关联的大学","g.V().has('course', 'name', '高等数学').as('a').bothE().bothV().hasLabel('department').as('b').bothE().bothV().hasLabel('student').as('c').select('b').bothE().bothV().hasLabel('university').as('d').select('a', 'b', 'c', 'd')"
"找出用户王红 发布的帖子,返回帖子 拥有的标签的value的平均值加467的平均值","g.V().has('user', 'name', '王红').outE('publish').inV().hasLabel('post').outE('has').inV().hasLabel('tag').values('value').fold().project('result').by(__.mean().math('_ + 467').mean()).select('result')"
"查找label为包含,以及满足条件源点id小于159,f0为空,或目标点id不为空的边","g.E().hasLabel('contain').or(and(has('srcId', lt(159)), has('f0', null)), has('targetId', neq(null)))"
"帮我查询所有与person有关系的person节点,且person节点的名字不等于郑强,并返回这些person的薪资乘薪资的值,以及person的id的最大值乘id的最小值","g.V().hasLabel('person').as('a').outE().as('e').inV().hasLabel('person').has('name', neq('郑强')).as('b').select('b').by(values('salary').math('_ * _')).as('salary_squared').select('b').by(values('id').max()).as('max_id').select('b').by(values('id').min()).as('min_id').select('salary_squared', 'max_id', 'min_id').by(identity()).by(identity()).by(identity()).math('salary_squared + max_id * min_id')"
"使用列为gender,salary,name, 数据为('male',5139,'孙月')的子查询作为输入表, 源点的name等于输入表name,查询论坛的3度以内的环","g.withSideEffect('p', [['gender': 'male', 'salary': 5139, 'name': '孙月']]).V().hasLabel('forum').has('name', __.select('p').unfold().select('name')).as('a').both().as('b').both().where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"帮我查询名为ISSUE-250的点属于的仓库,并对这些仓库的创建时间进行求和","g.V().has('name', 'ISSUE-250').outE('belong').inV().hasLabel('repository').values('createTime').sum()"
"请帮我查找person以身高分组的id, 根据id从小到大排序",g.V().hasLabel('person').group().by('height').by(values('id').order().fold()).order(local).by(keys)
"给出类型为用户的所有点,并根据年龄从小到大排列","g.V().hasLabel('user').order().by('age', asc)"
"请帮我找出56个名为数据结构的点属于的label为部门的节点,且其id大于67","g.V().has('name', '数据结构').outE('belong').inV().hasLabel('department').has('id', gt(67)).limit(56)"
"查找所有和doctor点有creates关系的prescription节点,且边满足条件targetId小于185,目标prescription节点name是Prescription_292","g.V().hasLabel('doctor').outE('creates').has('targetId', lt(185)).inV().hasLabel('prescription').has('name', 'Prescription_292')"
"给出读者黄若涵的类型是朋友的边,并根据目标点id升序排列,返回192个","g.V().has('reader', 'name', '黄若涵').outE('friend').order().by('targetId', asc).limit(192).inV()"
"找出119个和类型是部门的点有拥有关系的医生,以及和这些医生有属于关系的部门",g.V().hasLabel('department').as('a').outE('has').inV().hasLabel('doctor').as('b').outE('belong').inV().hasLabel('department').as('c').select('c').limit(119)
返回名为孙轩的点喜欢的帖子,"g.V().has('name', '孙轩').out('likes').hasLabel('post')"
帮我查询与person张强和郑思思都存在认识关系的点,"g.V().has('person', 'name', '张强').out('knows').as('b').in('knows').has('person', 'name', '郑思思').select('b')"
 给出韩思琪所有的商品，以及向她咨询购买的买家，一起返回。,"g.V().has('name', '韩思琪').as('a').outE('has').inV().hasLabel('goods').as('b').select('a').inE('consult').outV().hasLabel('buyer').as('c').select('a', 'b', 'c')"
查询被person黄强喜欢的person,"g.V().hasLabel('person').has('name', '黄强').as('b').outE('likes').as('e').inV().as('a').select('a', 'b')"
帮我查询全部与仓库Tugraph有关系的仓库的id,"g.V().hasLabel('repository').has('name', 'Tugraph').bothE().otherV().hasLabel('repository').id()"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出label为person的点,并根据年龄从小到大排列","g.V().hasLabel('person').order().by('age', asc)"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回名为周梅和赵建聪的,类型为person的点公共的friend节点的名单","g.V().has('person', 'name', '周梅').out('friend').as('b').in('friend').has('person', 'name', '赵建聪').select('b').values('name')"
"请帮我找出103个id为空且类别为传记且名字小于686的书,根据名字从小到大排列","g.V().hasLabel('book').has('id', null).has('category', '传记').has('name', lt(686)).order().by('name', asc).limit(103)"
请帮我找出与Order_148有关的seller，以及包含在Order_148中的其他商品，并将它们返回。,"g.V().hasLabel('orders').has('name', 'Order_148').as('a').bothE().as('e').otherV().hasLabel('seller').as('b').select('a').outE('contain').as('e2').inV().hasLabel('goods').as('c').select('a', 'b', 'c')"
 查询陈若涵和陈强共同的相关者，共有126个人。,"g.V().has('person', 'name', '陈若涵').outE('relation').inV().as('b').inE('relation').outV().has('person', 'name', '陈强').select('b').limit(126)"
请帮我查找所有与大学有关的人，或者这些人认识的人。,"g.V().hasLabel('university').outE('relation').inV().range(1, 2).dedup()"
请帮我找出所有与Comment_103存在属于关系的电影，以及这些电影所拥有的标签。返回这些点的价值。,"g.V().has('name', 'Comment_103').outE('belong').inV().hasLabel('film').outE('has').inV().hasLabel('tag').values('value')"
帮我查询id为30的点的价值,"g.V().has('id', 30).values('value')"
返回所有吴国强知道的人，以及吴国强有关联的人。,"g.V().has('name', '吴国强').as('a').outE('knows').inV().hasLabel('person').as('b').select('a').inE('relates').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"找出与名为杜科和Bob的点共同取消的,标签等于订单的节点","g.V().has('name', '杜科').outE('cancel').inV().hasLabel('orders').as('b').inE('cancel').outV().has('name', 'Bob').select('b')"
"请帮我查找全部与Bob存在回答关系的买家,买家与订单存在创造关系的点,返回这些点的价格","g.V().has('name', 'Bob').outE('ask').inV().hasLabel('buyer').outE('creates').inV().values('price')"
请帮我找出年龄小于199的Person观看过的电影及其对应的标签名称。,"g.V().hasLabel('person').has('age', lt(199)).outE('watch').inV().hasLabel('film').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"找出全部loan以id,amount,weight分组的amount, 根据amount升序排序","g.V().hasLabel('loan').group().by(project('id', 'amount', 'weight').by('id').by('amount').by('weight')).by(values('amount').fold()).order(local).by(select(keys).select('amount'), asc).select(values)"
"请帮我找出university电子科技大学的friend,的srcId除48的数量","g.V().has('university', 'name', '电子科技大学').outE('friend').project('result').by(values('srcId').math('/ 48')).select('result').count()"
获取陈国强创建的订单中包含的商品,"g.V().hasLabel('buyer').has('name', '陈国强').out('creates').hasLabel('orders').out('contain').hasLabel('goods')"
请帮我找出类型是事项或用户的点,"g.V().hasLabel(within('issue', 'user'))"
"使用列为height,salary,name, 数据为(150,4800,'赵宏')的子查询作为输入表, 源点的height等于输入表height,找出全部源点标签等于电影,目标点标签等于标签,标签等于film_has_tag的边","g.withSideEffect('p', [['height': 150, 'salary': 4800, 'name': '赵宏']]).V().hasLabel('film').has('height', __.select('p').unfold().select('height')).outE('film_has_tag').as('e').inV().hasLabel('tag').select('e')"
"找出编辑李科发布的书,被其他书关联的数量","g.V().has('publisher', 'name', '李科').outE('publish').inV().hasLabel('book').inE('relates').outV().hasLabel('book').count()"
请帮我找出与北京大学和电子科技大学都有关联的85个大学节点。,"g.V().has('name', '北京大学').outE().inV().hasLabel('university').as('b').inE().outV().has('name', '电子科技大学').select('b').limit(85)"
 给出与ID为21的论坛相关的伙伴关系。,"g.V().has('forum', 'id', '21').as('a').bothE().otherV().hasLabel('forum').as('b').outE('relation').inV().as('c').select('b').outE('partner').inV().as('d').select('a', 'b', 'c', 'd')"
"返回id为2的course有关的teacher的friend, 再返回和teacher有关系的relation","g.V().has('course', 'id', 2).as('a').bothE().otherV().hasLabel('teacher').as('b').bothE().otherV().hasLabel('teacher').where(eq('b')).bothE('friend').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"返回类型是person的点,返回108个",g.V().hasLabel('person').limit(108)
"查询标签为person,名为何宏的点,返回这些点的id","g.V().hasLabel('person').has('name', '何宏').values('id')"
创建一个名为defaultName的贷款,"g.V().hasLabel('loan').has('name', 'defaultName')"
"请帮我找出和类型是部门的点有拥有关系的医生,并且和这些医生有属于关系的部门,并且和这些部门有拥有关系的医生",g.V().hasLabel('department').as('a').out('has').hasLabel('doctor').as('b').in('belong').hasLabel('department').as('c').out('has').hasLabel('doctor').as('d').select('d')
 请帮我查询陈梅喜欢的人数，以及他们之间的朋友关系。,"g.V().has('person', 'name', '陈梅').outE('likes').inV().hasLabel('person').inE('knows').outV().hasLabel('person').count()"
"调用pageRank函数,以'kY', 57作为输入,返回运算结果","g.call(""pageRank"").with(""propertyName"", ""kY"").with(""maxIterations"", 57).select(""id"", ""value"")"
请帮我找出前52个类型是own的边,g.E().hasLabel('own').limit(52)
 请帮我查找与这个软件相关联的人，以及这些人的其他认识者。,"g.V().has('software', 'id', '156').bothE().otherV().hasLabel('person').as('b').inE('knows').otherV().hasLabel('person').as('c').select('b', 'c')"
"找出所有名为韩梅的点的,性别等于40的朋友,返回这些朋友的id,和边的源点id,目标点id","g.V().has('name', '韩梅').outE('friend').as('e').inV().has('gender', 40).project('b.id', 'e.srcId', 'e.targetId').by(id()).by(select('e').outV().id()).by(select('e').inV().id())"
"请帮我查找名为杜建国的点likes的全部repository,并对这些repository的weight进行求和","g.V().has('name', '杜建国').outE('likes').inV().hasLabel('repository').values('weight').sum()"
"查询创造医生陈科创造的处方,的医生","g.V().hasLabel('doctor').has('name', '陈科').outE('creates').inV().hasLabel('prescription').as('b').inE('creates').outV().hasLabel('doctor').as('c').select('b', 'c')"
"以'zj'作为输入调用KHOP函数,返回id, kValue","g.call('KHOP').with('input', 'zj').select('id', 'kValue')"
"返回病人的朋友,或其朋友的朋友","g.V().hasLabel('patient').as('a').outE('friend').inV().range(1, 2).as('b').select('b')"
"查找3个person韩伟和杜轩,共同的partner","g.V().has('person', 'name', '韩伟').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '杜轩').select('b').limit(3)"
"找出卖家回答的买家,返回其源点的id除96的值,以及目标点的年龄减40的值","g.V().hasLabel('seller').as('a').outE('ask').as('e').inV().hasLabel('buyer').as('b').project('a_id_div_96', 'b_age_minus_40').by(select('a').values('id').math('/ 96')).by(select('b').values('age').math('- 40'))"
"返回名为黄梅的点likes的全部person,并对这些person的salary进行求和","g.V().has('name', '黄梅').outE('likes').inV().hasLabel('person').values('salary').sum()"
请帮我找出与person杜红有关的person，以及与杜红进行过交易的other person，并将它们返回。,"g.V().hasLabel('person').has('name', '杜红').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('pay').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
查询被course高等数学belong的department,"g.V().hasLabel('course').has('name', '高等数学').as('b').outE('belong').inV().hasLabel('department').as('a').select('a', 'b')"
找出创建时间按升序排列的，价格大于88并且ID大于等于29或者名字不等于'呐喊'的书籍，一共有27本。,"g.V().hasLabel('book').has('price', gt(88)).or(has('id', gte(29)), has('name', neq('呐喊'))).order().by('createTime', asc).limit(27)"
"查找id为188的department有关的course的friend, 再查找和course有关系的relation","g.V().has('department', 'id', 188).bothE().otherV().hasLabel('course').as('b').bothE().otherV().hasLabel('course').bothE('friend').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"帮我查询和作家吴国强有关的读者,称为X,再帮我查询和这个X有关联的其他编辑,以及和X有关联的作家","g.V().hasLabel('author').has('name', '吴国强').as('a').bothE().otherV().hasLabel('reader').as('b').bothE().otherV().hasLabel('publisher').as('c').select('b').bothE().otherV().hasLabel('author').as('d').select('a', 'b', 'c', 'd')"
"查找104个名为XiaoHu的点转账的类型为账号的节点,且其是否冻结是true","g.V().has('name', 'XiaoHu').outE('transfer').inV().hasLabel('account').has('isBlock', true).limit(104)"
找出北京大学和南京大学的共同关联人员，共47人。,"g.V().has('university', 'name', '北京大学').outE('relation').inV().as('b').inE('relation').outV().has('university', 'name', '南京大学').select('b').limit(47)"
 找出65个与大学有拥有关系的部门，以及与这些部门有拥有关系的教师。,g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('teacher').limit(65)
"使用列为gender,salary,id, 数据为('male',8066,88),('male',8984,96)的子查询作为输入表, 以属性gender作为相等条件,查询源点类型为publisher,目标点类型为book,类型为publisher_publish_book的边","g.inject([['male', 8066, 88], ['male', 8984, 96]]).as('p').unfold().as('p_row').select('p_row').by(project('gender', 'salary', 'id').by(limit(local, 1)).by(limit(local, 2)).by(limit(local, 3))).V().hasLabel('publisher').as('a').where(eq('a')).by('gender').by(select('p_row').select('gender')).outE('publisher_publish_book').as('e').inV().hasLabel('book').select('e')"
"根据年龄,名字,性别分组,计算薪资减薪资的数量","g.V().hasLabel('a').group().by(union(values('age'), values('name'), values('gender')).fold()).by(count(local))"
"请帮我找出person赵红的全部label为family的边,并根据srcId升序排列,返回4个","g.V().has('person', 'name', '赵红').outE('family').order().by('srcId', asc).limit(4).inV()"
"以('杜思思','famale',65),('Jimmy','famale',70),('周红','male',32),('赵思思','famale',82)作为请求表数据,属性分别为name,gender,id, 源点的name等于输入表name,返回以发布关系关联了帖子Post_355的用户","g.inject(['杜思思', 'Jimmy', '周红', '赵思思']).unfold().as('p_name').V().hasLabel('user').where(outE('user_publish_post').inV().hasLabel('post').has('name', 'Post_355')).has('name', within('杜思思', 'Jimmy', '周红', '赵思思')).select('p_name').by().dedup()"
返回与孙强有支付关系的人,"g.V().hasLabel('person').has('name', '孙强').inE('pay').outV().dedup()"
"返回buyer cancel的orders,返回其源点的age乘age的数量,以及目标点的id加55的最小值","g.V().hasLabel('buyer').as('a').outE('cancel').as('e').inV().hasLabel('orders').as('b').select('a', 'b').project('count_age_squared', 'min_id_plus_55').by(select('a').by('age').math('_ * _').count()).by(select('b').by('id').math('_ + 55').min())"
查找193个与郑建聪和杜思思都存在关系的person节点,"g.V().has('name', '郑建聪').as('a').outE().as('e').inV().hasLabel('person').as('b').inE().as('e2').outV().has('name', '杜思思').as('c').select('b').limit(193)"
 查询何思思的处方被其他病人使用的数量。,"g.V().has('patient', 'name', '何思思').out('accept').as('b').in('accept').hasLabel('patient').where(neq('a')).count()"
"找出与用户杜若涵有关,且与事项ISSUE-281有关系的仓库节点","g.V().has('user', 'name', '杜若涵').bothE('likes').otherV().hasLabel('repository').bothE('has').otherV().has('issue', 'name', 'ISSUE-281').as('c').select('c').bothE('has').otherV().hasLabel('repository').dedup()"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));返回account Light transfer的account,被其他account transfer的数量","g.V().has('account', 'name', 'Light').outE('account_transfer_account').inV().as('b').inE('account_transfer_account').outV().as('c').dedup().count()"
请帮我找出所有与徐国强有关联的家庭成员。,"g.V().has('person', 'name', '徐国强').outE('family').inV().hasLabel('person').range(1, 2).values('name')"
请帮我找出所有类型为贷款的点,g.V().hasLabel('loan')
"给出id为169的部门有关的大学的伙伴, 再给出和大学有关系的相关者","g.V().has('department', 'id', 169).as('a').bothE().otherV().hasLabel('university').as('b').both().hasLabel('university').bothE('partner').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"请帮我找出与person杜月有关,且与标签历史有关系的电影节点","g.V().hasLabel('person').has('name', '杜月').bothE('watch').otherV().hasLabel('film').bothE('has').otherV().hasLabel('tag').has('name', '历史').select('b')"
"查询与用户周思琪存在喜欢关系,且与标签喜剧存在拥有关系的帖子节点，返回这些帖子的字数,名字,语言,及用户周思琪的名字,及标签喜剧的id","g.V().has('user', 'name', '周思琪').as('a').outE('likes').inV().hasLabel('post').as('b').inE('has').outV().has('tag', 'name', '喜剧').as('c').select('a', 'b', 'c').by('name').by(values('wordCount', 'name', 'lang')).by('id')"
"输入请求点id的列表201,884, 以属性id作为相等条件,返回和department有关联的student节点,并根据其name,salary,height分组,返回name,salary,height,以及id减20的值","g.inject([201, 884]).unfold().as('p').V().hasLabel('department').has('id', __.select('p')).bothE('department_has_student').otherV().hasLabel('student').as('b').select('b').values('name', 'salary', 'height').by().project('name', 'salary', 'height', 'id_minus_20').by(__.select('name')).by(__.select('salary')).by(__.select('height')).by(__.select('b').values('id').math('_ - 20')).group().by(__.select('name', 'salary', 'height')).by(__.fold())"
"请帮我找出issue的三角的环,边标签等于belong, 并返回这些点的id","g.V().hasLabel('issue').as('a').outE('belong').inV().as('b').outE('belong').inV().as('c').where(__.select('c').outE('belong').inV().where(eq('a'))).select('a', 'b', 'c').by(id()).by('id').by('id').project('a', 'b_id', 'c_id').by(__.select('a')).by(__.select('b')).by(__.select('c'))"
 按照分类（category)和ID对电影进行分组，然后按照ID从大到小排序。,"g.V().hasLabel('film').group().by(values('category', 'id')).order(local).by(keys, desc).select(values).unfold()"
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找89个person李宏和张建聪,共同的relation","g.V().has('person', 'name', '李宏').outE('relation').inV().where(__.inE('relation').outV().has('person', 'name', '张建聪')).limit(89)"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询所有类型为公司的点",g.V().hasLabel('company')
"以478,223作为请求点id, 以属性id作为相等条件,给出所有publisher以height,age分组的height, 根据height从大到小排序","g.inject([478, 223]).unfold().as('p').V().hasLabel('publisher').as('a').where(eq('p')).by('id').by('id').select('a').group().by(values('height', 'age')).by(select('a').values('height').fold()).order(local).by(keys, desc)"
"请帮我查找和account Geaflow123有transfer关系的account,再请帮我查找以transfer关系关联了Geaflow123的account","g.V().hasLabel('account').has('name', 'Geaflow123').as('a').outE('transfer').inV().as('b').select('a').inE('transfer').outV().as('c').select('a', 'b', 'c')"
 返回与城市点相关的国家节点，并按价值分组。,g.V().hasLabel('city').bothE('belong').bothV().hasLabel('country').values('value').groupCount()
"给出company以value,peopleNumber分组的scale, 根据scale降序排序","g.V().hasLabel('company').group().by(values('value', 'peopleNumber')).by(values('scale')).order(local).by(values, desc)"
"帮我查询被account transfer数量大于98的account,记为relationCount,再查询这些account transfer的company","g.V().hasLabel('account').as('a').project('a', 'relationCount').by(identity()).by(__.in('transfer').hasLabel('account').values('id').min()).select('a', 'relationCount').as('aWithCount').select('a').where(select('aWithCount').select('relationCount').is(gt(98))).out('transfer').hasLabel('company').dedup()"
"查询与名为王月和王梅的点共同认识的,label为person的节点","g.V().has('name', '王月').out('knows').as('e').in('knows').has('name', '王梅').as('e2').select('e').hasLabel('person')"
"给出has course高等数学belong的department,的university","g.V().hasLabel('course').has('name', '高等数学').outE('belong').inV().hasLabel('department').as('b').inE('has').outV().hasLabel('university').as('c').select('b', 'c')"
"请帮我查找id为156的medicine有关的prescription的partner, 再请帮我查找和prescription有关系的partner","g.V().has('medicine', 'id', 156).as('a').bothE().otherV().hasLabel('prescription').as('b').bothE('partner').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找person的三角的环,边类型是person_knows_person, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('person_knows_person').inV().hasLabel('person').as('b').outE('person_knows_person').inV().hasLabel('person').as('c').where(__.outE('person_knows_person').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"输入请求点id的列表943,876,249, 源点的id等于输入表id,请帮我查找电影院的三角的环,边label为cinema_releases_film, 并返回这些点的id","g.inject([943, 876, 249]).unfold().as('p').V().has('cinema', 'id', __.as('p')).as('a').outE('cinema_releases_film').inV().as('b').outE('cinema_releases_film').inV().as('c').where(outE('cinema_releases_film').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"给出140个和类型是用户的点有发布关系的帖子,且和这些帖子有拥有关系的标签",g.V().hasLabel('user').as('a').outE('publish').as('e').inV().hasLabel('post').as('b').outE('has').as('e2').inV().hasLabel('tag').as('c').select('c').limit(140)
"给出大学华中科技大学合作的公司,以及包含这些公司的城市","g.V().has('university', 'name', '华中科技大学').outE('cooperate').inV().hasLabel('company').as('b').inE('contain').outV().hasLabel('city').as('c').select('b', 'c')"
"根据name分组,计算id的最小值减id的值","g.V().hasLabel('a').group().by('name').by(values('id').min()).as('minIdMap').select(values).unfold().as('entry').select(keys).as('name').select(values).as('minId').select('entry').select(values).unfold().as('id').select('name', 'minId', 'id').by().by().by().project('result').by(select('minId').math('_ - ').by(select('id'))).select('result')"
"给出和person Alice有喜欢关系的评论,再给出以创造关系关联了Alice的评论","g.V().has('person', 'name', 'Alice').as('a').outE('likes').inV().hasLabel('comment').as('b').select('a').inE('creates').outV().hasLabel('comment').as('c').select('a', 'b', 'c')"
"请帮我查找属于城市武汉的大学,和这些大学属于的城市","g.V().hasLabel('city').has('name', '武汉').in('belong').hasLabel('university').as('b').out('belong').hasLabel('city').as('c').select('b', 'c')"
"给出全部源点价格不为空,目标点价格小于143,且类型是包含的边","g.V().has('price', neq(null)).outE('contain').as('e').inV().has('price', lt(143)).select('e')"
 内科部门是什么？,"g.V().hasLabel('department').has('name', '内科')"
帮我找一下名为'Order_158'且类型的点，然后返回它们的id,"g.V().hasLabel('orders').has('name', 'Order_158').id()"
"请帮我找出所有源点标签等于person,边标签等于parent,且满足条件srcId小于等于159,targetId为空的边","g.V().hasLabel('person').outE('parent').has('srcId', lte(159)).has('targetId', eq(null))"
"请帮我找出197个名为韩宏的点教的标签等于课程的节点,且其课时大于等于30或学分不为空","g.V().has('name', '韩宏').outE('teach').inV().hasLabel('course').or(has('courseHour', gte(30)), has('credit', neq(null))).limit(197)"
"以932,900作为请求点id, 以属性id作为相等条件,找出前85个满足条件id为空的电影院","g.withSideEffect('p', [[932], [900]]).V().hasLabel('cinema').where(and(__.has('id', within('p')), __.has('id', null))).limit(85)"
"查找名为武汉大学的大学,以及与其有关的城市,并返回武汉大学的等级和这些城市的人数","g.V().hasLabel('university').has('name', '武汉大学').as('a').bothE().as('e').otherV().hasLabel('city').as('b').select('a', 'b').by('level').by('peopleNumber')"
"请帮我找出knows person黄梅的person,和这些person lover的person","g.V().hasLabel('person').has('name', '黄梅').in('knows').as('b').out('lover').as('c').select('b', 'c')"
"找出189个名为Zeus的点还款的类型是贷款的节点,且节点权重在274到964之间","g.V().has('name', 'Zeus').outE('repay').as('e').inV().hasLabel('loan').has('weight', between(274, 964)).as('b').select('b').limit(189)"
"帮我查询名为李若涵的点accept的所有prescription,并对这些prescription的weight进行求和","g.V().has('name', '李若涵').outE('accept').inV().hasLabel('prescription').values('weight').sum()"
"找出书关联的书,返回其源点的价格减价格的值,以及目标点的price的和乘29的和","g.V().hasLabel('book').as('a').outE('relates').as('e').inV().hasLabel('book').as('b').select('a', 'b').by('price').by('price').project('expr1', 'expr2').by(select('a').math('_ - _')).by(select('b').sum().math('_ * 29'))"
"查询读者孙红喜欢的书,以及认识这些书的书","g.V().hasLabel('reader').has('name', '孙红').as('a').outE('likes').as('e').inV().hasLabel('book').as('b').inE('knows').as('e2').outV().hasLabel('book').as('c').select('b', 'c')"
"返回名为形势与政策的点belong的所有department,并对这些department的value进行求和","g.V().has('name', '形势与政策').out('belong').hasLabel('department').values('value').sum()"
 查找86部喜剧电影，价值在296到659之间，按类别升序排列。,"g.V().hasLabel('film').has('category', eq('喜剧')).has('value', between(296, 659)).order().by('category', asc).limit(86)"
"返回标签为seller,名为陈雪的点,返回这些点的height","g.V().hasLabel('seller').has('name', '陈雪').values('height')"
 请问有没有名叫周宏的病人？,"g.V().hasLabel('patient').has('name', '周宏')"
请帮我查找所有和author杜伟之间有write关系的book,"g.V().hasLabel('author').has('name', '杜伟').out('write').hasLabel('book')"
查找以属于关系关联了仓库Flink的合并请求,"g.V().has('repository', 'name', 'Flink').inE('belong').outV().hasLabel('pullRequest')"
查询被loan loan_74 deposit的account,"g.V().hasLabel('loan').has('name', 'loan_74').outE('deposit').inV().hasLabel('account').as('b').select('b').by().as('a').select('a', 'b')"
 赵科和张月共同教授一个名为course的节点。,"g.V().has('name', '赵科').as('a').outE('teach').as('e').inV().hasLabel('course').as('b').inE('teach').as('e2').outV().has('name', '张月').as('c').select('b')"
"请帮我找出与person何月有关,且与账号Zeus有关系的账号节点","g.V().has('person', 'name', '何月').bothE('own').otherV().hasLabel('account').as('b').bothE('transfer').otherV().has('account', 'name', 'Zeus').select('b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找177个名为少年闰土的点knows的标签等于book的节点,且节点name不等于百年孤独且category不是小说","g.V().has('name', '少年闰土').outE('knows').inV().hasLabel('book').has('name', neq('百年孤独')).has('category', neq('小说')).limit(177)"
请帮我找出与103个类型为person的节点有knows关系的所有person节点，以及这些person节点之间的knows关系。,g.V().hasLabel('person').as('a').outE('knows').as('e').inV().hasLabel('person').as('b').outE('knows').as('e2').inV().hasLabel('person').as('c').select('c').limit(103)
"用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询美团的点创造的软件,然后帮我查询美团被属于的person,一起返回","g.V().has('company', 'name', '美团').as('a').outE('company_creates_software').inV().hasLabel('software').as('b').select('a').inE('person_belong_company').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"找出贷款loan_3存款的账号, 令贷款的价值等于账号的id,令账号的id等于账号的id的最大值对id取余的最小值, 返回贷款的id, 账号的价值","g.V().hasLabel('loan').has('name', 'loan_3').as('a').outE('deposit').inV().hasLabel('account').as('b').project('a_id', 'b_value').by(select('a').values('id')).by(select('b').values('value'))"
 请帮我查找与编辑有关系的所有作家节点，并返回这些节点中身高加155后对161取余的数量，以及身高对161取余的值。,"g.V().hasLabel('publisher').outE().inV().hasLabel('author').has('id', eq(null)).project('count_result', 'height_mod').by(__.count()).by(__.values('height').math('_ + 155 % _').math('_ % 161')).select('count_result', 'height_mod')"
"找出127个person王宏和王国强,共同的friend","g.V().has('person', 'name', '王宏').outE('friend').inV().as('b').inE('friend').outV().has('person', 'name', '王国强').select('b').limit(127)"
请帮我找出所有与名为王思琪的买家存在伙伴关系，或者其伙伴之间存在伙伴关系的订单。,"g.V().has('buyer', 'name', '王思琪').outE('partner').inV().hasLabel('orders').union(__.identity(), __.outE('partner').inV().hasLabel('orders')).dedup()"
"请帮我查找全部源点标签为person,目标点标签为film,标签为person或tag或comment的边","g.V().hasLabel('person').outE('person', 'tag', 'comment').as('e').inV().hasLabel('film').select('e')"
"查询价值大于965的大学合作的公司的名称,以及这些公司 属于的城市的名称","g.V().hasLabel('university').has('value', gt(965)).outE('cooperate').inV().hasLabel('company').as('b').outE('belong').inV().hasLabel('city').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 返回CSDN论坛中标签为论坛的点的ID、人数和价值。,"g.V().hasLabel('forum').has('name', 'CSDN').project('a.id', 'a.peopleNumber', 'a.value').by(values('id')).by(values('peopleNumber')).by(values('value'))"
"请帮我查找源点性别是famale,性别等于25,身高在166到186之间,目标点价格小于等于2762.49,且label为查看的边","g.V().has('gender', 'famale').has('gender', 25).has('height', between(166, 186)).outE('look').as('e').inV().has('price', lte(2762.49)).select('e')"
"查询张轩的点喜欢的帖子,然后查询张轩被包含的论坛,一起返回","g.V().has('name', '张轩').as('a').outE('likes').inV().hasLabel('post').as('b').select('a').inE('contain').outV().hasLabel('forum').as('c').select('a', 'b', 'c')"
"找出pullRequest以createTime,changeFileNumber分组的createTime, 根据createTime升序排序","g.V().hasLabel('pullRequest').group().by(values('createTime', 'changeFileNumber')).select(values).unfold().order().by(select(keys).select('createTime'), asc)"
"根据name,id,value分组,计算value加value的最小值","g.V().hasLabel('a').group().by(values('name', 'id', 'value')).by(values('value').sum().fold().min())"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出公司华为雇佣的person,被其他person认识的数量","g.V().has('company', 'name', '华为').out('company_employee_person').in('person_knows_person').dedup().count()"
"请帮我查找192个prescription Prescription_151和Prescription_117,共同的partner","g.V().has('prescription', 'name', 'Prescription_151').outE('partner').inV().as('b').inE('partner').outV().has('prescription', 'name', 'Prescription_117').select('b').limit(192)"
"帮我查询部门拥有的医生, 令医生的年龄的值等于拥有医生的部门的id的最大值, 再查找医生创造的处方","g.V().hasLabel('department').as('a').outE('has').as('e').inV().hasLabel('doctor').as('b').select('a').aggregate('depts').by('id').select('b').sideEffect(__.select('depts').unfold().max().store('maxDeptId')).select('b').outE('creates').as('e3').inV().as('d').select('b', 'd').by(__.select('maxDeptId').unfold()).by()"
 返回Comment_472的喜欢者。,"g.V().hasLabel('comment').has('name', 'Comment_472').inE('likes').outV().hasLabel('person')"
"给出和类型是医生的点有属于关系的部门,并且和这些部门有拥有关系的医生,并且和这些医生有属于关系的部门",g.V().hasLabel('doctor').as('a').out('belong').hasLabel('department').as('b').in('has').hasLabel('doctor').as('c').out('belong').hasLabel('department').as('d').select('d')
"帮我查询全部源点满足条件peopleNumber等于2164且area在46266到91524之间,目标点满足条件value不为空,peopleNumber不等于84061,或id不是99555,且类型是belong的边","g.V().has('peopleNumber', 2164).has('area', between(46266, 91524)).outE('belong').as('e').inV().where(or(and(has('value', neq(null)), has('peopleNumber', neq(84061))), has('id', neq(99555)))).select('e')"
"帮我查询源点标签等于person,目标点标签等于person,标签等于person的边",g.V().hasLabel('person').outE('person').hasLabel('person').inV().hasLabel('person')
"给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));找出和名为美国的国家有伙伴关系,或有伙伴的伙伴关系的城市","g.V().has('country', 'name', '美国').repeat(out('partner')).times(2).emit().hasLabel('city').dedup()"
"请帮我查找96个名为徐若涵的点knows的类型为person的节点,且节点id小于60或salary大于9","g.V().has('name', '徐若涵').outE('knows').inV().hasLabel('person').or(has('id', lt(60)), has('salary', gt(9))).limit(96)"
"给出读者徐若涵喜欢的书, 令书的id等于书的类别, 返回读者的性别, 书的字数","g.V().has('reader', 'name', '徐若涵').as('a').outE('likes').inV().hasLabel('book').as('b').project('gender', 'wordCount').by(select('a').values('gender')).by(select('b').values('wordCount'))"
"帮我查询被仓库JavaGuid拥有的合并请求,和JavaGuid拥有的用户","g.V().hasLabel('repository').has('name', 'JavaGuid').as('b').outE('has').inV().hasLabel('pullRequest').as('a').select('b').outE('has').inV().hasLabel('user').as('c').select('a', 'b', 'c')"
"以('郑强',3276,'male'),('何思琪',8286,'male'),('吴国强',4606,'famale')作为请求表数据,属性分别为name,salary,gender, 以属性gender作为相等条件,查找以认识关系关联了person张月的person","g.inject(['郑强',3276,'male'],['何思琪',8286,'male'],['吴国强',4606,'famale']).as('p').select('p').by(unfold()).V().hasLabel('person').has('name','张月').as('a').in('knows').hasLabel('person').as('b').where(eq('a')).by('gender').by(select('p').tail(1).select('gender')).select('b')"
"返回名为徐轩的点的,创建时间等于2013年12月25日,字数小于93的朋友,返回这些朋友的名字,和边的f0,f1","g.V().has('name', '徐轩').outE('friend').as('e').inV().has('createTime', '2013-12-25').has('wordCount', lt(93)).as('b').select('b', 'e').by('name').by(values('f0', 'f1').fold())"
"用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出id为45的person关联的标签,和以拥有关系关联了这些标签的其他电影","g.V().has('person', 'id', 45).bothE().otherV().hasLabel('tag').as('b').inE('film_has_tag').outV().hasLabel('film').as('c').select('b', 'c')"
 返回同时属于腾讯公司且包含浙江大学城市的名称、腾讯公司的人员数量和浙江大学的ID。,"g.V().hasLabel('company').has('name', '腾讯').as('a').outE('belong').inV().hasLabel('city').as('b').inE('contain').outV().hasLabel('university').has('name', '浙江大学').as('c').select('a', 'b', 'c').by('peopleNumber').by('name').by('id')"
查询与医生马若涵和韩科都存在属于关系的点,"g.V().has('doctor', 'name', '马若涵').outE('belong').inV().as('b').inE('belong').outV().has('doctor', 'name', '韩科').select('b')"
给出全部与person王思思有关系的评论的id,"g.V().has('person', 'name', '王思思').bothE().otherV().hasLabel('comment').values('id')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出前107个类型是person_lover_person的边",g.E().hasLabel('person_lover_person').limit(107)
"请帮我查找所有seller的friend,或其friend的friend",g.V().hasLabel('seller').repeat(out('friend')).times(2).dedup()
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询与company华为和滴滴都存在company_apply_loan关系的点","g.V().has('company', 'name', '华为').outE('company_apply_loan').inV().as('b').inE('company_apply_loan').outV().has('company', 'name', '滴滴').select('b')"
请帮我查找前13个满足条件名字是郑月的person,"g.V().hasLabel('person').has('name', '郑月').limit(13)"
获取与国家ID为152相关的公司的合作伙伴，然后获取与该公司相关的朋友。,"g.V().has('country', 'id', '152').bothE().otherV().hasLabel('company').as('b').bothE().otherV().hasLabel('company').where(__.outE('partner').otherV().as('c')).select('b').outE('friend').otherV().as('d').select('b', 'c', 'd').by(__.select('a').by(__.V().has('country', 'id', '152'))).by(__.select('c')).by(__.select('d'))"
请帮我找出前21个标签为family的边,g.E().hasLabel('family').limit(21)
"请帮我查找3个名为百度贴吧的点contain的类型是post的节点,且节点value在96到475之间或createTime不是2019年11月17日","g.V().has('name', '百度贴吧').outE('contain').inV().hasLabel('post').or(has('value', between(96, 475)), has('createTime', neq('2019-11-17'))).limit(3)"
"使用列为id,name,value, 数据为(16,'科幻',257),(74,'文艺',408)的子查询作为输入表, 以属性id作为相等条件,请帮我找出和评论Comment_381有关的person,再请帮我找出和Comment_381comment_belong_film的其他电影,返回它们","g.withSideEffect('p', [['id':16, 'name':'科幻', 'value':257], ['id':74, 'name':'文艺', 'value':408]]).V().hasLabel('comment').where(and(__.values('id').where(within(select('p').unfold().values('id'))), has('name', 'Comment_381'))).as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a').outE('comment_belong_film').as('e2').inV().hasLabel('film').as('c').select('a', 'b', 'c')"
"查询全部源点价值大于等于979,是否冻结不是true,或是否冻结不等于true,目标点上次登录时间为1997年08月30日且是否冻结是false,且类型为转账的边","g.V().has('value', gte(979)).has('isBlock', neq(true)).or(has('isBlock', neq(true))).outE('transfer').as('e').inV().has('lastLoginTime', '1997-08-30').has('isBlock', false).select('e')"
"输入请求点id的列表64,629,111,384,3, 源点的id等于输入表id,请帮我查找从author王雪出发,经过标签为author_knows_author的边,走3度或4度到达的author点","g.withSideEffect('p', [64, 629, 111, 384, 3]).V().hasLabel('author').has('id', within('p')).has('name', '王雪').repeat(bothE('author_knows_author').otherV().simplePath()).times(3).emit().repeat(bothE('author_knows_author').otherV().simplePath()).times(1).emit().hasLabel('author').dedup()"
"请帮我找出和department急诊部有关的department,称为X,再请帮我找出和这个X有关联的其他patient,以及和X有关联的prescription","g.V().hasLabel('department').has('name', '急诊部').as('a').bothE().otherV().hasLabel('department').as('b').bothE().otherV().hasLabel('patient').as('c').select('b').bothE().otherV().hasLabel('prescription').as('d').select('a', 'b', 'c', 'd')"
"以794,534作为请求点id, 以属性id作为相等条件,找出doctor belong的department,返回其源点的salary乘6075的个数,以及目标点的weight的平均值减303的值","g.inject([794, 534]).unfold().as('p').V().hasLabel('doctor').has('id', __.select('p')).as('a').outE('doctor_belong_department').as('e').inV().hasLabel('department').as('b').select('a', 'b').by('salary').by('weight').fold().project('count_salary', 'avg_weight').by(__.unfold().select('a').fold().count()).by(__.unfold().select('b').mean().math('_ - 303'))"
"以969,748,617,591,722作为请求点id, 源点的id等于输入表id,返回与doctor韩宏有doctor_creates_prescription关系的1跳的环","g.inject([969, 748, 617, 591, 722]).as('p').flatMap(select('p')).as('id').V().hasLabel('doctor').has('id', where(eq('id'))).has('name', '韩宏').as('a').bothE('doctor_creates_prescription').otherV().where(eq('a')).select('a').by('id').as('a_id').select('a').bothE('doctor_creates_prescription').otherV().as('b').select('a_id', 'b').by('id')"
"返回论坛的三角的环,边label为包含, 并返回这些点的id","g.V().hasLabel('forum').as('a').outE('contain').inV().as('b').outE('contain').inV().as('c').where(__.as('c').outE('contain').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
 找出所有与徐雪有关联的评论。,"g.V().has('person', 'name', '徐雪').outE('relation').inV().hasLabel('comment').range(1, 2)"
"请帮我查找被医生属于数量大于60的部门,记为relationCount,再查询这些部门属于的处方","g.V().hasLabel('department').as('a').project('a', 'relationCount').by(identity()).by(bothE('belong').hasLabel('doctor').count()).where(select('relationCount').is(gt(60))).select('a').outE('belong').hasLabel('prescription').inV().dedup()"
 查询与 person 相关联的 software 节点，按名称分组并返回。,g.V().hasLabel('person').bothE('buy').bothV().hasLabel('software').values('name').groupCount()
"找出与名为Post_346和Post_372的点共同拥有的,label为标签的节点","g.V().has('name', 'Post_346').outE('has').inV().hasLabel('tag').as('b').inE('has').outV().has('name', 'Post_372').select('b')"
"帮我查询label为医生的点,返回42个",g.V().hasLabel('doctor').limit(42)
请帮我找出和用户李思琪之间有创造关系的合并请求,"g.V().hasLabel('user').has('name', '李思琪').outE('creates').inV().hasLabel('pullRequest')"
返回等级不等于2的节点,"g.V().has('level', neq(2))"
"请帮我找出名为李科的病人,以及与其有关的病人,并返回李科的年龄和这些病人的名字","g.V().hasLabel('patient').has('name', '李科').as('a').bothE().otherV().hasLabel('patient').as('b').select('a', 'b').by('age').by('name')"
请帮我找出全部名为韩梅的点creates的comment,"g.V().has('name', '韩梅').outE('creates').inV().hasLabel('comment')"
请帮我找出马建国喜欢和被支付的所有person，一起返回。,"g.V().has('name', '马建国').as('a').outE('likes').inV().hasLabel('person').as('b').select('a').inE('pay').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
请帮我找出与订单相关的商品节点，按销量和名称进行分组，并返回销量和名称。,"g.V().hasLabel('orders').as('a').bothE('contain').as('e').otherV().hasLabel('goods').as('b').select('b').values('sellerNumber', 'name').group().by().by(count())"
"返回creates orders Order_369的buyer,和这些buyer consult的seller","g.V().hasLabel('orders').has('name', 'Order_369').in('creates').as('b').out('consult').as('c').select('b', 'c')"
查询名为'变形金刚'且标签为'电影'的点，并返回它们的价值。,"g.V().hasLabel('film').has('name', '变形金刚').values('value')"
 找出有173个同时与俄罗斯和美国有关系的城市节点。,"g.V().has('name', '俄罗斯').outE().inV().hasLabel('city').as('b').inE().outV().has('name', '美国').select('b').limit(173)"
"帮我查询person马科的标签等于朋友的边,并根据目标点id升序排列,返回18个","g.V().has('person', 'name', '马科').outE('friend').as('e').inV().as('b').order().by(select('e').values('targetId'), asc).select('b').limit(18)"
"用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询所有孙轩的点支付的person,然后帮我查询孙轩被认识的person,一起返回","g.V().has('person', 'name', '孙轩').as('a').outE('person_pay_person').inV().as('b').select('a').inE('person_knows_person').outV().as('c').select('a', 'b', 'c')"
"查找所有源点标签为公司,目标点标签为城市,标签为公司或大学或城市的边","g.V().hasLabel('company').outE('company', 'university', 'city').as('e').inV().hasLabel('city').select('e')"
请帮我查找与病人马建国相关的所有部门，并获取他所接受的所有处方。,"g.V().hasLabel('patient').has('name', '马建国').as('a').bothE().otherV().hasLabel('department').as('b').select('a').outE('accept').inV().hasLabel('prescription').as('c').select('a', 'b', 'c')"
返回108个与好视影院和UME都存在关系的评论或电影节点,"g.V().has('name', '好视影院').outE().inV().or(hasLabel('comment'), hasLabel('film')).as('b').inE().outV().has('name', 'UME').select('b').limit(108)"
 请问华中科技大学某个学院的学生在哪里可以找到？,"g.V().hasLabel('university').has('name', '华中科技大学').out('has').hasLabel('department').out('has').hasLabel('student')"
"帮我查询名为陈建聪的点认识的作家,并对这些作家的名字进行求和","g.V().has('name', '陈建聪').outE('knows').inV().hasLabel('author').values('name').sum()"
"查找账号以价值,是否冻结,创建时间分组的价值, 根据价值升序排序","g.V().hasLabel('account').group().by(values('value', 'isBlock', 'createTime')).unfold().order().by(select(keys).select('value'), asc).select(values)"
给出前31个标签等于拥有的边,g.E().hasLabel('has').limit(31)
"返回部门拥有的教师,返回其源点的价值加477减818除454对94取余的值,以及目标点的id对32取余的个数","g.V().hasLabel('department').as('a').outE('has').as('e').inV().hasLabel('teacher').as('b').select('a', 'b').by(valueMap()).project('expr1', 'expr2').by(select('a').select('value').math('(_ + 477 - 818) / 454 % 94')).by(select('b').select('id').math('_ % 32').count())"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找从person何思琪出发,经过标签等于person_likes_person的边,走1跳到达的person点","g.V().hasLabel('person').has('name', '何思琪').outE('person_likes_person').inV().hasLabel('person')"
请帮我查找全部类型是公司的点,g.V().hasLabel('company')
"查询和department呼吸科有关的department,称为X,再查询和这个X有关联的其他doctor,以及和X有关联的medicine","g.V().has('department', 'name', '呼吸科').as('a').bothE().otherV().hasLabel('department').as('b').bothE().otherV().hasLabel('doctor').as('c').select('b').bothE().otherV().hasLabel('medicine').as('d').select('a', 'b', 'c', 'd')"
" 查询同时与161个人和他们的喜欢对象有关系的Person,并包括这些Person的喜欢对象。",g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('person').as('b').outE('likes').as('e2').inV().hasLabel('person').as('c').select('c').limit(161)
"帮我查询所有王思琪的点认识的person,然后帮我查询王思琪被雇佣的公司,一起返回","g.V().has('name', '王思琪').as('a').out('knows').as('b').select('a').in('employee').hasLabel('person').as('c').select('a', 'b', 'c')"
 返回三体这本书，你知道吗？,"g.V().has('book', 'name', '三体').out('knows').hasLabel('book').out('knows').hasLabel('book').values('name')"
 返回腾讯和谷歌共同创建的，标签为软件的节点。,"g.V().has('name', '腾讯').outE('creates').inV().hasLabel('software').as('b').inE('creates').outV().has('name', '谷歌').select('b')"
 搜索南京大学与张思琪有关的部门。,"g.V().hasLabel('university').has('name', '南京大学').outE('has').inV().hasLabel('department').as('b').outE('has').inV().hasLabel('student').has('name', '张思琪').select('b')"
"返回id为69的点的价值,名字","g.V().has('id', 69).project('value', 'name').by('value').by('name')"
查询电影《建国大业》的标签,"g.V().hasLabel('film').has('name', '建国大业').as('b').outE('has').as('e').inV().hasLabel('tag').as('a').select('a', 'b')"
返回与电子科技大学有合作关系的公司数量，这些公司在其他城市也有业务。,"g.V().has('university', 'name', '电子科技大学').outE('cooperate').inV().hasLabel('company').as('b').inE('contain').outV().hasLabel('city').dedup().count()"
"查找被买家创造数量大于138的订单,记为relationCount,再查询这些订单创造的买家","g.V().hasLabel('orders').as('a').project('node', 'relationCount').by(identity()).by(__.in('creates').hasLabel('buyer').count()).as('p').select('node').where(__.select('p').select('relationCount').is(gt(138))).out('creates').hasLabel('buyer')"
"找出喜欢person吴宏创造的评论,的person","g.V().hasLabel('person').has('name', '吴宏').outE('creates').inV().hasLabel('comment').as('b').inE('likes').outV().hasLabel('person').as('c').select('b', 'c')"
 请帮我找出所有源节点类型为电影，目标节点类型为标签，边类型为具有的边。,g.V().hasLabel('film').outE('has').as('e').inV().hasLabel('tag').select('e')
找出人口至少为69048且名为'英国'的国家所包含的所有城市的名称，以及这些城市所在的国家名称。,"g.V().hasLabel('country').has('name', '英国').has('peopleNumber', gte(69048)).out('contain').hasLabel('city').as('b').in('belong').hasLabel('country').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我找出和书点有关联关系的书节点,且边满足条件权重在181.15到180.37之间,目标书节点满足条件字数大于512","g.V().hasLabel('book').as('a').outE('relates').has('weight', between(180.37, 181.15)).as('e').inV().hasLabel('book').has('wordCount', gt(512)).as('b').select('b')"
 返回呼吸科拥有的医生姓名、权重、创建时间以及他们创建的处方。,"g.V().has('department', 'name', '呼吸科').out('has').hasLabel('doctor').out('creates').hasLabel('prescription').project('weight', 'name', 'createTime').by('weight').by('name').by('createTime')"
 找出与李思思有诊断关系的医生。,"g.V().hasLabel('patient').has('name', '李思思').in('diagnose').hasLabel('doctor')"
"以5作为请求点id, 以属性id作为相等条件,请帮我找出医生创造的处方,返回其源点的身高对182取余除8930的平均值,以及目标点的weight的个数对43取余减57的值","g.withSideEffect('p_id', 5).V().hasLabel('doctor').has('id', __.constant(5)).as('a').outE('doctor_creates_prescription').as('e').inV().hasLabel('prescription').as('b').select('a', 'b').by().project('avg_height_mod', 'count_weight_mod').by(__.select('a').values('height').fold().project('avg').by(__.unfold().math('_ / 8930').math('_ % 182').mean())).by(__.select('b').values('weight').fold().project('count_mod').by(__.count(local).math('_ % 43').math('_ - 57')))"
"查询id为87的电影有关的电影的伙伴, 再查询和电影有关系的相关者","g.V().has('film', 'id', 87).as('a').bothE().otherV().hasLabel('film').as('b').bothE().hasLabel('partner').otherV().as('c').select('b').bothE().hasLabel('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"查找认识person韩科的person,和这些person同事的person","g.V().has('person', 'name', '韩科').as('a').in('knows').as('b').out('colleague').as('c').select('b', 'c')"
 请帮我按照创建时间升序排序所有以名字分组的处方。,g.V().hasLabel('prescription').group().by('name').by(values('createTime').order().fold()).unfold().select(values).unfold().order().by(asc)
"输入请求点id的列表576,469,436,154, 以属性id作为相等条件,查找buyer赵建国的全部partner,的srcId乘39的值","g.inject([576, 469, 436, 154]).unfold().as('p').V().hasLabel('buyer').has('id', __.select('p')).has('name', '赵建国').outE('partner').as('e').select('e').by('srcId').math('_ * 39')"
"请帮我查找公司滴滴属于的城市, 令城市的名字等于公司的价值加42的最小值,令公司的id等于城市的面积,令公司的id等于公司的价值, 返回公司的规格, 城市的面积","g.V().hasLabel('company').has('name', '滴滴').as('a').outE('belong').inV().hasLabel('city').as('b').project('a_scale', 'b_area').by(select('a').values('scale')).by(select('b').values('area'))"
"找出病人接受的处方, 令处方的创建时间的值等于创造处方的医生的薪资的最小值, 再查找处方包含的药品","g.V().hasLabel('patient').as('a').outE('accept').inV().hasLabel('prescription').as('b').project('b', 'createTime').by(__.identity()).by(__.select('b').inE('creates').outV().hasLabel('doctor').values('salary').min()).as('p').select('b').outE('contain').inV().hasLabel('medicine').as('d').select('p').select('createTime', 'd')"
 马宏医生的朋友的朋友,"g.V().has('doctor', 'name', '马宏').out('friend').out('relation').out('friend')"
请帮我查找与company Bilibili有employee关系的1跳以内的环,"g.V().has('company', 'name', 'Bilibili').as('a').outE('employee').inV().as('b').where(__.select('b').out().as('x').where(eq('a')).select('x')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
获取一个人的所有朋友，或者这些朋友的朋友。,g.V().hasLabel('person').as('a').outE('friend').inV().hasLabel('person').as('b').select('b')
 查询两个人徐梅和徐宏在点对点关系中的partner节点，标签为person。,"g.V().has('person', 'name', '徐梅').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '徐宏').select('b').values('name')"
"请帮我查找所有名为loan_27的点的,是否冻结不等于false或是否冻结为false的相关者,返回这些相关者的是否冻结,和边的源点id","g.V().has('name', 'loan_27').outE('relation').as('e').inV().as('b').select('b', 'e').by(values('isBlock')).by(values('srcId'))"
"输入请求点id的列表445, 源点的id等于输入表id,请帮我查找源点薪资大于1381,薪资在8700到9464之间,边标签为person_likes_comment,且满足条件目标点id小于等于101,f1不是false,或目标点id不是148的边,返回这些边的目标点id对175取余的值","g.withSideEffect('p', [445]).V().has('id', within('p')).has('salary', gt(1381)).has('salary', between(8700, 9464)).outE('person_likes_comment').or(and(has('targetId', lte(101)), has('f1', neq(false))), has('targetId', neq(148))).values('targetId').math('_ % 175')"
"返回所有赵红的点支付的person,然后返回赵红被认识的person,一起返回","g.V().has('name', '赵红').as('a').outE('pay').inV().hasLabel('person').as('b').select('a').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
" 请帮我找出所有以name和value对分组course的id,并按升序排序。","g.V().hasLabel('course').group().by(values('name', 'value')).by(values('id').fold()).order(local).by(keys, asc)"
"输入表的列为f0,srcId,weight, 数据为(543,160,140.88),(805,9,142.80),(561,138,182.79),(913,109,168.17), 以属性weight作为相等条件,找出公司创造的软件,返回其源点的人数加634的值,以及目标点的价值乘606的最大值","g.inject([543, 160, 140.88], [805, 9, 142.80], [561, 138, 182.79], [913, 109, 168.17]).as('p').V().hasLabel('company').as('a').where(eq('p')).by('weight').by(select('p').tail(local, 1)).outE('company_creates_software').inV().hasLabel('software').as('b').select('a', 'b').by('peopleNumber').by('value').project('expr1', 'expr2').by(math('_ + 634')).by(math('_ * 606')).select(values).fold().project('col1', 'col2').by(unfold().select('expr1').fold()).by(unfold().select('expr2').max())"
"查询label为person的全部点,并根据薪资从小到大排列","g.V().hasLabel('person').order().by('salary', asc)"
返回前43个满足条件名字不等于王若涵或性别不等于famale的用户,"g.V().hasLabel('user').or(has('name', neq('王若涵')), has('gender', neq('famale'))).limit(43)"
 找朋友，找同事，找朋友的朋友。,"g.V().hasLabel('department').outE('friend').inV().range(1, 2).dedup()"
"查询id为65的person拥有的账号, 并将账号有关的公司的id的平均值赋值给账号的上次登录时间, 接着查询账号的上次登录时间小于65的账号还款的贷款","g.V().has('person', 'id', 65).outE('own').inV().hasLabel('account').as('b').project('b', 'lastLoginTime').by(identity()).by(__.inE().outV().hasLabel('company').values('id').mean()).select('b').where(__.select('lastLoginTime').is(lt(65))).outE('repay').inV().hasLabel('loan').as('d').select('b', 'd').by(values('lastLoginTime')).by(identity())"
"找出和publisher点有publish关系的book节点,且边满足条件f1不等于false,目标book节点id等于98","g.V().hasLabel('publisher').as('a').outE('publish').has('f1', neq(false)).as('e').inV().hasLabel('book').has('id', 98).as('b').select('b')"
"返回与名为赵强和韩若涵的点共同knows的,类型为author的节点","g.V().has('name', '赵强').out('knows').hasLabel('author').as('b').in('knows').has('name', '韩若涵').select('b')"
帮我查询company华为employee的person节点knows的person,"g.V().hasLabel('company').has('name', '华为').out('employee').as('b').out('knows').as('c').select('c')"
 请问周宏和韩建聪之间是否存在互相喜欢的情况？,"g.V().has('user', 'name', '周宏').outE('likes').inV().as('b').inE('likes').outV().has('user', 'name', '韩建聪').select('b')"
 返回所有与某个作家有联系的书，以及与这些书有撰写关系的其他作家。,"g.V().has('author', 'id', '13').bothE().otherV().hasLabel('book').as('b').inE('write').otherV().hasLabel('author').as('c').select('b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询源点标签为person,目标点标签为person,标签为person_colleague_person的边","g.E().hasLabel('person_colleague_person').where(and(outV().hasLabel('person'), inV().hasLabel('person')))"
查找所有和city纽约之间有belong关系的country,"g.V().has('city', 'name', '纽约').outE('belong').inV().hasLabel('country')"
"请帮我查找部门的相关者,或其相关者的相关者",g.V().hasLabel('department').outE('relation').inV().hasLabel('department').path().by(__.label()).by(__.label()).by(__.label()).limit(2).tail(1).select('b')
查找post的2跳的环,"g.V().hasLabel('post').as('a').repeat(both().simplePath()).times(2).where(loops().is(2)).where(__.both().where(eq('a'))).dedup().project('a.id', 'b_id').by(__.select('a').id()).by(id())"
 请帮我找出王建聪和张伟之间存在喜欢关系的证据。,"g.V().hasLabel('reader').has('name', '王建聪').as('a').outE('likes').as('e').inV().as('b').inE('likes').as('e2').outV().hasLabel('reader').has('name', '张伟').as('c').select('b')"
 找出用来偿还贷款的账户节点，即还款来源。,"g.V().hasLabel('loan').has('name', 'defaultName').outE('deposit').inV().hasLabel('account').outE('repay').inV().hasLabel('loan')"
查询id为6的account关联的person，再查询该person相关的relation。,"g.V().has('account', 'id', '6').bothE().otherV().hasLabel('person').as('b').bothE('relation').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('b', 'c', 'd').by(valueMap(true)).select('b').bothE().otherV().hasLabel('account').has('id', '6').as('a').select('a', 'b', 'c', 'd').by(valueMap(true))"
请帮我找出城市天津包含的公司节点合作的大学,"g.V().has('city', 'name', '天津').out('contain').hasLabel('company').out('cooperate').hasLabel('university')"
"用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出和订单有关联的商品节点,并根据其价格,销量,价值分组,返回价格,销量,价值,以及价值乘899的数量","g.V().hasLabel('orders').as('a').bothE('orders_contain_goods').otherV().hasLabel('goods').as('b').select('b').by().group().by(project('price', 'sellerNumber', 'value').by(values('price')).by(values('sellerNumber')).by(values('value'))).by(count()).select(values).unfold().project('b.price', 'b.sellerNumber', 'b.value', 'COUNT(b.value * 899)').by(select(keys).select('price')).by(select(keys).select('sellerNumber')).by(select(keys).select('value')).by(select(values))"
 查询与中国诗词论坛存在关系且与Post_371帖子存在关系的标签节点，返回它们的ID、名称和价值。,"g.V().hasLabel('forum').has('name', '中国诗词论坛').outE().inV().hasLabel('tag').as('b').inE().outV().hasLabel('post').has('name', 'Post_371').select('b').project('id', 'name', 'value').by(values('id')).by(values('name')).by(values('value'))"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找48个与马月和何建聪都存在关系的person节点","g.V().has('name', '马月').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '何建聪').select('b').limit(48)"
"返回id为158的university belong的city, 并将city有关的city的value的最小值赋值给city(b)的name, 接着查询city(b)的name小于158的city belong的country","g.V().has('university', 'id', 158).out('belong').hasLabel('city').as('b').sideEffect(__.bothE().otherV().hasLabel('city').values('value').min().as('minValue').select('b').property('name', __.select('minValue'))).has('name', lt(158)).out('belong').hasLabel('country').as('d').select('b', 'd').by('name').by()"
"给出与forum推特存在contain关系,且与post Post_164存在publish关系的user节点，返回这些user的age,salary,及forum推特的name,及post Post_164的lang","g.V().hasLabel('forum').has('name', '推特').as('a').out('contain').hasLabel('user').as('b').in('publish').hasLabel('post').has('name', 'Post_164').as('c').select('a', 'b', 'c').by('name').by(values('age', 'salary')).by('lang')"
"请帮我查找own account LX001的person,和这些person invest的company","g.V().hasLabel('account').has('name', 'LX001').inE('own').outV().as('b').outE('invest').inV().as('c').select('b', 'c')"
"使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找25个和类型为买家的点有buyer_cancel_orders关系的订单,以及和这些订单有orders_contain_goods关系的商品",g.V().hasLabel('buyer').outE('buyer_cancel_orders').inV().hasLabel('orders').outE('orders_contain_goods').inV().hasLabel('goods').limit(25)
帮我查一下名叫韩若涵的买家,"g.V().hasLabel('buyer').has('name', '韩若涵')"
 请帮我找出与名为defaultName的贷款有关联的账户。,"g.V().hasLabel('loan').has('name', 'defaultName').outE('partner').inV().hasLabel('account').range(1, 2).dedup()"
"以840作为请求点id, 以属性id作为相等条件,请帮我找出年龄小于等于41的节点","g.withSideEffect('p_id', 840).V().has('id', 'p_id').has('age', lte(41))"
"查找买家孙思琪查看的商品,被其他订单包含的数量","g.V().hasLabel('buyer').has('name', '孙思琪').outE('look').inV().hasLabel('goods').inE('contain').outV().hasLabel('orders').count()"
"请帮我找出person提交的软件, 令软件的id的值等于购买软件的person的id的求和值, 再查找软件使用的软件","g.V().hasLabel('person').as('a').outE('commits').inV().hasLabel('software').as('b').sideEffect(project('sum').by(__.in('buy').hasLabel('person').values('id').sum()).select('sum').property(single, 'id')).in('uses').hasLabel('software').as('d').select('b', 'd').by(values('id')).by()"
"帮我查询id为62的university has的department, 并将department有关的course的credit的最小值赋值给department的id, 接着查询department的id小于62的department has的teacher","g.V().hasLabel('university').has('id', 62).out('has').hasLabel('department').as('b').project('b_id', 'd').by(choose(outE().hasLabel('has').inV().hasLabel('course').values('credit').min(), constant(-1)).by(outE().hasLabel('has').inV().hasLabel('course').values('credit').min())).by(where(select('b').values('id').is(lt(62))).out('has').hasLabel('teacher').fold())"
"帮我查询和标签为person的点有认识关系的person,且和这些person有提交关系的软件,且和这些软件有使用关系的软件",g.V().hasLabel('person').as('a').out('knows').hasLabel('person').as('b').out('commits').hasLabel('software').as('c').out('uses').hasLabel('software').as('d').select('d')
 找出38个与Prescription_415和Prescription_477有关系的处方。,"g.V().has('name', 'Prescription_415').outE().inV().hasLabel('prescription').as('b').inE().outV().has('name', 'Prescription_477').select('b').limit(38)"
返回所有与清华大学有合作关系的公司及其所在城市。,"g.V().has('name', '清华大学').as('a').outE('cooperate').inV().hasLabel('company').as('b').select('a').inE('contain').outV().hasLabel('city').as('c').select('a', 'b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询源点类型是forum,目标点类型是post,类型是forum_contain_post的边",g.E().hasLabel('forum_contain_post').where(outV().hasLabel('forum')).where(inV().hasLabel('post'))
请帮我查询韩红支付的人，并返回其性别,"g.V().has('person', 'name', '韩红').outE('pay').inV().hasLabel('person').outE('pay').inV().hasLabel('person').values('gender')"
"查找公司美团合作的大学, 令公司的人数等于公司的人数的个数, 返回公司的名字, 大学的id","g.V().hasLabel('company').has('name', '美团').as('a').outE('cooperate').inV().hasLabel('university').as('b').select('a', 'b').by('name').by('id')"
请帮我找出教师的联系人，或者联系人的联系人,g.V().hasLabel('teacher').outE('relation').inV().hasLabel('teacher').outE('relation').inV().hasLabel('teacher').dedup()
"查询78个名为Faker的点转账的标签等于账号的节点,且节点是否冻结等于true或名字为LX001","g.V().has('name', 'Faker').outE('transfer').inV().hasLabel('account').or(has('isBlock', true), has('name', 'LX001')).limit(78)"
 找王宏这个人。,"g.V().hasLabel('user').has('name', '王宏')"
给出与用户陈伟有发布关系的1跳以内的环,"g.V().has('user', 'name', '陈伟').as('a').bothE('publish').bothV().where(neq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"给出所有源点label为书,目标点label为书,label为读者或编辑的边","g.V().hasLabel('book').bothE('reader', 'publisher').where(otherV().hasLabel('book'))"
 找出年龄小于48岁、薪资在4647到5579之间的医生所开的处方，并列出这些处方中包含的药品名称。,"g.V().hasLabel('doctor').has('age', lt(48)).has('salary', between(4647, 5579)).outE('creates').inV().hasLabel('prescription').as('b').outE('contain').inV().hasLabel('medicine').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
" 找出与文学院有has关系的department和与学生周月有selects关系的course,然后将它们都返回。","g.V().has('department', 'name', '文学院').as('a').out('has').as('b').V().has('student', 'name', '周月').as('c').out('selects').as('d').select('a', 'b', 'c', 'd')"
查询与university复旦大学有belong关系的2度的环,"g.V().has('university', 'name', '复旦大学').as('a').outE('belong').inV().as('b').where(__.select('b').out().as('c').where(eq('a')).select('c')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找159个person陈若涵和张建国,共同的伙伴","g.V().has('person', 'name', '陈若涵').out('partner').where(__.in('partner').has('person', 'name', '张建国')).limit(159)"
"返回与名为何思琪和Bob的点共同喜欢的,标签等于书的节点","g.V().has('name', '何思琪').outE('likes').inV().hasLabel('book').as('b').inE('likes').outV().has('name', 'Bob').select('b')"
"查找名为FSM的用户或事项,以及与其有关的用户,并返回FSM的名字和这些用户的id","g.V().or(hasLabel('user'), hasLabel('issue')).has('name', 'FSM').bothE().otherV().hasLabel('user').project('a_name', 'b_id').by(select('a').values('name')).by(values('id'))"
给出与person徐宏和陈建国都存在支付关系的点,"g.V().hasLabel('person').has('name', '徐宏').outE('pay').inV().as('b').inE('pay').outV().hasLabel('person').has('name', '陈建国').select('b')"
帮我查询全部和person郑红之间有likes关系的person,"g.V().has('person', 'name', '郑红').out('likes').hasLabel('person')"
"找出全部名为Post_267的,id大于24的partner,返回这些partner的name,和边的targetId","g.V().has('name', 'Post_267').outE('partner').as('e').inV().has('id', gt(24)).as('b').select('b', 'e').by('name').by('targetId')"
"请帮我找出person周国强creates的comment,被其他person likes的数量","g.V().has('person', 'name', '周国强').out('creates').hasLabel('comment').in('likes').hasLabel('person').count()"
"请帮我查找全部id为184的country关联的company,和以cooperate关系关联了这些company的其他university","g.V().has('country', 'id', 184).bothE().otherV().hasLabel('company').as('b').inE('cooperate').otherV().hasLabel('university').as('c').select('b', 'c')"
"给出label为reader,名为郑雪的点,返回这些点的salary","g.V().hasLabel('reader').has('name', '郑雪').values('salary')"
"请帮我查找buyer郑建国look的goods,被其他buyer look的数量","g.V().hasLabel('buyer').has('name', '郑建国').as('a').outE('look').inV().hasLabel('goods').as('b').inE('look').outV().hasLabel('buyer').as('c').where(neq('a')).select('c').count()"
"找出名为四川大学的国家,以及与其有关的大学,并返回四川大学的id和这些大学的id","g.V().has('country', 'name', '四川大学').as('a').bothE().otherV().hasLabel('university').as('b').select('a', 'b').by('id')"
"请帮我查找156个和类型为user的点有likes关系的repository,且和这些repository有has关系的pullRequest",g.V().hasLabel('user').out('likes').hasLabel('repository').out('has').hasLabel('pullRequest').limit(156)
"找出person孙思琪的全部标签为朋友的边,并根据源点id升序排列,返回137个","g.V().has('person', 'name', '孙思琪').outE('friend').order().by('srcId', asc).limit(137).inV()"
"查找源点性别等于famale,边类型是创造,且权重为空或源点id对19取余大于47,且f1等于false的边,返回这些边的权重除135.81的值","g.V().has('gender', 'famale').outE('creates').where(or(__.values('weight').is(eq(null)), __.values('srcId').math('_ % 19').is(gt(47)))).has('f1', false).project('result').by(values('weight').math('_ / 135.81'))"
"返回label为喜欢,并且满足条件源点id是73的边","g.E().hasLabel('likes').has('srcId', 73)"
"用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部book以name,name,price分组的id, 根据id升序排序","g.V().hasLabel('book').group().by(values('name', 'name', 'price')).by(values('id').order().fold()).order().by(keys)"
"请帮我找出company腾讯cooperate的university,以及cooperate这些university的company","g.V().hasLabel('company').has('name', '腾讯').outE('cooperate').inV().hasLabel('university').as('b').inE('cooperate').outV().hasLabel('company').as('c').select('b', 'c')"
"给出名为李科的作家,以及与其有关的作家,并返回李科的id和这些作家的性别","g.V().has('author', 'name', '李科').as('a').bothE().otherV().hasLabel('author').as('b').select('a', 'b').by('id').by('gender')"
"输入请求点id的列表218,846,388,426,779, 以属性id作为相等条件,请帮我查找全部person以gender,height,name分组的salary, 根据salary从小到大排序","g.inject([218, 846, 388, 426, 779]).as('p').V().hasLabel('person').as('a').where(eq('p')).by('id').by().select('a').group().by(values('gender', 'height', 'name').fold()).by(values('salary').fold()).order(local).by(values, asc)"
"返回所有帖子以名字,id,语言分组的名字, 根据名字升序排序","g.V().hasLabel('post').group().by(values('name', 'id', 'lang').fold()).by(values('name').fold()).order(local).by(keys, asc).select(values).unfold()"
返回和账号Zeus之间有还款关系的贷款,"g.V().has('account', 'name', 'Zeus').outE('repay').inV().hasLabel('loan')"
 请问有没有一部电影叫做星际穿越，类型是film?如果有，能否提供该电影的名称以及该电影的类型，以便我进行查询。,"g.V().hasLabel('film').has('name', '星际穿越').project('a.name', 'a.value').by('name').by('value')"
"返回被用户赵月创造的事项,和赵月创造的事项","g.V().hasLabel('user').has('name', '赵月').as('b').outE('creates').as('e2').inV().hasLabel('issue').as('c').select('b').outE('creates').as('e').inV().hasLabel('issue').as('a').select('a', 'b', 'c')"
"用这个schema:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找以contain关系关联了city武汉的country","g.V().hasLabel('city').has('name', '武汉').inE('country_contain_city').outV().hasLabel('country')"
获取所有与person相关的tag，以及这些tag与其他通过has关系连接的film。,"g.V().has('person', 'id', '138').bothE().otherV().hasLabel('tag').as('b').inE('has').outV().hasLabel('film').as('c').select('b', 'c')"
"给出所有与卖家有关系的卖家节点,且卖家节点的id不等于47,并返回这些卖家的id加23减5900减77的值,以及卖家的height的平均值乘198的值","g.V().hasLabel('seller').as('a').outE().inV().hasLabel('seller').has('id', neq(47)).as('b').select('b').project('expr1', 'expr2').by(values('id').math('_ + 23 - 5900 - 77')).by(values('height').mean().math('_ * 198'))"
"给出与名为张建聪和张建国的点共同支付的,类型是person的节点","g.V().has('name', '张建聪').outE('pay').inV().as('b').hasLabel('person').where(__.inE('pay').outV().has('name', '张建国')).select('b')"
请帮我找出与类型为person的节点有pay关系的person，以及这些person有knows关系的所有person。,g.V().hasLabel('person').as('a').outE('pay').inV().hasLabel('person').as('b').outE('knows').inV().hasLabel('person').as('c').outE('knows').inV().hasLabel('person').as('d').select('d')
"请帮我找出所有和商品香蕉有关系的订单或买家,返回这些点的价格,销量","g.V().has('goods', 'name', '香蕉').bothE().otherV().hasLabel(within('orders', 'buyer')).project('price', 'sellerNumber').by(values('price')).by(values('sellerNumber'))"
请帮我查找person的1度以内的环,"g.V().hasLabel('person').as('a').both().as('b').where('a', eq('b')).by(T.id).select('a', 'b').by('id').by('id')"
查询徐建国出发，通过拥有标签的边，走三步可达的账号点,"g.V().has('person', 'name', '徐建国').repeat(out('own')).times(3).hasLabel('account')"
"返回被repository has数量大于20的user,记为relationCount,再查询这些user has的issue","g.V().hasLabel('user').as('a').project('user', 'relationCount').by(identity()).by(bothE('has').hasLabel('repository').count()).where(select('relationCount').is(gt(20))).select('user').outE('has').hasLabel('issue').inV()"
查找前32个类型是属于的边,g.E().hasLabel('belong').limit(32)
"帮我查询和person赵伟有关的person,再帮我查询和赵伟投资的其他公司,返回它们","g.V().hasLabel('person').has('name', '赵伟').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('invest').inV().hasLabel('company').as('c').select('a', 'b', 'c')"
 查找孙建国写的书，返回书名、创建时间和ID。,"g.V().has('author', 'name', '孙建国').out('write').as('b').out('relates').as('c').select('c').by(values('name', 'createTime', 'id'))"
请帮我找出与赵轩有关的人，包括他知道和他相关的人，并将他们一起返回。,"g.V().has('name', '赵轩').as('a').bothE('knows', 'relates').otherV().hasLabel('person').as('b', 'c').select('a', 'b', 'c')"
"以'zy', 0作为输入调用triangleCount函数,返回运算结果","g.call(""triangleCount"").with(""label"", ""zy"").with(""threshold"", 0).select(""number"")"
"请帮我找出与名为赵若涵和杜建国的点共同创造的,类型为处方的节点","g.V().has('name', '赵若涵').outE('creates').inV().hasLabel('prescription').as('b').inE('creates').outV().has('name', '杜建国').select('b')"
"用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查找被部门计算机学院拥有的学生","g.V().hasLabel('department').has('name', '计算机学院').as('b').outE('department_has_student').as('e').inV().hasLabel('student').as('a').select('a', 'b')"
"请帮我找出与person有关系的person节点,且person节点的height为空,并返回这些person的height除180的个数,以及person的age除age的值","g.V().hasLabel('person').as('a').outE().as('e').inV().hasLabel('person').has('height', eq(null)).as('b').select('b').by(values('height').is(neq(null)).choose(values('height'), constant(0), constant(1)).fold().count(local)).by(values('age').is(neq(null)).choose(values('age'), constant(1), constant(null)))"
"用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出名为泰坦尼克号的点has的所有tag,并对这些点的name进行求和","g.V().has('film', 'name', '泰坦尼克号').out('film_has_tag').hasLabel('tag').values('name').sum()"
"查找43个名为黄强的点撰写的label为书的节点,且节点名字是三体或id等于50","g.V().has('name', '黄强').outE('write').inV().hasLabel('book').has('name', '三体').or().has('id', 50).limit(43)"
查询94个与英国和越南都存在关系的公司节点,"g.V().has('name', '英国').outE().inV().hasLabel('company').as('b').inE().outV().has('name', '越南').select('b').limit(94)"
请帮我查找标签为病人或部门的点,"g.V().hasLabel(within('patient', 'department'))"
返回账户转账的账户ID，以及该账户的BIN转账。,"g.V().has('account', 'name', 'BIN').outE('transfer').inV().hasLabel('account').outE('transfer').inV().hasLabel('account').values('id')"
"帮我查询用户的伙伴,或其伙伴的伙伴","g.V().hasLabel('user').as('a').outE('partner').inV().range(1, 2).as('b').select('b')"
找出与用户王梅有喜欢关系，并且与标签其他有拥有关系的帖子。返回这些帖子的ID、名称、字数以及用户王梅的ID和标签其他的名字。,"g.V().hasLabel('user').has('name', '王梅').as('a').outE('likes').inV().hasLabel('post').as('b').inE('has').outV().hasLabel('tag').has('name', '其他').as('c').select('a', 'b', 'c').by('id').by('id').by('name').by('wordCount').by('name').project('a.id', 'b.id', 'b.name', 'b.wordCount', 'c.name').by(select('a')).by(select('b')).by(select('b')).by(select('b')).by(select('c'))"
"请帮我找出全部和名为日本的country有partner关系,或有partner的partner关系的city","g.V().has('country', 'name', '日本').repeat(out('partner')).times(2).hasLabel('city').dedup()"
"请帮我查找电影院上映的电影, 令电影的名字的值等于上映电影的电影院的id的数量, 再查找电影拥有的标签","g.V().hasLabel('cinema').as('a').outE('releases').as('e').inV().hasLabel('film').as('b').project('name', 'd').by(__.in('releases').hasLabel('cinema').values('id').count()).by(__.out('has').hasLabel('tag').fold()).select('name', 'd')"
"查找和标签等于person的点有属于关系的公司,且和这些公司有雇佣关系的person,且和这些person有提交关系的软件",g.V().hasLabel('person').as('a').outE('belong').hasLabel('belong').inV().hasLabel('company').as('b').inE('employee').hasLabel('employee').outV().hasLabel('person').as('c').outE('commits').hasLabel('commits').inV().hasLabel('software').as('d').select('d')
"根据id,price,name分组,计算id除id的最小值","g.V().hasLabel('a').group().by(project('id', 'price', 'name').by('id').by('price').by('name')).by(values('id').math('_ / _').min())"
价值加价值的值,g.V().hasLabel('a').project('result').by(values('value').sum(local))
 查询与何梅和吴若涵有关联的人，返回它们的ID和身高。,"g.V().has('person', 'name', '何梅').as('a').outE().as('e').inV().hasLabel('person').as('b').inE().as('e2').outV().has('person', 'name', '吴若涵').as('c').select('b').values('id', 'height')"
"输入请求点id的列表217,233,286,582,432, 源点的id等于输入表id,给出与teacher周梅有关系的student的height","g.inject([217, 233, 286, 582, 432]).as('p').V().hasLabel('teacher').as('a').where(eq('p')).by('id').by().has('name', '周梅').bothE().as('e').otherV().hasLabel('student').as('b').select('b').values('height')"
"帮我查询全部和company华为有关系的loan或account或company,返回这些点的amount","g.V().has('company', 'name', '华为').bothE().otherV().hasLabel(within('loan', 'account', 'company')).values('amount')"
 哪个部门与学生周科有关系？,"g.V().hasLabel('student').has('name', '周科').inE('has').outV().hasLabel('department')"
"找出与person黄科存在lover关系,且与person陈思思存在colleague关系的person节点，返回这些person的gender,name,及person黄科的gender,及person陈思思的height","g.V().has('person', 'name', '黄科').as('a').out('lover').hasLabel('person').as('b').in('colleague').has('person', 'name', '陈思思').as('c').select('a', 'b', 'c').by('gender').by(values('gender', 'name')).by('height')"
"请帮我找出全部与吴轩存在父母关系的person,person与person存在同事关系的点,返回这些点的年龄","g.V().has('name', '吴轩').out('parent').hasLabel('person').out('colleague').hasLabel('person').values('age')"
 找出李梅认识的所有人和与李梅有关联的人，然后一起返回。,"g.V().has('name', '李梅').as('a').outE('knows').inV().hasLabel('person').as('b').select('a').inE('relates').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"根据名字,id,价格分组,计算价格加142.30的值","g.V().hasLabel('a').group().by(project('name', 'id', 'price').by('name').by('id').by('price')).by(values('price').math('_ + 142.30'))"
 请问华中科技大学和重庆大学共同拥有的部门节点是什么？,"g.V().has('name', '华中科技大学').out('has').hasLabel('department').as('b').in('has').has('name', '重庆大学').select('b')"
 请问能否提供浙江大学各个部门及其教师的ID、年龄和薪资信息？,"g.V().has('university', 'name', '浙江大学').out('has').hasLabel('department').out('has').hasLabel('teacher').project('id', 'age', 'salary').by('id').by('age').by('salary')"
 请帮我查找32个与类型为'论坛'的地点有包含关系的帖子，并且这些帖子与包含它们的地点有'拥有'关系（即有标签）。,g.V().hasLabel('forum').as('a').outE('contain').as('e').inV().hasLabel('post').as('b').outE('has').as('e2').inV().hasLabel('tag').as('c').select('c').limit(32)
id减61的值,g.V().has('id').project('result').by(values('id').math('_ - 61'))
"查找person提交的软件,返回其源点的年龄除年龄的值,以及目标点的价值乘712的平均值","g.V().hasLabel('person').as('a').outE('commits').as('e').inV().hasLabel('software').as('b').project('expr1', 'expr2').by(select('a').values('age').math('_ / _')).by(select('b').values('value').math('_ * 712').mean())"
请帮我查找以拥有关系关联了学生陈若涵的部门,"g.V().hasLabel('student').has('name', '陈若涵').inE('has').outV().hasLabel('department')"
"返回id为97的person有关的person的friend, 再返回和person有关系的colleague","g.V().has('person', 'id', 97).as('a').bothE().otherV().hasLabel('person').as('b').both().hasLabel('person').as('c').select('b').bothE('friend').otherV().hasLabel('person').as('c').select('b').bothE('colleague').otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"查询标签为国家,名为澳大利亚的点,返回这些点的价值,名字,id","g.V().hasLabel('country').has('name', '澳大利亚').project('a.value', 'a.name', 'a.id').by(values('value')).by(values('name')).by(values('id'))"
"查询person韩月knows的person,被其他person relates的数量","g.V().has('person', 'name', '韩月').out('knows').in('relates').dedup().count()"
 找出与韩梅和韩若涵有关联的人，并返回他们的身高。,"g.V().has('person', 'name', '韩梅').outE().inV().hasLabel('person').as('b').inE().outV().has('person', 'name', '韩若涵').select('b').values('height')"
"找出前59个名字是南京大学或名字大于等于1,且名字是华中科技大学的大学","g.V().hasLabel('university').has('name', '华中科技大学').limit(59)"
查找所有与person孙建聪有关系的loan的weight,"g.V().has('person', 'name', '孙建聪').bothE().otherV().hasLabel('loan').values('weight')"
请帮我查找与id为149的贷款有关的人的朋友，再帮我查找与这个人有关系的朋友。,"g.V().has('loan', 'id', '149').as('a').bothE().otherV().hasLabel('person').as('b').bothE('friend').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
给出前121个满足条件name不等于其他或name等于科幻的tag,"g.V().hasLabel('tag').or(has('name', neq('其他')), has('name', '科幻')).limit(121)"
"找出名为赵思思和Bob的,label为person的点公共的伙伴节点的名单","g.V().hasLabel('person').has('name', '赵思思').outE('partner').inV().as('b').inE('partner').outV().hasLabel('person').has('name', 'Bob').select('b').values('name')"
"返回类型为读者,名为陈建聪的点,返回这些点的身高","g.V().hasLabel('reader').has('name', '陈建聪').values('height')"
提供与腾讯有申请关系的贷款，以及与腾讯相关联的贷款。,"g.V().hasLabel('company').has('name', '腾讯').as('a').outE('apply').inV().hasLabel('loan').as('b').select('a').inE('apply').outV().hasLabel('loan').as('c').select('a', 'b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出帖子以字数,id,语言分组的字数, 根据字数从小到大排序","g.V().hasLabel('post').group().by(project('wordCount', 'id', 'lang').by('wordCount').by('id').by('lang')).select(values).unfold().order().by(select('wordCount'), asc)"
"找出全部orders的relation,或其relation的relation",g.V().hasLabel('orders').out('relation').out('relation').dedup()
 查找与软件ID为55的公司的合作伙伴，再查找与该公司的合作伙伴有关系的公司。,"g.V().has('software', 'id', '55').as('a').bothE().otherV().hasLabel('company').as('b').bothE('partner').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"请帮我查找和person吴伟有关系的person,返回这些点的名字,性别","g.V().has('person', 'name', '吴伟').bothE().otherV().hasLabel('person').project('b.name', 'b.gender').by('name').by('gender')"
给出所有名为郑红的节点watch的comment或person,"g.V().has('name', '郑红').outE('watch').inV().hasLabel(within('comment', 'person')).dedup()"
id除id的值,g.V().hasLabel('a').project('result').by(math('_ / _').by(values('id')).by(values('id')))
"以413作为请求点id, 源点的id等于输入表id,找出department has的student,返回其源点的value减341的值,以及目标点的age的最大值对99取余对169取余的值","g.withSideEffect('p', [413]).V().hasLabel('department').as('a').where(__.values('id').is(__.select('p'))).outE('department_has_student').inV().hasLabel('student').as('b').select('a', 'b').by('value').by('age').project('expr1', 'expr2').by(__.select('a').math('_ - 341')).by(__.select('b').fold().project('max_age').by(__.max()).select('max_age').math('_ % 99 % 169'))"
"根据id,价格,名字分组,计算价值对价值取余的值","g.V().hasLabel('a').group().by(project('id', 'price', 'name').by('id').by('price').by('name')).by(values('value').math('_ / _').by(constant(1)).by('value'))"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));查找city北京belong的country,被其他city belong的数量","g.V().has('city', 'name', '北京').out('city_belong_country').in('city_belong_country').where(neq('北京')).count()"
帮我查询所有与国家日本有关系的国家的人数,"g.V().has('country', 'name', '日本').bothE().otherV().hasLabel('country').values('peopleNumber')"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回8个与韩月和郑梅都存在关系的person节点","g.V().has('name', '韩月').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '郑梅').select('b').limit(8)"
查找卖家的1跳以内的环,"g.V().hasLabel('seller').as('a').bothE().otherV().where(within('a')).select('a').by('id').project('a.id', 'b_id').by(select('a')).by(select('a').id())"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));给出与国家中国有country_contain_city关系的2跳以内的环","g.V().hasLabel('country').has('name', '中国').as('a').bothE('country_contain_city').otherV().bothE('country_contain_city').otherV().where(eq('a')).project('a.id', 'b_id').by(select('a').id()).by(id())"
"给定图的schema如下:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查找名为天涯论坛的,id在5到24之间且salary不为空的relation,返回这些relation的id,和边的srcId,f0,weight","g.V().has('forum', 'name', '天涯论坛').outE('relation').as('e').inV().has('id', between(5, 24)).has('salary', neq(null)).select('e').project('b.id', 'e.srcId', 'e.f0', 'e.weight').by(select('e').inV().values('id')).by(select('e').values('srcId')).by(select('e').values('f0')).by(select('e').values('weight'))"
请帮我找出陈建聪和李雪之间的46个关联。,"g.V().has('doctor', 'name', '陈建聪').as('a').outE('relation').as('e').inV().as('b').inE('relation').as('e2').outV().has('doctor', 'name', '李雪').as('c').select('b').limit(46)"
"帮我查询名为张宏的用户,以及与其有关的标签,并返回张宏的名字和这些标签的id","g.V().has('user', 'name', '张宏').as('a').bothE().otherV().hasLabel('tag').as('b').select('a', 'b').by('name').by('id')"
"输入请求点id的列表355,252,159,956, 源点的id等于输入表id,查询id为154的person关联的person,和以认识关系关联了这些person的其他person","g.inject([355, 252, 159, 956]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('id', '154').bothE().otherV().hasLabel('person').as('b').inE('knows').otherV().hasLabel('person').as('c').select('b', 'c')"
 返回所有与陈雪有创建关系且与功夫电影有关联的评论的ID、创建时间、单词计数和陈雪的ID以及功夫电影的类别。,"g.V().has('person', 'name', '陈雪').as('a').outE('creates').inV().hasLabel('comment').as('b').inE('belong').outV().has('film', 'name', '功夫').as('c').select('a', 'b', 'c').by('id').by('id').by('category').project('a.id', 'b.id', 'b.createTime', 'b.wordCount', 'c.category').by(select('a')).by(select('b')).by(select('b').values('createTime')).by(select('b').values('wordCount')).by(select('c'))"
 查询71号及以上的订单中，买家名字不是郑思思，并取消的订单名称以及包含的商品名称。,"g.V().hasLabel('buyer').has('id', gte(71)).has('name', neq('郑思思')).outE('cancel').inV().hasLabel('orders').as('b').outE('contain').inV().hasLabel('goods').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我找出学生选择的课程,返回其源点的薪资除4838的数量,以及目标点的课时减41乘23的平均值","g.V().hasLabel('student').as('a').outE('selects').as('e').inV().hasLabel('course').as('b').project('count_salary_div', 'avg_courseHour_calc').by(__.select('a').values('salary').math('/ 4838').count()).by(__.select('b').values('courseHour').math('- 41').math('* 23').mean())"
请帮我查找张思思认识的所有人，以及认识张思思的人，并将两者一起返回。,"g.V().has('name', '张思思').as('a').bothE('knows').otherV().hasLabel('person').as('b', 'c').select('a', 'b', 'c')"
查询与病人陈雪和张宏都存在接受关系的点,"g.V().has('patient', 'name', '陈雪').outE('accept').inV().as('b').inE('accept').outV().has('patient', 'name', '张宏').select('b')"
找出马伟认识并由其支付的人,"g.V().has('person', 'name', '马伟').out('knows').out('pay').hasLabel('person')"
"给出和person赵宏有关的电影,称为X,再给出和这个X有关联的其他标签,以及和X有关联的电影院","g.V().has('person', 'name', '赵宏').as('a').bothE().otherV().hasLabel('film').as('b').bothE().otherV().hasLabel('tag').as('c').select('b').bothE().otherV().hasLabel('cinema').as('d').select('a', 'b', 'c', 'd')"
"查找名为杜伟的读者,以及与其有关的书,并返回杜伟的id和这些书的创建时间","g.V().hasLabel('reader').has('name', '杜伟').as('a').bothE().otherV().hasLabel('book').as('b').select('a', 'b').by('id').by('createTime')"
"返回所有源点标签等于seller,目标点标签等于buyer,标签等于goods或seller的边","g.V().hasLabel('seller').outE('goods', 'seller').as('e').inV().hasLabel('buyer').select('e')"
"用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找label为orders_contain_goods,且满足条件targetId为空且f0不为空,f1不等于true的边",g.E().hasLabel('orders_contain_goods').where(__.values('targetId').is(eq(null))).where(__.values('f0').is(neq(null))).where(__.values('f1').is(neq(true)))
"给出李若涵的点喜欢的仓库,然后给出李若涵被拥有的仓库,一起返回","g.V().has('name', '李若涵').as('a').outE('likes').inV().hasLabel('repository').as('b').select('a').inE('has').outV().hasLabel('repository').as('c').select('a', 'b', 'c')"
"输入请求点id的列表634,599,467,982,340, 源点的id等于输入表id,给出被forum CSDN contain的person","g.inject([634, 599, 467, 982, 340]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).as('a').in('forum_contain_person').hasLabel('forum').has('name', 'CSDN').as('b').select('a', 'b')"
"请帮我查找id为14的部门拥有的教师, 并将教师有关的学生的性别的最小值赋值给教师的名字, 接着查询教师的名字小于14的教师教的课程","g.V().has('department', 'id', 14).out('has').hasLabel('teacher').as('b').project('name', 'd').by(__.coalesce(__.in().hasLabel('student').values('gender').min(), __.constant(null))).by(__.where(__.select('name').is(lt(14))).out('teach').hasLabel('course').fold()).select('name', 'd')"
"给出名为loan_43的loan,以及与其有关的company,并返回loan_43的id和这些company的scale","g.V().hasLabel('loan').has('name', 'loan_43').as('a').bothE().otherV().hasLabel('company').as('b').select('a', 'b').by('id').by('scale')"
找出person的3跳以内的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(3).where(loops().is(gt(0))).where(path().unfold().tail(1).is(eq(select('a')))).dedup().project('a.id', 'b_id').by(select('a').id()).by(path().unfold().filter(hasLabel('person')).tail(1).id())"
查询与person吴梅有家人关系的2度以内的环,"g.V().has('person', 'name', '吴梅').as('a').bothE('family').bothV().where(neq('a')).simplePath().by(T.id).times(2).emit().as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"找出全部id为101的公司关联的person,和以雇佣关系关联了这些person的其他公司","g.V().has('company', 'id', 101).bothE().otherV().hasLabel('person').as('b').inE('employee').otherV().hasLabel('company').as('c').select('b', 'c')"
请帮我查找与杭州相关的所有国家，并返回它们。,"g.V().has('city', 'name', '杭州').as('a').bothE().otherV().hasLabel('country').as('b').select('a').outE('belong').inV().hasLabel('country').as('c').select('a', 'b', 'c')"
查询与王雪和Tom都认识的人，返回他们的性别、年龄以及王雪的薪资和Tom的年龄。,"g.V().has('person', 'name', '王雪').as('a').outE('knows').inV().hasLabel('person').as('b').inE('knows').outV().has('person', 'name', 'Tom').as('c').select('a', 'b', 'c').by('salary').by(values('gender', 'age')).by('age')"
"查找和名为南京大学的university有relation关系,或有relation的relation关系的department","g.V().hasLabel('university').has('name', '南京大学').out('relation').hasLabel('department').union(identity(), out('relation').hasLabel('department')).dedup()"
请帮我找出与作家陈红有关系的书的id,"g.V().has('author', 'name', '陈红').bothE().otherV().hasLabel('book').values('id')"
"找出名为悬疑的tag,以及与其有关的user,并返回悬疑的name和这些user的salary","g.V().hasLabel('tag').has('name', '悬疑').bothE().otherV().hasLabel('user').project('a_name', 'b_salary').by(__.select('a').values('name')).by(__.select('b').values('salary')).as('b').select('a', 'b')"
 请问美国和日本这两个国家之间有什么共同点吗？,"g.V().has('country', 'name', '美国').outE('relation').inV().as('b').inE('relation').outV().has('country', 'name', '日本').select('b').limit(132)"
"查找全部读者以名字,年龄分组的id, 根据id降序排序","g.V().hasLabel('reader').group().by(values('name', 'age')).by(id().fold()).order(local).by(keys, desc).unfold().select(values).unfold().order().by(desc)"
"调用personalRank函数,以56作为输入,返回id, value","g.call('PERSONALRANK').with('input', 56).project('id', 'value').by(__.select('id')).by(__.select('value'))"
"请帮我找出卖家王强拥有的商品,以及拥有这些商品的卖家, 令商品的价值等于商品的id减73,令卖家的名字等于卖家的身高,令卖家(c)的性别等于卖家(a)的薪资, 返回卖家(a)的性别,商品(b)的销量,卖家(c)的性别","g.V().has('seller', 'name', '王强').as('a').outE('has').inV().hasLabel('goods').as('b').inE('has').outV().hasLabel('seller').as('c').select('a', 'b', 'c').by(project('gender', 'name').by('gender').by('height')).by(project('sellerNumber').by('sellerNumber')).by(project('gender').by(constant('a.salary'))).select(values).unfold().select('a_gender', 'b_sellerNumber', 'c_gender').by(select('a').select('gender')).by(select('b').select('sellerNumber')).by(select('c').select('gender'))"
 请帮我查找与徐轩和黄建聪有关联的公司的节点，并返回它们的ID和人数。,"g.V().has('person', 'name', '徐轩').outE().inV().hasLabel('company').as('b').inE().outV().has('person', 'name', '黄建聪').select('b').values('id', 'peopleNumber')"
"查询与person有关系的account节点,且account节点的isBlock不等于false,并返回这些account的id减id的值,以及account的id乘6的最小值","g.V().hasLabel('person').as('a').outE().as('e').inV().hasLabel('account').has('isBlock', neq(false)).as('b').project('expr1', 'expr2').by(__.select('b').values('id').math('_ - _')).by(__.select('b').values('id').math('_ * 6').min())"
 查询与纽约有包含关系、与深圳有属于关系的公司节点，返回这些公司的规格、ID、人数，以及纽约的面积和深圳的ID。,"g.V().has('city', 'name', '纽约').as('a').out('contain').hasLabel('company').as('b').in('belong').has('city', 'name', '深圳').as('c').select('a', 'b', 'c').by('area').by(values('scale', 'id', 'peopleNumber').fold()).by('id')"
"查询person的三角的环,边标签为朋友, 并返回这些点的id","g.V().hasLabel('person').as('a').out('friend').as('b').out('friend').as('c').where(__.in('friend').as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
帮我查询与person Tom和赵红都存在watch关系的点,"g.V().has('person', 'name', 'Tom').outE('watch').inV().as('b').inE('watch').outV().has('person', 'name', '赵红').select('b')"
"查找从合并请求PR-105出发,经过类型是属于的边,走3度或4度到达的仓库点","g.V().hasLabel('pullRequest').has('name', 'PR-105').repeat(bothE('belong').otherV().simplePath()).times(3).emit().repeat(bothE('belong').otherV().simplePath()).times(1).hasLabel('repository').dedup()"
找出与外科和急诊部都有关联的33名患者。,"g.V().has('name', '外科').outE().inV().hasLabel('patient').as('b').inE().outV().has('name', '急诊部').select('b').limit(33)"
查找与城市武汉和北京都存在属于关系的点,"g.V().has('city', 'name', '武汉').outE('belong').inV().as('b').inE('belong').outV().has('city', 'name', '北京').select('b')"
"给出软件Redis使用的软件,被其他person购买的数量","g.V().has('software', 'name', 'Redis').out('uses').in('buy').hasLabel('person').count()"
"请帮我查找名为Bilibili的贷款,以及与其有关的公司,并返回Bilibili的名字和这些公司的价值","g.V().hasLabel('loan').has('name', 'Bilibili').as('a').bothE().as('e').otherV().hasLabel('company').as('b').select('a', 'b').by('name').by('value')"
"请帮我找出编辑发布的书,返回其源点的年龄减4的最大值,以及目标点的id加70的值","g.V().hasLabel('publisher').as('a').outE('publish').inV().hasLabel('book').as('b').select('a', 'b').by(values('age')).by(values('id')).project('max_age_minus_4', 'id_plus_70').by(select('a').math('_ - 4').max()).by(select('b').math('_ + 70'))"
请帮我找出与喜剧有关联的电影,"g.V().hasLabel('tag').has('name', '喜剧').inE('has').outV().hasLabel('film')"
 返回韩国与武汉有关系的城市节点，并统计它们的人口和价值。,"g.V().hasLabel('city').has('name', '武汉').as('a').outE().as('e').inV().hasLabel('city').as('b').inE().as('e2').outV().hasLabel('country').has('name', '韩国').as('c').select('b').values('peopleNumber', 'value')"
"请帮我查找陈国强的点认识的person,然后请帮我查找陈国强被关联的person,一起返回","g.V().has('name', '陈国强').as('a').outE('knows').inV().hasLabel('person').as('b').select('a').inE('relates').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
 找出同时与person张强和person黄建聪有关联的人，并返回他们的ID。,"g.V().has('person', 'name', '张强').outE().inV().hasLabel('person').as('b').inE().outV().has('person', 'name', '黄建聪').select('b').id()"
帮我查询所有名为法学院的点has的teacher,"g.V().has('name', '法学院').out('has').hasLabel('teacher')"
查找评论Comment_372属于的电影节点拥有的标签,"g.V().hasLabel('comment').has('name', 'Comment_372').out('belong').hasLabel('film').out('has').hasLabel('tag')"
"给出label为belong,并且f0为空的边","g.E().hasLabel('belong').has('f0', eq(null))"
返回名为周宏的节点喜欢的person,"g.V().has('name', '周宏').outE('likes').inV().hasLabel('person')"
"给出源点标签等于person,边标签等于喜欢的边,返回这些边的源点id除19的最小值,和权重除140.39的值","g.V().hasLabel('person').outE('likes').project('min_srcId_div_19', 'weight_div_140.39').by(__.values('srcId').math('_ / 19').min()).by(__.values('weight').math('_ / 140.39'))"
"请帮我查找和person韩梅有关的person,称为X,再请帮我查找和这个X有关联的其他person,以及和X有关联的person","g.V().has('person', 'name', '韩梅').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"查找与person吴科有关,且与电影西虹市首富有关系的评论节点","g.V().hasLabel('person').has('name', '吴科').bothE('likes').bothV().hasLabel('comment').bothE('belong').bothV().hasLabel('film').has('name', '西虹市首富').select('comment')"
 电子科技大学的课程和其他部门有哪些？,"g.V().has('university', 'name', '电子科技大学').as('a').bothE().as('e').otherV().hasLabel('course').as('b').select('a').outE('has').as('e2').inV().hasLabel('department').as('c').select('a', 'b', 'c')"
返回全部名为Post_482的点拥有的标签,"g.V().has('name', 'Post_482').out('has').hasLabel('tag')"
"返回名为杜梅的,创建时间是2017年08月30日的伙伴,返回这些伙伴的名字,和边的时间戳","g.V().has('name', '杜梅').outE('partner').as('e').inV().has('createTime', '2017-08-30').as('b').select('b', 'e').by('name').by('timeStamp')"
请帮我查找41个与滴滴和美团都存在关系的person或company节点,"g.V().has('name', '滴滴').outE().inV().or(hasLabel('person'), hasLabel('company')).as('b').inE().outV().has('name', '美团').select('b').limit(41)"
"请帮我找出所有合并请求的朋友,或其朋友的朋友","g.V().hasLabel('pullRequest').as('a').outE('friend').inV().range(1, 2).as('b').select('b')"
找出所有从person节点出发，到评论节点结束，并且标签为喜欢的边。,g.V().hasLabel('person').outE('likes').where(inV().hasLabel('comment'))
"输入请求点id的列表601,76, 以属性id作为相等条件,给出源点类型为贷款,目标点类型为账号,类型为loan_deposit_account的边","g.inject([601, 76]).unfold().as('p').V().has('loan', 'id', __.as('p')).outE('loan_deposit_account').as('e').inV().hasLabel('account').select('e')"
"查找label为仓库,名为Kafka的点,返回这些点的星数","g.V().hasLabel('repository').has('name', 'Kafka').values('stars')"
返回所有和person李思琪之间有恋人关系的person,"g.V().hasLabel('person').has('name', '李思琪').outE('lover').inV().hasLabel('person')"
"查询loan的三角的环,边类型为deposit, 并返回这些点的id","g.V().hasLabel('loan').as('a').outE('deposit').inV().as('b').outE('deposit').inV().as('c').where(__.outE('deposit').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
请帮我找出标签等于person的点,g.V().hasLabel('person')
"根据身高分组,计算id除18的值",g.V().hasLabel('a').group().by('height').by(values('id').math('/ 18').fold())
"返回买家创造的订单,返回其源点的id减55的值,以及目标点的id的数量乘57的数量","g.V().hasLabel('buyer').as('a').outE('creates').as('e').inV().hasLabel('orders').as('b').select('a', 'b').by('id').project('expr1', 'expr2').by(select('a').math('_ - 55')).by(select('b').count().math('_ * 57'))"
"请帮我找出源点标签等于person,目标点标签等于comment,标签等于tag或comment或person的边","g.V().hasLabel('person').outE('tag', 'comment', 'person').as('e').inV().hasLabel('comment').select('e')"
"查找类型为用户的所有点,并根据名字升序排列","g.V().hasLabel('user').order().by('name', asc)"
"返回与名为JavaGuid和XXRepo的点共同拥有的,label为事项的节点","g.V().has('name', 'JavaGuid').out('has').hasLabel('issue').as('b').in('has').has('name', 'XXRepo').select('b')"
请帮我找出与我有同事关系的人，他们又与其他人有同事关系，并且这些人之间又有朋友关系。,g.V().hasLabel('person').as('a').outE('colleague').as('e').inV().hasLabel('person').as('b').outE('colleague').as('e2').inV().hasLabel('person').as('c').outE('friend').as('e3').inV().hasLabel('person').as('d').select('d')
查找被编辑王雪发布的书,"g.V().hasLabel('publisher').has('name', '王雪').as('b').outE('publish').as('e').inV().hasLabel('book').as('a').select('a', 'b')"
查找全部标签等于大学或国家或城市的点,"g.V().hasLabel(within('university', 'country', 'city'))"
"使用列为lastLoginTime,isBlock,createTime, 数据为(2009-10-19,false,2015-11-15),(2024-06-30,false,1998-01-19)的子查询作为输入表, 以属性createTime作为相等条件,返回company的3度以内的环","g.withSideEffect('p', [['lastLoginTime':'2009-10-19', 'isBlock':false, 'createTime':'2015-11-15'], ['lastLoginTime':'2024-06-30', 'isBlock':false, 'createTime':'1998-01-19']]).V().hasLabel('company').as('a').where(__.select('a').values('createTime').is(within(__.select('p').unfold().select('createTime')))).repeat(__.out().as('b').where(neq('a')).simplePath()).times(3).where(__.out().as('c').where(eq('a'))).select('a', 'b').by('id').by('id')"
"请帮我查找规格为large的公司创造的软件的名称,以及这些软件 使用的软件的名称","g.V().hasLabel('company').has('scale', 'large').outE('creates').inV().hasLabel('software').as('b').outE('uses').inV().hasLabel('software').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 找出Post_392拥有的标签，以及喜欢Post_392的用户，然后一起返回。,"g.V().has('name', 'Post_392').as('a').out('has').hasLabel('tag').as('b').select('a').in('likes').hasLabel('user').as('c').select('a', 'b', 'c')"
 张轩和何建聪都写过文章。,"g.V().has('author', 'name', '张轩').outE('write').inV().as('b').inE('write').outV().has('author', 'name', '何建聪').select('b')"
 找出名为李强的人，并返回他们的薪资和年龄。,"g.V().has('person', 'name', '李强').project('salary', 'age').by('salary').by('age')"
请帮我找出与person马若涵有支付关系的2度的环,"g.V().has('person', 'name', '马若涵').as('a').outE('pay').inV().as('b').where(__.as('b').out().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
找出大学南京大学拥有的部门节点拥有的学生,"g.V().hasLabel('university').has('name', '南京大学').out('has').hasLabel('department').out('has').hasLabel('student')"
"查找名为美团的点雇佣的person,并对这些person的id进行求和","g.V().has('name', '美团').outE('employee').inV().hasLabel('person').values('id').sum()"
帮我查询被仓库JavaGuid拥有的用户,"g.V().hasLabel('repository').has('name', 'JavaGuid').inE('has').outV().as('b').outE('has').inV().hasLabel('user').as('a').select('a', 'b')"
"找出36个名为中国军事论坛的点contain的label为user的节点,且其age大于等于77","g.V().has('name', '中国军事论坛').out('contain').hasLabel('user').has('age', gte(77)).limit(36)"
 找出部门大小小于88或介于61到90之间的学生，以及他们选择的课程名称。,"g.V().hasLabel('department').has('size', lt(88)).or(__.has('size', between(61, 90))).outE('has').inV().hasLabel('student').as('b').outE('selects').inV().hasLabel('course').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"查询和city武汉有contain关系的company,再查询以belong关系关联了武汉的country","g.V().has('city', 'name', '武汉').as('a').outE('contain').inV().hasLabel('company').as('b').select('a').inE('belong').outV().hasLabel('country').as('c').select('a', 'b', 'c')"
 找出67个人中，周红和李梅共同的友人。,"g.V().has('person', 'name', '周红').outE('friend').inV().as('b').inE('friend').outV().has('person', 'name', '李梅').select('b').limit(67)"
"返回与医生有关系的部门节点,且部门节点的地址不等于C栋,并返回这些部门的id减56加783减权重的值,以及部门的权重乘699的值","g.V().hasLabel('doctor').as('a').outE().as('e').inV().hasLabel('department').has('address', neq('C栋')).as('b').project('expr1', 'expr2').by(__.select('b').values('id').math('_ - 56 + 783 - _').by(values('weight'))).by(__.select('b').values('weight').math('_ * 699'))"
"查询名为ISSUE-422的事项,以及与其有关的仓库,并返回ISSUE-422的状态和这些仓库的权重","g.V().hasLabel('issue').has('name', 'ISSUE-422').bothE().otherV().hasLabel('repository').project('a.status', 'b.weight').by(select('a').values('status')).by(values('weight'))"
 找出CSDN论坛中包含person和知网论坛中包含post的关联，返回两者。,"g.V().has('forum', 'name', 'CSDN').as('a').out('contain').hasLabel('person').as('b').select('a').V().has('forum', 'name', '知网').as('c').out('contain').hasLabel('post').as('d').select('a', 'b', 'c', 'd')"
帮我查询与公司阿里有属于关系的3跳以内的环,"g.V().has('company', 'name', '阿里').as('a').repeat(bothE('belong').otherV().simplePath()).times(2).where(loops().is(gt(0))).where(eq('a')).path().by('id').by('id')"
请帮我找出全部和person陈若涵之间有父母关系的person,"g.V().hasLabel('person').has('name', '陈若涵').outE('parent').inV().hasLabel('person')"
"查找全部帖子以创建时间,id,语言分组的字数, 根据字数从大到小排序","g.V().hasLabel('post').group().by(values('createTime', 'id', 'lang')).by(values('wordCount').fold()).order(local).by(values, desc)"
"找出id为137的公司申请的贷款, 并将贷款有关的贷款的id的数量赋值给贷款(b)的权重, 接着查询贷款(b)的权重小于137的贷款存款的账号","g.V().has('company', 'id', 137).out('apply').as('b').sideEffect(__.project('weight').by(__.in().hasLabel('loan').count()).select('weight').as('b_weight')).select('b').where(__.select('b_weight').is(lt(137))).out('deposit').as('d').select('b_weight', 'd')"
查询全部名为赵思思的点申请的贷款,"g.V().has('name', '赵思思').outE('apply').inV().hasLabel('loan')"
"查找源点类型是订单,目标点类型是商品,类型是订单的边",g.V().hasLabel('orders').outE('orders').as('e').inV().hasLabel('goods').select('e')
找到与Comment_419评论和古代标签相关的电影节点,"g.V().hasLabel('comment').has('name', 'Comment_419').bothE('belong').otherV().hasLabel('film').bothE('has').otherV().hasLabel('tag').has('name', '古代').select('b')"
给出与forum CSDN有contain关系的3度以内的环,"g.V().hasLabel('forum').has('name', 'CSDN').as('a').repeat(bothE('contain').otherV().simplePath()).times(2).where(cyclicPath()).path().unfold().hasLabel('forum').has('name', 'CSDN').as('a').select('a').by('id').as('a_id').select(all, 'a').tail(local, 1).as('b').select('b').by('id').as('b_id').select('a_id', 'b_id')"
找出所有与名为杜建国的用户有伙伴关系，或者有伙伴伙伴关系的帖子。,"g.V().hasLabel('user').has('name', '杜建国').bothE('partner').otherV().hasLabel('post').dedup()"
帮我查询person孙宏belong的company节点creates的software,"g.V().has('person', 'name', '孙宏').out('belong').out('creates')"
找出id为69的点的名字,"g.V().has('id', 69).values('name')"
"请帮我查找前77个名字等于马宏,年龄为43且id大于等于16的person","g.V().hasLabel('person').has('name', '马宏').has('age', 43).has('id', gte(16)).limit(77)"
"给出10个名为马建聪的点likes的标签等于repository的节点,且其lang不等于go或weight为空","g.V().has('name', '马建聪').outE('likes').inV().hasLabel('repository').where(or(has('lang', neq('go')), hasNot('weight'))).limit(10)"
帮我查询公司的2跳的环,"g.V().hasLabel('company').as('a').repeat(both().simplePath()).times(2).where(cyclicPath()).select('a').by('id').project('a.id', 'b_id').by(identity()).by(select('a').both().both().where(eq('a')).dedup().id().fold())"
"找出salary小于等于4或id是57的person likes的comment的名称,以及这些comment belong的film的名称","g.V().hasLabel('person').has('salary', lte(4)).or().has('id', 57).outE('likes').inV().hasLabel('comment').as('b').outE('belong').inV().hasLabel('film').as('c').select('b', 'c').by('name').by('name')"
"帮我查询被买家咨询数量大于41的卖家,记为relationCount,再查询这些卖家咨询的卖家","g.V().hasLabel('seller').as('a').project('a', 'relationCount').by(identity()).by(outE('consult').inV().hasLabel('buyer').dedup().count()).select('a', 'relationCount').as('a_with_count').select('a_with_count').where(select('relationCount').is(gt(41))).select('a').outE('consult').hasLabel('consult').inV().hasLabel('seller').dedup()"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出全部id为8的person关联的person,和以pay关系关联了这些person的其他person","g.V().has('person', 'id', 8).bothE().otherV().hasLabel('person').as('b').inE('person_pay_person').otherV().hasLabel('person').as('c').select('b', 'c')"
 男性身高小于175的公司和它们开发的应用程序。,"g.V().hasLabel('person').has('height', lt(175)).has('gender', 'male').outE('belong').inV().hasLabel('company').as('b').outE('creates').inV().hasLabel('software').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"帮我查询97个公司滴滴和谷歌,共同的伙伴","g.V().has('company', 'name', '滴滴').outE('partner').inV().as('b').inE('partner').outV().has('company', 'name', '谷歌').select('b').limit(97)"
"帮我查询与名为Order_222和Order_403的点共同包含的,类型是商品的节点","g.V().has('name', 'Order_222').outE('contain').inV().hasLabel('goods').as('b').inE('contain').outV().has('name', 'Order_403').select('b')"
"查询名为Tom的person,以及与其有关的person,并返回Tom的id和这些person的薪资","g.V().hasLabel('person').has('name', 'Tom').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('id').by('salary')"
列出所有与城市相关的公司，以及这些城市与其他公司的归属关系。,"g.V().hasLabel('company').has('id', '16').bothE().otherV().hasLabel('city').as('b').inE('belong').outV().hasLabel('company').as('c').select('b', 'c')"
"输入请求点id的列表521,113,7, 源点的id等于输入表id,计算所有course的courseHour减32的值","g.inject([521, 113, 7]).unfold().as('p').V().hasLabel('course').has('id', __.select('p')).values('courseHour').math('_ - 32')"
返回买家何梅查看的商品，其他卖家拥有的数量。,"g.V().has('buyer', 'name', '何梅').out('look').in('has').hasLabel('seller').count()"
"请帮我找出person的三角的环,边标签为提交, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('commits').inV().as('b').outE('commits').inV().as('c').where(__.outE('commits').inV().as('a')).select('a', 'b', 'c').by(id()).by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
"查询id为157的person有关的person的相关者, 再查询和person有关系的朋友","g.V().has('person', 'id', 157).as('a').bothE().otherV().hasLabel('person').as('b').bothE().hasLabel('relation').otherV().as('c').select('b').bothE().hasLabel('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
给出前42个满足条件名字不是法学院或大小为空或大小大于75的部门,"g.V().hasLabel('department').or(has('name', neq('法学院')), hasNot('size'), has('size', gt(75))).limit(42)"
"给出源点类型是电影院,边类型是上映,并且满足条件f1小于等于13,目标点id为47,f1不是true的边","g.V().hasLabel('cinema').outE('releases').has('f1', lte(13)).has('targetId', 47).has('f1', neq(true)).elementMap()"
"帮我查询全部id为185的account关联的account,和以transfer关系关联了这些account的其他account","g.V().has('account', 'id', 185).bothE().otherV().hasLabel('account').as('b').inE('transfer').otherV().hasLabel('account').as('c').select('b', 'c')"
 查找张建国医生开具的处方 Prescription_204 对应的患者节点。,"g.V().hasLabel('doctor').has('name', '张建国').as('a').outE('diagnose').inV().hasLabel('patient').as('b').inE('accept').outV().hasLabel('prescription').has('name', 'Prescription_204').as('c').select('b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找id为14的tag有关的forum的relation, 再请帮我查找和forum有关系的friend","g.V().has('tag', 'id', 14).as('a').bothE().otherV().hasLabel('forum').as('b').bothE('relation').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
找出既与耳鼻喉科又有外科关联的节点。,"g.V().has('department', 'name', '耳鼻喉科').outE('has').inV().where(__.inE('has').outV().has('department', 'name', '外科')).dedup()"
按照性别从小到大，为每个ID分组的人。,"g.V().hasLabel('person').group().by('id').by(values('gender').fold()).order(local).by(values, asc)"
"请帮我找出所有和person点有喜欢关系的评论节点,且边满足条件f0不为空,目标评论节点满足条件id小于等于29","g.V().hasLabel('person').as('a').outE('likes').has('f0', neq(null)).as('e').inV().hasLabel('comment').has('id', lte(29)).as('b').select('b')"
"查找教师的朋友,或其朋友的朋友","g.V().hasLabel('teacher').out('friend').range(1, 2).dedup()"
返回与大学中国科技大学和南京大学都存在属于关系的点,"g.V().has('university', 'name', '中国科技大学').outE('belong').inV().as('b').inE('belong').outV().has('university', 'name', '南京大学').select('b')"
请帮我找出那些apply了loan但salary为空或者name为孙红的person，以及他们对应的loan和loan deposit的account名称,"g.V().hasLabel('person').or(hasNot('salary'), has('name', '孙红')).outE('apply').inV().hasLabel('loan').as('b').outE('deposit').inV().hasLabel('account').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"找出全部源点gender等于male或gender等于male,目标点age大于14,name是马思思,或gender等于famale,且标签为diagnose的边","g.E().hasLabel('diagnose').where(and(__.outV().has('gender', within('male', 'male')), __.inV().where(or(and(has('age', gt(14)), has('name', '马思思')), has('gender', 'famale')))))"
"查询所有和名为周建国的seller有friend关系,或有friend的friend关系的goods","g.V().has('seller', 'name', '周建国').bothE('friend').otherV().repeat(bothE('friend').otherV().simplePath()).times(1).hasLabel('goods').dedup()"
"请帮我找出认识公司腾讯雇佣的person,的person","g.V().hasLabel('company').has('name', '腾讯').outE('employee').inV().hasLabel('person').as('b').inE('knows').outV().hasLabel('person').as('c').select('b', 'c')"
"返回所有id为149的tag关联的post,和以publish关系关联了这些post的其他user","g.V().has('tag', 'id', 149).bothE().otherV().hasLabel('post').as('b').inE('publish').otherV().hasLabel('user').as('c').select('b', 'c')"
"帮我查询write author周强write的book,的author","g.V().has('author', 'name', '周强').outE('write').inV().hasLabel('book').as('b').inE('write').outV().hasLabel('author').as('c').select('b', 'c')"
"返回所有源点标签等于person,目标点标签等于person,标签等于person的边",g.V().hasLabel('person').outE('person').where(inV().hasLabel('person'))
"给出76个和label为person的点有family关系的person,以及和这些person有lover关系的person",g.V().hasLabel('person').as('a').outE('family').inV().hasLabel('person').as('b').outE('lover').inV().hasLabel('person').as('c').select('c').limit(76)
"给出56个用户韩红和杜建国,共同的伙伴","g.V().has('user', 'name', '韩红').outE('partner').inV().as('b').inE('partner').outV().has('user', 'name', '杜建国').select('b').limit(56)"
"返回和教师赵国强有关的部门,再返回和赵国强教的其他课程,返回它们","g.V().has('teacher', 'name', '赵国强').as('a').bothE().otherV().hasLabel('department').as('b').select('a').bothE('teach').otherV().hasLabel('course').as('c').select('a', 'b', 'c')"
"请帮我找出全部源点标签为person,目标点标签为person,标签为person的边","g.E().hasLabel('person').where(and(outV().hasLabel('person'), inV().hasLabel('person')))"
"找出类型为uses,并且targetId小于191,weight等于152.32,targetId不等于193的边","g.E().hasLabel('uses').has('targetId', lt(191)).has('weight', 152.32).has('targetId', neq(193))"
"查询60个和label为大学的点有拥有关系的部门,以及和这些部门有拥有关系的教师",g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('teacher').limit(60)
"给出和名为何强的person有伙伴关系,或有伙伴的伙伴关系的公司","g.V().hasLabel('person').has('name', '何强').bothE('partner').bothV().hasLabel('company').dedup()"
"请帮我查找回答卖家张强回答的买家,的卖家","g.V().hasLabel('seller').has('name', '张强').as('a').outE('ask').as('e').inV().hasLabel('buyer').as('b').inE('ask').as('e2').outV().hasLabel('seller').as('c').select('b', 'c')"
 请帮我找出和读者赵宏有关的书籍，以及和赵宏喜欢的其他书籍相关的书籍。,"g.V().hasLabel('reader').has('name', '赵宏').as('a').bothE().otherV().hasLabel('book').as('b').select('a').outE('likes').inV().hasLabel('book').as('c').select('a', 'b', 'c')"
找出所有读者的朋友，或者他们朋友的朋友,g.V().hasLabel('reader').outE('friend').inV().hasLabel('reader').outE('friend').inV().hasLabel('reader').dedup()
"以793,703,770作为请求点id, 源点的id等于输入表id,查找和forum中国诗词论坛有forum_contain_post关系的post,再查找以forum_contain_person关系关联了中国诗词论坛的person","g.withSideEffect('p', [793, 703, 770]).V().hasLabel('forum').where(and(__.values('id').is(within('p')), __.has('name', '中国诗词论坛'))).as('a').bothE('forum_contain_post').otherV().hasLabel('post').as('b').select('a').bothE('forum_contain_person').otherV().hasLabel('person').as('c').select('a', 'b', 'c')"
请帮我找出与publisher徐梅和何国强都存在publish关系的点,"g.V().has('publisher', 'name', '徐梅').outE('publish').inV().as('b').inE('publish').outV().has('publisher', 'name', '何国强').select('b')"
请帮我找出以还款关系关联了贷款loan_57的账号,"g.V().hasLabel('loan').has('name', 'loan_57').inE('repay').outV().hasLabel('account')"
"调用triangleCount函数,以27, 'YN', 'gw'作为输入,返回运算结果","g.call(""triangleCount"").with(""input1"", 27).with(""input2"", ""YN"").with(""input3"", ""gw"").select(""number"")"
"找出作家黄雪的标签等于伙伴的边,并根据权重升序排列,返回166个","g.V().has('author', 'name', '黄雪').outE('partner').order().by('weight', asc).limit(166).inV()"
"找出person王宏likes的person,以及likes这些person的person, 令person的salary等于person的gender的最大值,令person的id等于person的gender的平均值,令person(b)的height等于person(a)的gender, 返回person(a)的age,person(b)的name,person(c)的salary","g.V().has('person', 'name', '王宏').as('a').outE('likes').inV().hasLabel('person').as('b').inE('likes').outV().hasLabel('person').as('c').select('a', 'b', 'c').by(values('age')).by(values('name')).by(project('salary').by(select('c').values('gender').max())).project('a_age', 'b_name', 'c_salary').by(select('a')).by(select('b')).by(select('c').select('salary'))"
"请帮我查找学生选择的课程,返回其源点的年龄对2取余的平均值,以及目标点的学分乘1的值","g.V().hasLabel('student').as('a').outE('selects').as('e').inV().hasLabel('course').as('b').select('a', 'b').by(values('age').fold().math('_ / 2').math('_ % 1')).by(values('credit').math('_ * 1')).select(values).unfold().group().by(select('b')).by(select('a').mean()).select(values).unfold().project('avg_age_mod_2', 'credit_times_1').by(select(keys).select('a')).by(select(values).select('b'))"
找出153个与阿里和微软都存在关系的大学或国家节点,"g.V().has('name', '阿里').outE().inV().or(hasLabel('university'), hasLabel('country')).as('b').inE().outV().has('name', '微软').select('b').limit(153)"
"查询源点标签等于doctor,边标签等于belong的边,返回这些边的f0的最小值除749的和,和weight对194.92取余的值","g.V().hasLabel('doctor').outE('belong').as('e').project('sum_min_f0_div_749', 'weight_mod_194_92').by(__.select('e').values('f0').min().is(neq(null)).math('_ / 749').sum()).by(__.select('e').values('weight').math('_ % 194.92'))"
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询名为腾讯的company,以及与其有关的university,并返回腾讯的peopleNumber和这些university的id","g.V().hasLabel('company').has('name', '腾讯').as('a').bothE().otherV().hasLabel('university').as('b').select('a', 'b').by('peopleNumber').by('id')"
找出前30个id的数量小于8721的作家,g.V().hasLabel('author').groupCount().by('id').unfold().filter(select(values).is(lt(8721))).select(keys).limit(30)
"以(262,'微软','large'),(260,'微软','small')作为请求表数据,属性分别为value,name,scale, 源点的name等于输入表name,查找满足条件gender不是male的节点","g.inject([['value':262,'name':'微软','scale':'large'],['value':260,'name':'微软','scale':'small']]).as('p').unfold().as('p_row').select('p_row').by().V().has('name', __.select('p_row').select('name')).has('gender', neq('male')).as('a').select('a')"
"给出17个和类型为账号的点有还款关系的贷款,且和这些贷款有存款关系的账号",g.V().hasLabel('account').as('a').outE('repay').as('e').inV().hasLabel('loan').as('b').inE('deposit').as('e2').outV().hasLabel('account').as('c').select('c').limit(17)
"输入表的列为name,age,gender, 数据为('孙红',33,'famale'), 源点的name等于输入表name,找出person何科的所有标签等于family的边,并根据targetId升序排列,返回19个","g.withSideEffect('p', [['name':'孙红','age':33,'gender':'famale']]).V().hasLabel('person').has('name', '何科').outE('person_family_person').order().by('targetId', asc).limit(19).inV()"
"请帮我找出所有名为马思琪的点的,身高在155到184之间,身高大于157的家人,返回这些家人的年龄,和边的目标点id,权重,f0","g.V().has('name', '马思琪').outE('family').as('e').inV().has('height', between(155, 184)).has('height', gt(157)).project('b.age', 'e.targetId', 'e.weight', 'e.f0').by(values('age')).by(select('e').values('targetId')).by(select('e').values('weight')).by(select('e').values('f0'))"
 找北京大学朋友的朋友,"g.V().has('university', 'name', '北京大学').out('friend').out('friend').out('partner')"
"返回141个名为谷歌的点雇佣的类型为person的节点,且节点年龄小于等于7或名字等于马国强","g.V().has('name', '谷歌').outE('employee').inV().hasLabel('person').has('age', lte(7)).or().has('name', '马国强').limit(141)"
"给出从课程计算机体系结构出发,经过类型为属于的边,走3度到达的部门点","g.V().has('course', 'name', '计算机体系结构').repeat(outE('belong').inV()).times(3).hasLabel('department')"
 请帮我找出黄建聪和赵建国这两个名为买家的点公共伙伴节点的名单。,"g.V().has('buyer', 'name', '黄建聪').as('a').outE('partner').inV().as('b').inE('partner').outV().has('buyer', 'name', '赵建国').as('c').select('b').values('name')"
返回赵强和张若涵共同申请的贷款节点,"g.V().has('name', '赵强').outE('apply').inV().hasLabel('loan').as('b').inE('apply').outV().has('name', '张若涵').select('b')"
" 返回论坛中国军事论坛中包含person's,以及和用户何建聪有like关系的帖子。","g.V().hasLabel('forum').has('name', '中国军事论坛').as('a').outE('contain').inV().hasLabel('person').as('b').select('a').V().hasLabel('user').has('name', '何建聪').as('c').outE('likes').inV().hasLabel('post').as('d').select('a', 'b', 'c', 'd')"
查询person杜强观看的电影节点拥有的标签,"g.V().hasLabel('person').has('name', '杜强').out('watch').hasLabel('film').out('has').hasLabel('tag')"
"帮我查询类型为用户,名为李建聪的点,返回这些点的薪资,名字,id","g.V().hasLabel('user').has('name', '李建聪').project('salary', 'name', 'id').by('salary').by('name').by('id')"
 请帮我找出8个与标签为'人'的物品有'喜欢'关系的评论，并且这些评论与属于它们的影片相关。,g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('comment').as('b').outE('belong').as('e2').inV().hasLabel('film').as('c').select('c').limit(8)
"返回标签为喜欢,且目标点id是157或f1为false的边","g.E().hasLabel('likes').or(has('targetId', 157), has('f1', false))"
查询与film复仇者联盟和建国大业都存在has关系的点,"g.V().hasLabel('film').has('name', '复仇者联盟').outE('has').inV().as('b').inE('has').outV().hasLabel('film').has('name', '建国大业').select('b')"
按性别和ID对person进行分组，然后按照ID从大到小排序。,"g.V().hasLabel('person').group().by(values('gender', 'id')).order(local).by(keys, desc)"
"查询所有和department点有has关系的teacher节点,且边满足条件srcId大于等于198.46,目标teacher节点满足条件id是27","g.V().hasLabel('department').outE('has').has('srcId', gte(198.46)).inV().hasLabel('teacher').has('id', 27)"
"查找所有id为79的作家关联的书,和以发布关系关联了这些书的其他编辑","g.V().has('author', 'id', 79).bothE().otherV().hasLabel('book').as('b').inE('publish').otherV().hasLabel('publisher').as('c').select('b', 'c')"
"请帮我找出名字是杜国强,年龄在43到65之间,或年龄为空的节点","g.V().has('name', '杜国强').or(has('age', between(43, 65)), hasNot('age')).elementMap()"
查询所有与person孙雪有关系的person的name,"g.V().hasLabel('person').has('name', '孙雪').bothE().otherV().hasLabel('person').values('name')"
请帮我找出与'university'标签相关的部门，以及这些部门与学生之间的'has'关系，以及这些学生与课程之间的'selects'关系。,g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('student').out('selects').hasLabel('course')
"请帮我查找处方的三角的环,边类型是包含, 并返回这些点的id","g.V().hasLabel('prescription').as('a').outE('contain').inV().as('b').outE('contain').inV().as('c').where(outE('contain').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"找出和大学浙江大学有关的教师,再找出和浙江大学拥有的其他部门,返回它们","g.V().has('university', 'name', '浙江大学').as('a').bothE().otherV().hasLabel('teacher').as('b').select('a').outE('has').inV().hasLabel('department').as('c').select('a', 'b', 'c')"
"查询label为同事,并且满足条件源点id大于等于27,目标点id的最大值等于2,或f0大于等于521的边","g.E().hasLabel('colleague').or(and(has('srcId', gte(27)), values('targetId').max().is(2)), has('f0', gte(521)))"
找出与用户'李科'有发表关系的帖子，以及与论坛'知乎'有关联的人，并返回它们。,"g.V().has('user', 'name', '李科').as('a').out('publish').as('b').select('a').V().has('forum', 'name', '知乎').as('c').out('contain').as('d').select('a', 'b', 'c', 'd')"
"用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出前93个label为forum_contain_post的边",g.E().hasLabel('forum_contain_post').limit(93)
找出与王强老师有关联的部门,"g.V().hasLabel('teacher').has('name', '王强').inE('has').outV().hasLabel('department')"
"使用列为value,lastLoginTime,createTime, 数据为(544,2003-12-08,2001-05-09)的子查询作为输入表, 源点的lastLoginTime等于输入表lastLoginTime,请帮我找出和类型是公司的点有company_apply_loan关系的贷款,以及和这些贷款有loan_deposit_account关系的账号,以及和这些账号有account_repay_loan关系的贷款","g.withSideEffect('p', [['value':544, 'lastLoginTime':'2003-12-08', 'createTime':'2001-05-09']]).V().hasLabel('company').has('lastLoginTime', __.select('p').unfold().select('lastLoginTime')).outE('company_apply_loan').inV().hasLabel('loan').as('b').outE('loan_deposit_account').inV().hasLabel('account').as('c').outE('account_repay_loan').inV().hasLabel('loan').as('d').select('d')"
查找全部与贷款loan_90有关系的公司的价值,"g.V().hasLabel('loan').has('name', 'loan_90').bothE().otherV().hasLabel('company').values('value')"
请帮我找出和person孙伟之间有观看关系的电影,"g.V().hasLabel('person').has('name', '孙伟').outE('watch').inV().hasLabel('film')"
帮我查询徐建国的同事朋友的恋人,"g.V().has('person', 'name', '徐建国').outE('colleague').inV().outE('friend').inV().outE('lover').inV()"
"请帮我查找类型为标签,名为历史的点,返回这些点的名字","g.V().hasLabel('tag').has('name', '历史').values('name')"
"查找142个名为Sam的点knows的类型为person的节点,且节点gender为male或salary大于等于1680","g.V().has('name', 'Sam').outE('knows').inV().hasLabel('person').or(has('gender', 'male'), has('salary', gte(1680))).limit(142)"
查找35个与韩月和徐轩都存在关系的film或person或cinema节点,"g.V().has('name', '韩月').as('a').outE().as('e').inV().has(label, within('film', 'person', 'cinema')).as('b').inE().as('e2').outV().has('name', '徐轩').as('c').select('b').limit(35)"
"输入请求点id的列表732,14, 以属性id作为相等条件,请帮我找出所有id为12的药品关联的病人,和以诊断关系关联了这些病人的其他医生","g.withSideEffect('p', [732, 14]).V().hasLabel('medicine').has('id', within('p')).has('id', '12').bothE().otherV().hasLabel('patient').as('b').inE('doctor_diagnose_patient').otherV().hasLabel('doctor').as('c').select('b', 'c')"
"输入请求点id的列表981, 源点的id等于输入表id,查找名为经管学院的部门,以及与其有关的课程,并返回经管学院的名字和这些课程的名字","g.withSideEffect('p', [[981]]).V().hasLabel('department').as('a').where(and(__.values('id').is(eq(__.select('p').unfold())), __.values('name').is(eq('经管学院')))).bothE().as('e').otherV().hasLabel('course').as('b').select('a', 'b').by('name').by('name')"
请帮我找出前135个人数不等于618的公司,"g.V().hasLabel('company').has('peopleNumber', neq(618)).limit(135)"
"查找名为孙国强的,身高不为空或名字为陈若涵的同事,返回这些同事的名字,和边的权重,f0,源点id","g.V().has('name', '孙国强').outE('colleague').as('e').inV().as('b').where(or(has('height', neq(null)), has('name', '陈若涵'))).select('b', 'e').by('name').by(project('weight', 'f0', 'srcId').by('weight').by('f0').by('srcId'))"
"调用KHOP函数,以16, 'Po'作为输入,返回运算结果","g.call('KHOP').with('input1', 16).with('input2', 'Po').select('id', 'kValue')"
找出person韩宏和张月都喜欢的点,"g.V().hasLabel('person').has('name', '韩宏').outE('likes').inV().as('b').inE('likes').outV().hasLabel('person').has('name', '张月').select('b')"
"返回和类型为公司的点有属于关系的城市,并且和这些城市有包含关系的公司,并且和这些公司有合作关系的大学",g.V().hasLabel('company').as('a').out('belong').hasLabel('city').as('b').in('contain').hasLabel('company').as('c').out('cooperate').hasLabel('university').as('d').select('d')
请帮我找出与person李思琪有关系的person的age,"g.V().has('person', 'name', '李思琪').bothE().otherV().hasLabel('person').values('age')"
请帮我找出全部名为腾讯的点属于的城市,"g.V().has('name', '腾讯').out('belong').hasLabel('city')"
请帮我查找医生马强诊断过的病人，返回病人接受的处方的名称、ID和重量。,"g.V().hasLabel('doctor').has('name', '马强').outE('diagnose').inV().hasLabel('patient').outE('accept').inV().hasLabel('prescription').project('c.name', 'c.id', 'c.weight').by(values('name')).by(values('id')).by(values('weight'))"
 请帮我查找与赵月有关联的公司，以及与贷款违约名称有关的存款账户，并返回它们。,"g.V().has('person', 'name', '赵月').as('a').out('invest').as('b').select('a').V().has('loan', 'name', 'defaultName').as('c').out('deposit').as('d').select('a', 'b', 'c', 'd')"
找出与repository XXRepo有关系的user的name,"g.V().has('repository', 'name', 'XXRepo').bothE().otherV().hasLabel('user').values('name')"
 返回与teacher节点关联的course节点，并按value和credit分组。,"g.V().hasLabel('teacher').bothE('teach').otherV().hasLabel('course').group().by(values('value', 'credit')).by(__.valueMap().select('value', 'credit'))"
找出与徐红和马伟有关的处方节点，返回它们的权重和名称。,"g.V().has('user', 'name', '徐红').outE().inV().hasLabel('prescription').as('b').inE().outV().has('user', 'name', '马伟').select('b').project('weight', 'name').by('weight').by('name')"
"请帮我查找名为李宏和黄轩的,标签为teacher的点公共的friend节点的名单","g.V().has('teacher', 'name', '李宏').out('friend').as('b').in('friend').has('teacher', 'name', '黄轩').select('b').values('name')"
"给出7个名为Redis的点uses的类型是software的节点,且其id小于60","g.V().has('name', 'Redis').outE('uses').inV().hasLabel('software').has('id', lt(60)).limit(7)"
"根据名字,性别分组,计算height的数量加身高乘7855的最小值","g.V().hasLabel('a').group().by('name').by(group().by('gender').by(project('count', 'height').by(values('height').count()).by(values('height')).math('(count + height) * 7855').min()))"
"返回被电影建国大业拥有的标签,和建国大业拥有的标签","g.V().has('film', 'name', '建国大业').as('b').bothE('has').otherV().hasLabel('tag').as('a', 'c').select('a', 'b', 'c')"
 返回医生诊断为空或身高在178到180之间的患者名称，以及他们接受的处方名称。,"g.V().hasLabel('doctor').or(hasNot('salary'), has('height', between(178, 180))).outE('diagnose').inV().hasLabel('patient').as('b').outE('accept').inV().hasLabel('prescription').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
人数加人数的值,g.V().hasLabel('a').project('result').by(values('peopleNumber').sum(local))
"查找person韩月提交的软件,被其他person提交的数量","g.V().has('person', 'name', '韩月').outE('commits').inV().hasLabel('software').inE('commits').outV().hasLabel('person').count()"
"查找名为黄若涵的点knows的全部author,并对这些author的name进行求和","g.V().has('name', '黄若涵').out('knows').hasLabel('author').values('name').sum()"
"输入请求点id的列表548,513,264,260,182, 以属性id作为相等条件,查找全部teacher以gender分组的age, 根据age从小到大排序","g.inject([548, 513, 264, 260, 182]).unfold().as('id').V().hasLabel('teacher').has('id', __.as('id')).values('age', 'gender').group().by('gender').by(__.values('age').order().fold())"
"帮我查询类型是film的点,返回116个",g.V().hasLabel('film').limit(116)
获取黄雪买家创建的订单中包含的商品节点,"g.V().hasLabel('buyer').has('name', '黄雪').out('creates').hasLabel('orders').out('contain').hasLabel('goods')"
"查找149个名为杜建聪的点观看的标签等于电影的节点,且节点价值在497到893之间或id小于72","g.V().has('name', '杜建聪').outE('watch').inV().hasLabel('film').or(has('value', between(497, 893)), has('id', lt(72))).limit(149)"
"使用列为age,gender,salary, 数据为(76,'male',7896),(7,'famale',2682),(97,'male',7296)的子查询作为输入表, 以属性gender作为相等条件,帮我查询标签为读者的点,并根据名字升序排列","g.inject([['age':76,'gender':'male','salary':7896],['age':7,'gender':'famale','salary':2682],['age':97,'gender':'male','salary':7296]]).unfold().as('p').V().hasLabel('reader').as('a').where(eq('a')).by('gender').by(select('p').select('gender')).order().by('name').select('a')"
"给出与名为法学院和土木学院的点共同has的,类型为student的节点","g.V().has('name', '法学院').out('has').hasLabel('student').as('b').in('has').has('name', '土木学院').select('b')"
"给出病人王月接受的处方,以及接受这些处方的病人","g.V().has('patient', 'name', '王月').outE('accept').inV().hasLabel('prescription').as('b').inE('accept').outV().hasLabel('patient').as('c').select('b', 'c')"
"输入表的列为id,level,name, 数据为(90,2,'电子科技大学'),(52,1,'南京大学'),(15,2,'浙江大学'), 以属性name作为相等条件,请帮我找出与名为何思思和赵科的点共同教的,label为课程的节点","g.V().has('name', '何思思').outE('teacher_teach_course').inV().hasLabel('course').as('b').inE('teacher_teach_course').outV().has('name', '赵科').select('b')"
"输入表的列为id,amount,weight, 数据为(37,9369.21,893),(75,2407.24,77),(45,9611.96,51), 源点的id等于输入表id,返回和loan defaultName有关的account,再返回和 defaultName loan_deposit_account的其他account,返回它们","g.withSideEffect('p', [[id:37, amount:9369.21, weight:893], [id:75, amount:2407.24, weight:77], [id:45, amount:9611.96, weight:51]]).V().hasLabel('loan').where(__.as('a').values('id').where(__.as('id').is(within(__.select('p').unfold().values('id'))))).has('name', 'defaultName').as('a').bothE().as('e').otherV().hasLabel('account').as('b').select('a').outE('loan_deposit_account').as('e2').inV().hasLabel('account').as('c').select('a', 'b', 'c')"
给出前85个标签等于引用的边,g.E().hasLabel('refers').limit(85)
请帮我找出与TheShy有关的人的朋友,"g.V().has('account', 'name', 'TheShy').out('relation').out('relation').out('friend')"
查询前146个id小于等于81的city,"g.V().hasLabel('city').has('id', lte(81)).limit(146)"
查询所有标签为person的点，按照age升序排序。,"g.V().hasLabel('person').order().by('age', asc)"
 返回赵若涵和周雪的共同朋友，共有169个。,"g.V().has('person', 'name', '赵若涵').out('friend').as('b').in('friend').has('person', 'name', '周雪').select('b').limit(169)"
查找和书百年孤独之间有引用关系的书,"g.V().hasLabel('book').has('name', '百年孤独').outE('refers').inV().hasLabel('book')"
查询id为131的订单的买家的朋友，再查询与买家相关的人员,"g.V().has('orders', 'id', '131').as('a').bothE().otherV().hasLabel('buyer').as('b').both().hasLabel('buyer').bothE('friend').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"查询id为171的点的创建时间,名字,id","g.V().has('id', 171).project('createTime', 'name', 'id').by('createTime').by('name').by('id')"
 请帮我查找李月喜欢过的人。,"g.V().has('person', 'name', '李月').out('pay').as('b').in('likes').hasLabel('person').as('c').select('c')"
请帮我找出前27个满足条件名字为赵若涵或id在30到42之间的编辑,"g.V().hasLabel('publisher').or(has('name', '赵若涵'), has('id', between(30, 42))).limit(27)"
"返回95个论坛推特和知网,共同的伙伴","g.V().has('forum', 'name', '推特').outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().has('forum', 'name', '知网').select('b').limit(95)"
找出与仓库JavaGuid有拥有关系的1度的环,"g.V().has('repository', 'name', 'JavaGuid').as('a').bothE('has').bothV().where(neq('a')).as('b').select('a', 'b').by('id').by('id').select(values).project('a.id', 'b_id').by(select('a')).by(select('b'))"
"查询和company点有employee关系的person节点,且边满足条件f1等于false,目标person节点满足条件name等于周若涵","g.V().hasLabel('company').outE('employee').has('f1', false).inV().hasLabel('person').has('name', '周若涵')"
"给出全部源点label为订单,边label为包含的边,返回这些边的目标点id减目标点id的值,和权重除104.96的值","g.V().hasLabel('orders').outE('contain').project('expr1', 'expr2').by(values('targetId').math('_ - _')).by(values('weight').math('_ / 104.96'))"
 给出包含 Prescription_180 的药品，再给出与 Prescription_180 存在包含关系的药品。,"g.V().has('prescription', 'name', 'Prescription_180').as('a').outE('contain').inV().hasLabel('medicine').as('b').select('a').inE('contain').outV().hasLabel('medicine').as('c').select('a', 'b', 'c')"
 返回所有与名为周梅的患者有好友关系或互为好友关系的处方。,"g.V().hasLabel('patient').has('name', '周梅').bothE('friend').otherV().hasLabel('prescription').range(1, 2).dedup()"
"查询person喜欢的person, 令person(b)的名字的值等于支付person的person的性别的最大值, 再查找person喜欢的person","g.V().hasLabel('person').as('a').outE('likes').inV().hasLabel('person').as('b').project('b_name', 'd').by(select('b').project('name').by(coalesce(select('b').inE('pay').outV().hasLabel('person').values('gender').max(), constant('')))).by(select('b').outE('likes').inV().hasLabel('person').as('d').select('d'))"
"帮我查询user赵月likes的repository, 令repository的lang等于repository的id, 返回user的age, repository的lang","g.V().has('user', 'name', '赵月').as('a').outE('likes').inV().hasLabel('repository').as('b').project('a_age', 'b_lang').by(select('a').values('age')).by(select('b').values('id'))"
请帮我找出以likes关系关联了book呐喊的reader,"g.V().hasLabel('book').has('name', '呐喊').inE('likes').outV().hasLabel('reader')"
"请帮我查找名为马克思原理的点的,大小小于85且名字为生物学院的朋友,返回这些朋友的名字,和边的目标点id","g.V().has('name', '马克思原理').outE('friend').as('e').inV().has('name', '生物学院').has('size', lt(85)).project('b.name', 'e.targetId').by(values('name')).by(select('e').values('targetId'))"
找出吴科认识的人，返回他们及其关联的人的名字和身高。,"g.V().has('person', 'name', '吴科').out('knows').hasLabel('person').out('relates').hasLabel('person').project('name', 'height').by('name').by('height')"
"输入请求点id的列表115,467,879, 以属性id作为相等条件,返回满足条件身高小于等于171,年龄不为空的节点","g.inject([115, 467, 879]).unfold().as('p').V().has('id', __.where(eq('p'))).has('height', lte(171)).has('age', neq(null)).dedup()"
"查询名为马建聪的点咨询的所有卖家,并对这些卖家的身高进行求和","g.V().has('name', '马建聪').outE('consult').inV().hasLabel('seller').values('height').sum()"
"用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查询和book白夜行有关的author,再查询和白夜行book_refers_book的其他book,返回它们","g.V().hasLabel('book').has('name', '白夜行').as('a').bothE().where(otherV().hasLabel('author')).as('e').otherV().as('b').select('a').bothE('book_refers_book').as('e2').otherV().as('c').select('a', 'b', 'c')"
返回与person王建国有恋人关系的3跳以内的环,"g.V().has('person', 'name', '王建国').as('a').repeat(bothE('lover').otherV().simplePath()).times(3).where(cyclicPath()).path().unfold().hasLabel('person').dedup().project('a.id', 'b_id').by(select('a').id()).by(id())"
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询前104个满足条件gender不等于male的person","g.V().hasLabel('person').has('gender', neq('male')).limit(104)"
找出37个与PR-394和PR-162都存在关系的用户或合并请求或仓库节点,"g.V().has('name', 'PR-394').as('a').outE().as('e').inV().hasLabel(within('user', 'pullRequest', 'repository')).as('b').inE().as('e2').outV().has('name', 'PR-162').as('c').select('b').limit(37)"
请帮我查找全部类型是person或公司的点,"g.V().hasLabel(within('person', 'company'))"
"输入表的列为isBlock,createTime,name, 数据为(false,1999-05-06,'LX001'),(true,2011-07-01,'BIN'),(true,2024-12-24,'LX001'),(false,2021-07-04,'XXD'), 源点的createTime等于输入表createTime,返回与account TheShy有account_transfer_account关系的3度以内的环","g.withSideEffect('p', [['isBlock':false, 'createTime':'1999-05-06', 'name':'LX001'], ['isBlock':true, 'createTime':'2011-07-01', 'name':'BIN'], ['isBlock':true, 'createTime':'2024-12-24', 'name':'LX001'], ['isBlock':false, 'createTime':'2021-07-04', 'name':'XXD']]).V().hasLabel('account').where(__.values('createTime').is(within(__.select('p').unfold().values('createTime')))).has('name', 'TheShy').repeat(__.outE('account_transfer_account').inV().simplePath()).times(2).emit(loops().is(0).or().as('b').where(__.outE('account_transfer_account').inV().where(eq('a')))).as('a').select('b').as('b').select('a', 'b').by('id').by('id')"
请帮我找出所有包含商品且由Jack创建的订单的类别。,"g.V().has('name', 'Jack').outE('creates').inV().hasLabel('orders').outE('contain').inV().hasLabel('goods').values('category')"
"找出名为王思思的person,以及与其有关的person,并返回王思思的身高和这些person的薪资","g.V().hasLabel('person').has('name', '王思思').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('height').by('salary')"
"返回139个person陈思琪和黄红,共同的family","g.V().has('person', 'name', '陈思琪').outE('family').inV().as('b').inE('family').outV().has('person', 'name', '黄红').select('b').limit(139)"
 查询何宏发布的帖子。,"g.V().hasLabel('user').has('name', '何宏').outE('publish').inV().hasLabel('post').as('b', 'a').select('a', 'b')"
请帮我找出源点是buyer，目标点是orders，且标签是cancel的边。,g.V().hasLabel('buyer').outE('cancel').where(inV().hasLabel('orders'))
"查找所有用户以性别,年龄分组的id, 根据id从小到大排序","g.V().hasLabel('user').group().by(values('gender', 'age').fold()).by(values('id').fold()).order(local).by(select(keys).unfold().id(), asc)"
 查找与 department经管学院 有 has 关系，且与 course大学英语 有 selects 关系的 student 节点，返回这些 student 的 name、salary、department经管学院的 id 和 course大学英语的 name。,"g.V().has('department', 'name', '经管学院').as('a').out('has').hasLabel('student').as('b').in('selects').has('course', 'name', '大学英语').as('c').select('a', 'b', 'c').by('id').by(values('name', 'salary')).by('name')"
请帮我找出所有属于呼吸科并且与医生存在has关系的医生的名字。,"g.V().has('name', '呼吸科').out('has').hasLabel('doctor').out('belong').hasLabel('department').values('name')"
返回与person李思思有commits关系的3度以内的环,"g.V().has('person', 'name', '李思思').as('a').repeat(bothE('commits').otherV().simplePath()).times(2).where(cyclicPath()).path().by('id').by('id')"
请帮我找出与用户相关的人员，或者是这些人员的联系人,"g.V().hasLabel('user').outE('relation').inV().range(1, 2).dedup()"
"请帮我找出id为52的点的id,金额,权重","g.V().has('id', 52).project('id', 'amount', 'weight').by('id').by('amount').by('weight')"
 请帮我查找所有与名为韩梅的人有亲戚关系，或者与韩梅有夫妻关系的人。,"g.V().has('person', 'name', '韩梅').outE('relation').inV().hasLabel('person').dedup()"
 找出与吴建国有关、与徐若涵也有关系的帖子节点，并返回它们所涉及的语言。,"g.V().has('person', 'name', '吴建国').outE().inV().hasLabel('post').as('b').inE().outV().has('user', 'name', '徐若涵').select('b').values('lang', 'wordCount')"
"请帮我查找与公司腾讯有关系的公司, 返回和这些公司有关联的公司的,价值加价值的值","g.V().has('company', 'name', '腾讯').bothE().bothV().hasLabel('company').bothE().bothV().hasLabel('company').values('value').sum()"
"根据id,大小,名字分组,计算大小对135取余的值","g.V().as('a').project('id', 'size', 'name', 'mod').by(__.select('a').id()).by(__.select('a').values('size')).by(__.select('a').values('name')).by(__.select('a').values('size').math('_ % 135')).group().by(__.select('id', 'size', 'name')).by(__.select('mod'))"
请帮我查找被论坛中国军事论坛包含的帖子,"g.V().hasLabel('forum').has('name', '中国军事论坛').outE('contain').inV().hasLabel('post').as('b', 'a').select('a', 'b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出与部门生物学院存在department_has_teacher关系,且与课程数据结构存在teacher_teach_course关系的教师节点，返回这些教师的薪资,及部门生物学院的id,及课程数据结构的课时","g.V().has('department', 'name', '生物学院').as('a').outE('department_has_teacher').inV().hasLabel('teacher').as('b').inE('teacher_teach_course').outV().has('course', 'name', '数据结构').as('c').select('a', 'b', 'c').by('id').by('salary').by('courseHour')"
"用如下schema的图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));找出用户赵建国的所有标签为伙伴的边,并根据f0升序排列,返回69个","g.V().has('user', 'name', '赵建国').outE('partner').order().by('f0', asc).limit(69).inV()"
"请帮我查找源点标签为patient,目标点标签为prescription,标签为medicine或department的边","g.V().hasLabel('patient').outE('medicine', 'department').as('e').inV().hasLabel('prescription').select('e')"
"使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找和编辑周建国有关的读者,称为X,再请帮我查找和这个X有关联的其他编辑,以及和X有关联的作家","g.V().has('publisher', 'name', '周建国').as('a').bothE().otherV().hasLabel('reader').as('b').bothE().as('e2').otherV().hasLabel('publisher').as('c').select('b').bothE().as('e3').otherV().hasLabel('author').as('d').select('a', 'b', 'c', 'd')"
"请帮我查找发布帖子Post_141的用户,和这些用户发布的帖子","g.V().hasLabel('post').has('name', 'Post_141').in('publish').as('b').out('publish').as('c').select('b', 'c')"
"请帮我查找id为72的点的身高,性别","g.V().has('id', 72).project('height', 'gender').by('height').by('gender')"
 找出17到76之间的所有与电影院有关的电影节点，并计算这些节点的价值加12的数量。然后找出这些节点中每个节点的ID除以48减去的最大价值。,"g.V().hasLabel('cinema').outE().inV().hasLabel('film').has('id', between(17, 76)).project('count_result', 'max_result').by(__.values('value').math('_ + 12').count()).by(__.values('id').math('_ / 48').values('value').math('_ - _').max())"
"请帮我查找年龄小于86且薪资不为空的person喜欢的person的名称,以及这些person 喜欢的person的名称","g.V().hasLabel('person').has('age', lt(86)).has('salary', neq(null)).outE('likes').inV().hasLabel('person').as('b').outE('likes').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
返回和person王国强之间有支付关系的person,"g.V().hasLabel('person').has('name', '王国强').outE('pay').inV().hasLabel('person')"
大小减440的值,g.V().has('size').project('result').by(values('size').math('_ - 440'))
"给出和学生陈伟有选择关系的课程,再给出以选择关系关联了陈伟的课程","g.V().hasLabel('student').has('name', '陈伟').as('a').bothE('selects').otherV().hasLabel('course').as('b').select('a').bothE('selects').otherV().hasLabel('course').as('c').select('a', 'b', 'c')"
请帮我查找名为Faker的节点还款的person或贷款,"g.V().has('name', 'Faker').outE('repay').inV().hasLabel(within('person', 'loan'))"
"给出33个名为PR-308的点belong的类型为repository的节点,且节点id在24到91之间且weight小于281","g.V().has('name', 'PR-308').outE('belong').inV().hasLabel('repository').has('id', between(24, 91)).has('weight', lt(281)).limit(33)"
"帮我查询person的三角的环,边标签等于knows, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('knows').inV().as('b').outE('knows').inV().as('c').where(__.inE('knows').outV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
请帮我查询Order_434的所有包含商品的点，以及Order_434被取消的买家，并将结果一起返回。,"g.V().has('name', 'Order_434').as('a').outE('contain').inV().hasLabel('goods').as('b').select('a').inE('cancel').outV().hasLabel('buyer').as('c').select('a', 'b', 'c')"
"查找所有源点label为person,目标点label为company,label为person或account或loan的边","g.V().hasLabel('person').outE('person', 'account', 'loan').as('e').inV().hasLabel('company').select('e')"
返回赵红拥有的账号,"g.V().hasLabel('person').has('name', '赵红').outE('own').inV().hasLabel('account').as('b').inV().as('a').select('a', 'b')"
"以954作为请求点id, 以属性id作为相等条件,帮我查询所有和department物理学院有关系的course节点,返回这些点的courseHour,credit","g.withSideEffect('p', [954]).V().hasLabel('department').has('id', select('p')).has('name', '物理学院').bothE().otherV().hasLabel('course').project('courseHour', 'credit').by('courseHour').by('credit')"
查找和用户王若涵之间有喜欢关系的帖子,"g.V().has('user', 'name', '王若涵').out('likes').hasLabel('post')"
 周科commits的software被其他person commits的数量。,"g.V().has('person', 'name', '周科').outE('commits').inV().hasLabel('software').inE('commits').outV().hasLabel('person').count()"
"返回和buyer有关联的orders节点,并根据其price,id,value分组,返回price,id,value,以及id对41取余的值","g.V().hasLabel('buyer').bothE('cancel').otherV().hasLabel('orders').project('b.price', 'b.id', 'b.value', 'b.id % 41').by(values('price')).by(values('id')).by(values('value')).by(values('id').math('_ % 41')).dedup().by(select('b.price', 'b.id', 'b.value')).select('b.price', 'b.id', 'b.value', 'b.id % 41')"
age的最小值对age取余乘198的值,g.V().hasLabel('a').values('age').min().fold().as('minAge').V().hasLabel('a').as('a').select('minAge').unfold().as('min').select('a').by(values('age')).math('min % a * 198').by()
"查询和person赵建聪有关的software,再查询和赵建聪belong的其他company,返回它们","g.V().has('person', 'name', '赵建聪').as('a').bothE().otherV().hasLabel('software').as('b').select('a').bothE('belong').otherV().hasLabel('company').as('c').select('a', 'b', 'c')"
"给出名为周红的点发布的所有帖子,并对这些帖子的创建时间进行求和","g.V().has('name', '周红').outE('publish').inV().hasLabel('post').values('createTime').sum()"
找出与所有课程相关的教师，以及这些教师所在的其他部门。,"g.V().has('course', 'id', '62').bothE().otherV().hasLabel('teacher').as('b').inE('has').otherV().hasLabel('department').as('c').select('b', 'c')"
"请帮我找出名为Comment_439和Comment_374的,类型是评论的点公共的伙伴节点的名单","g.V().has('comment', 'name', 'Comment_439').out('partner').as('b').in('partner').has('comment', 'name', 'Comment_374').select('b').values('name')"
 返回同时与标签为'账号'的点有转账关系、与这些账号有还款关系、与这些贷款有存款关系的账号。,g.V().hasLabel('account').as('a').outE('transfer').inV().hasLabel('account').as('b').outE('repay').inV().hasLabel('loan').as('c').outE('deposit').inV().hasLabel('account').as('d').select('d').dedup()
"根据价值,名字分组,计算id的最大值加35的最小值","g.V().hasLabel('a').group().by(union(has('value'), has('name')).fold()).by(values('id').max()).unfold().select(values).math('_ + 35').min()"
"请帮我找出创造处方Prescription_362的医生,和这些医生诊断的病人","g.V().has('prescription', 'name', 'Prescription_362').as('a').in('creates').as('b').out('diagnose').as('c').select('b', 'c')"
查询美团所在城市,"g.V().hasLabel('company').has('name', '美团').as('b').outE('belong').inV().hasLabel('city').as('a').select('a', 'b')"
"找出被person韩梅支付的person,和韩梅支付的person","g.V().hasLabel('person').as('a').in('pay').as('e').outV().hasLabel('person').has('name', '韩梅').as('b').out('pay').as('e2').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
找出用户的2跳以内的环,"g.V().hasLabel('user').as('a').bothE().otherV().where(loops().is(1)).as('b').select('a', 'b').by('id').by('id')"
"返回和大学北京大学有关的大学,再返回和北京大学属于的其他城市,返回它们","g.V().has('university', 'name', '北京大学').as('a').bothE().otherV().hasLabel('university').as('b').select('a').outE('belong').inV().hasLabel('city').as('c').select('a', 'b', 'c')"
"查找名为Sam的,名字不是放射科,权重大于201的相关者,返回这些相关者的地址,和边的权重,目标点id","g.V().has('name', 'Sam').outE('relation').as('e').inV().has('name', neq('放射科')).has('weight', gt(201)).as('b').select('b', 'e').by('address').by(values('weight', 'targetId'))"
给出前22个性别是famale且身高在172到179之间且名字不是郑强的学生,"g.V().hasLabel('student').has('gender', 'famale').has('height', between(172, 179)).has('name', neq('郑强')).limit(22)"
"以528,624,390,342,418作为请求点id, 以属性id作为相等条件,请帮我查找公司雇佣的person,返回其源点的人数乘人数的值,以及目标点的身高减172的最大值","g.withSideEffect('p', [528, 624, 390, 342, 418]).V().hasLabel('company').where(values('id').is(within('p'))).as('a').outE('company_employee_person').inV().hasLabel('person').as('b').select('a', 'b').by('peopleNumber').by('height').project('peopleNumberSquared', 'maxHeightDiff').by(select('a').math('_ * _')).by(select('b').math('_ - 172').max())"
"以(348,'杭州',50)作为请求表数据,属性分别为value,name,id, 源点的id等于输入表id,返回与名为天津和北京的点共同contain的,类型是company的节点","g.withSideEffect('p', [['value': 348, 'name': '杭州', 'id': 50]]).V().has('id', __.select('p').unfold().select('id')).has('name', '天津').outE('city_contain_company').inV().hasLabel('company').as('b').inE('city_contain_company').outV().has('name', '北京').select('b')"
"返回107个和标签等于person的点有拥有关系的账号,并且和这些账号有转账关系的账号",g.V().hasLabel('person').out('own').out('transfer').limit(107)
请帮我查找所有与company微软有关系的person的name,"g.V().hasLabel('company').has('name', '微软').bothE().otherV().hasLabel('person').values('name')"
查询学生的1跳的环,"g.V().hasLabel('student').as('a').bothE().bothV().where(eq('a')).as('b').select('a', 'b').by('id').by('id').select(values).project('a.id', 'b_id').by(select('a')).by(select('b'))"
"给出标签为软件的点,返回153个",g.V().hasLabel('software').limit(153)
给出和读者徐思思之间有喜欢关系的书,"g.V().hasLabel('reader').has('name', '徐思思').outE('likes').inV().hasLabel('book')"
"以600,562,119作为请求点id, 以属性id作为相等条件,查找author李梅的类型是friend的边,并根据targetId从小到大排列,返回163个","g.inject([600, 562, 119]).unfold().as('p').V().hasLabel('author').has('id', __.select('p')).has('name', '李梅').outE('friend').as('e').order().by('targetId', asc).limit(163).inV().as('b').select('b')"
查找全部名为张建聪的点回答的买家,"g.V().has('name', '张建聪').outE('ask').inV().hasLabel('buyer')"
请帮我查找和person吴梅之间有喜欢关系的person,"g.V().hasLabel('person').has('name', '吴梅').outE('likes').inV().hasLabel('person')"
"用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查找所有数学学院的点has的student,然后查找数学学院被has的university,一起返回","g.V().has('name', '数学学院').as('a').out('department_has_student').as('b').select('a').in('university_has_department').as('c').select('a', 'b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));返回59个城市重庆和杭州,共同的朋友","g.V().has('city', 'name', '重庆').out('friend').as('b').in('friend').has('city', 'name', '杭州').select('b').limit(59)"
"调用pageRank函数,以4作为输入,返回id, value","g.call('pageRank').with('maxIterations', 4).project('id', 'value').by('id').by('value')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部person以身高,名字,薪资分组的id, 根据id升序排序","g.V().hasLabel('person').group().by(values('height', 'name', 'salary').fold()).by(values('id').fold()).order(local).by(keys, asc)"
"输入请求点id的列表972,987,551,835, 以属性id作为相等条件,请帮我找出和seller李月有seller_has_goods关系的goods,再请帮我找出以seller_has_goods关系关联了李月的goods","g.inject([972, 987, 551, 835]).unfold().as('p').V().hasLabel('seller').has('id', __.select('p')).has('name', '李月').as('a').outE('seller_has_goods').inV().hasLabel('goods').as('b').select('a').inE('seller_has_goods').outV().hasLabel('goods').as('c').select('a', 'b', 'c')"
返回162个与腾讯和阿里都存在关系的城市或大学节点,"g.V().has('name', '腾讯').outE().inV().or(hasLabel('city'), hasLabel('university')).as('b').inE().outV().has('name', '阿里').select('b').limit(162)"
查询所有名为物理学院的节点has的course或university或department,"g.V().has('name', '物理学院').out('has').hasLabel(within('course', 'university', 'department'))"
"帮我查询名为孙若涵的forum或user,以及与其有关的post,并返回孙若涵的height和这些post的createTime","g.V().has(label, within('forum', 'user')).has('name', '孙若涵').bothE().otherV().has(label, 'post').as('b').select('b').by('createTime').as('createTime').select('b').by(inE().outV().has(label, within('forum', 'user')).has('name', '孙若涵')).values('height').as('height').select('height', 'createTime')"
帮我查询所有名为马国强的点likes的person,"g.V().has('name', '马国强').outE('likes').inV().hasLabel('person')"
"请帮我查找年龄为空且身高不是165的教师教的课程的名称,以及这些课程 属于的部门的名称","g.V().hasLabel('teacher').has('age', eq(null)).has('height', neq(165)).outE('teach').inV().hasLabel('course').as('b').outE('belong').inV().hasLabel('department').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));返回前138个满足条件id大于等于31或name等于体育学院,且value小于等于632的department","g.V().hasLabel('department').has('id', gte(31)).or().has('name', '体育学院').has('value', lte(632)).limit(138)"
"返回id为140的点的身高,性别,年龄","g.V().has('id', 140).project('height', 'gender', 'age').by('height').by('gender').by('age')"
 找朋友，找朋友的朋友,"g.V().hasLabel('country').as('a').outE('friend').inV().range(1, 2).as('b').select('b')"
"查询与person孙梅存在拥有关系,且与账号XiaoHu存在转账关系的账号节点，返回这些账号的是否冻结,创建时间,上次登录时间,及person孙梅的名字,及账号XiaoHu的上次登录时间","g.V().has('person', 'name', '孙梅').as('a').outE('own').inV().hasLabel('account').as('b').inE('transfer').outV().has('account', 'name', 'XiaoHu').as('c').select('a', 'b', 'c').by('name').by(values('isBlock', 'createTime', 'lastLoginTime').fold()).by('lastLoginTime')"
"请帮我找出全部源点类型为reader,目标点类型为book,类型为reader或author或publisher的边","g.V().hasLabel('reader').bothE('reader', 'author', 'publisher').where(otherV().hasLabel('book'))"
 请问从张思琪买家出发，沿着取消类型的路线走2到4度，可以到达哪个订单点？,"g.V().has('buyer', 'name', '张思琪').repeat(out('cancel')).times(2).emit().repeat(out('cancel')).times(2).has('orders').dedup()"
 找出与软件 SprintBoot 有 uses 关系的软件，再找出与 SprintBoot 以 uses 关系关联的软件。,"g.V().hasLabel('software').has('name', 'SprintBoot').as('a').bothE('uses').otherV().hasLabel('software').as('b', 'c').select('a', 'b', 'c')"
"输入表的列为salary,name,height, 数据为(1588,'黄红',164),(3738,'何宏',199),(1765,'何梅',159),(7028,'李强',154), 源点的salary等于输入表salary,请帮我查找和department有关联的doctor节点,并根据其gender分组,返回gender,以及salary减4840的值","g.inject([1588, '黄红', 164], [3738, '何宏', 199], [1765, '何梅', 159], [7028, '李强', 154]).as('p').V().hasLabel('department').as('a').where(eq('p')).by('salary').by(select('p').limit(local, 1)).outE('department_has_doctor').inV().hasLabel('doctor').as('b').group().by('gender').by(__.select('b').values('salary').math('_ - 4840').fold())"
"给出所有与ISSUE-455存在属于关系的仓库,仓库与用户存在拥有关系的点,返回这些点的身高","g.V().has('name', 'ISSUE-455').outE('belong').inV().hasLabel('repository').outE('has').inV().values('height')"
找出与 id 为 120 的公司相关的公司的朋友，以及这些朋友所在的公司。,"g.V().has('company', 'id', '120').as('a').bothE().otherV().hasLabel('company').as('b').bothE().hasLabel('friend').otherV().as('c').select('b').bothE().hasLabel('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"查询109个部门体育学院和计算机学院,共同的相关者","g.V().has('department', 'name', '体育学院').outE('relation').inV().as('b').inE('relation').outV().has('department', 'name', '计算机学院').select('b').limit(109)"
"请帮我查找与电影变形金刚有关系的标签, 返回和这些标签有关联的标签的,value的平均值对904取余的最小值","g.V().has('film', 'name', '变形金刚').bothE().otherV().hasLabel('tag').bothE().otherV().hasLabel('tag').values('value').mean().fold().project('avg_value').by(__.mean()).select('avg_value').math('_ % 904').min()"
"请帮我查找和person吴伟有关系的person,返回这些点的id,名字","g.V().has('person', 'name', '吴伟').bothE().otherV().hasLabel('person').project('id', 'name').by('id').by('name')"
获取名为赵宏的病人的年龄和性别,"g.V().hasLabel('patient').has('name', '赵宏').project('age', 'gender').by('age').by('gender')"
"用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找标签等于课程的点",g.V().hasLabel('course')
"查找account Faker repay的loan,以及apply这些loan的person, 令account的name等于person的salary减8961的平均值, 返回account的isBlock,loan的amount,person的age","g.V().hasLabel('account').has('name', 'Faker').as('a').outE('repay').inV().hasLabel('loan').as('b').inE('apply').outV().hasLabel('person').as('c').group().by(select('a', 'b', 'c')).by(select('c').values('salary').fold().mean().math('_ - 8961')).select(keys).project('a.isBlock', 'b.amount', 'c.age').by(select('a').values('isBlock')).by(select('b').values('amount')).by(select('c').values('age'))"
"查询全部生物学院的点has的student,然后查询生物学院被has的university,一起返回","g.V().has('name', '生物学院').as('a').outE('has').inV().hasLabel('student').as('b').select('a').inE('has').outV().hasLabel('university').as('c').select('a', 'b', 'c')"
"输入请求点id的列表317,24,793,342,839, 源点的id等于输入表id,给出名字大于等于903的大学属于的城市的名称,以及这些城市 包含的大学的名称","g.inject([317, 24, 793, 342, 839]).as('p').unfold().as('id').V().hasLabel('university').has('id', __.select('id')).has('name', gte(903)).as('a').outE('university_belong_city').as('e').inV().hasLabel('city').as('b').inE('city_contain_university').as('e2').outV().hasLabel('university').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(__.select('b')).by(__.select('c'))"
"帮我查询所有与Comment_131存在belong关系的film,film与tag存在has关系的点,返回这些点的value","g.V().has('name', 'Comment_131').out('belong').hasLabel('film').out('has').values('value')"
"找出张思思的点诊断的病人,然后找出张思思被拥有的部门,一起返回","g.V().has('name', '张思思').as('a').outE('diagnose').inV().as('b').select('a').inE('has').outV().as('c').select('a', 'b', 'c')"
返回全部和post Post_483之间有has关系的tag,"g.V().hasLabel('post').has('name', 'Post_483').out('has').hasLabel('tag')"
"请帮我找出标签等于person的点,并根据salary升序排列","g.V().hasLabel('person').order().by('salary', asc)"
请找出与部门传染部有关联，并创造了处方Prescription_310的医生。请提供这些医生的性别、部门传染部的名称以及处方Prescription_310的ID。,"g.V().has('department', 'name', '传染部').as('a').outE('has').inV().hasLabel('doctor').as('b').inE('creates').outV().has('prescription', 'name', 'Prescription_310').as('c').select('a', 'b', 'c').by('name').by('gender').by('id')"
找出与39个buyer类型的点存在consult关系的所有seller，以及这些seller所拥有的所有goods。,g.V().hasLabel('buyer').out('consult').hasLabel('seller').out('has').hasLabel('goods').limit(39)
 找出与陈思琪和郑伟有关联的三个账号。,"g.V().has('name', '陈思琪').outE().inV().hasLabel('account').as('b').inE().outV().has('name', '郑伟').select('b').limit(3)"
"给出和教师有关联的课程节点,并根据其名字分组,返回名字,以及id的数量减73除39减921的最大值",g.V().hasLabel('teacher').as('a').outE('teach').inV().hasLabel('course').as('b').group().by('name').by(__.select('b').values('id').count().math('(_ - 73) / 39 - 921').max())
"返回包含论坛天涯论坛包含的用户,的论坛","g.V().hasLabel('forum').has('name', '天涯论坛').outE('contain').inV().hasLabel('user').as('b').inE('contain').outV().hasLabel('forum').as('c').select('b', 'c')"
"给出身高大于等于164,年龄大于等于84的作家撰写的书的名称,以及这些书 关联的书的名称","g.V().hasLabel('author').has('height', gte(164)).has('age', gte(84)).out('write').hasLabel('book').as('b').out('relates').hasLabel('book').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"以392,473,392作为请求点id, 源点的id等于输入表id,查找被账号TheShy转账的账号","g.inject([392, 473, 392]).unfold().as('p').V().hasLabel('account').has('id', __.select('p')).as('a').in('account_transfer_account').hasLabel('account').has('name', 'TheShy').as('b').select('a', 'b')"
"查找20个和标签为seller的点有ask关系的buyer,且和这些buyer有look关系的goods",g.V().hasLabel('seller').as('a').outE('ask').inV().hasLabel('buyer').as('b').outE('look').inV().hasLabel('goods').as('c').select('c').limit(20)
"帮我查询贷款loan_96存款的账号,以及转账这些账号的账号","g.V().hasLabel('loan').has('name', 'loan_96').outE('deposit').inV().hasLabel('account').as('b').inE('transfer').outV().hasLabel('account').as('c').select('b', 'c')"
给出所有名为计算机学院的节点拥有的部门,"g.V().has('name', '计算机学院').out('has').hasLabel('department')"
"帮我查询city伦敦contain的company,被其他university cooperate的数量","g.V().has('city', 'name', '伦敦').out('contain').in('cooperate').hasLabel('university').count()"
"帮我查询author write的book, 令book的price的值等于writebook的author的age的最大值, 再查找book knows的book","g.V().hasLabel('author').as('a').outE('write').inV().hasLabel('book').as('b').sideEffect(__.select('b').sack(assign).by(__.in('write').hasLabel('author').values('age').max()).property('price', __.sack())).select('b').out('knows').hasLabel('book').as('d').select('b', 'd').by('price').by()"
"请帮我找出名为吴伟的点的,height大于等于172的partner,返回这些partner的id,和边的weight","g.V().has('name', '吴伟').outE('partner').as('e').inV().has('height', gte(172)).project('b.id', 'e.weight').by(id()).by(select('e').values('weight'))"
请帮我找出与person李思琪和王红都存在认识关系的点,"g.V().hasLabel('person').has('name', '李思琪').outE('knows').inV().as('b').inE('knows').outV().hasLabel('person').has('name', '王红').select('b')"
找出所有互相喜欢的人以及他们共同喜欢的人,"g.V().has('person', 'id', '11').bothE().otherV().hasLabel('person').as('b').in('likes').hasLabel('person').as('c').select('b', 'c')"
"查找id为196的商品有关的订单的相关者, 再查找和订单有关系的相关者","g.V().hasLabel('goods').has('id', 196).as('a').bothE().as('e').otherV().hasLabel('orders').as('b').bothE('relation').as('e2').otherV().as('c').select('b').bothE('relation').as('e3').otherV().as('d').select('a', 'b', 'c', 'd')"
"请帮我找出全部person的relation,或其relation的relation",g.V().hasLabel('person').repeat(outE('relation').inV()).times(2).dedup()
查找与课程数据结构有属于关系的3跳的环,"g.V().has('course', 'name', '数据结构').as('a').repeat(bothE().otherV().simplePath()).times(3).where(cyclicPath()).where(eq('a')).project('a.id', 'b_id').by(select('a').id()).by(id())"
"帮我查询和account有关联的loan节点,并根据其id分组,返回id,以及id的和减16的值",g.V().hasLabel('account').bothE('repay').bothV().hasLabel('loan').group().by('id').by(values('id').sum().math('_ - 16'))
"请帮我找出合并请求属于的仓库, 令仓库的id的值等于属于仓库的事项的创建时间的平均值, 再查找仓库拥有的合并请求","g.V().hasLabel('pullRequest').as('a').outE('belong').inV().hasLabel('repository').as('b').sideEffect(__.select('b').aggregate('b_nodes')).select('b').inE('belong').outV().hasLabel('issue').values('createTime').mean().as('avg_time').select('b_nodes').unfold().as('b').select('b').property('id', __.select('avg_time')).select('b').outE('has').inV().hasLabel('pullRequest').as('d').select('b', 'd').by('id').by()"
"请帮我找出名为知乎的点包含的用户,并对这些用户的性别进行求和","g.V().has('name', '知乎').outE('contain').inV().hasLabel('user').values('gender').sum()"
 返回赵强喜欢的那个人。,"g.V().hasLabel('person').has('name', '赵强').outE('likes').inV().as('b').inV().as('a').select('a', 'b')"
请帮我找出与名为马红的卖家或者其合作伙伴有关的商品,"g.V().hasLabel('seller').has('name', '马红').outE('partner').inV().hasLabel('goods').dedup()"
"输入请求点id的列表399,7, 源点的id等于输入表id,帮我查询名为周月和赵红的,类型是person的点公共的家人节点的名单","g.withSideEffect('p', [399, 7]).V().hasLabel('person').where(__.in('person_family_person').has('name', '周月')).where(__.in('person_family_person').has('name', '赵红')).has('id', within('p')).values('name')"
"找出全部reader以name,height分组的age, 根据age从大到小排序","g.V().hasLabel('reader').group().by(values('name', 'height')).by(values('age').fold()).order(local).by(values, desc)"
"帮我查询与cinema UME有关,且与tag喜剧有关系的film节点","g.V().has('cinema', 'name', 'UME').outE('releases').inV().hasLabel('film').as('b').outE('has').inV().has('tag', 'name', '喜剧').select('b')"
"找出前114个薪资不等于5154,名字不等于王强,或性别等于famale的person","g.V().hasLabel('person').or(and(has('salary', neq(5154)), has('name', neq('王强'))), has('gender', 'famale')).limit(114)"
"以(26,'male',8415),(66,'male',1545),(76,'famale',9230)作为请求表数据,属性分别为age,gender,salary, 以属性age作为相等条件,请帮我找出person吴思琪 knows的person,返回person pay的person的salary乘salary加64对93取余的值 ","g.withSideEffect('p', [[26, 'male', 8415], [66, 'male', 1545], [76, 'famale', 9230]]).inject(1).sideEffect(__.select('p').unfold().as('row').select('row').by(__.limit(1)).as('age')).V().hasLabel('person').has('age', __.select('age')).has('name', '吴思琪').as('a').outE('person_knows_person').inV().hasLabel('person').as('b').outE('person_pay_person').inV().hasLabel('person').as('c').project('result').by(__.select('c').values('salary').math('_ * _ + 64 % 93')).select('result')"
 找出腾讯和Bilibili之间的共同点。,"g.V().hasLabel('company').has('name', '腾讯').as('a').outE('belong').as('e').inV().as('b').inE('belong').as('e2').outV().hasLabel('company').has('name', 'Bilibili').as('c').select('b')"
 请帮我找出共同关联的person节点，名称为何建国和黄建聪。,"g.V().has('name', '何建国').outE('relates').inV().hasLabel('person').as('b').inE('relates').outV().has('name', '黄建聪').select('b')"
返回全部和部门内科之间有拥有关系的医生,"g.V().has('department', 'name', '内科').out('has').hasLabel('doctor')"
找出与买家徐红有关联，并包含椅子商品的订单。返回这些订单的名称、价格、价值以及买家徐红和椅子商品的销售量。,"g.V().has('buyer', 'name', '徐红').as('a').outE('creates').inV().hasLabel('orders').as('b').inE('contain').outV().has('goods', 'name', '椅子').as('c').select('a', 'b', 'c').by('name').by(values('name', 'price', 'value')).by('sellerNumber')"
"根据名字,价格,权重分组,计算id减id的数量","g.V().hasLabel('a').group().by(values('name', 'price', 'weight').fold()).by(count(local))"
请帮我找出与字节和谷歌都有关联的108家公司。,"g.V().has('name', '字节').outE().as('e').inV().hasLabel('company').as('b').inE().as('e2').outV().has('name', '谷歌').select('b').limit(108)"
"帮我查询全部赵建聪的点认识的person,然后帮我查询赵建聪被认识的person,一起返回","g.V().has('name', '赵建聪').as('a').bothE('knows').as('e').otherV().hasLabel('person').as('b').select('a').bothE('knows').as('e2').otherV().hasLabel('person').as('c').select('a', 'b', 'c')"
"查找address是北区的cinema releases的film的名称,以及这些film has的tag的名称","g.V().hasLabel('cinema').has('address', '北区').outE('releases').inV().hasLabel('film').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
帮我查询被公司字节属于的城市,"g.V().hasLabel('company').has('name', '字节').as('b').outE('belong').as('e').inV().hasLabel('city').as('a').select('a', 'b')"
"帮我查询类型为喜欢,以及满足条件目标点id大于45,f1是true且权重在129.94到130.43之间的边","g.E().hasLabel('likes').has('targetId', gt(45)).has('f1', true).has('weight', between(129.94, 130.43))"
"返回全部源点label为课程,目标点label为部门,label为教师或大学或部门的边","g.V().hasLabel('course').bothE('teacher', 'university', 'department').where(otherV().hasLabel('department'))"
"请帮我查找所有和订单Order_139有关系的商品,返回这些点的价格,名字,类别","g.V().hasLabel('orders').has('name', 'Order_139').bothE().otherV().hasLabel('goods').project('price', 'name', 'category').by(values('price')).by(values('name')).by(values('category'))"
"找出book的refers,或其refers的refers",g.V().hasLabel('book').repeat(out('refers')).times(2).dedup()
"查找教师徐宏教的课程, 令教师的身高等于教师的id,令课程的价值等于课程的学分, 返回教师的身高, 课程的名字","g.V().has('teacher', 'name', '徐宏').as('a').outE('teach').inV().hasLabel('course').as('b').select('a', 'b').by(project('height', 'name').by('id').by('name')).by(project('value', 'name').by('credit').by('name')).select(values).unfold().project('a.height', 'b.name').by(select('height')).by(select('name'))"
"给出名为陈科和黄若涵的,类型是person的点公共的伙伴节点的名单","g.V().has('person', 'name', '陈科').as('a').outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().has('person', 'name', '黄若涵').as('c').select('b').values('name')"
"请帮我查找书少年闰土的所有引用,的源点id除3的值","g.V().has('book', 'name', '少年闰土').outE('refers').project('result').by(values('srcId').math('_ / 3'))"
" 请帮我查询184个ID小于等于42的Comment,并按照ID从小到大的顺序进行排序。","g.V().hasLabel('comment').has('id', lte(42)).order().by('id', asc).limit(184)"
"请帮我查找名为吴轩的点认识的作家,并对这些作家的身高进行求和","g.V().has('name', '吴轩').outE('knows').inV().hasLabel('author').values('height').sum()"
 找出与何红、黄轩有关的作家节点。,"g.V().has('author', 'name', '何红').bothE('knows').otherV().bothE('knows').otherV().has('author', 'name', '黄轩').path().unfold().hasLabel('author').dedup()"
请帮我查找所有名为杜科的节点发布的读者,"g.V().has('name', '杜科').outE('publish').inV().hasLabel('reader')"
查找以包含关系关联了药品布洛芬的处方,"g.V().has('medicine', 'name', '布洛芬').in('contain').hasLabel('prescription')"
"请帮我找出薪资在6103到7559之间或身高小于等于196的person认识的person的名称,以及这些person 认识的person的名称","g.V().hasLabel('person').has('salary', between(6103, 7559)).union(identity(), __.V().hasLabel('person').has('height', lte(196))).dedup().as('a').outE('knows').as('e').inV().hasLabel('person').as('b').outE('knows').as('e2').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"找出全部源点label为person,边label为父母的边,返回这些边的源点id对源点id取余的值,和权重乘114.29的值","g.V().hasLabel('person').outE('parent').project('expr1', 'expr2').by(values('srcId').math('_ / _')).by(values('weight').math('_ * 114.29'))"
"找出部门法学院拥有的学生, 令部门的价值等于部门的id的平均值,令学生的年龄等于学生的薪资的平均值,令学生的性别等于学生的薪资减2382, 返回部门的id, 学生的id","g.V().has('department', 'name', '法学院').as('a').out('has').as('b').select('a', 'b').by('id').by('id')"
"帮我查询id为171的user publish的post, 并将post有关的forum的id的和赋值给post的name, 接着查询post的name小于171的post has的tag","g.V().has('user', 'id', 171).out('publish').as('b').project('name', 'd').by(__.inE().outV().hasLabel('forum').values('id').sum()).by(__.select('b').out('has').hasLabel('tag')).select('name', 'd')"
"请帮我查找id为168的person有关的loan的relation, 再请帮我查找和loan有关系的friend","g.V().hasLabel('person').has('id', 168).as('a').bothE().otherV().hasLabel('loan').as('b').bothE('relation').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
查询与张红和孙思琪都有关系的所有person节点。,"g.V().has('name', '张红').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '孙思琪').select('b').limit(94)"
"查找label为person的点,返回185个",g.V().hasLabel('person').limit(185)
找出以knows关系关联了person陈轩的person,"g.V().hasLabel('person').has('name', '陈轩').inE('knows').outV().hasLabel('person')"
 返回共同喜欢person标签且名为周若涵和李宏的节点。,"g.V().has('name', '周若涵').outE('likes').inV().hasLabel('person').as('b').inE('likes').outV().has('name', '李宏').select('b')"
" 查询名为Comment_367,标签为comment的点，返回它们的wordCount和id。","g.V().hasLabel('comment').has('name', 'Comment_367').project('wordCount', 'id').by('wordCount').by('id')"
"请帮我找出全部Kafka的点uses的software,然后请帮我找出Kafka被commits的person,一起返回","g.V().has('name', 'Kafka').as('a').outE('uses').inV().hasLabel('software').as('b').select('a').inE('commits').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"使用列为value,lastLoginTime,createTime, 数据为(797,2009-02-05,2027-03-14),(17,2029-09-05,2013-09-19)的子查询作为输入表, 以属性lastLoginTime作为相等条件,查询全部person的relation,或其relation的relation","g.inject([['value':797, 'lastLoginTime':'2009-02-05', 'createTime':'2027-03-14'], ['value':17, 'lastLoginTime':'2029-09-05', 'createTime':'2013-09-19']]).as('p').unfold().as('p_row').select('p_row').by(__.values('lastLoginTime')).as('login_time').V().hasLabel('person').has('lastLoginTime', __.select('login_time')).repeat(__.outE('relation').inV()).times(2).emit().dedup()"
"查询部门拥有的医生, 令医生的身高的值等于拥有医生的部门的权重的最小值, 再查找医生创造的处方","g.V().hasLabel('department').as('a').outE('has').inV().hasLabel('doctor').as('b').sideEffect(__.select('b').sack(assign).by(__.inE('has').outV().hasLabel('department').values('weight').min()).sack()).project('b.height', 'd').by(__.select('b').sack()).by(__.select('b').outE('creates').inV().hasLabel('prescription').as('d').select('d'))"
"查询所有名为李宏的点的,id在48到63之间且创建时间不是2033年11月15日的相关者,返回这些相关者的名字,和边的权重,f0","g.V().has('name', '李宏').outE('relation').as('e').inV().has('id', between(48, 63)).has('createTime', neq('2033-11-15')).project('b.name', 'e.weight', 'e.f0').by(values('name')).by(select('e').values('weight')).by(select('e').values('f0'))"
"查找id为25的点的身高,性别,名字","g.V().has('id', 25).project('height', 'gender', 'name').by('height').by('gender').by('name')"
"请帮我查找所有person的朋友,或其朋友的朋友",g.V().hasLabel('person').outE('friend').inV().hasLabel('person').simplePath().by('id').times(2).emit().dedup().project('b').by(valueMap().with(WithOptions.tokens))
"找出被仓库XXRepo拥有的用户,和XXRepo拥有的合并请求","g.V().hasLabel('repository').has('name', 'XXRepo').as('b').bothE('has').otherV().hasLabel('user').as('a').select('b').bothE('has').otherV().hasLabel('pullRequest').as('c').select('a', 'b', 'c')"
"请帮我查找用户吴强的伙伴,的目标点id除目标点id的值","g.V().has('user', 'name', '吴强').outE('partner').as('e').inV().project('result').by(select('e').values('targetId').math('/ targetId'))"
"请帮我查找名为Zeus的点repay的loan,并对这些loan的id进行求和","g.V().has('name', 'Zeus').outE('repay').inV().hasLabel('loan').values('id').sum()"
"给出和课程有关联的部门节点,并根据其大小分组,返回大小,以及value的最小值除420的平均值","g.V().hasLabel('course').as('a').bothE('belong').as('e').otherV().hasLabel('department').as('b').group().by('size').by(__.project('min_value', 'size').by(__.values('value').min()).by(__.values('size')).select('min_value').math('_ / 420').mean())"
"帮我查询forum推特contain的user,被其他forum contain的数量","g.V().has('forum', 'name', '推特').out('contain').hasLabel('user').in('contain').hasLabel('forum').dedup().count()"
"查询名为体育学院和法学院的,类型是department的点公共的partner节点的名单","g.V().has('department', 'name', '体育学院').outE('partner').inV().as('b').inE('partner').outV().has('department', 'name', '法学院').select('b').values('name')"
"返回被编辑发布数量大于175的书,记为relationCount,再查询这些书发布的编辑","g.V().hasLabel('book').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('publish').hasLabel('publisher').count()).select('a', 'relationCount').as('b').where(__.select('relationCount').is(gt(175))).select('a').out('publish').hasLabel('publisher').dedup()"
请帮我找出所有与马建聪取消的订单有关的商品，并返回这些商品的类别。,"g.V().has('name', '马建聪').outE('cancel').inV().hasLabel('orders').outE('contain').inV().hasLabel('goods').values('category')"
"找出学生选择的课程, 令课程的id的值等于教课程的教师的名字的和, 再查找课程属于的部门","g.V().hasLabel('student').as('a').outE('selects').inV().hasLabel('course').as('b').select('b').project('b_id', 'd').by(coalesce(__.inE('teach').outV().hasLabel('teacher').values('name').sum(), constant(0))).by(outE('belong').inV().hasLabel('department').fold())"
"输入请求点id的列表460,117, 源点的id等于输入表id,查找和药品999感冒灵有关系的病人节点,返回这些点的身高,薪资,性别","g.withSideEffect('p', [460, 117]).V().hasLabel('medicine').has('id', within('p')).has('name', '999感冒灵').bothE().otherV().hasLabel('patient').project('height', 'salary', 'gender').by(values('height')).by(values('salary')).by(values('gender'))"
"请帮我找出id为86的user publish的post, 并将post有关的user的name的个数赋值给post的createTime, 接着查询post的createTime小于86的post has的tag","g.V().has('user', 'id', 86).outE('publish').inV().hasLabel('post').as('b').sideEffect(project('count').by(__.inE().outV().hasLabel('user').values('name').dedup().count()).select('count').property(single, 'createTime')).where(__.values('createTime').is(lt(86))).outE('has').inV().hasLabel('tag').as('d').select('b', 'd').by(values('createTime')).by()"
返回与person李红有喜欢关系的3度以内的环,"g.V().has('person', 'name', '李红').as('a').repeat(bothE('likes').otherV().simplePath()).times(2).emit().where(loops().is(gt(0))).where(eq('a')).path().by('id').by('id')"
"查询person Amily认识的person,被其他公司雇佣的数量","g.V().has('person', 'name', 'Amily').out('knows').in('employee').dedup().count()"
 找出Hadoop中使用的软件。,"g.V().hasLabel('software').has('name', 'Hadoop').out('uses').out('uses').dedup()"
"查找和person吴思琪有拥有关系的账号,再查找以投资关系关联了吴思琪的公司","g.V().hasLabel('person').has('name', '吴思琪').as('a').outE('own').inV().as('b').select('a').inE('invest').outV().as('c').select('a', 'b', 'c')"
"根据id,身高分组,计算薪资加7366的数量","g.V().hasLabel('a').group().by(union(identity().values('id'), identity().values('height')).fold()).by(values('salary').math('_ + 7366').count())"
返回与pullRequest PR-425有belong关系的1跳以内的环,"g.V().has('pullRequest', 'name', 'PR-425').as('a').bothE('belong').bothV().where(neq('a')).dedup().as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
返回黄思琪创建的评论节点所属的电影,"g.V().has('person', 'name', '黄思琪').out('creates').hasLabel('comment').out('belong').hasLabel('film')"
找出与周思思相关的所有学生，以及她所选的其他课程，并将它们返回。,"g.V().has('student', 'name', '周思思').as('a').bothE().otherV().hasLabel('student').as('b').select('a').outE('selects').inV().hasLabel('course').as('c').select('a', 'b', 'c')"
"返回和person王强有关的person,称为X,再返回和这个X有关联的其他person,以及和X有关联的person","g.V().has('person', 'name', '王强').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
找出与徐强和马红都有parent关系的所有点,"g.V().has('person', 'name', '徐强').out('parent').as('b').in('parent').has('person', 'name', '马红').select('b')"
"找出id为199的person commits的software, 并将software有关的person的id的最小值赋值给software的lang, 接着查询software的lang小于199的software uses的software","g.V().hasLabel('person').has('id', 199).outE('commits').inV().hasLabel('software').as('b').sideEffect(select('b').sack(assign).by(constant(0)).sack(min).by(__.inE().bothV().hasLabel('person').values('id')).property('lang', sack())).where(select('b').values('lang').is(lt(199))).outE('uses').inV().hasLabel('software').as('d').select('b', 'd').by('lang').by()"
查找全部和person马若涵之间有buy关系的software,"g.V().hasLabel('person').has('name', '马若涵').outE('buy').inV().hasLabel('software')"
"以142,426,432作为请求点id, 源点的id等于输入表id,查找被person吴梅pay的person","g.inject(142, 426, 432).as('p').V().hasLabel('person').has('id', __.select('p')).as('a').in('person_pay_person').hasLabel('person').has('name', '吴梅').as('b').select('a', 'b')"
获取Order_188包含的商品，这些商品在其他订单中出现的次数。,"g.V().has('orders', 'name', 'Order_188').out('contain').in('contain').hasLabel('orders').dedup().count()"
"返回71个名为王梅的点咨询的类型是卖家的节点,且其id为空","g.V().has('name', '王梅').outE('consult').inV().hasLabel('seller').has('id', eq(null)).limit(71)"
 返回包含药品的处方，其中包含医生创建的点。,g.V().hasLabel('doctor').as('a').outE('creates').as('e').inV().hasLabel('prescription').as('b').outE('contain').as('e2').inV().hasLabel('medicine').as('c').select('c').limit(191)
查找前70个标签为employee的边,g.E().hasLabel('employee').limit(70)
请帮我找出与张建聪和何建国都有关联的55个论坛节点。,"g.V().has('name', '张建聪').outE().inV().hasLabel('forum').as('b').inE().outV().has('name', '何建国').select('b').limit(55)"
"查找issue ISSUE-484 belong的repository,被其他issue belong的数量","g.V().hasLabel('issue').has('name', 'ISSUE-484').outE('belong').inV().hasLabel('repository').inE('belong').outV().hasLabel('issue').count()"
"请帮我查找标签为仓库,名为Tugraph的点,返回这些点的名字","g.V().hasLabel('repository').has('name', 'Tugraph').values('name')"
 返回与贷款点相关的账户节点，并按创建时间对其进行分组。,g.V().hasLabel('loan').bothE('deposit').otherV().hasLabel('account').values('createTime').groupCount()
请帮我查找全部和person孙雪之间有创造关系的评论,"g.V().hasLabel('person').has('name', '孙雪').outE('creates').inV().hasLabel('comment')"
"给出全部和大学复旦大学有关系的城市或大学或公司,返回这些点的id,人数,价值","g.V().has('university', 'name', '复旦大学').bothE().otherV().hasLabel(within('city', 'university', 'company')).project('id', 'peopleNumber', 'value').by(id()).by(values('peopleNumber')).by(values('value'))"
找出与帖子 Post_241 有喜欢关系的用户,"g.V().hasLabel('post').has('name', 'Post_241').in('likes').hasLabel('user')"
获取id为126的course相关的student的关系，然后获取这些student的相关伙伴。,"g.V().has('course', 'id', '126').as('a').bothE().otherV().hasLabel('student').as('b').outE('relation').inV().as('c').select('b').outE('partner').inV().as('d').select('a', 'b', 'c', 'd')"
"帮我查询全部和名为徐月的person有朋友关系,或有朋友的朋友关系的person","g.V().has('person', 'name', '徐月').bothE('friend').bothV().simplePath().hasLabel('person').dedup()"
给出comment Comment_394 belong的film节点has的tag,"g.V().hasLabel('comment').has('name', 'Comment_394').outE('belong').inV().hasLabel('film').outE('has').inV().hasLabel('tag')"
请帮我查找标签等于person的点,g.V().hasLabel('person')
"查找id为81的评论有关的电影的朋友, 再查找和电影有关系的朋友","g.V().has('comment', 'id', 81).as('a').bothE().otherV().hasLabel('film').as('b').bothE('friend').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
"返回名为赵月和徐若涵的,类型是user的点公共的partner节点的名单","g.V().has('user', 'name', '赵月').outE('partner').inV().as('b').inE('partner').outV().has('user', 'name', '徐若涵').select('b').values('name')"
"返回名为郑雪的点的,name不等于黄宏的partner,返回这些partner的id,和边的f0,targetId","g.V().has('name', '郑雪').outE('partner').as('e').inV().has('name', neq('黄宏')).as('b').select('b', 'e').by('id').by(values('f0', 'targetId'))"
"请帮我找出与名为浙江大学和清华大学的点共同belong的,类型是city的节点","g.V().has('name', '浙江大学').out('belong').hasLabel('city').as('b').in('belong').has('name', '清华大学').select('b')"
"以158,121,439,932,158作为请求点id, 以属性id作为相等条件,帮我查询全部名为字节的,金额等于6550.66的相关者,返回这些相关者的金额,和边的f0,目标点id,源点id","g.withSideEffect('p', [158, 121, 439, 932, 158]).V().has('id', within('p')).has('name', '字节').outE('relation').as('e').inV().has('amount', 6550.66).select('e').project('b_amount', 'e_f0', 'e_targetId', 'e_srcId').by(__.select('e').inV().values('amount')).by(__.select('e').values('f0')).by(__.select('e').values('targetId')).by(__.select('e').values('srcId'))"
帮我查询与person郑宏有关系的person的性别,"g.V().has('person', 'name', '郑宏').bothE().otherV().hasLabel('person').values('gender')"
查找满足条件大小大于66的节点,"g.V().has('size', gt(66))"
"给出所有与徐伟存在喜欢关系的person,person与person存在喜欢关系的点,返回这些点的id","g.V().has('name', '徐伟').out('likes').hasLabel('person').out('likes').hasLabel('person').id()"
 少年闰土这本书。,"g.V().hasLabel('book').has('name', '少年闰土')"
"查找person何红knows的person,以及pay这些person的person, 令person(a)的salary等于person(b)的gender, 返回person(a)的height,person(b)的height,person(c)的height","g.V().has('person', 'name', '何红').as('a').out('knows').hasLabel('person').as('b').in('pay').hasLabel('person').as('c').select('a', 'b', 'c').by(coalesce(values('height'), constant('null'))).by(coalesce(values('height'), constant('null'))).by(coalesce(values('height'), constant('null'))).sideEffect(select('a').property('salary', select('b').values('gender')))"
"返回Prescription_157的点contain的medicine,然后返回Prescription_157被accept的patient,一起返回","g.V().has('name', 'Prescription_157').as('a').outE('contain').inV().hasLabel('medicine').as('b').select('a').inE('accept').outV().hasLabel('patient').as('c').select('a', 'b', 'c')"
"帮我查询94个名为陈红的点likes的类型是post的节点,且其lang是French或name是Post_186","g.V().has('name', '陈红').outE('likes').inV().hasLabel('post').or(has('lang', 'French'), has('name', 'Post_186')).limit(94)"
查询与公司蚂蚁集团和滴滴都相关的大学节点。,"g.V().has('company', 'name', '蚂蚁集团').bothE('cooperate').bothV().hasLabel('university').where(bothE('cooperate').bothV().has('company', 'name', '滴滴')).dedup()"
"给出和用户孙若涵有创造关系的合并请求,再给出以创造关系关联了孙若涵的事项","g.V().has('user', 'name', '孙若涵').as('a').outE('creates').inV().hasLabel('pullRequest').as('b').select('a').inE('creates').outV().hasLabel('issue').as('c').select('a', 'b', 'c')"
"帮我查询全部名为CSDN的,语言是French或名字不是Post_384的相关者,返回这些相关者的价值,和边的f1,源点id,权重","g.V().has('name', 'CSDN').outE('relation').as('e').inV().as('b').where(or(__.has('lang', 'French'), __.has('name', neq('Post_384')))).select('b', 'e').by('value').by(project('f1', 'srcId', 'weight').by('f1').by('srcId').by('weight'))"
"找出被作家认识数量大于27的作家,记为relationCount,再查询这些作家认识的读者","g.V().hasLabel('author').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('knows').hasLabel('author').values('id').min()).where(__.select('relationCount').is(gt(27))).select('a').out('knows').hasLabel('reader')"
 取消与买家黄伟的关联订单，再返回已创建的与黄伟有关的订单。,"g.V().has('buyer', 'name', '黄伟').as('a').outE('creates').inV().hasLabel('orders').as('b').select('a').inE('cancel').outV().hasLabel('orders').as('c').select('a', 'b', 'c')"
查询身高大于185cm，按性别升序排序的前162个人。,"g.V().hasLabel('person').has('height', gt(185)).order().by('gender', asc).limit(162)"
"找出和person王轩有喜欢关系的person,再找出以支付关系关联了王轩的person","g.V().has('person', 'name', '王轩').as('a').out('likes').hasLabel('person').as('b').select('a').in('pay').hasLabel('person').as('c').select('a', 'b', 'c')"
"给出person认识的person, 令person(b)的性别的值等于认识person的person的名字的数量, 再查找person喜欢的person","g.V().hasLabel('person').as('a').outE('knows').inV().hasLabel('person').as('b').select('b').sideEffect(project('count').by(__.inE('knows').outV().hasLabel('person').values('name').count()).select('count').store('b_gender')).outE('likes').inV().hasLabel('person').as('d').select('b_gender').as('b.gender').select('d').select('b.gender', 'd')"
"使用列为id,height,gender, 数据为(9,177,'famale'),(55,194,'male'),(54,151,'male'),(6,179,'male')的子查询作为输入表, 源点的height等于输入表height,给出前1个类型为loan_deposit_account的边","g.inject([['id':9,'height':177,'gender':'famale'],['id':55,'height':194,'gender':'male'],['id':54,'height':151,'gender':'male'],['id':6,'height':179,'gender':'male']]).unfold().as('p').V().has('height', __.select('p').select('height')).outE('loan_deposit_account').as('e').limit(1).select('e')"
返回和处方Prescription_270之间有包含关系的药品,"g.V().hasLabel('prescription').has('name', 'Prescription_270').outE('contain').inV().hasLabel('medicine')"
"输入表的列为price,id,category, 数据为(3551.84,71,'水果'),(523.51,15,'食品'),(1869.31,24,'家具'), 源点的category等于输入表category,查询以consult关系关联了seller Amily的buyer","g.inject([['price':3551.84,'id':71,'category':'水果'],['price':523.51,'id':15,'category':'食品'],['price':1869.31,'id':24,'category':'家具']]).as('p').unfold().as('p_row').select('p_row').by().V().hasLabel('seller').has('category', __.select('p_row').select('category')).has('name','Amily').as('a').in('buyer_consult_seller').hasLabel('buyer').as('b').select('b')"
"请帮我找出reader赵思琪likes的book,以及likes这些book的reader","g.V().hasLabel('reader').has('name', '赵思琪').outE('likes').inV().hasLabel('book').as('b').inE('likes').outV().hasLabel('reader').as('c').select('b', 'c')"
"帮我查询全部名为韩国强的,名字不等于吴雪或id小于等于59的伙伴,返回这些伙伴的名字,和边的f1,源点id,权重","g.V().has('name', '韩国强').outE('partner').as('e').inV().as('b').where(or(__.not(has('name', '吴雪')), has('id', lte(59)))).select('b', 'e').by('name').by(project('f1', 'srcId', 'weight').by('f1').by('srcId').by('weight'))"
"请帮我找出80个名为孙强的点has的类型是goods的节点,且其sellerNumber不等于427.43或value不为空","g.V().has('name', '孙强').outE('has').inV().hasLabel('goods').where(or(has('sellerNumber', neq(427.43)), has('value', neq(null)))).limit(80)"
"返回名为loan_79的account或company或loan,以及与其有关的account,并返回loan_79的id和这些account的value","g.V().has(label, within('account', 'company', 'loan')).has('name', 'loan_79').bothE().otherV().has(label, 'account').project('a_id', 'b_value').by(select(all, 'a').id()).by(select(all, 'b').values('value'))"
"查询名为韩雪的publisher,以及与其有关的publisher,并返回韩雪的salary和这些publisher的salary","g.V().has('publisher', 'name', '韩雪').as('a').bothE().otherV().hasLabel('publisher').as('b').select('a', 'b').by('salary')"
找出所有与人有关联的人，以及通过相识关系与其他这些人有关联的人。,"g.V().has('person', 'id', '162').bothE().otherV().hasLabel('person').as('b').inE('knows').otherV().hasLabel('person').as('c').select('b', 'c')"
"根据权重,金额分组,计算id减61的个数","g.V().hasLabel('a').group().by(union(values('weight'), values('amount')).fold()).by(values('id').is(neq(61)).count())"
"请帮我查找185个和标签等于公司的点有雇佣关系的person,并且和这些person有认识关系的person",g.V().hasLabel('company').out('employee').hasLabel('person').out('knows').hasLabel('person').limit(185)
"使用列为id,gender,name, 数据为(77,'famale','李强'),(63,'famale','杜伟'),(54,'male','张若涵')的子查询作为输入表, 源点的name等于输入表name,请帮我找出书的引用,或其引用的引用","g.inject([['id':77,'gender':'famale','name':'李强'],['id':63,'gender':'famale','name':'杜伟'],['id':54,'gender':'male','name':'张若涵']]).unfold().as('p').V().hasLabel('book').has('name', __.select('p').select('name')).as('a').repeat(__.out('book_refers_book')).times(2).emit().as('b').select('b')"
"给出人数不为空,名字等于腾讯,或规格不是small的节点","g.V().or(has('peopleNumber').has('name', '腾讯'), has('scale', neq('small')))"
查询所有类型为标签的点,g.V().hasLabel('tag')
"请帮我找出所有名为郑国强的点的,类别为诗集或创建时间不是2009年11月28日的相关者,返回这些相关者的创建时间,和边的源点id","g.V().has('name', '郑国强').outE('relation').as('e').inV().has('category', '诗集').or().has('createTime', neq('2009-11-28')).select('e').by('srcId').as('srcId').select('inV').by('createTime').as('createTime').select('createTime', 'srcId')"
"返回名为王月的doctor,以及与其有关的department,并返回王月的name和这些department的name","g.V().hasLabel('doctor').has('name', '王月').as('a').bothE().as('e').otherV().hasLabel('department').as('b').select('a', 'b').by('name').by('name')"
 查询person源点与person目标点之间类型为knows的边。,g.V().hasLabel('person').outE('knows').where(inV().hasLabel('person'))
请帮我找出被person何梅属于的公司,"g.V().hasLabel('person').has('name', '何梅').outE('belong').inV().hasLabel('company').as('b', 'a').select('a', 'b')"
 找出同时与黄思琪和徐若涵有关联的人，并返回他们的身高、性别和年龄。,"g.V().has('person', 'name', '黄思琪').outE().inV().hasLabel('person').as('b').inE().outV().has('person', 'name', '徐若涵').select('b').values('height', 'gender', 'age')"
"帮我查询名为推特和中国军事论坛的,标签为forum的点公共的relation节点的名单","g.V().has('forum', 'name', '推特').out('relation').as('b').in('relation').has('forum', 'name', '中国军事论坛').select('b').values('name')"
"返回名为LX001和Faker的,label为账号的点公共的相关者节点的名单","g.V().has('account', 'name', 'LX001').outE('relation').inV().as('b').inE('relation').outV().has('account', 'name', 'Faker').select('b').values('name')"
"给出和事项ISSUE-249有关的用户,再给出和ISSUE-249属于的其他仓库,返回它们","g.V().hasLabel('issue').has('name', 'ISSUE-249').as('a').bothE().otherV().hasLabel('user').as('b').select('a').bothE('belong').otherV().hasLabel('repository').as('c').select('a', 'b', 'c')"
"查询和person点有认识关系的person节点,且边满足条件源点id小于91,目标person节点性别等于famale","g.V().hasLabel('person').as('a').outE('knows').as('e').has('srcId', lt(91)).inV().hasLabel('person').has('gender', 'famale').as('b').select('b')"
"给出137个和label为person的点有knows关系的person,并且和这些person有likes关系的person",g.V().hasLabel('person').as('a').out('knows').hasLabel('person').as('b').out('likes').hasLabel('person').as('c').select('c').limit(137)
 搜索名为'中国军事论坛'的论坛。,"g.V().hasLabel('forum').has('name', '中国军事论坛')"
"请帮我找出类型是consult,且weight大于180或f1为true的边","g.E().hasLabel('consult').or(has('weight', gt(180)), has('f1', true))"
"请帮我找出与company蚂蚁集团有关,且与city深圳有关系的university节点","g.V().hasLabel('company').has('name', '蚂蚁集团').bothE('cooperate').otherV().hasLabel('university').bothE('belong').otherV().hasLabel('city').has('name', '深圳').select('b')"
找出全部标签等于编辑或读者的点,"g.V().hasLabel(within('publisher', 'reader'))"
"查询全部与南京大学存在belong关系的city,city与university存在contain关系的点,返回这些点的id","g.V().has('name', '南京大学').out('belong').hasLabel('city').out('contain').hasLabel('university').id()"
"给出全部源点标签为仓库,边标签为拥有,且满足条件f0的平均值减f0不是117或权重不为空或f1不等于false的边","g.V().hasLabel('repository').as('a').outE('has').as('e').where(or(__.select('e').values('f0').mean().is(neq(117)), __.select('e').values('weight').is(neq(null)), __.select('e').values('f1').is(neq(false)))).select('e')"
"找出48个和类型为国家的点有包含关系的城市,以及和这些城市有包含关系的大学",g.V().hasLabel('country').out('contain').hasLabel('city').out('contain').hasLabel('university').limit(48)
"请帮我查找名为神探狄仁杰的点拥有的全部标签,并对这些标签的id进行求和","g.V().has('name', '神探狄仁杰').out('has').hasLabel('tag').values('id').sum()"
"以(192,'孙思琪','male'),(165,'孙思琪','male'),(172,'Alice','male')作为请求表数据,属性分别为height,name,gender, 源点的gender等于输入表gender,请帮我查找和person杜强之间有person_knows_person关系的person","g.withSideEffect('p', [['height':192, 'name':'孙思琪', 'gender':'male'], ['height':165, 'name':'孙思琪', 'gender':'male'], ['height':172, 'name':'Alice', 'gender':'male']]).V().hasLabel('person').has('gender', within(select('p').unfold().values('gender'))).has('name', '杜强').outE('person_knows_person').inV().hasLabel('person').dedup()"
"请帮我查找121个和标签等于买家的点有咨询关系的卖家,并且和这些卖家有回答关系的买家",g.V().hasLabel('buyer').as('a').outE('consult').as('e').inV().hasLabel('seller').as('b').outE('ask').as('e2').inV().hasLabel('buyer').as('c').select('c').limit(121)
 筛选出180个非冻结且上次登录时间晚于2010年4月15日的账号，并按照是否冻结进行排序。,"g.V().hasLabel('account').has('isBlock', neq(true)).has('lastLoginTime', neq('2010-04-15')).order().by('isBlock', asc).limit(180)"
提供与公司相关的贷款节点，并按权重进行分组，然后返回这些权重。,g.V().hasLabel('company').as('a').bothE('apply').as('e').otherV().hasLabel('loan').as('b').select('b').values('weight').group().by(identity()).by(count())
"使用列为height,gender,id, 数据为(185,'male',88),(154,'famale',14)的子查询作为输入表, 以属性gender作为相等条件,查询与名为Prescription_276和Prescription_463的点共同contain的,类型是medicine的节点","g.withSideEffect('p', [[185, 'male', 88], [154, 'famale', 14]]).V().has('name', 'Prescription_276').as('a').bothE('prescription_contain_medicine').otherV().hasLabel('medicine').as('b').bothE('prescription_contain_medicine').otherV().has('name', 'Prescription_463').as('c').where('a', eq('c')).by('gender').select('b')"
找出department内科has的doctor节点diagnose的patient,"g.V().hasLabel('department').has('name', '内科').out('has').hasLabel('doctor').out('diagnose').hasLabel('patient')"
"以'tp', 'sp', 'Sb'作为输入调用pageRank函数,返回运算结果","g.call('pageRank').with('edges', 'tp').with('property', 'sp').with('graphName', 'Sb').select('id', 'value')"
"查询和大学点有拥有关系的部门节点,且边满足条件源点id大于132,目标部门节点满足条件价值在484到999之间","g.V().hasLabel('university').as('a').outE('has').has('srcId', gt(132)).as('e').inV().hasLabel('department').has('value', between(484, 999)).as('b').select('b')"
查询与person杜若涵有关系的person的年龄,"g.V().has('person', 'name', '杜若涵').bothE().otherV().hasLabel('person').values('age')"
"使用列为name,age,id, 数据为('吴红',43,91),('李若涵',81,93),('何伟',87,77)的子查询作为输入表, 源点的id等于输入表id,给出comment的三角的环,边标签等于comment_belong_film, 并返回这些点的id","g.inject(['吴红', 43, 91], ['李若涵', 81, 93], ['何伟', 87, 77]).as('p').select('p').project('name', 'age', 'id').by(__.limit(1)).by(__.skip(1).limit(1)).by(__.skip(2).limit(1)).select('id').as('inputId').V().hasLabel('comment').has('id', __.where(eq('inputId'))).as('a').outE('comment_belong_film').inV().as('b').outE('comment_belong_film').inV().as('c').where(__.out('comment_belong_film').as('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
查询被department土木学院has的teacher,"g.V().hasLabel('department').has('name', '土木学院').inE('has').outV().hasLabel('teacher').as('b').outE('has').inV().hasLabel('teacher').as('a').select('a', 'b')"
"查询128个name是伦敦的city,根据value从小到大排列","g.V().hasLabel('city').has('name', '伦敦').order().by('value', asc).limit(128)"
"给出被用户创造数量大于53的事项,记为relationCount,再查询这些事项创造的用户","g.V().hasLabel('issue').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('creates').hasLabel('user').id().min()).select('a', 'relationCount').as('a_with_count').select('a_with_count').where(__.select('relationCount').is(gt(53))).select('a').out('creates').hasLabel('user').dedup()"
找出卖家何思琪回答的买家节点取消的订单,"g.V().hasLabel('seller').has('name', '何思琪').as('a').outE('ask').inV().hasLabel('buyer').as('b').outE('cancel').inV().hasLabel('orders').as('c').select('c')"
请帮我查找person张梅认识的person节点认识的person,"g.V().hasLabel('person').has('name', '张梅').out('knows').hasLabel('person').out('knows').hasLabel('person')"
"请帮我找出全部源点满足条件id大于等于49或id大于等于67,且年龄在50到87之间,目标点满足条件金额大于等于1617.44,且标签等于申请的边","g.V().has('id', gte(49)).or(__.has('id', gte(67))).has('age', between(50, 87)).outE('apply').as('e').inV().has('amount', gte(1617.44)).select('e')"
请帮我找出薪资低于7136的前127个人，按照薪资从低到高排序,"g.V().hasLabel('person').has('salary', lt(7136)).order().by('salary', asc).limit(127)"
"帮我查询与person张思琪有关,且与软件Hadoop有关系的软件节点","g.V().has('person', 'name', '张思琪').bothE('commits').bothV().hasLabel('software').bothE('uses').bothV().has('software', 'name', 'Hadoop').select('b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));返回名为复旦大学的大学","g.V().hasLabel('university').has('name', '复旦大学')"
"请帮我找出与doctor徐宏有关,且与doctor王伟有关系的department节点","g.V().has('doctor', 'name', '徐宏').outE('belong').inV().hasLabel('department').as('b').inE('has').outV().has('doctor', 'name', '王伟').select('b')"
 返回和赵宏有关的读者，再返回他发布的其他书。,"g.V().has('publisher', 'name', '赵宏').as('a').bothE().otherV().hasLabel('reader').as('b').select('a').outE('publish').otherV().hasLabel('book').as('c').select('a', 'b', 'c')"
"请帮我查找label为公司的点,返回73个",g.V().hasLabel('company').limit(73)
"请帮我找出全部郑月的点likes的repository,然后请帮我找出郑月被has的repository,一起返回","g.V().has('name', '郑月').as('a').outE('likes').inV().hasLabel('repository').as('b').select('a').inE('has').outV().hasLabel('repository').as('c').select('a', 'b', 'c')"
"给出身高加164不等于38或id小于4的学生选择的课程的名称,以及这些课程 属于的部门的名称","g.V().hasLabel('student').has('height', neq(-126)).or(has('id', lt(4))).outE('selects').inV().hasLabel('course').as('b').outE('belong').inV().hasLabel('department').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
查找以拥有关系关联了医生张宏的部门,"g.V().hasLabel('doctor').has('name', '张宏').in('has').hasLabel('department')"
 找出同时与book呐喊和book三体有引用关系的节点，返回这些节点的category、name、book呐喊的createTime、book三体的name。,"g.V().has('book', 'name', '呐喊').as('a').outE('refers').inV().hasLabel('book').as('b').inE('refers').outV().has('book', 'name', '三体').as('c').select('a', 'b', 'c').by('createTime').by(values('category', 'name')).by('name').project('a.createTime', 'b.category', 'b.name', 'c.name').by(select('a')).by(select('b').select('category')).by(select('b').select('name')).by(select('c'))"
返回徐月喜欢的帖子及其拥有的标签的ID和名称。,"g.V().has('user', 'name', '徐月').out('likes').hasLabel('post').out('has').hasLabel('tag').project('id', 'name').by(values('id')).by(values('name'))"
"返回标签为user,名为孙强的点,返回这些点的id,age","g.V().hasLabel('user').has('name', '孙强').project('a.id', 'a.age').by('id').by('age')"
给出所有名为赵科的点支付的person,"g.V().has('name', '赵科').outE('pay').inV().hasLabel('person')"
 找处方纸Prescription_258。,"g.V().hasLabel('prescription').has('name', 'Prescription_258')"
 返回与中国军事论坛有包含关系且拥有悬疑标签的帖子节点，包括帖子ID、字数、人数以及中国军事论坛中该帖子的数量和悬疑标签的ID。,"g.V().has('forum', 'name', '中国军事论坛').as('a').out('contain').hasLabel('post').as('b').in('has').has('tag', 'name', '悬疑').as('c').select('a', 'b', 'c').by('peopleNumber').by(values('value', 'id', 'wordCount')).by('id')"
"请帮我找出名为Sam的作家,以及与其有关的读者,并返回Sam的性别和这些读者的名字","g.V().hasLabel('author').has('name', 'Sam').as('a').bothE().as('e').otherV().hasLabel('reader').as('b').select('a', 'b').by('gender').by('name')"
"输入表的列为salary,gender,age, 数据为(6349,'famale',76),(1116,'male',63),(9932,'male',66), 源点的salary等于输入表salary,查找和company有关联的person节点,并根据其name,salary,height分组,返回name,salary,height,以及age加2的最大值","g.withSideEffect('p', [['salary': 6349, 'gender': 'famale', 'age': 76], ['salary': 1116, 'gender': 'male', 'age': 63], ['salary': 9932, 'gender': 'male', 'age': 66]]).V().hasLabel('company').as('a').where(__.select('a').values('salary').is(within(__.select('p').unfold().values('salary')))).bothE('company_employee_person').otherV().hasLabel('person').as('b').group().by(__.select('b').choose(__.values('name').is(neq(null)), __.values('name'), __.constant('null')).by(__.select('b').choose(__.values('salary').is(neq(null)), __.values('salary'), __.constant('null'))).by(__.select('b').choose(__.values('height').is(neq(null)), __.values('height'), __.constant('null')))).by(__.select('b').values('age').math('_ + 2').max()).unfold().project('name', 'salary', 'height', 'max_age_plus_2').by(__.select(keys).select('name')).by(__.select(keys).select('salary')).by(__.select(keys).select('height')).by(__.select(values))"
返回所有与电影星际穿越有关系的person的身高,"g.V().hasLabel('film').has('name', '星际穿越').bothE().otherV().hasLabel('person').values('height')"
"请帮我找出标签为合作,并且满足条件f0不为空的边","g.E().hasLabel('cooperate').has('f0', neq(null))"
"使用列为age,id,salary, 数据为(71,81,3552)的子查询作为输入表, 源点的id等于输入表id,帮我查询名为知乎的点包含的person,并对这些点的薪资进行求和","g.withSideEffect('p', [['age':71, 'id':81, 'salary':3552]]).V().has('id', __.select('p').unfold().select('id')).has('name', '知乎').outE('forum_contain_person').inV().hasLabel('person').values('salary').sum()"
查询以支付关系关联了person吴国强的person,"g.V().hasLabel('person').has('name', '吴国强').inE('pay').outV().dedup()"
"查找city belong的country, 令country的value的值等于belongcountry的city的value的平均值, 再查找country contain的city","g.V().hasLabel('city').as('a').outE('belong').inV().hasLabel('country').as('b').sideEffect(__.select('b').aggregate('countryNodes')).select('b').map(__.select('b').coalesce(__.project('value').by(__.in('belong').hasLabel('city').values('value').mean()), __.constant(null))).as('b_value').select('b').out('contain').hasLabel('city').as('d').select('b_value', 'd')"
"查找名为内科的点拥有的全部医生,并对这些医生的id进行求和","g.V().has('name', '内科').out('has').hasLabel('doctor').values('id').sum()"
"返回标签为接受,以及f1不等于false或源点id是157的边","g.E().hasLabel('accept').filter(or(has('f1', neq(false)), has('srcId', 157)))"
"返回id为192的部门拥有的学生, 并将学生有关的教师的性别的最大值赋值给学生的身高, 接着查询学生的身高小于192的学生选择的课程","g.V().has('department', 'id', 192).out('has').hasLabel('student').as('b').project('b', 'height').by(__.identity()).by(__.bothE().otherV().hasLabel('teacher').values('gender').max()).as('p').select('b', 'height').where(__.select('height').is(lt(192))).out('selects').hasLabel('course').project('height', 'd').by(__.select('height')).by(__.identity())"
帮我找出与黄雪有关联的支付人员，以及与黄雪有关联的所有人员,"g.V().has('person', 'name', '黄雪').as('a').outE('pay').inV().hasLabel('person').as('b').select('a').inE('pay').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"请帮我找出喜欢仓库Tugraph的用户,和这些用户喜欢的仓库","g.V().has('repository', 'name', 'Tugraph').as('a').in('likes').as('b').out('likes').as('c').select('b', 'c')"
"输入请求点id的列表273,841,648, 源点的id等于输入表id,请帮我找出与person徐月有关系的person的id","g.inject([273, 841, 648]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('name', '徐月').bothE().otherV().hasLabel('person').values('id')"
"请帮我查找作家撰写的书,返回其源点的身高对191取余的最大值,以及目标点的id加81的和","g.V().hasLabel('author').as('a').outE('write').inV().hasLabel('book').as('b').select('a', 'b').by(values('height')).by(values('id')).project('max_height_mod', 'sum_id_plus').by(select('a').math('_ % 191').max()).by(select('b').math('_ + 81').sum())"
"查询认识person马雪的person,和这些person提交的软件","g.V().has('person', 'name', '马雪').in('knows').as('b').out('commits').as('c').select('b', 'c')"
"找出id为102的买家咨询的卖家, 并将卖家有关的商品的价格的平均值赋值给卖家的性别, 接着查询卖家的性别小于102的卖家拥有的商品","g.V().hasLabel('buyer').has('id', 102).outE('consult').inV().hasLabel('seller').as('b').project('b', 'gender').by(__.identity()).by(__.outE().inV().hasLabel('goods').values('price').mean()).as('result').select('result').where(__.select('gender').is(lt(102))).select('b').outE('has').inV().hasLabel('goods').as('d').select('b', 'd').by('gender').by()"
"返回全部id为61的company关联的software,和以commits关系关联了这些software的其他person","g.V().hasLabel('company').has('id', 61).bothE().otherV().hasLabel('software').as('b').inE('commits').otherV().hasLabel('person').as('c').select('b', 'c')"
"请帮我查找全部id为29的用户关联的事项,和以拥有关系关联了这些事项的其他仓库","g.V().has('user', 'id', 29).bothE().otherV().hasLabel('issue').as('b').inE('has').otherV().hasLabel('repository').as('c').select('b', 'c')"
"请帮我找出与南京大学存在合作关系的公司,公司与大学存在合作关系的点,返回这些点的id","g.V().has('name', '南京大学').outE('cooperate').inV().hasLabel('company').outE('cooperate').inV().hasLabel('university').id()"
"以887作为请求点id, 以属性id作为相等条件,返回前14个类型为account_repay_loan的边","g.V().has('id', 887).outE('account_repay_loan').limit(14)"
"使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));查询名为吴雪和孙强的,类型是用户的点公共的朋友节点的名单","g.V().has('user', 'name', '吴雪').out('friend').as('b').in('friend').has('user', 'name', '孙强').select('b').values('name')"
"输入请求点id的列表652, 源点的id等于输入表id,返回名为浙江大学和重庆大学的,label为大学的点公共的朋友节点的名单","g.withSideEffect('p', [652]).V().hasLabel('university').as('a').where(and(__.select('a').values('id').is(eq(__.select('p'))), __.select('a').has('name', '浙江大学'))).out('friend').as('b').in('friend').hasLabel('university').as('c').where(__.select('c').has('name', '重庆大学')).select('b').values('name')"
 请帮我查询有关id为105的人的评论的朋友，以及与评论相关的其他相关者。,"g.V().has('person', 'id', '105').as('a').bothE().as('e').otherV().hasLabel('comment').as('b').bothE('friend').as('e2').otherV().as('c').select('b').bothE('relation').as('e3').otherV().as('d').select('a', 'b', 'c', 'd')"
"帮我查询与person黄科有关系的person, 返回和这些person有关联的person的,年龄减64的值","g.V().has('person', 'name', '黄科').bothE().otherV().hasLabel('person').bothE().otherV().hasLabel('person').values('age').math('_ - 64')"
"以356,272,51,322作为请求点id, 源点的id等于输入表id,帮我查询和reader有关联的book节点,并根据其name分组,返回name,以及price乘70除90乘85的值","g.inject([356, 272, 51, 322]).unfold().as('p').V().hasLabel('reader').has('id', __.select('p')).outE('reader_likes_book').inV().hasLabel('book').as('b').select('b').by('name').by(__.math('price * 70 / 90 * 85')).group().by(__.select('name')).by(__.select('math').fold())"
给出所有与大学武汉大学有关系的学生的性别,"g.V().has('university', 'name', '武汉大学').bothE().otherV().hasLabel('student').values('gender')"
"查询名为周宏的读者,以及与其有关的作家,并返回周宏的身高和这些作家的性别","g.V().has('reader', 'name', '周宏').as('a').bothE().otherV().hasLabel('author').as('b').select('a', 'b').by('height').by('gender')"
"请帮我找出所有comment的partner,或者它们的伙伴","g.V().hasLabel('comment').outE('partner').inV().range(1, 2).dedup()"
"帮我查询源点id为空,边label为朋友,且满足条件目标点id是174或权重不为空或源点id在69到79之间的边,返回这些边的srcId的平均值加181的值","g.V().has('id', null).outE('friend').where(or(has('targetId', 174), has('weight', neq(null)), has('srcId', between(69, 79)))).values('srcId').mean().math('_ + 181')"
"以765作为请求点id, 以属性id作为相等条件,查询reader陈轩的全部标签为partner的边,并根据targetId从小到大排列,返回2个","g.withSideEffect('p_id', 765).V().hasLabel('reader').has('id', __.constant('p_id')).has('name', '陈轩').outE('partner').order().by('targetId').inV().limit(2)"
返回名为周思琪的点撰写的书,"g.V().has('name', '周思琪').outE('write').inV().hasLabel('book')"
 请找出与帖子Post_444拥有关联的标签，以及这些标签是如何与Post_444相关的。,"g.V().hasLabel('post').has('name', 'Post_444').as('a').bothE('has').as('e', 'e2').otherV().hasLabel('tag').as('b', 'c').select('a', 'b', 'c')"
返回城市中按人数排序的点,"g.V().hasLabel('city').order().by('peopleNumber', Order.asc)"
"查询全部何雪的点选择的课程,然后查询何雪被拥有的部门,一起返回","g.V().has('name', '何雪').as('a').outE('selects').inV().hasLabel('course').as('b').select('a').inE('has').outV().hasLabel('department').as('c').select('a', 'b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));给出用户的相关者,或其相关者的相关者","g.V().hasLabel('user').as('a').outE('relation').inV().hasLabel('user').range(1, 2).as('b').select('b')"
请帮我查找以关联关系关联了person杜建国的person,"g.V().hasLabel('person').has('name', '杜建国').inE('relates').outV()"
"输入请求点id的列表442,237, 源点的id等于输入表id,查询32个name为孙轩的person,根据salary从小到大排列","g.inject([442, 237]).unfold().as('p').V().hasLabel('person').as('a').where(eq('p')).by('id').by().has('name', '孙轩').order().by('salary', asc).limit(32).select('a')"
找出与'赵强'有关的人，然后找出这些人的同事，并返回他们。,"g.V().has('person', 'name', '赵强').as('a').bothE().otherV().hasLabel('person').as('b').select('a').bothE('colleague').otherV().hasLabel('person').as('c').select('a', 'b', 'c')"
找出与孙思思有knows关系的人，然后再找出这些人中与孙思思有likes关系的人。,"g.V().has('person', 'name', '孙思思').as('a').out('knows').as('b').select('a').in('likes').as('c').select('a', 'b', 'c')"
返回陈雪认识的人的身高、ID和姓名。,"g.V().has('person', 'name', '陈雪').outE('relates').inV().hasLabel('person').outE('knows').inV().hasLabel('person').project('height', 'id', 'name').by('height').by('id').by('name')"
查询和person韩月之间有knows关系的person,"g.V().hasLabel('person').has('name', '韩月').outE('knows').inV().hasLabel('person')"
"查询person喜欢的评论, 令评论的创建时间的值等于创造评论的person的名字的最小值, 再查找评论属于的电影","g.V().hasLabel('person').as('a').outE('likes').hasLabel('likes').inV().hasLabel('comment').as('b').project('b', 'createTime').by(identity()).by(__.inE('creates').hasLabel('creates').outV().hasLabel('person').values('name').min()).select('b', 'createTime').as('b_with_time').select('b').outE('belong').hasLabel('belong').inV().hasLabel('film').as('d').select('b_with_time').select('createTime', 'd')"
"用如下schema的图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));找出和company字节有关的city,称为X,再找出和这个X有关联的其他company,以及和X有关联的country","g.V().hasLabel('company').has('name', '字节').as('a').bothE().otherV().hasLabel('city').as('b').bothE().otherV().hasLabel('company').as('c').select('b').bothE().otherV().hasLabel('country').as('d').select('a', 'b', 'c', 'd')"
请帮我查找前99个满足条件age为空且gender等于famale的person,"g.V().hasLabel('person').has('gender', 'famale').hasNot('age').limit(99)"
"查询名为人人影城的,类别不是悬疑或类别不等于文艺的伙伴,返回这些伙伴的名字,和边的权重,目标点id,f1","g.V().has('name', '人人影城').outE('partner').as('e').inV().as('b').where(__.or(__.not(__.has('category', '悬疑')), __.not(__.has('category', '文艺')))).select('b', 'e').by('name').by(__.project('weight', 'targetId', 'f1').by('weight').by(__.inV().id()).by('f1'))"
查询person的2度的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(2).where(loops().is(2)).where(eq('a')).by(T.id).path().by(T.id).project('a.id', 'b_id').by(limit(local, 1)).by(tail(local, 1))"
"给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));返回病人韩若涵的所有伙伴,的目标点id除142减187.47的值","g.V().has('patient', 'name', '韩若涵').outE('partner').as('e').inV().project('result').by(__.select('e').values('targetId').math('/ 142 - 187.47'))"
"帮我查询被person喜欢数量大于80的person,记为relationCount,再查询这些person喜欢的person","g.V().hasLabel('person').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('likes').hasLabel('person').id().mean()).select('a', 'relationCount').as('a_with_count').select('a_with_count').where(__.select('relationCount').is(gt(80))).select('a').out('likes').hasLabel('person').dedup()"
"以821,26,441作为请求点id, 源点的id等于输入表id,查询满足条件id等于22的节点","g.inject([821, 26, 441]).unfold().as('p').V().has('id', __.where(eq('p'))).has('id', 22)"
 请帮我找到所有部门的同事，以及他们各自的同事。,"g.V().hasLabel('department').as('a').outE('partner').as('e').inV().range(1, 2).as('b').select('b')"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));返回所有和company Bilibili有2跳关系的software","g.V().has('company', 'name', 'Bilibili').repeat(bothE().otherV().simplePath()).times(2).hasLabel('software').dedup()"
 找出周建聪认识的人和他创建的软件。,"g.V().has('person', 'name', '周建聪').as('a').out('knows').hasLabel('person').as('b').select('a').V().has('company', 'name', '谷歌').as('c').out('creates').hasLabel('software').as('d').select('a', 'b', 'c', 'd')"
"以78作为输入调用personalRank函数,返回id, value","g.call('PERSONALRANK').with('input', 78).project('id', 'value').by(__.select('id')).by(__.select('value'))"
 找寻《少年足球》电影中伙伴的相关者。,"g.V().hasLabel('film').has('name', '少年足球').out('friend').out('partner').out('relation').dedup()"
"请帮我找出名为吴雪的person,以及与其有关的person,并返回吴雪的gender和这些person的name","g.V().has('person', 'name', '吴雪').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('gender').by('name')"
"以697,233,516,381作为请求点id, 以属性id作为相等条件,返回全部和名为王月的person有父母关系,或有父母的父母关系的person","g.inject([697, 233, 516, 381]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).filter(__.has('name', '王月')).repeat(__.out('person_parent_person')).times(2).emit().dedup()"
"请帮我查找所有和软件点有使用关系的软件节点,且边满足条件源点id大于134,目标软件节点名字不是SprintBoot","g.V().hasLabel('software').as('a').outE('uses').has('srcId', gt(134)).as('e').inV().hasLabel('software').has('name', neq('SprintBoot')).as('b').select('b')"
请帮我查找前13个类型为喜欢的边,g.E().hasLabel('likes').limit(13)
"查找类型为用户的点,返回101个",g.V().hasLabel('user').limit(101)
请帮我查找类型为patient，名字为Jack的所有点，并返回它们的gender和height信息。,"g.V().hasLabel('patient').has('name', 'Jack').project('gender', 'height').by(values('gender')).by(values('height'))"
"返回所有和合并请求PR-438有关系的事项或合并请求或仓库,返回这些点的名字","g.V().has('pullRequest', 'name', 'PR-438').bothE().otherV().hasLabel(within('issue', 'pullRequest', 'repository')).values('name')"
"以('male',13,168)作为请求表数据,属性分别为gender,id,height, 源点的height等于输入表height,找出person赵月的relation,的targetId的平均值加186的值","g.withSideEffect('p', [['gender': 'male', 'id': 13, 'height': 168]]).V().hasLabel('person').has('height', __.select('p').unfold().select('height')).has('name', '赵月').outE('relation').values('targetId').mean().math('_ + 186')"
"以211,203,739作为请求点id, 源点的id等于输入表id,找出名为BIN的点transfer的account,并对这些点的value进行求和","g.inject([211, 203, 739]).as('p').V().has('id', within('p')).has('name', 'BIN').outE('account_transfer_account').inV().hasLabel('account').values('value').sum()"
帮我查询与作家李科有关系的编辑的年龄,"g.V().has('author', 'name', '李科').bothE().otherV().hasLabel('publisher').values('age')"
找出徐伟认识的作家及其撰写的书籍信息，包括字数、ID和名称。,"g.V().has('author', 'name', '徐伟').out('knows').hasLabel('author').out('write').hasLabel('book').project('wordCount', 'id', 'name').by('wordCount').by('id').by('name')"
"找出所有forum的friend,或其friend的friend","g.V().hasLabel('forum').out('friend').range(1, 2).dedup()"
"给出论坛百度贴吧包含的用户,被其他论坛包含的数量","g.V().has('forum', 'name', '百度贴吧').out('contain').in('contain').hasLabel('forum').dedup().count()"
"帮我查询所有person的relation,或其relation的relation",g.V().hasLabel('person').outE('relation').inV().hasLabel('person').outE('relation').inV().hasLabel('person').dedup()
查找name的最大值大于55的节点,g.V().group().by().by(values('name').max()).unfold().filter(select(values).is(gt(55))).select(keys)
"查找被student selects数量大于108的course,记为relationCount,再查询这些course selects的university","g.V().hasLabel('course').as('a').project('node', 'relationCount').by(identity()).by(__.in('selects').hasLabel('student').id().min()).select('node', 'relationCount').where(__.select('relationCount').is(gt(108))).select('node').out('selects').hasLabel('university').dedup()"
"使用列为srcId,f0,f1, 数据为(42,900,true)的子查询作为输入表, 源点的f0等于输入表f0,查询标签等于forum_contain_post,并且f1是true,f1不等于false且权重大于105.47的边","g.withSideEffect('p', [['srcId':42, 'f0':900, 'f1':true]]).V().has('f0', __.select('p').unfold().values('f0')).outE('forum_contain_post').has('f1', true).has('f1', neq(false)).has('weight', gt(105.47))"
"以795,319,518作为请求点id, 源点的id等于输入表id,返回名为微软的点cooperate的university","g.inject([795, 319, 518]).unfold().as('p').V().has('id', __.select('p')).has('name', '微软').outE('company_cooperate_university').inV().hasLabel('university').dedup()"
"输入表的列为id,scale,name, 数据为(96,'small','华为'),(52,'medium','阿里'),(93,'large','蚂蚁集团'),(72,'medium','谷歌'), 源点的scale等于输入表scale,帮我查询id为143的person有关的person的partner, 再帮我查询和person有关系的friend","g.inject([['id':96,'scale':'small','name':'华为'],['id':52,'scale':'medium','name':'阿里'],['id':93,'scale':'large','name':'蚂蚁集团'],['id':72,'scale':'medium','name':'谷歌']]).as('p').V().hasLabel('person').has('id', '143').as('a').where(__.as('a').values('scale').as('a_scale').select('p').unfold().where(__.as('p_row').select('scale').where(eq('a_scale'))).count().is(gt(0))).bothE().otherV().hasLabel('person').as('b').outE('partner').otherV().as('c').select('b').outE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
找到孙梅认识的所有作者，返回这些作者的名字、身高和ID。,"g.V().has('author', 'name', '孙梅').out('knows').out('knows').project('name', 'height', 'id').by('name').by('height').by('id')"
"帮我查询id为184的事项关联的事项,和以拥有关系关联了这些事项的其他仓库","g.V().hasLabel('issue').has('id', 184).bothE().otherV().hasLabel('issue').as('b').inE('has').otherV().hasLabel('repository').as('c').select('b', 'c')"
帮我查询与book白夜行有关系的reader的name,"g.V().hasLabel('book').has('name', '白夜行').bothE().otherV().hasLabel('reader').values('name')"
获取department耳鼻喉科的doctor节点诊断的patient,"g.V().hasLabel('department').has('name', '耳鼻喉科').out('has').hasLabel('doctor').out('diagnose').hasLabel('patient')"
找到与赵轩和韩轩都有parent关系的人，并返回他们的薪水、年龄以及赵轩的年龄和韩轩的ID。,"g.V().has('person', 'name', '赵轩').as('a').out('parent').hasLabel('person').as('b').in('parent').has('person', 'name', '韩轩').as('c').select('a', 'b', 'c').by('age').by(values('salary', 'age')).by('id')"
 找出赵雪读者与书呐喊之间的关联，并返回它们两者之间的关联ID。,"g.V().has('reader', 'name', '赵雪').outE().as('e').inV().has('book').as('b').inE().as('e2').outV().has('book', 'name', '呐喊').select('b').values('id')"
 返回所有与买家吴雪存在取消关系且商品苹果包含的订单，并返回每个订单的名称、ID、价值、买家吴雪的名称以及商品苹果的价值。,"g.V().has('buyer', 'name', '吴雪').as('a').outE('cancel').inV().hasLabel('orders').as('b').inE('contain').outV().has('goods', 'name', '苹果').as('c').select('a', 'b', 'c').by('name').by(values('name', 'id', 'value')).by('value').project('a_name', 'b_name', 'b_id', 'b_value', 'c_value').by(select('a')).by(select('b').select('name')).by(select('b').select('id')).by(select('b').select('value')).by(select('c'))"
"帮我查询病人周思思接受的处方,以及创造这些处方的医生","g.V().hasLabel('patient').has('name', '周思思').outE('accept').inV().hasLabel('prescription').as('b').inE('creates').outV().hasLabel('doctor').as('c').select('b', 'c')"
 查询订单号为Order_236的订单。,"g.V().hasLabel('orders').has('name', 'Order_236')"
按性别分组作者的身高，然后按照身高降序排列。,"g.V().hasLabel('author').group().by('gender').by(values('height').fold()).order(local).by(values, desc)"
'找到滴滴公司申请的贷款',"g.V().hasLabel('company').has('name', '滴滴').as('b').outE('apply').as('e').inV().hasLabel('loan').as('a').select('a', 'b')"
返回前72个类型是属于的边,g.E().hasLabel('belong').limit(72)
 请帮我查询与某个大学相关的所有课程，以及这些课程的其他授课教师。,"g.V().has('university', 'id', '79').bothE().otherV().hasLabel('course').as('b').inE('teach').otherV().hasLabel('teacher').as('c').select('b', 'c')"
查询与学生周强有has关系的部门,"g.V().hasLabel('student').has('name', '周强').inE('has').outV().hasLabel('department')"
"请帮我查找与部门内科存在拥有关系,且与病人郑伟存在诊断关系的医生节点，返回这些医生的年龄,身高,名字,及部门内科的id,及病人郑伟的身高","g.V().has('department', 'name', '内科').as('a').out('has').hasLabel('doctor').as('b').in('diagnose').has('patient', 'name', '郑伟').as('c').select('a', 'b', 'c').by('id').by(values('age', 'height', 'name')).by('height')"
"查询account transfer的account,返回其源点的value加924乘32的值,以及目标点的id加19的求和值","g.V().hasLabel('account').as('a').outE('transfer').as('e').inV().hasLabel('account').as('b').project('expr1', 'sum_expr2').by(__.select('a').values('value').math('_ + 924').math('_ * 32')).by(__.select('b').values('id').math('_ + 19').sum())"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找label为person_colleague_person,以及满足条件权重小于183.54的边","g.E().hasLabel('person_colleague_person').has('weight', lt(183.54))"
查询所有名为孙红的点likes的person,"g.V().has('name', '孙红').outE('likes').inV().hasLabel('person')"
"请帮我查找全部源点标签等于医生,边标签等于创造,以及f0不是109.06或f0在771到813之间,且权重小于180.81的边","g.V().hasLabel('doctor').outE('creates').has('weight', lt(180.81)).has('f0', neq(109.06)).or(has('f0', between(771, 813))).elementMap()"
给出前85个label为雇佣的边,g.E().hasLabel('employee').limit(85)
查询所有名为徐伟的节点teach的department或teacher,"g.V().has('name', '徐伟').outE('teach').inV().hasLabel(within('department', 'teacher')).dedup()"
 找出陈思思医生的诊断患者和周国强患者的处方，返回它们。,"g.V().hasLabel('doctor').has('name', '陈思思').as('a').outE('diagnose').inV().hasLabel('patient').as('b').select('a').V().hasLabel('patient').has('name', '周国强').as('c').outE('accept').inV().hasLabel('prescription').as('d').select('a', 'b', 'c', 'd')"
"给出173个名为艺术学院的点拥有的类型为教师的节点,且其id为空或名字不等于徐若涵","g.V().has('name', '艺术学院').outE('has').inV().hasLabel('teacher').filter(or(has('id', eq(null)), has('name', neq('徐若涵')))).limit(173)"
"调用triangleCount函数,以'rk'作为输入,返回number","g.call('triangleCount').with('input', 'rk').select('number')"
"找出和标签等于大学的点有拥有关系的部门,以及和这些部门有拥有关系的学生,以及和这些学生有选择关系的课程",g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('student').out('selects').hasLabel('course')
"输入请求点id的列表256, 以属性id作为相等条件,请帮我查找和医生李强之间有doctor_creates_prescription关系的处方","g.V().hasLabel('doctor').has('id', 256).has('name', '李强').outE('doctor_creates_prescription').inV().hasLabel('prescription')"
 找到100个与公司有关联的人，并找出与这些人有关联的其他人。,g.V().hasLabel('company').as('a').outE('employee').as('e').inV().hasLabel('person').as('b').outE('knows').as('e2').inV().hasLabel('person').as('c').select('c').limit(100)
查询与蚂蚁集团所在城市有关联的城市,"g.V().has('company', 'name', '蚂蚁集团').in('contain').hasLabel('city')"
"请帮我找出用户黄宏喜欢的帖子,被其他用户喜欢的数量","g.V().has('user', 'name', '黄宏').out('likes').as('b').in('likes').as('c').select('c').dedup().count()"
 帮我找陈思琪。,"g.V().hasLabel('person').has('name', '陈思琪')"
 查询与类型为'person'的点有'parent'关系的'person'，以及这些'person'的'parent'关系，以及这些'person'的'colleague'关系。,g.V().hasLabel('person').as('a').outE('parent').inV().hasLabel('person').as('b').outE('parent').inV().hasLabel('person').as('c').outE('colleague').inV().hasLabel('person').as('d').select('d')
"返回编辑发布的书,返回其源点的id加20的平均值,以及目标点的字数对365取余的值","g.V().hasLabel('publisher').as('a').outE('publish').as('e').inV().hasLabel('book').as('b').project('avg_id_plus_20', 'word_count_mod_365').by(__.select('a').values('id').math('_ + 20').mean()).by(__.select('b').values('wordCount').math('_ % 365'))"
"以651,238,23,492作为请求点id, 源点的id等于输入表id,查询和标签为person的点有person_likes_comment关系的评论,并且和这些评论有comment_belong_film关系的电影,并且和这些电影有film_has_tag关系的标签","g.inject([651, 238, 23, 492]).as('p').flatMap(select('p').unfold().as('id')).V().hasLabel('person').as('a').where(eq('id')).by('id').by(select('id')).outE('person_likes_comment').as('e').inV().hasLabel('comment').as('b').outE('comment_belong_film').as('e2').inV().hasLabel('film').as('c').outE('film_has_tag').as('e3').inV().hasLabel('tag').as('d').select('d')"
找出所有user徐梅和杜月都喜欢的点,"g.V().has('user', 'name', '徐梅').out('likes').as('b').in('likes').has('user', 'name', '杜月').select('b')"
"请帮我查找所有与patient有关系的medicine节点,且medicine节点的id在50到85之间,并返回这些medicine的weight的最小值对571取余乘48的值,以及medicine的weight的和除weight的数量","g.V().hasLabel('patient').as('a').outE().as('e').inV().hasLabel('medicine').has('id', between(50, 85)).as('b').select('b').values('weight').fold().project('min_weight_mod', 'count_sum_div').by(select(all, 'weight').min().math('_ % 571 * 48')).by(select(all, 'weight').sum().math('_ / size()'))"
给所有大学的朋友，或者他们的朋友的朋友。,"g.V().hasLabel('university').out('friend').range(1, 2).dedup()"
"请帮我查找与用户何宏存在创造关系,且与仓库XXRepo存在属于关系的事项节点，返回这些事项的状态,创建时间,及用户何宏的身高,及仓库XXRepo的权重","g.V().has('user', 'name', '何宏').as('a').out('creates').as('b').in('belong').has('repository', 'name', 'XXRepo').as('c').select('a', 'b', 'c').by('height').by(values('status', 'createTime')).by('weight')"
"查询名字是kate且年龄为空的卖家回答的买家的名称,以及这些买家 查看的商品的名称","g.V().hasLabel('seller').has('name', 'kate').has('age', eq(null)).outE('ask').inV().hasLabel('buyer').as('b').outE('look').inV().hasLabel('goods').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"输入请求点id的列表61,326,686,722,100, 源点的id等于输入表id,给出user黄轩的所有类型为relation的边,并根据weight升序排列,返回81个","g.withSideEffect('p', [61, 326, 686, 722, 100]).V().hasLabel('user').where(__.values('id').is(within('p'))).has('name', '黄轩').outE('relation').order().by('weight', asc).limit(81).inV()"
查询前72个标签等于contain的边,g.E().hasLabel('contain').limit(72)
"查找全部买家的朋友,或其朋友的朋友",g.V().hasLabel('buyer').repeat(bothE('friend').otherV().simplePath()).times(2).dedup()
请帮我查找全部标签为作家或书的点,"g.V().hasLabel(within('author', 'book'))"
"查询id小于等于13且名字不等于Sam的用户发布的帖子的名称,以及这些帖子 拥有的标签的名称","g.V().hasLabel('user').has('id', lte(13)).has('name', neq('Sam')).outE('publish').inV().hasLabel('post').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"帮我查询department呼吸科has的doctor,被其他department has的数量","g.V().has('department', 'name', '呼吸科').out('has').in('has').hasLabel('department').dedup().count()"
找出所有与大学相关的部门，以及与其他大学有拥有关系的这些部门。,"g.V().hasLabel('university').has('id', '197').bothE().otherV().hasLabel('department').as('b').inE('has').otherV().hasLabel('university').as('c').select('b', 'c')"
找出与person杜月有knows关系的所有person,"g.V().hasLabel('person').has('name', '杜月').in('knows').hasLabel('person')"
"帮我查询关联person郑科的person,和这些person家人的person","g.V().has('person', 'name', '郑科').as('a').in('relates').hasLabel('person').as('b').out('family').hasLabel('person').as('c').select('b', 'c')"
给出所有和大学浙江大学之间有拥有关系的部门,"g.V().hasLabel('university').has('name', '浙江大学').outE('has').inV().hasLabel('department')"
找出与徐科有关的人，以及徐科支付给其他人的人，并将他们返回。,"g.V().has('person', 'name', '徐科').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('pay').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
返回马国强和李月这两位共同的父母，他们各自有180个人。,"g.V().has('person', 'name', '马国强').as('a').outE('parent').inV().as('b').inE('parent').outV().has('person', 'name', '李月').as('c').select('b').limit(180)"
"查找60个country韩国和法国,共同的partner","g.V().has('country', 'name', '韩国').outE('partner').inV().as('b').inE('partner').outV().has('country', 'name', '法国').select('b').limit(60)"
请帮我找出75个Person、周月和陈强共同的伙伴。,"g.V().has('person', 'name', '周月').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '陈强').select('b').limit(75)"
"帮我查询id为173的person关联的person, 并将person有关的person的名字的最小值赋值给person(b)的性别, 接着查询person(b)的性别小于173的person认识的person","g.V().hasLabel('person').has('id', 173).as('a').outE('relates').inV().hasLabel('person').as('b').sideEffect(__.select('b').aggregate('bSet')).select('b').sideEffect(__.select('b').bothE().otherV().hasLabel('person').values('name').min().store('bGender')).select('b').has('gender', lt(173)).outE('knows').inV().hasLabel('person').as('d').select('b').values('gender').as('b.gender').select('d').select('b.gender', 'd')"
获取与cinema相关的film节点，按value、id和name进行分组，并返回它们。,"g.V().hasLabel('cinema').bothE('releases').otherV().hasLabel('film').group().by(project('value', 'id', 'name').by(values('value')).by(values('id')).by(values('name'))).select(values).unfold().project('b.value', 'b.id', 'b.name').by(select('value')).by(select('id')).by(select('name'))"
"给出作家的三角的环,边label为认识, 并返回这些点的id","g.V().hasLabel('author').as('a').outE('knows').inV().as('b').outE('knows').inV().as('c').where(__.outE('knows').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
"输入表的列为height,gender,name, 数据为(187,'famale','郑若涵'),(154,'male','郑伟'),(195,'famale','马科'),(165,'male','周伟'), 以属性height作为相等条件,请帮我找出所有id为97的person关联的person,和以knows关系关联了这些person的其他person","g.withSideEffect('p', [['height': 187, 'gender': 'famale', 'name': '郑若涵'], ['height': 154, 'gender': 'male', 'name': '郑伟'], ['height': 195, 'gender': 'famale', 'name': '马科'], ['height': 165, 'gender': 'male', 'name': '周伟']]).V().hasLabel('person').has('id', '97').as('a').where(__.as('a').values('height').is(within(__.select('p').unfold().values('height')))).bothE().otherV().hasLabel('person').as('b').inE('knows').otherV().hasLabel('person').as('c').select('b', 'c')"
"查询和company微软有关的person,称为X,再查询和这个X有关联的其他person,以及和X有关联的company","g.V().hasLabel('company').has('name', '微软').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('company').as('d').select('a', 'b', 'c', 'd')"
"以(55,'何若涵','famale'),(63,'李轩','male'),(33,'赵科','male')作为请求表数据,属性分别为id,name,gender, 以属性name作为相等条件,帮我查询199个lang小于等于21或id小于88,且stars不是556的software,根据value降序排列","g.inject([['id':55,'name':'何若涵','gender':'famale'],['id':63,'name':'李轩','gender':'male'],['id':33,'name':'赵科','gender':'male']]).unfold().as('p').V().hasLabel('software').has('name', __.where(eq('p')).by('name')).where(or(has('lang', lte(21)), has('id', lt(88)))).has('stars', neq(556)).order().by('value', desc).limit(199)"
"查询和标签等于课程的点有属于关系的部门,并且和这些部门有拥有关系的教师,并且和这些教师有教关系的课程",g.V().hasLabel('course').as('a').out('belong').hasLabel('department').as('b').out('has').hasLabel('teacher').as('c').out('teach').hasLabel('course').as('d').select('d')
id对id取余的值,g.V().project('result').by(values('id').math('_ / _'))
找出与韩科相关的人员，以及他所拥有的其他账户，并将它们返回。,"g.V().has('person', 'name', '韩科').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('own').inV().hasLabel('account').as('c').select('a', 'b', 'c')"
"找出112个名为黄雪的点创造的标签等于事项的节点,且其状态为Closed","g.V().has('name', '黄雪').outE('creates').inV().hasLabel('issue').has('status', 'Closed').limit(112)"
请帮我查找合并请求的3度以内的环,g.V().hasLabel('pullRequest').as('a').repeat(bothE().otherV().simplePath()).times(3).where(cyclicPath()).path().by('id')
"用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));返回与名为吴月和李宏的点共同发布的,标签为书的节点","g.V().has('name', '吴月').outE('publisher_publish_book').inV().hasLabel('book').as('b').inE('publisher_publish_book').outV().has('name', '李宏').select('b')"
帮我查询名为中国军事论坛的节点包含的论坛,"g.V().has('name', '中国军事论坛').out('contain').hasLabel('forum')"
"用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询标签为post,名为Post_293的点,返回这些点的lang,wordCount,value","g.V().hasLabel('post').has('name', 'Post_293').project('lang', 'wordCount', 'value').by('lang').by('wordCount').by('value')"
"查询价值大于等于894或人数不是50638的国家包含的城市的名称,以及这些城市 包含的公司的名称","g.V().hasLabel('country').has('value', gte(894)).or().has('peopleNumber', neq(50638)).outE('contain').inV().hasLabel('city').as('b').outE('contain').inV().hasLabel('company').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
给出122个与韩建国和郑强都存在关系的person节点,"g.V().has('name', '韩建国').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '郑强').select('b').limit(122)"
人数除870的值,g.V().hasLabel('a').values('peopleNumber').math('_ / 870')
"返回81个名为Prescription_309的点包含的label为药品的节点,且其类别等于发烧药且价格大于等于15","g.V().has('name', 'Prescription_309').out('contain').hasLabel('medicine').has('category', '发烧药').has('price', gte(15)).limit(81)"
"用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部和名为赵思琪的读者有相关者关系,或有相关者的相关者关系的书","g.V().has('reader', 'name', '赵思琪').out('relation').hasLabel('book').dedup()"
"给出所有person的朋友,或其朋友的朋友",g.V().hasLabel('person').repeat(out('friend')).times(2).dedup()
请帮我找出seller郑月ask的buyer节点consult的seller,"g.V().has('seller', 'name', '郑月').out('ask').in('consult').hasLabel('seller')"
 查询孙思思认识且向其支付的人。,"g.V().hasLabel('person').has('name', '孙思思').outE('knows').inV().hasLabel('person').outE('pay').inV().hasLabel('person')"
"找出和类型为person的点有喜欢关系的person,且和这些person有支付关系的person,且和这些person有喜欢关系的person",g.V().hasLabel('person').as('a').out('likes').hasLabel('person').as('b').out('pay').hasLabel('person').as('c').out('likes').hasLabel('person').as('d').select('d')
"给出全部和名为吴宏的doctor有relation关系,或有relation的relation关系的prescription","g.V().hasLabel('doctor').has('name', '吴宏').bothE('relation').otherV().or(__.hasLabel('prescription'), __.bothE('relation').otherV().hasLabel('prescription')).dedup()"
 韩建聪的父母的友人的恋人,"g.V().has('person', 'name', '韩建聪').out('parent').out('friend').out('lover')"
"请帮我查找论坛的朋友,或其朋友的朋友","g.V().hasLabel('forum').out('friend').range(1, 2).dedup()"
"根据身高,年龄分组,计算年龄除65的值",g.V().hasLabel('a').group().by('height').by(group().by('age').by(values('age').math('_ / 65')))
获取与person ID为112相关的forum的关系，然后获取与forum相关的partner。,"g.V().has('person', 'id', '112').bothE().otherV().hasLabel('forum').as('b').bothE().hasLabel('relation').otherV().as('c').select('b').bothE().hasLabel('partner').otherV().as('d').select('a', 'b', 'c', 'd').by(elementMap())"
"给出重庆的点属于的国家,然后给出重庆被属于的大学,一起返回","g.V().has('name', '重庆').as('a').outE('belong').inV().hasLabel('country').as('b').select('a').inE('belong').outV().hasLabel('university').as('c').select('a', 'b', 'c')"
请帮我查找与韩雪有关的人，包括她的恋人，并将他们全部返回。,"g.V().has('person', 'name', '韩雪').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('lover').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
"请帮我找出所有名为何梅的,性别的平均值等于54的朋友,返回这些朋友的性别,和边的源点id,f1","g.V().has('name', '何梅').outE('friend').as('e').inV().as('b').group().by(constant(1)).by(project('avgGender', 'bList').by(values('gender').mean()).by(fold())).unfold().select(values).where(select('avgGender').is(eq(54))).select('bList').unfold().as('b').select('e', 'b').by(select('e')).by(select('b')).select('b', 'e').by(values('gender')).by(project('srcId', 'f1').by(outV().id()).by(values('f1')))"
"请帮我查找和person韩梅有关的person,称为X,再请帮我查找和这个X有关联的其他person,以及和X有关联的person","g.V().has('person', 'name', '韩梅').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
帮我查询user的2度的环,"g.V().hasLabel('user').as('a').repeat(out().simplePath()).times(2).where(out().as('a')).path().by('id').project('a.id', 'b_id').by(limit(local, 1)).by(tail(local, 1))"
"查找belong issue ISSUE-83 belong的repository,的pullRequest","g.V().hasLabel('issue').has('name', 'ISSUE-83').outE('belong').inV().hasLabel('repository').as('b').inE('belong').outV().hasLabel('pullRequest').as('c').select('b', 'c')"
查找所有标签为person或company或software的点,"g.V().hasLabel(within('person', 'company', 'software'))"
 给出的贷款和以申请关联的其他公司。,"g.V().has('loan', 'id', '65').bothE().otherV().hasLabel('loan').as('b').inE('apply').outV().hasLabel('company').as('c').select('b', 'c')"
"找出被软件使用数量大于114的软件,记为relationCount,再查询这些软件使用的person","g.V().hasLabel('software').as('a').project('a', 'relationCount').by(identity()).by(__.in('uses').hasLabel('software').id().mean()).select('a', 'relationCount').as('b').where(__.select('relationCount').is(gt(114))).select('a').out('uses').hasLabel('person').dedup()"
"输入请求点id的列表427,196, 以属性id作为相等条件,给出标签为person的点,返回92个","g.inject([427, 196]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).limit(92)"
 找出所有关联的标签和以has-a关系关联这些标签的其他电影。,"g.V().has('tag', 'id', '24').bothE().otherV().hasLabel('tag').as('b').inE('has').otherV().hasLabel('film').as('c').select('b', 'c')"
"请帮我找出id为179的点的id,薪资","g.V().has('id', 179).project('id', 'salary').by(values('id')).by(values('salary'))"
"请帮我查找height不为空,name不等于李科的节点","g.V().has('height', neq(null)).has('name', neq('李科'))"
"帮我查询id为96的医生创造的处方, 并将处方有关的药品的名字的最大值赋值给处方的名字, 接着查询处方的名字小于96的处方包含的药品","g.V().hasLabel('doctor').has('id', 96).outE('creates').inV().hasLabel('prescription').as('b').project('b_name', 'd').by(coalesce(select('b').outE().inV().hasLabel('medicine').values('name').max(), constant(''))).by(select('b').filter(values('name').is(lt(96))).outE('contain').inV().hasLabel('medicine').fold()).select('b_name', 'd')"
找出与公司字节有雇佣关系的1度的环,"g.V().hasLabel('company').has('name', '字节').as('a').bothE('employee').bothV().where(neq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询123个名为郑梅的点publish的类型是post的节点,且其name为Post_233","g.V().has('user', 'name', '郑梅').outE('user_publish_post').inV().has('post', 'name', 'Post_233').limit(123)"
 请问是否有赵国强或名字小于等于158的作家所写的书籍，以及这些书籍所关联的书籍名称？,"g.V().hasLabel('author').has('name', within('赵国强')).or().has('name', lte(158)).outE('write').inV().hasLabel('book').as('b').outE('relates').inV().hasLabel('book').as('c').select('b', 'c').by('name').by('name')"
"使用列为name,height,id, 数据为('孙思思',151,92)的子查询作为输入表, 源点的height等于输入表height,查询前21个label为person_knows_person的边","g.withSideEffect('p', [['name': '孙思思', 'height': 151, 'id': 92]]).V().has('height', __.select('p').unfold().select('height')).outE('person_knows_person').limit(21)"
请帮我找出所有名为陈建国的节点支付的person,"g.V().has('name', '陈建国').outE('pay').inV().hasLabel('person')"
"返回从公司蚂蚁集团出发,经过label为雇佣的边,走1跳到达的person点","g.V().has('company', 'name', '蚂蚁集团').out('employee').hasLabel('person')"
"请帮我查找和卖家李红有拥有关系的商品,再请帮我查找以回答关系关联了李红的买家","g.V().hasLabel('seller').has('name', '李红').as('a').outE('has').inV().hasLabel('goods').as('b').select('a').inE('ask').outV().hasLabel('buyer').as('c').select('a', 'b', 'c')"
"查询名字不等于41的person创造的评论的名称,以及这些评论 属于的电影的名称","g.V().hasLabel('person').has('name', neq('41')).outE('creates').inV().hasLabel('comment').as('b').outE('belong').inV().hasLabel('film').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));给出175个名为张红的点write的label为book的节点,且其id在36到48之间","g.V().has('author', 'name', '张红').outE('author_write_book').inV().has('book', 'id', between(36, 48)).limit(175)"
"给出person徐月的所有类型是relation的边,并根据f0升序排列,返回10个","g.V().has('person', 'name', '徐月').outE('relation').order().by('f0', asc).limit(10).inV()"
"给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出大学电子科技大学的全部类型是相关者的边,并根据权重升序排列,返回19个","g.V().has('university', 'name', '电子科技大学').outE('relation').order().by('weight', asc).limit(19).inV()"
"调用personalRank函数,以15, 'XH', 38作为输入,返回id, value","g.call(""PERSONALRANK"").with(""arg1"", 15).with(""arg2"", ""XH"").with(""arg3"", 38).project(""id"", ""value"").by(__.select(""id"")).by(__.select(""value""))"
找出陈月的合作伙伴关系。,"g.V().has('author', 'name', '陈月').outE('partner').inV().outE('refers').inV().outE('relation').inV()"
"查找所有person以gender,name分组的id, 根据id降序排序","g.V().hasLabel('person').group().by(values('gender', 'name')).by(values('id').fold()).order(local).by(keys, desc)"
 请帮我找出与放射科有拥有/关联关系的医生。,"g.V().has('department', 'name', '放射科').as('a').outE('has').inV().hasLabel('doctor').as('b').select('a').inE('has').outV().hasLabel('doctor').as('c').select('a', 'b', 'c')"
请帮我查找和course操作系统之间有belong关系的department,"g.V().hasLabel('course').has('name', '操作系统').outE('belong').inV().hasLabel('department')"
"帮我查询person likes的comment,返回其源点的salary的最大值减salary的平均值,以及目标点的id加45除33的值","g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('comment').as('b').select('a', 'b').by().project('avg_diff', 'calc_id').by(select('a').values('salary').max().as('max_salary').select('a').values('salary').as('salary').select('max_salary', 'salary').by().by().math('max_salary - salary').mean()).by(select('b').values('id').math('_ + 45').math('_ / 33'))"
"以218作为请求点id, 以属性id作为相等条件,帮我查询名为美团的公司,以及与其有关的公司,并返回美团的规格和这些公司的人数","g.withSideEffect('p', [218]).V().hasLabel('company').has('id', __.select('p')).has('name', '美团').as('a').bothE().as('e').otherV().hasLabel('company').as('b').select('a', 'b').by('scale').by('peopleNumber')"
查询身高为空或者年龄不为空的人认识的人的名字，以及这些人认识的人的名字。,"g.V().hasLabel('person').or(hasNot('height'), has('age')).outE('knows').inV().hasLabel('person').as('b').outE('knows').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"输入表的列为salary,age,id, 数据为(2945,43,76), 源点的salary等于输入表salary,帮我查询user马强的全部label为friend的边,并根据f0从小到大排列,返回177个","g.withSideEffect('p', [['salary':2945, 'age':43, 'id':76]]).V().hasLabel('user').has('salary', __.select('p').unfold().select('salary')).has('name', '马强').outE('friend').order().by('f0', asc).limit(177).inV()"
 马轩和韩雪有一个共同的医生朋友。,"g.V().hasLabel('doctor').has('name', '马轩').outE('friend').inV().as('b').inE('friend').outV().hasLabel('doctor').has('name', '韩雪').select('b').limit(185)"
查询从person到person，且标签为喜欢的边,g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('person').as('b').select('e')
"请帮我找出名为Flink的person或company或software,以及与其有关的person,并返回Flink的openSource和这些person的name","g.V().has('name', 'Flink').hasLabel(within('person', 'company', 'software')).bothE().otherV().hasLabel('person').project('a.openSource', 'b.name').by(select(all, 'v').unfold().hasLabel(within('person', 'company', 'software')).values('openSource')).by(select(all, 'v').unfold().hasLabel('person').values('name'))"
给出所有名为何若涵的点喜欢的person,"g.V().has('name', '何若涵').out('likes').hasLabel('person')"
请帮我找出所有既与外科有关又隶属于某个部门的医生，并返回他们的名字。,"g.V().has('name', '外科').out('has').hasLabel('doctor').out('belong').hasLabel('department').values('name')"
"查找person观看的电影, 令电影的价值的值等于观看电影的person的身高的平均值, 再查找电影拥有的标签","g.V().hasLabel('person').as('a').outE('watch').as('e').inV().hasLabel('film').as('b').sideEffect(__.project('value').by(__.select('b').in('watch').hasLabel('person').values('height').mean()).select('value').store('b_value')).select('b').outE('has').as('e3').inV().hasLabel('tag').as('d').select('b_value', 'd')"
给出person的3跳的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(3).where(loops().is(3)).where(eq('a')).project('a.id', 'b_id').by(select('a').id()).by(id())"
请帮我找到所有类型为department，名称为生物学院的点，并返回它们的id和size。,"g.V().hasLabel('department').has('name', '生物学院').project('a.id', 'a.size').by('id').by('size')"
请帮我找出何伟发表过的帖子，以及这些帖子关联的标签。返回这些帖子和标签的名字。,"g.V().has('name', '何伟').outE('publish').inV().hasLabel('post').outE('has').inV().hasLabel('tag').values('name')"
"帮我查询全部名为杜科的,价值小于670,id的平均值除id小于21的相关者,返回这些相关者的名字,和边的权重","g.V().has('name', '杜科').outE('relation').as('e').inV().as('b').where(__.has('value', lt(670)).and(__.project('avg', 'id').by(__.values('id').mean()).by(__.values('id')).select('avg', 'id').math('avg / id').is(lt(21)))).select('b', 'e').by('name').by('weight')"
帮我查询全部label为大学的点,g.V().hasLabel('university')
"输入表的列为category,value,price, 数据为('电子产品',195,3814.51),('家具',481,2999.93),('衣服',384,780.29), 源点的price等于输入表price,帮我查询id为168的点的id,价值,价格","g.withSideEffect('p', [['category':'电子产品','value':195,'price':3814.51],['category':'家具','value':481,'price':2999.93],['category':'衣服','value':384,'price':780.29]]).V().has('id','168').as('a').where(__.select('a').values('price').is(within(__.select('p').unfold().values('price')))).select('a').project('id','value','price').by(values('id')).by(values('value')).by(values('price'))"
请帮我找出名为黄红的节点write的book或reader,"g.V().has('name', '黄红').outE('write').inV().hasLabel(within('book', 'reader')).dedup()"
"给出与巴黎存在包含关系的大学,大学与公司存在合作关系的点,返回这些点的id","g.V().has('name', '巴黎').out('contain').hasLabel('university').out('cooperate').hasLabel('company').id()"
 请帮我查找与 person 点有关联的公司节点，并按规格分组返回。,g.V().hasLabel('person').bothE('belong').otherV().hasLabel('company').group().by('scale')
"找出和名为孙建国的卖家有伙伴关系,或有伙伴的伙伴关系的商品","g.V().has('seller', 'name', '孙建国').out('partner').hasLabel('goods').fold().union(__.identity(), __.out('partner').hasLabel('goods')).unfold().dedup()"
请帮我找出label为医生或药品的点,"g.V().hasLabel(within('doctor', 'medicine'))"
"以673,651,601作为请求点id, 以属性id作为相等条件,查询类型为评论的点,返回178个","g.inject([673, 651, 601]).unfold().as('p').V().hasLabel('comment').has('id', __.select('p')).limit(178)"
"请帮我查找软件的三角的环,边标签等于使用, 并返回这些点的id","g.V().hasLabel('software').as('a').outE('uses').inV().as('b').outE('uses').inV().as('c').where(outE('uses').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"找出所有与吴思思存在喜欢关系的帖子,帖子与标签存在拥有关系的点,返回这些点的id","g.V().has('name', '吴思思').out('likes').hasLabel('post').out('has').hasLabel('tag').id()"
"请帮我查找和company字节有关的company,称为X,再请帮我查找和这个X有关联的其他company,以及和X有关联的company","g.V().has('company', 'name', '字节').as('a').bothE().otherV().hasLabel('company').as('b').bothE().otherV().hasLabel('company').as('c').select('b').bothE().otherV().hasLabel('company').as('d').select('a', 'b', 'c', 'd')"
给出与贷款loan_78和loan_42都存在存款关系的点,"g.V().has('loan', 'name', 'loan_78').outE('deposit').inV().as('b').inE('deposit').outV().has('loan', 'name', 'loan_42').select('b')"
 返回与Post_205相关的论坛，并返回Post_205的标签。,"g.V().hasLabel('post').has('name', 'Post_205').as('a').both().hasLabel('forum').as('b').select('a').out('has').hasLabel('tag').as('c').select('a', 'b', 'c')"
"查询id为142的城市有关的公司的伙伴, 再查询和公司有关系的伙伴","g.V().has('city', 'id', 142).as('a').bothE().otherV().hasLabel('company').as('b').bothE('partner').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出id为25的点的age,name","g.V().has('person', 'id', 25).project('age', 'name').by('age').by('name')"
请帮我查找id为158的点的价值,"g.V().has('id', 158).values('value')"
查找所有和用户李建聪之间有发布关系的帖子,"g.V().has('user', 'name', '李建聪').outE('publish').inV().hasLabel('post')"
 给定孙红创建的评论，返回评论所属的电影的名称和ID。,"g.V().hasLabel('person').has('name', '孙红').outE('creates').inV().hasLabel('comment').outE('belong').inV().hasLabel('film').project('c.name', 'c.id').by('name').by('id')"
"帮我查询全部名为黄思思的点的,id为95的朋友,返回这些朋友的身高,和边的源点id,目标点id","g.V().has('name', '黄思思').outE('friend').as('e').inV().has('id', 95).project('b_height', 'e_srcId', 'e_targetId').by(values('height')).by(select('e').values('srcId')).by(select('e').values('targetId'))"
"输入请求点id的列表315, 源点的id等于输入表id,给出81个和类型为person的点有person_lover_person关系的person,并且和这些person有person_friend_person关系的person","g.withSideEffect('p', [315]).V().hasLabel('person').where(__.id().is(within('p'))).as('a').out('person_lover_person').hasLabel('person').as('b').out('person_friend_person').hasLabel('person').as('c').select('c').limit(81)"
"给出类型是编辑的所有点,并根据年龄升序排列","g.V().hasLabel('publisher').order().by('age', asc)"
"请帮我查找与城市重庆有关,且与大学复旦大学有关系的公司节点","g.V().has('city', 'name', '重庆').bothE('contain').bothV().hasLabel('company').as('b').bothE('cooperate').bothV().has('university', 'name', '复旦大学').select('b')"
"找出和标签为作家的点有撰写关系的书,以及和这些书有引用关系的书,以及和这些书有引用关系的书",g.V().hasLabel('author').as('a').out('write').hasLabel('book').as('b').out('refers').hasLabel('book').as('c').out('refers').hasLabel('book').as('d').select('d')
找出与编辑徐建聪和王梅都存在发布关系的点,"g.V().has('publisher', 'name', '徐建聪').outE('publish').inV().as('b').inE('publish').outV().has('publisher', 'name', '王梅').select('b')"
查找41个与南京大学和清华大学都存在关系的国家或公司或城市节点,"g.V().has('name', '南京大学').as('a').outE().as('e').inV().hasLabel(within('country', 'company', 'city')).as('b').inE().as('e2').outV().has('name', '清华大学').as('c').select('b').limit(41)"
"根据name,wordCount,value分组,计算value除245的值","g.V().hasLabel('a').group().by(values('name', 'wordCount', 'value')).by(values('value').math('/ 245').fold())"
"找出名为马轩和王强的,类型为买家的点公共的伙伴节点的名单","g.V().has('buyer', 'name', '马轩').as('a').outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().as('c').has('buyer', 'name', '王强').select('b').values('name')"
找出id为111的点的id,"g.V().has('id', 111).values('id')"
找出在知网和CSDN论坛上都是朋友的节点名单。,"g.V().hasLabel('forum').has('name', '知网').outE('friend').inV().as('b').inE('friend').outV().hasLabel('forum').has('name', 'CSDN').select('b').values('name')"
帮我查询所有和大学四川大学之间有合作关系的公司,"g.V().hasLabel('university').has('name', '四川大学').outE('cooperate').inV().hasLabel('company')"
"请帮我找出所有与韩雪存在creates关系的comment,comment与film存在belong关系的点,返回这些点的value","g.V().has('name', '韩雪').out('creates').hasLabel('comment').out('belong').hasLabel('film').values('value')"
"查找名为上海的城市,以及与其有关的大学,并返回上海的名字和这些大学的id","g.V().has('city', 'name', '上海').bothE().otherV().hasLabel('university').project('a_name', 'b_id').by(select('a').values('name')).by(values('id'))"
"请帮我查找标签为loan,名为loan_67的点,返回这些点的id,amount,weight","g.V().hasLabel('loan').has('name', 'loan_67').project('id', 'amount', 'weight').by('id').by('amount').by('weight')"
"找出id为192的国家包含的城市, 并将城市有关的公司的名字的数量赋值给城市的id, 接着查询城市的id小于192的城市包含的公司","g.V().has('country', 'id', 192).out('contain').hasLabel('city').as('b').sideEffect(select('b').both().hasLabel('company').values('name').count().as('id')).select('b').has('id', lt(192)).out('contain').hasLabel('company').as('d').select('b', 'd').by('id').by()"
"返回185个权重为352或权重为339或金额大于等于6579.88的贷款,根据金额从小到大排列","g.V().hasLabel('loan').or(has('weight', 352), has('weight', 339), has('amount', gte(6579.88))).order().by('amount', asc).limit(185)"
"请帮我查找user何轩publish的post,以及publish这些post的user","g.V().hasLabel('user').has('name', '何轩').outE('publish').inV().hasLabel('post').as('b').inE('publish').outV().hasLabel('user').as('c').select('b', 'c')"
"查找全部和person点有knows关系的person节点,且边满足条件f1不等于false,目标person节点满足条件id大于等于82","g.V().hasLabel('person').as('a').outE('knows').has('f1', neq(false)).as('e').inV().hasLabel('person').has('id', gte(82)).as('b').select('b')"
"使用列为name,gender,id, 数据为('何强','male',83),('Tom','famale',81),('孙国强','famale',97)的子查询作为输入表, 以属性gender作为相等条件,请帮我找出与person赵思琪和徐建国都存在person_pay_person关系的点","g.withSideEffect('p', [['name': '何强', 'gender': 'male', 'id': 83], ['name': 'Tom', 'gender': 'famale', 'id': 81], ['name': '孙国强', 'gender': 'famale', 'id': 97]]).V().hasLabel('person').has('name', '赵思琪').as('a').outE('person_pay_person').inV().as('b').inE('person_pay_person').outV().hasLabel('person').has('name', '徐建国').as('c').where('a', eq('c')).by('gender').select('b')"
"查询19个名为吴轩的点diagnose的类型为patient的节点,且节点name为吴轩","g.V().has('name', '吴轩').outE('diagnose').inV().has('label', 'patient').has('name', '吴轩').limit(19)"
"输入请求点id的列表694,561,652, 以属性id作为相等条件,帮我查询所有源点label为person,边label为person_family_person,并且targetId的数量大于等于90的边","g.inject([694, 561, 652]).unfold().as('p').V().hasLabel('person').has('id', __.as('p').select('p')).as('a').outE('person_family_person').where(__.project('targetIdCount').by(__.inV().id().fold().count()).select('targetIdCount').is(gte(90))).as('e').select('e')"
"找出person的三角的环,边类型是creates, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('creates').inV().as('b').outE('creates').inV().as('c').where(__.outE('creates').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
 返回与黄轩有支付关系的人和与孙强有支付关系的人。,"g.V().has('person', 'name', '黄轩').as('a').outE('pay').inV().as('b').select('a').V().has('person', 'name', '孙强').as('c').outE('pay').inV().as('d').select('a', 'b', 'c', 'd')"
"查询所有person的朋友,或其朋友的朋友",g.V().hasLabel('person').repeat(out('friend')).times(2).dedup()
"找出与buyer韩轩有关系的orders, 返回和这些orders有关联的orders的,id的平均值对id取余的最小值","g.V().has('buyer', 'name', '韩轩').bothE().otherV().hasLabel('orders').bothE().otherV().hasLabel('orders').values('id').mean().as('avg').select('avg').math('_ / id').min()"
"请帮我找出所有源点标签等于账号,边标签等于还款的边,返回这些边的f0加707的值,和f0减539的求和值","g.V().hasLabel('account').outE('repay').project('expr1', 'expr2').by(values('f0').sum().by(__.constant(707).sum())).by(values('f0').sum().by(__.constant(-539).sum()).sum())"
"输入表的列为age,height,salary, 数据为(61,178,4620),(63,176,5213),(19,176,5581), 源点的salary等于输入表salary,请帮我找出标签等于公司的点,返回195个","g.withSideEffect('p', [[61, 178, 4620], [63, 176, 5213], [19, 176, 5581]]).V().hasLabel('company').where(__.as('a').values('salary').as('salary').select('p').unfold().where(eq('salary')).by().by(tail(local, 1))).limit(195)"
"帮我查询电影院好视影院上映的电影,以及上映这些电影的电影院, 令电影院(c)的id等于电影院(a)的地址,令电影的id等于电影的名字,令电影院的类别等于电影的id除id的求和值, 返回电影院(a)的名字,电影(b)的价值,电影院(c)的名字","g.V().has('cinema', 'name', '好视影院').as('a').outE('releases').inV().hasLabel('film').as('b').inE('releases').outV().hasLabel('cinema').as('c').select('a', 'b', 'c').by('name').by('value').by('name').project('a_name', 'b_value', 'c_name').by(select('a')).by(select('b')).by(select('c'))"
"查询deposit account Light transfer的account,的loan","g.V().hasLabel('account').has('name', 'Light').outE('transfer').inV().as('b').inE('deposit').outV().hasLabel('loan').as('c').select('b', 'c')"
"查找id为57的账号还款的贷款, 并将贷款有关的person的名字的数量赋值给贷款的权重, 接着查询贷款的权重小于57的贷款存款的账号","g.V().has('account', 'id', 57).out('repay').hasLabel('loan').as('b').sideEffect(project('weight').by(outE().inV().hasLabel('person').values('name').dedup().count()).by(__.identity()).select('weight').store('b_weight')).select('b').where(select('b_weight').is(lt(57))).out('deposit').hasLabel('account').as('d').select('b_weight', 'd')"
 找所有起点是学生，终点是课程，且标签为选择的边。,g.V().hasLabel('student').outE('selects').as('e').inV().hasLabel('course').select('e')
查找前177个label为ask的边,g.E().hasLabel('ask').limit(177)
"给出department has的student, 令student的height的值等于hasstudent的department的name的和, 再查找student selects的course","g.V().hasLabel('department').as('a').outE('has').as('e').inV().hasLabel('student').as('b').project('b', 'height').by(select('b')).by(select('b').as('student').inE('has').as('e2').outV().hasLabel('department').values('name').sum()).select('b').outE('selects').as('e3').inV().hasLabel('course').as('d').select('height', 'd')"
"请帮我找出所有id为143的贷款关联的贷款,和以申请关系关联了这些贷款的其他公司","g.V().has('loan', 'id', 143).bothE().otherV().hasLabel('loan').as('b').inE('apply').otherV().hasLabel('company').as('c').select('b', 'c')"
找出与陈思思有关联并属于电影'功夫'的评论节点。返回这些评论的字数、陈思思的名字以及电影'功夫'的价值。,"g.V().has('person', 'name', '陈思思').as('a').outE('creates').inV().hasLabel('comment').as('b').inE('belong').outV().has('film', 'name', '功夫').as('c').select('a', 'b', 'c').by('name').by('wordCount').by('value')"
"使用列为name,id,gender, 数据为('赵轩',38,'famale'),('王科',58,'famale'),('徐红',98,'famale')的子查询作为输入表, 以属性id作为相等条件,帮我查询所有编辑以id,年龄分组的id, 根据id降序排序","g.inject(['赵轩', 38, 'famale'], ['王科', 58, 'famale'], ['徐红', 98, 'famale']).as('p').select('p').by(unfold()).V().hasLabel('publisher').as('a').where(eq('a')).by('id').by(select('p').limit(1).tail(1)).select('a').group().by(union(values('id'), values('age')).fold()).by(select('id').fold()).order(local).by(keys, desc)"
"输入请求点id的列表666, 以属性id作为相等条件,找出36个与郑雪和韩轩都存在关系的buyer节点","g.inject(666).as('p').V().has('id', __.select('p')).has('name', '郑雪').outE().as('e').inV().hasLabel('buyer').as('b').inE().as('e2').outV().has('name', '韩轩').select('b').limit(36)"
给出所有和person张若涵有3跳关系的person,"g.V().has('person', 'name', '张若涵').repeat(out().simplePath()).times(3).hasLabel('person').dedup()"
 找出马宏喜欢的人。,"g.V().hasLabel('person').has('name', '马宏').outE('likes').inV().hasLabel('person').as('b').select('b').by().as('a').select('a', 'b')"
"请帮我查找年龄不等于60或id小于等于27,且id大于51的节点","g.V().has('id', gt(51)).or(has('age', neq(60)), has('id', lte(27)))"
 请帮我找出王红所有的物品，以及与王红联系的买家，一并返回。,"g.V().has('name', '王红').as('a').outE('has').inV().hasLabel('goods').as('b').select('a').inE('consult').outV().hasLabel('buyer').as('c').select('a', 'b', 'c')"
"请帮我查找被person赵伟commits的software,和赵伟knows的person","g.V().hasLabel('person').has('name', '赵伟').as('b').outE('commits').inV().hasLabel('software').as('a').select('b').outE('knows').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
 查询与Sam有喜欢关系的对象，再查询与Sam有喜欢关联的对象。,"g.V().has('person', 'name', 'Sam').as('a').outE('likes').inV().hasLabel('person').as('b').select('a').inE('likes').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
帮我查找与用户黄思思和喜剧标签相关的帖子,"g.V().has('user', 'name', '黄思思').outE('publish').inV().hasLabel('post').as('b').inE('has').outV().has('tag', 'name', '喜剧').select('b')"
"查询和类型是company的点有employee关系的person,且和这些person有knows关系的person,且和这些person有buy关系的software",g.V().hasLabel('company').as('a').out('employee').hasLabel('person').as('b').out('knows').hasLabel('person').as('c').out('buy').hasLabel('software').as('d').select('d')
"用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询55个prescription Prescription_304和Prescription_302,共同的friend","g.V().has('prescription', 'name', 'Prescription_304').out('friend').as('b').in('friend').has('prescription', 'name', 'Prescription_302').select('b').limit(55)"
帮我找出与city节点相关的company节点，按其id和scale进行分组，并返回它们的id和scale。,"g.V().hasLabel('city').bothE('contain').bothV().hasLabel('company').group().by(values('id', 'scale')).by(project('id', 'scale').by(values('id')).by(values('scale')))"
找出仓库FSM拥有的合并请求节点属于的仓库,"g.V().hasLabel('repository').has('name', 'FSM').out('has').hasLabel('pullRequest').out('belong').hasLabel('repository')"
找出所有与教师相关的课程，以及通过'teach'关系与其他教师相关联的所有课程。,"g.V().has('teacher', 'id', '198').bothE().otherV().hasLabel('course').as('b').inE('teach').otherV().hasLabel('teacher').as('c').select('b', 'c')"
查找满足条件gender是male的节点,"g.V().has('gender', 'male')"
找出全部和person吴红之间有支付关系的person,"g.V().has('person', 'name', '吴红').outE('pay').inV().hasLabel('person').dedup()"
 列出身高超过182的人的姓名，以及他们所涉及的其他人。,"g.V().hasLabel('person').has('height', gt(182)).as('a').outE('relates').as('e').inV().hasLabel('person').as('b').outE('relates').as('e2').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
查询所有和person Jack有3度关系的person,"g.V().has('person', 'name', 'Jack').repeat(bothE().otherV().simplePath()).times(3).hasLabel('person').dedup()"
"以166,815,39作为请求点id, 源点的id等于输入表id,请帮我查找被person徐伟knows的person","g.inject([166, 815, 39]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).as('a').in('person_knows_person').hasLabel('person').has('name', '徐伟').as('b').select('a', 'b')"
"帮我查询所有电影院的相关者,或其相关者的相关者",g.V().hasLabel('cinema').outE('relation').inV().simplePath().by(T.id).path().unfold().tail(2).dedup().fold().limit(1).unfold().tail(1)
 返回与编辑郑强有发布关系且与书孤城有引用关系的书籍节点，并返回这些书籍的名称、ID、编辑郑强的身高和书孤城的ID。,"g.V().has('publisher', 'name', '郑强').as('a').outE('publish').inV().hasLabel('book').as('b').inE('refers').outV().has('book', 'name', '孤城').as('c').select('a', 'b', 'c').by('height').by(values('name', 'id')).by('id').project('a.height', 'b.name', 'b.id', 'c.id').by(select('a')).by(select('b').select('name')).by(select('b').select('id')).by(select('c'))"
 找出标签为person且名称为李强的点，并返回这些人的身高和薪资。,"g.V().hasLabel('person').has('name', '李强').project('height', 'salary').by('height').by('salary')"
"输入表的列为peopleNumber,id,scale, 数据为(945,62,'large'), 以属性scale作为相等条件,给出所有与孙轩存在person_own_account关系的账号,账号与账号存在account_transfer_account关系的点,返回这些点的id","g.withSideEffect('p', [['peopleNumber': 945, 'id': 62, 'scale': 'large']]).V().has('scale', select('p').unfold().select('scale')).has('name', '孙轩').outE('person_own_account').inV().hasLabel('account').outE('account_transfer_account').inV().hasLabel('account').id()"
"输入请求点id的列表512,279, 源点的id等于输入表id,返回全部标签为软件的点","g.inject([512, 279]).unfold().as('p').V().hasLabel('software').has('id', __.select('p')).dedup()"
"返回与person郑轩存在家人关系,且与person陈国强存在同事关系的person节点，返回这些person的薪资,性别,名字,及person郑轩的身高,及person陈国强的名字","g.V().has('person', 'name', '郑轩').as('a').outE('family').inV().hasLabel('person').as('b').inE('colleague').outV().has('person', 'name', '陈国强').as('c').select('a', 'b', 'c').by('height').by(values('salary', 'gender', 'name')).by('name')"
 找出纽约与Bilibili有关联的大学节点。,"g.V().has('city', 'name', '纽约').out('contain').hasLabel('university').as('b').out('cooperate').has('company', 'name', 'Bilibili').select('b')"
返回所有与标签为'book'的点有refers关系的book节点。,g.V().hasLabel('book').as('a').out('refers').hasLabel('book').as('b').out('refers').hasLabel('book').as('c').out('refers').hasLabel('book').as('d').select('d')
"请帮我找出名为郑轩的点支付的所有person,并对这些person的薪资进行求和","g.V().has('name', '郑轩').outE('pay').inV().hasLabel('person').values('salary').sum()"
"帮我查询名为Comment_333的comment,以及与其有关的comment,并返回Comment_333的id和这些comment的name","g.V().hasLabel('comment').has('name', 'Comment_333').bothE().otherV().hasLabel('comment').project('a_id', 'b_name').by(__.select('a').id()).by(__.select('b').values('name')).select('a_id', 'b_name')"
 找出外科部门的医生，返回该医生诊断的患者的年龄、身高和姓名。,"g.V().hasLabel('department').has('name', '外科').out('has').hasLabel('doctor').out('diagnose').hasLabel('patient').project('age', 'height', 'name').by('age').by('height').by('name')"
返回全部名为Jimmy的点教的课程,"g.V().has('name', 'Jimmy').outE('teach').inV().hasLabel('course')"
height对177取余的值,g.V().hasLabel('a').project('result').by(values('height').math('_ % 177'))
 给出47个与国家有包含关系的城市，以及与这些城市有包含关系的公司。,g.V().hasLabel('country').as('a').out('contain').hasLabel('city').as('b').out('contain').hasLabel('company').as('c').select('c').limit(47)
帮我查询处方的2跳以内的环,g.V().hasLabel('prescription').as('a').bothE().bothV().where(neq('a')).path().by('id').by('id')
帮我查询与电影西虹市首富有关系的person的名字,"g.V().hasLabel('film').has('name', '西虹市首富').bothE().otherV().hasLabel('person').values('name')"
"以'DO'作为输入调用personalRank函数,返回id, value","g.call('PERSONALRANK').with('input', 'DO').project('id', 'value').by(__.select('id')).by(__.select('value'))"
请帮我找出出版社为publisher，且性别小于等于9222或者年龄不为空的book的名称，以及这些book认识的book的名称,"g.V().hasLabel('publisher').or(has('gender', lte(9222)), has('age', neq(null))).outE('publish').inV().hasLabel('book').as('b').outE('knows').inV().hasLabel('book').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
返回90个与周雪和陈建国都存在关系的读者节点,"g.V().has('name', '周雪').as('a').outE().as('e').inV().hasLabel('reader').as('b').inE().as('e2').outV().has('name', '陈建国').as('c').select('b').limit(90)"
"返回所有person以身高,名字,性别分组的id, 根据id从大到小排序","g.V().hasLabel('person').group().by(values('height', 'name', 'gender')).by(values('id').fold()).order(Scope.local).by(keys, Order.desc)"
 返回清华大学拥有的部门与学生之间的关系，并获取这些关系中的所有点，最后返回这些点的年龄。,"g.V().has('name', '清华大学').out('has').hasLabel('department').out('has').hasLabel('student').values('age')"
"返回认识person何轩关联的person,的person","g.V().has('person', 'name', '何轩').as('a').outE('relates').as('e').inV().as('b').inE('knows').as('e2').outV().as('c').select('b', 'c')"
"查询27个名为清华大学的点合作的标签为公司的节点,且节点价值不等于874,id在23到95之间","g.V().has('name', '清华大学').outE('cooperate').inV().hasLabel('company').has('value', neq(874)).has('id', between(23, 95)).limit(27)"
"给出属于国家美国包含的城市,的大学","g.V().hasLabel('country').has('name', '美国').out('contain').hasLabel('city').as('b').in('belong').hasLabel('university').as('c').select('b', 'c')"
"帮我查询与医生赵红存在创造关系,且与药品医疗酒精存在包含关系的处方节点，返回这些处方的创建时间,权重,及医生赵红的身高,及药品医疗酒精的名字","g.V().hasLabel('doctor').has('name', '赵红').as('a').outE('creates').inV().hasLabel('prescription').as('b').inE('contain').outV().hasLabel('medicine').has('name', '医疗酒精').as('c').select('a', 'b', 'c').by('height').by(values('createTime', 'weight')).by('name')"
"找出被person马轩支付的person,和马轩喜欢的person","g.V().hasLabel('person').as('a').in('pay').as('b').has('name', '马轩').out('likes').as('c').select('a', 'b', 'c')"
"帮我查询own account TheShy transfer的account,的person","g.V().hasLabel('account').has('name', 'TheShy').as('a').outE('transfer').as('e').inV().hasLabel('account').as('b').inE('own').as('e2').outV().hasLabel('person').as('c').select('b', 'c')"
id减57的值,g.V().has('id').project('id_minus_57').by(values('id').math('_ - 57'))
"查询被城市伦敦包含的公司,和伦敦包含的公司","g.V().hasLabel('city').has('name', '伦敦').as('b').outE('contain').inV().hasLabel('company').as('c').select('b').inE('contain').outV().hasLabel('company').as('a').select('a', 'b', 'c')"
"查找类型为公司的点,返回92个",g.V().hasLabel('company').limit(92)
查找满足条件lang不等于python的节点,"g.V().has('lang', neq('python'))"
"查找与person孙强有关系的公司, 返回和这些公司有关联的person的,id乘54加身高的数量","g.V().has('person', 'name', '孙强').bothE().otherV().hasLabel('company').bothE().otherV().hasLabel('person').project('calc').by(values('id', 'height').math('_a * 54 + _b')).select('calc').count()"
 找出与大学标签相关的部门，再找出与这些部门相关的教师，最后找出这些教师所授的课程。,g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('teacher').out('teach').hasLabel('course')
"查询apply loan loan_30的person,和这些person invest的company","g.V().hasLabel('loan').has('name', 'loan_30').in('apply').hasLabel('person').as('b').out('invest').hasLabel('company').as('c').select('b', 'c')"
帮我查询全部名为徐思思的节点喜欢的用户或帖子,"g.V().has('name', '徐思思').outE('likes').inV().hasLabel(within('user', 'post')).dedup()"
请帮我找出赵国强创建的订单，以及与赵国强有关联的订单。,"g.V().hasLabel('buyer').has('name', '赵国强').as('a').outE('creates').inV().hasLabel('orders').as('b').select('a').inE('creates').outV().hasLabel('orders').as('c').select('a', 'b', 'c')"
"用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询源点类型为person,目标点类型为person,类型为person_pay_person的边",g.E().hasLabel('person_pay_person')
"给出person的三角的环,边标签等于喜欢, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('likes').as('e').inV().as('b').inE('likes').as('e2').outV().as('c').where(eq('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
"给出被帖子拥有数量大于49的标签,记为relationCount,再查询这些标签拥有的论坛","g.V().hasLabel('tag').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('has').hasLabel('post').id().sum()).where(__.select('relationCount').is(gt(49))).select('a').out('has').hasLabel('forum').dedup()"
"帮我查询名为法国的country,以及与其有关的city,并返回法国的area和这些city的name","g.V().has('country', 'name', '法国').as('a').bothE().as('e').otherV().hasLabel('city').as('b').select('a', 'b').by('area').by('name')"
"请帮我查找名为loan_42的点deposit的所有account,并对这些account的value进行求和","g.V().has('name', 'loan_42').outE('deposit').inV().hasLabel('account').values('value').sum()"
请帮我查询buyer为吴轩创建的订单，返回包含在这些订单中的商品的名称和ID。,"g.V().has('buyer', 'name', '吴轩').out('creates').as('b').out('contain').as('c').select('c').by('name').by('id')"
 找出所有作家的伙伴，或他们伙伴的伙伴。,g.V().hasLabel('author').outE('partner').inV().hasLabel('author').outE('partner').inV().hasLabel('author').dedup()
找出杜轩在其中出演，或者杜轩的朋友在其中出演的电影,"g.V().has('person', 'name', '杜轩').bothE('friend').otherV().bothE('acted_in').otherV().hasLabel('film').dedup()"
查找所有标签等于prescription的点,g.V().hasLabel('prescription')
查找全部与仓库Kafka有关系的事项的创建时间,"g.V().has('repository', 'name', 'Kafka').bothE().otherV().hasLabel('issue').values('createTime')"
 找出所有与《百年孤独》存在引用关系的书籍，并返回这些引用关系的创建时间。,"g.V().has('name', '百年孤独').outE('refers').inV().hasLabel('book').outE('refers').inV().hasLabel('book').values('createTime')"
"使用这个图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));给出student的三角的环,边label为student_selects_course, 并返回这些点的id","g.V().hasLabel('student').as('a').outE('student_selects_course').as('e').inV().as('b').outE('student_selects_course').as('e2').inV().as('c').where('a', eq('c')).select('a', 'b', 'c').by().by('id').by('id').project('a', 'b_id', 'c_id').by().by(select('b')).by(select('c'))"
"查询标签等于拥有,且满足条件目标点id为空或f0大于79的边","g.E().hasLabel('has').or(has('targetId', null), has('f0', gt(79)))"
"查找类型为tag,名为科幻的点,返回这些点的id","g.V().hasLabel('tag').has('name', '科幻').id()"
"帮我查询145个和标签为买家的点有创造关系的订单,并且和这些订单有包含关系的商品",g.V().hasLabel('buyer').out('creates').hasLabel('orders').out('contain').hasLabel('goods').limit(145)
id减id的个数,g.V().project('result').by(constant(0))
 请问Zookeeper使用的软件是什么？返回所用软件的编程语言。,"g.V().hasLabel('software').has('name', 'Zookeeper').outE('uses').inV().hasLabel('software').outE('uses').inV().hasLabel('software').values('lang')"
"返回watch film功夫的person,和这些person watch的film","g.V().hasLabel('film').has('name', '功夫').inE('watch').outV().as('b').outE('watch').inV().as('c').select('b', 'c')"
查找和大学中国科技大学之间有合作关系的公司,"g.V().has('university', 'name', '中国科技大学').outE('cooperate').inV().hasLabel('company')"
"给出forum知乎contain的post,以及likes这些post的user, 令forum的salary等于user的id减93乘id, 返回forum的createTime,post的lang,user的id","g.V().hasLabel('forum').has('name', '知乎').as('a').outE('contain').inV().hasLabel('post').as('b').inE('likes').outV().hasLabel('user').as('c').select('a', 'b', 'c').by(__.project('createTime', 'salary').by('createTime').by(__.select('c').values('id').math('(_ - 93) * _'))).by('lang').by('id')"
获取与处方Prescription_441和处方Prescription_158都有关联的patient节点的age属性。,"g.V().has('prescription', 'name', 'Prescription_441').out().as('b').in().has('prescription', 'name', 'Prescription_158').select('b').values('age')"
"返回与名为Comment_208和Comment_153的点共同属于的,标签为电影的节点","g.V().has('name', 'Comment_208').out('belong').hasLabel('film').as('b').in('belong').has('name', 'Comment_153').select('b')"
请帮我找出与王强和何国强都有关联的人，并返回他们的ID和姓名。,"g.V().has('person', 'name', '王强').outE().inV().hasLabel('person').as('b').inE().outV().has('person', 'name', '何国强').select('b').project('id', 'name').by(values('id')).by(values('name'))"
查找以诊断关系关联了病人黄建聪的医生,"g.V().hasLabel('patient').has('name', '黄建聪').inE('diagnose').outV().hasLabel('doctor')"
"帮我查询id为63的点的身高,年龄","g.V().has('id', 63).project('height', 'age').by('height').by('age')"
"查询course高等数学的标签为relation的边,并根据targetId升序排列,返回139个","g.V().has('course', 'name', '高等数学').outE('relation').order().by('targetId', asc).limit(139).inV()"
请帮我找出与书百年孤独有关系的作家的名字,"g.V().has('book', 'name', '百年孤独').bothE().otherV().hasLabel('author').values('name')"
"查询label为购买,以及权重小于69或目标点id不等于539的边","g.E().hasLabel('buy').or(has('weight', lt(69)), has('targetId', neq(539)))"
帮我找一下郑思琪的朋友的朋友的朋友,"g.V().has('buyer', 'name', '郑思琪').out('friend').out('partner').out('friend')"
"请帮我查找所有名为韩轩的点的,name是Order_285或name不等于Order_222的partner,返回这些partner的price,和边的srcId,weight","g.V().has('name', '韩轩').outE('partner').as('e').inV().has('name', within('Order_285')).or().has('name', neq('Order_222')).project('b_price', 'e_srcId', 'e_weight').by(values('price')).by(select('e').values('srcId')).by(select('e').values('weight'))"
请帮我查找所有名为眼科的点has的doctor,"g.V().has('name', '眼科').out('has').hasLabel('doctor')"
帮我找出由周红、李科共同创建的评论节点,"g.V().has('name', '周红').as('a').outE('creates').inV().hasLabel('comment').as('b').inE('creates').outV().has('name', '李科').as('c').select('b')"
"以(167,'famale',7660),(181,'famale',8695),(173,'male',2870),(163,'famale',5925)作为请求表数据,属性分别为height,gender,salary, 以属性gender作为相等条件,给出名为王科和吴强的,类型为buyer的点公共的friend节点的名单","g.inject([['height':167,'gender':'famale','salary':7660],['height':181,'gender':'famale','salary':8695],['height':173,'gender':'male','salary':2870],['height':163,'gender':'famale','salary':5925]]).unfold().as('p').V().hasLabel('buyer').has('name','王科').as('a').where(__.as('a').values('gender').as('a_gender').select('p').select('gender').where(eq('a_gender'))).outE('friend').inV().as('b').inE('friend').outV().hasLabel('buyer').has('name','吴强').as('c').where(__.as('c').values('gender').as('c_gender').select('p').select('gender').where(eq('c_gender'))).select('b').values('name')"
"给出id为187的公司申请的贷款, 并将贷款有关的贷款的金额的最大值赋值给贷款(b)的金额, 接着查询贷款(b)的金额小于187的贷款存款的账号","g.V().has('company', 'id', 187).outE('apply').inV().hasLabel('loan').as('b').sideEffect(__.select('b').sack(assign).by(__.inE().outV().hasLabel('loan').values('amount').max()).property('amount', __.sack())).select('b').has('amount', lt(187)).outE('deposit').inV().hasLabel('account').as('d').select('b', 'd').by('amount').by()"
"查询前194个类别不等于皮肤药或类别不是感冒药,且价格不为空的药品","g.V().hasLabel('medicine').has('price', neq(null)).or(has('category', neq('皮肤药')), has('category', neq('感冒药'))).limit(194)"
"帮我查询和类型是person的点有parent关系的person,且和这些person有lover关系的person,且和这些person有family关系的person",g.V().hasLabel('person').as('a').out('parent').hasLabel('person').as('b').out('lover').hasLabel('person').as('c').out('family').hasLabel('person').as('d').select('d')
帮我查询与作家赵梅和Amily都存在撰写关系的点,"g.V().has('author', 'name', '赵梅').out('write').as('b').in('write').has('author', 'name', 'Amily').select('b')"
查找电子科技大学所在的中国城市,"g.V().has('university', 'name', '电子科技大学').out('belong').hasLabel('city').out('belong').hasLabel('country')"
"找出company字节creates的software,被其他company creates的数量","g.V().has('company', 'name', '字节').out('creates').as('b').in('creates').hasLabel('company').where(neq('a')).dedup().count()"
找出所有与user黄红有关系的repository的createTime,"g.V().hasLabel('user').has('name', '黄红').bothE().otherV().hasLabel('repository').values('createTime')"
"查询22个和类型为person的点有认识关系的person,以及和这些person有认识关系的person",g.V().hasLabel('person').as('a').out('knows').hasLabel('person').as('b').out('knows').hasLabel('person').as('c').select('c').limit(22)
"帮我查询名为郑月的person,以及与其有关的person,并返回郑月的id和这些person的年龄","g.V().has('person', 'name', '郑月').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('id').by('age')"
"返回和issue ISSUE-264有关系的user,返回这些点的changeFileNumber,createTime,id","g.V().hasLabel('issue').has('name', 'ISSUE-264').bothE().otherV().hasLabel('user').project('changeFileNumber', 'createTime', 'id').by(values('changeFileNumber')).by(values('createTime')).by(values('id'))"
"请帮我查找label为公司的点,返回42个",g.V().hasLabel('company').limit(42)
找出所有被命名为'呐喊'和'罪与罚'，且标签为'书'的点共同引用的节点列表。,"g.V().has('book', 'name', '呐喊').out('refers').as('b').in('refers').has('book', 'name', '罪与罚').select('b').values('name')"
找出id为109的person的朋友，以及这些朋友与该用户的关联伙伴。,"g.V().has('person', 'id', '109').as('a').bothE().otherV().hasLabel('user').as('b').bothE().otherV().hasLabel('user').where(__.as('b').outE('friend').otherV().as('c')).where(__.as('b').outE('partner').otherV().as('d')).select('a', 'b', 'c', 'd')"
"输入表的列为gender,salary,id, 数据为('male',6388,78),('famale',7691,74), 以属性gender作为相等条件,查询person赵强的标签为relation的边,并根据weight从小到大排列,返回75个","g.withSideEffect('p', [['gender':'male','salary':6388,'id':78], ['gender':'famale','salary':7691,'id':74]]).V().hasLabel('person').where(and(__.values('gender').is(within(__.select('p').unfold().values('gender'))), __.has('name', '赵强'))).outE('relation').order().by('weight', asc).limit(75).inV()"
请帮我查找104个与赵建国和李建国都存在关系的person节点,"g.V().has('name', '赵建国').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '李建国').select('b').limit(104)"
"请帮我找出label为病人的点,返回79个",g.V().hasLabel('patient').limit(79)
"输入请求点id的列表150,645,879,403,546, 以属性id作为相等条件,返回account以id,value,lastLoginTime分组的name, 根据name降序排序","g.inject([150, 645, 879, 403, 546]).unfold().as('p').V().hasLabel('account').has('id', __.where(eq('p'))).group().by(union(__.id(), __.values('value'), __.values('lastLoginTime')).fold()).by(__.values('name').fold()).order(local).by(values, desc)"
"请帮我找出合作大学清华大学的公司,和这些公司合作的大学","g.V().has('university', 'name', '清华大学').in('cooperate').as('b').out('cooperate').as('c').select('b', 'c')"
帮我查询与卖家马伟有回答关系的1跳以内的环,"g.V().has('seller', 'name', '马伟').as('a').outE('ask').inV().range(0, 0).as('b').where(__.select('b').out().where(eq('a'))).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').id()).by(select('b').id())"
给出名为Tom的节点watch的tag或cinema,"g.V().has('name', 'Tom').outE('watch').inV().hasLabel(within('tag', 'cinema')).dedup()"
"查找所有源点id不为空或性别为male或性别是male,目标点名字等于星际穿越且价值小于22,且类型是观看的边","g.V().has('id', neq(null)).or().has('gender', 'male').or().has('gender', 'male').outE('watch').as('e').inV().has('name', '星际穿越').has('value', lt(22)).select('e')"
"找出与用户韩宏有关系的标签, 返回和这些标签有关联的标签的,id除id的数量","g.V().has('user', 'name', '韩宏').bothE().otherV().hasLabel('tag').bothE().otherV().hasLabel('tag').dedup().count()"
"帮我查询张轩的点knows的person,然后帮我查询张轩被knows的person,一起返回","g.V().has('name', '张轩').as('a').bothE('knows').otherV().hasLabel('person').as('b').select('a', 'b')"
"找出35个名为吴国强的点knows的类型是person的节点,且其age大于等于89或height大于158","g.V().has('name', '吴国强').outE('knows').inV().hasLabel('person').or(has('age', gte(89)), has('height', gt(158))).limit(35)"
"请帮我查找名字等于PR-148或id不为空的合并请求属于的仓库的名称,以及这些仓库 拥有的事项的名称","g.V().hasLabel('pullRequest').or(has('name', 'PR-148'), has('id', neq(null))).outE('belong').inV().hasLabel('repository').as('b').outE('has').inV().hasLabel('issue').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"给出用户赵轩创造的事项,以及创造这些事项的用户","g.V().has('user', 'name', '赵轩').as('a').outE('creates').as('e').inV().hasLabel('issue').as('b').inE('creates').as('e2').outV().hasLabel('user').as('c').select('b', 'c')"
"请帮我查找与名为张建聪和周科的点共同认识的,标签等于person的节点","g.V().has('name', '张建聪').out('knows').as('b').in('knows').has('name', '周科').select('b').hasLabel('person')"
找出名为杜强的节点发布的编辑或书,"g.V().has('name', '杜强').outE('publish').inV().hasLabel(within('publisher', 'book'))"
"查询源点年龄为空,边标签为购买,且满足条件f1不等于true的边,返回这些边的f0除502的值","g.V().has('age', eq(null)).outE('buy').has('f1', neq(true)).project('result').by(values('f0').math('/ 502'))"
"以(2519,42,195),(1667,0,796),(2609,5,529)作为请求表数据,属性分别为peopleNumber,id,value, 源点的value等于输入表value,帮我查询44个与微软和字节都存在关系的大学节点","g.withSideEffect('p', [[2519,42,195],[1667,0,796],[2609,5,529]]).V().has('value', within(select('p').unfold().tail(2))).has('name', '微软').outE().inV().hasLabel('university').as('b').inE().outV().has('name', '字节').select('b').limit(44)"
请提供与陈建国有观影关系的电影，以及与电影《建国大业》有关联的标签。,"g.V().has('person', 'name', '陈建国').as('a').out('watch').as('b').V().has('film', 'name', '建国大业').as('c').out('has').as('d').select('a', 'b', 'c', 'd')"
"返回id为44的作家有关的作家的朋友, 再返回和作家有关系的朋友","g.V().has('author', 'id', 44).as('a').bothE().otherV().hasLabel('author').as('b').bothE().hasLabel('friend').otherV().as('c').select('b').bothE().hasLabel('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
 找出所有与一个人关联的人，以及这些人与另一个人之间的雇佣关系。,"g.V().has('person', 'id', '36').bothE().otherV().hasLabel('person').as('b').inE('pay').otherV().hasLabel('person').as('c').select('b', 'c')"
"返回名为ISSUE-359的事项,以及与其有关的合并请求,并返回ISSUE-359的名字和这些合并请求的变更文件数","g.V().hasLabel('issue').has('name', 'ISSUE-359').bothE().otherV().hasLabel('pullRequest').project('a_name', 'b_changeFileNumber').by(select('a').values('name')).by(values('changeFileNumber')).select('a').store('a')"
查询被部门体育学院拥有的教师,"g.V().hasLabel('department').has('name', '体育学院').as('b').in('has').hasLabel('teacher').as('a').select('a', 'b')"
"给出和用户王强有创造关系的合并请求,再给出以创造关系关联了王强的合并请求","g.V().hasLabel('user').has('name', '王强').as('a').outE('creates').inV().hasLabel('pullRequest').as('b').select('a').inE('creates').outV().hasLabel('pullRequest').as('c').select('a', 'b', 'c')"
"请帮我找出是否冻结为false或名字为BIN的账号转账的账号的名称,以及这些账号 还款的贷款的名称","g.V().hasLabel('account').or(has('isBlock', false), has('name', 'BIN')).outE('transfer').as('e').inV().as('b').outE('repay').as('e2').inV().as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
请帮我找出与person黄建聪有拥有关系的1度以内的环,"g.V().has('person', 'name', '黄建聪').as('a').bothE('own').bothV().where(neq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"输入请求点id的列表185,580,540,790, 以属性id作为相等条件,查找全部id为92的software关联的software,和以creates关系关联了这些software的其他company","g.withSideEffect('p', [185, 580, 540, 790]).V().hasLabel('software').has('id', within('p')).has('id', '92').bothE().otherV().hasLabel('software').as('b').inE('company_creates_software').otherV().hasLabel('company').as('c').select('b', 'c')"
"请帮我查找源点名字不等于李轩或id在58到59之间,目标点星数小于等于79,名字是Hive,且label为提交的边","g.V().has('name', neq('李轩')).or().has('id', between(58, 59)).outE('commits').as('e').inV().has('stars', lte(79)).has('name', 'Hive').select('e')"
"查找所有源点满足条件薪资大于等于5016,目标点满足条件薪资不为空,且类型为家人的边","g.E().hasLabel('family').where(outV().has('salary', gte(5016))).where(inV().has('salary', neq(null)))"
"使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询与部门法学院有department_has_teacher关系的1度以内的环","g.V().has('department', 'name', '法学院').as('a').outE('department_has_teacher').inV().as('b').where(__.select('a').where(eq('b'))).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').id()).by(select('b').id())"
"使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询和user韩建聪有user_publish_post关系的post,以及和user陈思琪有user_publish_post关系的post,将它们都返回","g.V().has('user', 'name', '韩建聪').as('a').outE('user_publish_post').inV().as('b').select('a').V().has('user', 'name', '陈思琪').as('c').outE('user_publish_post').inV().as('d').select('a', 'b', 'c', 'd')"
"查找从作家黄科出发,经过标签为撰写的边,走2到4度到达的书点","g.V().has('author', 'name', '黄科').repeat(out('write')).times(2).emit().repeat(out('write')).times(2).has('book').dedup()"
"返回名为赵建国的person,以及与其有关的person,并返回赵建国的性别和这些person的身高","g.V().hasLabel('person').has('name', '赵建国').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('gender').by('height')"
"找出id为15的买家取消的订单, 并将订单有关的订单的名字的最小值赋值给订单(b)的价格, 接着查询订单(b)的价格小于15的订单包含的商品","g.V().has('buyer', 'id', 15).outE('cancel').inV().hasLabel('orders').as('b').project('b', 'price').by(identity()).by(__.inE().outV().hasLabel('orders').values('name').min()).as('p').select('b').where(select('p').select('price').is(lt(15))).outE('contain').inV().hasLabel('goods').as('d').select('b', 'p').by().by(select('price')).select(values)"
给出与论坛推特有包含关系的3跳以内的环,"g.V().has('forum', 'name', '推特').as('a').repeat(bothE('contain').otherV().simplePath()).times(2).where(loops().is(gt(0))).where(out('contain').as('a')).select('a').project('a.id', 'b_id').by(id()).by(select('a').id())"
"给出所有和名为赵轩的person有相关者关系,或有相关者的相关者关系的person","g.V().hasLabel('person').has('name', '赵轩').outE('relation').inV().hasLabel('person').as('b').select('b')"
"找出发布作家王科撰写的书,的编辑","g.V().has('author', 'name', '王科').outE('write').inV().hasLabel('book').as('b').inE('publish').outV().hasLabel('publisher').as('c').select('b', 'c')"
"使用列为value,name,lang, 数据为(177,'Calcite','rust'),(333,'Calcite','go')的子查询作为输入表, 以属性value作为相等条件,请帮我找出全部软件以名字,开源,价值分组的价值, 根据价值降序排序","g.inject([['value':177,'name':'Calcite','lang':'rust'],['value':333,'name':'Calcite','lang':'go']]).as('p').V().hasLabel('software').as('a').where(eq('a')).by('value').by(select('p').unfold().select('value')).select('a').group().by(union(values('name'), values('openSource'), values('value')).fold()).by(select('value')).order(local).by(values, desc)"
 请帮我查找与这家公司相关的所有软件，以及这些软件与其他软件之间的uses关系。,"g.V().hasLabel('company').has('id', '198').bothE().otherV().hasLabel('software').as('b').inE('uses').otherV().hasLabel('software').as('c').select('b', 'c')"
返回与用户孙思琪有喜欢关系，并且与标签文艺有关联的帖子。获取这些帖子的值、名称、创建时间以及用户孙思琪和标签文艺的ID。,"g.V().has('user', 'name', '孙思琪').as('a').out('likes').as('b').in('has').has('tag', 'name', '文艺').as('c').select('a', 'b', 'c').by('id').by(values('value', 'name', 'createTime')).by('id')"
找出与孙国强和何红都有联系的buyer节点，共174个。,"g.V().has('name', '孙国强').outE().inV().hasLabel('buyer').as('b').inE().outV().has('name', '何红').select('b').limit(174)"
"帮我查询person的三角的环,边类型是friend, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('friend').inV().as('b').outE('friend').inV().as('c').where(__.inE('friend').outV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
请帮我查找person及其家族成员,"g.V().hasLabel('person').outE('family').inV().range(1, 2).dedup()"
请帮我找出满足以下条件的post：它们属于forum，其中包含的peopleNumber为50，createTime不为2010年06月03日，并且有tag。我需要获取这些post的名称和它们所含有的tag的名称。,"g.V().hasLabel('forum').has('peopleNumber', 50).has('createTime', neq('2010-06-03')).outE('contain').inV().hasLabel('post').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 请帮我查找《白夜行》这本书的推荐者，以及推荐者所推荐的书籍。,"g.V().hasLabel('book').has('name', '白夜行').outE('refers').inV().outE('partner').inV().outE('refers').inV()"
"查找名为李宏的病人或部门,以及与其有关的病人,并返回李宏的性别和这些病人的薪资","g.V().hasLabel(within('patient', 'department')).has('name', '李宏').as('a').bothE().otherV().hasLabel('patient').as('b').select('a', 'b').by('gender').by('salary')"
找出与买家赵宏有取消关系，并且包含商品桌子的订单。返回这些订单的名字、买家赵宏的身高和商品桌子的类别。,"g.V().hasLabel('buyer').has('name', '赵宏').as('a').outE('cancel').inV().hasLabel('orders').as('b').inE('contain').outV().hasLabel('goods').has('name', '桌子').as('c').select('a', 'b', 'c').by('height').by('name').by('category')"
帮我查一下人人影城的合作伙伴关系,"g.V().has('cinema', 'name', '人人影城').outE('partner').inV().outE('relation').inV().outE('relation').inV()"
"输入请求点id的列表661,43,739, 以属性id作为相等条件,找出读者韩国强的相关者,的目标点id加163的数量","g.inject([661, 43, 739]).unfold().as('p').V().hasLabel('reader').has('id', __.select('p')).has('name', '韩国强').outE('relation').as('e').inV().as('b').select('e').values('targetId').math('_ + 163').count()"
"以638作为请求点id, 以属性id作为相等条件,查询和book有关联的book节点,并根据其id,name分组,返回id,name,以及price减86的值","g.withSideEffect('p', [638]).V().hasLabel('book').has('id', __.select('p')).bothE('book_refers_book').otherV().hasLabel('book').group().by(__.project('id', 'name').by('id').by('name')).by(__.project('id', 'name', 'price_minus_86').by('id').by('name').by(__.math('price - 86'))).select(values).unfold().project('id', 'name', 'price_minus_86').by(select('id')).by(select('name')).by(select('price_minus_86'))"
"查询所有陈强的点consult的seller,然后查询陈强被ask的seller,一起返回","g.V().has('name', '陈强').as('a').outE('consult').inV().hasLabel('seller').as('b').select('a').inE('ask').outV().hasLabel('seller').as('c').select('a', 'b', 'c')"
找到与黄若涵有关联的人,"g.V().has('person', 'name', '黄若涵').inE('relates').outV()"
"给出类型为大学的点,返回178个",g.V().hasLabel('university').limit(178)
找出person黄轩和黄思思都存在pay关系的点,"g.V().has('person', 'name', '黄轩').outE('pay').inV().as('b').inE('pay').outV().has('person', 'name', '黄思思').select('b')"
"给出被person马国强invest的company,和马国强apply的loan","g.V().hasLabel('person').has('name', '马国强').as('b').outE('invest').inV().hasLabel('company').as('a').select('b').outE('apply').inV().hasLabel('loan').as('c').select('a', 'b', 'c')"
"查找56个大学重庆大学和武汉大学,共同的伙伴","g.V().has('university', 'name', '重庆大学').outE('partner').inV().as('b').inE('partner').outV().has('university', 'name', '武汉大学').select('b').limit(56)"
"返回全部源点类型为教师,边类型为教,并且满足条件f1是true的边","g.V().hasLabel('teacher').outE('teach').has('f1', true)"
"查询和大学电子科技大学有关的大学,称为X,再查询和这个X有关联的其他大学,以及和X有关联的课程","g.V().has('university', 'name', '电子科技大学').as('a').bothE().otherV().hasLabel('university').as('b').bothE().otherV().hasLabel('university').as('c').select('b').bothE().otherV().hasLabel('course').as('d').select('a', 'b', 'c', 'd')"
 查询与孙国强有knows关系且与郑建国有knows关系的节点，返回这些节点的性别、ID、年龄、孙国强的身高以及郑建国的名字。,"g.V().has('person', 'name', '孙国强').as('a').out('knows').hasLabel('person').as('b').in('knows').has('person', 'name', '郑建国').as('c').select('a', 'b', 'c').by(values('height')).by(values('gender', 'id', 'age')).by(values('name'))"
"请帮我查找名为PR-177的仓库或用户,以及与其有关的事项,并返回PR-177的创建时间和这些事项的状态","g.V().has('name', 'PR-177').hasLabel(within('repository', 'user')).bothE().otherV().hasLabel('issue').as('b').select('b').by(values('status')).as('status').select('b').select(all, 'status').by().path().by(union(values('createTime'), identity()).fold()).unfold()"
请帮我找出与孙思思购买的goods椅子相关的orders节点，并返回它们的价值、价格和名称。,"g.V().hasLabel('goods').has('name', '椅子').outE().inV().hasLabel('orders').as('b').inE().outV().hasLabel('buyer').has('name', '孙思思').select('b').values('value', 'price', 'name')"
"查询全部person以名字分组的年龄, 根据年龄升序排序","g.V().hasLabel('person').group().by('name').by(values('age').fold()).order(local).by(values, asc)"
"帮我查询所有学生的伙伴,或其伙伴的伙伴",g.V().hasLabel('student').as('a').outE('partner').inV().hasLabel('student').as('b').select('b').dedup()
"查找所有源点类型是公司,目标点类型是城市,类型是国家的边",g.E().hasLabel('country').where(outV().hasLabel('company')).where(inV().hasLabel('city'))
"请帮我查找belong country日本的city,和这些city contain的company","g.V().hasLabel('country').has('name', '日本').in('belong').as('b').out('contain').as('c').select('b', 'c')"
"给出所有源点label为user,目标点label为post,label为forum的边",g.E().hasLabel('forum').where(outV().hasLabel('user')).where(inV().hasLabel('post'))
"给出128个名为急诊部的点拥有的类型是医生的节点,且其身高大于192或年龄为空","g.V().has('name', '急诊部').outE('has').inV().hasLabel('doctor').has('height', gt(192)).or(__.not(__.has('age'))).limit(128)"
"返回全部和大学点有拥有关系的部门节点,且边满足条件源点id小于等于72,目标部门节点id对1取余不等于37","g.V().hasLabel('university').as('a').outE('has').has('srcId', lte(72)).as('e').inV().hasLabel('department').has('id', neq(37)).as('b').select('b')"
请帮我找出名为吴梅的点喜欢的书,"g.V().has('name', '吴梅').outE('likes').inV().hasLabel('book')"
"查询全部源点类型为person,目标点类型为person,类型为person的边",g.V().hasLabel('person').outE('person').as('e').inV().hasLabel('person').select('e')
请帮我找出张月的恋人，以及他们之间的恋爱关系，并返回这些人的年龄。,"g.V().has('name', '张月').outE('lover').inV().hasLabel('person').outE('lover').inV().hasLabel('person').values('age')"
"找出价值不为空或名字不等于动作,且名字不是古代的节点","g.V().has('value', neq(null)).or().has('name', neq('动作')).has('name', neq('古代')).dedup()"
查询前131个满足条件id小于等于78或id除id不等于184的用户,"g.V().hasLabel('user').or(has('id', lte(78)), has('id', neq(184))).limit(131)"
 找出认识黄雪的人。,"g.V().hasLabel('person').has('name', '黄雪').as('b').inE('knows').as('e').outV().as('a').select('a', 'b')"
 请问您要查询哪个公司（Company)的字节员工（Employee)购买了哪些软件（Software)?,"g.V().hasLabel('company').has('name', '字节').outE('employee').inV().hasLabel('person').outE('buy').inV().hasLabel('software')"
"用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出和user李红有关的user,称为X,再请帮我找出和这个X有关联的其他forum,以及和X有关联的tag","g.V().has('user', 'name', '李红').as('a').both().hasLabel('user').as('b').both().hasLabel('forum').as('c').select('b').both().hasLabel('tag').as('d').select('a', 'b', 'c', 'd')"
"帮我查询被company cooperate数量大于147的university,记为relationCount,再查询这些university cooperate的country","g.V().hasLabel('university').as('a').project('a', 'relationCount').by(identity()).by(__.in('cooperate').hasLabel('company').id().mean()).select('a', 'relationCount').as('a_with_count').select('a_with_count').where(select('relationCount').is(gt(147))).select('a').out('cooperate').hasLabel('country').dedup()"
"输入请求点id的列表339, 以属性id作为相等条件,查找prescription的1跳以内的环","g.withSideEffect('p', [339]).V().has('prescription', 'id', within('p')).as('a').bothE().otherV().as('b').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"请帮我找出与名为赵轩和孙国强的点共同属于的,类型是部门的节点","g.V().has('name', '赵轩').outE('belong').inV().hasLabel('department').as('b').inE('belong').outV().has('name', '孙国强').select('b')"
"输入请求点id的列表81,337,817,636,639, 以属性id作为相等条件,找出与user马科有user_creates_issue关系的1度的环","g.inject([81, 337, 817, 636, 639]).as('p').V().hasLabel('user').has('id', within('p')).has('name', '马科').as('a').outE('user_creates_issue').inV().as('b').where(outE('user_creates_issue').inV().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
徐红和陈国强是52位医生的共同朋友。,"g.V().has('doctor', 'name', '徐红').outE('friend').inV().as('b').inE('friend').outV().has('doctor', 'name', '陈国强').select('b').limit(52)"
 查询同时与孙若涵和王若涵有关的人。,"g.V().has('person', 'name', '孙若涵').bothE('colleague').otherV().hasLabel('person').bothE('friend').otherV().has('person', 'name', '王若涵').select('b')"
"帮我查询id为188的大学关联的部门,和以拥有关系关联了这些部门的其他大学","g.V().has('university', 'id', 188).bothE().otherV().hasLabel('department').as('b').inE('has').otherV().hasLabel('university').as('c').select('b', 'c')"
"用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找标签等于prescription的点,返回171个",g.V().hasLabel('prescription').limit(171)
请帮我找出与账号类型的点有还款关联的贷款，以及与这些贷款有存款关联的账号，同时还要找到与这些账号有转账关联的账号。,g.V().hasLabel('account').as('a').outE('repay').as('e').inV().hasLabel('loan').as('b').outE('deposit').as('e2').inV().hasLabel('account').as('c').outE('transfer').as('e3').inV().hasLabel('account').as('d').select('d')
"查找源点满足条件salary不为空,height为空,或name不是李思思,目标点满足条件createTime为2033年07月11日且createTime不等于2023年04月29日,或createTime等于2033年04月02日,且标签等于accept的边","g.E().hasLabel('accept').where(and(__.outV().or(and(has('salary', neq(null)), has('height', eq(null))), has('name', neq('李思思'))), __.inV().or(and(has('createTime', '2033-07-11'), has('createTime', neq('2023-04-29'))), has('createTime', '2033-04-02'))))"
"给出所有和person点有认识关系的person节点,且边满足条件权重不为空,目标person节点身高不等于191","g.V().hasLabel('person').as('a').outE('knows').has('weight', neq(null)).as('e').inV().hasLabel('person').has('height', neq(191)).as('b').select('b')"
查找前145个标签为父母的边,g.E().hasLabel('parent').limit(145)
请帮我查找与buyer徐红有creates关系的2度以内的环,"g.V().has('buyer', 'name', '徐红').as('a').bothE('creates').otherV().bothE().otherV().where(eq('a')).path().by('id').by('id').by('id').select('a', 'b_id').by('id').by(tail(local, 1))"
请找出与Order_406有关联，同时与买家郑建聪有关联的seller节点，并返回它们的性别、身高和ID。,"g.V().hasLabel('orders').has('name', 'Order_406').outE().inV().hasLabel('seller').as('b').inE().outV().hasLabel('buyer').has('name', '郑建聪').select('b').project('gender', 'height', 'id').by(values('gender')).by(values('height')).by(values('id'))"
"用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));返回id为69的电影院有关的电影的朋友, 再返回和电影有关系的相关者","g.V().has('cinema', 'id', 69).bothE().otherV().hasLabel('film').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd').by(valueMap(true))"
"请帮我查找50个名为周伟的点喜欢的标签为person的节点,且其身高为空","g.V().has('name', '周伟').outE('likes').inV().hasLabel('person').hasNot('height').limit(50)"
 请帮我查找与作家类型相关的作家，以及这些作家所写的书籍，以及这些书籍中被引用的书籍。,g.V().hasLabel('author').as('a').out('knows').hasLabel('author').as('b').out('write').hasLabel('book').as('c').out('refers').hasLabel('book').as('d').select('d')
"查询源点类型是买家,边类型是创造,且f0不为空或f0为空,且时间戳不等于2000年02月06日的边","g.V().hasLabel('buyer').outE('creates').has('timeStamp', neq('2000-02-06')).where(or(has('f0'), not(has('f0'))))"
提供company的关系，或者关系中的关系。,g.V().hasLabel('company').outE('relation').inV().outE('relation').inV().dedup()
给出全部和university武汉大学之间有has关系的department,"g.V().has('university', 'name', '武汉大学').out('has').hasLabel('department')"
"找出名为黄伟的点creates的issue,并对这些issue的id进行求和","g.V().has('name', '黄伟').outE('creates').inV().hasLabel('issue').values('id').sum()"
 给出赵若涵写的所有书，以及她认识的作家名单。,"g.V().has('name', '赵若涵').as('a').outE('write').inV().hasLabel('book').as('b').select('a').inE('knows').outV().hasLabel('author').as('c').select('a', 'b', 'c')"
"帮我查询person何月观看的电影,以及观看这些电影的person","g.V().has('person', 'name', '何月').outE('watch').inV().hasLabel('film').as('b').inE('watch').outV().hasLabel('person').as('c').select('b', 'c')"
 有109个人和标签为person的点一起观看了电影，并且这些电影与它们有has关系标签的tag。,g.V().hasLabel('person').as('a').outE('watch').as('e').inV().hasLabel('film').as('b').outE('has').as('e2').inV().hasLabel('tag').as('c').select('c').limit(109)
 返回所有拥有耳鼻喉科医生的点，然后筛选出医生创建处方的点，并返回这些点的名称。,"g.V().has('name', '耳鼻喉科').out('has').hasLabel('doctor').out('creates').hasLabel('prescription').values('name')"
返回类型是person或公司或软件的点,"g.V().hasLabel(within('person', 'company', 'software'))"
请帮我找出Light账号相关者的伙伴朋友,"g.V().hasLabel('account').has('name', 'Light').outE('relation').inV().outE('friend').inV().outE('partner').inV()"
"返回132个课程程序设计和线性代数,共同的相关者","g.V().hasLabel('course').has('name', '程序设计').outE('relation').inV().as('b').inE('relation').outV().hasLabel('course').has('name', '线性代数').select('b').limit(132)"
"请帮我找出类型是学生,名为孙雪的点,返回这些点的薪资","g.V().hasLabel('student').has('name', '孙雪').values('salary')"
"请帮我找出53个名为Kafka的点has的标签等于issue的节点,且节点status不等于Closed,createTime不等于2026年02月26日","g.V().has('name', 'Kafka').outE('has').inV().hasLabel('issue').has('status', neq('Closed')).has('createTime', neq('2026-02-26')).limit(53)"
"查找和类型是account的点有repay关系的loan,以及和这些loan有deposit关系的account,以及和这些account有transfer关系的account",g.V().hasLabel('account').as('a').outE('repay').inV().hasLabel('loan').as('b').outE('deposit').inV().hasLabel('account').as('c').outE('transfer').inV().hasLabel('account').as('d').select('d')
"返回所有何梅的点支付的person,然后返回何梅被支付的person,一起返回","g.V().has('name', '何梅').as('a').outE('pay').inV().hasLabel('person').as('b').select('a').inE('pay').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
请帮我找出与论坛相关的标签，以及这些标签与其他帖子之间的'has'关系。,"g.V().has('forum', 'id', '119').bothE().otherV().hasLabel('tag').as('b').inE('has').otherV().hasLabel('post').as('c').select('b', 'c')"
"给出person Jimmy relates的person, 令person的height等于person的id除94对30取余, 返回person(a)的name, person(b)的age","g.V().hasLabel('person').has('name', 'Jimmy').as('a').outE('relates').as('e').inV().hasLabel('person').as('b').select('a', 'b').by(__.project('name', 'height', 'id').by('name').by(__.math('id / 94 % 30').by('id')).by('id')).by(__.project('age').by('age')).select(values).unfold().project('a.name', 'b.age').by(select('a').select('name')).by(select('b').select('age'))"
"帮我查询buyer Jack cancel的orders,被其他buyer creates的数量","g.V().hasLabel('buyer').has('name', 'Jack').outE('cancel').inV().hasLabel('orders').inE('creates').outV().hasLabel('buyer').count()"
请帮我查询与'company'相关的公司信息，以及与'字节apply'相关的贷款信息，并将两者都返回。,"g.V().hasLabel('company').has('name', '字节').as('a').bothE().as('e').otherV().hasLabel('company').as('b').select('a').outE('apply').as('e2').inV().hasLabel('loan').as('c').select('a', 'b', 'c')"
"给出和comment Comment_173有belong关系的film,再给出以belong关系关联了Comment_173的film","g.V().hasLabel('comment').has('name', 'Comment_173').as('a').outE('belong').inV().hasLabel('film').as('b').select('a').inE('belong').outV().hasLabel('film').as('c').select('a', 'b', 'c')"
"请帮我找出被person马强关联的person,和马强关联的person","g.V().hasLabel('person').has('name', '马强').as('b').bothE('relates').otherV().hasLabel('person').as('a', 'c').select('a', 'b', 'c')"
"给出所有doctor的friend,或其friend的friend",g.V().hasLabel('doctor').repeat(out('friend')).times(2).dedup()
查询与韩若涵和吴雪都有关联的66本书。,"g.V().has('name', '韩若涵').outE().inV().hasLabel('book').as('b').inE().outV().has('name', '吴雪').select('b').limit(66)"
"帮我查询名为阿里和腾讯的,label为公司的点公共的伙伴节点的名单","g.V().has('company', 'name', '阿里').outE('partner').inV().as('b').inE('partner').outV().has('company', 'name', '腾讯').select('b').values('name')"
"给出从buyer赵强出发,经过类型是look的边,走3跳到达的goods点","g.V().has('buyer', 'name', '赵强').repeat(outE('look').inV()).times(3).hasLabel('goods')"
"根据id分组,计算课时减47的值",g.V().hasLabel('a').group().by('id').by(values('courseHour').math('_ - 47'))
"请帮我找出所有与浙江大学存在合作关系的公司,公司与大学存在合作关系的点,返回这些点的id","g.V().has('name', '浙江大学').outE('cooperate').inV().hasLabel('company').outE('cooperate').inV().hasLabel('university').id()"
"请帮我查找标签为person的点,返回29个",g.V().hasLabel('person').limit(29)
"请帮我查找名为王强的点relates的所有person,并对这些person的name进行求和","g.V().has('name', '王强').outE('relates').inV().hasLabel('person').values('name').sum()"
查找被loan loan_47 deposit的account,"g.V().hasLabel('loan').has('name', 'loan_47').outE('deposit').inV().hasLabel('account').as('b', 'a').select('a', 'b')"
"查询名为张思琪的person,以及与其有关的person,并返回张思琪的薪资和这些person的年龄","g.V().has('person', 'name', '张思琪').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('salary').by('age')"
"帮我查询全部软件的伙伴,或其伙伴的伙伴",g.V().hasLabel('software').outE('partner').inV().hasLabel('software').path().by('id').by('id').by('id').limit(2).dedup().select('b')
 滴滴和谷歌之间有什么共同点？,"g.V().has('company', 'name', '滴滴').outE('relation').inV().as('b').inE('relation').outV().has('company', 'name', '谷歌').select('b').limit(185)"
"以51作为请求点id, 以属性id作为相等条件,请帮我查找全部person的friend,或其friend的friend","g.withSideEffect('p', [51]).V().hasLabel('person').has('id', __.select('p')).repeat(outE('person_friend_person').inV().simplePath()).times(2).emit().dedup()"
请帮我找出和大学武汉大学之间有合作关系的公司,"g.V().hasLabel('university').has('name', '武汉大学').outE('cooperate').inV().hasLabel('company')"
"请帮我查找课程属于的部门, 令部门的大小的值等于属于部门的课程的名字的最大值, 再查找部门拥有的教师","g.V().hasLabel('course').as('a').outE('belong').as('e').inV().hasLabel('department').as('b').group().by(identity()).by(__.in('belong').hasLabel('course').values('name').max()).as('sizeMap').select('b').sideEffect(__.select('sizeMap').by(__.select('b')).by().store('bSize')).select('b').outE('has').as('e3').inV().hasLabel('teacher').as('d').select('b', 'd').by(__.select('bSize')).by()"
"给出id为145的读者关联的书,和以认识关系关联了这些书的其他书","g.V().has('reader', 'id', 145).bothE().otherV().hasLabel('book').as('b').bothE('knows').otherV().hasLabel('book').as('c').select('b', 'c')"
"请帮我找出所有名为周建聪的点的,id不是524且字数为空的伙伴,返回这些伙伴的字数,和边的f1,时间戳,目标点id","g.V().has('name', '周建聪').outE('partner').as('e').inV().has('id', neq(524)).has('wordCount', eq(null)).project('b_wordCount', 'e_f1', 'e_timeStamp', 'e_targetId').by(values('wordCount')).by(select('e').values('f1')).by(select('e').values('timeStamp')).by(select('e').values('targetId'))"
给出与买家何思琪和杜思琪都存在咨询关系的点,"g.V().hasLabel('buyer').has('name', '何思琪').outE('consult').inV().as('b').inE('consult').outV().hasLabel('buyer').has('name', '杜思琪').select('b')"
"返回论坛天涯论坛 包含的用户,返回用户 发布的帖子的字数减864的值","g.V().hasLabel('forum').has('name', '天涯论坛').out('contain').hasLabel('user').out('publish').hasLabel('post').project('result').by(values('wordCount').math('_ - 864'))"
"请帮我查找课程大学物理属于的部门,被其他大学拥有的数量","g.V().has('course', 'name', '大学物理').out('belong').in('has').hasLabel('university').count()"
 返回publisher或其合作伙伴的合作伙伴。,"g.V().hasLabel('publisher').outE('partner').inV().outE('partner').inV().range(1, 2)"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));给出和country中国有关的company,再给出和中国country_contain_city的其他city,返回它们","g.V().has('country', 'name', '中国').as('a').bothE().otherV().hasLabel('company').as('b').select('a').bothE('country_contain_city').otherV().hasLabel('city').as('c').select('a', 'b', 'c')"
 帮我找找这个贷款，它叫做defaultName。,"g.V().hasLabel('loan').has('name', 'defaultName')"
 找出label为论坛且名称为天涯论坛的点，并返回它们的价值。,"g.V().hasLabel('forum').has('name', '天涯论坛').values('value')"
"请帮我找出和大学电子科技大学有拥有关系的部门,再请帮我找出以拥有关系关联了电子科技大学的部门","g.V().has('university', 'name', '电子科技大学').as('a').outE('has').inV().hasLabel('department').as('b').select('a').inE('has').outV().hasLabel('department').as('c').select('a', 'b', 'c')"
"用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找以支付关系关联了person王雪的person","g.V().has('person', 'name', '王雪').inE('person_pay_person').outV().hasLabel('person')"
 查询名为'美国'的标签为'country'的点，返回这些点的'value'和'peopleNumber'。,"g.V().hasLabel('country').has('name', '美国').project('a.value', 'a.peopleNumber').by('value').by('peopleNumber')"
"查询全部与王梅存在likes关系的repository,repository与issue存在has关系的点,返回这些点的name","g.V().has('name', '王梅').out('likes').hasLabel('repository').out('has').hasLabel('issue').values('name')"
"查询全部源点label为person,边label为likes的边,返回这些边的srcId的和减195对960取余的最大值,和weight除142.64的数量","g.V().hasLabel('person').outE('likes').project('sum_srcId', 'weight_div').by(values('srcId').sum()).by(values('weight').math('_ / 142.64')).select('sum_srcId', 'weight_div').by(math('_ - 195 % 960')).by(count()).select(values).math('max(_[0])').project('max_result', 'count_result').by().by(select(values).tail(local, 1))"
获取prescription的所有关系，或者这些关系的关系。,g.V().hasLabel('prescription').outE('relation').inV().outE('relation').inV().dedup()
返回id为82的cinema相关的person的朋友，再返回与该person相关的关系。,"g.V().has('cinema', 'id', '82').as('a').bothE().otherV().hasLabel('person').as('b').both().hasLabel('person').where(__.outE('friend')).as('c').select('b').outE('relation').inV().as('d').select('a', 'b', 'c', 'd')"
"输入请求点id的列表824,647,867,585,815, 以属性id作为相等条件,帮我查询与buyer黄思思有buyer_creates_orders关系的1跳以内的环","g.withSideEffect('p', [824, 647, 867, 585, 815]).V().hasLabel('buyer').has('id', within('p')).has('name', '黄思思').as('a').bothE('buyer_creates_orders').otherV().where(within('a')).select('a').by('id').by(__.id().as('b_id'))"
 给出性别不等于female的买家咨询的卖家名称和商品名称。,"g.V().hasLabel('buyer').has('gender', neq('famale')).outE('consult').inV().hasLabel('seller').as('b').outE('has').inV().hasLabel('goods').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 找出person节点与person点有关联的节点，按salary、name、id分组返回。,"g.V().hasLabel('person').as('a').bothE('knows').otherV().hasLabel('person').as('b').select('b').values('salary', 'name', 'id').group().by().by(count())"
 查找陈梅买家在卖家节点has的物品。,"g.V().hasLabel('buyer').has('name', '陈梅').out('consult').hasLabel('seller').out('has').hasLabel('goods')"
找出与176个用户发布的帖子有关的标签，这些帖子具有'publish'关系，并且这些帖子还具有'has'关系。,g.V().hasLabel('user').as('a').outE('publish').as('e').inV().hasLabel('post').as('b').outE('has').as('e2').inV().hasLabel('tag').as('c').select('c').limit(176)
 请问有哪些韩国城市被包含在国家范围内？,"g.V().hasLabel('country').has('name', '韩国').outE('contain').inV().hasLabel('city').as('b', 'a').select('a', 'b')"
找出用户何伟和吴红之间的关系,"g.V().has('user', 'name', '何伟').as('a').outE('relation').as('e').inV().as('b').inE('relation').as('e2').outV().has('user', 'name', '吴红').as('c').select('b').limit(94)"
"根据年龄,薪资分组,计算薪资乘6733的值","g.V().hasLabel('a').group().by(values('age', 'salary')).by(values('salary').math('_ * 6733'))"
"给出和teacher张月有关的course,再给出和张月teach的其他course,返回它们","g.V().has('teacher', 'name', '张月').as('a').bothE().otherV().hasLabel('course').as('b').select('a').bothE('teach').otherV().hasLabel('course').as('c').select('a', 'b', 'c')"
"查询与名为杜建国和张若涵的点共同关联的,标签等于person的节点","g.V().has('name', '杜建国').outE('relates').inV().hasLabel('person').as('b').inE('relates').outV().has('name', '张若涵').select('b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询id为192的person有关的person的friend, 再查询和person有关系的friend","g.V().has('person', 'id', '192').as('a').bothE().otherV().hasLabel('person').as('b').bothE('friend').otherV().hasLabel('person').as('c').select('b').bothE('friend').otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"返回名为Amily的点发布的帖子,并对这些帖子的字数进行求和","g.V().has('name', 'Amily').outE('publish').inV().hasLabel('post').values('wordCount').sum()"
"返回software Zookeeper uses的software,以及creates这些software的company, 令software的openSource等于software的lang,令company的openSource等于software的value减418, 返回software(a)的stars,software(b)的value,company(c)的name","g.V().hasLabel('software').has('name', 'Zookeeper').as('a').outE('uses').inV().hasLabel('software').as('b').inE('creates').outV().hasLabel('company').as('c').select('a', 'b', 'c').by(__.project('stars', 'openSource').by('stars').by('lang')).by(__.project('value', 'openSource').by('value').by(__.constant('software'))).by(__.project('name', 'openSource').by('name').by(__.math('value - 418').by('value'))).select('a', 'b', 'c').by('stars').by('value').by('name')"
"找出belong city纽约的company,和这些company cooperate的university","g.V().hasLabel('city').has('name', '纽约').inE('belong').outV().hasLabel('company').as('b').outE('cooperate').inV().hasLabel('university').as('c').select('b', 'c')"
"请帮我找出前173个满足条件字数大于等于369且名字不等于Post_413,或名字等于Post_355的帖子","g.V().hasLabel('post').or(and(has('wordCount', gte(369)), has('name', neq('Post_413'))), has('name', eq('Post_355'))).limit(173)"
 找出所有起点和终点都是人，且标签为'喜欢'的边。,g.V().hasLabel('person').outE('likes').where(inV().hasLabel('person'))
"以215,826作为请求点id, 源点的id等于输入表id,查找137个和label为person的点有person_own_account关系的账号,且和这些账号有account_transfer_account关系的账号","g.withSideEffect('p', [215, 826]).V().hasLabel('person').where(values('id').is(within(select('p')))).out('person_own_account').out('account_transfer_account').limit(137)"
找出与标签相关的非空评论节点，然后返回这些节点的字数加上880的数量和字数除以529的结果。,"g.V().hasLabel('tag').as('a').outE().as('e').inV().hasLabel('comment').has('wordCount', neq(null)).as('b').project('count_plus', 'count_div').by(__.select('b').values('wordCount').math('_ + 880').count()).by(__.select('b').values('wordCount').math('_ / 529').count())"
"请帮我找出id为60的买家取消的订单, 并将订单有关的商品的销量的和赋值给订单的名字, 接着查询订单的名字小于60的订单包含的商品","g.V().hasLabel('buyer').has('id', 60).outE('cancel').inV().hasLabel('orders').as('b').sideEffect(__.project('name').by(__.outE().inV().hasLabel('goods').values('sellerNumber').sum()).select('name').property(single, 'name')).select('b').has('name', lt(60)).outE('contain').inV().hasLabel('goods').as('d').select('b', 'd').by('name').by()"
查询以属于关系关联了公司腾讯的person,"g.V().hasLabel('company').has('name', '腾讯').inE('belong').outV().hasLabel('person')"
查询名字为吴若涵的用户,"g.V().hasLabel('user').has('name', '吴若涵')"
"返回国家法国包含的城市,被其他国家包含的数量","g.V().has('country', 'name', '法国').out('contain').as('b').in('contain').hasLabel('country').as('c').select('c').count()"
"给出购买软件Mysql使用的软件,的person","g.V().has('software', 'name', 'Mysql').outE('uses').inV().hasLabel('software').as('b').inE('buy').outV().hasLabel('person').as('c').select('b', 'c')"
id除1的值,g.V().hasLabel('a').project('result').by(values('id').math('/ 1'))
"请帮我找出knows person何强的person,和这些person knows的person","g.V().hasLabel('person').has('name', '何强').as('a').in('knows').as('b').out('knows').as('c').select('b', 'c')"
"帮我查询全部马雪的点回答的买家,然后帮我查询马雪被咨询的买家,一起返回","g.V().has('name', '马雪').as('a').outE('ask').inV().hasLabel('buyer').as('b').select('a').inE('consult').outV().hasLabel('buyer').as('c').select('a', 'b', 'c')"
"查询全部id为45的person关联的person,和以关联关系关联了这些person的其他person","g.V().has('person', 'id', 45).bothE().otherV().hasLabel('person').as('b').inE('relates').otherV().hasLabel('person').as('c').select('b', 'c')"
"以289,170,93作为请求点id, 以属性id作为相等条件,请帮我查找id为140的部门有关的医生的相关者, 再请帮我查找和医生有关系的相关者","g.withSideEffect('p', [289, 170, 93]).V().hasLabel('department').where(and(__.values('id').is(within('p')), __.values('id').is(eq('140')))).as('a').bothE().otherV().hasLabel('doctor').as('b').bothE('relation').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"请帮我查找contain user周国强publish的post,的forum","g.V().hasLabel('user').has('name', '周国强').outE('publish').inV().hasLabel('post').as('b').inE('contain').outV().hasLabel('forum').as('c').select('b', 'c')"
帮我查询所有与大学复旦大学有关系的课程的课时,"g.V().has('university', 'name', '复旦大学').bothE().otherV().hasLabel('course').values('courseHour')"
"帮我查询城市重庆包含的公司,以及合作这些公司的大学, 令城市的id等于大学的等级,令大学的id等于大学的等级, 返回城市的人数,公司的id,大学的名字","g.V().has('city', 'name', '重庆').as('a').outE('contain').inV().hasLabel('company').as('b').inE('cooperate').outV().hasLabel('university').as('c').project('a_peopleNumber', 'b_id', 'c_name').by(select('a').values('peopleNumber')).by(select('b').values('id')).by(select('c').values('name'))"
"帮我查询92个和类型是author的点有knows关系的author,且和这些author有write关系的book",g.V().hasLabel('author').as('a').out('knows').hasLabel('author').as('b').out('write').hasLabel('book').as('c').select('c').limit(92)
"查找标签为person,名为王轩的点,返回这些点的id,年龄,性别","g.V().hasLabel('person').has('name', '王轩').project('id', 'age', 'gender').by('id').by('age').by('gender')"
height除178减9809的值,g.V().hasLabel('a').project('result').by(values('height').math('_ / 178 - 9809'))
查询与医生郑雪和何月都存在创造关系的点,"g.V().has('doctor', 'name', '郑雪').outE('creates').inV().as('b').inE('creates').outV().has('doctor', 'name', '何月').select('b').dedup()"
"输入请求点id的列表236, 以属性id作为相等条件,找出182个和label为person的点有person_friend_person关系的person,并且和这些person有person_parent_person关系的person","g.withSideEffect('p', [236]).V().hasLabel('person').has('id', within('p')).out('person_friend_person').hasLabel('person').out('person_parent_person').hasLabel('person').limit(182)"
"以820,87作为请求点id, 源点的id等于输入表id,返回类型为company的点,返回14个","g.inject([820, 87]).unfold().as('p').V().hasLabel('company').has('id', __.select('p')).limit(14)"
"查找类型为person的点,返回187个",g.V().hasLabel('person').limit(187)
"请帮我找出名为皮肤科的部门或病人,以及与其有关的病人,并返回皮肤科的名字和这些病人的名字","g.V().hasLabel('department', 'patient').has('name', '皮肤科').bothE().otherV().hasLabel('patient').project('a_name', 'b_name').by(select('a').values('name')).by(values('name')).as('a')"
"根据name分组,计算id除86的值",g.V().hasLabel('a').group().by('name').by(values('id').math('/ 86').fold())
"请帮我查找28个名字等于赵月或年龄在54到80之间的person,根据薪资从小到大排列","g.V().hasLabel('person').has('name', '赵月').or(has('age', between(54, 80))).order().by('salary', asc).limit(28)"
"请帮我查找和account有关联的account节点,并根据其createTime分组,返回createTime,以及value除700的最大值","g.V().hasLabel('account').as('a').bothE('transfer').otherV().hasLabel('account').as('b').select('b').values('createTime', 'value').group().by(select('createTime')).by(select('value').math('/ 700').max())"
"找出所有和名为杭州的城市有相关者关系,或有相关者的相关者关系的公司","g.V().has('city', 'name', '杭州').out('relation').hasLabel('company').union(identity(), out('relation').hasLabel('company')).dedup()"
"找出被city武汉contain的company,和武汉contain的company","g.V().has('city', 'name', '武汉').as('b').outE('contain').inV().hasLabel('company').as('c').select('b').inE('contain').outV().hasLabel('company').as('a').select('a', 'b', 'c')"
"请帮我查找全部id为52的repository关联的repository,和以likes关系关联了这些repository的其他user","g.V().has('repository', 'id', 52).bothE().otherV().hasLabel('repository').as('b').inE('likes').otherV().hasLabel('user').as('c').select('b', 'c')"
"帮我查询和买家马国强有咨询关系的卖家,再帮我查询以取消关系关联了马国强的订单","g.V().hasLabel('buyer').has('name', '马国强').as('a').outE('consult').inV().hasLabel('seller').as('b').select('a').inE('cancel').outV().hasLabel('orders').as('c').select('a', 'b', 'c')"
"找出从城市纽约出发,经过类型为包含的边,走3度到达的公司点","g.V().has('city', 'name', '纽约').repeat(outE('contain').inV()).times(3).hasLabel('company')"
请帮我找出与author Alan和王轩都存在knows关系的点,"g.V().has('author', 'name', 'Alan').out('knows').as('b').in('knows').has('author', 'name', '王轩').select('b')"
返回类型为用户或论坛或标签的点,"g.V().hasLabel(within('user', 'forum', 'tag'))"
"查询标签以id,名字,价值分组的名字, 根据名字降序排序","g.V().hasLabel('tag').group().by(project('id', 'name', 'value').by('id').by('name').by('value')).by(values('name').fold()).order(local).by(keys, desc).select(values).unfold()"
"请帮我查找全部id为30的贷款关联的账号,和以转账关系关联了这些账号的其他账号","g.V().has('loan', 'id', 30).as('a').bothE().as('e').otherV().hasLabel('account').as('b').inE('transfer').as('e2').outV().hasLabel('account').as('c').select('b', 'c')"
查询101个既在皮肤科又在耳鼻喉科的朋友,"g.V().has('department', 'name', '皮肤科').out('friend').as('b').in('friend').has('department', 'name', '耳鼻喉科').select('b').limit(101)"
请帮我找出所有与名为郑思琪的学生有朋友关系，或者有朋友的朋友关系的课程。,"g.V().has('student', 'name', '郑思琪').repeat(out('friend')).times(2).hasLabel('course').dedup()"
帮我查询192个与loan_24和loan_55都存在关系的贷款节点,"g.V().has('name', 'loan_24').outE().inV().hasLabel('loan').as('b').inE().outV().has('name', 'loan_55').select('b').limit(192)"
"给出creates user孙国强creates的issue,的user","g.V().hasLabel('user').has('name', '孙国强').outE('creates').inV().hasLabel('issue').as('b').inE('creates').outV().hasLabel('user').as('c').select('b', 'c')"
"帮我查询读者郑雪的label为伙伴的边,并根据f1从小到大排列,返回112个","g.V().hasLabel('reader').has('name', '郑雪').outE('partner').as('e').inV().as('b').select('e', 'b').order().by(select('e').values('f1'), asc).limit(112).select('b')"
"以987,786,225,129,560作为请求点id, 以属性id作为相等条件,请帮我查找161个名为徐宏的点咨询的类型是卖家的节点,且节点名字不是周轩","g.withSideEffect('p', [987, 786, 225, 129, 560]).V().where(values('id').is(within('p'))).has('name', '徐宏').outE('buyer_consult_seller').inV().hasLabel('seller').has('name', neq('周轩')).limit(161)"
请帮我查找以创造关系关联了事项ISSUE-241的用户,"g.V().hasLabel('issue').has('name', 'ISSUE-241').inE('creates').outV().hasLabel('user')"
"给出源点类型是公司,目标点类型是贷款,类型是贷款的边",g.V().hasLabel('company').outE('loan').where(inV().hasLabel('loan'))
 请问天涯论坛的帖子节点有哪些标签？,"g.V().hasLabel('forum').has('name', '天涯论坛').out('contain').hasLabel('post').out('has').hasLabel('tag')"
找出在南京大学有关系的城市，以及这些城市中包含公司的点，并返回这些点的人数。,"g.V().has('name', '南京大学').outE('belong').inV().hasLabel('city').outE('contain').inV().hasLabel('company').values('peopleNumber')"
 中国科技大学与哪个公司合作，哪个城市属于该公司的节点？,"g.V().has('university', 'name', '中国科技大学').out('cooperate').hasLabel('company').out('belong').hasLabel('city')"
"找出标签等于买家,名为黄梅的点,返回这些点的年龄","g.V().hasLabel('buyer').has('name', '黄梅').values('age')"
"请帮我找出部门拥有的学生,返回其源点的大小除56的数量,以及目标点的id加60加身高的值","g.V().hasLabel('department').as('a').outE('has').as('e').inV().hasLabel('student').as('b').project('count_a_size_div_56', 'b_id_plus_60_plus_height').by(__.select('a').values('size').math('_ / 56').count()).by(__.select('b').values('id').math('_ + 60').math('_ + ').by(__.select('b').values('height')))"
"给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));查询和film变形金刚有关的comment,称为X,再查询和这个X有关联的其他tag,以及和X有关联的cinema","g.V().hasLabel('film').has('name', '变形金刚').as('a').bothE().otherV().hasLabel('comment').as('b').bothE().otherV().hasLabel('tag').as('c').select('b').bothE().otherV().hasLabel('cinema').as('d').select('a', 'b', 'c', 'd')"
"查找seller ask的buyer,返回其源点的height乘height的值,以及目标点的age的平均值除66的数量","g.V().hasLabel('seller').as('a').outE('ask').inV().hasLabel('buyer').as('b').select('a', 'b').by('height').by('age').project('height_squared', 'count_avg_age_div_66').by(select('a').math('_ * _')).by(select('b').mean().math('_ / 66').count())"
"找出全部源点标签为合并请求,目标点标签为仓库,标签为合并请求的边",g.V().hasLabel('pullRequest').outE('pullRequest').as('e').inV().hasLabel('repository').select('e')
 返回Amily的partner的friend的朋友,"g.V().hasLabel('user').has('name', 'Amily').outE('partner').inV().outE('relation').inV().outE('friend').inV()"
"找出id为24的课程属于的部门, 并将部门有关的教师的id的最小值赋值给部门的大小, 接着查询部门的大小小于24的部门拥有的教师","g.V().has('course', 'id', 24).as('a').outE('belong').inV().hasLabel('department').as('b').sideEffect(__.project('size').by(__.inE().outV().hasLabel('teacher').values('id').min()).select('b').property('size', __.select('size'))).select('b').has('size', lt(24)).outE('has').inV().hasLabel('teacher').as('d').select('b').values('size').as('size').select('d').select('size', 'd')"
"查找id为99的book knows的book, 并将book有关的publisher的gender的最大值赋值给book的name, 接着查询book的name小于99的book relates的book","g.V().hasLabel('book').has('id', 99).outE('knows').inV().hasLabel('book').as('b').project('name', 'd').by(__.select('b').coalesce(__.bothE().otherV().hasLabel('publisher').values('gender').max(), __.constant(null))).by(__.select('b').has('name', lt(99)).outE('relates').inV().hasLabel('book')).select('name', 'd')"
"请帮我找出郑若涵的点认识的person,然后请帮我找出郑若涵被雇佣的公司,一起返回","g.V().has('name', '郑若涵').as('a').out('knows').as('b').select('a').in('employee').as('c').select('a', 'b', 'c')"
 找出身高为192的人的认识的人和这些人有关联的人。,"g.V().hasLabel('person').has('height', 192).as('a').out('knows').hasLabel('person').as('b').out('relates').hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我找出person关联的person, 令person(b)的id的值等于关联person的person的薪资的最大值, 再查找person关联的person","g.V().hasLabel('person').as('a').outE('relates').as('e').inV().hasLabel('person').as('b').select('b').map(union(__.inE('relates').as('e2').outV().hasLabel('person').as('c').values('salary').max(), __.identity()).fold()).as('b_with_id').select('b_with_id').unfold().as('b_id_pair').select('b_id_pair').by(limit(local, 1)).as('b_id').select('b_id_pair').by(tail(local, 1)).as('b').select('b').outE('relates').as('e3').inV().hasLabel('person').as('d').select('b_id', 'd')"
"输入表的列为address,name,id, 数据为('C栋','耳鼻喉科',47),('C栋','传染部',63),('东区','急诊部',48),('西区','急诊部',24), 以属性id作为相等条件,请帮我找出2个id小于等于50或age的最大值减56减id除3943加20对71取余的最大值小于55,且身高大于189的医生,根据身高降序排列","g.inject(['C栋','耳鼻喉科',47],['C栋','传染部',63],['东区','急诊部',48],['西区','急诊部',24]).as('p').V().hasLabel('doctor').where(__.as('a').and(__.has('id',within(47,63,48,24)),__.or(__.has('id',lte(50)),__.project('maxExpr').by(__.values('age').max()).math('(maxExpr - 56 - a_id) / 3943 + 20 % 71').math('_ < 55')),__.has('height',gt(189)))).select('a').order().by('height',desc).limit(2)"
"输入请求点id的列表990, 以属性id作为相等条件,请帮我查找名为马红和Jack的,label为person的点公共的partner节点的名单","g.withSideEffect('p', [990]).V().hasLabel('person').has('id', within('p')).has('name', '马红').outE('partner').inV().as('b').inE('partner').outV().hasLabel('person').has('name', 'Jack').select('b').values('name')"
请帮我找出所有与person有关联的人，以及这些人之间的关联关系。,"g.V().has('person', 'id', '99').bothE().otherV().hasLabel('person').as('b').inE('relates').otherV().hasLabel('person').as('c').select('b', 'c')"
返回与用户吴伟和赵科都存在喜欢关系的点,"g.V().has('user', 'name', '吴伟').out('likes').as('b').in('likes').has('user', 'name', '赵科').select('b')"
 给出与defaultName和defaultName1有关的所有公司节点，共有113个。,"g.V().has('name', 'defaultName').outE().as('e').inV().hasLabel('company').as('b').inE().as('e2').outV().has('name', 'defaultName1').select('b').limit(113)"
"以(5495,'黄红',161)作为请求表数据,属性分别为salary,name,height, 以属性name作为相等条件,请帮我找出类型是帖子的点,返回107个","g.withSideEffect('p', [['salary': 5495, 'name': '黄红', 'height': 161]]).V().hasLabel('post').has('name', __.select('p').unfold().select('name')).limit(107)"
"查找被person buy数量大于55的software,记为relationCount,再查询这些software buy的company","g.V().hasLabel('software').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('buy').hasLabel('person').count()).unfold().as('a_with_count').select('relationCount').where(__.is(gt(55))).select('a_with_count').select('a').out('buy').hasLabel('company')"
"请帮我查找创造病人马宏接受的处方,的医生","g.V().hasLabel('patient').has('name', '马宏').outE('accept').inV().hasLabel('prescription').as('b').inE('creates').outV().hasLabel('doctor').as('c').select('b', 'c')"
帮我查询id为空或薪资大于等于3302的节点,"g.V().or(hasNot('id'), has('salary', gte(3302)))"
"以(true,87,'Geaflow')作为请求表数据,属性分别为openSource,value,name, 源点的value等于输入表value,请帮我查找前49个满足条件规格不等于medium的公司","g.withSideEffect('p', [['openSource': true, 'value': 87, 'name': 'Geaflow']]).V().hasLabel('company').as('a').where(__.select('a').values('value').is(__.select('p').unfold().select('value'))).where(__.select('a').values('scale').is(neq('medium'))).select('a').limit(49)"
"以586,526,55,673,647作为请求点id, 以属性id作为相等条件,找出部门皮肤科的所有label为伙伴的边,并根据源点id升序排列,返回129个","g.withSideEffect('p', [586, 526, 55, 673, 647]).V().hasLabel('department').has('id', within('p')).has('name', '皮肤科').outE('partner').order().by('srcId', asc).limit(129).inV()"
给出与person杜建聪有colleague关系的1跳以内的环,"g.V().has('person', 'name', '杜建聪').as('a').bothE('colleague').otherV().as('b').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
 查询40个买家，其中有没有马思琪和周建聪共同合作的伙伴。,"g.V().hasLabel('buyer').has('name', '马思琪').outE('partner').inV().where(__.inE('partner').outV().hasLabel('buyer').has('name', '周建聪')).limit(40)"
"查找全部孙建聪的点选择的课程,然后查找孙建聪被拥有的部门,一起返回","g.V().has('name', '孙建聪').as('a').outE('selects').inV().hasLabel('course').as('b').select('a').inE('has').outV().hasLabel('department').as('c').select('a', 'b', 'c')"
"以909,718,877,753,633作为请求点id, 以属性id作为相等条件,请帮我找出所有源点age为70,目标点id不为空且id的平均值不等于550,且标签等于person_invest_company的边","g.inject([909, 718, 877, 753, 633]).unfold().as('p').V().has('id', __.as('p')).has('age', 70).as('a').outE('person_invest_company').as('e').inV().as('b').where(__.as('b').has('id', neq(null))).group().by(__.constant('all')).by(__.as('b').values('id').mean()).unfold().select(values).where(neq(550)).select('e')"
" 查找包含CSDN的post,然后找到post中具有与tag相关的has关系的点，并返回这些点的名称。","g.V().has('name', 'CSDN').out('contain').hasLabel('post').out('has').hasLabel('tag').values('name')"
"帮我查询类型为订单的点,返回81个",g.V().hasLabel('orders').limit(81)
 查找与ID为183的某人有关的人及其相关伙伴。,"g.V().has('person', 'id', '183').as('a').bothE().otherV().hasLabel('person').as('b').bothE('partner').otherV().hasLabel('person').as('c').select('b').bothE('relation').otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
 请帮我查询陈月医生创建的处方，有多少个被其他患者接受了。,"g.V().hasLabel('doctor').has('name', '陈月').outE('creates').inV().hasLabel('prescription').inE('accept').outV().hasLabel('patient').count()"
"调用triangleCount函数,以'uL'作为输入,返回运算结果","g.call('triangleCount').with('input', 'uL').select('number')"
找出与publisher陈建国有publish关系的1跳的环,"g.V().has('publisher', 'name', '陈建国').as('a').outE('publish').inV().as('b').where(eq('a')).select('a', 'b').by('id').by('id').as('b_id')"
"以0作为请求点id, 源点的id等于输入表id,给出名为郑思琪的person","g.withSideEffect('p', [['id': 0]]).V().hasLabel('person').as('a').where(__.select('a').and(__.has('id', __.select('p').unfold().select('id')), __.has('name', '郑思琪'))).select('a')"
查询与person韩梅有关系的person的id,"g.V().has('person', 'name', '韩梅').bothE().otherV().hasLabel('person').id()"
返回与病人张宏有关系的药品的价格,"g.V().has('patient', 'name', '张宏').bothE().otherV().hasLabel('medicine').values('price')"
请帮我查找前6个薪资不等于2843且性别不等于male且薪资在6552到8594之间的读者,"g.V().hasLabel('reader').has('salary', neq(2843)).has('gender', neq('male')).has('salary', between(6552, 8594)).limit(6)"
"查询论坛包含的用户,返回其源点的id除73的值,以及目标点的身高对179取余的最小值","g.V().hasLabel('forum').as('a').outE('contain').inV().hasLabel('user').as('b').select('a', 'b').by(values('id')).by(values('height')).project('a_id_div_73', 'min_b_height_mod_179').by(select('a').math('_ / 73')).by(select('b').math('_ % 179').min())"
"给出源点label为读者,边label为喜欢,并且满足条件f1不等于true的边","g.V().hasLabel('reader').outE('likes').has('f1', neq(true)).elementMap()"
帮我查询被公司滴滴雇佣的person,"g.V().hasLabel('company').has('name', '滴滴').inE('employee').outV().hasLabel('person').as('b').select('b').by().project('a', 'b').by(outE('employee').inV().hasLabel('person')).by()"
"以607作为请求点id, 源点的id等于输入表id,查询188个名为TheShy的点还款的标签为贷款的节点,且其权重的个数小于等于859","g.withSideEffect('p', [607]).V().has('id', within('p')).has('name', 'TheShy').outE('account_repay_loan').inV().hasLabel('loan').where(__.values('weight').count().is(lte(859))).limit(188)"
"请帮我查找170个person吴红和吴建国,共同的伙伴","g.V().hasLabel('person').has('name', '吴红').outE('partner').inV().as('b').inE('partner').outV().hasLabel('person').has('name', '吴建国').select('b').limit(170)"
"请帮我查找名为韩思思和张伟的,标签为person的点公共的家人节点的名单","g.V().has('person', 'name', '韩思思').as('a').outE('family').inV().as('b').inE('family').outV().has('person', 'name', '张伟').as('c').select('b').values('name')"
 查询何若涵和郑思琪之间共同存在的创建关系。,"g.V().has('person', 'name', '何若涵').outE('creates').inV().as('b').inE('creates').outV().has('person', 'name', '郑思琪').select('b')"
" 查询卖家源点类型为seller,边类型为has的边，返回这些边的目标ID对9取余的值和weight的个数乘以138.74除以803的值。","g.V().hasLabel('seller').outE('has').project('modResult', 'calcResult').by(values('targetId').math('_ % 9')).by(count().math('_ * 138.74 / 803'))"
查找person的2度以内的环,"g.V().hasLabel('person').as('a').both().both().where(eq('a')).dedup().project('a.id', 'b_id').by(select('a').id()).by(id())"
"返回全部id为98的person关联的person,和以认识关系关联了这些person的其他person","g.V().has('person', 'id', 98).bothE().otherV().hasLabel('person').as('b').inE('knows').otherV().hasLabel('person').as('c').select('b', 'c')"
"以514,670,185,780作为请求点id, 源点的id等于输入表id,请帮我找出类型是person_pay_person,且满足条件f0小于等于867的边","g.inject([514, 670, 185, 780]).unfold().as('p').V().has('id', __.where(eq('p'))).outE('person_pay_person').has('f0', lte(867)).as('e').select('e')"
"输入请求点id的列表219,182, 源点的id等于输入表id,查询标签为company,名为字节的点,返回这些点的id,name,scale","g.withSideEffect('ids', [219, 182]).V().hasLabel('company').has('id', within('ids')).has('name', '字节').project('id', 'name', 'scale').by('id').by('name').by('scale')"
"请帮我找出类型为person,名为陈建国的点,返回这些点的年龄,性别","g.V().hasLabel('person').has('name', '陈建国').project('a.age', 'a.gender').by('age').by('gender')"
"帮我查询与作家马强有关,且与作家徐建国有关系的作家节点","g.V().has('author', 'name', '马强').bothE('knows').otherV().hasLabel('author').bothE('knows').otherV().has('author', 'name', '徐建国').path().unfold().hasLabel('author').dedup()"
"帮我查询合并请求PR-190属于的仓库,以及喜欢这些仓库的用户, 令仓库的星数等于仓库的名字,令用户的id等于用户的id除75, 返回合并请求的名字,仓库的创建时间,用户的性别","g.V().hasLabel('pullRequest').has('name', 'PR-190').as('a').outE('belong').inV().hasLabel('repository').as('b').inE('likes').outV().hasLabel('user').as('c').select('a', 'b', 'c').by('name').by(union(identity(), values('createTime')).fold()).by(union(identity(), values('gender')).fold()).project('a_name', 'b_createTime', 'c_gender').by(select('a')).by(select('b').unfold().tail(1)).by(select('c').unfold().tail(1))"
"查询名为杜国强的person,以及与其有关的person,并返回杜国强的height和这些person的name","g.V().has('person', 'name', '杜国强').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('height').by('name')"
查找前132个名字不是历史或id小于28的标签,"g.V().hasLabel('tag').or(has('name', neq('历史')), has('id', lt(28))).limit(132)"
"帮我查询所有名为华为的,area为空的relation,返回这些relation的id,和边的targetId,srcId","g.V().has('name', '华为').outE('relation').as('e').inV().has('area', eq(null)).select('e').project('b.id', 'e.targetId', 'e.srcId').by(select('e').inV().id()).by(select('e').values('targetId')).by(select('e').values('srcId'))"
"查找46个和标签为仓库的点有拥有关系的用户,且和这些用户有创造关系的合并请求",g.V().hasLabel('repository').as('a').out('has').hasLabel('user').as('b').out('creates').hasLabel('pullRequest').as('c').select('c').limit(46)
请帮我找出与英国有关联的城市,"g.V().hasLabel('country').has('name', '英国').inE('belong').outV().hasLabel('city')"
返回合并请求的1跳的环,"g.V().hasLabel('pullRequest').as('a').bothE().otherV().as('b').where(__.select('a').outE().where(__.otherV().as('b')).count().is(gt(0))).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
 列出所有与某个部门相关的课程，以及选择这些课程的其他学生。,"g.V().has('department', 'id', '136').bothE().otherV().hasLabel('course').as('b').inE('selects').otherV().hasLabel('student').as('c').select('b', 'c')"
 给出南区电影院发行且ID不是692的电影名称以及它们具有的标签。,"g.V().hasLabel('cinema').has('address', '南区').has('id', neq(692)).outE('releases').inV().hasLabel('film').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
帮我查询全部与订单Order_126有关系的买家的性别,"g.V().hasLabel('orders').has('name', 'Order_126').bothE().otherV().hasLabel('buyer').values('gender')"
"请帮我找出15个部门土木学院和经管学院,共同的相关者","g.V().has('department', 'name', '土木学院').outE('relation').inV().as('b').inE('relation').outV().has('department', 'name', '经管学院').select('b').limit(15)"
请帮我查找86个与华中科技大学和清华大学都存在关系的city或country或university节点,"g.V().has('name', '华中科技大学').outE().inV().hasLabel(within('city', 'country', 'university')).as('b').inE().outV().has('name', '清华大学').select('b').limit(86)"
找出名为comment的点，并按名称升序排序。,"g.V().hasLabel('comment').order().by('name', asc)"
"以117作为请求点id, 源点的id等于输入表id,返回user的2度的环","g.withSideEffect('p', [117]).V().has('user', 'id', __.select('p')).as('a').out().as('b').where(__.select('b').out().where(eq('a'))).select('a', 'b').by('id').by('id')"
查询与一个人有喜欢关系的人，以及这些人认识的人，以及这些人认识的人。,g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('person').as('b').outE('knows').as('e2').inV().hasLabel('person').as('c').outE('knows').as('e3').inV().hasLabel('person').as('d').select('d')
"输入请求点id的列表635,218,868,905,660, 以属性id作为相等条件,帮我查询和person有关联的person节点,并根据其height分组,返回height,以及id对84取余的求和值","g.inject([635, 218, 868, 905, 660]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).as('a').bothE('person_knows_person').otherV().hasLabel('person').as('b').select('b').values('height', 'id').group().by(select(values).limit(local, 1)).by(select(values).tail(local, 1).fold().math('_ % 84').sum())"
 查找所有与名为'吴月'的用户有'关系'或'有关系'的post。,"g.V().hasLabel('user').has('name', '吴月').outE('relation').inV().hasLabel('post').range(1, 2).values('name')"
请帮我查找所有和doctor郑思思之间有diagnose关系的patient,"g.V().hasLabel('doctor').has('name', '郑思思').outE('diagnose').inV().hasLabel('patient')"
"找出与卖家赵思琪有关系的买家, 返回和这些买家有关联的订单的,value的最大值减160的平均值","g.V().has('seller', 'name', '赵思琪').as('a').bothE().otherV().hasLabel('buyer').as('b').bothE().otherV().hasLabel('orders').as('c').select('c').values('value').max().math('_ - 160').mean()"
"给出名为王思思的点的,创建时间不等于2013年01月28日的朋友,返回这些朋友的名字,和边的源点id","g.V().has('name', '王思思').outE('friend').as('e').inV().has('createTime', neq('2013-01-28')).as('b').select('b', 'e').by('name').by('srcId')"
查找以contain关系关联了post Post_494的forum,"g.V().hasLabel('post').has('name', 'Post_494').inE('contain').outV().hasLabel('forum')"
"请帮我找出全部源点权重为空且id大于93且权重小于等于633,目标点id等于32或名字不等于郑思思,且名字等于王国强,且标签等于拥有的边","g.V().has('weight', null).has('id', gt(93)).has('weight', lte(633)).outE('has').as('e').inV().has('id', within(32)).has('name', neq('郑思思')).has('name', '王国强').select('e')"
"查找医生杜若涵创造的处方,以及接受这些处方的病人","g.V().hasLabel('doctor').has('name', '杜若涵').outE('creates').inV().hasLabel('prescription').as('b').inE('accept').outV().hasLabel('patient').as('c').select('b', 'c')"
"返回薪资小于等于2110,id大于等于54的用户喜欢的帖子的名称,以及这些帖子 拥有的标签的名称","g.V().hasLabel('user').has('salary', lte(2110)).has('id', gte(54)).outE('likes').inV().hasLabel('post').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
请帮我查找被person徐建国支付的person,"g.V().hasLabel('person').has('name', '徐建国').as('b').outE('pay').as('e').inV().as('a').select('a', 'b')"
"请帮我查找person郑国强拥有的账号,以及存款这些账号的贷款","g.V().hasLabel('person').has('name', '郑国强').outE('own').inV().hasLabel('account').as('b').inE('deposit').outV().hasLabel('loan').as('c').select('b', 'c')"
"请帮我找出源点label为医生,边label为属于的边,返回这些边的目标点id减目标点id的值,和源点id减190的平均值","g.V().hasLabel('doctor').outE('belong').project('expr1', 'expr2').by(__.values('targetId').math('_ - _')).by(__.values('srcId').math('_ - 190')).select(values).unfold().group().by(keys).by(select(values).unfold().mean())"
"帮我查询与名为Order_417和Order_483的点共同包含的,标签为商品的节点","g.V().has('name', 'Order_417').out('contain').hasLabel('goods').as('b').in('contain').has('name', 'Order_483').select('b')"
 返回174个人，其中吴若涵和马月是共同的同事。,"g.V().has('person', 'name', '吴若涵').as('a').outE('colleague').as('e').inV().as('b').inE('colleague').as('e2').outV().has('person', 'name', '马月').as('c').select('b').limit(174)"
"找出全部与徐月存在ask关系的buyer,buyer与orders存在creates关系的点,返回这些点的value","g.V().has('name', '徐月').outE('ask').inV().hasLabel('buyer').outE('creates').inV().hasLabel('orders').values('value')"
 找出与医生点相关的处方节点，并按创建时间和ID分组，返回每个节点的创建时间和ID。,"g.V().hasLabel('doctor').bothE('creates').otherV().hasLabel('prescription').group().by(union(values('createTime'), values('id')).fold()).by(project('createTime', 'id').by(values('createTime')).by(values('id')))"
请帮我查找和repository Flink之间有has关系的user,"g.V().hasLabel('repository').has('name', 'Flink').out('has').hasLabel('user')"
返回陈科创建的所有订单，以及这些订单中包含的商品销售量。,"g.V().has('name', '陈科').outE('creates').inV().hasLabel('orders').outE('contain').inV().hasLabel('goods').values('sellerNumber')"
 找出peopleNumber为空或小于958的公司的城市名称，以及这些城市所属的国家名称。,"g.V().hasLabel('company').has('peopleNumber', null).has('peopleNumber', lt(958)).out('belong').hasLabel('city').as('b').out('belong').hasLabel('country').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我找出名为数据结构的点belong的全部department,并对这些department的name进行求和","g.V().has('name', '数据结构').outE('belong').inV().hasLabel('department').values('name').sum()"
"以23, 25作为输入调用KHOP函数,返回id, kValue","g.call('KHOP').with('input', [23, 25]).select('id', 'kValue')"
请帮我找出性别不是famale或身高为空的节点,"g.V().or(has('gender', neq('famale')), hasNot('height')).elementMap()"
"请帮我查找全部源点类型为仓库,边类型为拥有,且满足条件权重大于198.42或目标点id大于13,且权重不为空的边","g.V().hasLabel('repository').outE('has').has('weight', gt(198.42)).or(__.has('targetId', gt(13))).has('weight', neq(null)).dedup()"
找出属于放射科并且在放射科工作的医生。,"g.V().has('name', '放射科').as('a').out('has').hasLabel('doctor').as('b').select('a').in('belong').hasLabel('doctor').as('c').select('a', 'b', 'c')"
返回用户陈梅喜欢的仓库节点拥有的用户,"g.V().has('user', 'name', '陈梅').out('likes').hasLabel('repository').out('has').hasLabel('user')"
"请帮我查找59个名为张科的点watch的类型是film的节点,且节点id是298或id为空","g.V().has('name', '张科').outE('watch').inV().hasLabel('film').or(has('id', 298), hasNot('id')).limit(59)"
"请帮我找出id为148的订单有关的卖家的相关者, 再请帮我找出和卖家有关系的相关者","g.V().hasLabel('orders').has('id', 148).as('a').bothE().bothV().hasLabel('seller').as('b').bothE('relation').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
查找和person马建聪之间有属于关系的公司,"g.V().has('person', 'name', '马建聪').outE('belong').inV().hasLabel('company')"
"使用列为gender,id,age, 数据为('famale',9,49),('famale',20,25)的子查询作为输入表, 源点的age等于输入表age,查找类型为doctor_creates_prescription,且权重为空或f1小于563或目标点id小于等于104的边","g.withSideEffect('p', [['gender': 'famale', 'id': 9, 'age': 49], ['gender': 'famale', 'id': 20, 'age': 25]]).V().as('a').where(__.select('a').values('age').as('age').select('p').unfold().where(__.select('age').is(eq('age'))).count().is(gt(0))).outE('doctor_creates_prescription').as('e').where(or(__.select('e').values('weight').is(eq(null)), __.select('e').values('f1').is(lt(563)), __.select('e').values('targetId').is(lte(104)))).select('e')"
"查询person属于的公司,返回其源点的身高减197的值,以及目标点的价值减704的个数","g.V().hasLabel('person').as('a').outE('belong').as('e').inV().hasLabel('company').as('b').project('height_diff', 'count_val').by(select('a').values('height').math('_ - 197')).by(select('b').values('value').math('_ - 704').count())"
"查找pay person杜建聪pay的person,的person","g.V().has('person', 'name', '杜建聪').outE('pay').inV().as('b').inE('pay').outV().as('c').select('b', 'c')"
"给出撰写读者李科喜欢的书,的作家","g.V().hasLabel('reader').has('name', '李科').outE('likes').inV().hasLabel('book').as('b').inE('write').outV().hasLabel('author').as('c').select('b', 'c')"
"查找全部名为杜国强的,身高大于等于172或名字等于黄红的朋友,返回这些朋友的名字,和边的源点id,目标点id,f1","g.V().has('name', '杜国强').outE('friend').as('e').inV().has('height', gte(172)).or().has('name', '黄红').select('e').by(valueMap('srcId', 'targetId', 'f1')).project('b.name', 'e.srcId', 'e.targetId', 'e.f1').by(__.select('e').inV().values('name')).by(__.select('e').values('srcId')).by(__.select('e').values('targetId')).by(__.select('e').values('f1'))"
获取id小于等于40且名字为赵雪的用户发布的帖子的标题和这些帖子所拥有的标签的名称,"g.V().hasLabel('user').has('id', lte(40)).has('name', '赵雪').outE('publish').inV().hasLabel('post').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 返回张宏拥有且与贷款默认名称存在偿还关系的账户节点，包括账户ID、余额、上次登录时间和张宏的名称以及贷款默认名称的ID。,"g.V().has('person', 'name', '张宏').as('a').outE('own').as('e').inV().hasLabel('account').as('b').inE('repay').as('e2').outV().has('loan', 'name', 'defaultName').as('c').select('a', 'b', 'c').by('name').by(values('id', 'value', 'lastLoginTime').fold()).by('id').project('a_name', 'b_id', 'b_value', 'b_lastLoginTime', 'c_id').by(select('a')).by(select('b').unfold().limit(1)).by(select('b').unfold().skip(1).limit(1)).by(select('b').unfold().skip(2).limit(1)).by(select('c'))"
查询全部和软件SprintBoot之间有使用关系的软件,"g.V().has('software', 'name', 'SprintBoot').out('uses').hasLabel('software')"
返回张建聪和徐建聪之间的196条关系记录,"g.V().has('person', 'name', '张建聪').outE('relation').as('e').inV().as('b').inE('relation').as('e2').outV().has('person', 'name', '徐建聪').select('b').limit(196)"
 请帮我找出与电影《复仇者联盟》相关的人，并找出与该电影相关的其他标签。,"g.V().hasLabel('film').has('name', '复仇者联盟').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('has').inV().hasLabel('tag').as('c').select('a', 'b', 'c')"
查询何建聪观看的电影，返回这些电影拥有的标签的ID和价值。,"g.V().has('person', 'name', '何建聪').outE('watch').inV().hasLabel('film').outE('has').inV().hasLabel('tag').project('id', 'value').by('id').by('value')"
"以(336,19,'CSDN'),(542,55,'推特'),(246,1,'百度贴吧'),(364,7,'推特')作为请求表数据,属性分别为value,id,name, 源点的id等于输入表id,查找194个id为空或创建时间等于2009年01月18日,且人数不为空的论坛,根据人数从小到大排列","g.withSideEffect('p', [[336, 19, 'CSDN'], [542, 55, '推特'], [246, 1, '百度贴吧'], [364, 7, '推特']]).V().hasLabel('forum').where(and(__.inject('p').unfold().select('id').as('pid'), or(has('id', null), has('createTime', '2009-01-18')))).has('peopleNumber', neq(null)).order().by('peopleNumber', asc).limit(194)"
计算所有person的年龄减年龄减1179加id的最小值,g.V().hasLabel('person').project('result').by(values('age').as('a').select('a').math('a - a - 1179 + id').fold().min()).select('result')
"给出被person关联数量大于54的person,记为relationCount,再查询这些person关联的person","g.V().hasLabel('person').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('relates').hasLabel('person').values('id').mean()).select('a', 'relationCount').where(__.select('relationCount').is(gt(54))).select('a').out('relates').hasLabel('person').as('c').select('c')"
"请帮我找出40个software SprintBoot和Hadoop,共同的partner","g.V().has('software', 'name', 'SprintBoot').outE('partner').inV().as('b').inE('partner').outV().has('software', 'name', 'Hadoop').select('b').limit(40)"
请帮我查找id为43的teacher及其伙伴，再查找与teacher相关的relation。,"g.V().has('teacher', 'id', '43').as('a').bothE().otherV().hasLabel('teacher').as('b').bothE().hasLabel('partner').otherV().as('c').select('b').bothE().hasLabel('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"返回和person吴思思有关系的person,返回这些点的id","g.V().hasLabel('person').has('name', '吴思思').bothE().otherV().hasLabel('person').id()"
"请帮我找出用户发布的帖子,返回其源点的salary的平均值加5812对年龄取余的值,以及目标点的价值加245加6的个数","g.V().hasLabel('user').as('a').outE('publish').hasLabel('publish').inV().hasLabel('post').as('b').select('a', 'b').by(__.values('salary').mean()).by(__.values('value').fold().count(local)).project('expr1', 'expr2').by(__.select('a').math('_ + 5812 % _').by(constant(5812)).by(__.select('a').values('age'))).by(__.select('b').math('_ + 245 + 6').by(constant(245)).by(constant(6)))"
"以241,19,233,902,390作为请求点id, 源点的id等于输入表id,查找与名为中国科技大学和清华大学的点共同cooperate的,标签等于company的节点","g.inject([241, 19, 233, 902, 390]).as('p').unfold().as('id').V().has('id', __.as('id')).has('name', '中国科技大学').as('a').outE('university_cooperate_company').as('e').inV().hasLabel('company').as('b').inE('university_cooperate_company').as('e2').outV().has('name', '清华大学').as('c').select('b').dedup()"
"给出类型是apply,且weight在175.69到175.29之间且targetId不是42,f0小于等于868的边","g.E().hasLabel('apply').has('weight', between(175.29, 175.69)).has('targetId', neq(42)).has('f0', lte(868))"
 找出与大学标签相关的177个部门，以及与这些部门有联系的员工和学生。,g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('student').limit(177)
"帮我查询源点满足条件创建时间不等于2013年08月26日或名字不是Prescription_254,目标点满足条件权重不是378,id在73到81之间,或id在54到98之间,且label为包含的边","g.E().hasLabel('contain').where(__.or(__.and(__.outV().has('createTime', neq('2013-08-26')), __.outV().has('name', neq('Prescription_254'))), __.and(__.inV().has('weight', neq(378)), __.inV().has('id', between(73, 81))), __.inV().has('id', between(54, 98))))"
找出所有和person李伟之间有恋人关系的person,"g.V().has('person', 'name', '李伟').out('lover').hasLabel('person')"
"返回与读者Tom存在喜欢关系,且与书少年闰土存在引用关系的书节点，返回这些书的id,价格,创建时间,及读者Tom的名字,及书少年闰土的创建时间","g.V().hasLabel('reader').has('name', 'Tom').as('a').outE('likes').inV().hasLabel('book').as('b').inE('refers').outV().hasLabel('book').has('name', '少年闰土').as('c').select('a', 'b', 'c').by('name').by(values('id', 'price', 'createTime')).by('createTime').project('a_name', 'b_id', 'b_price', 'b_createTime', 'c_createTime').by(select('a')).by(select('b').select('id')).by(select('b').select('price')).by(select('b').select('createTime')).by(select('c'))"
"查找全部和名为张建聪的person有parent关系,或有parent的parent关系的person","g.V().has('person', 'name', '张建聪').repeat(out('parent')).times(2).emit().dedup()"
请帮我查找所有名为王红的节点认识的person,"g.V().has('name', '王红').outE('knows').inV().hasLabel('person')"
请帮我找出由名为李建聪和王月的人共同出版的书籍类节点,"g.V().has('name', '李建聪').outE('publish').inV().hasLabel('book').as('b').inE('publish').outV().has('name', '王月').select('b')"
 返回与tag动作存在关系且与comment Comment_448存在关系的cinema节点，并返回它们的名称。,"g.V().hasLabel('tag').has('name', '动作').outE().inV().hasLabel('cinema').as('b').inE().outV().hasLabel('comment').has('name', 'Comment_448').select('b').values('name')"
给出所有标签为buyer的点,g.V().hasLabel('buyer')
"帮我查询取消订单Order_332的买家,和这些买家取消的订单","g.V().hasLabel('orders').has('name', 'Order_332').as('a').inE('cancel').outV().as('b').outE('cancel').inV().as('c').select('b', 'c')"
"请帮我找出所有和person点有申请关系的贷款节点,且边满足条件源点id不等于157,目标贷款节点权重在210到640之间","g.V().hasLabel('person').as('a').outE('apply').as('e').where(values('srcId').is(neq(157))).inV().hasLabel('loan').has('weight', between(210, 640)).as('b').select('b')"
"找出和user Alice有关系的forum,返回这些点的name","g.V().hasLabel('user').has('name', 'Alice').bothE().otherV().hasLabel('forum').values('name')"
请帮我找出与事项ISSUE-495有关系的用户的年龄,"g.V().has('issue', 'name', 'ISSUE-495').bothE().otherV().hasLabel('user').values('age')"
帮我查询以创造关系关联了事项ISSUE-462的用户,"g.V().hasLabel('issue').has('name', 'ISSUE-462').in('creates').hasLabel('user')"
 查询与买家黄轩有取消关系的订单，以及取消关系与黄轩相关的订单。,"g.V().hasLabel('buyer').has('name', '黄轩').as('a').bothE('cancel').as('e').otherV().hasLabel('orders').as('b').select('a').bothE('cancel').as('e2').otherV().hasLabel('orders').as('c').select('a', 'b', 'c')"
请帮我找出与buyer郑若涵有consult关系，并且与goods杯子有has关系的seller节点。并返回这些seller的height、id、age以及buyer郑若涵和goods杯子的id,"g.V().has('buyer', 'name', '郑若涵').as('a').out('consult').hasLabel('seller').as('b').in('has').has('goods', 'name', '杯子').as('c').select('a', 'b', 'c').by('id').by(values('height', 'id', 'age')).by('id')"
"请帮我查找13个和label为编辑的点有发布关系的书,以及和这些书有引用关系的书",g.V().hasLabel('publisher').as('a').outE('publish').as('e').inV().hasLabel('book').as('b').outE('refers').as('e2').inV().hasLabel('book').as('c').select('c').limit(13)
"以233作为请求点id, 以属性id作为相等条件,查询172个名为张建国的点likes的label为book的节点,且节点name等于计算机网络且name等于百年孤独","g.withSideEffect('p', [233]).V().has('id', __.select('p')).has('name', '张建国').outE('reader_likes_book').inV().hasLabel('book').has('name', '计算机网络').has('name', '百年孤独').limit(172)"
请帮我查找前55个满足条件price小于1390.93且value在594到940之间的orders,"g.V().hasLabel('orders').has('price', lt(1390.93)).has('value', between(594, 940)).limit(55)"
"输入表的列为id,amount,weight, 数据为(55,6705.33,151), 以属性weight作为相等条件,查询全部和名为马雪的person有friend关系,或有friend的friend关系的loan","g.withSideEffect('p', [['id':55, 'amount':6705.33, 'weight':151]]).V().hasLabel('person').has('weight', select('p').unfold().values('weight')).has('name', '马雪').bothE('friend').otherV().repeat(bothE('friend').otherV().simplePath()).times(1).emit().hasLabel('loan').dedup()"
查找所有名为何国强的节点创造的标签或person或电影,"g.V().has('name', '何国强').outE('creates').inV().hasLabel(within('tag', 'person', 'film')).dedup()"
"使用列为id,scale,peopleNumber, 数据为(1,'large',610),(14,'small',864)的子查询作为输入表, 以属性scale作为相等条件,找出全部源点类型为university,边类型为university_cooperate_company的边,返回这些边的targetId加85的值,和f0减f0加103的值","g.inject([['id':1,'scale':'large','peopleNumber':610],['id':14,'scale':'small','peopleNumber':864]]).as('p').unfold().as('p_row').V().hasLabel('university').as('a').where(eq('p_row')).by('scale').by('scale').outE('university_cooperate_company').as('e').inV().as('b').select('e').project('col1','col2').by(select(values).select('targetId').math('_ + 85')).by(constant(103))"
"用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询全部源点标签等于读者,边标签等于reader_likes_book,以及满足条件源点id是32的边","g.E().hasLabel('reader_likes_book').where(outV().hasLabel('reader').has('id', 32))"
查找与论坛CSDN有包含关系的3度以内的环,"g.V().has('forum', 'name', 'CSDN').as('a').repeat(bothE().otherV().simplePath()).times(3).where(cyclicPath()).path().by('id').by('id')"
 找到百度贴吧和推特上共同的朋友，共有111个论坛。,"g.V().hasLabel('forum').has('name', '百度贴吧').outE('friend').inV().as('b').inE('friend').outV().hasLabel('forum').has('name', '推特').select('b').limit(111)"
找出所有和买家郑宏之间有创造关系的订单,"g.V().hasLabel('buyer').has('name', '郑宏').outE('creates').inV().hasLabel('orders')"
"给出和buyer马国强有关的orders,再给出和马国强cancel的其他orders,返回它们","g.V().hasLabel('buyer').has('name', '马国强').as('a').bothE().otherV().hasLabel('orders').as('b').select('a').bothE('cancel').otherV().hasLabel('orders').as('c').select('a', 'b', 'c')"
给出与person徐雪有likes关系的3度以内的环,"g.V().has('person', 'name', '徐雪').as('a').repeat(bothE('likes').otherV().simplePath()).times(2).where(cyclicPath()).path().by('id').by('id')"
请帮我查找与教师Sam有教关系的3跳以内的环,"g.V().has('teacher', 'name', 'Sam').as('a').repeat(bothE('teach').otherV().simplePath()).times(2).emit().as('b').where(__.as('b').out().as('a')).select('a', 'b').by('id').by('id')"
找出所有与阿里有合作关系的大学，并返回这些大学与阿里合作的点名。,"g.V().has('name', '阿里').outE('cooperate').inV().hasLabel('university').outE('cooperate').inV().hasLabel('company').values('name')"
请帮我找出所有类型为person，名字叫王建聪的点，并返回他们的薪资和id,"g.V().hasLabel('person').has('name', '王建聪').project('salary', 'id').by('salary').by('id')"
"给出id为129的点的id,名字","g.V().has('id', 129).project('a.id', 'a.name').by('id').by('name')"
"查询course数据结构 belong的department,返回department has的student的salary除salary的值","g.V().hasLabel('course').has('name', '数据结构').outE('belong').inV().hasLabel('department').outE('has').inV().hasLabel('student').project('result').by(values('salary').math('_ / _'))"
"请帮我找出名为武汉大学的点属于的城市,并对这些城市的名字进行求和","g.V().has('name', '武汉大学').outE('belong').inV().hasLabel('city').values('name').sum()"
返回与医生李科和处方Prescription_491相关的患者节点。,"g.V().hasLabel('doctor').has('name', '李科').bothE('diagnose').otherV().hasLabel('patient').as('b').bothE('accept').otherV().hasLabel('prescription').has('name', 'Prescription_491').select('b')"
"找出28个名为ISSUE-276的点属于的标签为仓库的节点,且节点创建时间为2033年06月26日或语言等于go","g.V().has('name', 'ISSUE-276').outE('belong').inV().hasLabel('repository').or(has('createTime', '2033-06-26'), has('lang', 'go')).limit(28)"
"请帮我找出源点标签为person,边标签为喜欢,并且满足条件源点id不为空,f1不等于false的边","g.V().hasLabel('person').outE('likes').where(and(has('srcId', neq(null)), has('f1', neq(false))))"
请提供与Bilibili公司有关的城市信息，以及与四川大学合作的公司信息。,"g.V().hasLabel('company').has('name', 'Bilibili').as('a').outE('belong').inV().hasLabel('city').as('b').select('a').V().hasLabel('university').has('name', '四川大学').as('c').outE('cooperate').inV().hasLabel('company').as('d').select('a', 'b', 'c', 'd')"
找出孙强和李月的共同朋友，共有148人。,"g.V().hasLabel('person').has('name', '孙强').outE('friend').inV().as('b').inE('friend').outV().hasLabel('person').has('name', '李月').select('b').dedup().limit(148)"
帮我查询与论坛知乎和百度贴吧都存在包含关系的点,"g.V().hasLabel('forum').has('name', '知乎').outE('contain').inV().where(__.inE('contain').outV().hasLabel('forum').has('name', '百度贴吧')).dedup()"
找出与张若涵合作创作，并且属于电影《神探狄仁杰》的评论。返回这些评论的ID、字数以及张若涵和《神探狄仁杰》的相关信息。,"g.V().has('person', 'name', '张若涵').as('a').outE('creates').as('e').inV().hasLabel('comment').as('b').inE('belong').as('e2').outV().has('film', 'name', '神探狄仁杰').as('c').select('a', 'b', 'c').by('name').by(values('id', 'wordCount')).by('category')"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));返回与person孙建国有关,且与loan defaultName有关系的company节点","g.V().has('person', 'name', '孙建国').outE('person_invest_company').inV().hasLabel('company').as('b').outE('company_apply_loan').inV().has('loan', 'name', 'defaultName').select('b')"
 找出与韩月和何国强有关的所有publisher节点。,"g.V().has('name', '韩月').outE().inV().hasLabel('publisher').as('b').inE().outV().has('name', '何国强').select('b').limit(107)"
请帮我找出前140个年龄为空的person,g.V().hasLabel('person').hasNot('age').limit(140)
"返回被person支付数量大于199的person,记为relationCount,再查询这些person支付的person","g.V().hasLabel('person').as('a').project('a', 'relationCount').by(__.identity()).by(__.inE('pay').where(__.outV().hasLabel('person')).outV().values('id').mean()).select('a', 'relationCount').where(__.select('relationCount').is(gt(199))).select('a').outE('pay').inV().hasLabel('person').dedup()"
"根据name分组,计算id的最小值对73取余的值","g.V().hasLabel('a').group().by('name').by(values('id').min()).unfold().project('name', 'result').by(select(keys)).by(select(values).math('_ % 73'))"
"帮我查询所有person以身高,薪资分组的性别, 根据性别降序排序","g.V().hasLabel('person').group().by(values('height', 'salary').fold()).by(values('gender').fold()).order(local).by(select(values).unfold().order().by(desc).fold(), desc)"
 列出所有相关方，或相关方的相关方。,"g.V().hasLabel('company').as('a').outE('relation').inV().range(1,2).as('b').select('b')"
 请帮我查询与中国相关的大学，并返回它们。另外，请帮我查询包含中国的其他城市，也返回它们。,"g.V().has('country', 'name', '中国').as('a').bothE().otherV().hasLabel('university').as('b').select('a').bothE('contain').otherV().hasLabel('city').as('c').select('a', 'b', 'c')"
"以237,545,330,225作为请求点id, 源点的id等于输入表id,帮我查询所有源点标签为卖家,目标点标签为商品,标签为seller_has_goods的边","g.inject([237, 545, 330, 225]).as('p').unfold().as('id').V().hasLabel('seller').has('id', __.select('id')).outE('seller_has_goods').as('e').inV().hasLabel('goods').select('e')"
"找出与评论Comment_335存在属于关系,且与标签喜剧存在拥有关系的电影节点，返回这些电影的id,及评论Comment_335的名字,及标签喜剧的价值","g.V().hasLabel('comment').has('name', 'Comment_335').as('a').outE('belong').inV().hasLabel('film').as('b').inE('has').outV().hasLabel('tag').has('name', '喜剧').as('c').select('a', 'b', 'c').by('name').by('id').by('value')"
"找出person孙宏认识的person, 令person(b)的薪资等于person(a)的salary的求和值减薪资的数量,令person(b)的年龄等于person(a)的名字的最大值, 返回person(a)的年龄, person(b)的id","g.V().has('person', 'name', '孙宏').as('a').outE('knows').inV().hasLabel('person').as('b').project('a_age', 'b_id').by(select('a').values('age')).by(select('b').values('id'))"
"查找has department经管学院has的student,的department","g.V().has('department', 'name', '经管学院').out('has').as('b').in('has').hasLabel('department').as('c').select('b', 'c')"
"找出名字不是PR-434的合并请求属于的仓库的名称,以及这些仓库 拥有的用户的名称","g.V().hasLabel('pullRequest').has('name', neq('PR-434')).out('belong').hasLabel('repository').as('b').out('has').hasLabel('user').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 找出与学生徐宏有has关系的department。,"g.V().hasLabel('student').has('name', '徐宏').inE('has').outV().hasLabel('department')"
"帮我查询名为陈红的点buy的software,并对这些software的lang进行求和","g.V().has('name', '陈红').outE('buy').inV().hasLabel('software').values('lang').sum()"
"返回标签等于论坛的点,返回13个",g.V().hasLabel('forum').limit(13)
"找出与编辑吴建国有关,且与书罪与罚有关系的书节点","g.V().has('publisher', 'name', '吴建国').out('publish').as('b').out('refers').has('book', 'name', '罪与罚').select('b')"
"给出贷款loan_46存款的账号,被其他贷款存款的数量","g.V().has('loan', 'name', 'loan_46').outE('deposit').inV().hasLabel('account').inE('deposit').outV().hasLabel('loan').count()"
"给出id为188的pullRequest有关的repository的partner, 再给出和repository有关系的relation","g.V().has('pullRequest', 'id', 188).as('a').bothE().otherV().hasLabel('repository').as('b').both().hasLabel('repository').bothE('partner').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"找出26个名为郑建国的点likes的类型为book的节点,且节点name是呐喊或name为悲惨世界","g.V().has('name', '郑建国').outE('likes').inV().hasLabel('book').has('name', within('呐喊', '悲惨世界')).limit(26)"
"请帮我查找和大学浙江大学有属于关系的城市,再请帮我查找以合作关系关联了浙江大学的公司","g.V().has('university', 'name', '浙江大学').as('a').outE('belong').inV().hasLabel('city').as('b').select('a').inE('cooperate').outV().hasLabel('company').as('c').select('a', 'b', 'c')"
"查找课程的三角的环,边类型是属于, 并返回这些点的id","g.V().hasLabel('course').as('a').outE('belong').inV().as('b').outE('belong').inV().as('c').where(eq('a')).select('a', 'b', 'c').by().by(id).by(id).project('a', 'b_id', 'c_id').by().by(select('b')).by(select('c'))"
请帮我找出类型为电影且与Comment_247和Comment_365两点都有关联的节点,"g.V().has('name', 'Comment_247').outE('belong').inV().hasLabel('film').as('b').inE('belong').outV().has('name', 'Comment_365').select('b')"
"请帮我找出全部和名为知网的forum有friend关系,或有friend的friend关系的post","g.V().has('forum', 'name', '知网').repeat(out('friend')).times(2).hasLabel('post')"
"输入表的列为address,size,name, 数据为('西区',732,'UME'),('南区',9,'大众影院'), 以属性name作为相等条件,查询前175个创建时间为2025年06月12日的评论","g.inject(['西区',732,'UME'], ['南区',9,'大众影院']).as('p').select('p').unfold().as('row').project('address', 'size', 'name').by(__.select('row').limit(1)).by(__.select('row').skip(1).limit(1)).by(__.select('row').skip(2).limit(1)).as('p').V().hasLabel('comment').as('a').where(__.select('a').values('name').is(__.select('p').select('name'))).has('createTime', '2025-06-12').select('a').limit(175)"
 获取文学院和物理学院，类型为部门节点，共同拥有的'朋友'节点列表。,"g.V().has('department', 'name', '文学院').out('friend').as('b').in('friend').has('department', 'name', '物理学院').select('b').values('name')"
"帮我查询所有名为黄月的点的,创建时间不是2013年09月27日且名字不是Comment_425的伙伴,返回这些伙伴的字数,和边的权重,f1","g.V().has('name', '黄月').outE('partner').as('e').inV().has('createTime', neq('2013-09-27')).has('name', neq('Comment_425')).project('b_wordCount', 'e_weight', 'e_f1').by(values('wordCount')).by(select('e').values('weight')).by(select('e').values('f1'))"
请帮我查找全部与标签科幻有关系的评论的字数,"g.V().has('tag', 'name', '科幻').bothE().otherV().hasLabel('comment').values('wordCount')"
帮我找找forum中国诗词论坛和历史相关的帖子,"g.V().hasLabel('forum').has('name', '中国诗词论坛').outE('contain').inV().hasLabel('post').as('b').outE('has').inV().hasLabel('tag').has('name', '历史').select('b')"
 评论Comment_206属于的电影数量没有被明确说明。,"g.V().has('comment', 'name', 'Comment_206').out('belong').in('belong').hasLabel('comment').count()"
"帮我查询卖家的三角的环,边标签为拥有, 并返回这些点的id","g.V().hasLabel('seller').as('a').out('has').as('b').out('has').as('c').where(__.as('c').out('has').as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
请帮我找出与用户赵科和文艺标签相关的帖子。,"g.V().has('user', 'name', '赵科').bothE('likes').otherV().hasLabel('post').bothE('has').otherV().has('tag', 'name', '文艺').select('post')"
"帮我查询person张红关联的person,被其他person认识的数量","g.V().has('person', 'name', '张红').outE('relates').inV().hasLabel('person').inE('knows').outV().hasLabel('person').count()"
"用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找与订单Order_179有关系的买家的薪资","g.V().hasLabel('orders').has('name', 'Order_179').bothE().otherV().hasLabel('buyer').values('salary')"
找出共同拥有'大学'标签且名称包含'重庆大学'或'武汉大学'的节点列表。,"g.V().has('university', 'name', '重庆大学').outE('relation').inV().as('b').inE('relation').outV().has('university', 'name', '武汉大学').select('b').values('name')"
 返回医生类型且按照性别从小到大排序的所有点。,"g.V().hasLabel('doctor').order().by('gender', asc)"
"找出和person点有购买关系的软件节点,且边满足条件源点id为空,目标软件节点满足条件星数在676到973之间","g.V().hasLabel('person').as('a').outE('buy').has('srcId', null).as('e').inV().hasLabel('software').has('stars', between(676, 973)).as('b').select('b')"
"调用triangleCount函数,以'jd', 24作为输入,返回number","g.call(""triangleCount"").with(""graphName"", ""jd"").with(""maxIterations"", 24).select(""number"")"
"请帮我找出订单的三角的环,边标签等于包含, 并返回这些点的id","g.V().hasLabel('orders').as('a').outE('contain').inV().as('b').outE('contain').inV().as('c').where(__.outE('contain').inV().as('a')).select('a', 'b', 'c').by().by('id').by('id').project('a', 'b_id', 'c_id').by().by(select('b').id()).by(select('c').id())"
"请帮我查找52个和类型是大学的点有合作关系的公司,并且和这些公司有属于关系的城市",g.V().hasLabel('university').as('a').outE('cooperate').as('e').inV().hasLabel('company').as('b').outE('belong').as('e2').inV().hasLabel('city').as('c').select('c').limit(52)
找出与出版社标签相关的13本书，以及它们引用的其他书籍。,g.V().hasLabel('publisher').as('a').outE('publish').as('e').inV().hasLabel('book').as('b').outE('refers').as('e2').inV().hasLabel('book').as('c').select('c').limit(13)
"输入请求点id的列表892,750,542,702, 源点的id等于输入表id,请帮我查找病人孙宏的相关者的朋友的朋友","g.withSideEffect('p', [892, 750, 542, 702]).V().hasLabel('patient').has('id', within('p')).has('name', '孙宏').out('relation').out('friend').out('friend')"
请帮我找出与标签为'university'的点有'has'关系的部门，以及这些部门有'has'关系的学生，以及这些学生有'selects'关系的课程。,g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('student').out('selects').hasLabel('course')
请帮我查找与赵建聪相关的人员，以及赵建聪喜欢的其他人员，并将他们返回。,"g.V().has('person', 'name', '赵建聪').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('likes').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
"返回名为复旦大学和电子科技大学的,类型为大学的点公共的相关者节点的名单","g.V().has('university', 'name', '复旦大学').outE('relation').inV().as('b').inE('relation').outV().has('university', 'name', '电子科技大学').select('b').values('name')"
"返回54个字数小于109或id大于等于36的评论,根据字数升序排列","g.V().hasLabel('comment').or(has('wordCount', lt(109)), has('id', gte(36))).order().by('wordCount', asc).limit(54)"
 谁与李梅有认识关系？,"g.V().hasLabel('person').has('name', '李梅').inE('knows').outV().dedup()"
"请帮我找出标签为film,名为我不是药神的点,返回这些点的name","g.V().hasLabel('film').has('name', '我不是药神').values('name')"
"以613,995,426作为请求点id, 源点的id等于输入表id,返回账号TheShy的所有label为朋友的边,并根据f0从小到大排列,返回183个","g.withSideEffect('p', [613, 995, 426]).V().hasLabel('account').as('a').where(and(__.select('a').values('id').is(within(__.select('p'))), __.select('a').has('name', 'TheShy'))).outE('friend').as('e').order().by('f0', asc).limit(183).inV().as('b').select('b')"
"请帮我查找id为116的reader有关的author的partner, 再请帮我查找和author有关系的partner","g.V().has('reader', 'id', 116).as('a').bothE().otherV().hasLabel('author').as('b').bothE('partner').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
查询与software Zookeeper有uses关系的1跳的环,"g.V().has('software', 'name', 'Zookeeper').as('a').outE('uses').inV().as('b').where(__.select('a').where(eq('b'))).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"请帮我找出和国家越南有关的公司,称为X,再请帮我找出和这个X有关联的其他公司,以及和X有关联的大学","g.V().has('country', 'name', '越南').as('a').bothE().otherV().hasLabel('company').as('b').bothE().otherV().hasLabel('company').where(neq('b')).as('c').select('b').bothE().otherV().hasLabel('university').as('d').select('a', 'b', 'c', 'd')"
"给出被person徐轩属于的公司,和徐轩认识的person","g.V().hasLabel('person').has('name', '徐轩').as('b').outE('belong').inV().hasLabel('company').as('a').select('b').outE('knows').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
查询与company相关的loan节点，按weight和amount进行分组，并返回weight和amount。,"g.V().hasLabel('company').bothE('apply').otherV().hasLabel('loan').group().by(values('weight', 'amount')).select(keys)"
 查询陈若涵和孙宏共同的朋友。,"g.V().has('user', 'name', '陈若涵').outE('friend').inV().as('b').inE('friend').outV().has('user', 'name', '孙宏').select('b').limit(138)"
"给出创造评论Comment_308的person,和这些person创造的评论","g.V().has('comment', 'name', 'Comment_308').in('creates').as('b').out('creates').hasLabel('comment').as('c').select('b', 'c')"
"查找大学的三角的环,边标签为合作, 并返回这些点的id","g.V().hasLabel('university').as('a').outE('cooperate').inV().as('b').outE('cooperate').inV().as('c').where(__.outE('cooperate').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"找出所有徐思琪的点关联的person,然后找出徐思琪被认识的person,一起返回","g.V().has('name', '徐思琪').as('a').outE('relates').inV().hasLabel('person').as('b').select('a').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
 查询男性用户发布的帖子名称和它们所带的标签。,"g.V().hasLabel('user').has('gender', 'famale').outE('publish').inV().hasLabel('post').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"输入请求点id的列表36,641,392, 以属性id作为相等条件,查找与公司华为和字节都存在company_cooperate_university关系的点","g.withSideEffect('p', [36, 641, 392]).V().hasLabel('company').has('id', within('p')).has('name', '华为').outE('company_cooperate_university').inV().as('b').inE('company_cooperate_university').outV().hasLabel('company').has('name', '字节').select('b').dedup()"
"输入请求点id的列表937, 源点的id等于输入表id,查询被person杜若涵invest的company","g.withSideEffect('p', [937]).V().hasLabel('company').has('id', within('p')).as('a').in('person_invest_company').hasLabel('person').has('name', '杜若涵').as('b').select('a', 'b')"
"返回label为软件,名为Hive的点,返回这些点的名字,是否开源,价值","g.V().hasLabel('software').has('name', 'Hive').project('a.name', 'a.openSource', 'a.value').by('name').by('openSource').by('value')"
请帮我找出与label为person的点有支付关系，并且与这些人有喜欢关系的person，总共有181个。,g.V().hasLabel('person').as('a').outE('pay').inV().hasLabel('person').as('b').outE('likes').inV().hasLabel('person').as('c').select('c').limit(181)
"返回医生吴国强诊断的病人,以及诊断这些病人的医生, 令病人的名字等于病人的id乘66,令医生的id等于医生的名字的平均值, 返回医生(a)的年龄,病人(b)的性别,医生(c)的名字","g.V().hasLabel('doctor').has('name', '吴国强').as('a').outE('diagnose').inV().hasLabel('patient').as('b').inE('diagnose').outV().hasLabel('doctor').as('c').select('a', 'b', 'c').by(project('age').by('age')).by(project('gender').by('gender')).by(project('name').by('name'))"
"查找全部id为10的医生关联的部门,和以属于关系关联了这些部门的其他医生","g.V().hasLabel('doctor').has('id', 10).as('a').bothE().as('e').otherV().hasLabel('department').as('b').inE('belong').as('e2').outV().hasLabel('doctor').as('c').select('b', 'c')"
找出医生标签的点，它们既是Alan的伙伴又是马思琪的伙伴。,"g.V().hasLabel('doctor').has('name', 'Alan').outE('partner').inV().as('b').inE('partner').outV().hasLabel('doctor').has('name', '马思琪').select('b').values('name')"
"找出university电子科技大学cooperate的company,以及contain这些company的city, 令company的name等于company的id乘31加854,令city的name等于university的name, 返回university的name,company的scale,city的name","g.V().has('university', 'name', '电子科技大学').as('a').outE('cooperate').inV().hasLabel('company').as('b').inE('contain').outV().hasLabel('city').as('c').select('a', 'b', 'c').by('name').by(values('scale')).by(project('name').by(constant('电子科技大学')).select('name')).project('a_name', 'b_scale', 'c_name').by(select('a')).by(select('b')).by(select('c'))"
"请帮我查找和仓库点有拥有关系的合并请求节点,且边满足条件f1不等于true,目标合并请求节点名字不是PR-163","g.V().hasLabel('repository').as('a').outE('has').has('f1', neq(true)).as('e').inV().hasLabel('pullRequest').has('name', neq('PR-163')).as('b').select('b')"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));查询所有id为86的大学关联的公司,和以合作关系关联了这些公司的其他大学","g.V().has('university', 'id', 86).bothE().otherV().hasLabel('company').as('b').inE('university_cooperate_company').outV().hasLabel('university').as('c').select('b', 'c')"
"以174作为请求点id, 源点的id等于输入表id,查询person韩轩relates的person,被其他person relates的数量","g.withSideEffect('p', [174]).V().hasLabel('person').has('id', __.select('p')).has('name', '韩轩').as('a').outE('relates').inV().hasLabel('person').as('b').inE('relates').outV().hasLabel('person').as('c').select('c').count()"
返回与Order_444相关的订单，以及包含在Order_444中的其他商品。,"g.V().hasLabel('orders').has('name', 'Order_444').as('a').bothE().otherV().hasLabel('orders').as('b').select('a').outE('contain').inV().hasLabel('goods').as('c').select('a', 'b', 'c')"
"找出被贷款loan_63存款的账号,和loan_63存款的账号","g.V().has('loan', 'name', 'loan_63').as('b').outE('deposit').inV().hasLabel('account').as('a').select('b').outE('deposit').inV().hasLabel('account').as('c').select('a', 'b', 'c')"
"查询person赵宏的所有类型是相关者的边,并根据权重升序排列,返回6个","g.V().has('person', 'name', '赵宏').outE('relation').order().by('weight', asc).limit(6).inV()"
帮我查询103个与知乎和百度贴吧都存在关系的论坛节点,"g.V().has('name', '知乎').outE().as('e').inV().hasLabel('forum').as('b').inE().as('e2').outV().has('name', '百度贴吧').select('b').limit(103)"
 找出两个名字为何强和张强，标签为用户的节点，它们之间的相关者节点。,"g.V().has('user', 'name', '何强').as('a').outE('relation').inV().as('b').inE('relation').outV().has('user', 'name', '张强').as('c').select('b').values('name')"
查询与商品香蕉有has关系的所有卖家,"g.V().hasLabel('goods').has('name', '香蕉').inE('has').outV().hasLabel('seller')"
 找出年龄大于等于49岁且身高大于等于167厘米且性别不是男性的190个人，并按照年龄从小到大排序。,"g.V().hasLabel('person').or(and(has('gender', neq('male')), has('age', gte(49))), has('height', gte(167))).order().by('age', asc).limit(190)"
"给出全部和药品阿司匹林有关系的医生或药品,返回这些点的价格","g.V().has('medicine', 'name', '阿司匹林').bothE().otherV().hasLabel(within('doctor', 'medicine')).values('price')"
请帮我找出被用户韩月发布的帖子,"g.V().hasLabel('user').has('name', '韩月').outE('publish').inV().hasLabel('post').as('b').select('b').by().as('a').select('a', 'b')"
"帮我查询161个名为王红的点likes的标签为book的节点,且其createTime为2006年02月02日","g.V().has('name', '王红').outE('likes').inV().hasLabel('book').has('createTime', '2006-02-02').limit(161)"
"以'Iw', 'KV', 65作为输入调用KHOP函数,返回id, kValue","g.call('KHOP').with('arg0', 'Iw').with('arg1', 'KV').with('arg2', 65).select('id', 'kValue')"
 查询所有起点标记为'person'，终点标记为'company'，且标签为'invest'的边。,g.V().hasLabel('person').outE('invest').as('e').inV().hasLabel('company').select('e')
 查询马建国关联的人，即马建国关系链中下一个关联的人。,"g.V().has('person', 'name', '马建国').out('relates').out('relates')"
请帮我找出前86个性别不等于famale或身高为空或薪资在7716到9544之间的person,"g.V().hasLabel('person').or(has('gender', neq('famale')), hasNot('height'), has('salary', between(7716, 9544))).limit(86)"
"返回类型是accept,并且满足条件f0小于等于925,srcId小于50,或f0为656的边","g.E().hasLabel('accept').or(and(has('f0', lte(925)), has('srcId', lt(50))), has('f0', 656))"
 查询所有forum的合作伙伴，或它们的合作伙伴。,"g.V().hasLabel('forum').outE('partner').inV().range(1, 2).dedup()"
帮我查询前186个label为申请的边,g.E().hasLabel('apply').limit(186)
"请帮我查找person马强own的account, 令account的createTime等于account的id对id取余减0,令account的createTime等于account的createTime,令person的value等于account的value加713加945, 返回person的gender, account的id","g.V().has('person', 'name', '马强').as('a').outE('own').as('e').inV().hasLabel('account').as('b').project('a_gender', 'b_id').by(select('a').values('gender')).by(select('b').values('id'))"
"请帮我找出和仓库有关联的合并请求节点,并根据其创建时间,名字,id分组,返回创建时间,名字,id,以及id除id的值","g.V().hasLabel('repository').as('a').bothE('has').otherV().hasLabel('pullRequest').as('b').select('b').group().by(project('createTime', 'name', 'id').by(values('createTime')).by(values('name')).by(values('id'))).by(project('createTime', 'name', 'id', 'id_div_id').by(values('createTime')).by(values('name')).by(values('id')).by(constant(1))).unfold().select(values).project('createTime', 'name', 'id', 'id_div_id').by(select('createTime')).by(select('name')).by(select('id')).by(select('id_div_id'))"
找出被person李建聪认识的person,"g.V().hasLabel('person').has('name', '李建聪').as('b').outE('knows').as('e').inV().as('a').select('a', 'b')"
"找出公司的相关者,或其相关者的相关者","g.V().hasLabel('company').outE('relation').inV().range(1, 2).dedup()"
"根据height分组,计算height的个数加188的值",g.V().hasLabel('a').group().by('height').by(count()).unfold().select(values).math('_ + 188')
"以(82,526,422),(5,241,719)作为请求表数据,属性分别为id,wordCount,value, 以属性id作为相等条件,给出user徐建国publish的post节点has的tag","g.withSideEffect('p', [[id:82, wordCount:526, value:422], [id:5, wordCount:241, value:719]]).V().hasLabel('user').as('a').where(and(__.select('a').values('id').is(within(select('p').unfold().values('id'))), __.select('a').values('name').is(eq('徐建国')))).outE('user_publish_post').inV().hasLabel('post').as('b').outE('post_has_tag').inV().hasLabel('tag').as('c').select('c')"
id除id的平均值,g.V().hasLabel('a').project('avg').by(values('id').math('_ / _').mean()).select('avg')
查找person韩建聪支付的person节点喜欢的person,"g.V().hasLabel('person').has('name', '韩建聪').outE('pay').inV().hasLabel('person').outE('likes').inV().hasLabel('person')"
" 找出与类型为company的点有belongs-to关系的city,并找出与这些city有contains关系的company。",g.V().hasLabel('company').as('a').out('belong').hasLabel('city').as('b').out('contain').hasLabel('company').as('c').select('c').limit(168)
返回与吴红相关的cinema，然后返回吴红喜欢的其他评论。,"g.V().has('person', 'name', '吴红').as('a').bothE().otherV().hasLabel('cinema').as('b').select('a').outE('likes').inV().hasLabel('comment').as('c').select('a', 'b', 'c')"
"查询公司属于的城市,返回其源点的价值除572的值,以及目标点的id除id的最小值","g.V().hasLabel('company').as('a').outE('belong').as('e').inV().hasLabel('city').as('b').project('a.value_div_572', 'min_b_id_div_id').by(select('a').values('value').math('_ / 572')).by(select('b').values('id').math('_ / _').min())"
"请帮我找出名为陈科和吴强的,标签为person的点公共的朋友节点的名单","g.V().has('person', 'name', '陈科').outE('friend').inV().as('b').inE('friend').outV().has('person', 'name', '吴强').select('b').values('name')"
"找出全部部门的相关者,或其相关者的相关者",g.V().hasLabel('department').outE('relation').inV().outE('relation').inV().dedup()
"请帮我查找112个名为马思琪的点认识的label为person的节点,且节点id不等于35且id除42小于等于65","g.V().has('name', '马思琪').outE('knows').inV().hasLabel('person').has('id', neq(35)).has('id', lt(43)).limit(112)"
查询被department物理学院has的teacher,"g.V().hasLabel('department').has('name', '物理学院').inE('has').outV().hasLabel('teacher').as('b').outE('has').inV().hasLabel('teacher').as('a').select('a', 'b')"
"以247作为请求点id, 源点的id等于输入表id,给出buyer徐建国的所有label为relation的边,并根据targetId从小到大排列,返回18个","g.withSideEffect('p', [247]).V().hasLabel('buyer').has('id', __.select('p')).has('name', '徐建国').outE('relation').order().by('targetId').limit(18).inV()"
"使用列为height,id,name, 数据为(199,37,'张宏')的子查询作为输入表, 以属性height作为相等条件,找出author张月 write的book,返回book knows的book的wordCount减307的值 ","g.withSideEffect('p', [['height':199, 'id':37, 'name':'张宏']]).V().hasLabel('author').has('height', __.select('p').unfold().select('height')).has('name', '张月').outE('author_write_book').inV().hasLabel('book').outE('knows').inV().hasLabel('book').values('wordCount').math('_ - 307')"
查询以认识关系关联了person李国强的person,"g.V().hasLabel('person').has('name', '李国强').inE('knows').outV().dedup()"
找出与徐思琪有关的医生，并获取徐思琪接受过的所有处方，然后将两者一起返回。,"g.V().hasLabel('patient').has('name', '徐思琪').as('a').bothE().otherV().hasLabel('doctor').as('b').select('a').outE('accept').inV().hasLabel('prescription').as('c').select('a', 'b', 'c')"
获取出版社ID为15的书籍相关的合作伙伴，然后获取与该出版社有合作关系的朋友。,"g.V().has('book', 'id', '15').as('a').bothE().otherV().hasLabel('publisher').as('b').bothE('partner').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
"查找id为178的book relates的book, 并将book有关的author的age的平均值赋值给book的id, 接着查询book的id小于178的book relates的book","g.V().has('book', 'id', 178).out('relates').hasLabel('book').as('b').project('b_id', 'd').by(coalesce(__.select('b').bothE().otherV().hasLabel('author').values('age').mean(), constant(0))).by(__.select('b').has('id', lt(178)).out('relates').hasLabel('book'))"
"给出和书白夜行有引用关系的书,再给出以引用关系关联了白夜行的书","g.V().hasLabel('book').has('name', '白夜行').as('a').bothE('refers').otherV().hasLabel('book').as('b', 'c').select('a', 'b', 'c')"
 找Comment_248belong电影节点标签has的。,"g.V().hasLabel('comment').has('name', 'Comment_248').out('belong').hasLabel('film').out('has').hasLabel('tag')"
"请帮我查找belong doctor孙雪belong的department,的doctor","g.V().hasLabel('doctor').has('name', '孙雪').outE('belong').inV().hasLabel('department').as('b').inE('belong').outV().hasLabel('doctor').as('c').select('b', 'c')"
"请帮我找出课程的三角的环,边label为属于, 并返回这些点的id","g.V().hasLabel('course').as('a').outE('belong').as('e').inV().as('b').outE('belong').as('e2').inV().as('c').where('a', eq('c')).select('a', 'b', 'c').by().by('id').by('id').project('a', 'b_id', 'c_id').by().by(select('b')).by(select('c'))"
给出被account Light repay的loan,"g.V().hasLabel('account').has('name', 'Light').outE('repay').inV().hasLabel('loan').as('b', 'a').select('a', 'b')"
"用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));返回account Light的所有标签为partner的边,并根据f1从小到大排列,返回116个","g.V().has('account', 'name', 'Light').outE('partner').order().by('f1', asc).limit(116).inV()"
"查找和编辑王建聪有发布关系的书,再查找以发布关系关联了王建聪的书","g.V().has('publisher', 'name', '王建聪').as('a').outE('publish').inV().hasLabel('book').as('b').select('a').inE('publish').outV().hasLabel('book').as('c').select('a', 'b', 'c')"
"用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询与person黄月和何红都存在person_colleague_person关系的点","g.V().has('person', 'name', '黄月').out('person_colleague_person').as('b').in('person_colleague_person').has('person', 'name', '何红').select('b')"
给出前72个类型为belong的边,g.E().hasLabel('belong').limit(72)
请帮我查找city的3度的环,"g.V().hasLabel('city').as('a').repeat(both().simplePath()).times(2).where(loops().is(2)).as('b').where(out().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').values('id')).by(select('b').values('id'))"
找出与名为韩建国的 person 有关联的 partner 或 partner 的 partner 的 loan,"g.V().has('person', 'name', '韩建国').out('partner').repeat(out('partner')).times(2).hasLabel('loan')"
"找出全部id为92的person关联的person,和以pay关系关联了这些person的其他person","g.V().has('person', 'id', 92).as('a').bothE().as('e').otherV().hasLabel('person').as('b').inE('pay').as('e2').outV().hasLabel('person').as('c').select('b', 'c').dedup()"
 请帮我把 prescription 按照 id 进行分组，然后按从大到小的顺序排序。,"g.V().hasLabel('prescription').group().by('id').order(local).by(keys, desc).select(values).unfold()"
找出与仓库FSM和Kafka都存在拥有关系的点,"g.V().has('repository', 'name', 'FSM').out('has').where(__.in('has').has('repository', 'name', 'Kafka'))"
帮我查询全部和course数据结构之间有belong关系的department,"g.V().has('course', 'name', '数据结构').out('belong').hasLabel('department')"
"帮我查询所有和person点有属于关系的公司节点,且边满足条件权重是198.17,目标公司节点id小于等于25","g.V().hasLabel('person').as('a').outE('belong').has('weight', 198.17).as('e').inV().hasLabel('company').has('id', lte(25)).as('b').select('b')"
"返回类型是teach,并且f0为空且f0大于920,f1不是false的边","g.E().hasLabel('teach').has('f0', null).has('f0', gt(920)).has('f1', neq(false))"
查找全部和loan loan_28之间有deposit关系的account,"g.V().hasLabel('loan').has('name', 'loan_28').outE('deposit').inV().hasLabel('account')"
找出所有与person徐雪有关系的电影的id,"g.V().has('person', 'name', '徐雪').bothE().otherV().hasLabel('film').id()"
"查找名为外科的doctor,以及与其有关的doctor,并返回外科的name和这些doctor的salary","g.V().hasLabel('doctor').has('name', '外科').bothE().otherV().hasLabel('doctor').project('a_name', 'b_salary').by(select(all, 'a').unfold().values('name')).by(values('salary'))"
"查询全部与周轩存在write关系的book,book与book存在refers关系的点,返回这些点的createTime","g.V().has('name', '周轩').outE('write').inV().hasLabel('book').outE('refers').inV().hasLabel('book').values('createTime')"
 请帮我找出14个与标签为'person'的地点有同事关系的地点，以及与这些地点有同事关系的地点。,g.V().hasLabel('person').as('a').outE('colleague').as('e').inV().hasLabel('person').as('b').outE('colleague').as('e2').inV().hasLabel('person').as('c').select('c').limit(14)
"帮我查询releases person黄伟watch的film,的cinema","g.V().hasLabel('person').has('name', '黄伟').outE('watch').inV().hasLabel('film').as('b').inE('releases').outV().hasLabel('cinema').as('c').select('b', 'c')"
返回作家的所有朋友，或者他们朋友的朋友。,"g.V().hasLabel('author').as('a').outE('friend').inV().hasLabel('author').range(1, 2).as('b').select('b')"
"以('small',201,99),('small',368,83),('medium',234,81)作为请求表数据,属性分别为scale,value,id, 以属性value作为相等条件,查询全部源点类型是company,边类型是company_belong_city,且满足条件srcId在49到58之间的边","g.withSideEffect('p', [['scale': 'small', 'value': 201, 'id': 99], ['scale': 'small', 'value': 368, 'id': 83], ['scale': 'medium', 'value': 234, 'id': 81]]).V().hasLabel('company').as('a').where(__.select('a').values('value').is(within(__.select('p').unfold().values('value')))).outE('company_belong_city').as('e').where(__.select('e').values('srcId').is(between(49, 58))).select('e')"
 返回与大学类型的点有拥有关系的部门，以及与这些部门有拥有关系的教师，以及与这些教师有教关系的课程。,g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('teacher').out('teach').hasLabel('course')
"查询医生属于的部门, 令部门的id的值等于属于部门的医生的名字的和, 再查找部门拥有的医生","g.V().hasLabel('doctor').as('a').outE('belong').as('e').inV().hasLabel('department').as('b').group().by(identity()).by(__.in('belong').hasLabel('doctor').values('name').sum()).select(values).unfold().as('b').out('has').hasLabel('doctor').as('d').select('b', 'd').by('id').by()"
查询所有与company美团有关系的company的peopleNumber,"g.V().has('company', 'name', '美团').bothE().otherV().hasLabel('company').values('peopleNumber')"
"请帮我找出名为孙红和周科的,类型是卖家的点公共的相关者节点的名单","g.V().has('seller', 'name', '孙红').outE('relation').inV().as('b').inE('relation').outV().has('seller', 'name', '周科').select('b').values('name')"
 返回与美团和蚂蚁集团有关系的国家节点，并返回它们的area和name。,"g.V().has('company', 'name', '美团').outE().inV().hasLabel('country').as('b').inE().outV().has('company', 'name', '蚂蚁集团').select('b').project('area', 'name').by(values('area')).by(values('name'))"
"输入请求点id的列表578,157, 源点的id等于输入表id,查找buyer李思琪cancel的orders,被其他buyer creates的数量","g.withSideEffect('p', [578, 157]).V().hasLabel('buyer').where(and(__.has('id', within('p')), __.has('name', '李思琪'))).outE('buyer_cancel_orders').inV().hasLabel('orders').inE('buyer_creates_orders').outV().hasLabel('buyer').count()"
"输入表的列为id,value,name, 数据为(52,343,'蚂蚁集团'),(54,974,'华为'), 以属性name作为相等条件,给出id为169的点的人数,名字,id","g.inject([['id':52, 'value':343, 'name':'蚂蚁集团'], ['id':54, 'value':974, 'name':'华为']]).as('p').V().has('name', within(select('p').unfold().values('name'))).has('id', '169').project('peopleNumber', 'name', 'id').by(values('peopleNumber')).by(values('name')).by(values('id'))"
给出全部和person李科之间有pay关系的person,"g.V().hasLabel('person').has('name', '李科').outE('pay').inV().hasLabel('person')"
"查询名为郑雪的person,以及与其有关的person,并返回郑雪的薪资和这些person的名字","g.V().has('person', 'name', '郑雪').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('salary').by('name')"
查询forum的3跳的环,"g.V().hasLabel('forum').as('a').repeat(both().simplePath()).times(3).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').values('id')).by(select('b').values('id'))"
id减47的值,g.V().has('id').project('result').by(values('id').math('_ - 47'))
"用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找与名为张建国和何宏的点共同喜欢的,类型为帖子的节点","g.V().has('name', '张建国').outE('user_likes_post').inV().hasLabel('post').as('b').inE('user_likes_post').outV().has('name', '何宏').select('b')"
"查询源点标签等于person,边标签等于喜欢,且满足条件源点id大于等于82或f1不等于true或f0不是866的边","g.V().hasLabel('person').as('a').outE('likes').as('e').where(or(__.select('e').has('srcId', gte(82)), __.select('e').has('f1', neq(true)), __.select('e').has('f0', neq(866)))).select('e')"
 找出与郑思琪和马若涵有关联的55个人。,"g.V().has('name', '郑思琪').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '马若涵').select('b').limit(55)"
 请帮我找出孙雪喜欢过的书和Alice发布过的书，然后把它们都发给我。,"g.V().has('reader', 'name', '孙雪').as('a').out('likes').as('b').select('a').V().has('publisher', 'name', 'Alice').as('c').out('publish').as('d').select('a', 'b', 'c', 'd')"
请提供与ID为64的处方相关的部门合作伙伴，以及与该部门相关联的所有人员。,"g.V().has('prescription', 'id', '64').as('a').bothE().otherV().hasLabel('department').as('b').bothE('partner').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));返回全部源点标签为城市,目标点标签为国家,标签为city_belong_country的边",g.E().hasLabel('city_belong_country').where(outV().hasLabel('city')).where(inV().hasLabel('country'))
"返回所有源点名字不等于深圳,目标点名字不等于谷歌,且标签等于包含的边","g.V().has('name', neq('深圳')).outE('contain').as('e').inV().has('name', neq('谷歌')).select('e')"
"输入请求点id的列表785, 以属性id作为相等条件,找出179个gender等于famale或gender不是famale或age减94对165取余是181的buyer,根据gender升序排列","g.inject(785).as('p').V().hasLabel('buyer').has('id', __.as('p')).or(has('gender', 'famale'), has('gender', neq('famale')), math('age - 94 % 165').is(181)).order().by('gender', asc).limit(179)"
"返回所有id为53的大学关联的大学,和以包含关系关联了这些大学的其他城市","g.V().has('university', 'id', 53).as('a').bothE().as('e').otherV().hasLabel('university').as('b').inE('contain').as('e2').outV().hasLabel('city').as('c').select('b', 'c')"
"请帮我找出名为韩梅的person,以及与其有关的person,并返回韩梅的年龄和这些person的身高","g.V().hasLabel('person').has('name', '韩梅').as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a', 'b').by('age').by('height')"
请帮我找出满足条件名字等于知乎的节点,"g.V().has('name', '知乎')"
"找出全部Order_280的点contain的goods,然后找出Order_280被cancel的buyer,一起返回","g.V().has('name', 'Order_280').as('a').outE('contain').inV().hasLabel('goods').as('b').select('a').inE('cancel').outV().hasLabel('buyer').as('c').select('a', 'b', 'c')"
查找前179个类型是包含的边,g.E().hasLabel('contain').limit(179)
"返回和作家有关联的书节点,并根据其价格,id分组,返回价格,id,以及id除60的值","g.V().hasLabel('author').as('a').outE('write').as('e').inV().hasLabel('book').as('b').group().by(select('b').values('price', 'id').fold()).by(select('b').project('price', 'id', 'id_div_60').by(values('price')).by(values('id')).by(math('id / 60')).fold())"
帮我查询person郑思琪喜欢的评论节点属于的电影,"g.V().hasLabel('person').has('name', '郑思琪').out('likes').hasLabel('comment').out('belong').hasLabel('film')"
"查询名为李轩的person,以及与其有关的person,并返回李轩的薪资和这些person的年龄","g.V().has('person', 'name', '李轩').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('salary').by('age')"
"以385作为请求点id, 以属性id作为相等条件,给出前62个类型为person_knows_person的边","g.V().has('id', 385).outE('person_knows_person').limit(62)"
"找出标签等于认识,并且f1为false的边","g.E().hasLabel('knows').has('f1', false)"
给出person的2跳的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(2).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').values('id')).by(select('b').values('id'))"
请帮我找出所有与XXD有转账关系的账号，并返回他们之间的转账价值。,"g.V().has('name', 'XXD').outE('transfer').inV().hasLabel('account').outE('transfer').inV().hasLabel('account').values('value')"
帮我查询所有和贷款loan_17有3跳关系的账号,"g.V().has('loan', 'name', 'loan_17').repeat(out().simplePath()).times(3).hasLabel('account')"
 返回所有与给定人物相关的其他人，以及这些人与给定人物之间的认识关系。,"g.V().has('person', 'id', '30').bothE().otherV().hasLabel('person').as('b').inE('knows').otherV().hasLabel('person').as('c').select('b', 'c')"
 查询4号id到9号id(包含4和9)之间的作者写的书的名称，以及这些书相关联的书的名称。,"g.V().hasLabel('author').has('id', between(4, 9)).out('write').as('b').out('relates').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
返回全部和公司美团之间有申请关系的贷款,"g.V().hasLabel('company').has('name', '美团').outE('apply').inV().hasLabel('loan')"
找到名为Prescription_246的处方,"g.V().hasLabel('prescription').has('name', 'Prescription_246')"
帮我查询全部名为徐雪的节点喜欢的person,"g.V().has('name', '徐雪').outE('likes').inV().hasLabel('person')"
"查找3个和类型是person的点有申请关系的贷款,并且和这些贷款有存款关系的账号",g.V().hasLabel('person').as('a').outE('apply').as('e').inV().hasLabel('loan').as('b').outE('deposit').as('e2').inV().hasLabel('account').as('c').select('c').limit(3)
"使用这个图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));给出名为电子科技大学的大学,以及与其有关的城市,并返回电子科技大学的名字和这些城市的人数","g.V().has('university', 'name', '电子科技大学').as('a').both().hasLabel('city').as('b').select('a', 'b').by('name').by('peopleNumber')"
"以876作为请求点id, 源点的id等于输入表id,请帮我找出源点name等于郑轩或gender等于7633,且height不为空,边类型为user_publish_post,且满足条件f1等于true的边,返回这些边的srcId加srcId的最大值","g.withSideEffect('p', [[876]]).V().has('id', within(select('p').unfold())).filter(and(has('name', '郑轩').or().has('gender', 7633), has('height', neq(null)))).outE('user_publish_post').has('f1', true).project('sum').by(values('srcId', 'srcId').sum()).select('sum').max()"
"查询名为马宏和徐宏的,label为person的点公共的伙伴节点的名单","g.V().hasLabel('person').has('name', '马宏').outE('partner').inV().as('b').inE('partner').outV().hasLabel('person').has('name', '徐宏').select('b').values('name')"
"输入请求点id的列表334,337, 以属性id作为相等条件,查询所有与company Bilibili有关系的person的gender","g.inject([334, 337]).unfold().as('p').V().hasLabel('company').has('id', __.select('p')).has('name', 'Bilibili').bothE().otherV().hasLabel('person').values('gender')"
帮我查询全部与部门放射科有关系的医生的id,"g.V().has('department', 'name', '放射科').bothE().otherV().hasLabel('doctor').values('id')"
"返回person徐伟关联的person,被其他person认识的数量","g.V().hasLabel('person').has('name', '徐伟').outE('relates').inV().hasLabel('person').inE('knows').outV().hasLabel('person').count()"
 请帮我找出开具处方Prescription_226的医生，以及返回该处方中包含的其他药品。,"g.V().hasLabel('prescription').has('name', 'Prescription_226').as('a').bothE().otherV().hasLabel('doctor').as('b').select('a').outE('contain').inV().hasLabel('medicine').as('c').select('a', 'b', 'c')"
"查询事项ISSUE-333的朋友,的f0减914的值","g.V().has('issue', 'name', 'ISSUE-333').outE('friend').as('e').inV().select('e').values('f0').math('_ - 914')"
"返回买家李思琪查看的商品,以及拥有这些商品的卖家, 令买家的id等于买家的名字的平均值,令卖家的名字等于买家的薪资的个数, 返回买家的id,商品的价值,卖家的名字","g.V().has('buyer', 'name', '李思琪').as('a').out('look').as('b').in('has').hasLabel('seller').as('c').select('a', 'b', 'c').by(project('id', 'name').by(__.values('name').mean()).by(__.values('name'))).by(values('value')).by(project('name').by(__.select('a').values('salary').count()))"
"帮我查询全部名为韩雪的,薪资小于等于9576的朋友,返回这些朋友的id,和边的f1","g.V().has('name', '韩雪').outE('friend').as('e').inV().has('salary', lte(9576)).project('b.id', 'e.f1').by(id()).by(select('e').values('f1'))"
"调用triangleCount函数,以'KJ'作为输入,返回运算结果","g.call('triangleCount').with('input', 'KJ').select('number')"
"返回名为李宏和张梅的,类型是person的点公共的friend节点的名单","g.V().has('person', 'name', '李宏').out('friend').as('b').in('friend').has('person', 'name', '张梅').select('b').values('name')"
"以93作为输入调用personalRank函数,返回运算结果","g.call('PERSONALRANK').with('input', 93).select('id', 'value')"
"请帮我找出名为中国科技大学的点拥有的所有部门,并对这些部门的名字进行求和","g.V().has('name', '中国科技大学').out('has').hasLabel('department').values('name').sum()"
 返回一个人同事的同事，或同事同事的同事。,g.V().hasLabel('person').as('a').outE('colleague').inV().hasLabel('person').as('b').select('b')
"请帮我查找和标签等于作家的点有认识关系的作家,以及和这些作家有认识关系的作家,以及和这些作家有认识关系的作家",g.V().hasLabel('author').as('a').out('knows').hasLabel('author').as('b').out('knows').hasLabel('author').as('c').out('knows').hasLabel('author').as('d').select('d')
"以'tD', 'wv'作为输入调用triangleCount函数,返回运算结果","g.call('triangleCount').with('graphName', 'tD').with('weightProperty', 'wv').select('number')"
"请帮我找出所有和person点有认识关系的person节点,且边满足条件f1等于true,目标person节点id大于等于29","g.V().hasLabel('person').as('a').outE('knows').has('f1', true).as('e').inV().hasLabel('person').has('id', gte(29)).as('b').select('b')"
"找出27个id等于77且id在61到86之间且名字不等于百度贴吧的论坛,根据人数从小到大排列","g.V().hasLabel('forum').has('id', 77).has('id', between(61, 86)).has('name', neq('百度贴吧')).order().by('peopleNumber', asc).limit(27)"
查找全部与person张科有关系的person的id,"g.V().has('person', 'name', '张科').bothE().otherV().hasLabel('person').id()"
给出和person黄雪之间有friend关系的person,"g.V().has('person', 'name', '黄雪').out('friend').hasLabel('person')"
id对id取余的值,g.V().project('result').by(values('id').math('_ / _').by(constant(1)))
 查询Post_314的关系对象的关系对象。,"g.V().hasLabel('post').has('name', 'Post_314').outE('relation').inV().outE('relation').inV().outE('partner').inV()"
"输入表的列为category,name,weight, 数据为('皮肤药','布洛芬',910),('发烧药','枇杷糖浆',655),('感冒药','医疗酒精',233), 以属性name作为相等条件,请帮我查找医生韩若涵诊断的病人,被其他医生诊断的数量","g.V().hasLabel('doctor').has('name', '韩若涵').outE('doctor_diagnose_patient').inV().hasLabel('patient').inE('doctor_diagnose_patient').outV().hasLabel('doctor').dedup().count()"
"查找与大学华中科技大学有关,且与学生张月有关系的部门节点","g.V().has('university', 'name', '华中科技大学').out('has').hasLabel('department').where(__.in('has').has('student', 'name', '张月')).dedup()"
"找出类型为发布,以及目标点id不是55的边","g.E().hasLabel('publish').has('targetId', neq(55))"
"帮我查询与名为吴思思和陈梅的点共同属于的,类型是部门的节点","g.V().has('name', '吴思思').outE('belong').inV().hasLabel('department').as('b').inE('belong').outV().has('name', '陈梅').select('b')"
"以759作为请求点id, 以属性id作为相等条件,给出被买家孙思思查看的商品","g.withSideEffect('p', [759]).V().hasLabel('goods').has('id', __.select('p')).as('a').in('buyer_look_goods').hasLabel('buyer').has('name', '孙思思').as('b').select('a', 'b')"
"查询与医生何思思有关,且与医生孙雪有关系的部门节点","g.V().hasLabel('doctor').has('name', '何思思').as('a').outE('belong').inV().hasLabel('department').as('b').inE('has').outV().hasLabel('doctor').has('name', '孙雪').select('b')"
查找所有和买家徐建国有3度关系的卖家,"g.V().has('buyer', 'name', '徐建国').repeat(out().simplePath()).times(3).hasLabel('seller').dedup()"
获取id为85的人的伴侣，以及与该人相关的朋友。,"g.V().has('person', 'id', '85').as('a').bothE().otherV().hasLabel('person').as('b').where(__.outE('partner').otherV().hasLabel('person').as('c')).where(__.outE('friend').otherV().as('d')).select('a', 'b', 'c', 'd')"
"返回label为apply,以及满足条件f1等于false,targetId为184,srcId小于183的边","g.E().hasLabel('apply').has('f1', false).has('targetId', 184).has('srcId', lt(183))"
"用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出名为Comment_447的comment,以及与其有关的film,并返回Comment_447的wordCount和这些film的id","g.V().has('comment', 'name', 'Comment_447').as('a').bothE().otherV().hasLabel('film').as('b').select('a', 'b').by('wordCount').by('id')"
"输入请求点id的列表513,943, 源点的id等于输入表id,请帮我查找与国家美国存在country_contain_city关系,且与国家韩国存在city_belong_country关系的城市节点，返回这些城市的面积,id,及国家美国的名字,及国家韩国的价值","g.withSideEffect('p', [513, 943]).V().hasLabel('country').where(__.values('id').is(within('p'))).has('name', '美国').outE('country_contain_city').inV().hasLabel('city').as('b').inE('city_belong_country').outV().hasLabel('country').has('name', '韩国').as('c').select('b').project('a_name', 'b_area', 'b_id', 'c_value').by(__.select('b').by(__.inE('country_contain_city').outV().hasLabel('country').has('name', '美国').values('name'))).by(__.values('area')).by(__.values('id')).by(__.select('c').values('value'))"
 找出经济学院关系的朋友关系,"g.V().has('department', 'name', '经管学院').outE('relation').inV().outE('friend').inV().outE('relation').inV()"
请找出与买家陈国强已取消的订单，以及与买家吴月有关联的商品，并将它们全部返回。,"g.V().hasLabel('buyer').has('name', '陈国强').as('a').outE('cancel').inV().hasLabel('orders').as('b').select('a').V().hasLabel('buyer').has('name', '吴月').as('c').outE('look').inV().hasLabel('goods').as('d').select('a', 'b', 'c', 'd')"
查询与名为赵月和韩轩的点有关系的、标签为person的节点,"g.V().has('name', '赵月').outE('relates').inV().hasLabel('person').as('b').inE('relates').outV().has('name', '韩轩').select('b')"
查询所有与名为'内科'的部门有关联关系，或者与这些关联关系有关联关系的医生。,"g.V().has('department', 'name', '内科').bothE('relation').bothV().hasLabel('doctor').dedup()"
"用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出label为person的点,返回102个",g.V().hasLabel('person').limit(102)
"输入表的列为height,salary,age, 数据为(192,2080,76),(156,5184,56),(192,1659,9),(152,9744,96), 以属性height作为相等条件,请帮我查找person的三角的环,边类型是person_knows_person, 并返回这些点的id","g.withSideEffect('p', [[192,2080,76],[156,5184,56],[192,1659,9],[152,9744,96]]).V().hasLabel('person').as('a').where(__.select('a').values('height').is(within(__.select('p').unfold().project('height').by(__.limit(1)).dedup()))).bothE('person_knows_person').otherV().as('b').bothE('person_knows_person').otherV().as('c').where(__.select('c').bothE('person_knows_person').otherV().where(eq('a'))).select('a', 'b', 'c').by('id').by('id').by('id')"
"查找与person马雪有关,且与tag其他有关系的film节点","g.V().hasLabel('person').has('name', '马雪').outE('watch').inV().hasLabel('film').as('b').inE('has').outV().hasLabel('tag').has('name', '其他').select('b')"
"给出contain forum知网contain的post,的forum","g.V().hasLabel('forum').has('name', '知网').outE('contain').inV().hasLabel('post').as('b').inE('contain').outV().hasLabel('forum').as('c').select('b', 'c')"
"帮我查询创造评论Comment_344的person,和这些person观看的电影","g.V().has('comment', 'name', 'Comment_344').in('creates').as('b').out('watch').as('c').select('b', 'c')"
"给出37个名为李红的点喜欢的类型为person的节点,且其身高为空或年龄小于等于72","g.V().has('name', '李红').outE('likes').inV().hasLabel('person').or(hasNot('height'), has('age', lte(72))).limit(37)"
"以(26,8571,'famale'),(88,5055,'male'),(85,2864,'male')作为请求表数据,属性分别为id,salary,gender, 以属性gender作为相等条件,帮我查询和订单点有包含关系的商品节点,且边满足条件f0小于等于972,目标商品节点满足条件id不为空","g.inject([['id':26,'salary':8571,'gender':'famale'],['id':88,'salary':5055,'gender':'male'],['id':85,'salary':2864,'gender':'male']]).as('p').unfold().as('p_row').select('p_row').by(values('gender')).as('gender_val').V().hasLabel('orders').as('a').where(__.as('a').values('gender').as('a_gender').select('gender_val').where(eq('a_gender'))).outE('orders_contain_goods').has('f0', lte(972)).as('e').inV().hasLabel('goods').has('id', neq(null)).as('b').select('b')"
请帮我找出与买家王月有关联的咨询记录，以及与此记录相关的卖家。,"g.V().hasLabel('buyer').has('name', '王月').as('a').outE('consult').inV().hasLabel('seller').as('b').select('a').inE('consult').outV().hasLabel('seller').as('c').select('a', 'b', 'c')"
"返回雇佣person王宏的公司,和这些公司雇佣的person","g.V().has('person', 'name', '王宏').as('a').in('employee').hasLabel('company').as('b').out('employee').as('c').select('b', 'c')"
 找出某人同事的家人或亲戚。,"g.V().has('person', 'name', '何月').outE('colleague').inV().outE('family').inV().outE('family').inV()"
"帮我查询book呐喊knows的book,以及likes这些book的reader, 令book的category等于book的name,令reader的createTime等于book的id的最大值乘7加id, 返回book(a)的createTime,book(b)的category,reader(c)的id","g.V().hasLabel('book').has('name', '呐喊').as('a').outE('knows').inV().hasLabel('book').as('b').inE('likes').outV().hasLabel('reader').as('c').select('a', 'b', 'c').by(project('createTime', 'category').by('createTime').by(values('name'))).by(project('category').by('category')).by(project('id').by('id')).select(values).unfold().project('a.createTime', 'b.category', 'c.id').by(select('a').select('createTime')).by(select('b').select('category')).by(select('c').select('id'))"
"以850,178,545,998,604作为请求点id, 以属性id作为相等条件,查询被person孙强buy的software","g.withSideEffect('p', [850, 178, 545, 998, 604]).V().hasLabel('software').where(__.values('id').is(within('p'))).as('a').in('person_buy_software').hasLabel('person').has('name', '孙强').as('b').select('a', 'b')"
请帮我查找与id为78的处方相关的用户朋友，以及与该用户相关的合作伙伴。,"g.V().has('prescription', 'id', '78').as('a').bothE().otherV().hasLabel('user').as('b').outE('friend').inV().as('c').select('b').outE('partner').inV().as('d').select('a', 'b', 'c', 'd')"
查找重庆大学拥有的部门,"g.V().hasLabel('university').has('name', '重庆大学').as('b').outE('has').as('e').inV().hasLabel('department').as('a').select('a', 'b')"
"调用personalRank函数,以43, 51作为输入,返回运算结果","g.call('PERSONALRANK').with('arg1', 43).with('arg2', 51).project('id', 'value').by(__.select('id')).by(__.select('value'))"
"请帮我找出名为郑梅和郑强的,类型为用户的点公共的朋友节点的名单","g.V().has('user', 'name', '郑梅').outE('friend').inV().as('b').inE('friend').outV().has('user', 'name', '郑强').select('b').values('name')"
"查找和标签为医生的点有属于关系的部门,以及和这些部门有拥有关系的医生,以及和这些医生有创造关系的处方",g.V().hasLabel('doctor').as('a').out('belong').hasLabel('department').as('b').in('has').hasLabel('doctor').as('c').out('creates').hasLabel('prescription').as('d').select('d')
"使用列为salary,id,gender, 数据为(8856,37,'famale'),(1498,92,'famale')的子查询作为输入表, 源点的gender等于输入表gender,查找id为85的点的name,address,size","g.inject([['salary':8856,'id':37,'gender':'famale'],['salary':1498,'id':92,'gender':'famale']]).as('p').unfold().as('p_row').select('p_row').by(__.values('gender')).as('p_gender').V().has('gender', __.where(eq('p_gender'))).has('id', '85').project('name', 'address', 'size').by(__.values('name')).by(__.values('address')).by(__.values('size'))"
"给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));返回被person吴建聪创造的评论","g.V().hasLabel('person').has('name', '吴建聪').outE('person_creates_comment').inV().hasLabel('comment').as('a').select('a').by().as('b').select('a', 'b')"
"请帮我找出类型是company的点,返回31个",g.V().hasLabel('company').limit(31)
"查找仓库FSM 拥有的事项,返回事项 属于的仓库的星数减43的值","g.V().hasLabel('repository').has('name', 'FSM').out('has').as('b').in('belong').hasLabel('repository').as('c').select('c').by(values('stars').is(neq(null))).math('_ - 43')"
返回与病人马强和黄强都存在接受关系的点,"g.V().has('patient', 'name', '马强').outE('accept').inV().as('b').inE('accept').outV().has('patient', 'name', '黄强').select('b')"
请帮我找出与person节点相关的person节点，并按身高和年龄进行分组，然后返回身高和年龄。,"g.V().hasLabel('person').as('a').bothE('knows').otherV().hasLabel('person').as('b').select('b').group().by(values('height', 'age').fold()).by(count())"
"查找全部医生以年龄分组的年龄, 根据年龄从小到大排序",g.V().hasLabel('doctor').group().by('age').select(values).unfold().order().by(asc)
"给出属于公司蚂蚁集团的person,和这些person认识的person","g.V().hasLabel('company').has('name', '蚂蚁集团').inE('belong').outV().as('b').outE('knows').inV().as('c').select('b', 'c')"
"以280,813,911,481,33作为请求点id, 以属性id作为相等条件,查询年龄不是42的person拥有的账号的名称,以及这些账号 转账的账号的名称","g.inject([280, 813, 911, 481, 33]).as('p').V().hasLabel('person').as('a').where('a', eq('p')).by('id').by().has('age', neq(42)).outE('person_own_account').as('e').inV().hasLabel('account').as('b').outE('account_transfer_account').as('e2').inV().hasLabel('account').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
查找所有和person徐红之间有支付关系的person,"g.V().hasLabel('person').has('name', '徐红').outE('pay').inV().hasLabel('person').dedup()"
"返回129个性别等于male或性别不等于male的person,根据薪资升序排列","g.V().hasLabel('person').order().by('salary', asc).limit(129)"
"查找源点area小于等于46668,value大于8293,或area大于62143,目标点name等于华中科技大学且id为954,且类型为contain的边","g.E().hasLabel('contain').where(or(and(outV().has('area', lte(46668)).has('value', gt(8293)), outV().has('area', gt(62143)))).and(inV().has('name', '华中科技大学').has('id', 954)))"
 找出韩红和周思琪的，类型为患者（patient)的共同关系节点。,"g.V().has('patient', 'name', '韩红').outE('relation').inV().as('b').inE('relation').outV().has('patient', 'name', '周思琪').select('b').values('name')"
"查找名为黄科的学生,以及与其有关的教师,并返回黄科的id和这些教师的年龄","g.V().hasLabel('student').has('name', '黄科').as('a').bothE().as('e').otherV().hasLabel('teacher').as('b').select('a', 'b').by('id').by('age')"
"输入表的列为name,id,value, 数据为('西虹市首富',55,155), 以属性id作为相等条件,查找和cinema有关联的film节点,并根据其id,value分组,返回id,value,以及value除230的值","g.withSideEffect('p', [['name': '西虹市首富', 'id': 55, 'value': 155]]).V().hasLabel('cinema').has('id', __.select('p').unfold().select('id')).outE('cinema_releases_film').inV().hasLabel('film').project('id', 'value', 'value_div_230').by(__.select('b').id()).by(__.select('b').values('value')).by(__.select('b').values('value').math('_ / 230')).group().by(__.select('id', 'value').fold()).by(__.select('value_div_230').fold())"
帮我查询所有名为杜雪的节点咨询的卖家或买家或商品,"g.V().has('name', '杜雪').outE('consult').inV().hasLabel(within('seller', 'buyer', 'goods')).dedup()"
 给出医生的伴侣，或伴侣的伴侣。,g.V().hasLabel('doctor').outE('partner').inV().outE('partner').inV().dedup()
"帮我查询person的三角的环,边类型为friend, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('friend').inV().as('b').outE('friend').inV().as('c').where(__.inE('friend').outV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
 UME和横店影院是名为cinema的共同合作伙伴节点。,"g.V().has('cinema', 'name', 'UME').outE('partner').inV().as('b').inE('partner').outV().has('cinema', 'name', '横店影院').select('b').values('name')"
请帮我找出Post_305的partner的partner的关系,"g.V().has('post', 'name', 'Post_305').out('partner').out('partner').out('relation').dedup()"
"给出年龄在35到88之间且名字等于张伟的person喜欢的person的名称,以及这些person 支付的person的名称","g.V().hasLabel('person').has('age', between(35, 88)).has('name', '张伟').out('likes').hasLabel('person').as('b').out('pay').hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"找出110个名为XiaoHu的点transfer的类型为account的节点,且其createTime是2020年07月26日或value为274","g.V().has('name', 'XiaoHu').outE('transfer').inV().hasLabel('account').has('createTime', '2020-07-26').or(has('value', 274)).limit(110)"
帮我查询145个与艺术学院和体育学院都存在关系的student或teacher节点,"g.V().has('name', '艺术学院').outE().inV().hasLabel(within('student', 'teacher')).as('b').inE().outV().has('name', '体育学院').select('b').limit(145)"
"请帮我找出部门拥有的医生,返回其源点的id对27取余的最大值,以及目标点的年龄减26加id的值","g.V().hasLabel('department').as('a').outE('has').as('e').inV().hasLabel('doctor').as('b').project('max_a_id_mod_27', 'b_age_minus_26_plus_id').by(__.select('a').values('id').math('_ % 27').max()).by(__.select('b').math('_.age - 26 + _.id'))"
查询全部和部门文学院之间有拥有关系的学生,"g.V().has('department', 'name', '文学院').out('has').hasLabel('student')"
请帮我查找所有和person黄月之间有认识关系的person,"g.V().has('person', 'name', '黄月').out('knows').hasLabel('person')"
帮我查询全部名为徐国强的点publish的book,"g.V().has('name', '徐国强').outE('publish').inV().hasLabel('book')"
"以384,180,313,510作为请求点id, 源点的id等于输入表id,帮我查询117个value在202到627之间的account,根据createTime从小到大排列","g.inject([384, 180, 313, 510]).unfold().as('p').V().hasLabel('account').has('id', __.where(eq('p'))).has('value', between(202, 627)).order().by('createTime', asc).limit(117)"
" 给出所有与李国强存在同事关系的 people,找出这些人中男性和女性同事的分布情况。","g.V().has('name', '李国强').outE('colleague').inV().hasLabel('person').outE('colleague').inV().hasLabel('person').values('gender')"
 所有起点和终点都是人，且标签为'知道'的边。,g.V().hasLabel('person').outE('knows').where(inV().hasLabel('person'))
"请帮我查找和软件SprintBoot有关的软件,再请帮我查找和SprintBoot使用的其他软件,返回它们","g.V().has('software', 'name', 'SprintBoot').as('a').bothE().otherV().hasLabel('software').as('b').select('a').outE('uses').inV().hasLabel('software').as('c').select('a', 'b', 'c')"
"给出标签等于pullRequest,名为PR-192的点,返回这些点的createTime","g.V().hasLabel('pullRequest').has('name', 'PR-192').values('createTime')"
请帮我查找被comment Comment_456 belong的film,"g.V().hasLabel('comment').has('name', 'Comment_456').outE('belong').inV().hasLabel('film').as('b').select('b').by().as('a').select('a', 'b')"
"给出和person陈轩有支付关系的person,再给出以喜欢关系关联了陈轩的person","g.V().has('person', 'name', '陈轩').as('a').outE('pay').inV().as('b').select('a').inE('likes').outV().as('c').select('a', 'b', 'c')"
查询以关联关系关联了person黄国强的person,"g.V().hasLabel('person').has('name', '黄国强').inE('relates').outV()"
"以(7439,'famale','王思琪')作为请求表数据,属性分别为salary,gender,name, 源点的gender等于输入表gender,帮我查询和person有关联的comment节点,并根据其wordCount,id分组,返回wordCount,id,以及wordCount除949的最大值","g.withSideEffect('p', [['salary': 7439, 'gender': 'famale', 'name': '王思琪']]).V().hasLabel('person').has('gender', __.select('p').unfold().select('gender')).bothE('person_likes_comment').otherV().hasLabel('comment').group().by(union(__.values('wordCount'), __.values('id')).fold()).by(__.values('wordCount').math('_ / 949').max())"
请帮我找到徐建国和Amily共同发布的label为post的节点,"g.V().has('name', '徐建国').outE('publish').inV().hasLabel('post').as('b').inE('publish').outV().has('name', 'Amily').select('b')"
"请帮我找出label为存款,以及满足条件源点id不为空或时间戳等于2009年05月14日,且f1不是true的边","g.E().hasLabel('deposit').and(has('srcId', neq(null)).or().has('timeStamp', '2009-05-14')).has('f1', neq(true))"
"查找全部person以薪资分组的身高, 根据身高从小到大排序","g.V().hasLabel('person').group().by('salary').by(values('height').fold()).order(local).by(values, asc)"
 找出包含帖子Post_125的论坛。,"g.V().hasLabel('post').has('name', 'Post_125').inE('contain').outV().hasLabel('forum')"
"查找127个名为kate的点教的标签等于课程的节点,且其价值大于等于223或课时是49","g.V().has('name', 'kate').outE('teach').inV().hasLabel('course').or(has('value', gte(223)), has('courseHour', 49)).limit(127)"
"以763,625作为请求点id, 源点的id等于输入表id,请帮我查找名为中国诗词论坛的点contain的person","g.withSideEffect('p', [763, 625]).V().where(and(__.id().is(within('p')), __.values('name').is('中国诗词论坛'))).outE('forum_contain_person').inV().hasLabel('person')"
找出前158个类型是拥有的边,g.E().hasLabel('has').limit(158)
请帮我查找以使用关系关联了软件Hive的软件,"g.V().hasLabel('software').has('name', 'Hive').inE('uses').outV().hasLabel('software')"
"查找所有和名为黄思琪的读者有伙伴关系,或有伙伴的伙伴关系的书","g.V().hasLabel('reader').has('name', '黄思琪').repeat(out('partner')).times(2).hasLabel('book').dedup()"
"请帮我查找person何雪关联的person,被其他person认识的数量","g.V().hasLabel('person').has('name', '何雪').outE('relates').inV().hasLabel('person').inE('knows').outV().hasLabel('person').count()"
"请帮我找出城市天津的所有类型为朋友的边,并根据源点id从小到大排列,返回80个","g.V().has('city', 'name', '天津').outE('friend').order().by('srcId', asc).limit(80).inV()"
 请帮我查询一下，哪些国家的城市包含有大学，以及这些城市分别是哪几个。,"g.V().hasLabel('country').has('id', neq(null)).out('contain').hasLabel('city').as('b').out('contain').hasLabel('university').as('c').select('b', 'c').by('name').by('name')"
查询与person何建聪和王思思都存在认识关系的点,"g.V().has('person', 'name', '何建聪').out('knows').as('b').in('knows').has('person', 'name', '王思思').select('b')"
 查找与两个人都有关系的69个book节点。,"g.V().has('name', '王思思').outE().inV().hasLabel('book').as('b').inE().outV().has('name', '吴建聪').select('b').limit(69)"
"用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询标签为book,名为白夜行的点,返回这些点的name,name","g.V().hasLabel('book').has('name', '白夜行').project('a.name', 'a.name').by('name').by('name')"
"请帮我查找和person点有knows关系的person节点,且边满足条件weight在128.06到178.28之间,目标person节点id小于44","g.V().hasLabel('person').as('a').outE('knows').has('weight', between(128.06, 178.28)).as('e').inV().hasLabel('person').has('id', lt(44)).as('b').select('b')"
 找出南京大学和浙江大学的朋友，共有188个。,"g.V().has('university', 'name', '南京大学').out('friend').as('b').in('friend').has('university', 'name', '浙江大学').select('b').limit(188)"
"用如下schema的图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询名为周宏和孙轩的,标签等于buyer的点公共的partner节点的名单","g.V().has('buyer', 'name', '周宏').out('partner').as('b').in('partner').has('buyer', 'name', '孙轩').select('b').values('name')"
"以204,943,701,217,781作为请求点id, 源点的id等于输入表id,请帮我查找65个名为孙思琪的点诊断的类型为病人的节点,且其id为空且id大于等于5","g.inject([204, 943, 701, 217, 781]).as('p').unfold().as('id').V().has('id', __.as('id')).has('name', '孙思琪').outE('doctor_diagnose_patient').inV().hasLabel('patient').has('id', null).has('id', P.gte(5)).limit(65)"
"帮我查询119个国家美国和日本,共同的伙伴","g.V().has('country', 'name', '美国').outE('partner').inV().as('b').inE('partner').outV().has('country', 'name', '日本').select('b').limit(119)"
"请帮我找出id为49的city belong的country, 并将country有关的company的peopleNumber的求和值赋值给country的peopleNumber, 接着查询country的peopleNumber小于49的country contain的city","g.V().has('city', 'id', 49).out('belong').hasLabel('country').as('b').sideEffect(select('b').sack(assign).by(constant(0)).sack(sum).by(__.in().hasLabel('company').values('peopleNumber').sum()).property('peopleNumber', sack())).filter(select('b').values('peopleNumber').is(lt(49))).out('contain').hasLabel('city').as('d').select('b', 'd').by('peopleNumber').by()"
请帮我查询所有源点为person且边类型为knows的边，返回这些边的srcId加上64以及f0减去865的结果。,"g.V().hasLabel('person').outE('knows').project('srcId_plus_64', 'f0_minus_865').by(values('srcId').math('_ + 64')).by(values('f0').math('_ - 865'))"
"帮我查询所有源点类型为部门,边类型为拥有的边,返回这些边的weight的最小值对143.06取余的值,和targetId的数量除12的平均值","g.V().hasLabel('department').outE('has').project('min_weight_mod', 'avg_count_div_12').by(values('weight').min().math('_ % 143.06')).by(outV().outE('has').values('targetId').count().math('_ / 12').mean())"
 请帮我查询星际穿越的标签，并查询星际穿越在哪些电影院上映，然后把结果一起告诉我。,"g.V().has('name', '星际穿越').as('a').outE('has').inV().hasLabel('tag').as('b').select('a').inE('releases').outV().hasLabel('cinema').as('c').select('a', 'b', 'c')"
"以(58,'古代',117),(94,'科幻',889)作为请求表数据,属性分别为id,name,value, 源点的id等于输入表id,查询id为59的标签有关的person的伙伴, 再查询和person有关系的朋友","g.inject([['id':58,'name':'古代','value':117],['id':94,'name':'科幻','value':889]]).as('p').unfold().as('p_row').select('p_row').by(__.project('id','name','value').by(__.select('id')).by(__.select('name')).by(__.select('value'))).V().hasLabel('tag').has('id', __.where(__.select('p_row').select('id')).where(__.has('id', '59'))).as('a').bothE().as('e').otherV().hasLabel('person').as('b').outE('partner').as('e2').inV().as('c').select('b').outE('friend').as('e3').inV().as('d').select('a','b','c','d')"
"返回id为166的点的身高,名字,年龄","g.V().has('id', 166).project('height', 'name', 'age').by(values('height')).by(values('name')).by(values('age'))"
"请帮我查找comment Comment_414 belong的film,以及releases这些film的cinema","g.V().hasLabel('comment').has('name', 'Comment_414').outE('belong').inV().hasLabel('film').as('b').inE('releases').outV().hasLabel('cinema').as('c').select('b', 'c')"
"以(94,'famale','吴红'),(82,'famale','徐若涵'),(51,'male','马若涵'),(91,'famale','陈思琪')作为请求表数据,属性分别为id,gender,name, 源点的id等于输入表id,返回用户张伟的全部标签为相关者的边,并根据f0从小到大排列,返回181个","g.withSideEffect('p', [['id':94, 'gender':'famale', 'name':'吴红'], ['id':82, 'gender':'famale', 'name':'徐若涵'], ['id':51, 'gender':'male', 'name':'马若涵'], ['id':91, 'gender':'famale', 'name':'陈思琪']]).V().hasLabel('user').where(__.in('p').has('id', __.select('p').unfold().select('id')).has('name', '张伟')).outE('relation').order().by('f0', asc).limit(181).inV()"
 找出买家郑宏取消的订单和买家黄雪查看的货物，返回它们。,"g.V().hasLabel('buyer').has('name', '郑宏').as('a').outE('cancel').inV().hasLabel('orders').as('b').select('a').V().hasLabel('buyer').has('name', '黄雪').as('c').outE('look').inV().hasLabel('goods').as('d').select('a', 'b', 'c', 'd')"
 找出认识孙思琪的人。,"g.V().hasLabel('person').has('name', '孙思琪').as('b').inE('knows').as('e').outV().as('a').select('a', 'b')"
 请问能否帮我查找与好视影院有关，且标签为文艺的电影？,"g.V().hasLabel('cinema').has('name', '好视影院').outE('releases').inV().hasLabel('film').as('b').outE('has').inV().hasLabel('tag').has('name', '文艺').select('b')"
"使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找68个与BIN和Geaflow123都存在关系的person节点","g.V().has('name', 'BIN').outE().inV().hasLabel('person').as('b').inE().outV().has('name', 'Geaflow123').select('b').limit(68)"
获取Comment_499belong的film节点的tag,"g.V().hasLabel('comment').has('name', 'Comment_499').out('belong').hasLabel('film').out('has').hasLabel('tag')"
 请帮我找出所有编辑的同事，或者同事的同事。,g.V().hasLabel('publisher').outE('partner').inV().hasLabel('publisher').path().by('id').by('id').limit(2).select('b')
请帮我找出薪资不为空且在1771到2034之间的医生所在的部门及其医生姓名,"g.V().hasLabel('doctor').has('salary', neq(null)).or(has('salary', between(1771, 2034))).as('a').outE('belong').as('e').inV().hasLabel('department').as('b').outE('has').as('e2').inV().hasLabel('doctor').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"根据地址,id分组,计算权重减501的值",g.V().hasLabel('a').group().by('address').by(group().by('id').by(values('weight').math('_ - 501')))
按年龄分组医生的薪水，然后按照薪水升序排序。,"g.V().hasLabel('doctor').group().by('age').by(values('salary').fold()).order(local).by(values, asc)"
"使用列为name,height,gender, 数据为('周月',153,'famale'),('何宏',181,'male'),('黄月',164,'famale')的子查询作为输入表, 以属性gender作为相等条件,请帮我查找以包含关系关联了药品阿莫新林的处方","g.inject([['周月',153,'famale'],['何宏',181,'male'],['黄月',164,'famale']]).as('p').V().hasLabel('medicine').has('name','阿莫新林').as('a').where(__.select('p').unfold().as('row').select('a').values('gender').where(eq('row')).by(tail(local))).in('prescription_contain_medicine').hasLabel('prescription').as('b').select('b')"
"以574,15,831作为请求点id, 以属性id作为相等条件,查找8个与其他和动作都存在关系的论坛节点","g.inject([574, 15, 831]).unfold().as('p').V().has('id', __.where(eq('p'))).has('name', '其他').as('a').outE().as('e').inV().hasLabel('forum').as('b').inE().as('e2').outV().has('name', '动作').as('c').select('b').limit(8)"
 查询与公司ID为139的账户有合作的伙伴，再查询与账户有关系的联系人。,"g.V().has('company', 'id', '139').as('a').bothE().otherV().hasLabel('account').as('b').bothE('partner').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
"请帮我找出类型为标签的点,返回121个",g.V().hasLabel('tag').limit(121)
返回75个与徐月和李思琪都存在关系的卖家或买家节点,"g.V().has('name', '徐月').as('a').outE().as('e').inV().hasLabel(within('seller', 'buyer')).as('b').inE().as('e2').outV().has('name', '李思琪').as('c').select('b').limit(75)"
"找出与作家吴梅有关,且与书悲惨世界有关系的书节点","g.V().has('author', 'name', '吴梅').out('write').as('b').in('refers').has('book', 'name', '悲惨世界').select('b')"
"查询和电影院横店影院有上映关系的电影,再查询以上映关系关联了横店影院的电影","g.V().has('cinema', 'name', '横店影院').as('a').outE('releases').inV().hasLabel('film').as('b').select('a').inE('releases').outV().hasLabel('film').as('c').select('a', 'b', 'c')"
"查找事项的三角的环,边label为属于, 并返回这些点的id","g.V().hasLabel('issue').as('a').out('belong').as('b').out('belong').as('c').where('a', eq('c')).by(T.id).select('a', 'b', 'c').by().by(T.id).by(T.id).project('a', 'b_id', 'c_id').by().by(select('b')).by(select('c'))"
"查询源点年龄小于56,边标签等于发布,且f0是589,targetId的最大值减52的最小值小于176.82,或权重为空的边,返回这些边的权重对权重取余的平均值","g.V().has('age', lt(56)).outE('publish').where(or(and(has('f0', 589), project('maxTargetId').by(values('targetId').max()).math('maxTargetId - 52').min().is(lt(176.82))), not(values('weight')))).values('weight').math('_ / _ * _ - _').mean()"
"请帮我查找与person周雪有关,且与person徐思思有关系的person节点","g.V().has('person', 'name', '周雪').as('a').bothE('lover').otherV().hasLabel('person').as('b').bothE('colleague').otherV().has('person', 'name', '徐思思').select('b')"
请帮我查找与公司美团和滴滴都存在雇佣关系的点,"g.V().has('company', 'name', '美团').outE('employee').inV().as('b').inE('employee').outV().has('company', 'name', '滴滴').select('b').dedup()"
"以'ya', 84, 3作为输入调用KHOP函数,返回id, kValue","g.call(""KHOP"").with(""arg0"", ""ya"").with(""arg1"", 84).with(""arg2"", 3).select(""id"", ""kValue"")"
"输入请求点id的列表754,879,814,679, 源点的id等于输入表id,请帮我查找以knows关系关联了author黄建国的author","g.inject([754, 879, 814, 679]).unfold().as('p').V().hasLabel('author').has('id', __.select('p')).has('name', '黄建国').in('author_knows_author').as('b').select('b')"
"查找名为郑强的教师,以及与其有关的教师,并返回郑强的身高和这些教师的性别","g.V().has('teacher', 'name', '郑强').as('a').bothE().otherV().hasLabel('teacher').as('b').select('a', 'b').by('height').by('gender')"
"返回用户马雪的所有伙伴,的f0的和乘f0的个数","g.V().has('user', 'name', '马雪').outE('partner').as('e').inV().select('e').values('f0').sum().sack(assign).by(constant(1L)).sum().sack(mult).by(sack()).sack()"
"找出被person马伟invest的company,和马伟apply的loan","g.V().hasLabel('person').has('name', '马伟').as('b').outE('invest').as('e').inV().hasLabel('company').as('a').select('b').outE('apply').as('e2').inV().hasLabel('loan').as('c').select('a', 'b', 'c')"
请帮我找出166个与马红和陈月都存在关系的person节点,"g.V().has('name', '马红').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '陈月').select('b').limit(166)"
"查询全部公司以id,名字分组的价值, 根据价值升序排序","g.V().hasLabel('company').group().by(project('id', 'name').by('id').by('name')).by(values('value').fold()).order(local).by(values, asc)"
"返回所有id为150的prescription关联的patient,和以diagnose关系关联了这些patient的其他doctor","g.V().hasLabel('prescription').has('id', 150).bothE().otherV().hasLabel('patient').as('b').inE('diagnose').otherV().hasLabel('doctor').as('c').select('b', 'c')"
请帮我找出所有标有'神探狄仁杰'标签的点，以及观看过这个节目的人。,"g.V().has('name', '神探狄仁杰').as('a').outE('has').inV().hasLabel('tag').as('b').select('a').inE('watch').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"输入请求点id的列表222,641,231,178,983, 以属性id作为相等条件,请帮我查找和person徐红有关的person,称为X,再请帮我查找和这个X有关联的其他person,以及和X有关联的person","g.withSideEffect('p', [222, 641, 231, 178, 983]).V().hasLabel('person').where(and(__.has('id', within('p')), __.has('name', '徐红'))).as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"查找前144个满足条件上次登录时间不是2005年04月25日或是否冻结不等于false,且价值不是714的账号","g.V().hasLabel('account').and(has('lastLoginTime', neq('2005-04-25')).or().has('isBlock', neq(false))).has('value', neq(714)).limit(144)"
"请帮我查找名为呐喊的publisher或book或reader,以及与其有关的publisher,并返回呐喊的id和这些publisher的gender","g.V().has(label, within('publisher', 'book', 'reader')).has('name', '呐喊').bothE().otherV().has(label, 'publisher').project('a_id', 'b_gender').by(select(all, 'a').id()).by(select(all, 'b').values('gender'))"
 返回与教师陈宏有联系的部门。,"g.V().has('teacher', 'name', '陈宏').in('has').hasLabel('department')"
"给出所有源点类型是person,边类型是likes,以及f1不是false且f0大于562,或targetId除targetId小于等于931的边","g.V().hasLabel('person').outE('likes').where(or(and(has('f1', neq(false)), has('f0', gt(562))), math('targetId / targetId').is(lte(931)))).select('e')"
"返回id为132的用户喜欢的仓库, 并将仓库有关的合并请求的id的最大值赋值给仓库的id, 接着查询仓库的id小于132的仓库拥有的用户","g.V().has('user', 'id', 132).out('likes').hasLabel('repository').as('b').sideEffect(__.inE().hasLabel('likes').outV().hasLabel('pullRequest').values('id').max().store('b_id')).select('b').has('id', lt(132)).out('has').hasLabel('user').as('d').select('b', 'd').by('id').by()"
帮我查询和teacher王思思之间有teach关系的course,"g.V().hasLabel('teacher').has('name', '王思思').outE('teach').inV().hasLabel('course')"
 请帮我查找与作家类型相关的书籍，并找出与这些书籍有引用关系的其他书籍。,g.V().hasLabel('author').as('a').outE('write').inV().hasLabel('book').as('b').outE('refers').inV().hasLabel('book').as('c').outE('refers').inV().hasLabel('book').as('d').select('d')
请帮我查找153个与香蕉和苹果都存在关系的orders节点,"g.V().has('name', '香蕉').outE().inV().hasLabel('orders').as('b').inE().outV().has('name', '苹果').select('b').limit(153)"
 返回马轩和黄伟共同存在的同事。,"g.V().has('person', 'name', '马轩').as('a').outE('colleague').inV().as('b').inE('colleague').outV().has('person', 'name', '黄伟').as('c').select('b').dedup()"
查找83个与孙国强和周思思都存在关系的person节点,"g.V().has('name', '孙国强').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '周思思').select('b').limit(83)"
"请帮我查找person关联的person,返回其源点的年龄减47除157减31对id取余的个数,以及目标点的薪资加薪资减年龄的值","g.V().hasLabel('person').as('a').outE('relates').as('e').inV().hasLabel('person').as('b').project('expr1', 'expr2').by(__.select('a').values('age').math('(_ - 47) / 157 - 31 % ').by(__.select('a').values('id')).count()).by(__.select('b').values('salary').math('_ + _ - ').by(__.select('b').values('age')))"
"返回被person吴强knows的person,和吴强pay的person","g.V().hasLabel('person').has('name', '吴强').as('b').outE('knows').inV().hasLabel('person').as('a').select('b').outE('pay').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
"返回前151个满足条件value是699且scale是small,或peopleNumber大于等于92的company","g.V().hasLabel('company').or(has('value', 699).has('scale', 'small'), has('peopleNumber', gte(92))).limit(151)"
查找和作家何轩之间有认识关系的作家,"g.V().has('author', 'name', '何轩').out('knows').hasLabel('author')"
"以610,391,848,350作为请求点id, 以属性id作为相等条件,请帮我查找全部源点类型是person,边类型是person_creates_comment的边,返回这些边的srcId减43的值,和targetId的最大值对186取余的值","g.inject([610, 391, 848, 350]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).outE('person_creates_comment').as('e').select('e').project('expr1', 'expr2').by(__.values('srcId').math('_ - 43')).by(__.values('targetId').fold().math('_ max').math('_ % 186'))"
"输入请求点id的列表833,479,842, 以属性id作为相等条件,查询与person黄雪和王国强都存在person_family_person关系的点","g.inject([833, 479, 842]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('name', '黄雪').as('a').outE('person_family_person').as('e').inV().as('b').inE('person_family_person').as('e2').outV().hasLabel('person').has('name', '王国强').as('c').select('b').dedup()"
"输入请求点id的列表488,999,195,121, 源点的id等于输入表id,帮我查询39个医生吴雪和Bob,共同的相关者","g.inject([488, 999, 195, 121]).as('p').flatMap(select('p').unfold().as('id')).V().hasLabel('doctor').as('a').where(and(__.values('id').as('a_id').where(eq('id')), __.has('name', '吴雪'))).outE('relation').as('e').inV().as('b').inE('relation').as('e2').outV().as('c').hasLabel('doctor').has('name', 'Bob').select('b').limit(39)"
"以2, 52作为输入调用personalRank函数,返回运算结果","g.call('PERSONALRANK').with('input1', 2).with('input2', 52).select('id', 'value')"
"用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出university北京大学的所有标签为relation的边,并根据f0从小到大排列,返回79个","g.V().has('university', 'name', '北京大学').outE('relation').order().by('f0', asc).limit(79).inV()"
找出与孙思思和何建国都认识的点,"g.V().has('person', 'name', '孙思思').outE('knows').inV().as('b').inE('knows').outV().has('person', 'name', '何建国').select('b')"
"输入请求点id的列表645,696,622,874, 以属性id作为相等条件,返回全部源点类型是reader,边类型是reader_likes_book,以及满足条件f0不为空的边","g.inject([645, 696, 622, 874]).unfold().as('p').V().hasLabel('reader').has('id', __.as('p')).outE('reader_likes_book').has('f0', neq(null)).as('e').select('e')"
请帮我找出所有名为ISSUE-374的点属于的仓库,"g.V().has('name', 'ISSUE-374').outE('belong').inV().hasLabel('repository')"
"输入请求点id的列表19,974,757,284,993, 以属性id作为相等条件,返回98个编辑郑思琪和Bob,共同的朋友","g.withSideEffect('p', [19, 974, 757, 284, 993]).V().has('publisher', 'id', within('p')).has('name', '郑思琪').as('a').outE('friend').inV().as('b').inE('friend').outV().has('publisher', 'name', 'Bob').select('b').limit(98)"
"根据id,价值分组,计算id加14的最大值","g.V().hasLabel('a').group().by(union(values('id'), values('value')).fold()).by(values('id').math('_ + 14').max())"
"查询所有名为横店影院的,category不是悬疑的partner,返回这些partner的category,和边的f1","g.V().has('name', '横店影院').outE('partner').as('e').inV().has('category', neq('悬疑')).as('b').select('b', 'e').by(values('category')).by(values('f1'))"
 返回与王月有has关系的department。,"g.V().hasLabel('student').has('name', '王月').inE('has').outV().hasLabel('department')"
找出与person王国强和赵强都存在家人关系的点,"g.V().has('person', 'name', '王国强').outE('family').inV().as('b').inE('family').outV().has('person', 'name', '赵强').select('b')"
请帮我找出名为赵伟的节点诊断的处方或部门或病人,"g.V().has('name', '赵伟').outE('diagnose').inV().hasLabel(within('prescription', 'department', 'patient')).dedup()"
 请帮我查找与南京大学有关的公司，并查找与南京大学有合作的其他公司，返回它们。,"g.V().has('university', 'name', '南京大学').as('a').bothE().otherV().hasLabel('company').as('b').select('a').bothE('cooperate').otherV().hasLabel('company').as('c').select('a', 'b', 'c')"
"查询和seller吴若涵有关的orders,称为X,再查询和这个X有关联的其他goods,以及和X有关联的buyer","g.V().has('seller', 'name', '吴若涵').as('a').bothE().otherV().hasLabel('orders').as('b').bothE().otherV().hasLabel('goods').as('c').select('b').bothE().otherV().hasLabel('buyer').as('d').select('a', 'b', 'c', 'd')"
"返回全部person以salary,gender,height分组的age, 根据age升序排序","g.V().hasLabel('person').group().by(values('salary', 'gender', 'height').fold()).by(values('age').fold()).order(local).by(values('age').unfold().min(), asc)"
找出与电影院好视影院有上映关系的2跳的环,"g.V().has('cinema', 'name', '好视影院').as('a').repeat(bothE().otherV().simplePath()).times(2).where(cyclicPath()).where(eq('a')).project('a.id', 'b_id').by(select('a').id()).by(id())"
"查找所有源点标签为教师,目标点标签为课程,标签为大学或部门或课程的边","g.V().hasLabel('teacher').outE('university', 'department', 'course').as('e').inV().hasLabel('course').select('e')"
"找出喜欢评论Comment_385的person,和这些person创造的评论","g.V().hasLabel('comment').has('name', 'Comment_385').as('a').in('likes').hasLabel('person').as('b').out('creates').hasLabel('comment').as('c').select('b', 'c')"
请帮我查找与我所在的部门有联系的医生，以及那些与这些医生有关联的其他部门。,"g.V().has('department', 'id', '173').bothE().otherV().hasLabel('doctor').as('b').inE('has').outV().hasLabel('department').as('c').select('b', 'c')"
"查找80个名为郑建聪的点支付的label为person的节点,且其年龄小于54,身高不等于191","g.V().has('name', '郑建聪').outE('pay').inV().hasLabel('person').has('age', lt(54)).has('height', neq(191)).limit(80)"
"找出全部和作家陈红有关系的作家,返回这些点的id","g.V().has('author', 'name', '陈红').bothE().otherV().hasLabel('author').id()"
找出person Jimmy认识的person节点支付的person,"g.V().hasLabel('person').has('name', 'Jimmy').out('knows').hasLabel('person').out('pay').hasLabel('person')"
"给出全部和名为吴梅的买家有伙伴关系,或有伙伴的伙伴关系的卖家","g.V().has('buyer', 'name', '吴梅').repeat(out('partner')).times(2).hasLabel('seller').dedup()"
"查找id为90的点的createTime,name,weight","g.V().has('id', 90).project('createTime', 'name', 'weight').by('createTime').by('name').by('weight')"
"以42,130作为请求点id, 以属性id作为相等条件,给出全部标签为reader的点","g.inject([42, 130]).unfold().as('p').V().hasLabel('reader').has('id', __.select('p')).dedup()"
 请帮我找出与读者陈建国有关，并且与计算机网络有关的书。,"g.V().has('reader', 'name', '陈建国').bothE('likes').otherV().hasLabel('book').bothE('refers').otherV().has('book', 'name', '计算机网络').path().unfold().hasLabel('book').dedup()"
查找所有标签等于论坛或用户的点,"g.V().hasLabel(within('forum', 'user'))"
返回被person韩月认识的person,"g.V().has('person', 'name', '韩月').as('b').outE('knows').as('e').inV().as('a').select('a', 'b')"
"请帮我查找id为79的标签有关的person的朋友, 再请帮我查找和person有关系的朋友","g.V().has('tag', 'id', 79).as('a').bothE().otherV().hasLabel('person').as('b').bothE('friend').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
 找出人名徐若涵的所有点，并返回这些点的id和性别。,"g.V().hasLabel('person').has('name', '徐若涵').project('a.id', 'a.gender').by('id').by('gender')"
"输入表的列为id,createTime,name, 数据为(56,2028-11-06,'Comment_330'),(60,2026-02-01,'Comment_274'),(38,2017-10-05,'Comment_496'),(39,2017-03-15,'Comment_396'), 以属性createTime作为相等条件,找出id为162的点的字数","g.inject([['id':56,'createTime':'2028-11-06','name':'Comment_330'],['id':60,'createTime':'2026-02-01','name':'Comment_274'],['id':38,'createTime':'2017-10-05','name':'Comment_496'],['id':39,'createTime':'2017-03-15','name':'Comment_396']]).as('p').V().has('createTime', within(select('p').unfold().values('createTime'))).has('id', '162').values('wordCount')"
找出杜梅和赵建聪共同的朋友列表，这些朋友的label是person。,"g.V().has('person', 'name', '杜梅').out('friend').as('b').in('friend').has('person', 'name', '赵建聪').select('b').values('name')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出所有person以年龄分组的身高, 根据身高从小到大排序","g.V().hasLabel('person').group().by('age').by(values('height').fold()).order(local).by(values, asc)"
"请帮我找出所有源点类型为城市,边类型为包含,并且权重的数量大于183,f1为false的边","g.V().hasLabel('city').outE('contain').has('f1', false).where(values('weight').count().is(gt(183))).dedup()"
"帮我查询类型是标签,名为科幻的点,返回这些点的名字","g.V().hasLabel('tag').has('name', '科幻').values('name')"
"给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));找出全部cinema的partner,或其partner的partner","g.V().hasLabel('cinema').as('a').outE('partner').as('e').inV().as('b').select('b').union(__.identity(), __.outE('partner').inV()).dedup()"
"输入请求点id的列表304,490,156, 以属性id作为相等条件,给出所有id为50的订单关联的卖家,和以咨询关系关联了这些卖家的其他买家","g.withSideEffect('p', [304, 490, 156]).V().hasLabel('orders').where(__.values('id').is(within('p')).and(__.values('id').is(eq('50')))).bothE().otherV().hasLabel('seller').as('b').in('buyer_consult_seller').hasLabel('buyer').as('c').select('b', 'c')"
请帮我找出与63个类型为company的点有belong关系的城市，以及这些城市中有contain关系的大学。,g.V().hasLabel('company').as('a').out('belong').hasLabel('city').as('b').out('contain').hasLabel('university').as('c').select('c').limit(63)
找出和韩宏、周梅都有关系的用户，并返回他们的身高,"g.V().has('user', 'name', '韩宏').outE().inV().hasLabel('user').as('b').inE().outV().has('user', 'name', '周梅').select('b').values('height')"
帮我查询以包含关系关联了用户马思思的论坛,"g.V().hasLabel('user').has('name', '马思思').inE('contain').outV().hasLabel('forum')"
 找出与电影我不是药神有关且与评论Comment_145有关的电影节点，并返回它们的类别。,"g.V().has('film', 'name', '我不是药神').outE().inV().hasLabel('film').as('b').inE().outV().has('comment', 'name', 'Comment_145').select('b').values('category')"
 查找MySQL使用的软件。,"g.V().hasLabel('software').has('name', 'Mysql').as('b').outE('uses').inV().as('a').select('a', 'b')"
 请帮我查询张国强和何红之间是否存在接受关系。,"g.V().has('patient', 'name', '张国强').outE('accept').inV().as('b').inE('accept').outV().has('patient', 'name', '何红').select('b')"
"查询和post Post_245有has关系的tag,再查询以has关系关联了Post_245的tag","g.V().hasLabel('post').has('name', 'Post_245').as('a').bothE('has').otherV().hasLabel('tag').as('b', 'c').select('a', 'b', 'c')"
"请帮我查找与张梅存在likes关系的comment,comment与film存在belong关系的点,返回这些点的category","g.V().has('name', '张梅').out('likes').hasLabel('comment').out('belong').hasLabel('film').values('category')"
"请帮我查找全部和处方Prescription_425有关系的病人或处方,返回这些点的名字,年龄,身高","g.V().has('prescription', 'name', 'Prescription_425').bothE().otherV().hasLabel(within('patient', 'prescription')).project('name', 'age', 'height').by(values('name')).by(values('age')).by(values('height'))"
 查询与Bob和何轩有关联的人，返回他们的姓名和薪资。,"g.V().has('person', 'name', 'Bob').outE().inV().hasLabel('person').as('b').inE().outV().has('person', 'name', '何轩').select('b').values('name', 'salary')"
"查找belong film少年足球的comment,和这些comment belong的film","g.V().hasLabel('film').has('name', '少年足球').in('belong').as('b').out('belong').as('c').select('b', 'c')"
"给出与department文学院存在has关系,且与course马克思原理存在teach关系的teacher节点，返回这些teacher的height,id,salary,及department文学院的id,及course马克思原理的id","g.V().has('department', 'name', '文学院').as('a').out('has').hasLabel('teacher').as('b').in('teach').has('course', 'name', '马克思原理').as('c').select('a', 'b', 'c').by('id').by(values('height', 'id', 'salary')).by('id')"
"使用列为salary,age,gender, 数据为(4128,34,'famale'),(5784,49,'famale'),(9377,37,'famale'),(4564,93,'famale')的子查询作为输入表, 以属性salary作为相等条件,请帮我查找全部标签为公司的点","g.inject([['salary':4128,'age':34,'gender':'famale'],['salary':5784,'age':49,'gender':'famale'],['salary':9377,'age':37,'gender':'famale'],['salary':4564,'age':93,'gender':'famale']]).as('p').flatMap(select('p')).unfold().as('row').select(values).as('salaryVal').select('salaryVal').by(select(keys).by().limit(local, 1)).V().hasLabel('company').as('a').where(eq('a')).by('salary').by(select('salaryVal')).select('a')"
请帮我查找与美团公司和账号Geaflow123相关的贷款记录,"g.V().hasLabel('company').has('name', '美团').bothE('apply').otherV().hasLabel('loan').bothE('deposit').otherV().hasLabel('account').has('name', 'Geaflow123').select('b')"
"帮我查询耳鼻喉科的点拥有的医生,然后帮我查询耳鼻喉科被属于的医生,一起返回","g.V().has('name', '耳鼻喉科').as('a').outE('has').inV().hasLabel('doctor').as('b').select('a').inE('belong').outV().hasLabel('doctor').as('c').select('a', 'b', 'c')"
"请帮我查找名为布洛芬的药品,以及与其有关的部门,并返回布洛芬的名字和这些部门的名字","g.V().hasLabel('medicine').has('name', '布洛芬').as('a').bothE().as('e').otherV().hasLabel('department').as('b').select('a', 'b').by('name').by('name')"
 找出所有源点类型为账号，目标点类型为账号，且类型为转账的边。,g.V().hasLabel('account').outE('transfer').where(inV().hasLabel('account'))
请帮我找出与person节点相关的person节点，按照薪资和id进行分组，并返回薪资和id。,"g.V().hasLabel('person').as('a').bothE('parent').otherV().hasLabel('person').as('b').select('b').values('salary', 'id').group().by().by(fold())"
返回以has关系关联了tag喜剧的post,"g.V().hasLabel('tag').has('name', '喜剧').in('has').hasLabel('post')"
"帮我查询学生的相关者,或其相关者的相关者",g.V().hasLabel('student').outE('relation').inV().outE('relation').inV().dedup()
"用这个schema:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出标签为forum_contain_post,并且满足条件f1不等于true的边","g.E().hasLabel('forum_contain_post').has('f1', neq(true))"
"返回城市杭州包含的公司,被其他大学合作的数量","g.V().has('city', 'name', '杭州').out('contain').as('b').in('cooperate').hasLabel('university').as('c').select('c').count()"
"用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));找出与部门文学院存在department_has_student关系,且与课程计算机体系结构存在student_selects_course关系的学生节点，返回这些学生的性别,及部门文学院的名字,及课程计算机体系结构的学分","g.V().has('department', 'name', '文学院').as('a').outE('department_has_student').inV().hasLabel('student').as('b').inE('student_selects_course').outV().has('course', 'name', '计算机体系结构').as('c').select('a', 'b', 'c').by('name').by('gender').by('credit')"
返回与艺术学院有隶属关系的学生，以及由教师陈强授课的所有课程。,"g.V().has('department', 'name', '艺术学院').as('a').out('has').as('b').select('a').V().has('teacher', 'name', '陈强').as('c').out('teach').as('d').select('a', 'b', 'c', 'd')"
 查询与处方384和312有关的143个用户节点。,"g.V().has('name', 'Prescription_384').outE().inV().hasLabel('user').as('b').inE().outV().has('name', 'Prescription_312').select('b').limit(143)"
找出以拥有关系关联了商品短袖的卖家,"g.V().hasLabel('goods').has('name', '短袖').inE('has').outV().hasLabel('seller')"
"给出被buyer creates数量大于53的orders,记为relationCount,再查询这些orders creates的seller","g.V().hasLabel('orders').as('a').project('a', 'relationCount').by(identity()).by(__.in('creates').hasLabel('buyer').id().count()).select('a', 'relationCount').as('pair').select('relationCount').is(gt(53)).select('pair').select('a').out('creates').hasLabel('seller').dedup()"
"找出pullRequest PR-182 belong的repository,以及belong这些repository的issue, 令issue的createTime等于repository的createTime,令issue的lang等于repository的weight对weight取余, 返回pullRequest的id,repository的stars,issue的weight","g.V().hasLabel('pullRequest').has('name', 'PR-182').as('a').outE('belong').inV().hasLabel('repository').as('b').inE('belong').outV().hasLabel('issue').as('c').sideEffect(select('c').property('createTime', select('b').values('createTime'))).sideEffect(select('c').property('lang', select('b').values('weight').math('_ % _'))).select('a', 'b', 'c').by('id').by('stars').by('weight')"
请帮我找出与电影《西虹市首富》和人物何红有关的电影节点，包括它们的价值、ID和类别。,"g.V().has('film', 'name', '西虹市首富').outE().inV().hasLabel('film').as('b').inE().outV().has('person', 'name', '何红').select('b').project('value', 'id', 'category').by(values('value')).by(values('id')).by(values('category'))"
"返回全部部门的相关者,或其相关者的相关者",g.V().hasLabel('department').outE('relation').inV().hasLabel('department').outE('relation').inV().hasLabel('department').dedup()
"请帮我找出全部id为22的软件关联的公司,和以属于关系关联了这些公司的其他person","g.V().has('software', 'id', 22).bothE().otherV().hasLabel('company').as('b').inE('belong').otherV().hasLabel('person').as('c').select('b', 'c')"
请帮我找出所有与作者周红有关或者与周红有关的作者,"g.V().has('author', 'name', '周红').outE('relation').inV().hasLabel('author').dedup()"
"根据名字,id分组,计算value的个数除345的值","g.V().hasLabel('a').group().by('name').by('id').by(count().by('value')).select(values).unfold().project('name', 'id', 'result').by(select(keys).select('name')).by(select(keys).select('id')).by(math('_ / 345'))"
"帮我查询论坛的三角的环,边类型是包含, 并返回这些点的id","g.V().hasLabel('forum').as('a').outE('contain').inV().as('b').outE('contain').inV().as('c').where(__.out('contain').as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"给出id为108的pullRequest belong的repository, 并将repository有关的user的gender的最小值赋值给repository的lang, 接着查询repository的lang小于108的repository has的issue","g.V().has('pullRequest', 'id', 108).as('a').outE('belong').inV().hasLabel('repository').as('b').sideEffect(select('b').aggregate('b_set')).select('b').inE().as('e2').outV().hasLabel('user').as('c').select('b', 'c').by().by('gender').group().by(select('b')).by(values('c').min()).unfold().as('lang_entry').select('b_set').unfold().as('b').select('lang_entry').where(select('b').as('b_key').select('lang_entry').by(keys).where(eq('b_key'))).select('lang_entry').by(values).as('min_gender').select('b').sideEffect(property('lang', select('min_gender'))).select('b').has('lang', lt(108)).outE('has').inV().hasLabel('issue').as('d').select('b', 'd').by('lang').by()"
"帮我查询135个和标签为医生的点有创造关系的处方,以及和这些处方有包含关系的药品",g.V().hasLabel('doctor').outE('creates').inV().hasLabel('prescription').outE('contain').inV().hasLabel('medicine').limit(135)
"帮我查询所有名为孙伟的点的,gender不是male,height大于190的friend,返回这些friend的id,和边的f0","g.V().has('name', '孙伟').outE('friend').as('e').inV().has('gender', neq('male')).has('height', gt(190)).project('b.id', 'e.f0').by(id()).by(select('e').values('f0'))"
"以938,436,977作为请求点id, 源点的id等于输入表id,返回帖子的三角的环,边类型为post_has_tag, 并返回这些点的id","g.inject([938, 436, 977]).unfold().as('p').V().has('post', 'id', __.select('p')).as('a').outE('post_has_tag').inV().as('b').outE('post_has_tag').inV().as('c').where(__.as('c').out('post_has_tag').as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
 给出与商品ID为199的订单有关的朋友，再给出与订单有关的朋友。,"g.V().has('goods', 'id', '199').bothE().otherV().hasLabel('orders').as('b').bothE('friend').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd').by(elementMap())"
返回性别是male或id大于等于79的节点,"g.V().or(has('gender', 'male'), has('id', gte(79)))"
获取赵思琪相关的古代主题帖,"g.V().hasLabel('user').has('name', '赵思琪').outE('publish').inV().hasLabel('post').as('b').outE('has').inV().hasLabel('tag').has('name', '古代').select('b')"
查找person郑强关联的person节点认识的person,"g.V().hasLabel('person').has('name', '郑强').outE('relates').inV().hasLabel('person').outE('knows').inV().hasLabel('person')"
"查找名为Flink的,状态不等于Closed且权重不是163的伙伴,返回这些伙伴的权重,和边的权重,源点id","g.V().has('name', 'Flink').outE('partner').as('e').inV().has('status', neq('Closed')).has('weight', neq(163)).project('b_weight', 'e_weight', 'srcId').by('weight').by(select('e').values('weight')).by(select('e').values('srcId'))"
"请帮我查找与公司腾讯存在合作关系,且与公司谷歌存在合作关系的大学节点，返回这些大学的等级,价值,id,及公司腾讯的名字,及公司谷歌的id","g.V().has('company', 'name', '腾讯').as('a').outE('cooperate').inV().hasLabel('university').as('b').inE('cooperate').outV().has('company', 'name', '谷歌').as('c').select('a', 'b', 'c').by('name').by(values('level', 'value', 'id')).by('id')"
"用这个schema:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询id为178的点的name,weight,id","g.V().has('id', '178').project('a.name', 'a.weight', 'a.id').by('name').by('weight').by('id')"
查询id为167的person的相关partner，再查询与该person相关的partner,"g.V().has('person', 'id', '167').as('a').bothE().otherV().hasLabel('person').as('b').bothE().hasLabel('partner').otherV().as('c').select('b').bothE().hasLabel('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
返回前39个label为咨询的边,g.E().hasLabel('consult').limit(39)
 王思思写的书被其他出版社出版的数量。,"g.V().has('author', 'name', '王思思').out('write').in('publish').hasLabel('publisher').count()"
查询XXD账户还款的贷款对应的存款账号,"g.V().has('account', 'name', 'XXD').outE('repay').inV().hasLabel('loan').outE('deposit').inV().hasLabel('account')"
"找出全部与张月存在consult关系的seller,seller与goods存在has关系的点,返回这些点的value","g.V().has('name', '张月').out('consult').hasLabel('seller').out('has').hasLabel('goods').values('value')"
"给出名为喜剧的评论或电影院,以及与其有关的标签,并返回喜剧的名字和这些标签的价值","g.V().hasLabel('comment', 'cinema').has('name', '喜剧').bothE().otherV().hasLabel('tag').project('a.name', 'b.value').by(select('a').values('name')).by(values('value'))"
 查询与陈建国和何国强存在关系的189个学生节点。,"g.V().has('name', '陈建国').outE().inV().hasLabel('student').where(__.inE().outV().has('name', '何国强')).limit(189)"
给出名为徐梅的点knows的person,"g.V().has('name', '徐梅').out('knows').hasLabel('person')"
"用如下schema的图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));给出prescription以name,id,weight分组的name, 根据name升序排序","g.V().hasLabel('prescription').group().by(project('name', 'id', 'weight').by('name').by('id').by('weight')).select(values).unfold().project('name').by(select('name')).order().by('name', asc)"
"以222,594作为请求点id, 源点的id等于输入表id,查询全部名为李伟的点knows的person","g.inject([222, 594]).as('p').flatMap(select('p')).as('id').flatMap(__.V().has('id', select('id')).has('name', '李伟').outE('knows').inV().hasLabel('person')).dedup()"
 找出与公司ID为20的某个人有关系的伙伴，再找出与这个人相关的其他人。,"g.V().has('company', 'id', '20').as('a').bothE().otherV().hasLabel('person').as('b').bothE('relation').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"帮我查询所有与孙科存在喜欢关系的评论,评论与电影存在属于关系的点,返回这些点的类别","g.V().has('name', '孙科').outE('likes').inV().hasLabel('comment').outE('belong').inV().hasLabel('film').values('category')"
"查找名为Redis和Mysql的,类型是软件的点公共的相关者节点的名单","g.V().has('software', 'name', 'Redis').outE('relation').inV().as('b').inE('relation').outV().has('software', 'name', 'Mysql').select('b').values('name')"
 请问外科在哪里？,"g.V().hasLabel('department').has('name', '外科')"
"查询person吴宏pay的person, 令person的id等于person的age,令person(b)的gender等于person(a)的id对23取余加7, 返回person(a)的name, person(b)的name","g.V().hasLabel('person').has('name', '吴宏').as('a').outE('pay').inV().hasLabel('person').as('b').project('a_name', 'b_name').by(select('a').values('name')).by(select('b').values('name'))"
"返回和person黄红有关的person,再返回和黄红lover的其他person,返回它们","g.V().has('person', 'name', '黄红').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('lover').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
"请帮我找出person的三角的环,边label为watch, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('watch').inV().as('b').outE('watch').inV().as('c').where(__.inE('watch').outV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
找出全部类型是person的点,g.V().hasLabel('person')
给出person的2跳以内的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(2).where(loops().is(1).or().loops().is(2)).as('b').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"找出源点类型为person,目标点类型为贷款,类型为person或贷款的边","g.V().hasLabel('person').outE('person', 'loan').where(inV().hasLabel('loan')).valueMap(true)"
 何科和徐国强认识吗？,"g.V().has('person', 'name', '何科').outE('knows').inV().as('b').inE('knows').outV().has('person', 'name', '徐国强').select('b')"
请帮我找出全部与国家日本有关系的国家的人数,"g.V().has('country', 'name', '日本').bothE().otherV().hasLabel('country').values('peopleNumber')"
"使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找所有帖子的相关者,或其相关者的相关者","g.V().hasLabel('post').outE('relation').inV().range(1, 2).dedup()"
找出所有与电影院大众影院有关系的标签的名字,"g.V().has('cinema', 'name', '大众影院').bothE().otherV().hasLabel('tag').values('name')"
 按照年龄从小到大排序，对person的id、身高和薪资进行分组。,"g.V().hasLabel('person').group().by(project('id', 'height', 'salary').by('id').by('height').by('salary')).by(values('age').fold()).order(local).by(values, asc)"
 请问周若涵认识了多少个其他人士？,"g.V().has('person', 'name', '周若涵').out('knows').in('knows').dedup().count()"
查找被person孙梅观看的电影,"g.V().hasLabel('person').has('name', '孙梅').outE('watch').inV().hasLabel('film').as('b').inE('watch').outV().as('a').select('a', 'b')"
"查找和person周强有关的person,再查找和周强认识的其他person,返回它们","g.V().has('person', 'name', '周强').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('knows').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
"给出id为131的person关联的person, 并将person有关的person的年龄的最小值赋值给person(b)的id, 接着查询person(b)的id小于131的person关联的person","g.V().has('person', 'id', 131).outE('relates').inV().hasLabel('person').as('b').project('b_id', 'd').by(choose(outE().inV().hasLabel('person').values('age').min(), constant(-1))).by(choose(has('id', lt(131)), outE('relates').inV().hasLabel('person'), constant(null)))"
 请帮我查找与微软存在员工关系且与郑思琪有认识关系的个人，并返回他们的ID、工资、年龄、微软的名称和郑思琪的名称。,"g.V().hasLabel('company').has('name', '微软').as('a').outE('employee').inV().hasLabel('person').as('b').inE('knows').outV().hasLabel('person').has('name', '郑思琪').as('c').select('a', 'b', 'c').by('name').by(values('id', 'salary', 'age')).by('name')"
给出所有名为吴思思的点teach的course,"g.V().has('name', '吴思思').outE('teach').inV().hasLabel('course')"
帮我找一下中国诗词论坛里被其他用户喜欢的帖子数量,"g.V().has('forum', 'name', '中国诗词论坛').outE('contain').inV().hasLabel('post').inE('likes').outV().hasLabel('user').count()"
请帮我查找以认识关系关联了person赵梅的person,"g.V().hasLabel('person').has('name', '赵梅').in('knows').hasLabel('person')"
"查找和城市武汉有关的国家,称为X,再查找和这个X有关联的其他国家,以及和X有关联的公司","g.V().has('city', 'name', '武汉').as('a').bothE().otherV().hasLabel('country').as('b').bothE().otherV().hasLabel('country').where(neq('b')).as('c').select('b').bothE().otherV().hasLabel('company').as('d').select('a', 'b', 'c', 'd')"
请帮我找出和person孙思琪之间有likes关系的comment,"g.V().hasLabel('person').has('name', '孙思琪').outE('likes').inV().hasLabel('comment')"
 查询所有从'loan'源点流向'account'目标点且标签为'deposit'的边。,g.V().hasLabel('loan').outE('deposit').as('e').inV().hasLabel('account').select('e')
查找全部与person徐雪有关系的person的性别,"g.V().hasLabel('person').has('name', '徐雪').bothE().otherV().hasLabel('person').values('gender')"
"返回标签等于学生的点,返回24个",g.V().hasLabel('student').limit(24)
"帮我查询卖家以名字分组的身高, 根据身高从小到大排序","g.V().hasLabel('seller').group().by('name').by(values('height').fold()).order(local).by(values, asc)"
 请帮我找出吴思思教授的课程和她所在的部门，谢谢。,"g.V().has('name', '吴思思').as('a').outE('teach').inV().hasLabel('course').as('b').select('a').inE('has').outV().hasLabel('department').as('c').select('a', 'b', 'c')"
 返回与编辑韩轩和王月都发布过内容。,"g.V().has('publisher', 'name', '韩轩').outE('publish').inV().as('b').inE('publish').outV().has('publisher', 'name', '王月').select('b').dedup()"
帮我查询标签为读者的点,g.V().hasLabel('reader')
 按照性别和薪资分组，然后按照身高从小到大排序。,"g.V().hasLabel('person').group().by(values('gender', 'salary').fold()).by(values('height').fold().order(local)).unfold().select(values).unfold()"
 查找与Prescription_443和Prescription_330有关系的24个医生节点。,"g.V().has('name', 'Prescription_443').outE().inV().hasLabel('doctor').as('b').inE().outV().has('name', 'Prescription_330').select('b').limit(24)"
"帮我查询所有张科的点回答的买家,然后帮我查询张科被咨询的买家,一起返回","g.V().has('name', '张科').as('a').outE('ask').inV().hasLabel('buyer').as('b').select('a').inE('consult').outV().hasLabel('buyer').as('c').select('a', 'b', 'c')"
"请帮我找出部门皮肤科拥有的医生, 令医生的性别等于医生的年龄,令医生的权重等于部门的地址, 返回部门的id, 医生的年龄","g.V().hasLabel('department').has('name', '皮肤科').as('a').outE('has').inV().hasLabel('doctor').as('b').sideEffect(select('b').property('gender', select('b').values('age'))).sideEffect(select('b').property('weight', select('a').values('address'))).select('a', 'b').by('id').by('age')"
"给出和标签为买家的点有咨询关系的卖家,并且和这些卖家有回答关系的买家,并且和这些买家有取消关系的订单",g.V().hasLabel('buyer').as('a').outE('consult').as('e').inV().hasLabel('seller').as('b').outE('ask').as('e2').inV().hasLabel('buyer').as('c').outE('cancel').as('e3').inV().hasLabel('orders').as('d').select('d')
返回全部和person kate之间有喜欢关系的评论,"g.V().hasLabel('person').has('name', 'kate').outE('likes').inV().hasLabel('comment').dedup()"
 查询周伟在电影《少年足球》中的评论。,"g.V().has('person', 'name', '周伟').bothE('likes').otherV().hasLabel('comment').bothE('belong').otherV().has('film', 'name', '少年足球').select('comment').dedup()"
请帮我找出与书三体和呐喊都存在引用关系的点,"g.V().has('book', 'name', '三体').outE('refers').inV().as('b').inE('refers').outV().has('book', 'name', '呐喊').select('b')"
"用如下schema的图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));返回前143个满足条件weight大于等于826或createTime为148的prescription","g.V().hasLabel('prescription').or(has('weight', gte(826)), has('createTime', 148)).limit(143)"
 请帮我找出与买家相关的人，或者相关者的相关者。,g.V().hasLabel('buyer').outE('relation').inV().hasLabel('buyer').path().by('id').by('id').limit(2).dedup().select('b')
"找出名为北京大学和电子科技大学的,标签等于university的点公共的partner节点的名单","g.V().has('university', 'name', '北京大学').out('partner').as('b').in('partner').has('university', 'name', '电子科技大学').select('b').values('name')"
"帮我查询与person何国强存在lover关系,且与person孙建国存在lover关系的person节点，返回这些person的age,height,及person何国强的gender,及person孙建国的gender","g.V().has('person', 'name', '何国强').as('a').outE('lover').inV().hasLabel('person').as('b').inE('lover').outV().has('person', 'name', '孙建国').as('c').select('a', 'b', 'c').by('gender').by(values('age', 'height')).by('gender')"
"使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出和用户王建国有1跳或2跳关系的person","g.V().has('user', 'name', '王建国').bothE().otherV().hasLabel('person').path().by('name').by(label).limit(1).union(__.identity(), __.bothE().otherV().hasLabel('person')).dedup().values('name')"
查询用户的3度以内的环,"g.V().hasLabel('user').as('a').repeat(both().simplePath()).times(3).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id')"
请帮我查找贷款loan_45存款的账号节点转账的账号,"g.V().hasLabel('loan').has('name', 'loan_45').outE('deposit').inV().hasLabel('account').outE('transfer').inV().hasLabel('account')"
"以199,128,843,321,689作为请求点id, 源点的id等于输入表id,查找名为计算机网络的,name等于孤城的refers,返回这些refers的createTime,和边的weight,f0,targetId","g.withSideEffect('p', [199, 128, 843, 321, 689]).V().has('id', within('p')).has('name', '计算机网络').outE('book_refers_book').as('e').inV().has('name', '孤城').select('e').project('b.createTime', 'e.weight', 'e.f0', 'e.targetId').by(__.inV().values('createTime')).by(values('weight')).by(values('f0')).by(values('targetId'))"
"根据value分组,计算value加650减87减id的值","g.V().hasLabel('a').group().by('value').by(values('value', 'id').math('_1 + 650 - 87 - _2'))"
"帮我查询patient的relation,或其relation的relation","g.V().hasLabel('patient').outE('relation').inV().outE('relation').inV().path().by(__.coalesce(__.label(), __.label())).unfold().tail(1)"
"找出和person周强有关的person,再找出和周强knows的其他person,返回它们","g.V().has('person', 'name', '周强').as('a').bothE().otherV().hasLabel('person').as('b').select('a').bothE('knows').otherV().hasLabel('person').as('c').select('a', 'b', 'c')"
"输入请求点id的列表790,407,34,946, 以属性id作为相等条件,给出所有id为85的medicine关联的department,和以belong关系关联了这些department的其他doctor","g.inject([790, 407, 34, 946]).as('p').V().hasLabel('medicine').has('id', within('p')).has('id', '85').bothE().as('e').otherV().hasLabel('department').as('b').inE('doctor_belong_department').as('e2').otherV().hasLabel('doctor').as('c').select('b', 'c')"
请帮我查找全部与用户何建国有关系的标签的名字,"g.V().has('user', 'name', '何建国').bothE().otherV().hasLabel('tag').values('name')"
找出与计算机学院有关的学生，然后找出与计算机学院有关的教师。,"g.V().has('department', 'name', '计算机学院').as('a').out('has').as('b').select('a').in('has').hasLabel('teacher').as('c').select('a', 'b', 'c')"
返回所有和reader赵红之间有likes关系的book,"g.V().hasLabel('reader').has('name', '赵红').outE('likes').inV().hasLabel('book')"
帮我查找天涯论坛中提到的人,"g.V().hasLabel('forum').has('name', '天涯论坛').as('b').outE('contain').as('e').inV().hasLabel('person').as('a').select('a', 'b')"
"返回部门的三角的环,边类型为拥有, 并返回这些点的id","g.V().hasLabel('department').as('a').outE('has').inV().as('b').outE('has').inV().as('c').where(__.inE('has').outV().as('a')).select('a', 'b', 'c').by(valueMap('id')).project('a', 'b_id', 'c_id').by(select('a')).by(select('b').select('id')).by(select('c').select('id'))"
返回重庆大学相关者的朋友们的朋友,"g.V().has('university', 'name', '重庆大学').out('relation').out('friend').out('friend')"
"找出全部Amily的点publish的post,然后找出Amily被contain的forum,一起返回","g.V().has('name', 'Amily').as('a').outE('publish').inV().hasLabel('post').as('b').select('a').inE('contain').outV().hasLabel('forum').as('c').select('a', 'b', 'c')"
 请帮我查询与department呼吸科有has关系的医生，以及与医生马国强有creates关系的处方，并返回它们。,"g.V().hasLabel('department').has('name', '呼吸科').as('a').outE('has').inV().hasLabel('doctor').as('b').select('a').V().hasLabel('doctor').has('name', '马国强').as('c').outE('creates').inV().hasLabel('prescription').as('d').select('a', 'b', 'c', 'd')"
"查找与名为韩科和周月的点共同拥有的,label为账号的节点","g.V().has('name', '韩科').outE('own').inV().hasLabel('account').as('b').inE('own').outV().has('name', '周月').select('b')"
 返回与买家点有联系的商品节点，并按类别、价值和销量分组。,"g.V().hasLabel('buyer').bothE('look').otherV().hasLabel('goods').group().by(project('category', 'value', 'sellerNumber').by(values('category')).by(values('value')).by(values('sellerNumber'))).select(values).unfold().project('b.category', 'b.value', 'b.sellerNumber').by(select('category')).by(select('value')).by(select('sellerNumber'))"
"以('male',3634,21),('male',1597,87)作为请求表数据,属性分别为gender,salary,id, 源点的id等于输入表id,查找类型为buyer,名为徐建聪的点,返回这些点的gender,name","g.inject([['male', 3634, 21], ['male', 1597, 87]]).as('p').unfold().as('row').select('row').by(__.project('gender', 'salary', 'id').by(__.limit(local, 1)).by(__.limit(local, 2)).by(__.limit(local, 3))).V().hasLabel('buyer').has('id', __.select('row').select('id')).has('name', '徐建聪').project('gender', 'name').by(__.values('gender')).by(__.values('name'))"
"输入表的列为id,gender,name, 数据为(62,'famale','周建国'),(83,'famale','孙月'),(75,'famale','何建聪'),(44,'male','何若涵'), 以属性id作为相等条件,返回全部源点类型为买家,目标点类型为订单,类型为buyer_creates_orders的边","g.inject([['id':62,'gender':'famale','name':'周建国'],['id':83,'gender':'famale','name':'孙月'],['id':75,'gender':'famale','name':'何建聪'],['id':44,'gender':'male','name':'何若涵']]).unfold().as('p').V().hasLabel('buyer').has('id', __.select('p').select('id')).as('a').outE('buyer_creates_orders').as('e').inV().hasLabel('orders').as('b').select('e')"
"找出86个和类型是评论的点有属于关系的电影,且和这些电影有拥有关系的标签",g.V().hasLabel('comment').as('a').out('belong').hasLabel('film').as('b').out('has').hasLabel('tag').as('c').select('c').limit(86)
 请帮我找出与Amile和Mao Jian共同相关的人。,"g.V().has('person', 'name', 'Amily').outE('relation').inV().as('b').inE('relation').outV().has('person', 'name', '马建国').select('b').limit(67)"
查询用户名为Amily的所有点，返回它们的id、salary和gender信息。,"g.V().hasLabel('user').has('name', 'Amily').project('id', 'salary', 'gender').by('id').by('salary').by('gender')"
"根据name,id分组,计算weight的最大值对632取余的值","g.V().hasLabel('a').group().by(union(identity().values('name'), identity().values('id')).fold()).by(values('weight').max()).unfold().project('a.name', 'a.id', 'result').by(select(keys).select('name')).by(select(keys).select('id')).by(select(values).math('_ % 632'))"
"帮我查询relates person李雪relates的person,的person","g.V().hasLabel('person').has('name', '李雪').as('a').outE('relates').as('e').inV().as('b').inE('relates').as('e2').outV().as('c').select('b', 'c')"
请帮我找出前38个性别是famale且薪资不等于9689的person,"g.V().hasLabel('person').has('gender', 'famale').has('salary', neq(9689)).limit(38)"
找出电影院的2跳的环,"g.V().hasLabel('cinema').as('a').repeat(both().simplePath()).times(2).where(loops().is(2)).where(__.both().where(eq('a'))).dedup().project('a.id', 'b_id').by(__.select('a').id()).by(id())"
 查询与标签为'account'的点有转移关系的166个账户，以及与这些账户有偿还关系的贷款。,g.V().hasLabel('account').as('a').outE('transfer').as('e').inV().hasLabel('account').as('b').outE('repay').as('e2').inV().hasLabel('loan').as('c').select('c').limit(166)
"找出company阿里 belong的city,返回city belong的country的peopleNumber除peopleNumber的值","g.V().hasLabel('company').has('name', '阿里').outE('belong').inV().hasLabel('city').outE('belong').inV().hasLabel('country').project('result').by(values('peopleNumber').math('_ / _'))"
"请帮我找出和label为person的点有创造关系的评论,以及和这些评论有属于关系的电影,以及和这些电影有拥有关系的标签",g.V().hasLabel('person').as('a').out('creates').hasLabel('comment').as('b').out('belong').hasLabel('film').as('c').out('has').hasLabel('tag').as('d').select('d')
"用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询标签为person_creates_comment,以及timeStamp等于2022年09月08日的边","g.E().hasLabel('person_creates_comment').has('timeStamp', '2022-09-08')"
"查询被person关联数量大于150的person,记为relationCount,再查询这些person认识的person","g.V().hasLabel('person').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('relates').hasLabel('person').values('id').min()).select('a', 'relationCount').as('a_with_count').where(__.select('relationCount').is(gt(150))).select('a').out('knows').hasLabel('person').as('c').select('c')"
"用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出源点年龄是91,id不为空,边label为user_likes_post,且时间戳等于2001年01月03日或目标点id除目标点id对源点id取余大于等于917的边,返回这些边的目标点id除182的值","g.V().hasLabel('user').has('age', 91).has('id', neq(null)).outE('user_likes_post').where(or(has('timeStamp', '2001-01-03'), math('targetId / targetId % srcId').is(gte(917)))).project('result').by(math('targetId / 182'))"
"请帮我找出与person吴轩有关,且与person郑轩有关系的person节点","g.V().has('person', 'name', '吴轩').bothE('lover').otherV().hasLabel('person').where(bothE('parent').otherV().has('person', 'name', '郑轩')).dedup()"
"查询薪资是1964,id大于150的卖家回答的买家的名称,以及这些买家 创造的订单的名称","g.V().hasLabel('seller').has('salary', 1964).has('id', gt(150)).outE('ask').inV().hasLabel('buyer').as('b').outE('creates').inV().hasLabel('orders').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 请帮我查找Comment_208所属电影节点has的标签。,"g.V().hasLabel('comment').has('name', 'Comment_208').out('belong').hasLabel('film').out('has').hasLabel('tag')"
"查询和标签等于公司的点有雇佣关系的person,以及和这些person有提交关系的软件,以及和这些软件有使用关系的软件",g.V().hasLabel('company').as('a').out('employee').hasLabel('person').as('b').out('commits').hasLabel('software').as('c').out('uses').hasLabel('software').as('d').select('d')
"帮我查询person王若涵的全部家人,的目标点id减目标点id的值","g.V().has('person', 'name', '王若涵').outE('family').inV().project('result').by(values('targetId').math('_ - _'))"
"返回全部与传染部存在拥有关系的医生,医生与病人存在诊断关系的点,返回这些点的性别","g.V().has('name', '传染部').out('has').hasLabel('doctor').out('diagnose').hasLabel('patient').values('gender')"
请帮我找出所有标签为'国家'且名称为'澳大利亚'的点，并返回它们的名字,"g.V().hasLabel('country').has('name', '澳大利亚').values('name')"
请帮我查找前187个类型为family的边,g.E().hasLabel('family').limit(187)
"找出拥有课程大学物理属于的部门,的大学","g.V().has('course', 'name', '大学物理').out('belong').as('b').in('has').hasLabel('university').as('c').select('b', 'c')"
"用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));返回前143个height小于22或salary是6942的student","g.V().hasLabel('student').or(has('height', lt(22)), has('salary', 6942)).limit(143)"
请帮我找出136个与周强和韩建聪都存在关系的账号或贷款或person节点,"g.V().has('name', '周强').as('a').outE().as('e').inV().hasLabel(within('account', 'loan', 'person')).as('b').inE().as('e2').outV().has('name', '韩建聪').as('c').select('b').limit(136)"
"用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部源点满足条件创建时间小于67且价格小于39,id等于20,目标点满足条件类别是文学,且类型是book_refers_book的边","g.E().hasLabel('book_refers_book').where(__.outV().and(__.has('createTime', lt(67)), __.has('price', lt(39)), __.has('id', 20))).where(__.inV().has('category', '文学'))"
找出公司的1跳的环,"g.V().hasLabel('company').as('a').bothE().bothV().where(eq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
找出与王国强和周宏共同投资的公司节点,"g.V().has('name', '王国强').outE('invest').inV().hasLabel('company').as('b').inE('invest').outV().has('name', '周宏').select('b')"
请帮我查找和account TheShy有3跳关系的loan,"g.V().has('account', 'name', 'TheShy').repeat(bothE().otherV().simplePath()).times(3).hasLabel('loan')"
"根据salary,gender,id分组,计算age的最大值对89取余的值","g.V().hasLabel('a').group().by(__.project('salary', 'gender', 'id').by('salary').by('gender').by('id')).by(__.values('age').max()).unfold().project('salary', 'gender', 'id', 'result').by(__.select(keys).select('salary')).by(__.select(keys).select('gender')).by(__.select(keys).select('id')).by(__.select(values).math('_ % 89'))"
帮我找一下叫赵伟的人的信息,"g.V().hasLabel('person').has('name', '赵伟')"
"以369,26,723作为请求点id, 源点的id等于输入表id,查询被city纽约contain的university","g.withSideEffect('p', [369, 26, 723]).V().hasLabel('university').as('a').where(within('p')).by('id').inE('city_contain_university').outV().hasLabel('city').has('name', '纽约').as('b').select('a', 'b')"
"输入表的列为lang,openSource,id, 数据为('java',true,27), 以属性lang作为相等条件,查询company的1度以内的环","g.withSideEffect('p', [['lang':'java','openSource':true,'id':27]]).V().hasLabel('company').has('lang', __.select('p').unfold().select('lang')).as('a').bothE().otherV().as('b').where(__.as('b').bothE().otherV().as('a')).select('a','b').by('id').by('id').project('a.id','b_id').by(select('a')).by(select('b'))"
请帮我查找36个与Order_284和Order_235都存在关系的买家或商品节点,"g.V().has('name', 'Order_284').outE().inV().or(hasLabel('buyer'), hasLabel('goods')).as('b').inE().outV().has('name', 'Order_235').select('b').limit(36)"
"找出标签为事项的点,返回189个",g.V().hasLabel('issue').limit(189)
 查询与知乎有关的用户，再查询包含知乎的其他人物，返回它们。,"g.V().hasLabel('forum').has('name', '知乎').as('a').bothE().otherV().hasLabel('user').as('b').select('a').outE('contain').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
找出与学生杜建国有选择关系的课程，然后找出这些课程中与杜建国有选择关系的。,"g.V().has('student', 'name', '杜建国').as('a').outE('selects').inV().hasLabel('course').as('b').select('a').inE('selects').outV().hasLabel('course').as('c').select('a', 'b', 'c')"
"以515作为请求点id, 以属性id作为相等条件,查找与用户韩雪和张强都存在user_creates_issue关系的点","g.withSideEffect('p', [515]).V().hasLabel('user').has('id', within('p')).has('name', '韩雪').outE('user_creates_issue').inV().as('b').inE('user_creates_issue').outV().hasLabel('user').has('name', '张强').select('b')"
"给出名为徐伟的person,以及与其有关的person,并返回徐伟的id和这些person的年龄","g.V().hasLabel('person').has('name', '徐伟').bothE().otherV().hasLabel('person').project('a_id', 'b_age').by(__.select('a').id()).by(__.select('b').values('age'))"
给出以合作关系关联了公司滴滴的大学,"g.V().hasLabel('company').has('name', '滴滴').inE('cooperate').outV().hasLabel('university')"
"以61,672,604作为请求点id, 以属性id作为相等条件,请帮我查找和person有关联的person节点,并根据其gender分组,返回gender,以及id加21减age乘9222的值","g.inject([61, 672, 604]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).bothE('person_likes_person').otherV().hasLabel('person').as('b').select('b').by('gender').by(__.math('(id + 21 - age) * 9222')).group().by('gender').by(__.select('b').by(__.math('(id + 21 - age) * 9222')).fold())"
查询person的3度的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(2).where(loops().is(2)).as('b').where(__.out().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').by('id')).by(select('b').by('id'))"
 返回buyer Alice的合作伙伴的合作伙伴,"g.V().has('buyer', 'name', 'Alice').out('partner').out('relation').out('partner')"
"帮我查询和城市上海有包含关系的大学,再帮我查询以属于关系关联了上海的国家","g.V().has('city', 'name', '上海').as('a').out('contain').hasLabel('university').as('b').select('a').in('belong').hasLabel('country').as('c').select('a', 'b', 'c')"
"用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部和名为电子科技大学的university有friend关系,或有friend的friend关系的city","g.V().has('university', 'name', '电子科技大学').bothE('friend').bothV().hasLabel('city').dedup()"
查找和person何建国之间有购买关系的软件,"g.V().hasLabel('person').has('name', '何建国').outE('buy').inV().hasLabel('software')"
"以('famale',80,155)作为请求表数据,属性分别为gender,id,height, 以属性height作为相等条件,帮我查询31个年龄大于50或年龄大于等于73的person,根据性别升序排列","g.inject(['famale', 80, 155]).as('p').V().hasLabel('person').as('a').where('a', eq('p')).by('height').by(tail(local, 2)).and(or(__.values('age').is(gt(50)), __.values('age').is(gte(73)))).select('a').order().by('gender', asc).limit(31)"
"查找包含商品矿泉水的订单,和这些订单包含的商品","g.V().hasLabel('goods').has('name', '矿泉水').inE('contain').outV().as('b').outE('contain').inV().hasLabel('goods').as('c').select('b', 'c')"
"请帮我找出label为family,且满足条件srcId不是194.40或srcId大于163或srcId不为空的边","g.E().hasLabel('family').or(has('srcId', neq(194.40)), has('srcId', gt(163)), has('srcId', neq(null)))"
" 按照年龄和性别分组，找出每个人的ID,然后按从大到小的顺序排序。","g.V().hasLabel('person').group().by(values('age', 'gender')).by(values('id').fold()).order(local).by(keys, desc).unfold().project('a.id').by(select(values).unfold()).order().by(select('a.id'), desc)"
查询王梅和孙强这两位person共同拥有的friend，数量为72。,"g.V().has('person', 'name', '王梅').out('friend').as('b').in('friend').has('person', 'name', '孙强').select('b').limit(72)"
查询79个与孙伟和杜若涵都存在关系的编辑或读者或书节点,"g.V().has('name', '孙伟').as('a').outE().as('e').inV().or(hasLabel('publisher'), hasLabel('reader'), hasLabel('book')).as('b').inE().as('e2').outV().has('name', '杜若涵').as('c').select('b').limit(79)"
"以373,805作为请求点id, 以属性id作为相等条件,返回全部和person黄思思之间有person_pay_person关系的person","g.inject([373, 805]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('name', '黄思思').outE('person_pay_person').inV().hasLabel('person').dedup()"
"给出和用户点有发布关系的帖子节点,且边满足条件源点id为空,目标帖子节点满足条件字数小于778","g.V().hasLabel('user').as('a').outE('publish').has('srcId', null).as('e').inV().hasLabel('post').has('wordCount', lt(778)).as('b').select('b')"
id减91的值,g.V().hasLabel('a').project('result').by(values('id').math('_ - 91'))
"查找与事项ISSUE-306有关,且与合并请求PR-352有关系的仓库节点","g.V().hasLabel('issue').has('name', 'ISSUE-306').bothE('belong').otherV().hasLabel('repository').as('b').bothE('has').otherV().hasLabel('pullRequest').has('name', 'PR-352').select('b')"
"查找公司微软创造的软件,以及使用这些软件的软件","g.V().has('company', 'name', '微软').outE('creates').inV().hasLabel('software').as('b').inE('uses').outV().hasLabel('software').as('c').select('b', 'c')"
 给定文学院的学生，以及这些学生选择的课程，返回这些课程的课时。,"g.V().has('name', '文学院').out('has').hasLabel('student').out('selects').values('courseHour')"
"请帮我找出value大于等于383或peopleNumber为空的forum contain的user的名称,以及这些user likes的post的名称","g.V().hasLabel('forum').or(has('value', gte(383)), hasNot('peopleNumber')).outE('contain').inV().hasLabel('user').as('b').outE('likes').inV().hasLabel('post').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 返回来源和目标都是书，类型为引用的边。,g.V().hasLabel('book').outE('refers').where(inV().hasLabel('book'))
"查找所有源点标签等于person,边标签等于apply,且满足条件f0不是534的边","g.V().hasLabel('person').outE('apply').has('f0', neq(534)).dedup()"
"根据name分组,计算courseHour加37减29的值",g.V().hasLabel('a').group().by('name').by(values('courseHour').math('_ + 37 - 29'))
"查找回答买家赵伟的卖家,和这些卖家拥有的商品","g.V().hasLabel('buyer').has('name', '赵伟').as('a').in('ask').as('b').out('has').as('c').select('b', 'c')"
查询医生徐雪创建的处方，返回包含药品重量的处方。,"g.V().hasLabel('doctor').has('name', '徐雪').outE('creates').inV().hasLabel('prescription').outE('contain').inV().hasLabel('medicine').values('weight')"
"帮我查询名为谷歌的,amount小于等于6504.35的partner,返回这些partner的weight,和边的targetId","g.V().has('name', '谷歌').outE('partner').as('e').inV().has('amount', lte(6504.35)).as('b').select('b', 'e').by('weight').by('targetId')"
查找117个与loan_55和loan_82都存在关系的公司或账号节点,"g.V().has('name', 'loan_55').outE().inV().or(hasLabel('company'), hasLabel('account')).as('b').inE().outV().has('name', 'loan_82').select('b').limit(117)"
'请按照读者点的id对相关书籍进行分组，并返回它们的id。',g.V().hasLabel('reader').bothE('likes').bothV().hasLabel('book').group().by('id').by(__.id()).select(keys)
帮我查询20个与生理盐水和布洛芬都存在关系的病人或医生节点,"g.V().has('name', '生理盐水').outE().inV().or(hasLabel('patient'), hasLabel('doctor')).as('b').inE().outV().has('name', '布洛芬').select('b').limit(20)"
请帮我找出id为103的点的薪资,"g.V().has('id', 103).values('salary')"
"请帮我找出和软件Geaflow有关系的person,返回这些点的id,身高,年龄","g.V().hasLabel('software').has('name', 'Geaflow').bothE().otherV().hasLabel('person').project('b.id', 'b.height', 'b.age').by(values('id')).by(values('height')).by(values('age'))"
查找全部与person周轩有关系的person的id,"g.V().hasLabel('person').has('name', '周轩').bothE().otherV().hasLabel('person').id()"
"返回论坛中国诗词论坛包含的帖子,被其他用户喜欢的数量","g.V().has('forum', 'name', '中国诗词论坛').out('contain').in('likes').dedup().count()"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回公司的朋友,或其朋友的朋友","g.V().hasLabel('company').as('a').outE('friend').inV().range(1, 2).as('b').select('b')"
 返回和杜月有父母关系的个人和与杜建国同事的个人。,"g.V().has('person', 'name', '杜月').as('a').out('parent').hasLabel('person').as('b').select('a').V().has('person', 'name', '杜建国').as('c').out('colleague').hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"查询名为BIN的account,以及与其有关的account,并返回BIN的createTime和这些account的name","g.V().hasLabel('account').has('name', 'BIN').as('a').bothE().as('e').otherV().hasLabel('account').as('b').select('a', 'b').by('createTime').by('name')"
请帮我查找全部和商品键盘有1跳关系的卖家,"g.V().has('goods', 'name', '键盘').out().hasLabel('seller')"
找出与人有关的评论，这些评论创建了某物，并且这些评论属于某个电影。同时，找出那些电影拥有某个标签。,g.V().hasLabel('person').as('a').out('creates').hasLabel('comment').as('b').out('belong').hasLabel('film').as('c').out('has').hasLabel('tag').as('d').select('d')
"找出159个person赵科和周宏,共同的相关者","g.V().has('person', 'name', '赵科').outE('relation').inV().as('b').inE('relation').outV().has('person', 'name', '周宏').select('b').limit(159)"
"输入表的列为peopleNumber,createTime,name, 数据为(420,2029-06-21,'知网'), 以属性createTime作为相等条件,请帮我查找所有与person黄思思有关系的用户的名字","g.withSideEffect('p', [['peopleNumber': 420, 'createTime': '2029-06-21', 'name': '知网']]).V().hasLabel('person').has('createTime', __.select('p').unfold().select('createTime')).has('name', '黄思思').bothE().otherV().hasLabel('user').values('name')"
找出创建时间为1995年02月27日且权重小于789，且创建时间为2024年02月07日的所有处方，并按照创建时间进行升序排序。,"g.V().hasLabel('prescription').has('createTime', '1995-02-27').has('weight', lt(789)).has('createTime', '2024-02-07').order().by('createTime', asc).limit(11)"
"帮我查询名为散利痛的病人,以及与其有关的医生,并返回散利痛的名字和这些医生的年龄","g.V().hasLabel('patient').has('name', '散利痛').as('a').bothE().as('e').otherV().hasLabel('doctor').as('b').select('a', 'b').by('name').by('age')"
 请帮我找出拥有与标签为'部门'的物品关联的22个医生，并找出与这些医生有处方关系的医生。,g.V().hasLabel('department').as('a').out('has').hasLabel('doctor').as('b').out('creates').hasLabel('prescription').as('c').select('c').limit(22)
"帮我查询42个名为程序设计的点belong的类型为department的节点,且节点id在76到79之间,value大于939","g.V().has('name', '程序设计').outE('belong').inV().hasLabel('department').has('id', between(76, 79)).has('value', gt(939)).limit(42)"
"查找与卖家李若涵存在回答关系,且与商品桌子存在查看关系的买家节点，返回这些买家的名字,身高,年龄,及卖家李若涵的身高,及商品桌子的id","g.V().has('seller', 'name', '李若涵').as('a').outE('ask').inV().hasLabel('buyer').as('b').inE('look').outV().has('goods', 'name', '桌子').as('c').select('a', 'b', 'c').by('height').by(values('name', 'height', 'age')).by('id')"
"返回id为25的用户有关的事项的朋友, 再返回和事项有关系的相关者","g.V().has('user', 'id', 25).as('a').bothE().as('e').otherV().hasLabel('issue').as('b').bothE().hasLabel('friend').as('e2').otherV().as('c').select('b').bothE().hasLabel('relation').as('e3').otherV().as('d').select('a', 'b', 'c', 'd')"
"帮我查询和medicine散利痛有关的medicine,称为X,再帮我查询和这个X有关联的其他medicine,以及和X有关联的prescription","g.V().has('medicine', 'name', '散利痛').as('a').bothE().otherV().hasLabel('medicine').as('b').bothE().otherV().hasLabel('medicine').as('c').select('b').bothE().otherV().hasLabel('prescription').as('d').select('a', 'b', 'c', 'd')"
"帮我查询被reader杜国强likes的book,和杜国强likes的book","g.V().hasLabel('reader').has('name', '杜国强').as('b').outE('likes').as('e2').inV().hasLabel('book').as('c').select('b').outE('likes').as('e').inV().hasLabel('book').as('a').select('a', 'b', 'c')"
"找出has issue ISSUE-297的repository,和这些repository has的pullRequest","g.V().hasLabel('issue').has('name', 'ISSUE-297').in('has').hasLabel('repository').as('b').out('has').hasLabel('pullRequest').as('c').select('b', 'c')"
"查询名为王强和陈红的,类型为person的点公共的family节点的名单","g.V().has('person', 'name', '王强').outE('family').inV().as('b').inE('family').outV().has('person', 'name', '陈红').select('b').values('name')"
 找出4个小于等于9岁或大于37岁且性别从小到大排列的人。,"g.V().hasLabel('person').or(has('age', lte(9)), has('id', gt(37))).order().by('gender', asc).limit(4)"
请帮我查找所有与论坛中国诗词论坛有关系的论坛的名字,"g.V().has('forum', 'name', '中国诗词论坛').bothE().otherV().hasLabel('forum').values('name')"
"给出所有帖子以创建时间,名字分组的价值, 根据价值升序排序","g.V().hasLabel('post').group().by(values('createTime', 'name')).by(values('value')).order(local).by(values, asc)"
返回满足条件身高的最小值小于等于2149的节点,g.V().hasLabel('a').group().by(constant('min')).by(values('height').min()).unfold().where(select(values).is(lte(2149))).select('a')
返回全部和部门生物学院之间有拥有关系的教师,"g.V().hasLabel('department').has('name', '生物学院').out('has').hasLabel('teacher')"
帮我查询与电影复仇者联盟和我不是药神都存在拥有关系的点,"g.V().has('film', 'name', '复仇者联盟').outE('has').inV().as('b').inE('has').outV().has('film', 'name', '我不是药神').select('b')"
"输入请求点id的列表77,946,20,636, 源点的id等于输入表id,请帮我查找所有id为107的student关联的department,和以has关系关联了这些department的其他university","g.withSideEffect('p', [77, 946, 20, 636]).V().hasLabel('student').has('id', '107').as('a').where(__.select('a').values('id').is(within('p'))).bothE().as('e').otherV().hasLabel('department').as('b').inE('university_has_department').as('e2').outV().hasLabel('university').as('c').select('b', 'c')"
"给出所有与武汉大学存在has关系的department,department与teacher存在has关系的点,返回这些点的name","g.V().has('name', '武汉大学').out('has').hasLabel('department').out('has').hasLabel('teacher').values('name')"
"请帮我找出全部和person点有喜欢关系的person节点,且边满足条件f0不为空,目标person节点满足条件薪资在1180到2562之间","g.V().hasLabel('person').as('a').outE('likes').has('f0', neq(null)).as('e').inV().hasLabel('person').has('salary', between(1180, 2562)).as('b').select('b')"
"返回158个名为微软的点创造的label为软件的节点,且节点语言为rust","g.V().has('name', '微软').outE('creates').inV().hasLabel('software').has('lang', 'rust').limit(158)"
"查找和编辑张宏有关的读者,称为X,再查找和这个X有关联的其他书,以及和X有关联的读者","g.V().hasLabel('publisher').has('name', '张宏').as('a').bothE().as('e').otherV().hasLabel('reader').as('b').bothE().as('e2').otherV().hasLabel('book').as('c').select('b').bothE().as('e3').otherV().hasLabel('reader').as('d').select('a', 'b', 'c', 'd')"
查找全部名为吴建聪的节点commits的person或company或software,"g.V().has('name', '吴建聪').outE('commits').inV().hasLabel(within('person', 'company', 'software'))"
"返回与公司美团存在雇佣关系,且与软件Flink存在购买关系的person节点，返回这些person的名字,年龄,及公司美团的名字,及软件Flink的价值","g.V().has('company', 'name', '美团').as('a').out('employee').as('b').in('buy').has('software', 'name', 'Flink').as('c').select('a', 'b', 'c').by('name').by(values('name', 'age')).by('value')"
"请帮我查找大学清华大学拥有的部门,以及拥有这些部门的大学","g.V().has('university', 'name', '清华大学').outE('has').inV().hasLabel('department').as('b').inE('has').outV().hasLabel('university').as('c').select('b', 'c')"
帮我查询与person赵若涵和赵思琪都存在pay关系的点,"g.V().has('person', 'name', '赵若涵').outE('pay').inV().as('b').inE('pay').outV().has('person', 'name', '赵思琪').select('b')"
找到person节点孙建聪出发，通过朋友类型的边，走了两步到达的人节点。,"g.V().has('person', 'name', '孙建聪').repeat(out('friend').simplePath()).times(2).emit().hasLabel('person').dedup()"
"请帮我找出与cinema好视影院存在releases关系,且与tag科幻存在has关系的film节点，返回这些film的category,value,name,及cinema好视影院的id,及tag科幻的name","g.V().hasLabel('cinema').has('name', '好视影院').as('a').outE('releases').inV().hasLabel('film').as('b').inE('has').outV().hasLabel('tag').has('name', '科幻').as('c').select('a', 'b', 'c').by('id').by(values('category', 'value', 'name')).by('name')"
"请帮我找出3个person韩月和张月,共同的partner","g.V().has('person', 'name', '韩月').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '张月').select('b').limit(3)"
查找类型是仓库或事项或用户的点,"g.V().hasLabel(within('repository', 'issue', 'user'))"
"以830,256,543,443作为请求点id, 以属性id作为相等条件,帮我查询和doctor韩思琪有doctor_belong_department关系的department,以及和doctor韩月有doctor_belong_department关系的department,将它们都返回","g.withSideEffect('p', [830, 256, 543, 443]).V().hasLabel('doctor').where(within('p')).as('a').has('name', '韩思琪').outE('doctor_belong_department').inV().hasLabel('department').as('b').select('a', 'b').V().hasLabel('doctor').has('name', '韩月').outE('doctor_belong_department').inV().hasLabel('department').as('d').select('a', 'b', 'd').V().hasLabel('doctor').has('name', '韩月').as('c').select('a', 'b', 'c', 'd')"
 找出112个同时与中国诗词论坛和天涯论坛有联系的Person节点。,"g.V().has('name', '中国诗词论坛').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '天涯论坛').select('b').limit(112)"
给出被pullRequest PR-439 belong的repository,"g.V().hasLabel('pullRequest').has('name', 'PR-439').as('b').outE('belong').as('e').inV().hasLabel('repository').as('a').select('a', 'b')"
帮我找一下郑国强的朋友的关系伙伴,"g.V().has('person', 'name', '郑国强').out('friend').out('relation').out('partner')"
weight减746的值,g.V().hasLabel('a').project('result').by(values('weight').math('_ - 746'))
"帮我查询用户的相关者,或其相关者的相关者","g.V().hasLabel('user').as('a').outE('relation').inV().hasLabel('user').range(1, 2).as('b').select('b')"
找到所有名为'字节'且标签为'company'的点，并返回它们的人数。,"g.V().hasLabel('company').has('name', '字节').values('peopleNumber')"
请查询与处方Prescription_241有关的药品，以及与医生黄雪相关的部门，并返回所有结果。,"g.V().hasLabel('prescription').has('name', 'Prescription_241').as('a').outE('contain').inV().hasLabel('medicine').as('b').select('a').V().hasLabel('doctor').has('name', '黄雪').as('c').outE('belong').inV().hasLabel('department').as('d').select('a', 'b', 'c', 'd')"
 找李伟发的帖子，然后计算标签的价值。,"g.V().has('user', 'name', '李伟').outE('publish').inV().hasLabel('post').outE('has').inV().hasLabel('tag').values('value')"
"以(345,58,'武汉大学'),(310,47,'电子科技大学'),(131,83,'复旦大学'),(484,69,'武汉大学')作为请求表数据,属性分别为value,id,name, 源点的name等于输入表name,查找城市重庆包含的大学节点合作的公司","g.withSideEffect('p', [['value':345, 'id':58, 'name':'武汉大学'], ['value':310, 'id':47, 'name':'电子科技大学'], ['value':131, 'id':83, 'name':'复旦大学'], ['value':484, 'id':69, 'name':'武汉大学']]).V().hasLabel('city').has('name', '重庆').as('a').out('city_contain_university').hasLabel('university').as('b').out('university_cooperate_company').hasLabel('company').as('c').select('c')"
"请帮我查找价值在820到856之间或id大于等于709的大学合作的公司的名称,以及这些公司 合作的大学的名称","g.V().hasLabel('university').or(has('value', between(820, 856)), has('id', gte(709))).outE('cooperate').inV().hasLabel('company').as('b').outE('cooperate').inV().hasLabel('university').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"用如下schema的图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出用户黄建聪发布的帖子,被其他论坛包含的数量","g.V().has('user', 'name', '黄建聪').outE('user_publish_post').inV().hasLabel('post').inE('forum_contain_post').outV().hasLabel('forum').count()"
 请帮我查找和陈轩有关、购买香蕉的订单。,"g.V().hasLabel('buyer').has('name', '陈轩').bothE('cancel').otherV().hasLabel('orders').bothE('contain').otherV().hasLabel('goods').has('name', '香蕉').select('b')"
返回城市的1跳以内的环,"g.V().hasLabel('city').as('a').bothE().otherV().where(eq('a')).select('a').by('id').project('a.id', 'b_id').by(identity()).by(select('a').id())"
 评论中出现了与电影《绿巨人》相关的属于关系。,"g.V().hasLabel('film').has('name', '绿巨人').inE('belong').outV().hasLabel('comment')"
"返回department has的doctor,返回其源点的weight的数量加289除73的最小值,以及目标点的salary减8853的值","g.V().hasLabel('department').as('a').outE('has').inV().hasLabel('doctor').as('b').group().by(select('b')).by(select('a').values('weight').count().math('(_ + 289) / 73')).select(values).min().project('min_expr', 'salary_expr').by().by(select('b').values('salary').math('_ - 8853'))"
 查找与黄思思相关的帖子，包括直接相关和间接相关的。,"g.V().has('user', 'name', '黄思思').repeat(out('relation')).times(2).hasLabel('post')"
"使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询用户马轩发布的帖子,被其他用户发布的数量","g.V().has('user', 'name', '马轩').outE('user_publish_post').inV().hasLabel('post').as('b').inE('user_publish_post').outV().hasLabel('user').where(neq('a')).dedup().count()"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询所有person以年龄分组的名字, 根据名字从大到小排序","g.V().hasLabel('person').group().by('age').by(values('name').fold()).order(Scope.local).by(keys, Order.desc)"
"查询从大学重庆大学出发,经过标签为拥有的边,走1跳到达的部门点","g.V().has('university', 'name', '重庆大学').out('has').hasLabel('department')"
"帮我查询评论Comment_416属于的电影,以及上映这些电影的电影院","g.V().hasLabel('comment').has('name', 'Comment_416').outE('belong').inV().hasLabel('film').as('b').inE('releases').outV().hasLabel('cinema').as('c').select('b', 'c')"
 查询与Doctor Du and Jimmy both存在diagnosis关系的点。,"g.V().has('doctor', 'name', '杜若涵').outE('diagnose').inV().as('b').inE('diagnose').outV().has('doctor', 'name', 'Jimmy').select('b')"
返回与公司滴滴和微软都存在合作关系的点,"g.V().has('company', 'name', '滴滴').out('cooperate').as('b').in('cooperate').has('company', 'name', '微软').select('b')"
返回与周红和李思琪都有关联的65个论坛节点,"g.V().has('name', '周红').outE().inV().hasLabel('forum').as('b').inE().outV().has('name', '李思琪').select('b').limit(65)"
"查找标签为部门的点,返回6个",g.V().hasLabel('department').limit(6)
请帮我找出所有名为张国强的点发布的书,"g.V().has('name', '张国强').outE('publish').inV().hasLabel('book')"
查询全部名为Mybatis的节点拥有的仓库或合并请求,"g.V().has('name', 'Mybatis').out('has').hasLabel(within('repository', 'pullRequest')).dedup()"
"查找名为PR-416和PR-278的,标签为合并请求的点公共的朋友节点的名单","g.V().hasLabel('pullRequest').has('name', 'PR-416').out('friend').as('b').in('friend').hasLabel('pullRequest').has('name', 'PR-278').select('b').values('name')"
按名字分组所有账号的id，然后按照id从大到小排序。,"g.V().hasLabel('account').group().by('name').by(values('id').fold()).order(local).by(values, desc)"
"查找被person关联数量大于114的person,记为relationCount,再查询这些person认识的person","g.V().hasLabel('person').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('relates').hasLabel('person').id().max()).select('a', 'relationCount').as('a_with_count').where(__.select('relationCount').is(gt(114))).out('knows').hasLabel('person').as('c').select('c')"
返回与美团有合作关系的大学,"g.V().hasLabel('company').has('name', '美团').inE('cooperate').outV().hasLabel('university')"
"查询源点满足条件id不是48,目标点满足条件id大于66或id小于等于83或stars为空,且类型是uses的边","g.E().hasLabel('uses').where(__.outV().has('id', neq(48))).where(__.inV().or(__.has('id', gt(66)), __.has('id', lte(83)), __.has('stars', null))).project('e').by(__.identity())"
请帮我查找和person黄红之间有恋人关系的person,"g.V().hasLabel('person').has('name', '黄红').outE('lover').inV().hasLabel('person')"
"帮我查询id为131的user有关的forum的friend, 再帮我查询和forum有关系的friend","g.V().has('user', 'id', 131).as('a').bothE().otherV().hasLabel('forum').as('b').bothE('friend').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
 查询李若涵喜欢的人数，以及他们收到的礼物数量。,"g.V().has('person', 'name', '李若涵').outE('likes').inV().hasLabel('person').inE('pay').outV().hasLabel('person').count()"
获取与department关联的teacher节点，按height分组并返回。,g.V().hasLabel('department').bothE('has').otherV().hasLabel('teacher').group().by('height').select(values).unfold()
"查找id为6的user creates的issue, 并将issue有关的user的height的平均值赋值给issue的weight, 接着查询issue的weight小于6的issue belong的repository","g.V().hasLabel('user').has('id', 6).outE('creates').inV().hasLabel('issue').as('b').project('b', 'weight').by(identity()).by(__.inE().outV().hasLabel('user').values('height').mean()).select('b', 'weight').where(select('weight').is(lt(6))).outE('belong').inV().hasLabel('repository').as('d').select('b', 'weight', 'd').by(values('weight')).by(identity())"
"找出wordCount不等于993或createTime是2031年01月05日的comment belong的film的名称,以及这些film has的tag的名称","g.V().hasLabel('comment').or(has('wordCount', neq(993)), has('createTime', '2031-01-05')).outE('belong').inV().hasLabel('film').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"找出名为陈红和何红的,label为person的点公共的friend节点的名单","g.V().has('person', 'name', '陈红').out('friend').as('b').in('friend').has('person', 'name', '何红').select('b').values('name')"
"帮我查询全部源点类型为软件,边类型为使用,且源点id大于等于17且源点id在177到185之间,f1不是false的边","g.V().hasLabel('software').as('a').outE('uses').has('srcId', gte(17)).has('srcId', between(177, 185)).has('f1', neq(false)).as('e').inV().as('b').select('e')"
"找出和标签等于仓库的点有拥有关系的用户,且和这些用户有创造关系的事项,且和这些事项有属于关系的仓库",g.V().hasLabel('repository').as('a').out('has').hasLabel('user').as('b').out('creates').hasLabel('issue').as('c').out('belong').hasLabel('repository').as('d').select('d')
给出person何宏关联的person节点认识的person,"g.V().has('person', 'name', '何宏').out('relates').out('knows')"
 请帮我找出58个与'person'类型的朋友有关系的个人，以及与这些个人有同事关系的个人。,g.V().hasLabel('person').as('a').outE('friend').hasLabel('friend').inV().hasLabel('person').as('b').outE('colleague').hasLabel('colleague').inV().hasLabel('person').as('c').select('c').limit(58)
 查询与书 Java 编程设计相关的作者，他们写了书。,"g.V().hasLabel('book').has('name', 'java程序设计').inE('write').outV().dedup()"
"查找标签等于喜欢,且目标点id大于等于134的边","g.E().hasLabel('likes').has('targetId', gte(134))"
 给出Kate和徐建聪的买家朋友节点名单。,"g.V().has('buyer', 'name', 'kate').out('friend').as('b').in('friend').has('buyer', 'name', '徐建聪').select('b').values('name')"
"给出源点id小于13且薪资大于1812且年龄为空,边标签等于支付,且目标点id的最大值大于534的边,返回这些边的weight的个数加167.13的最大值","g.V().has('id', lt(13)).has('salary', gt(1812)).has('age', eq(null)).outE('pay').as('e').has('targetId', gt(534)).group().by(constant(1)).by(__.select('e').values('weight').count().math('_ + 167.13').max()).select(values).unfold()"
"使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出与名为功夫和少年足球的点共同拥有的,标签为标签的节点","g.V().has('name', '功夫').outE('film_has_tag').inV().hasLabel('tag').as('b').inE('film_has_tag').outV().has('name', '少年足球').select('b')"
找出全部和post Post_351有1跳关系的tag,"g.V().hasLabel('post').has('name', 'Post_351').out().hasLabel('tag')"
"请帮我找出和类型是医生的点有属于关系的部门,以及和这些部门有拥有关系的医生,以及和这些医生有诊断关系的病人",g.V().hasLabel('doctor').as('a').outE('belong').inV().hasLabel('department').as('b').outE('has').inV().hasLabel('doctor').as('c').outE('diagnose').inV().hasLabel('patient').as('d').select('d')
 请问有没有一家叫做微软的公司？,"g.V().hasLabel('company').has('name', '微软')"
"查找全部源点类型是仓库,边类型是拥有,并且满足条件f0大于554或源点id不等于104或目标点id对13取余为566的边","g.V().hasLabel('repository').as('a').outE('has').as('e').where(or(__.select('e').values('f0').is(gt(554)), __.select('e').values('srcId').is(neq(104)), __.select('e').values('targetId').math('_ % 13').is(eq(566)))).select('e')"
 找出王宏和何建聪的共同朋友，共有149个。,"g.V().has('user', 'name', '王宏').as('a').outE('friend').as('e').inV().as('b').inE('friend').as('e2').outV().has('user', 'name', '何建聪').as('c').select('b').limit(149)"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找person的1度以内的环","g.V().hasLabel('person').as('a').bothE().bothV().where(eq('a')).select('a').by('id').project('a.id', 'b_id').by().by(select('a').values('id'))"
请帮我查找全部名为Prescription_362的节点contain的prescription或department或medicine,"g.V().has('name', 'Prescription_362').out('contain').hasLabel(within('prescription', 'department', 'medicine')).dedup()"
查询名为CSDN的论坛,"g.V().hasLabel('forum').has('name', 'CSDN')"
"帮我查询label为department的点,返回11个",g.V().hasLabel('department').limit(11)
查询以查看购买了商品香蕉的买家,"g.V().hasLabel('goods').has('name', '香蕉').inE('look').outV().hasLabel('buyer')"
"查找论坛包含的帖子, 令帖子的名字的值等于包含帖子的论坛的人数的最大值, 再查找帖子拥有的标签","g.V().hasLabel('forum').as('a').outE('contain').inV().hasLabel('post').as('b').select('b').project('name', 'd').by(choose(__.inE('contain').outV().hasLabel('forum').values('peopleNumber').max()).option(none, constant('')).option(any, __.inE('contain').outV().hasLabel('forum').values('peopleNumber').max())).by(outE('has').inV().hasLabel('tag').fold())"
请帮我找出药品的1跳的环,"g.V().hasLabel('medicine').as('a').both().as('b').where(__.as('b').both().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
查找被city天津contain的company,"g.V().hasLabel('city').has('name', '天津').outE('contain').inV().hasLabel('company').as('b').select('b').by().as('a').select('a', 'b')"
"请帮我找出全部源点类型是person,边类型是认识,以及满足条件源点id在194到194之间,f0大于等于557的边","g.V().hasLabel('person').as('a').outE('knows').as('e').where(and(__.select('e').has('srcId', between(194, 194)), __.select('e').has('f0', gte(557)))).select('e')"
"请帮我找出65个名为徐强的点发布的类型为书的节点,且节点id大于等于83","g.V().has('name', '徐强').outE('publish').inV().hasLabel('book').has('id', gte(83)).limit(65)"
 列出身高不超过8461且ID不是50的个人提交的软件名称，以及这些软件所使用的软件名称。,"g.V().hasLabel('person').has('id', neq(50)).group().by().by(values('height').max()).unfold().filter(select(values).is(lt(8461))).select(keys).as('a').outE('commits').as('e').inV().hasLabel('software').as('b').outE('uses').as('e2').inV().hasLabel('software').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"以99,330作为请求点id, 源点的id等于输入表id,帮我查询与名为吴建聪和徐思思的点共同诊断的,标签等于病人的节点","g.withSideEffect('p', [99, 330]).V().has('id', within('p')).where(__.and(__.has('name', '吴建聪'), __.outE('doctor_diagnose_patient').inV().hasLabel('patient').as('b').inE('doctor_diagnose_patient').outV().has('name', '徐思思'))).select('b')"
"请帮我找出17个doctor张思琪和李伟,共同的relation","g.V().hasLabel('doctor').has('name', '张思琪').outE('relation').inV().where(__.inE('relation').hasLabel('relation').outV().hasLabel('doctor').has('name', '李伟')).limit(17)"
"查找公司阿里申请的贷款,以及申请这些贷款的person","g.V().hasLabel('company').has('name', '阿里').outE('apply').inV().hasLabel('loan').as('b').inE('apply').outV().hasLabel('person').as('c').select('b', 'c')"
"查询全部与孙建国存在选择关系的课程,课程与部门存在属于关系的点,返回这些点的id","g.V().has('name', '孙建国').out('selects').hasLabel('course').out('belong').hasLabel('department').id()"
 找出从account LX001转账的账户以及转账数量。,"g.V().has('account', 'name', 'LX001').outE('transfer').inV().as('b').inE('transfer').outV().where(neq('a')).dedup().count()"
"返回person张梅的标签等于伙伴的边,并根据权重升序排列,返回65个","g.V().has('person', 'name', '张梅').outE('partner').as('e').inV().as('b').select('e', 'b').order().by(select('e').values('weight'), asc).limit(65).select('b')"
"给出所有源点类型是film,目标点类型是tag,类型是tag或person或cinema的边","g.V().hasLabel('film').outE('tag', 'person', 'cinema').inV().hasLabel('tag').select('e')"
"请帮我查找公司字节申请的贷款,以及还款这些贷款的账号, 令贷款的是否冻结等于账号的名字,令贷款的是否冻结等于账号的是否冻结,令账号的id等于贷款的id的最大值, 返回公司的人数,贷款的金额,账号的价值","g.V().has('company', 'name', '字节').as('a').outE('apply').inV().hasLabel('loan').as('b').inE('repay').outV().hasLabel('account').as('c').select('b').sideEffect(property('isBlock', select('c').values('name'))).select('b').sideEffect(property('isBlock', select('c').values('isBlock'))).select('c').sideEffect(property('id', select('b').values('id').max())).select('a', 'b', 'c').by('peopleNumber').by('amount').by('value')"
"以('male',7629,'周月')作为请求表数据,属性分别为gender,salary,name, 源点的salary等于输入表salary,给出和person何雪有关的post,称为X,再给出和这个X有关联的其他post,以及和X有关联的forum","g.withSideEffect('p', [['gender': 'male', 'salary': 7629, 'name': '周月']]).V().hasLabel('person').has('salary', select('p').unfold().values('salary')).has('name', '何雪').as('a').bothE().as('e').otherV().hasLabel('post').as('b').bothE().as('e2').otherV().hasLabel('post').as('c').select('b').bothE().as('e3').otherV().hasLabel('forum').as('d').select('a', 'b', 'c', 'd')"
"返回源点label为城市,边label为包含的边,返回这些边的目标点id乘目标点id加173.04乘796的值,和f0减727的值","g.V().hasLabel('city').outE('contain').project('calc1', 'calc2').by(__.values('targetId').math('_ * _').math('_ + 173.04').math('_ * 796')).by(__.values('f0').math('_ - 727'))"
查询被名为'韩国强'的人支付过的所有人的数量。,"g.V().has('person', 'name', '韩国强').outE('pay').inV().hasLabel('person').inE('pay').outV().hasLabel('person').count()"
帮我找出与处方单号为273有关联的所有药品，以及所有包含处方单号273的药品。,"g.V().hasLabel('prescription').has('name', 'Prescription_273').as('a').outE('contain').inV().hasLabel('medicine').as('b').select('a').inE('contain').outV().hasLabel('medicine').as('c').select('a', 'b', 'c')"
"查询与名为东京和广州的点共同包含的,标签为大学的节点","g.V().has('name', '东京').out('contain').hasLabel('university').as('b').in('contain').has('name', '广州').select('b')"
查找被帖子Post_477拥有的标签,"g.V().hasLabel('post').has('name', 'Post_477').as('b').outE('has').as('e').inV().hasLabel('tag').as('a').select('a', 'b')"
 返回陈国强这个publisher标签下的点，并返回这些点的height和gender。,"g.V().hasLabel('publisher').has('name', '陈国强').project('height', 'gender').by('height').by('gender')"
返回复旦大学的部门以及这些部门的学生性别。,"g.V().has('university', 'name', '复旦大学').out('has').hasLabel('department').out('has').hasLabel('student').values('gender')"
"请帮我查找buy software Spark的person,和这些person knows的person","g.V().hasLabel('software').has('name', 'Spark').in('buy').as('b').out('knows').as('c').select('b', 'c')"
找出与person有关的人，或者这些人有关的人。,"g.V().hasLabel('person').outE('relation').inV().range(1, 2).dedup()"
 请找出与李思琪有支付关联的人。,"g.V().hasLabel('person').has('name', '李思琪').inE('pay').outV().dedup()"
返回包含名为韩国和中国的点的city类型的节点,"g.V().has('name', '韩国').out('contain').hasLabel('city').as('b').in('contain').has('name', '中国').select('b')"
"帮我查询id为55的person belong的company, 并将company有关的company的id的平均值赋值给company(b)的peopleNumber, 接着查询company(b)的peopleNumber小于55的company creates的software","g.V().has('person', 'id', 55).out('belong').hasLabel('company').as('b').sideEffect(__.project('avgId').by(__.both().hasLabel('company').values('id').mean()).select('avgId').as('peopleNumber')).where(__.select('peopleNumber').is(lt(55))).out('creates').hasLabel('software').as('d').select('b', 'd').by(__.select('peopleNumber')).by()"
"帮我查询城市伦敦 包含的公司,返回公司 属于的城市的面积除75726的值","g.V().has('city', 'name', '伦敦').out('contain').as('b').out('belong').as('c').select('c').by(values('area').math('/ 75726'))"
 查找同时与张红和徐科有关联的人。,"g.V().has('person', 'name', '张红').bothE('knows').otherV().hasLabel('person').as('b').bothE('pay').otherV().has('person', 'name', '徐科').select('b')"
返回150个与吴梅和张国强都存在关系的作家节点,"g.V().has('name', '吴梅').outE().inV().hasLabel('author').as('b').inE().outV().has('name', '张国强').select('b').limit(150)"
"用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));返回118个student Tom和赵月,共同的partner","g.V().hasLabel('student').has('name', 'Tom').outE('partner').inV().as('b').inE('partner').outV().hasLabel('student').has('name', '赵月').select('b').limit(118)"
"查找与大学武汉大学有关,且与教师王梅有关系的部门节点","g.V().has('university', 'name', '武汉大学').outE('has').inV().hasLabel('department').as('b').outE('has').inV().has('teacher', 'name', '王梅').select('b')"
"给出名为皮肤科的药品或处方,以及与其有关的药品,并返回皮肤科的权重和这些药品的id","g.V().hasLabel(within('medicine', 'prescription')).has('name', '皮肤科').bothE().otherV().hasLabel('medicine').project('a_weight', 'b_id').by(select('a').values('weight')).by(values('id'))"
 请帮我查找名为徐思琪的作家点，并返回它们的ID。,"g.V().hasLabel('author').has('name', '徐思琪').id()"
找出所有拥有学生的法学院，并且找出这些法学院所在的大学，将两者一起返回。,"g.V().has('name', '法学院').as('a').outE('has').inV().hasLabel('student').as('b').select('a').inE('has').outV().hasLabel('university').as('c').select('a', 'b', 'c')"
"找出person徐建聪的所有label为伙伴的边,并根据f0从小到大排列,返回42个","g.V().hasLabel('person').has('name', '徐建聪').outE('partner').order().by('f0', asc).limit(42).inV()"
"请帮我查找和user点有publish关系的post节点,且边满足条件timeStamp不等于2023年12月31日,目标post节点满足条件lang的最大值大于等于164","g.V().hasLabel('user').as('a').outE('publish').as('e').has('timeStamp', neq('2023-12-31')).inV().hasLabel('post').as('b').group().by(identity()).by(values('lang').max()).unfold().filter(select(values).is(gte(164))).select(keys)"
请帮我找出那些人数不为空且id小于99的论坛所包含的帖子及其对应的标签名称,"g.V().hasLabel('forum').has('peopleNumber', neq(null)).has('id', lt(99)).out('contain').hasLabel('post').as('b').out('has').hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"查找学生王建国选择的课程, 令学生的名字等于学生的薪资,令课程的id等于课程的价值加910, 返回学生的性别, 课程的课时","g.V().hasLabel('student').has('name', '王建国').as('a').outE('selects').inV().hasLabel('course').as('b').select('a', 'b').by(project('name', 'gender').by(coalesce(values('salary'), constant(''))).by(values('gender'))).by(project('id', 'courseHour').by(coalesce(math('_ + 910').by(values('value')), constant(''))).by(values('courseHour'))).select(values)"
找出前86个标签等于refers的边,g.E().hasLabel('refers').limit(86)
 找person源点与company目标点之间标签为'belong'的边。,g.V().hasLabel('person').outE('belong').as('e').inV().hasLabel('company').select('e')
"返回名为杯子的goods,以及与其有关的orders,并返回杯子的price和这些orders的name","g.V().hasLabel('goods').has('name', '杯子').bothE().otherV().hasLabel('orders').project('a_price', 'b_name').by(select(all, 'a').unfold().values('price')).by(values('name'))"
返回与账号关联的31个已还款点，以及与这些点关联的账号中有存款关系的账号。,g.V().hasLabel('account').as('a').outE('repay').as('e').inV().hasLabel('loan').as('b').outE('deposit').as('e2').inV().hasLabel('account').as('c').select('c').limit(31)
帮我找一下名为Comment_328的评论,"g.V().hasLabel('comment').has('name', 'Comment_328')"
找到与'电影院好视影院'和'评论Comment_256'都有关系的标签节点，然后返回它们的ID、名称和价值。,"g.V().has('cinema', 'name', '好视影院').outE().inV().hasLabel('tag').as('b').inE().outV().has('comment', 'name', 'Comment_256').select('b').project('id', 'name', 'value').by(values('id')).by(values('name')).by(values('value'))"
"帮我查询论坛中国诗词论坛包含的帖子,以及包含这些帖子的论坛","g.V().hasLabel('forum').has('name', '中国诗词论坛').outE('contain').inV().hasLabel('post').as('b').inE('contain').outV().hasLabel('forum').as('c').select('b', 'c')"
"请帮我查找全部person的朋友,或其朋友的朋友",g.V().hasLabel('person').repeat(out('friend')).times(2).dedup()
 请帮我查找李月卖家所有的商品。,"g.V().hasLabel('seller').has('name', '李月').as('b').outE('has').as('e').inV().hasLabel('goods').as('a').select('a', 'b')"
 请帮我查找包含矿泉水的订单。,"g.V().hasLabel('goods').has('name', '矿泉水').inE('contain').outV().dedup()"
找出与人有关的评论，这些评论创建了属于该人的电影，并且这些电影属于某个标签。,g.V().hasLabel('person').as('a').outE('creates').as('e').inV().hasLabel('comment').as('b').outE('belong').as('e2').inV().hasLabel('film').as('c').outE('has').as('e3').inV().hasLabel('tag').as('d').select('d')
 马若涵和孙轩是48个病人共同的合作伙伴。,"g.V().has('patient', 'name', '马若涵').as('a').outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().has('patient', 'name', '孙轩').as('c').select('b').limit(48)"
"请帮我查找名为经管学院的点拥有的学生,并对这些学生的年龄进行求和","g.V().has('name', '经管学院').out('has').hasLabel('student').values('age').sum()"
请帮我查找公司华为雇佣的person节点提交的软件,"g.V().hasLabel('company').has('name', '华为').out('employee').hasLabel('person').out('commits').hasLabel('software')"
帮我查询与person陈若涵和李轩都存在朋友关系的点,"g.V().has('person', 'name', '陈若涵').out('friend').as('b').in('friend').has('person', 'name', '李轩').select('b')"
"返回与person李思琪存在belong关系,且与person王伟存在employee关系的company节点，返回这些company的value,id,scale,及person李思琪的gender,及person王伟的name","g.V().has('person', 'name', '李思琪').as('a').outE('belong').inV().hasLabel('company').as('b').inE('employee').outV().has('person', 'name', '王伟').as('c').select('a', 'b', 'c').by(values('gender')).by(project('value', 'id', 'scale').by(values('value')).by(values('id')).by(values('scale'))).by(values('name')).select(values)"
"以33,307,264,425作为请求点id, 以属性id作为相等条件,请帮我查找类型为doctor的点,并根据id从小到大排列","g.inject([33, 307, 264, 425]).unfold().as('p').V().hasLabel('doctor').has('id', __.select('p')).order().by('id', asc)"
"请帮我查找id为空且id大于8,或销量在1109.87到1818.75之间的节点","g.V().or(and(hasNot('id'), has('id', gt(8))), has('sellerNumber', between(1109.87, 1818.75)))"
找出与北京大学有关的大学，并查找这些大学中的所有系，然后将它们返回。,"g.V().hasLabel('university').has('name', '北京大学').as('a').bothE().otherV().hasLabel('university').as('b').select('a').outE('has').inV().hasLabel('department').as('c').select('a', 'b', 'c')"
"给出113个和类型是forum的点有contain关系的user,且和这些user有likes关系的post",g.V().hasLabel('forum').as('a').outE('contain').as('e').inV().hasLabel('user').as('b').outE('likes').as('e2').inV().hasLabel('post').as('c').select('c').limit(113)
"找出医生吴强 创造的处方,返回处方 包含的药品的价格除价格的值","g.V().hasLabel('doctor').has('name', '吴强').outE('creates').inV().hasLabel('prescription').outE('contain').inV().hasLabel('medicine').project('result').by(math('_ / _').by('price').by('price'))"
请帮我查找所有与buyer马国强有关系的buyer的age,"g.V().hasLabel('buyer').has('name', '马国强').bothE().otherV().hasLabel('buyer').values('age')"
height对161取余的值,g.V().hasLabel('a').project('height_mod_161').by(values('height').math('_ % 161'))
"输入表的列为age,name,id, 数据为(38,'周雪',53),(76,'陈红',46), 以属性name作为相等条件,查询所有名为赵建聪的,gender不是famale,salary为空的relation,返回这些relation的height,和边的f0,weight,f1","g.inject([['age':38,'name':'周雪','id':53],['age':76,'name':'陈红','id':46]]).as('p').unfold().as('p_row').select('p_row').by(__.project('age','name','id').by(__.select('age')).by(__.select('name')).by(__.select('id'))).V().has('name', '赵建聪').as('a').where(__.as('a').as('p_row').select('a','p_row').by(__.select('name')).by(__.select('name')).where(__.select('a').is(__.select('p_row')))).outE('relation').as('e').inV().as('b').has('gender', neq('famale')).hasNot('salary').select('b','e').by(__.values('height')).by(__.project('f0','weight','f1').by(__.values('f0')).by(__.values('weight')).by(__.values('f1'))).select(values)"
请帮我查找全部和company字节有3度关系的person,"g.V().hasLabel('company').has('name', '字节').repeat(bothE().otherV().simplePath()).times(3).hasLabel('person')"
请帮我查找前156个标签等于创造的边,g.E().hasLabel('creates').limit(156)
"找出和名为周梅的person有同事关系,或有同事的同事关系的person","g.V().has('person', 'name', '周梅').bothE('colleague').otherV().bothE('colleague').otherV().dedup().union(identity(), __.bothE('colleague').otherV()).dedup()"
给出论坛知乎包含的帖子节点拥有的标签,"g.V().hasLabel('forum').has('name', '知乎').out('contain').hasLabel('post').out('has').hasLabel('tag')"
给出id为36的点的id,"g.V().has('id', 36).values('id')"
"查询person黄强支付的person,被其他person喜欢的数量","g.V().has('person', 'name', '黄强').outE('pay').inV().hasLabel('person').inE('likes').outV().hasLabel('person').count()"
 返回陈建聪创建的所有orders中，包含goods的点，并返回这些点的id。,"g.V().has('name', '陈建聪').out('creates').hasLabel('orders').out('contain').hasLabel('goods').values('id')"
帮我查询与loan loan_52有deposit关系的1度的环,"g.V().has('loan', 'name', 'loan_52').as('a').bothE('deposit').bothV().where(neq('a')).as('b').select('a', 'b').by('id').by('id').select(values).project('a.id', 'b_id').by(select('a')).by(select('b'))"
"请帮我查找university的三角的环,边标签等于has, 并返回这些点的id","g.V().hasLabel('university').as('a').out('has').as('b').out('has').as('c').where(__.in('has').as('a')).select('a', 'b', 'c').by().by('id').by('id').project('a', 'b_id', 'c_id').by().by(select('b').values('id')).by(select('c').values('id'))"
"请帮我找出前121个满足条件类别不等于电子产品,名字不等于键盘且类别不等于书籍的商品","g.V().hasLabel('goods').has('category', neq('电子产品')).has('name', neq('键盘')).has('category', neq('书籍')).limit(121)"
"返回和帖子有关联的标签节点,并根据其价值分组,返回价值,以及价值减350减114的最小值",g.V().hasLabel('post').as('a').bothE('has').as('e').otherV().hasLabel('tag').as('b').group().by('b.value').by(__.values('value').math('_ - 350 - 114').min())
请帮我找出与处方Prescription_354相关的病人，并返回包含在Prescription_354中的所有药品。,"g.V().hasLabel('prescription').has('name', 'Prescription_354').as('a').bothE().otherV().hasLabel('patient').as('b').select('a').outE('contain').inV().hasLabel('medicine').as('c').select('a', 'b', 'c')"
"请帮我找出名为何雪和吴伟的,类型是医生的点公共的相关者节点的名单","g.V().has('doctor', 'name', '何雪').outE('relation').inV().as('b').inE('relation').outV().has('doctor', 'name', '吴伟').select('b').values('name')"
返回62个与孙雪和吴伟都存在关系的person节点,"g.V().has('name', '孙雪').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '吴伟').select('b').limit(62)"
请帮我找出与周轩（patient）在呼吸科（department）相关的医生节点,"g.V().hasLabel('department').has('name', '呼吸科').outE('has').inV().hasLabel('doctor').as('b').outE('diagnose').inV().hasLabel('patient').has('name', '周轩').select('b')"
id减28的值,g.V().has('id').project('result').by(values('id').math('_ - 28'))
"查询所有学生的伙伴,或其伙伴的伙伴",g.V().hasLabel('student').as('a').outE('partner').inV().hasLabel('student').as('b').select('b').dedup()
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));查找label为账号,名为Zeus的点,返回这些点的上次登录时间,id,创建时间","g.V().hasLabel('account').has('name', 'Zeus').project('lastLoginTime', 'id', 'createTime').by(values('lastLoginTime')).by(values('id')).by(values('createTime'))"
"请帮我找出account repay的loan, 令loan的amount的值等于applyloan的company的id的最大值, 再查找loan deposit的account","g.V().hasLabel('account').as('a').outE('repay').inV().hasLabel('loan').as('b').project('b_amount', 'd').by(coalesce(select('b').inE('apply').outV().hasLabel('company').id().max(), constant(0))).by(select('b').outE('deposit').inV().hasLabel('account'))"
找到所有性别为女性的person节点，计算它们的年龄差和ID差。,"g.V().hasLabel('person').has('gender', 'famale').project('age_diff', 'id_diff').by(constant(0)).by(constant(0))"
 找出 XiaoHu 尚未偿还的贷款，以及与他有关联的人。,"g.V().has('name', 'XiaoHu').as('a').outE('repay').inV().hasLabel('loan').as('b').select('a').inE('own').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
帮我查询谷歌的点申请的贷款和被投资的person,"g.V().has('name', '谷歌').as('a').outE('apply').inV().as('b').select('a').inE('invest').outV().as('c').select('a', 'b', 'c')"
查询与电影ID为141相关的电影院关系，然后获取与电影院相关的合作伙伴。,"g.V().has('film', 'id', '141').as('a').bothE().otherV().hasLabel('cinema').as('b').bothE('relation').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
" 查询courseHour在42到49之间或id的平均值大于31或id减6大于97的course,按name升序排列，共139个。","g.V().hasLabel('course').or(has('courseHour', between(42, 49)), values('id').mean().is(gt(31)), has('id', gt(103))).order().by('name', asc).limit(139)"
帮我查询卖家的1跳以内的环,"g.V().hasLabel('seller').as('a').bothE().bothV().where(eq('a')).as('b').select('a', 'b').by('id').by('id').select(values).project('a.id', 'b_id').by(select('a')).by(select('b'))"
请帮我查找与公司Bilibili和谷歌都存在属于关系的点,"g.V().has('company', 'name', 'Bilibili').outE('belong').inV().as('b').inE('belong').outV().has('company', 'name', '谷歌').select('b')"
返回与病人周轩有关系的部门的id,"g.V().has('patient', 'name', '周轩').bothE().otherV().hasLabel('department').id()"
"请帮我找出被person孙思琪knows的person,和孙思琪buy的software","g.V().hasLabel('person').has('name', '孙思琪').as('b').outE('knows').inV().hasLabel('person').as('a').select('b').outE('buy').inV().hasLabel('software').as('c').select('a', 'b', 'c')"
"找出student黄强selects的course,以及selects这些course的student, 令course的courseHour等于course的courseHour, 返回student(a)的salary,course(b)的courseHour,student(c)的salary","g.V().hasLabel('student').has('name', '黄强').as('a').outE('selects').inV().hasLabel('course').as('b').inE('selects').outV().hasLabel('student').as('c').select('a', 'b', 'c').by('salary').by('courseHour').by('salary')"
"以634作为请求点id, 以属性id作为相等条件,找出名为孙轩的person","g.V().has('person', 'id', 634).has('name', '孙轩')"
"给出公司蚂蚁集团合作的大学,以及包含这些大学的城市","g.V().hasLabel('company').has('name', '蚂蚁集团').as('a').outE('cooperate').as('e').inV().hasLabel('university').as('b').inE('contain').as('e2').outV().hasLabel('city').as('c').select('b', 'c')"
请帮我找出id为160的卖家的朋友，以及与该卖家有关系的朋友。,"g.V().has('seller', 'id', '160').as('a').bothE().otherV().hasLabel('seller').as('b').both().hasLabel('seller').as('c').select('b').bothE('friend').otherV().hasLabel('seller').as('d').select('a', 'b', 'c', 'd')"
获取与患者郑建聪有关联的处方，然后获取与郑建聪有关联的处方。,"g.V().hasLabel('patient').has('name', '郑建聪').as('a').bothE('accept').otherV().hasLabel('prescription').as('b', 'c').select('a', 'b', 'c')"
"以'ty', 'NY'作为输入调用personalRank函数,返回运算结果","g.call('PERSONALRANK').with('arg0', 'ty').with('arg1', 'NY').select('id', 'value')"
"帮我查询id为28的用户关联的用户,和以拥有关系关联了这些用户的其他仓库","g.V().has('user', 'id', 28).bothE().otherV().hasLabel('user').as('b').inE('has').otherV().hasLabel('repository').as('c').select('b', 'c')"
"使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));给出全部源点标签等于teacher,目标点标签等于course,标签等于teacher_teach_course的边",g.E().hasLabel('teacher_teach_course').where(outV().hasLabel('teacher')).where(inV().hasLabel('course'))
给出全部名为Bilibili的节点合作的国家或公司,"g.V().has('name', 'Bilibili').outE('cooperate').inV().hasLabel(within('country', 'company')).dedup()"
给出与课程大学英语有关系的课程的价值,"g.V().has('course', 'name', '大学英语').bothE().otherV().hasLabel('course').values('value')"
请帮我找出与person郑国强有认识关系的2跳的环,"g.V().has('person', 'name', '郑国强').as('a').out('knows').as('b').where(__.select('b').out().as('c').where(eq('a')).select('c')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
 给出某人的同事，或某同事的同事。,"g.V().hasLabel('person').as('a').outE('colleague').inV().hasLabel('person').range(1, 2).as('b').select('b')"
"查询所有源点label为用户,目标点label为帖子,label为标签或用户的边","g.V().hasLabel('user').bothE('tag', 'user').where(otherV().hasLabel('post'))"
请帮我找出所有和处方Prescription_341之间有包含关系的药品,"g.V().has('prescription', 'name', 'Prescription_341').out('contain').hasLabel('medicine')"
"给出id为168的forum关联的post,和以likes关系关联了这些post的其他user","g.V().has('forum', 'id', 168).bothE().otherV().hasLabel('post').as('b').inE('likes').otherV().hasLabel('user').as('c').select('b', 'c')"
"查询和公司有关联的大学节点,并根据其等级,名字,id分组,返回等级,名字,id,以及等级减2的值","g.V().hasLabel('company').bothE('cooperate').otherV().hasLabel('university').group().by(project('level', 'name', 'id').by(values('level')).by(values('name')).by(values('id'))).by(project('level', 'name', 'id', 'level_minus_2').by(values('level')).by(values('name')).by(values('id')).by(values('level').is(neq(null)).math('_ - 2'))).unfold().select(values).unfold()"
给出账号TheShy转账的账号节点还款的贷款,"g.V().hasLabel('account').has('name', 'TheShy').outE('transfer').inV().hasLabel('account').outE('repay').inV().hasLabel('loan')"
"请帮我查找名为马克思原理的点belong的所有department,并对这些department的name进行求和","g.V().has('name', '马克思原理').out('belong').hasLabel('department').values('name').sum()"
"以(47,'马红',177)作为请求表数据,属性分别为id,name,height, 以属性name作为相等条件,找出和person何雪有关系的person节点,返回这些点的名字","g.inject([47, '马红', 177]).as('p').V().hasLabel('person').has('name', '何雪').bothE().otherV().hasLabel('person').values('name')"
"查询和名为李建聪的买家有伙伴关系,或有伙伴的伙伴关系的订单","g.V().hasLabel('buyer').has('name', '李建聪').outE('partner').inV().hasLabel('orders').union(identity(), outE('partner').inV().hasLabel('orders')).dedup()"
"返回96个和类型是书的点有引用关系的书,且和这些书有引用关系的书",g.V().hasLabel('book').as('a').out('refers').hasLabel('book').as('b').out('refers').hasLabel('book').as('c').select('c').limit(96)
"输入请求点id的列表575,949,301,910, 以属性id作为相等条件,请帮我找出和名为李红的person有friend关系,或有friend的friend关系的person","g.inject([575, 949, 301, 910]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).filter(__.has('name', '李红')).repeat(__.out('friend').simplePath()).times(2).emit().hasLabel('person').dedup()"
 查询华为和美团之间存在的关联。,"g.V().has('company', 'name', '华为').outE('belong').inV().as('b').inE('belong').outV().has('company', 'name', '美团').select('b')"
"输入表的列为age,id,salary, 数据为(46,66,3500),(90,90,9812),(30,98,4566),(1,7,4512), 源点的salary等于输入表salary,给出buyer以height分组的gender, 根据gender从小到大排序","g.inject([['age':46,'id':66,'salary':3500],['age':90,'id':90,'salary':9812],['age':30,'id':98,'salary':4566],['age':1,'id':7,'salary':4512]]).as('p').unfold().as('row').select('row').by(__.values('salary')).as('salary_val').V().hasLabel('buyer').as('a').where(eq('a')).by('salary').by('salary_val').group().by('height').by(__.values('gender').fold()).order(local).by(__.select(values).unfold().min())"
"查找从account XXD出发,经过标签为transfer的边,走2到4度到达的account点","g.V().has('account', 'name', 'XXD').repeat(out('transfer')).times(2).emit().repeat(out('transfer')).times(2).dedup().hasLabel('account')"
返回以购买关系关联了软件Hive的person,"g.V().hasLabel('software').has('name', 'Hive').in('buy').hasLabel('person')"
"以218作为请求点id, 以属性id作为相等条件,请帮我找出和名为Post_215的帖子有伙伴关系,或有伙伴的伙伴关系的标签","g.withSideEffect('p_id', 218).V().hasLabel('post').has('id', 218).has('name', 'Post_215').repeat(out('partner')).times(2).emit().hasLabel('tag').dedup()"
 查询与'defaultName'和'defaultName1'有关系的100个'person'节点。,"g.V().has('name', 'defaultName').outE().as('e').inV().hasLabel('person').as('b').inE().as('e2').outV().has('name', 'defaultName1').select('b').limit(130)"
 杜轩和张思琪的公共朋友节点名单是什么？,"g.V().has('person', 'name', '杜轩').outE('friend').inV().as('b').inE('friend').outV().has('person', 'name', '张思琪').select('b').values('name')"
请帮我查询与我所查公司有城市关联，且这些城市又与其他国家存在包含关系的国家。,"g.V().has('company', 'id', '56').bothE().otherV().hasLabel('city').as('b').inE('contain').otherV().hasLabel('country').as('c').select('b', 'c')"
"给出所有源点类型为部门,边类型为拥有,并且满足条件目标点id在8到38之间的边","g.V().hasLabel('department').outE('has').has('targetId', between(8, 38))"
"查询id为131的点的gender,salary,age","g.V().has('id', 131).project('gender', 'salary', 'age').by(values('gender')).by(values('salary')).by(values('age'))"
"用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询与名为黄月和孙科的点共同relates的,标签等于person的节点","g.V().has('name', '黄月').outE('relates').inV().hasLabel('person').as('b').inE('relates').outV().has('name', '孙科').select('b')"
"请帮我查找作家马科撰写的书, 令作家的名字等于作家的薪资除薪资除173,令书的价格等于书的价格除25, 返回作家的年龄, 书的创建时间","g.V().has('author', 'name', '马科').as('a').outE('write').inV().hasLabel('book').as('b').select('a', 'b').by(choose(values('name'), constant('')).by(constant(''))).by(choose(values('name'), constant('')).by(constant(''))).by(choose(values('price'), constant('')).by(constant(''))).by(choose(values('price'), constant('')).by(constant(''))).select('a', 'b').by(values('age')).by(values('createTime'))"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出标签为person的点,返回65个",g.V().hasLabel('person').limit(65)
"帮我查询全部教师以身高,薪资分组的薪资, 根据薪资升序排序","g.V().hasLabel('teacher').group().by(values('height', 'salary').fold()).by(values('salary').fold()).order(local).by(__.tail(local, 1), Order.asc)"
"请帮我找出被person周思琪认识的person,和周思琪认识的person","g.V().has('person', 'name', '周思琪').as('b').outE('knows').inV().as('c').inE('knows').outV().as('a').select('a', 'b', 'c')"
"找出被教师教数量大于133的课程,记为relationCount,再查询这些课程教的大学","g.V().hasLabel('course').as('a').project('a', 'relationCount').by(__.identity()).by(__.inE('teach').hasLabel('teacher').outV().id().sum()).select('a', 'relationCount').as('a_relationCount').select('a_relationCount').where(__.select('relationCount').is(gt(133))).select('a').outE('teach').hasLabel('university').inV().dedup()"
"以392,170,267,225,141作为请求点id, 以属性id作为相等条件,请帮我查找以拥有关系关联了标签科幻的电影","g.withSideEffect('p', [392, 170, 267, 225, 141]).V().hasLabel('tag').has('id', within('p')).has('name', '科幻').in('film_has_tag').hasLabel('film')"
"给出属于事项ISSUE-418属于的仓库,的事项","g.V().hasLabel('issue').has('name', 'ISSUE-418').outE('belong').inV().hasLabel('repository').as('b').inE('belong').outV().hasLabel('issue').as('c').select('b', 'c')"
帮我查询university四川大学has的department节点has的student,"g.V().has('university', 'name', '四川大学').out('has').hasLabel('department').out('has').hasLabel('student')"
"以('Prescription_334',2025-09-20,18)作为请求表数据,属性分别为name,createTime,id, 以属性name作为相等条件,返回id为168的用户有关的用户的相关者, 再返回和用户有关系的朋友","g.withSideEffect('p', [['name': 'Prescription_334', 'createTime': '2025-09-20', 'id': 18]]).V().hasLabel('user').has('name', within('Prescription_334')).has('id', '168').as('a').bothE().otherV().hasLabel('user').as('b').outE('relation').inV().as('c').select('b').outE('friend').inV().as('d').select('a', 'b', 'c', 'd')"
找出所有包含在美国内的城市，以及这些城市内包含大学的点，并返回这些点的ID。,"g.V().has('name', '美国').out('contain').hasLabel('city').out('contain').hasLabel('university').values('id')"
请帮我找出所有与周红存在取消关系的订单，以及这些订单中包含的商品点，并返回这些点的价值。,"g.V().has('name', '周红').outE('cancel').inV().hasLabel('orders').outE('contain').inV().hasLabel('goods').values('value')"
请帮我找出所有类型是作家或书的点,"g.V().hasLabel(within('author', 'book'))"
查询所有年龄大于或等于43并且与prescription有关联的用户，返回他们的最大年龄除以7和ID乘以64的结果。,"g.V().hasLabel('prescription').as('a').outE().as('e').inV().hasLabel('user').has('age', gte(43)).as('b').select('b').by(values('age').math('_ / 7')).max().as('max_age_div_7').select('b').by(values('id').math('_ * 64')).as('id_times_64').select('max_age_div_7', 'id_times_64')"
"给出和标签为论坛的点有包含关系的用户,且和这些用户有发布关系的帖子,且和这些帖子有拥有关系的标签",g.V().hasLabel('forum').as('a').out('contain').hasLabel('user').as('b').out('publish').hasLabel('post').as('c').out('has').hasLabel('tag').as('d').select('d')
 找出用户喜欢但名字不是吴科或黄轩的帖子，并给出这些帖子包含的标签。,"g.V().hasLabel('user').has('name', neq('吴科')).has('name', neq('黄轩')).outE('likes').inV().hasLabel('post').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"查询144个和标签为用户的点有喜欢关系的帖子,以及和这些帖子有拥有关系的标签",g.V().hasLabel('user').as('a').outE('likes').as('e').inV().hasLabel('post').as('b').outE('has').as('e2').inV().hasLabel('tag').as('c').select('c').limit(144)
"返回是否冻结不是false的账号还款的贷款的名称,以及这些贷款 存款的账号的名称","g.V().hasLabel('account').has('isBlock', neq(false)).outE('repay').inV().hasLabel('loan').as('b').outE('deposit').inV().hasLabel('account').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 查询与哪些城市相关的大学以及这些城市与其他哪些国家有包含关系。,"g.V().has('university', 'id', '105').bothE().otherV().hasLabel('city').as('b').inE('contain').outV().hasLabel('country').as('c').select('b', 'c')"
查询名为吴国强的点喜欢的评论,"g.V().has('name', '吴国强').outE('likes').inV().hasLabel('comment')"
"查找类型为拥有,并且源点id不为空,f0不是645且f1是true的边","g.E().hasLabel('has').has('srcId', neq(null)).has('f0', neq(645)).has('f1', true)"
获取名为陈月的作者的所有点，返回这些点的salary、age和height属性。,"g.V().has('author', 'name', '陈月').project('salary', 'age', 'height').by('salary').by('age').by('height')"
"查找122个买家吴梅和马建聪,共同的相关者","g.V().has('buyer', 'name', '吴梅').outE('relation').inV().as('b').inE('relation').outV().has('buyer', 'name', '马建聪').select('b').limit(122)"
"输入请求点id的列表992, 以属性id作为相等条件,返回Order_487的点contain的goods,然后返回Order_487被cancel的buyer,一起返回","g.withSideEffect('p', [992]).V().has('id', within('p')).has('name', 'Order_487').as('a').outE('orders_contain_goods').inV().hasLabel('goods').as('b').select('a').inE('buyer_cancel_orders').outV().hasLabel('buyer').as('c').select('a', 'b', 'c')"
给出全部和部门法学院有1度关系的部门,"g.V().has('department', 'name', '法学院').out().hasLabel('department')"
查找前156个label为拥有的边,g.E().hasLabel('has').limit(156)
与名为张若涵的读者建立伙伴关系，或者拥有伙伴的书籍。,"g.V().hasLabel('reader').has('name', '张若涵').outE('partner').inV().hasLabel('book').dedup()"
找出与张科和周强都有关联的帖子节点，返回它们的ID、创建时间和语言。,"g.V().has('person', 'name', '张科').outE().inV().hasLabel('post').as('b').inE().outV().has('user', 'name', '周强').select('b').values('id', 'createTime', 'lang')"
"找出和标签为person的点有lover关系的person,并且和这些person有parent关系的person,并且和这些person有family关系的person",g.V().hasLabel('person').as('a').out('lover').hasLabel('person').as('b').out('parent').hasLabel('person').as('c').out('family').hasLabel('person').as('d').select('d')
"输入请求点id的列表439,377,156,91,833, 源点的id等于输入表id,请帮我找出与书白夜行有关系的书, 返回和这些书有关联的书的,id的个数减11的最小值","g.inject([439, 377, 156, 91, 833]).as('p').flatMap(select('p')).unfold().as('id').V().hasLabel('book').has('id', where(eq('id'))).has('name', '白夜行').as('a').bothE().as('e').otherV().hasLabel('book').as('b').bothE().as('e2').otherV().hasLabel('book').as('c').select('c').by('id').groupCount().unfold().select(values).math('_ - 11').min()"
找出所有与读者有关联的书籍，以及这些书籍与其他编辑之间的发布关系。,"g.V().hasLabel('reader').has('id', '178').bothE().otherV().hasLabel('book').as('b').inE('publish').otherV().hasLabel('publisher').as('c').select('b', 'c')"
"请帮我查找与person杜宏存在支付关系,且与person马雪存在喜欢关系的person节点，返回这些person的薪资,年龄,名字,及person杜宏的薪资,及person马雪的薪资","g.V().has('person', 'name', '杜宏').as('a').outE('pay').inV().hasLabel('person').as('b').inE('likes').outV().has('person', 'name', '马雪').as('c').select('a', 'b', 'c').by(values('salary')).by(values('salary', 'age', 'name')).by(values('salary'))"
查询全部与person kate有关系的person的salary,"g.V().hasLabel('person').has('name', 'kate').bothE().otherV().hasLabel('person').values('salary')"
请帮我找出所有与公司有关联的节点，但这些节点的价值不等于817。然后，我需要计算这些节点的value的平均值除以value的总和再乘以973的平均值。,"g.V().hasLabel('company').as('a').outE().as('e').inV().hasLabel('company').has('value', neq(817)).as('b').select('b').values('value').fold().as('values').select('values').unfold().mean().as('avg').select('values').unfold().sum().as('sum').select('avg').math('_ / ').by(select('sum')).math('_ * 973').mean()"
"找出所有名为李国强的点的,salary在5427到6163之间或salary大于7392的partner,返回这些partner的name,和边的f0,srcId","g.V().has('name', '李国强').outE('partner').as('e').inV().has('salary', between(5427, 6163).or(gt(7392))).project('b_name', 'e_f0', 'e_srcId').by(values('name')).by(select('e').values('f0')).by(select('e').values('srcId'))"
"以'cw', 'gP'作为输入调用SSSP函数,返回id, distance","g.call('SSSP').with('input1', 'cw').with('input2', 'gP').select('id', 'distance')"
"请帮我查找与名为百度贴吧和知网的点共同包含的,标签为用户的节点","g.V().has('name', '百度贴吧').out('contain').hasLabel('user').where(__.in('contain').has('name', '知网')).dedup()"
请帮我找出全部名为黄雪的点接受的处方,"g.V().has('name', '黄雪').outE('accept').inV().hasLabel('prescription')"
 查询带有标签'公司'且名称为'谷歌'的点，并返回它们的坐标规格。,"g.V().hasLabel('company').has('name', '谷歌').values('scale')"
"返回person knows的person, 令person(b)的height的值等于relatesperson的person的height的和, 再查找person knows的person","g.V().hasLabel('person').as('a').outE('knows').inV().hasLabel('person').as('b').sideEffect(select('b').aggregate('b_node')).select('b').inE('relates').outV().hasLabel('person').values('height').sum().as('b_height').select('b_node').sideEffect(property('height', select('b_height').by())).select('b').outE('knows').inV().hasLabel('person').as('d').select('b', 'd').by('height').by()"
"返回id为111的公司有关的公司的伙伴, 再返回和公司有关系的朋友","g.V().hasLabel('company').has('id', 111).as('a').bothE().otherV().hasLabel('company').as('b').both().as('c').select('b').outE('partner').otherV().as('c').select('b').outE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
"帮我查询165个和标签为国家的点有包含关系的城市,且和这些城市有包含关系的公司",g.V().hasLabel('country').out('contain').hasLabel('city').out('contain').hasLabel('company').limit(165)
"输入表的列为id,name,value, 数据为(90,'喜剧',264),(6,'历史',128),(97,'其他',68), 以属性name作为相等条件,查找与论坛天涯论坛有forum_contain_person关系的1跳以内的环","g.withSideEffect('p', [[90, '喜剧', 264], [6, '历史', 128], [97, '其他', 68]]).V().hasLabel('forum').has('name', '天涯论坛').as('a').bothE('forum_contain_person').bothV().where(neq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
 查询与黄伟有家人关系且与他是同事的人。,"g.V().has('person', 'name', '黄伟').as('a').outE('family').inV().hasLabel('person').as('b').select('a').inE('colleague').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"找出所有源点id大于等于44,目标点价值在75到660之间,且类型为属于的边","g.E().hasLabel('belong').where(outV().has('id', gte(44))).where(inV().has('value', between(75, 660)))"
请帮我找与韩建聪和马若涵都有关系的person节点,"g.V().has('person', 'name', '韩建聪').bothE('colleague').otherV().hasLabel('person').as('b').bothE('friend').otherV().has('person', 'name', '马若涵').select('b')"
" Comment的partner,或者是partner的partner。",g.V().hasLabel('comment').as('a').outE('partner').inV().hasLabel('comment').as('b').select('b')
"请帮我查找所有源点类型为person,边类型为likes的边,返回这些边的f0的求和值加622的数量,和weight除188.80的值","g.V().hasLabel('person').outE('likes').project('count_sum_f0_plus_622', 'weight_div_188_80').by(__.values('f0').sum().math('_ + 622').count()).by(__.values('weight').math('_ / 188.80'))"
"用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找id为61的点的gender,height,id","g.V().has('id', 61).project('gender', 'height', 'id').by('gender').by('height').by('id')"
"查找id为191的城市属于的国家, 并将国家有关的大学的等级的平均值赋值给国家的id, 接着查询国家的id小于191的国家包含的城市","g.V().has('city', 'id', 191).as('a').outE('belong').inV().hasLabel('country').as('b').sideEffect(__.select('b').aggregate('b_agg')).select('b').bothE().inV().hasLabel('university').values('level').mean().as('avg_level').select('b_agg').unfold().has('country', 'id', lt(191)).as('b_filtered').outE('contain').inV().hasLabel('city').as('d').select('b_filtered', 'd').by('id').by()"
"以66, 'tq'作为输入调用SSSP函数,返回运算结果","g.withSideEffect('startVertex', 66).withSideEffect('edgeProperty', 'tq').call('sssp').select('id', 'distance')"
"以529,837,535作为请求点id, 以属性id作为相等条件,请帮我找出以pay关系关联了person杜建国的person","g.inject([529, 837, 535]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('name', '杜建国').in('person_pay_person').as('b').select('b')"
 请帮我查找孙建聪认识的人，以及孙建聪被认识的人。,"g.V().has('name', '孙建聪').as('a').outE('knows').inV().hasLabel('person').as('b').select('a').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
返回与论坛知乎有关系的帖子的字数,"g.V().hasLabel('forum').has('name', '知乎').bothE().otherV().hasLabel('post').values('wordCount')"
找到与被标记为'person'的点有'likes'关系的评论，以及与这些评论有'belongs'关系的电影，以及与这些电影有'has'关系的标签。,g.V().hasLabel('person').out('likes').hasLabel('comment').out('belong').hasLabel('film').out('has').hasLabel('tag').dedup()
 查询两个大学中，标签为'大学'的共同相关者节点。,"g.V().has('university', 'name', '中国科技大学').outE('relation').inV().as('b').inE('relation').outV().has('university', 'name', '华中科技大学').select('b').values('name')"
"帮我查询和事项ISSUE-276有关的合并请求,再帮我查询和ISSUE-276属于的其他仓库,返回它们","g.V().hasLabel('issue').has('name', 'ISSUE-276').as('a').bothE().as('e').otherV().hasLabel('pullRequest').as('b').select('a').bothE('belong').as('e2').otherV().hasLabel('repository').as('c').select('a', 'b', 'c')"
"根据id,amount,weight分组,计算amount除amount的最大值","g.V().group().by(project('id', 'amount', 'weight').by('id').by('amount').by('weight')).by(values('amount').math('_ / _').max())"
"输入请求点id的列表531, 源点的id等于输入表id,请帮我找出和person李建国有关系的person节点,返回这些点的年龄","g.withSideEffect('p', [531]).V().hasLabel('person').has('id', __.select('p')).has('name', '李建国').bothE().otherV().hasLabel('person').values('age')"
给出全部标签为software的点,g.V().hasLabel('software')
获取cinema大众影院发布的电影，返回该电影拥有的标签的id、name和value。,"g.V().hasLabel('cinema').has('name', '大众影院').outE('releases').inV().hasLabel('film').outE('has').inV().hasLabel('tag').project('id', 'name', 'value').by(id()).by(values('name')).by(values('value'))"
 查询所有卖家关联的商品，以及与这些商品有查看关系的其他买家。,"g.V().hasLabel('seller').has('id', '63').bothE().otherV().hasLabel('goods').as('b').inE('look').outV().hasLabel('buyer').as('c').select('b', 'c')"
"返回id为14的person关联的公司,和以属于关系关联了这些公司的其他person","g.V().has('person', 'id', 14).bothE().otherV().hasLabel('company').as('b').inE('belong').otherV().hasLabel('person').as('c').select('b', 'c')"
请帮我找出与公司相关的城市节点，并按面积和人口进行分组，然后返回这些信息。,"g.V().hasLabel('company').bothE('belong').bothV().hasLabel('city').group().by(values('area', 'peopleNumber')).select(values)"
"查询和标签等于software的点有uses关系的software,并且和这些software有uses关系的software,并且和这些software有uses关系的software",g.V().hasLabel('software').as('a').out('uses').hasLabel('software').as('b').out('uses').hasLabel('software').as('c').out('uses').hasLabel('software').as('d').select('d')
"给出性别是male且名字等于马思思的person投资的公司的名称,以及这些公司 申请的贷款的名称","g.V().hasLabel('person').has('gender', 'male').has('name', '马思思').outE('invest').inV().hasLabel('company').as('b').outE('apply').inV().hasLabel('loan').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我查找company美团cooperate的university, 令company的id等于company的value除998乘929的最大值, 返回company的value, university的id","g.V().hasLabel('company').has('name', '美团').as('a').outE('cooperate').inV().hasLabel('university').as('b').select('a', 'b').by('value').by('id').project('a.value', 'b.id').by(select('a')).by(select('b'))"
"使用列为peopleNumber,value,id, 数据为(992,885,2),(938,669,53),(930,646,16),(589,903,72)的子查询作为输入表, 以属性value作为相等条件,请帮我找出76个id在2到61之间,创建时间不等于2023年05月13日,或名字不是BIN的账号,根据名字从小到大排列","g.withSideEffect('p', [[992,885,2],[938,669,53],[930,646,16],[589,903,72]]).V().hasLabel('account').as('a').where(__.select('a').has('value', __.select('p').unfold().select('value'))).where(__.select('a').or(__.and(__.has('id', between(2, 61)), __.has('createTime', neq('2023-05-13'))), __.has('name', neq('BIN')))).order().by('name', asc).limit(76).select('a')"
请帮我找出被城市深圳包含的大学,"g.V().has('city', 'name', '深圳').outE('contain').inV().hasLabel('university').as('b').inE('contain').outV().as('a').select('a', 'b')"
 请帮我查询名为Alice和郑宏的人共同选择的标签为course的课程节点。,"g.V().has('name', 'Alice').outE('selects').inV().hasLabel('course').as('b').inE('selects').outV().has('name', '郑宏').select('b')"
"用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出user何国强的friend的relation的friend","g.V().has('user', 'name', '何国强').out('friend').out('relation').out('friend')"
"帮我查询编辑发布的书,返回其源点的id减42的最大值,以及目标点的价格乘30的个数","g.V().hasLabel('publisher').as('a').outE('publish').as('e').inV().hasLabel('book').as('b').project('max_id_minus_42', 'count_price_times_30').by(__.select('a').values('id').math('_ - 42').max()).by(__.select('b').values('price').math('_ * 30').count())"
"查找180个id大于等于22或名字为四川大学的大学,根据等级升序排列","g.V().hasLabel('university').or(has('id', gte(22)), has('name', '四川大学')).order().by('level', asc).limit(180)"
"帮我查询与部门传染部有关,且与病人吴思琪有关系的医生节点","g.V().has('department', 'name', '传染部').out('has').hasLabel('doctor').as('b').out('diagnose').has('patient', 'name', '吴思琪').select('b')"
 请找出与中国诗词论坛有包含关系且与古代标签有has关系的帖子，并返回帖子的创建时间、语言、单词计数、中国诗词论坛的用户数量和古代标签的名称。,"g.V().has('forum', 'name', '中国诗词论坛').as('a').outE('contain').inV().hasLabel('post').as('b').inE('has').outV().has('tag', 'name', '古代').as('c').select('a', 'b', 'c').by('peopleNumber').by(values('createTime', 'lang', 'wordCount')).by('name')"
查找与黄红朋友相关的人的朋友,"g.V().has('person', 'name', '黄红').out('friend').out('relation').out('friend')"
"返回所有和买家李雪有关系的订单或卖家或商品,返回这些点的id,身高,年龄","g.V().has('buyer', 'name', '李雪').bothE().otherV().hasLabel(within('orders', 'seller', 'goods')).project('id', 'height', 'age').by(id()).by(values('height')).by(values('age'))"
"输入表的列为name,id,category, 数据为('建国大业',19,'科幻'),('绿巨人',41,'文艺'), 以属性category作为相等条件,请帮我找出名为Comment_214和Comment_368的,标签为comment的点公共的friend节点的名单","g.inject(['建国大业', 19, '科幻'], ['绿巨人', 41, '文艺']).as('p').select('p').unfold().as('row').project('name', 'id', 'category').by(select('row').limit(1)).by(select('row').skip(1).limit(1)).by(select('row').skip(2).limit(1)).as('p').select('p').by('category').as('cat').V().hasLabel('comment').has('name', 'Comment_214').as('a').where(__.as('a').values('category').as('a_cat').select('cat').where(eq('a_cat'))).bothE('friend').otherV().as('b').where(__.V().hasLabel('comment').has('name', 'Comment_368').as('c').where(__.as('c').values('category').as('c_cat').select('cat').where(eq('c_cat'))).bothE('friend').otherV().where(eq('b'))).select('b').values('name')"
"给出所有和person黄红有关系的person,返回这些点的年龄,id,名字","g.V().hasLabel('person').has('name', '黄红').bothE().otherV().hasLabel('person').project('age', 'id', 'name').by(values('age')).by(values('id')).by(values('name'))"
"根据value,peopleNumber,name分组,计算peopleNumber的最小值对767取余的最小值","g.V().hasLabel('a').group().by(union(identity().values('value'), identity().values('peopleNumber'), identity().values('name')).fold()).by(values('peopleNumber').min()).unfold().select(values).min().math('_ % 767').min()"
 返回张红和黄建聪的共同作者关系节点列表。,"g.V().has('author', 'name', '张红').as('a').outE('relation').as('e').inV().as('b').inE('relation').as('e2').outV().has('author', 'name', '黄建聪').as('c').select('b').values('name')"
"以47,869,770,829,463作为请求点id, 以属性id作为相等条件,查找和处方Prescription_272有prescription_contain_medicine关系的药品,再查找以prescription_contain_medicine关系关联了Prescription_272的药品","g.inject([47, 869, 770, 829, 463]).unfold().as('p').V().hasLabel('prescription').has('id', __.select('p')).has('name', 'Prescription_272').as('a').outE('prescription_contain_medicine').inV().hasLabel('medicine').as('b').select('a').inE('prescription_contain_medicine').outV().hasLabel('medicine').as('c').select('a', 'b', 'c')"
"返回源点label为书,目标点label为书,label为编辑或读者或作家的边","g.V().hasLabel('book').as('a').outE('publisher', 'reader', 'author').as('e').inV().hasLabel('book').as('b').select('e')"
"请帮我查找194个department体育学院和计算机学院,共同的relation","g.V().has('department', 'name', '体育学院').outE('relation').inV().as('b').inE('relation').outV().has('department', 'name', '计算机学院').select('b').limit(194)"
"返回与名为杜建国和陈国强的点共同创造的,类型是事项的节点","g.V().has('name', '杜建国').outE('creates').inV().hasLabel('issue').as('b').inE('creates').outV().has('name', '陈国强').select('b')"
"找出源点类型为买家,边类型为查看,以及源点id大于87或f1是false的边","g.V().hasLabel('buyer').as('a').outE('look').as('e').where(or(__.select('e').values('srcId').is(gt(87)), __.select('e').values('f1').is(eq(false)))).select('e')"
"查询名为PR-273的事项或仓库,以及与其有关的用户,并返回PR-273的id和这些用户的性别","g.V().has(label, within('issue', 'repository')).has('name', 'PR-273').bothE().otherV().has(label, 'user').project('a.id', 'b.gender').by(select(all, 'a').values('id')).by(values('gender'))"
"用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询全部名为Faker的点transfer的account","g.V().has('account', 'name', 'Faker').outE('account_transfer_account').inV().hasLabel('account')"
找出所有与Comment_457有belong关系的film，以及这些film与tag有has关系的所有点，并返回这些点的名字。,"g.V().has('name', 'Comment_457').out('belong').hasLabel('film').out('has').values('name')"
 请帮我查找与黄国强有关、出售鞋子的卖家。,"g.V().has('buyer', 'name', '黄国强').bothE('consult').otherV().hasLabel('seller').bothE('has').otherV().has('goods', 'name', '鞋子').select('seller')"
"返回和电影变形金刚有关的评论,称为X,再返回和这个X有关联的其他person,以及和X有关联的person","g.V().hasLabel('film').has('name', '变形金刚').as('a').bothE().otherV().hasLabel('comment').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
 帮我查询与类型为'person'的实体有亲属关系的人，以及与这些人有关恋人关系的人，以及与这些人有关亲属关系的人。,g.V().hasLabel('person').as('a').outE('family').as('e').inV().hasLabel('person').as('b').outE('lover').as('e2').inV().hasLabel('person').as('c').outE('family').as('e3').inV().hasLabel('person').as('d').select('d')
"返回所有和person赵思琪有关系的person,返回这些点的年龄,性别","g.V().has('person', 'name', '赵思琪').bothE().otherV().hasLabel('person').project('age', 'gender').by(values('age')).by(values('gender'))"
"帮我查询类型是帖子的点,返回101个",g.V().hasLabel('post').limit(101)
 列出所有起点是教师，终点是课程，且标签为'教'的边。,g.V().hasLabel('teacher').outE('teach').inV().hasLabel('course').select('e')
 找出与ID为122的人有关联的人，再找出与这些人有关联的人。,"g.V().has('person', 'id', '122').bothE().otherV().hasLabel('person').as('a').bothE().otherV().hasLabel('person').as('b').bothE('relation').otherV().as('c').select('a', 'b', 'c').by().by().by()"
帮我查询和person陈梅有2跳关系的person,"g.V().has('person', 'name', '陈梅').repeat(bothE().otherV().simplePath()).times(2).hasLabel('person').dedup()"
"查找与person黄月存在属于关系,且与person王轩存在雇佣关系的公司节点，返回这些公司的人数,及person黄月的名字,及person王轩的薪资","g.V().has('person', 'name', '黄月').as('a').outE('belong').inV().hasLabel('company').as('b').inE('employee').outV().has('person', 'name', '王轩').as('c').select('a', 'b', 'c').by('name').by('peopleNumber').by('salary')"
"查找创造合并请求PR-432的用户,和这些用户喜欢的仓库","g.V().hasLabel('pullRequest').has('name', 'PR-432').as('a').in('creates').as('b').out('likes').as('c').select('b', 'c')"
"返回与名为大众影院和好视影院的点共同上映的,label为电影的节点","g.V().has('name', '大众影院').outE('releases').inV().hasLabel('film').as('b').inE('releases').outV().has('name', '好视影院').select('b')"
"给出全部id为75的film关联的comment,和以likes关系关联了这些comment的其他person","g.V().has('film', 'id', 75).bothE().otherV().hasLabel('comment').as('b').inE('likes').otherV().hasLabel('person').as('c').select('b', 'c')"
"请帮我查找和学生杜思琪有关的课程,称为X,再请帮我查找和这个X有关联的其他学生,以及和X有关联的部门","g.V().has('student', 'name', '杜思琪').as('a').bothE().as('e').otherV().hasLabel('course').as('b').bothE().as('e2').otherV().hasLabel('student').as('c').select('b').bothE().as('e3').otherV().hasLabel('department').as('d').select('a', 'b', 'c', 'd')"
"返回label为apply,以及满足条件f1等于false的边","g.E().hasLabel('apply').has('f1', false)"
"给出所有与王国强存在喜欢关系的帖子,帖子与标签存在拥有关系的点,返回这些点的名字","g.V().has('name', '王国强').out('likes').hasLabel('post').out('has').hasLabel('tag').values('name')"
请帮我找出所有label为药品的点,g.V().hasLabel('medicine')
 请帮我查询部门ID大于99或名称中包含'文学院'的部门中，教师的名称以及他们所授课程的名称。,"g.V().hasLabel('department').or(has('id', gt(99)), has('name', '文学院')).outE('has').inV().hasLabel('teacher').as('b').outE('teach').inV().hasLabel('course').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 查找徐伟和李梅共同知道的点。,"g.V().has('author', 'name', '徐伟').out('knows').as('b').in('knows').has('author', 'name', '李梅').select('b')"
"找出id为122的点的名字,年龄","g.V().has('id', 122).project('a.name', 'a.age').by('name').by('age')"
请帮我找出所有源点标签是book，目标点标签也是book，并且标签是refers的边。,g.V().hasLabel('book').outE('refers').where(inV().hasLabel('book'))
给出id为28的点的价值,"g.V().has('id', 28).values('value')"
 找出与帖子相关的所有用户节点，限制身高不超过194;然后返回这些用户节点年龄减去45的年龄，以及薪资加上薪资的值。,"g.V().hasLabel('post').as('a').outE().as('e').inV().hasLabel('user').has('height', lt(194)).as('b').project('age_minus_45', 'salary_plus_salary').by(values('age').math('_ - 45')).by(values('salary').math('_ + _'))"
"返回4个和标签为教师的点有教关系的课程,且和这些课程有属于关系的部门",g.V().hasLabel('teacher').out('teach').hasLabel('course').out('belong').hasLabel('department').limit(4)
"输入表的列为id,name,name, 数据为(83,'罪与罚','孤城'),(61,'百年孤独','悲惨世界'),(88,'悲惨世界','呐喊'), 源点的name等于输入表name,请帮我查找与名为何思琪和陈轩的点共同likes的,类型是book的节点","g.withSideEffect('p', [['id':83, 'name':'罪与罚', 'name2':'孤城'], ['id':61, 'name':'百年孤独', 'name2':'悲惨世界'], ['id':88, 'name':'悲惨世界', 'name2':'呐喊']]).V().has('name', within('何思琪')).as('a').outE('reader_likes_book').inV().hasLabel('book').as('b').inE('reader_likes_book').outV().has('name', '陈轩').as('c').select('b').dedup()"
"帮我查询156个编辑吴月和周月,共同的伙伴","g.V().has('publisher', 'name', '吴月').outE('partner').inV().as('b').inE('partner').outV().has('publisher', 'name', '周月').select('b').limit(156)"
查询与杜红有发布关系的帖子，以及这些帖子所拥有的标签，返回这些标签的价值。,"g.V().has('name', '杜红').outE('publish').inV().hasLabel('post').outE('has').inV().hasLabel('tag').values('value')"
"返回和公司有关联的城市节点,并根据其面积分组,返回面积,以及id乘3除913乘30837加人数的值",g.V().hasLabel('company').as('a').bothE('belong').as('e').otherV().hasLabel('city').as('b').select('b').by(values('area')).by(math('id * 3 / 913 * 30837 + peopleNumber')).group().by().by(count())
返回所有类型为书的点,g.V().hasLabel('book')
请帮我查找所有和person赵轩之间有观看关系的电影,"g.V().has('person', 'name', '赵轩').out('watch').hasLabel('film')"
"给出id为123的点的weight,stars","g.V().has('id', 123).project('weight', 'stars').by('weight').by('stars')"
 请帮我找出162个薪资大于等于5284且年龄小于39岁且年龄大于31岁的人，然后按照身高从小到大的顺序排列。,"g.V().hasLabel('person').has('salary', gte(5284)).has('age', lt(39)).has('age', gt(31)).order().by('height', asc).limit(162)"
给出部门的1跳以内的环,"g.V().hasLabel('department').as('a').bothE().otherV().as('b').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
请帮我找出169个与UME和横店影院都存在关系的电影院节点,"g.V().has('name', 'UME').outE().inV().hasLabel('cinema').as('b').inE().outV().has('name', '横店影院').select('b').limit(169)"
查找名为Order_274的节点包含的卖家或订单,"g.V().has('name', 'Order_274').out('contain').hasLabel(within('seller', 'orders')).elementMap()"
帮我查询所有名为星际穿越的点拥有的标签,"g.V().has('name', '星际穿越').out('has').hasLabel('tag')"
"给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出以creates关系关联了comment Comment_343的person","g.V().hasLabel('comment').has('name', 'Comment_343').inE('person_creates_comment').outV().hasLabel('person')"
"请帮我找出id为4的点的name,gender","g.V().has('id', 4).project('name', 'gender').by('name').by('gender')"
"请帮我查找id为119的loan有关的account的partner, 再请帮我查找和account有关系的relation","g.V().has('loan', 'id', 119).as('a').bothE().otherV().hasLabel('account').as('b').bothE('partner').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
返回与tag动作有关联，并且与用户周思琪有关联的person节点，获取它们的id、name和age信息。,"g.V().has('tag', 'name', '动作').outE().inV().hasLabel('person').as('b').inE().outV().has('user', 'name', '周思琪').select('b').project('id', 'name', 'age').by(values('id')).by(values('name')).by(values('age'))"
"调用KHOP函数,以'gL', 37, 13作为输入,返回运算结果","g.call('KHOP').with('arg0', 'gL').with('arg1', 37).with('arg2', 13).select('id', 'kValue')"
"以35,842作为请求点id, 以属性id作为相等条件,返回被person何国强认识的person","g.withSideEffect('p', [35, 842]).V().hasLabel('person').has('id', within('p')).as('a').in('knows').hasLabel('person').has('name', '何国强').as('b').select('a', 'b')"
"查找和类型是公司的点有申请关系的贷款,且和这些贷款有存款关系的账号,且和这些账号有转账关系的账号",g.V().hasLabel('company').as('a').outE('apply').as('e').inV().hasLabel('loan').as('b').outE('deposit').as('e2').inV().hasLabel('account').as('c').outE('transfer').as('e3').inV().hasLabel('account').as('d').select('d')
"查找和类型为city的点有belong关系的country,以及和这些country有contain关系的city,以及和这些city有contain关系的university",g.V().hasLabel('city').as('a').out('belong').hasLabel('country').as('b').out('contain').hasLabel('city').as('c').out('contain').hasLabel('university').as('d').select('d')
查找7个与Bilibili和字节都存在关系的person或company或software节点,"g.V().has('name', 'Bilibili').as('a').outE().as('e').inV().hasLabel(within('person', 'company', 'software')).as('b').inE().as('e2').outV().has('name', '字节').select('b').limit(7)"
请帮我查找医生王科开具的处方中，被其他患者接受的数量。,"g.V().hasLabel('doctor').has('name', '王科').outE('creates').inV().hasLabel('prescription').inE('accept').outV().hasLabel('patient').count()"
返回与72名被标记为医生的患者有关联的诊断患者，以及这些患者接收过的处方。,g.V().hasLabel('doctor').as('a').outE('diagnose').as('e').inV().hasLabel('patient').as('b').outE('accept').as('e2').inV().hasLabel('prescription').as('c').select('c').limit(72)
帮我找出何伟喜欢的帖子,"g.V().hasLabel('user').has('name', '何伟').outE('likes').inV().hasLabel('post').as('b', 'a').select('a', 'b')"
"找出seller韩红ask的buyer,被其他seller ask的数量","g.V().hasLabel('seller').has('name', '韩红').outE('ask').inV().hasLabel('buyer').inE('ask').outV().hasLabel('seller').count()"
"请帮我找出所有id为144的部门关联的药品,和以包含关系关联了这些药品的其他处方","g.V().has('department', 'id', 144).bothE().otherV().hasLabel('medicine').as('b').inE('contain').otherV().hasLabel('prescription').as('c').select('b', 'c')"
"查询支付person郑轩的person,和这些person认识的person","g.V().hasLabel('person').has('name', '郑轩').as('a').inE('pay').as('e').outV().as('b').outE('knows').as('e2').inV().as('c').select('b', 'c')"
"查询名为周国强和黄科的,类型是person的点公共的friend节点的名单","g.V().has('person', 'name', '周国强').out('friend').as('b').in('friend').has('person', 'name', '黄科').select('b').values('name')"
"输入请求点id的列表142, 以属性id作为相等条件,请帮我查找prescription的3度以内的环","g.withSideEffect('p', [142]).V().has('prescription', 'id', within('p')).as('a').both().as('b').both().where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
请帮我找出与买家陈建聪和王梅都存在咨询关系的点,"g.V().has('buyer', 'name', '陈建聪').out('consult').as('b').in('consult').has('buyer', 'name', '王梅').select('b')"
"返回89个名为美团的点apply的类型是loan的节点,且节点weight的最大值加369的平均值等于976或amount大于8995.53","g.V().has('name', '美团').outE('apply').inV().hasLabel('loan').where(or(__.select('b').values('weight').max().math('_ + 369').mean().is(976), __.select('b').values('amount').is(gt(8995.53)))).limit(89).select('b')"
"查找名为百度贴吧和中国军事论坛的,标签等于论坛的点公共的朋友节点的名单","g.V().has('forum', 'name', '百度贴吧').out('friend').as('b').in('friend').has('forum', 'name', '中国军事论坛').select('b').values('name')"
请帮我找出一个被买家取消的订单，以及这个订单包含的所有商品。,g.V().hasLabel('buyer').as('a').outE('cancel').as('e').inV().hasLabel('orders').as('b').outE('contain').as('e2').inV().hasLabel('goods').as('c').select('c').limit(1)
"请帮我查找所有和person点有申请关系的贷款节点,且边满足条件f0小于等于28,目标贷款节点满足条件权重大于7756.53","g.V().hasLabel('person').as('a').outE('apply').has('f0', lte(28)).as('e').inV().hasLabel('loan').has('weight', gt(7756.53)).as('b').select('b')"
请帮我找出所有源点为用户，目标点为帖子，且标签为喜欢的边。,g.V().hasLabel('user').outE('likes').where(inV().hasLabel('post'))
"查询155个名为四川大学的点belong的label为city的节点,且节点peopleNumber不为空,id大于61","g.V().has('name', '四川大学').outE('belong').inV().hasLabel('city').has('peopleNumber', neq(null)).has('id', gt(61)).limit(155)"
返回34个与杜若涵和徐建聪都存在关系的person节点,"g.V().has('name', '杜若涵').as('a').outE().as('e').inV().hasLabel('person').as('b').inE().as('e2').outV().has('name', '徐建聪').as('c').select('b').limit(34)"
"请帮我查找192个和标签等于城市的点有包含关系的大学,以及和这些大学有属于关系的城市",g.V().hasLabel('city').as('a').outE('contain').inV().hasLabel('university').as('b').outE('belong').inV().hasLabel('city').as('c').select('c').limit(192)
"给出与person郑建聪有关,且与电影绿巨人有关系的评论节点","g.V().has('person', 'name', '郑建聪').outE('creates').inV().hasLabel('comment').as('b').inE('belong').outV().has('film', 'name', '绿巨人').select('b')"
"返回名为纽约和重庆的,类型为城市的点公共的朋友节点的名单","g.V().has('city', 'name', '纽约').out('friend').as('b').in('friend').has('city', 'name', '重庆').select('b').values('name')"
查询所有源点标签为person，边标签为申请的边。返回这些边的目标点id减去7乘以750的结果，以及f0减去885的结果。,"g.V().hasLabel('person').outE('apply').project('calc1', 'calc2').by(values('targetId').math('_ - 7').math('_ * 750')).by(values('f0').math('_ - 885'))"
"找出全部与loan_95存在deposit关系的account,account与account存在transfer关系的点,返回这些点的isBlock","g.V().has('name', 'loan_95').out('deposit').hasLabel('account').out('transfer').hasLabel('account').values('isBlock')"
 给定读者源点，喜欢边标签，返回目标点ID为1的边数以及目标点ID为51的边值。,"g.V().hasLabel('reader').outE('likes').project('count_targetId_1', 'targetId_51').by(__.filter(__.inV().id().is(1)).count()).by(__.filter(__.inV().id().is(51)).id().fold().coalesce(__.unfold(), __.constant(null)))"
查找被company字节cooperate的university,"g.V().hasLabel('company').has('name', '字节').outE('cooperate').inV().hasLabel('university').as('b').select('b').by(valueMap()).as('a').select('a', 'b')"
"返回全部名为孙思思的,name小于1439的partner,返回这些partner的gender,和边的f1,srcId","g.V().has('name', '孙思思').outE('partner').as('e').inV().has('name', lt(1439)).as('b').select('b', 'e').by('gender').by(values('f1', 'srcId'))"
 请问有没有一个叫做文学院的地方？,"g.V().hasLabel('department').has('name', '文学院')"
返回由医生黄强创建的处方数量，以及由其他医生创建的处方数量。,"g.V().hasLabel('doctor').has('name', '黄强').outE('creates').inV().hasLabel('prescription').inE('creates').outV().hasLabel('doctor').dedup().count()"
"使用列为id,gender,name, 数据为(42,'male','陈红'),(30,'famale','韩建聪'),(34,'famale','张宏')的子查询作为输入表, 以属性id作为相等条件,给出全部id为188的药品关联的药品,和以包含关系关联了这些药品的其他处方","g.withSideEffect('p', [['id':42,'gender':'male','name':'陈红'], ['id':30,'gender':'famale','name':'韩建聪'], ['id':34,'gender':'famale','name':'张宏']]).V().hasLabel('medicine').has('id', '188').as('a').bothE().otherV().hasLabel('medicine').as('b').select('a').inE('prescription_contain_medicine').outV().hasLabel('prescription').as('c').select('b', 'c')"
给出账号Light转账的账号节点转账的账号,"g.V().has('account', 'name', 'Light').out('transfer').out('transfer').dedup()"
找到与陈伟和何红都相关的人。,"g.V().has('person', 'name', '陈伟').bothE('colleague').otherV().hasLabel('person').where(bothE('friend').otherV().has('person', 'name', '何红')).dedup()"
返回与person王轩有关系的person的gender,"g.V().has('person', 'name', '王轩').bothE().otherV().hasLabel('person').values('gender')"
"查询诊断医生孙雪诊断的病人,的医生","g.V().hasLabel('doctor').has('name', '孙雪').outE('diagnose').inV().hasLabel('patient').as('b').inE('diagnose').outV().hasLabel('doctor').as('c').select('b', 'c')"
"给出与评论Comment_457有关系的person, 返回和这些person有关联的person的,height的个数对身高取余的值","g.V().has('comment', 'name', 'Comment_457').bothE().otherV().hasLabel('person').bothE().otherV().hasLabel('person').group().by('height').by(count()).unfold().select(values).math('_ / by(key)').by(keys)"
"请帮我查找98个账号XXD和LX001,共同的相关者","g.V().hasLabel('account').has('name', 'XXD').outE('relation').inV().as('b').inE('relation').outV().hasLabel('account').has('name', 'LX001').select('b').limit(98)"
查找30个与何若涵和黄雪都存在关系的person节点,"g.V().has('name', '何若涵').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '黄雪').select('b').limit(30)"
"找出person郑建国own的account,被其他account transfer的数量","g.V().has('person', 'name', '郑建国').out('own').in('transfer').count()"
 返回所有与韩雪有关联，且商品为苹果的订单，包括订单名称、价格、韩雪的年龄和苹果的价格。,"g.V().has('buyer', 'name', '韩雪').as('a').outE('creates').inV().hasLabel('orders').as('b').inE('contain').outV().has('goods', 'name', '苹果').as('c').select('a', 'b', 'c').by('age').by(values('name', 'price')).by('price')"
返回满足条件名字等于Tugraph的节点,"g.V().has('name', 'Tugraph')"
"使用列为age,height,id, 数据为(54,187,82)的子查询作为输入表, 源点的id等于输入表id,查询与publisher马伟有关系的publisher, 返回和这些publisher有关联的author的,age对59取余的值","g.withSideEffect('p', [['age':54, 'height':187, 'id':82]]).V().hasLabel('publisher').as('a').where(and(__.values('id').is(eq(__.select('p').unfold().select('id'))), __.values('name').is(eq('马伟')))).bothE().otherV().hasLabel('publisher').as('b').bothE().otherV().hasLabel('author').as('c').select('c').values('age').math('_ % 59')"
"根据salary,height分组,计算height乘height的值","g.V().hasLabel('a').group().by(union(has('salary'), has('height')).fold()).by(values('height').math('_ * _'))"
"输入请求点id的列表76,536, 以属性id作为相等条件,请帮我找出标签为user的点,返回82个","g.inject([76, 536]).unfold().as('p').V().hasLabel('user').has('id', __.select('p')).limit(82)"
"给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询与买家孙强存在buyer_consult_seller关系,且与商品椅子存在seller_has_goods关系的卖家节点，返回这些卖家的名字,及买家孙强的名字,及商品椅子的名字","g.V().has('buyer', 'name', '孙强').as('a').out('buyer_consult_seller').hasLabel('seller').as('b').in('seller_has_goods').has('goods', 'name', '椅子').as('c').select('a', 'b', 'c').by('name').by('name').by('name')"
"请帮我查找类型为仓库的点,返回21个",g.V().hasLabel('repository').limit(21)
"输入请求点id的列表12,533, 源点的id等于输入表id,给出tag以id,name,value分组的value, 根据value从大到小排序","g.inject([12, 533]).as('p').select('p').unfold().as('id').V().hasLabel('tag').has('id', __.select('id')).as('a').select('a').by('value').by('id').by('name').group().by(__.select('a').by('id').by('name').by('value')).by(__.select('a').by('value').fold()).order(Scope.local).by(__.select(values).unfold().limit(1), Order.desc)"
 找出所有公司－大学合作边。,g.V().hasLabel('company').outE('cooperate').as('e').inV().hasLabel('university').select('e')
计算所有评论的字数减字数的值,g.V().hasLabel('comment').project('result').by(values('wordCount').math('_ - _'))
请帮我找出被person马红喜欢的person,"g.V().hasLabel('person').has('name', '马红').outE('likes').inV().hasLabel('person').as('b').select('b').as('a').select('a', 'b')"
查找130个与吴强和孙伟都存在关系的医生或处方或部门节点,"g.V().has('name', '吴强').as('a').outE().as('e').inV().hasLabel(within('doctor', 'prescription', 'department')).as('b').inE().as('e2').outV().has('name', '孙伟').as('c').select('b').limit(130)"
"使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部名为外科的点拥有的医生","g.V().has('department', 'name', '外科').out('department_has_doctor').hasLabel('doctor')"
 给定杜思琪，返回她的性别、身高和 ID。,"g.V().has('person', 'name', '杜思琪').outE('pay').inV().hasLabel('person').outE('pay').inV().hasLabel('person').project('gender', 'height', 'id').by(values('gender')).by(values('height')).by(values('id'))"
返回全部名为PR-442的点属于的仓库,"g.V().has('name', 'PR-442').out('belong').hasLabel('repository')"
"给出company以id分组的value, 根据value降序排序","g.V().hasLabel('company').group().by('id').by(values('value').fold()).order(local).by(values, desc)"
帮我查询与学生赵伟有选择关系的1度的环,"g.V().has('student', 'name', '赵伟').as('a').outE('selects').inV().as('b').where(__.select('b').out().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
找出与部门耳鼻喉科有拥有关系的1度以内的环,"g.V().hasLabel('department').has('name', '耳鼻喉科').as('a').bothE('has').bothV().where(neq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"请帮我找出源点salary不为空且age的最小值除18对61取余小于等于15且height在150到159之间,边标签为creates,且weight不为空的边,返回这些边的weight加141.39乘18的值","g.V().has('salary', neq(null)).where(__.values('age').min().is(neq(null))).where(__.math('min / 18 % 61').by(__.values('age').min()).is(lte(15))).has('height', between(150, 159)).outE('creates').has('weight', neq(null)).project('result').by(__.math('(weight + 141.39) * 18').by('weight')).select('result')"
计算所有person的salary的数量乘salary的值,g.V().hasLabel('person').values('salary').fold().project('result').by(__.count(local).by(__.identity()).by(__.sum()))
"帮我查询所有名为王伟的点的,id小于57的伙伴,返回这些伙伴的性别,和边的f1,目标点id","g.V().has('name', '王伟').outE('partner').as('e').inV().has('id', lt(57)).as('b').select('b', 'e').by('gender').by(values('f1', 'targetId'))"
"返回满足条件age大于55,salary不为空,salary的平均值小于3349的节点","g.V().has('age', gt(55)).has('salary', neq(null)).group().by(constant('all')).by(values('salary').mean()).unfold().filter(select(values).is(lt(3349))).select(keys).unfold()"
"请帮我找出买家的三角的环,边label为取消, 并返回这些点的id","g.V().hasLabel('buyer').as('a').outE('cancel').inV().as('b').outE('cancel').inV().as('c').where(__.inE('cancel').outV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"找出15个person吴建国和孙建国,共同的friend","g.V().has('person', 'name', '吴建国').outE('friend').inV().as('b').inE('friend').outV().has('person', 'name', '孙建国').select('b').limit(15)"
 请帮我找出同时被标记为Hadoop和SprintBoot的软件节点的共同使用情况。,"g.V().has('name', 'Hadoop').outE('uses').inV().hasLabel('software').as('b').inE('uses').outV().has('name', 'SprintBoot').select('b')"
找出person的1度以内的环,"g.V().hasLabel('person').as('a').bothE().otherV().as('b').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
请帮我找与腾讯有投资关系的人,"g.V().has('company', 'name', '腾讯').in('invest').hasLabel('person')"
请帮我找出前110个满足条件name是赵强且id大于48的user,"g.V().hasLabel('user').has('name', '赵强').has('id', gt(48)).limit(110)"
"返回和person王梅有关系的film或tag或comment,返回这些点的id,wordCount,name","g.V().has('person', 'name', '王梅').bothE().otherV().hasLabel(within('film', 'tag', 'comment')).project('id', 'wordCount', 'name').by(id()).by(values('wordCount')).by(values('name'))"
"用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找university的2跳以内的环","g.V().hasLabel('university').as('a').repeat(both().simplePath()).times(2).where(loops().is(1).or().loops().is(2)).as('b').where(__.select('a').where(eq('b'))).select('a', 'b').by('id').by('id')"
"查找名为Jimmy的tag或cinema或film,以及与其有关的comment,并返回Jimmy的id和这些comment的wordCount","g.V().has(label, within('tag', 'cinema', 'film')).has('name', 'Jimmy').as('a').bothE().as('e').otherV().hasLabel('comment').as('b').select('a', 'b').by('id').by('wordCount')"
"返回publisher publish的book, 令book的createTime的值等于likesbook的reader的age的最大值, 再查找book knows的book","g.V().hasLabel('publisher').as('a').outE('publish').inV().hasLabel('book').as('b').sideEffect(__.project('b', 'maxAge').by(select('b')).by(__.select('b').in('likes').hasLabel('reader').values('age').max()).select('maxAge').store('createTime')).select('b').out('knows').hasLabel('book').as('d').select('b', 'd').by().by().project('b.createTime', 'd').by(select('b').select('createTime')).by(select('d'))"
返回韩强接受的处方，以及处方中包含的药品的重量、名称和类别。,"g.V().hasLabel('patient').has('name', '韩强').outE('accept').inV().hasLabel('prescription').outE('contain').inV().hasLabel('medicine').project('weight', 'name', 'category').by(values('weight')).by(values('name')).by(values('category'))"
" 请帮我查询公司源点标签为company,边标签为creates的边，并返回这些边中目标ID加41的值和源点ID加140的平均值。","g.V().hasLabel('company').outE('creates').as('e').project('expr1', 'expr2').by(__.select('e').values('targetId').math('_ + 41')).by(__.select('e').values('srcId').math('_ + 140')).select(values).unfold().project('expr1', 'expr2').by(__.skip(local, 0)).by(__.skip(local, 1)).select(values).unfold().group().by(__.skip(local, 0)).by(__.skip(local, 1).mean()).unfold().project('e.targetId + 41', 'AVG(e.srcId + 140)').by(select(keys)).by(select(values))"
"找出标签等于prescription的点,返回118个",g.V().hasLabel('prescription').limit(118)
 查询与名为周国强医生有好友关系或好友好友关系的患者。,"g.V().hasLabel('doctor').has('name', '周国强').repeat(bothE('friend').otherV().simplePath()).times(2).emit().hasLabel('patient').dedup()"
"帮我查询pullRequest PR-324 belong的repository,以及belong这些repository的pullRequest","g.V().hasLabel('pullRequest').has('name', 'PR-324').as('a').outE('belong').as('e').inV().hasLabel('repository').as('b').inE('belong').as('e2').outV().hasLabel('pullRequest').as('c').select('b', 'c')"
"给出与person马雪有关,且与person孙国强有关系的person节点","g.V().hasLabel('person').has('name', '马雪').bothE('family').otherV().hasLabel('person').as('b').bothE('colleague').otherV().hasLabel('person').has('name', '孙国强').select('b')"
 请帮我找出马思琪选择的课程。,"g.V().hasLabel('student').has('name', '马思琪').as('b').outE('selects').as('e').inV().hasLabel('course').as('a').select('a', 'b')"
"请帮我找出所有源点标签为author,边标签为write的边,返回这些边的targetId除targetId的最小值,和targetId的平均值加198的值","g.V().hasLabel('author').as('a').outE('write').as('e').inV().as('b').project('min_val', 'avg_plus_198').by(__.select('e').values('targetId').math('_ / _').min()).by(__.select('e').values('targetId').mean().math('_ + 198'))"
"帮我查询名为王雪的点的,id等于22的相关者,返回这些相关者的课时,和边的f1,目标点id,源点id","g.V().has('name', '王雪').outE('relation').as('e').inV().has('id', 22).project('b.courseHour', 'e.f1', 'e.targetId', 'e.srcId').by(values('courseHour')).by(select('e').values('f1')).by(select('e').values('targetId')).by(select('e').values('srcId'))"
"请帮我查找id为26的person观看的电影, 并将电影有关的电影院的大小的求和值赋值给电影的价值, 接着查询电影的价值小于26的电影拥有的标签","g.V().has('person', 'id', 26).out('watch').hasLabel('film').as('b').project('value', 'd').by(__.inE().hasLabel('watch').outV().hasLabel('film').where(eq('b')).inE().otherV().hasLabel('cinema').values('size').sum()).by(__.out('has').hasLabel('tag')).where(select('value').is(lt(26)))"
" 找出所有用户源点标签为user,边标签为likes的边，并返回这些边的目标节点ID对目标节点ID取余加上122.28除以172再除以179.43对117.14取余的值，以及f0减去595减去106.17的值。","g.V().hasLabel('user').outE('likes').project('expr1', 'expr2').by(project('targetId').by(inV().id()).math('(targetId % targetId + 122.28) / 172 / 179.43 % 117.14')).by(values('f0').math('_ - 595 - 106.17'))"
"找出80个名为张雪的点诊断的类型是病人的节点,且其薪资小于7468,id在46到54之间","g.V().has('name', '张雪').outE('diagnose').inV().hasLabel('patient').has('salary', lt(7468)).has('id', between(46, 54)).limit(80)"
返回age从小到大的3个非男性person。,"g.V().hasLabel('person').has('gender', neq('male')).order().by('age', asc).limit(3)"
"找出名为黄红的点回答的全部买家,并对这些买家的年龄进行求和","g.V().has('name', '黄红').outE('ask').inV().hasLabel('buyer').values('age').sum()"
请帮我找出和编辑张建聪之间有发布关系的书,"g.V().hasLabel('publisher').has('name', '张建聪').outE('publish').inV().hasLabel('book')"
"输入表的列为gender,height,id, 数据为('male',197,12),('famale',197,0), 源点的id等于输入表id,计算所有person的age的最小值加51的个数","g.inject(['male', 197, 12], ['famale', 197, 0]).as('p').select('p').by(project('gender', 'height', 'id').by(__.limit(local, 1)).by(__.limit(local, 2)).by(__.limit(local, 3))).unfold().as('p').V().hasLabel('person').as('a').where(__.as('a').values('id').as('a_id').select('p').by('id').where(eq('a_id'))).values('age').min().math('_ + 51').count()"
请帮我查找所有和大学中国科技大学有1度或2度关系的大学,"g.V().has('university', 'name', '中国科技大学').both().hasLabel('university').dedup().fold().as('a').V().has('university', 'name', '中国科技大学').both().both().hasLabel('university').dedup().fold().as('b').select('a', 'b').unfold().dedup()"
"查找被person徐科likes的comment,和徐科watch的film","g.V().hasLabel('person').has('name', '徐科').as('b').out('likes').hasLabel('comment').as('a').select('b').out('watch').hasLabel('film').as('c').select('a', 'b', 'c')"
 请帮我找出被吴思思支付的人。,"g.V().hasLabel('person').has('name', '吴思思').as('b').outE('pay').as('e').inV().as('a').hasLabel('person').select('a', 'b')"
请帮我找出所有与韩科有支付关系的人，这些人之间还存在喜欢关系。然后返回这些人的身高信息。,"g.V().has('name', '韩科').outE('pay').inV().hasLabel('person').as('b').outE('likes').inV().hasLabel('person').as('c').select('c').values('height')"
"请帮我查找拥有账号BIN的person,和这些person拥有的账号","g.V().has('account', 'name', 'BIN').in('own').as('b').out('own').as('c').select('b', 'c')"
请帮我查找与person韩梅和赵月都存在拥有关系的点,"g.V().has('person', 'name', '韩梅').outE('own').inV().as('b').inE('own').outV().has('person', 'name', '赵月').select('b')"
 请问能否帮我找出'department'节点下，'经管学院'的教师节点所教授的'course'课程？,"g.V().has('department', 'name', '经管学院').out('has').hasLabel('teacher').out('teach').hasLabel('course')"
"请帮我找出全部id为112的大学关联的公司,和以包含关系关联了这些公司的其他城市","g.V().has('university', 'id', 112).bothE().otherV().hasLabel('company').as('b').inE('contain').otherV().hasLabel('city').as('c').select('b', 'c')"
 返回生物学院和经管学院中，以部门为标签的公共相关者节点列表。,"g.V().has('department', 'name', '生物学院').outE('relation').inV().as('b').inE('relation').outV().has('department', 'name', '经管学院').select('b').values('name')"
"查找身高小于151或性别是famale的person关联的person的名称,以及这些person 关联的person的名称","g.V().hasLabel('person').has('height', lt(151)).or().has('gender', 'famale').as('a').outE('relates').as('e').inV().hasLabel('person').as('b').outE('relates').as('e2').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我找出和软件SprintBoot有关的公司,称为X,再请帮我找出和这个X有关联的其他软件,以及和X有关联的公司","g.V().has('software', 'name', 'SprintBoot').as('a').bothE().otherV().hasLabel('company').as('b').bothE().otherV().hasLabel('software').as('c').select('b').bothE().otherV().hasLabel('company').as('d').select('a', 'b', 'c', 'd')"
找出全部与商品短袖有关系的卖家的身高,"g.V().hasLabel('goods').has('name', '短袖').bothE().otherV().hasLabel('seller').values('height')"
"查找109个用户韩强和杜轩,共同的伙伴","g.V().has('user', 'name', '韩强').outE('partner').inV().as('b').inE('partner').outV().has('user', 'name', '杜轩').select('b').limit(109)"
"根据gender分组,计算height除height的最大值",g.V().hasLabel('a').group().by('gender').by(__.values('height').math('_ / _').max())
 李宏和杜伟是163名教师中的两个人，他们之间有何关系需要进一步说明。,"g.V().hasLabel('teacher').has('name', '李宏').as('a').outE('relation').as('e').inV().as('b').inE('relation').as('e2').outV().hasLabel('teacher').has('name', '杜伟').as('c').select('b').limit(163)"
"返回名为韩国强的点提交的所有软件,并对这些软件的语言进行求和","g.V().has('name', '韩国强').outE('commits').inV().hasLabel('software').values('lang').sum()"
"给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出用户陈科的伙伴的伙伴的朋友","g.V().has('user', 'name', '陈科').out('partner').out('partner').out('friend')"
帮我查询165个与吴红和Tom都存在关系的教师节点,"g.V().has('name', '吴红').outE().inV().hasLabel('teacher').as('b').inE().outV().has('name', 'Tom').select('b').limit(165)"
请帮我查找那些'person knows'中，姓名不为吴轩或者ID大于等于25的人的姓名和他们认识的人的姓名。,"g.V().hasLabel('person').has('name', neq('吴轩')).or().has('id', gte(25)).as('a').outE('knows').as('e').inV().hasLabel('person').as('b').outE('knows').as('e2').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"查找user的partner,或其partner的partner","g.V().hasLabel('user').as('a').outE('partner').inV().range(1,2).as('b').select('b')"
"以512作为请求点id, 源点的id等于输入表id,帮我查询id为71的点的createTime,id,name","g.V().has('id', 512).as('p').V().has('id', '71').where(eq('p')).by('id').project('createTime', 'id', 'name').by(values('createTime')).by(values('id')).by(values('name'))"
 请帮我查找所有和中国诗词论坛有联系的人，或者与这些人有关联的人。,"g.V().has('forum', 'name', '中国诗词论坛').outE('relation').inV().hasLabel('person').dedup()"
"请帮我找出person吴轩提交的软件,以及使用这些软件的软件","g.V().hasLabel('person').has('name', '吴轩').outE('commits').inV().hasLabel('software').as('b').inE('uses').outV().hasLabel('software').as('c').select('b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));找出与person张红和徐月都存在person_creates_comment关系的点","g.V().has('person', 'name', '张红').out('person_creates_comment').as('b').in('person_creates_comment').has('person', 'name', '徐月').select('b')"
给出全部和person陈宏之间有likes关系的person,"g.V().has('person', 'name', '陈宏').out('likes').hasLabel('person')"
找出名为孤城的节点关联的作家,"g.V().has('name', '孤城').outE('relates').inV().hasLabel('author')"
 其他买家取消了杜雪取消的订单数量。,"g.V().has('buyer', 'name', '杜雪').outE('cancel').inV().hasLabel('orders').inE('cancel').outV().hasLabel('buyer').count()"
帮我找出reader赵雪和黄建聪都喜欢的点,"g.V().hasLabel('reader').has('name', '赵雪').as('a').outE('likes').inV().as('b').inE('likes').outV().hasLabel('reader').has('name', '黄建聪').as('c').select('b').dedup()"
"以20,465作为请求点id, 以属性id作为相等条件,查找所有类型为book的点","g.inject([20, 465]).unfold().as('p').V().hasLabel('book').has('id', __.select('p')).dedup()"
"请帮我找出id为69的编辑有关的书的引用, 再请帮我找出和书有关系的引用","g.V().has('publisher', 'id', 69).as('a').bothE().otherV().hasLabel('book').as('b').bothE('refers').otherV().as('c').select('b').bothE('refers').otherV().as('d').select('a', 'b', 'c', 'd')"
返回与卖家何思琪和何国强都存在回答关系的点,"g.V().has('seller', 'name', '何思琪').outE('ask').inV().as('b').inE('ask').outV().has('seller', 'name', '何国强').select('b')"
"用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找与名为张伟和郑科的点共同creates的,类型为orders的节点","g.V().has('name', '张伟').outE('buyer_creates_orders').inV().hasLabel('orders').as('b').inE('buyer_creates_orders').outV().has('name', '郑科').select('b')"
 返回与公司ID为171的公司有关的朋友，再返回与这些朋友有关联的相关者。,"g.V().has('company', 'id', '171').as('a').bothE().otherV().hasLabel('company').as('b').bothE('friend').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
 请帮我查找黄月的朋友的朋友。,"g.V().hasLabel('buyer').has('name', '黄月').out('relation').out('friend').out('friend')"
"查找全部和名为Prescription_379的处方有伙伴关系,或有伙伴的伙伴关系的药品","g.V().has('prescription', 'name', 'Prescription_379').repeat(out('partner')).times(2).hasLabel('medicine').dedup()"
"查询156个名为TheShy的点转账的标签为账号的节点,且节点名字不等于Zeus或上次登录时间不等于1996年09月17日","g.V().has('name', 'TheShy').outE('transfer').inV().hasLabel('account').or(has('name', neq('Zeus')), has('lastLoginTime', neq('1996-09-17'))).limit(156)"
"给出名为滴滴的点的,名字不是5195且身高的最大值小于23的相关者,返回这些相关者的id,和边的f1,目标点id,源点id","g.V().has('name', '滴滴').outE('relation').as('e').inV().as('b').where(__.not(__.has('name', '5195'))).group().by(__.identity()).by(__.values('height').max()).unfold().filter(__.select(values).is(lt(23))).select(keys).select('b', 'e').project('b_id', 'e_f1', 'e_targetId', 'e_srcId').by(__.select('b').id()).by(__.select('e').values('f1')).by(__.select('e').values('targetId')).by(__.select('e').values('srcId'))"
"帮我查询类型是comment的点,返回115个",g.V().hasLabel('comment').limit(115)
"使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询12个和标签等于author的点有author_knows_author关系的author,并且和这些author有author_knows_author关系的author",g.V().hasLabel('author').as('a').outE('author_knows_author').inV().hasLabel('author').as('b').outE('author_knows_author').inV().hasLabel('author').as('c').select('c').limit(12)
查询以拥有关系关联了商品桌子的卖家,"g.V().hasLabel('goods').has('name', '桌子').inE('has').outV().hasLabel('seller')"
获取年龄在39至61岁之间的买家创建的订单及其包含的商品名称。,"g.V().hasLabel('buyer').has('age', between(39, 61)).out('creates').hasLabel('orders').as('b').out('contain').hasLabel('goods').as('c').select('b', 'c').by('name').by('name')"
 查询109个软件，找到它们与Stratosphere和Hadoop的共同朋友。,"g.V().has('software', 'name', 'SprintBoot').outE('friend').inV().as('b').inE('friend').outV().has('software', 'name', 'Hadoop').select('b').limit(109)"
找出以使用关系关联了软件Hadoop的软件,"g.V().hasLabel('software').has('name', 'Hadoop').inE('uses').outV().hasLabel('software')"
 请帮我查找计算机学院部门的教师。,"g.V().hasLabel('department').has('name', '计算机学院').inE('has').outV().hasLabel('teacher').as('b').outE('has').inV().hasLabel('teacher').as('a').select('a', 'b')"
"查找和部门计算机学院有拥有关系的学生,再查找以拥有关系关联了计算机学院的学生","g.V().has('department', 'name', '计算机学院').as('a').bothE('has').otherV().hasLabel('student').as('b', 'c').select('a', 'b', 'c')"
"请帮我查找id为24的student有关的student的partner, 再请帮我查找和student有关系的partner","g.V().hasLabel('student').has('id', 24).as('a').bothE().as('e').otherV().hasLabel('student').as('b').bothE('partner').as('e2').otherV().as('c').select('b').bothE('partner').as('e3').otherV().as('d').select('a', 'b', 'c', 'd')"
"使用列为gender,name,age, 数据为('famale','吴国强',44),('male','徐思思',6),('male','杜梅',11),('famale','张国强',47)的子查询作为输入表, 以属性name作为相等条件,给出和patient王若涵有关的patient,再给出和王若涵patient_accept_prescription的其他prescription,返回它们","g.inject([['famale', '吴国强', 44], ['male', '徐思思', 6], ['male', '杜梅', 11], ['famale', '张国强', 47]]).as('p').V().hasLabel('patient').has('name', '王若涵').as('a').bothE().otherV().hasLabel('patient').as('b').select('a').outE('patient_accept_prescription').inV().hasLabel('prescription').as('c').select('a', 'b', 'c')"
找出所有从'person'出发，到'账号'为目标，且标记为'拥有'的边。,g.V().hasLabel('person').outE('own').hasLabel('account').otherV().hasLabel('account').select('e')
"给出支付person郑月认识的person,的person","g.V().has('person', 'name', '郑月').as('a').outE('knows').as('e').inV().hasLabel('person').as('b').inE('pay').as('e2').outV().hasLabel('person').as('c').select('b', 'c')"
"请帮我找出买家杜轩查看的商品,以及查看这些商品的买家","g.V().hasLabel('buyer').has('name', '杜轩').as('a').outE('look').as('e').inV().hasLabel('goods').as('b').inE('look').as('e2').outV().hasLabel('buyer').as('c').select('b', 'c')"
"找出名为黄建国和马强的,类型是person的点公共的朋友节点的名单","g.V().has('person', 'name', '黄建国').out('friend').as('b').in('friend').has('person', 'name', '马强').select('b').values('name')"
"查找person王梅认识的person,被其他person关联的数量","g.V().has('person', 'name', '王梅').out('knows').in('relates').dedup().count()"
"请帮我查找所有商品以名字,类别分组的名字, 根据名字升序排序","g.V().hasLabel('goods').project('name', 'category').by('name').by('category').dedup().order().by(select('name'), asc)"
"查找id为128的点的id,id,创建时间","g.V().has('id', 128).project('a.id', 'a.id', 'a.createTime').by(values('id')).by(values('id')).by(values('createTime'))"
"输入请求点id的列表88, 源点的id等于输入表id,返回标签等于药品,名为头孢的点,返回这些点的名字","g.inject(88).as('p').V().hasLabel('medicine').as('a').where('a', eq('p')).by('id').by().has('name', '头孢').select('a').values('name')"
"请帮我找出47个person吴国强和杜月,共同的朋友","g.V().has('person', 'name', '吴国强').outE('friend').inV().as('b').inE('friend').outV().has('person', 'name', '杜月').select('b').limit(47)"
"请帮我查找被department生物学院has的teacher,和生物学院has的teacher","g.V().hasLabel('department').has('name', '生物学院').as('b').bothE('has').otherV().hasLabel('teacher').as('a', 'c').select('a', 'b', 'c')"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回所有person的朋友,或其朋友的朋友",g.V().hasLabel('person').as('a').outE('friend').inV().hasLabel('person').as('b').select('b').dedup()
请帮我找出与person杜宏和李雪都存在pay关系的点,"g.V().has('person', 'name', '杜宏').out('pay').as('b').in('pay').has('person', 'name', '李雪').select('b')"
查询与company微软有关系的person的salary,"g.V().hasLabel('company').has('name', '微软').bothE().otherV().hasLabel('person').values('salary')"
帮我找到天涯论坛partner的partner的partner,"g.V().hasLabel('forum').has('name', '天涯论坛').out('partner').out('partner').out('partner')"
"请帮我找出名为郑强和李月的,类型为教师的点公共的朋友节点的名单","g.V().has('teacher', 'name', '郑强').outE('friend').inV().as('b').inE('friend').outV().has('teacher', 'name', '李月').select('b').values('name')"
请帮我找出所有与贷款相关的账户，以及与这些账户有拥有关系的其他个人,"g.V().has('loan', 'id', '79').bothE().otherV().hasLabel('account').as('b').inE('own').otherV().hasLabel('person').as('c').select('b', 'c')"
"给出名为杜强和黄轩的,标签为医生的点公共的朋友节点的名单","g.V().has('doctor', 'name', '杜强').outE('friend').inV().as('b').inE('friend').outV().has('doctor', 'name', '黄轩').select('b').values('name')"
查询与自己有 knows 关系的所有 author，以及他们之间的所有 author。,g.V().hasLabel('author').as('a').out('knows').hasLabel('author').as('b').out('knows').hasLabel('author').as('c').out('knows').hasLabel('author').as('d').select('d')
"给定图的schema如下:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));返回与prescription Prescription_196有关系的prescription的name","g.V().has('prescription', 'name', 'Prescription_196').bothE().otherV().hasLabel('prescription').values('name')"
"给出与名为JavaGuid和Mybatis的点共同拥有的,类型为用户的节点","g.V().has('name', 'JavaGuid').out('has').as('b').in('has').has('name', 'Mybatis').select('b')"
 请帮我找出公司雇佣的员工中，薪水不超过673美元，以及他们购买的软件名称。,"g.V().hasLabel('company').has('value', lte(673)).has('value', lt(960)).outE('employee').inV().hasLabel('person').as('b').outE('buy').inV().hasLabel('software').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我找出pay person徐建聪pay的person,的person","g.V().has('person', 'name', '徐建聪').outE('pay').inV().as('b').inE('pay').outV().as('c').select('b', 'c')"
返回与person赵建国有恋人关系的2跳的环,"g.V().has('person', 'name', '赵建国').as('a').out('lover').as('b').out().as('c').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
 请帮我查找赵伟和何宏共同拥有的是什么类型的节点，是账户。,"g.V().has('name', '赵伟').outE('own').inV().hasLabel('account').as('b').inE('own').outV().has('name', '何宏').select('b')"
"给出教师杜梅教的课程,以及选择这些课程的学生","g.V().has('teacher', 'name', '杜梅').outE('teach').inV().hasLabel('course').as('b').inE('selects').outV().hasLabel('student').as('c').select('b', 'c')"
查找所有与person孙轩有关系的person的名字,"g.V().has('person', 'name', '孙轩').bothE().otherV().hasLabel('person').values('name')"
"输入请求点id的列表75,658,31,679,547, 以属性id作为相等条件,查询名为武汉大学的点拥有的部门","g.inject([75, 658, 31, 679, 547]).unfold().as('p').V().has('id', __.where(eq('p'))).has('name', '武汉大学').outE('university_has_department').inV().hasLabel('department').dedup()"
"找出和病人孙月有接受关系的处方,再找出以接受关系关联了孙月的处方","g.V().hasLabel('patient').has('name', '孙月').as('a').outE('accept').as('e').inV().hasLabel('prescription').as('b').select('a').inE('accept').as('e2').outV().hasLabel('prescription').as('c').select('a', 'b', 'c')"
能否请你帮我找一下叫孙月的人的信息？,"g.V().hasLabel('person').has('name', '孙月')"
 查找同时包含吴国强和张月这两个词的93个帖子节点。,"g.V().has('name', '吴国强').outE().inV().hasLabel('post').as('b').inE().outV().has('name', '张月').select('b').limit(93)"
" 查询所有源点为大学，边类型为拥有的边，并返回这些边weight的最小值减去191.89,以及权重与权重相乘再除以f0的值。","g.V().hasLabel('university').outE('has').project('min_weight_diff', 'weight_calc').by(__.values('weight').min().math('_ - 191.89')).by(__.math('(weight + weight) / f0'))"
"返回标签等于部门,名为艺术学院的点,返回这些点的名字,价值","g.V().hasLabel('department').has('name', '艺术学院').project('a.name', 'a.value').by('name').by('value')"
"帮我查询被大学属于数量大于41的城市,记为relationCount,再查询这些城市属于的大学","g.V().hasLabel('city').as('a').project('city', 'relationCount').by(identity()).by(outE('belong').hasLabel('belong').inV().hasLabel('university').values('id').max()).select('city', 'relationCount').where(select('relationCount').is(gt(41))).select('city').outE('belong').hasLabel('belong').inV().hasLabel('university')"
 给出拥有全部XXD的点转账的账号，以及该XXD的所有者，返回两者。,"g.V().has('name', 'XXD').as('a').outE('transfer').inV().as('b').select('a').inE('own').outV().as('c').select('a', 'b', 'c')"
获取所有源点标签为人，边标签为家庭的边。返回这些边的目标ID减去175的值以及权重除以183.20的结果。,"g.V().hasLabel('person').outE('family').project('targetId_minus_175', 'weight_divided_by_183.20').by(values('targetId').math('_ - 175')).by(values('weight').math('_ / 183.20'))"
帮我查询全部与tag动作有关系的tag的value,"g.V().has('tag', 'name', '动作').bothE().otherV().hasLabel('tag').values('value')"
查找名为JavaGuid的节点拥有的用户或合并请求或事项,"g.V().has('name', 'JavaGuid').out('has').hasLabel(within('user', 'pullRequest', 'issue'))"
请帮我找出以publish关系关联了book呐喊的publisher,"g.V().hasLabel('book').has('name', '呐喊').inE('publish').outV().hasLabel('publisher')"
"请帮我查找与操作系统存在belong关系的department,department与teacher存在has关系的点,返回这些点的name","g.V().has('name', '操作系统').out('belong').hasLabel('department').out('has').hasLabel('teacher').values('name')"
 返回与某人相关的人，以及他们相关的人的进一步相关者。,"g.V().hasLabel('person').as('a').outE('relation').inV().hasLabel('person').range(1, 2).as('b').select('b')"
韩强朋友的朋友的朋友,"g.V().has('person', 'name', '韩强').out('friend').out('partner').out('partner')"
"给出和公司美团有关的城市,再给出和美团属于的其他城市,返回它们","g.V().hasLabel('company').has('name', '美团').as('a').bothE().as('e').otherV().hasLabel('city').as('b').select('a').outE('belong').as('e2').inV().hasLabel('city').as('c').select('a', 'b', 'c')"
"使用列为age,height,salary, 数据为(85,176,6669),(37,165,7623),(25,177,7076),(10,172,9512)的子查询作为输入表, 源点的age等于输入表age,查询类型为person的全部点,并根据名字从小到大排列","g.inject([85, 176, 6669], [37, 165, 7623], [25, 177, 7076], [10, 172, 9512]).as('p').V().hasLabel('person').where(eq('p')).by('age').by(select('p').limit(local, 1)).order().by('name', asc)"
找到所有与goods有关联的goods节点，如果这些节点的value不大于100，则返回这些节点中price最大值除以price后的余数和price乘以2366.09的结果。,"g.V().hasLabel('goods').as('a').outE().inV().hasLabel('goods').has('value', lte(100)).as('b').select('b').values('price').max().as('maxPrice').select('b').project('remainder', 'multiplied').by(__.math('maxPrice % _').by(values('price'))).by(__.math('_ * 2366.09').by(values('price')))"
请帮我按身高降序分组并查找所有的人，他们按照age、name和gender进行分类。,"g.V().hasLabel('person').group().by(values('age', 'name', 'gender').fold()).by(values('height').fold()).order(local).by(values, desc).select(values).unfold()"
"请帮我找出源点类型为用户,边类型为创造,并且f1不等于true且源点id为空,或时间戳不等于2025年02月13日的边","g.V().hasLabel('user').as('a').outE('creates').as('e').inV().as('b').where(or(and(has('f1', neq(true)), has('srcId', null)), has('timeStamp', neq('2025-02-13')))).select('e')"
帮我查询书悲惨世界认识的书节点认识的书,"g.V().hasLabel('book').has('name', '悲惨世界').out('knows').hasLabel('book').out('knows').hasLabel('book')"
"以'mG'作为输入调用triangleCount函数,返回number",g.V().hasLabel('mG').both().both().both().dedup().count()
"用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询从person李强出发,经过标签等于person_watch_film的边,走3到6跳到达的film点","g.V().hasLabel('person').has('name', '李强').repeat(bothE('person_watch_film').otherV().simplePath()).times(6).emit(loops().is(gte(3))).hasLabel('film').dedup()"
"给出38个account TheShy和LX001,共同的partner","g.V().hasLabel('account').has('name', 'TheShy').outE('partner').inV().as('b').inE('partner').outV().hasLabel('account').has('name', 'LX001').select('b').limit(38)"
"查找和person陈思思有关的person,再查找和陈思思likes的其他person,返回它们","g.V().has('person', 'name', '陈思思').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('likes').otherV().hasLabel('person').as('c').select('a', 'b', 'c')"
"输入请求点id的列表898,954,801, 源点的id等于输入表id,帮我查询64个name是韩月,name不是周强,salary在7988到8677之间的reader,根据id升序排列","g.withSideEffect('p', [898, 954, 801]).V().hasLabel('reader').as('a').where(and(__.select('a').values('id').is(within(__.select('p'))), __.select('a').has('name', '韩月'), __.select('a').has('name', neq('周强')), __.select('a').has('salary', between(7988, 8677)))).select('a').order().by('id', asc).limit(64)"
找到杜若涵拥有的账户，返回该账户转账记录的最后登录时间。,"g.V().has('person', 'name', '杜若涵').out('own').as('b').out('transfer').values('lastLoginTime')"
"返回person李宏pay的person,以及likes这些person的person","g.V().has('person', 'name', '李宏').outE('pay').inV().hasLabel('person').as('b').inE('likes').outV().hasLabel('person').as('c').select('b', 'c')"
"返回7个名为黄强的点诊断的类型为病人的节点,且节点年龄小于等于69","g.V().has('name', '黄强').outE('diagnose').inV().hasLabel('patient').has('age', lte(69)).limit(7)"
"请帮我找出全部源点标签为卖家,边标签为拥有,并且满足条件f1等于true,f1是false的边","g.V().hasLabel('seller').outE('has').has('f1', true).has('f1', false)"
找出与person周雪有认识关系的2度以内的环,"g.V().has('person', 'name', '周雪').as('a').bothE('knows').otherV().bothE().otherV().where(eq('a')).path().by('id').by().by('id')"
"输入请求点id的列表872,638,510,815, 源点的id等于输入表id,请帮我找出被person韩建国提交的软件","g.withSideEffect('p', [872, 638, 510, 815]).V().hasLabel('software').has('id', within('p')).as('a').in('person_commits_software').hasLabel('person').has('name', '韩建国').as('b').select('a', 'b')"
请帮我找出被user赵思琪publish的post,"g.V().hasLabel('user').has('name', '赵思琪').outE('publish').inV().hasLabel('post').as('b').inV().as('a').select('a', 'b')"
找出被卖家张强拥有的商品,"g.V().hasLabel('seller').has('name', '张强').as('b').outE('has').as('e').inV().hasLabel('goods').as('a').select('a', 'b')"
"请帮我找出医生王若涵诊断的病人,被其他医生诊断的数量","g.V().has('doctor', 'name', '王若涵').outE('diagnose').inV().hasLabel('patient').inE('diagnose').outV().hasLabel('doctor').dedup().count()"
"请帮我查找与person黄轩存在父母关系,且与person李宏存在家人关系的person节点，返回这些person的名字,身高,及person黄轩的身高,及person李宏的身高","g.V().has('person', 'name', '黄轩').as('a').out('parent').hasLabel('person').as('b').in('family').has('person', 'name', '李宏').as('c').select('a', 'b', 'c').by('height').by(values('name', 'height')).by('height').project('a_height', 'b_name', 'b_height', 'c_height').by(select('a')).by(select('b').select('name')).by(select('b').select('height')).by(select('c'))"
"请帮我查找112个名为何建国的点接受的标签为处方的节点,且其名字是Prescription_132,权重在304到541之间","g.V().has('name', '何建国').outE('accept').inV().hasLabel('prescription').has('name', 'Prescription_132').has('weight', between(304, 541)).limit(112)"
"调用triangleCount函数,以21, 'gf', 48作为输入,返回运算结果","g.call('triangleCount').with('input1', 21).with('input2', 'gf').with('input3', 48).select('number')"
"查询与user杜伟有关,且与repository Tugraph有关系的issue节点","g.V().has('user', 'name', '杜伟').bothE('creates').bothV().hasLabel('issue').as('b').bothE('belong').bothV().has('repository', 'name', 'Tugraph').select('b')"
"查询label为company的点,返回35个",g.V().hasLabel('company').limit(35)
"给出和国家越南有包含关系的城市,再给出以包含关系关联了越南的城市","g.V().has('country', 'name', '越南').as('a').outE('contain').inV().hasLabel('city').as('b').select('a').inE('contain').outV().hasLabel('city').as('c').select('a', 'b', 'c')"
返回所有与电影院大众影院有关系的电影的名字,"g.V().has('cinema', 'name', '大众影院').bothE().otherV().hasLabel('film').values('name')"
请帮我找出全部和评论Comment_493之间有属于关系的电影,"g.V().hasLabel('comment').has('name', 'Comment_493').outE('belong').inV().hasLabel('film')"
按名字分组所有电影院的id，然后按照id升序排列。,"g.V().hasLabel('cinema').group().by('name').by(values('id').fold()).order(local).by(keys, asc)"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));给出145个与美团和字节都存在关系的公司节点","g.V().has('name', '美团').outE().inV().hasLabel('company').as('b').inE().outV().has('name', '字节').select('b').limit(145)"
"给出所有id为81的account关联的loan,和以apply关系关联了这些loan的其他person","g.V().hasLabel('account').has('id', 81).bothE().otherV().hasLabel('loan').as('b').inE('apply').otherV().hasLabel('person').as('c').select('b', 'c')"
找出与Tom和郑科都有联系的所有Person节点。,"g.V().has('name', 'Tom').outE().as('e').inV().hasLabel('person').as('b').inE().as('e2').outV().has('name', '郑科').as('c').select('b').limit(93)"
给出与cinema好视影院有releases关系的3跳的环,"g.V().has('cinema', 'name', '好视影院').as('a').repeat(bothE('releases').otherV().simplePath()).times(2).where(loops().is(2)).where(__.bothE('releases').otherV().where(eq('a'))).dedup().project('a.id', 'b_id').by(select('a').id()).by(id())"
请帮我找出全部与person kate有关系的person的id,"g.V().has('person', 'name', 'kate').bothE().otherV().hasLabel('person').id()"
请帮我找出编辑的1跳以内的环,"g.V().hasLabel('publisher').as('a').bothE().bothV().where(neq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
找出与 id 为 183 的处方相关的用户的朋友，以及与该用户相关的人。,"g.V().has('prescription', 'id', '183').as('a').bothE().otherV().hasLabel('user').as('b').both().hasLabel('user').where(__.bothE('friend').otherV().hasLabel('user').as('c')).both().hasLabel('user').where(__.bothE('relation').otherV().hasLabel('user').as('d')).select('a', 'b', 'c', 'd')"
"帮我查询教课程高等数学的教师,和这些教师教的课程","g.V().has('course', 'name', '高等数学').in('teach').as('b').out('teach').as('c').select('b', 'c')"
返回被person黄强拥有的账号,"g.V().hasLabel('person').has('name', '黄强').outE('own').inV().hasLabel('account').as('b').select('b').by().as('a').select('a', 'b')"
 返回与哪些部门关联的课程，以及与这些部门有拥有关系的其他大学的列表。,"g.V().hasLabel('course').has('id', '84').bothE().otherV().hasLabel('department').as('b').inE('has').otherV().hasLabel('university').as('c').select('b', 'c')"
"查询cooperate university四川大学的company,和这些company cooperate的university","g.V().hasLabel('university').has('name', '四川大学').inE('cooperate').outV().hasLabel('company').as('b').outE('cooperate').inV().hasLabel('university').as('c').select('b', 'c')"
帮我查询person韩雪认识的person节点支付的person,"g.V().has('person', 'name', '韩雪').out('knows').out('pay').dedup()"
"查询和类型为person的点有拥有关系的账号,并且和这些账号有转账关系的账号,并且和这些账号有还款关系的贷款",g.V().hasLabel('person').as('a').outE('own').as('e').inV().hasLabel('account').as('b').outE('transfer').as('e2').inV().hasLabel('account').as('c').outE('repay').as('e3').inV().hasLabel('loan').as('d').select('d')
"请帮我查找公司雇佣的person, 令person(b)的年龄的值等于认识person的person的薪资的和, 再查找person购买的软件","g.V().hasLabel('company').as('a').outE('employee').inV().hasLabel('person').as('b').sideEffect(__.select('b').aggregate('bSet')).select('b').as('b').select('b').coalesce(__.inE('knows').outV().hasLabel('person').values('salary').sum(), __.constant(0)).as('age').select('b').outE('buy').inV().hasLabel('software').as('d').select('age', 'd')"
"给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出从author韩月出发,经过标签为author_knows_author的边,走1跳到达的author点","g.V().has('author', 'name', '韩月').out('author_knows_author').hasLabel('author')"
"返回185个名为周建国的点watch的类型为film的节点,且其id为空或id为空","g.V().has('name', '周建国').outE('watch').inV().hasLabel('film').where(or(has('id', null), has('id', null))).limit(185)"
获取韩红患者接受的处方，由其他医生创建的数量,"g.V().has('patient', 'name', '韩红').outE('accept').inV().hasLabel('prescription').inE('creates').outV().hasLabel('doctor').dedup().count()"
"查询168个和类型为公司的点有雇佣关系的person,且和这些person有提交关系的软件",g.V().hasLabel('company').as('a').outE('employee').as('e').inV().hasLabel('person').as('b').outE('commits').as('e2').inV().hasLabel('software').as('c').select('c').limit(168)
"帮我查询全部源点身高对身高取余的平均值大于3或身高为空或身高不为空,目标点性别不是male或身高大于等于164或薪资大于等于2456,且类型是朋友的边","g.V().hasLabel('a').or(has('height', neq(null)).where(values('height').fold().project('avg').by(__.mean()).select('avg').is(gt(3))), has('height', null), has('height', neq(null))).outE('friend').where(inV().or(has('gender', neq('male')), has('height', gte(164)), has('salary', gte(2456)))).dedup()"
请帮我找出所有与订单Order_484有关系的商品的价值,"g.V().hasLabel('orders').has('name', 'Order_484').bothE().otherV().hasLabel('goods').values('value')"
"找出医生韩建国的所有相关者,的源点id除145的值","g.V().hasLabel('doctor').has('name', '韩建国').outE('relation').as('e').inV().as('b').select('e').by('srcId').math('_ / 145')"
"给出与名为武汉大学和清华大学的点共同属于的,标签等于城市的节点","g.V().has('name', '武汉大学').outE('belong').inV().hasLabel('city').as('b').inE('belong').outV().has('name', '清华大学').select('b')"
请帮我查找id为41的点的id,"g.V().has('id', 41).values('id')"
"以311,8,935,284,384作为请求点id, 以属性id作为相等条件,请帮我查找与person马思琪存在person_likes_person关系,且与person王若涵存在person_knows_person关系的person节点，返回这些person的gender,及person马思琪的age,及person王若涵的name","g.inject([311, 8, 935, 284, 384]).as('p').unfold().as('id').V().hasLabel('person').has('id', __.select('id')).has('name', '马思琪').as('a').outE('person_likes_person').inV().hasLabel('person').as('b').inE('person_knows_person').outV().hasLabel('person').has('name', '王若涵').as('c').select('a', 'b', 'c').by('age').by('gender').by('name')"
"请帮我找出标签等于has,且srcId小于179或weight不为空或targetId不为空的边","g.E().hasLabel('has').or(has('srcId', lt(179)), has('weight', neq(null)), has('targetId', neq(null)))"
 找出所有标签为'账号'的点，然后按照创建时间排序。,"g.V().hasLabel('account').order().by('createTime', asc)"
"查询person的伙伴,或其伙伴的伙伴","g.V().hasLabel('person').as('a').outE('partner').inV().range(1, 2).as('b').select('b')"
请帮我查找前23个createTime等于2033年03月11日且status为Finished且name不是ISSUE-455的issue,"g.V().hasLabel('issue').has('createTime', '2033-03-11').has('status', 'Finished').has('name', neq('ISSUE-455')).limit(23)"
"请帮我查找person以名字分组的年龄, 根据年龄降序排序","g.V().hasLabel('person').group().by('name').by(values('age').fold()).order(local).by(values, desc)"
返回马国强喜欢的人，以及他认识的人的年龄、ID和姓名。,"g.V().has('person', 'name', '马国强').out('likes').as('b').out('knows').as('c').select('c').by(values('age', 'id', 'name').fold())"
 查询赵强朋友的朋友的伙伴。,"g.V().has('person', 'name', '赵强').out('friend').out('partner').out('partner')"
"返回类型为药品,名为999感冒灵的点,返回这些点的类别,名字","g.V().hasLabel('medicine').has('name', '999感冒灵').project('category', 'name').by('category').by('name')"
请帮我查找id为158的点的id,"g.V().has('id', 158).values('id')"
"帮我查询满足条件名字等于马建聪,名字不等于周建聪的节点","g.V().has('name', '马建聪').has('name', neq('周建聪'))"
找到所有从部门出发，到医生作为目标，且类型为'拥有'的边。,g.V().hasLabel('department').outE('has').as('e').inV().hasLabel('doctor').select('e')
"找出名为loan_9的点存款的所有账号,并对这些账号的名字进行求和","g.V().has('name', 'loan_9').outE('deposit').inV().hasLabel('account').values('name').sum()"
"帮我查询id为38的编辑有关的作家的相关者, 再帮我查询和作家有关系的相关者","g.V().has('publisher', 'id', 38).as('a').bothE().as('e').otherV().hasLabel('author').as('b').bothE('relation').as('e2').otherV().as('c').select('b').bothE('relation').as('e3').otherV().as('d').select('a', 'b', 'c', 'd')"
"以98作为输入调用personalRank函数,返回id, value","g.call('PERSONALRANK').with('input', 98).project('id', 'value').by(__.select('id')).by(__.select('value'))"
"返回和合并请求PR-76有关的仓库,称为X,再返回和这个X有关联的其他合并请求,以及和X有关联的仓库","g.V().has('pullRequest', 'name', 'PR-76').as('a').bothE().otherV().hasLabel('repository').as('b').bothE().otherV().hasLabel('pullRequest').as('c').select('b').bothE().otherV().hasLabel('repository').as('d').select('a', 'b', 'c', 'd')"
"给出全部医生的伙伴,或其伙伴的伙伴",g.V().hasLabel('doctor').outE('partner').inV().outE('partner').inV().dedup()
"返回名为越南的university或company,以及与其有关的company,并返回越南的peopleNumber和这些company的peopleNumber","g.V().has(label, within('university', 'company')).has('name', '越南').bothE().otherV().has(label, 'company').project('a_peopleNumber', 'b_peopleNumber').by(select(all, 'v').unfold().has(label, within('university', 'company')).has('name', '越南').values('peopleNumber')).by(values('peopleNumber'))"
id加84乘value的最大值,g.V().hasLabel('a').project('result').by(math('(id + 84) * value')).select(values).max()
给出所有与大学华中科技大学有关系的公司的规格,"g.V().has('university', 'name', '华中科技大学').bothE().otherV().hasLabel('company').values('scale')"
返回Post_465的所有标签和喜欢它的用户。,"g.V().has('name', 'Post_465').as('a').outE('has').inV().hasLabel('tag').as('b').select('a').inE('likes').outV().hasLabel('user').as('c').select('a', 'b', 'c')"
请帮我查找23个与ISSUE-66和ISSUE-80都存在关系的合并请求或事项节点,"g.V().has('name', 'ISSUE-66').as('a').outE().as('e').inV().hasLabel(within('pullRequest', 'issue')).as('b').inE().as('e2').outV().has('name', 'ISSUE-80').as('c').select('b').limit(23)"
请帮我找出与person李宏和person吴月都存在关系的person节点，并返回他们的gender和name,"g.V().has('person', 'name', '李宏').outE().inV().hasLabel('person').as('b').inE().outV().has('person', 'name', '吴月').select('b').values('gender', 'name')"
帮我查询184个与张伟和赵月都存在关系的person节点,"g.V().has('name', '张伟').as('a').outE().as('e').inV().hasLabel('person').as('b').inE().as('e2').outV().has('name', '赵月').as('c').select('b').limit(184)"
请帮我查找与person陈雪有购买关系的2度以内的环,"g.V().has('person', 'name', '陈雪').as('a').repeat(bothE('buy').otherV().simplePath()).times(2).where(cyclicPath()).select('a').project('a.id', 'b_id').by(id()).by(select(all, 'a').unfold().tail(1).id())"
"以31作为输入调用personalRank函数,返回id, value","g.call('PERSONALRANK').with('input', 31).project('id', 'value').by('id').by('value')"
"请帮我找出源点标签等于编辑,目标点标签等于书,标签等于作家的边",g.V().hasLabel('publisher').outE('author').hasLabel('book').inV().hasLabel('book').select('e')
"找出类型为国家,名为英国的点,返回这些点的id,人数","g.V().hasLabel('country').has('name', '英国').project('a.id', 'a.peopleNumber').by(values('id')).by(values('peopleNumber'))"
请帮我查找全部标签为city的点,g.V().hasLabel('city')
 合作伙伴的合作伙伴,"g.V().hasLabel('company').as('a').outE('partner').inV().hasLabel('company').range(1,2).as('b').select('b')"
"查找和用户郑伟有关的用户,称为X,再查找和这个X有关联的其他用户,以及和X有关联的标签","g.V().has('user', 'name', '郑伟').as('a').bothE().otherV().hasLabel('user').as('b').bothE().otherV().hasLabel('user').as('c').select('b').bothE().otherV().hasLabel('tag').as('d').select('a', 'b', 'c', 'd')"
"返回forum contain的user,返回其源点的value乘511的最大值,以及目标点的age加4的数量","g.V().hasLabel('forum').as('a').outE('contain').as('e').inV().hasLabel('user').as('b').select('a', 'b').by('value').by('age').project('max_value', 'count_age').by(select('a').math('_ * 511').max()).by(select('b').math('_ + 4').count())"
"帮我查询名为杜伟和杜思琪的,标签为读者的点公共的相关者节点的名单","g.V().has('reader', 'name', '杜伟').as('a').outE('relation').inV().as('b').inE('relation').outV().has('reader', 'name', '杜思琪').as('c').select('b').values('name')"
"查找所有账号的伙伴,或其伙伴的伙伴","g.V().hasLabel('account').as('a').outE('partner').inV().hasLabel('account').range(1,2).as('b').select('b')"
"查找12个和类型是person的点有朋友关系的person,并且和这些person有家人关系的person",g.V().hasLabel('person').as('a').outE('friend').inV().hasLabel('person').as('b').outE('family').inV().hasLabel('person').as('c').select('c').limit(12)
 帮我找出马宏和陈雪的共同朋友。,"g.V().has('user', 'name', '马宏').outE('friend').inV().as('b').inE('friend').outV().has('user', 'name', '陈雪').select('b').limit(179)"
请帮我找出名为马思琪的买家点，并返回他们的ID和年龄。,"g.V().hasLabel('buyer').has('name', '马思琪').project('a.id', 'a.age').by('id').by('age')"
 知乎的合作伙伴是知乎的合作伙伴的合作伙伴。,"g.V().hasLabel('forum').has('name', '知乎').outE('partner').inV().outE('friend').inV().outE('partner').inV()"
"帮我查询所有名为人人影城的点的,id不是61或id不为空的friend,返回这些friend的category,和边的f0","g.V().has('name', '人人影城').outE('friend').as('e').inV().as('b').where(or(__.not(has('id', 61)), has('id', neq(null)))).select('b', 'e').by('category').by('f0')"
获取用户陈雪喜欢的帖子所带的标签,"g.V().has('user', 'name', '陈雪').out('likes').out('has').dedup()"
"帮我查询和标签等于论坛的点有包含关系的用户,并且和这些用户有发布关系的帖子,并且和这些帖子有拥有关系的标签",g.V().hasLabel('forum').as('a').out('contain').hasLabel('user').as('b').out('publish').hasLabel('post').as('c').out('has').hasLabel('tag').as('d').select('d')
 找出李宏的账号，返回他欠款的贷款金额和相应的权重。,"g.V().has('person', 'name', '李宏').outE('own').inV().hasLabel('account').outE('repay').inV().hasLabel('loan').project('amount', 'weight').by(values('amount')).by(values('weight'))"
"输入表的列为value,scale,name, 数据为(478,'medium','美团'),(385,'large','字节'),(302,'small','谷歌'), 以属性value作为相等条件,查询所有软件以名字,id分组的价值, 根据价值从大到小排序","g.inject([478:['scale':'medium','name':'美团'],385:['scale':'large','name':'字节'],302:['scale':'small','name':'谷歌']]).as('p').unfold().as('kv').select('kv').by(keys).by(values).as('p_value','p_data').V().hasLabel('software').as('a').where(eq('a')).by('value').by('p_value').select('a').project('value','name','id').by('value').by('name').by('id').group().by(select('name','id').by('name').by('id')).by(select('value')).order(local).by(values, desc).select(values).unfold()"
请帮我找出武汉大学的系。,"g.V().hasLabel('university').has('name', '武汉大学').as('b').outE('has').as('e').inV().hasLabel('department').as('a').select('a', 'b')"
返回源点标签为评论，边标签为所属边的那些边。计算这些边的源点ID对6取余的结果，再将结果对28取余；同时计算这些边的源点ID对80取余的结果，并求平均值。,"g.V().hasLabel('comment').outE('belong').project('mod6mod28', 'avgMod80').by(__.values('srcId').math('_ % 6').math('_ % 28')).by(__.values('srcId').math('_ % 80').mean())"
 请找出与教师点相关的课程节点，按其ID和课时分组，返回ID和课时。,"g.V().hasLabel('teacher').bothE('teach').otherV().hasLabel('course').group().by(values('id', 'courseHour')).select(keys).unfold().project('b.id', 'b.courseHour').by(select(keys).select('id')).by(select(keys).select('courseHour'))"
"请帮我找出城市的三角的环,边类型为包含, 并返回这些点的id","g.V().hasLabel('city').as('a').outE('contain').inV().as('b').outE('contain').inV().as('c').where(__.as('c').outE('contain').inV().as('a')).select('a', 'b', 'c').by().by('id').by('id')"
"给出和用户何建国有关的帖子,称为X,再给出和这个X有关联的其他帖子,以及和X有关联的用户","g.V().has('user', 'name', '何建国').as('a').bothE().otherV().hasLabel('post').as('b').bothE().otherV().hasLabel('post').as('c').select('b').bothE().otherV().hasLabel('user').as('d').select('a', 'b', 'c', 'd')"
帮我查询以belong关系关联了city上海的company,"g.V().has('city', 'name', '上海').inE('belong').outV().hasLabel('company')"
找出前155个标签等于创造的边,g.E().hasLabel('creates').limit(155)
帮我查询全部与person吴建聪有关系的账号的上次登录时间,"g.V().has('person', 'name', '吴建聪').bothE().otherV().hasLabel('account').values('lastLoginTime')"
"以(145,1998-06-19,941)作为请求表数据,属性分别为value,createTime,wordCount, 以属性value作为相等条件,请帮我找出与论坛百度贴吧有forum_contain_post关系的3度以内的环","g.withSideEffect('p', [['value':145, 'createTime':'1998-06-19', 'wordCount':941]]).V().hasLabel('forum').has('value', 145).has('name', '百度贴吧').as('a').repeat(bothE('forum_contain_post').otherV().simplePath()).times(2).where(loops().is(gt(0))).where(eq('a')).path().by('id').by(id)"
"查找名为Flink的点拥有的所有用户,并对这些用户的身高进行求和","g.V().has('name', 'Flink').out('has').hasLabel('user').values('height').sum()"
"输入表的列为height,age,name, 数据为(199,21,'张轩'),(199,5,'陈思琪'), 以属性name作为相等条件,帮我查询book的2度的环","g.withSideEffect('p', [['height':199,'age':21,'name':'张轩'], ['height':199,'age':5,'name':'陈思琪']]).V().hasLabel('book').as('a').where(__.in().as('b').out().as('a')).by('name').by(__.select('p').unfold().select('name')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"查询名为文学院的部门,以及与其有关的学生,并返回文学院的大小和这些学生的名字","g.V().has('department', 'name', '文学院').as('a').bothE().as('e').otherV().hasLabel('student').as('b').select('a', 'b').by('size').by('name')"
"帮我查询标签等于订单,名为Order_111的点,返回这些点的名字,价值,价格","g.V().hasLabel('orders').has('name', 'Order_111').project('a.name', 'a.value', 'a.price').by(values('name')).by(values('value')).by(values('price'))"
"帮我查询和forum百度贴吧有contain关系的user,再帮我查询以contain关系关联了百度贴吧的user","g.V().has('forum', 'name', '百度贴吧').as('a').bothE('contain').otherV().hasLabel('user').as('b', 'c').select('a', 'b', 'c')"
"以(169,19,57),(194,92,2),(168,6,12),(180,21,81)作为请求表数据,属性分别为height,id,age, 源点的id等于输入表id,查询和person吴科有关的电影院,再查询和吴科person_likes_comment的其他评论,返回它们","g.inject([['height':169,'id':19,'age':57],['height':194,'id':92,'age':2],['height':168,'id':6,'age':12],['height':180,'id':21,'age':81]]).as('p').unfold().as('p_row').select('p_row').by(unfold()).V().hasLabel('person').has('id', __.select('p_row').select('id')).has('name', '吴科').as('a').bothE().as('e').otherV().hasLabel('cinema').as('b').select('a').outE('person_likes_comment').as('e2').inV().hasLabel('comment').as('c').select('a', 'b', 'c')"
请帮我找出杜月和徐梅共同的父节点。,"g.V().has('person', 'name', '杜月').out('parent').as('b').in('parent').has('person', 'name', '徐梅').select('b').values('name')"
找出标签为person且是杜红和郑建聪共同lover的点,"g.V().hasLabel('person').has('name', '杜红').out('lover').as('b').in('lover').hasLabel('person').has('name', '郑建聪').select('b').values('name')"
"帮我查询所有与美团存在creates关系的software,software与software存在uses关系的点,返回这些点的lang","g.V().has('name', '美团').out('creates').hasLabel('software').out('uses').hasLabel('software').values('lang')"
请按名称从大到小的顺序，为我列出所有电影按照类别分组的名字,g.V().hasLabel('film').group().by('category').by(values('name').order().by(desc)).select(values).unfold()
"找出所有源点类型为person,边类型为invest,并且timeStamp不等于2021年10月30日的边",g.V().hasLabel('person').outE('invest').where(values('timeStamp').is(neq('2021-10-30'))).dedup()
查询满足条件创建时间等于1996年01月11日且语言不是English且字数在76到181之间的节点,"g.V().has('createTime', '1996-01-11').has('lang', neq('English')).has('wordCount', between(76, 181))"
 找出与 person 相关联的 software 节点，并按语言分组，返回语言。,g.V().hasLabel('person').bothE('buy').bothV().hasLabel('software').values('lang').groupCount().by(__.identity()).select(values).unfold()
"输入请求点id的列表824,795,558,172,565, 以属性id作为相等条件,查找全部与person吴轩有关系的loan的id","g.withSideEffect('p', [824, 795, 558, 172, 565]).V().hasLabel('person').where(and(__.values('id').is(within('p')), __.has('name', '吴轩'))).bothE().otherV().hasLabel('loan').values('id')"
"查找person陈强创造的评论,以及喜欢这些评论的person","g.V().has('person', 'name', '陈强').outE('creates').inV().hasLabel('comment').as('b').inE('likes').outV().hasLabel('person').as('c').select('b', 'c')"
"请帮我查找所有源点满足条件price在857.51到2690.58之间,目标点满足条件price小于等于3378.99或sellerNumber在607.03到1125.82之间,且标签等于contain的边","g.E().hasLabel('contain').where(and(__.outV().has('price', between(857.51, 2690.58)), or(__.inV().has('price', lte(3378.99)), __.inV().has('sellerNumber', between(607.03, 1125.82)))))"
人数对839取余减79乘价值的求和值,"g.V().hasLabel('a').project('result').by(values('peopleNumber', 'value').by(constant(839)).by(constant(79)).math('(_0 % _1 - _2) * _3').sum())"
"以143,416作为请求点id, 源点的id等于输入表id,给出标签等于person_likes_comment,且f1为true,srcId对157取余的最小值大于854且f0不等于822的边","g.withSideEffect('p', [143, 416]).V().has('id', within('p')).outE('person_likes_comment').where(and(__.values('f1').is(true), __.values('srcId').math('_ % 157').min().is(gt(854)), __.values('f0').is(neq(822)))).dedup()"
查询person周强 knows的人，返回这些人的姓名、身高和ID,"g.V().hasLabel('person').has('name', '周强').out('knows').out('knows').project('c.name', 'c.height', 'c.id').by('name').by('height').by('id')"
"以560,589,783,238作为请求点id, 以属性id作为相等条件,查询全部和person张建聪之间有person_pay_person关系的person","g.inject([560, 589, 783, 238]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('name', '张建聪').outE('person_pay_person').inV().hasLabel('person').dedup()"
 找到城市的所有合作伙伴，或者城市合作伙伴的合作伙伴。,"g.V().hasLabel('city').outE('partner').inV().range(1, 2).dedup()"
"给出被university复旦大学has的department,和复旦大学has的department","g.V().hasLabel('university').has('name', '复旦大学').as('b').outE('has').inV().hasLabel('department').as('a').select('b').outE('has').inV().hasLabel('department').as('c').select('a', 'b', 'c')"
"给出名为少年闰土的书,以及与其有关的编辑,并返回少年闰土的id和这些编辑的性别","g.V().hasLabel('book').has('name', '少年闰土').as('a').bothE().otherV().hasLabel('publisher').as('b').select('a', 'b').by('id').by('gender')"
"查询标签为公司,名为谷歌的点,返回这些点的规格,价值","g.V().hasLabel('company').has('name', '谷歌').project('scale', 'value').by('scale').by('value')"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出所有杜建聪的点knows的person,然后请帮我找出杜建聪被likes的person,一起返回","g.V().has('person', 'name', '杜建聪').as('a').outE('person_knows_person').inV().as('b').select('a').inE('person_likes_person').outV().as('c').select('a', 'b', 'c')"
给出person的2跳的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(2).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"查找所有id为10的person关联的person,和以认识关系关联了这些person的其他person","g.V().has('person', 'id', 10).bothE().otherV().hasLabel('person').as('b').inE('knows').otherV().hasLabel('person').as('c').select('b', 'c')"
返回前11个标签等于引用的边,g.E().hasLabel('refers').limit(11)
" 请帮我查询一个源点（label为帖子）,和一个目标点（label为标签）,以及它们之间拥有的边（label)。",g.V().hasLabel('post').outE('has').as('e').inV().hasLabel('tag').select('e')
"返回从seller孙科出发,经过标签为ask的边,走3跳到达的buyer点","g.V().has('seller', 'name', '孙科').repeat(outE('ask').inV()).times(3).hasLabel('buyer')"
"给出id为152的用户有关的事项的相关者, 再给出和事项有关系的朋友","g.V().has('user', 'id', 152).as('a').bothE().otherV().hasLabel('issue').as('b').bothE().otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
"请帮我找出和city巴黎有belong关系的country,再请帮我找出以belong关系关联了巴黎的country","g.V().has('city', 'name', '巴黎').as('a').outE('belong').inV().hasLabel('country').as('b').select('a').inE('belong').outV().hasLabel('country').as('c').select('a', 'b', 'c')"
"查询183个用户韩若涵和赵轩,共同的相关者","g.V().has('user', 'name', '韩若涵').outE('relation').inV().as('b').inE('relation').outV().has('user', 'name', '赵轩').select('b').limit(183)"
"帮我查询和person有关联的person节点,并根据其年龄,性别分组,返回年龄,性别,以及身高减182的值","g.V().hasLabel('person').as('a').bothE('likes').otherV().hasLabel('person').as('b').select('b').group().by(values('age', 'gender').fold()).by(project('age', 'gender', 'height_diff').by(select('b').values('age')).by(select('b').values('gender')).by(select('b').values('height').is(neq(null)).math('_ - 182')).fold())"
查找和person孙若涵之间有家人关系的person,"g.V().has('person', 'name', '孙若涵').outE('family').inV().hasLabel('person')"
找出薪水不为空的人知道的人的名字，以及这些人支付的人的名字。,"g.V().hasLabel('person').has('salary').as('a').out('knows').hasLabel('person').as('b').out('pay').hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
查询买家杜科取消的订单中包含的商品,"g.V().hasLabel('buyer').has('name', '杜科').outE('cancel').inV().hasLabel('orders').outE('contain').inV().hasLabel('goods')"
 返回同时与标签为'person'的点有'pay'关系，以及与这些点有'knows'关系，并且与这些点有'pay'关系的其他点。,g.V().hasLabel('person').as('a').outE('pay').as('e').inV().hasLabel('person').as('b').outE('knows').as('e2').inV().hasLabel('person').as('c').outE('pay').as('e3').inV().hasLabel('person').as('d').select('d')
"帮我查询全部与Geaflow123存在还款关系的贷款,贷款与账号存在存款关系的点,返回这些点的创建时间","g.V().has('name', 'Geaflow123').outE('repay').inV().hasLabel('loan').outE('deposit').inV().hasLabel('account').values('createTime')"
"请帮我找出全部源点标签等于帖子,目标点标签等于标签,标签等于帖子的边",g.V().hasLabel('post').outE('post').as('e').inV().hasLabel('tag').select('e')
"使用列为weight,address,id, 数据为(211,'南区',99),(649,'A座',19)的子查询作为输入表, 以属性address作为相等条件,帮我查询130个名为马月的点creates的标签为prescription的节点,且节点name不等于Prescription_247或id大于77","g.withSideEffect('p', [[211, '南区', 99], [649, 'A座', 19]]).V().has('address', within(select('p').unfold().project('weight', 'address', 'id').by(__.tail(1)).by(__.tail(2)).by(__.tail(3)).select('address'))).has('name', '马月').outE('doctor_creates_prescription').inV().hasLabel('prescription').or(has('name', neq('Prescription_247')), has('id', gt(77))).limit(130)"
"查询源点类型是orders,边类型是contain,且weight小于等于116.96或f1不是true的边","g.V().hasLabel('orders').outE('contain').or(has('weight', lte(116.96)), has('f1', neq(true))).elementMap()"
"以863,961,625,412作为请求点id, 以属性id作为相等条件,查询person creates的comment,返回其源点的age对96取余的最大值,以及目标点的wordCount加622的最小值","g.inject([863, 961, 625, 412]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).as('a').outE('person_creates_comment').as('e').inV().hasLabel('comment').as('b').select('a', 'b').by('age').by('wordCount').project('max_age_mod', 'min_wordcount_plus').by(__.select('a').math('_ % 96').max()).by(__.select('b').math('_ + 622').min())"
"查询和label为forum的点有contain关系的user,以及和这些user有publish关系的post,以及和这些post有has关系的tag",g.V().hasLabel('forum').out('contain').hasLabel('user').out('publish').hasLabel('post').out('has').hasLabel('tag').dedup()
 查找id为192的department中的医生的伴侣，再查找与医生有关系的友人。,"g.V().has('department', 'id', '192').as('a').bothE().otherV().hasLabel('doctor').as('b').bothE().otherV().hasLabel('doctor').where(__.as('b').outE('partner').inV().as('c')).where(__.as('b').outE('friend').inV().as('d')).select('a', 'b', 'c', 'd')"
"输入表的列为id,name,value, 数据为(41,'美团',228), 以属性value作为相等条件,请帮我查找id为65的点的薪资,名字,性别","g.withSideEffect('p', [['id':41, 'name':'美团', 'value':228]]).V().has('value', __.select('p').unfold().select('value')).has('id', '65').project('salary', 'name', 'gender').by('salary').by('name').by('gender')"
返回所有标签为'贷款'且被命名为'defaultName'或'defaultName1'的共同伙伴节点列表。,"g.V().hasLabel('loan').has('name', 'defaultName').outE('partner').inV().as('b').inE('partner').outV().hasLabel('loan').has('name', 'defaultName1').select('b').values('name')"
找到叫郑若涵的人,"g.V().hasLabel('person').has('name', '郑若涵')"
 请问法学院和计算机学院是否有共同的合作伙伴？,"g.V().has('department', 'name', '法学院').outE('partner').inV().as('b').inE('partner').outV().has('department', 'name', '计算机学院').select('b').limit(24)"
 返回一个名为Prescription_378的点，并返回该点的创建时间和ID。,"g.V().hasLabel('prescription').has('name', 'Prescription_378').project('a.createTime', 'a.id').by('createTime').by('id')"
"给出所有和名为何红的卖家有相关者关系,或有相关者的相关者关系的买家","g.V().has('seller', 'name', '何红').out('relation').hasLabel('buyer').union(identity(), out('relation').hasLabel('buyer')).dedup()"
帮我查询id为37的点的名字,"g.V().has('id', 37).values('name')"
 请问黄建聪的合作伙伴是谁？,"g.V().has('user', 'name', '黄建聪').out('partner').out('partner').out('partner')"
"查询和buyer黄若涵有关的buyer,称为X,再查询和这个X有关联的其他buyer,以及和X有关联的orders","g.V().hasLabel('buyer').has('name', '黄若涵').as('a').bothE().otherV().hasLabel('buyer').as('b').bothE().otherV().hasLabel('buyer').as('c').select('b').bothE().otherV().hasLabel('orders').as('d').select('a', 'b', 'c', 'd')"
获取名为Prescription_428的处方,"g.V().hasLabel('prescription').has('name', 'Prescription_428')"
"用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));返回和cinema横店影院有cinema_releases_film关系的film,再返回以cinema_releases_film关系关联了横店影院的film","g.V().hasLabel('cinema').has('name', '横店影院').as('a').bothE('cinema_releases_film').otherV().hasLabel('film').as('b').select('a').bothE('cinema_releases_film').otherV().hasLabel('film').as('c').select('a', 'b', 'c')"
"查找论坛知乎的全部标签等于朋友的边,并根据权重升序排列,返回134个","g.V().hasLabel('forum').has('name', '知乎').outE('friend').order().by('weight', asc).limit(134).inV()"
"请帮我查找issue ISSUE-351 belong的repository,被其他user likes的数量","g.V().has('issue', 'name', 'ISSUE-351').out('belong').in('likes').count()"
"给出id为131的点的id,性别,薪资","g.V().has('id', 131).project('a.id', 'a.gender', 'a.salary').by(values('id')).by(values('gender')).by(values('salary'))"
找出和软件Calcite之间有使用关系的软件,"g.V().has('software', 'name', 'Calcite').out('uses').hasLabel('software')"
"请帮我找出id为80的person有关的person的朋友, 再请帮我找出和person有关系的伙伴","g.V().has('person', 'id', 80).as('a').bothE().otherV().hasLabel('person').as('b').both().hasLabel('person').as('c').select('b').bothE('friend').otherV().hasLabel('person').as('c').dedup().select('b').bothE('partner').otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"输入表的列为gender,name,height, 数据为('famale','王思思',199),('famale','吴思琪',172),('male','李思思',168), 以属性height作为相等条件,帮我查询和读者有关联的书节点,并根据其创建时间,类别,价格分组,返回创建时间,类别,价格,以及id的最小值对6取余的值","g.inject(['famale','王思思',199],['famale','吴思琪',172],['male','李思思',168]).as('p').select('p').by(project('gender','name','height').by(limit(local,1)).by(limit(local,2)).by(limit(local,3))).unfold().as('p_row').V().hasLabel('reader').as('a').where(eq('a')).by('height').by(select('p_row').select('height')).bothE('reader_likes_book').otherV().hasLabel('book').as('b').group().by(project('createTime','category','price').by(select('b').values('createTime')).by(select('b').values('category')).by(select('b').values('price'))).by(project('minIdMod6').by(select('b').values('id').min().math('_ % 6'))).select(values).unfold().project('createTime','category','price','minIdMod6').by(select(keys).select('createTime')).by(select(keys).select('category')).by(select(keys).select('price')).by(select(values).select('minIdMod6'))"
"查找所有源点label为person,边label为likes,以及满足条件f0在571到698之间的边","g.V().hasLabel('person').outE('likes').has('f0', between(571, 698)).dedup()"
给出所有和课程计算机体系结构之间有属于关系的部门,"g.V().hasLabel('course').has('name', '计算机体系结构').outE('belong').inV().hasLabel('department')"
 请帮我查询艺术学院的课程，以及该学院的其他学生。,"g.V().has('department', 'name', '艺术学院').as('a').bothE().otherV().hasLabel('course').as('b').select('a').outE('has').inV().hasLabel('student').as('c').select('a', 'b', 'c')"
"返回132个权重不等于23且id小于75的贷款,根据金额升序排列","g.V().hasLabel('loan').has('weight', neq(23)).has('id', lt(75)).order().by('amount', asc).limit(132)"
"找出和person王强有关的person,再找出和王强friend的其他person,返回它们","g.V().has('person', 'name', '王强').as('a').bothE().otherV().hasLabel('person').as('b').select('a').bothE('friend').otherV().hasLabel('person').as('c').select('a', 'b', 'c')"
"帮我查询114个和label为部门的点有拥有关系的医生,并且和这些医生有属于关系的部门",g.V().hasLabel('department').as('a').out('has').hasLabel('doctor').as('b').out('belong').hasLabel('department').as('c').select('c').limit(114)
"帮我查询label为software,名为Hive的点,返回这些点的name,value,lang","g.V().hasLabel('software').has('name', 'Hive').project('a.name', 'a.value', 'a.lang').by('name').by('value').by('lang')"
请帮我找出全部与person韩红有关系的账号的上次登录时间,"g.V().hasLabel('person').has('name', '韩红').bothE().otherV().hasLabel('account').values('lastLoginTime')"
返回美团公司,"g.V().hasLabel('company').has('name', '美团')"
"返回和person孙雪有关的person,称为X,再返回和这个X有关联的其他person,以及和X有关联的person","g.V().has('person', 'name', '孙雪').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"请帮我找出和person韩轩有关系的person,返回这些点的薪资,身高,性别","g.V().has('person', 'name', '韩轩').bothE().otherV().hasLabel('person').project('salary', 'height', 'gender').by(values('salary')).by(values('height')).by(values('gender'))"
"返回所有源点标签为大学,目标点标签为部门,标签为大学或课程的边","g.E().hasLabel('university', 'course').where(__.outV().hasLabel('university')).where(__.inV().hasLabel('department'))"
给出与account Faker有transfer关系的1跳以内的环,"g.V().hasLabel('account').has('name', 'Faker').as('a').bothE('transfer').otherV().where(cyclicPath()).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').values('id')).by(select('b').values('id'))"
 返回相关者或相关者的相关者。,"g.V().hasLabel('company').outE('relation').inV().range(1, 2).dedup()"
查询名为法国的节点包含的大学,"g.V().has('name', '法国').out('contain').hasLabel('university')"
给出与城市广州和上海都存在包含关系的点,"g.V().has('city', 'name', '广州').outE('contain').inV().as('b').inE('contain').outV().has('city', 'name', '上海').select('b')"
"请帮我查找教师教的课程,返回其源点的身高对165取余乘156的值,以及目标点的value的最小值加价值的最小值","g.V().hasLabel('teacher').as('a').outE('teach').as('e').inV().hasLabel('course').as('b').select('a', 'b').by('height').by('value').project('expr1', 'expr2').by(__.select('a').math('_ % 165 * 156')).by(__.select('b').fold().project('min_value', 'values').by(__.unfold().min()).by(__.unfold().fold()).math('min_value + min(values)'))"
"用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询标签等于订单,名为Order_450的点,返回这些点的名字","g.V().hasLabel('orders').has('name', 'Order_450').values('name')"
查找以认识关系关联了person Jack的person,"g.V().hasLabel('person').has('name', 'Jack').inE('knows').outV().hasLabel('person')"
返回全部和帖子Post_391有2跳关系的帖子,"g.V().has('post', 'name', 'Post_391').repeat(bothE().otherV().simplePath()).times(2).hasLabel('post').dedup()"
"输入表的列为address,name,weight, 数据为('东区','传染部',126),('C栋','耳鼻喉科',140), 以属性address作为相等条件,找出以contain关系关联了medicine阿莫新林的prescription","g.inject([['东区','传染部',126],['C栋','耳鼻喉科',140]]).as('p').unfold().as('p_row').select('p_row').by(project('address','name','weight').by(limit(local,1)).by(limit(local,2)).by(limit(local,3))).V().hasLabel('medicine').as('a').where(and(__.select('a').values('address').as('a_address'), __.select('p_row').select('address').as('p_address'), __.select('a_address').is(eq('p_address')))).has('name','阿莫新林').inE('prescription_contain_medicine').outV().as('b').select('b')"
"查询全部源点label为person,目标点label为person,label为person的边",g.V().hasLabel('person').outE('person').where(inV().hasLabel('person'))
"给出所有与郑思琪存在watch关系的film,film与tag存在has关系的点,返回这些点的value","g.V().has('name', '郑思琪').outE('watch').inV().hasLabel('film').outE('has').inV().values('value')"
请找出与杜国强有关联的人，以及与李轩有关联的人，并将他们全部返回。,"g.V().has('person', 'name', '杜国强').as('a').out('knows').as('b').select('a', 'b').by().fold().as('part1').V().has('person', 'name', '李轩').as('c').out('pay').as('d').select('c', 'd').by().fold().as('part2').select('part1', 'part2').unfold().unfold()"
 列出吴月和韩月两个人的所有公共人物关系。,"g.V().has('person', 'name', '吴月').outE('relation').inV().as('b').inE('relation').outV().has('person', 'name', '韩月').select('b').values('name')"
"查找和处方有关联的药品节点,并根据其价格,名字分组,返回价格,名字,以及权重除959的值","g.V().hasLabel('prescription').as('a').bothE('contain').otherV().hasLabel('medicine').as('b').select('b').values('price', 'name', 'weight').by().by().by(__.math('_ / 959')).group().by(__.select('price', 'name')).by(__.select('weight').tail(1))"
"找出全部源点createTime为2014年05月03日且value小于623,目标点amount小于等于5508.52,且label为repay的边","g.E().hasLabel('repay').where(and(outV().has('createTime', '2014-05-03').has('value', lt(623)), inV().has('amount', lte(5508.52))))"
"根据value,id,level分组,计算value的最大值加366的值","g.V().hasLabel('a').group().by(union(properties('value'), properties('id'), properties('level')).fold()).by(values('value').max()).unfold().project('result').by(select(values).math('_ + 366'))"
"查找id为3的点的id,salary,age","g.V().has('id', 3).project('id', 'salary', 'age').by('id').by('salary').by('age')"
"给出和公司蚂蚁集团有关的软件,称为X,再给出和这个X有关联的其他软件,以及和X有关联的person","g.V().has('company', 'name', '蚂蚁集团').as('a').bothE().otherV().hasLabel('software').as('b').bothE().otherV().hasLabel('software').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"请帮我查找与company微软存在belong关系,且与university重庆大学存在contain关系的city节点，返回这些city的name,及company微软的scale,及university重庆大学的value","g.V().has('company', 'name', '微软').as('a').outE('belong').inV().hasLabel('city').as('b').inE('contain').outV().has('university', 'name', '重庆大学').as('c').select('a', 'b', 'c').by('scale').by('name').by('value')"
 返回徐建国认识的作家节点，再返回这些作家节点共同认识的作家。,"g.V().has('author', 'name', '徐建国').out('knows').hasLabel('author').out('knows').hasLabel('author')"
"返回处方包含的药品,返回其源点的id减19的平均值,以及目标点的权重乘权重的值","g.V().hasLabel('prescription').as('a').outE('contain').as('e').inV().hasLabel('medicine').as('b').select('a', 'b').by('id').by('weight').project('avg_id_minus_19', 'weight_squared').by(select('a').math('_ - 19').mean()).by(select('b').math('_ * _'))"
"输入请求点id的列表82,733,588, 源点的id等于输入表id,查找全部和名为李月的seller有partner关系,或有partner的partner关系的goods","g.inject([82, 733, 588]).unfold().as('p').V().hasLabel('seller').has('id', __.select('p')).has('name', '李月').repeat(__.out('partner')).times(2).emit().hasLabel('goods').dedup()"
 华为创建的软件,"g.V().hasLabel('company').has('name', '华为').outE('creates').inV().hasLabel('software').as('b', 'a').select('a', 'b')"
"给出所有源点标签等于读者,边标签等于喜欢,并且满足条件f0在684到832之间的边","g.V().hasLabel('reader').outE('likes').has('f0', between(684, 832)).as('e').select('e')"
"以318,695,824,413,369作为请求点id, 以属性id作为相等条件,帮我查询所有处方以名字分组的权重, 根据权重从大到小排序","g.inject([318, 695, 824, 413, 369]).as('p').V().hasLabel('prescription').has('id', within('p')).group().by('name').by(values('weight').fold()).order(local).by(values, desc)"
"给出所有名为马月的,id大于等于16的朋友,返回这些朋友的id,和边的f0,f1","g.V().has('name', '马月').outE('friend').as('e').inV().has('id', gte(16)).project('b.id', 'e.f0', 'e.f1').by(values('id')).by(select('e').values('f0')).by(select('e').values('f1'))"
"请帮我找出id为67的书有关的书的引用, 再请帮我找出和书有关系的引用","g.V().has('book', 'id', 67).as('a').bothE().otherV().hasLabel('book').as('b').bothE('refers').otherV().as('c').select('b').bothE('refers').otherV().as('d').select('a', 'b', 'c', 'd')"
"请帮我查找person relates的person, 令person(b)的gender的值等于relatesperson的person的height的最大值, 再查找person relates的person","g.V().hasLabel('person').as('a').outE('relates').as('e').inV().hasLabel('person').as('b').select('b').sideEffect(__.sideEffect(__.inE('relates').as('e2').outV().hasLabel('person').as('c').values('height').max().store('maxHeight')).select('b').property('gender', __.select('maxHeight').unfold())).select('b').outE('relates').as('e3').inV().hasLabel('person').as('d').select('b', 'd').by('gender').by()"
"请帮我查找被company apply数量大于2的loan,记为relationCount,再查询这些loan apply的loan","g.V().hasLabel('loan').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('apply').hasLabel('company').id().max()).select('a', 'relationCount').where(__.select('relationCount').is(gt(2))).select('a').out('apply').hasLabel('loan').dedup()"
"查找被person认识数量大于8的person,记为relationCount,再查询这些person关联的person","g.V().hasLabel('person').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('knows').hasLabel('person').count()).where(__.select('relationCount').is(gt(8))).select('a').out('relates').hasLabel('person')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出全部person以height,name,gender分组的salary, 根据salary从大到小排序","g.V().hasLabel('person').group().by(project('height', 'name', 'gender').by(values('height')).by(values('name')).by(values('gender'))).unfold().project('salary', 'group').by(select(values).unfold().values('salary').fold()).by(select(keys)).order().by(select('salary'), desc).select('group', 'salary')"
"以708,983作为请求点id, 以属性id作为相等条件,找出全部名为马思思的点knows的person","g.inject([708, 983]).unfold().as('p').V().has('id', __.as('p')).has('name', '马思思').outE('knows').inV().hasLabel('person').dedup()"
"查找全部张建国的点knows的person,然后查找张建国被knows的person,一起返回","g.V().has('name', '张建国').as('a').outE('knows').inV().hasLabel('person').as('b').select('a').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"输入表的列为scale,id,peopleNumber, 数据为('medium',23,511),('small',71,828),('medium',3,651), 源点的id等于输入表id,查找标签为person,名为马建聪的点,返回这些点的age,height","g.inject(['medium',23,511],['small',71,828],['medium',3,651]).as('p').select('p').unfold().as('scale','id','peopleNumber').select('id').V().hasLabel('person').has('id', __.select('id')).has('name', '马建聪').project('age','height').by('age').by('height')"
"查询撰写书java程序设计的作家,和这些作家撰写的书","g.V().hasLabel('book').has('name', 'java程序设计').in('write').as('b').out('write').as('c').select('b', 'c')"
请帮我找出159个与赵建国和周梅都存在关系的cinema或film或person节点,"g.V().has('name', '赵建国').as('a').outE().as('e').inV().hasLabel(within('cinema', 'film', 'person')).as('b').inE().as('e2').outV().has('name', '周梅').as('c').select('b').limit(159)"
帮我找出与黄红和黄思思都有关系的作者节点，一共有130个。,"g.V().has('name', '黄红').outE().inV().hasLabel('author').as('b').inE().outV().has('name', '黄思思').select('b').limit(130)"
"以(126,136.84,945),(120,126.42,626),(51,116.75,548)作为请求表数据,属性分别为targetId,weight,f0, 源点的f0等于输入表f0,请帮我查找名为艺术学院的点拥有的学生,并对这些点的年龄进行求和","g.withSideEffect('p', [[126, 136.84, 945], [120, 126.42, 626], [51, 116.75, 548]]).V().has('name', '艺术学院').where(__.values('f0').is(within(__.select('p').unfold().tail(1)))).outE('department_has_student').inV().hasLabel('student').values('age').sum()"
"请帮我查找和公司美团有关的贷款,称为X,再请帮我查找和这个X有关联的其他公司,以及和X有关联的账号","g.V().hasLabel('company').has('name', '美团').as('a').bothE().otherV().hasLabel('loan').as('b').bothE().otherV().hasLabel('company').as('c').select('b').bothE().otherV().hasLabel('account').as('d').select('a', 'b', 'c', 'd')"
"以(732,'small',963),(874,'large',659),(760,'large',468)作为请求表数据,属性分别为peopleNumber,scale,value, 源点的peopleNumber等于输入表peopleNumber,返回和person李伟有person_apply_loan关系的贷款,再返回以person_invest_company关系关联了李伟的公司","g.inject([732, 'small', 963], [874, 'large', 659], [760, 'large', 468]).as('p').V().hasLabel('person').has('peopleNumber', __.select('p').unfold().limit(1)).has('name', '李伟').as('a').outE('person_apply_loan').inV().hasLabel('loan').as('b').select('a').inE('person_invest_company').outV().hasLabel('company').as('c').select('a', 'b', 'c')"
 找出巴黎所有点属于的公司，再找出属于这些公司的所有巴黎点，然后把它们一起返回。,"g.V().has('name', '巴黎').as('a').out('contain').hasLabel('company').as('b').select('a').in('belong').hasLabel('company').as('c').select('a', 'b', 'c')"
 请问Order_483订单中包含的商品，在其他订单中出现了多少份？,"g.V().hasLabel('orders').has('name', 'Order_483').outE('contain').inV().hasLabel('goods').inE('contain').outV().hasLabel('orders').count()"
"请帮我查找性别小于69或身高不是150的用户喜欢的仓库的名称,以及这些仓库 拥有的事项的名称","g.V().hasLabel('user').or(has('gender', lt(69)), has('height', neq(150))).outE('likes').inV().hasLabel('repository').as('b').outE('has').inV().hasLabel('issue').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 找到与周梅有关且与Kafka相关的节点。,"g.V().has('person', 'name', '周梅').bothE('knows').otherV().hasLabel('person').bothE('buy').otherV().has('software', 'name', 'Kafka').select('b')"
"请帮我查找与部门皮肤科存在拥有关系,且与处方Prescription_231存在创造关系的医生节点，返回这些医生的id,薪资,及部门皮肤科的权重,及处方Prescription_231的权重","g.V().hasLabel('department').has('name', '皮肤科').as('a').outE('has').inV().hasLabel('doctor').as('b').inE('creates').outV().hasLabel('prescription').has('name', 'Prescription_231').as('c').select('a', 'b', 'c').by('weight').by(values('id', 'salary')).by('weight')"
人数减人数的值,g.V().hasLabel('a').project('result').by(values('peopleNumber').math('_ - _'))
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));查找与名为字节和蚂蚁集团的点共同creates的,标签等于software的节点","g.V().has('name', '字节').outE('company_creates_software').inV().hasLabel('software').as('b').inE('company_creates_software').outV().has('name', '蚂蚁集团').select('b')"
"用如下schema的图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));找出与country中国有关系的city的id","g.V().has('country', 'name', '中国').bothE().otherV().hasLabel('city').values('id')"
"用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出21个与百年孤独和呐喊都存在关系的book节点","g.V().has('name', '百年孤独').out().hasLabel('book').as('b').in().has('name', '呐喊').select('b').limit(21)"
 查询物理学院和计算机学院中，共同拥有标签为'department'的节点。,"g.V().has('department', 'name', '物理学院').outE('relation').inV().as('b').inE('relation').outV().has('department', 'name', '计算机学院').select('b').values('name')"
 查找170个人数在64709到71808之间、或名字是中国、或人数不为空的国家，按人数升序排列。,"g.V().hasLabel('country').or(has('peopleNumber', between(64709, 71808)), has('name', '中国'), has('peopleNumber')).order().by('peopleNumber', asc).limit(170)"
 请问能否帮我找出 'university重庆大学' 节点下的 'department' 节点下的 'student'?,"g.V().hasLabel('university').has('name', '重庆大学').out('has').hasLabel('department').out('has').hasLabel('student')"
帮我按id、amount和weight对loan进行分组，并按照weight从大到小排序结果,"g.V().hasLabel('loan').group().by(project('id', 'amount', 'weight').by('id').by('amount').by('weight')).order(local).by(values, desc)"
"找出被仓库Mybatis拥有的事项,和Mybatis拥有的合并请求","g.V().has('repository', 'name', 'Mybatis').as('b').outE('has').inV().hasLabel('issue').as('a').select('b').outE('has').inV().hasLabel('pullRequest').as('c').select('a', 'b', 'c')"
"找出id为75的buyer creates的orders, 并将orders有关的seller的salary的最小值赋值给orders的id, 接着查询orders的id小于75的orders contain的goods","g.V().hasLabel('buyer').has('id', 75).out('creates').hasLabel('orders').as('b').sideEffect(select('b').property('id', __.inE().hasLabel('creates').outV().hasLabel('seller').values('salary').min())).filter(select('b').values('id').is(lt(75))).out('contain').hasLabel('goods').as('d').select('b', 'd').by('id').by()"
 查询陈宏与谁以consult关系联系。,"g.V().has('seller', 'name', '陈宏').inE('consult').outV().hasLabel('buyer')"
"返回所有和名为Post_451的帖子有相关者关系,或有相关者的相关者关系的标签","g.V().hasLabel('post').has('name', 'Post_451').outE('relation').inV().hasLabel('tag').union(identity(), outE('relation').inV().hasLabel('tag')).dedup()"
"查找全部和goods杯子有关系的goods,返回这些点的category","g.V().has('goods', 'name', '杯子').both().hasLabel('goods').values('category')"
请帮我查找全部名为武汉的节点包含的大学或城市或公司,"g.V().has('name', '武汉').outE('contain').inV().hasLabel(within('university', 'city', 'company')).dedup()"
 请问能否用更简单的语言表达？,"g.V().has('person', 'id', '2').as('a').bothE().otherV().hasLabel('person').as('b').both().hasLabel('person').as('c').select('b').outE('colleague').otherV().hasLabel('person').as('c').select('b').outE('lover').otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
 找出标签为tag的点，按value升序排序。,"g.V().hasLabel('tag').order().by('value', asc)"
 查询ID为42的城市中包含的公司名称，以及这些公司与哪些大学合作。,"g.V().has('city', 'id', 42).out('contain').hasLabel('company').as('b').out('cooperate').hasLabel('university').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"找出和类型为person的点有喜欢关系的person,并且和这些person有支付关系的person,并且和这些person有认识关系的person",g.V().hasLabel('person').as('a').out('likes').hasLabel('person').as('b').out('pay').hasLabel('person').as('c').out('knows').hasLabel('person').as('d').select('d')
"给出全部名为孙强的,类别不是科普的伙伴,返回这些伙伴的字数,和边的目标点id,f0,源点id","g.V().has('name', '孙强').outE('partner').as('e').inV().has('category', neq('科普')).as('b').select('b', 'e').by('wordCount').by(values('targetId', 'f0', 'srcId'))"
"以(8491,'male',15),(4641,'male',63),(3423,'male',47)作为请求表数据,属性分别为salary,gender,age, 源点的salary等于输入表salary,返回全部person以height分组的id, 根据id从小到大排序","g.inject([['salary': 8491, 'gender': 'male', 'age': 15], ['salary': 4641, 'gender': 'male', 'age': 63], ['salary': 3423, 'gender': 'male', 'age': 47]]).as('p').unfold().as('p_row').select('p_row').by(select('salary')).as('salary_val').V().hasLabel('person').has('salary', select('salary_val')).group().by('height').by(__.id().fold()).order(Scope.local).by(__.unfold().order().by(Column.keys))"
找出id为123的点的名字,"g.V().has('id', 123).values('name')"
"找出id为135的部门拥有的学生, 并将学生有关的部门的大小的个数赋值给学生的名字, 接着查询学生的名字小于135的学生选择的课程","g.V().hasLabel('department').has('id', 135).out('has').hasLabel('student').as('b').sideEffect(__.select('b').sack(assign).by(__.constant(0)).sack(sum).by(__.bothE().otherV().hasLabel('department').values('size').count()).property('name', __.sack())).has('name', lt(135)).out('selects').hasLabel('course').as('d').select('b', 'd').by('name').by()"
"请帮我查找和评论Comment_429有关的person,再请帮我查找和Comment_429属于的其他电影,返回它们","g.V().hasLabel('comment').has('name', 'Comment_429').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('belong').inV().hasLabel('film').as('c').select('a', 'b', 'c')"
"查找学生黄月选择的课程,以及选择这些课程的学生, 令课程的名字等于学生的身高的求和值, 返回学生(a)的薪资,课程(b)的名字,学生(c)的年龄","g.V().hasLabel('student').has('name', '黄月').as('a').outE('selects').inV().hasLabel('course').as('b').inE('selects').outV().hasLabel('student').as('c').select('a', 'b', 'c').by(values('salary')).by(select('b').in('selects').values('height').sum()).by(values('age'))"
 Find the book that author Huang Guoqiang wrote.,"g.V().has('author', 'name', '黄国强').out('knows').out('write').hasLabel('book')"
查询所有与徐宏存在朋友关系的人，以及这些人之间存在的朋友关系节点，并返回这些节点的名字。,"g.V().has('name', '徐宏').out('friend').as('b').hasLabel('person').out('friend').as('c').hasLabel('person').select('c').values('name')"
"请帮我找出前19个销量不为空且销量不是1878.81,或销量大于等于433.74的商品","g.V().hasLabel('goods').or(has('sellerNumber', neq(null)).has('sellerNumber', neq(1878.81)), has('sellerNumber', gte(433.74))).limit(19)"
"请帮我查找169个名为Spark的点使用的类型是软件的节点,且节点id为空或是否开源为false","g.V().has('name', 'Spark').outE('uses').inV().hasLabel('software').where(or(hasNot('id'), has('openSource', false))).limit(169)"
 请帮我查找与城市标签相关的大学，以及这些大学与相关公司的合作关系，以及这些公司与城市的隶属关系。,g.V().hasLabel('city').as('a').outE('contain').inV().hasLabel('university').as('b').outE('cooperate').inV().hasLabel('company').as('c').outE('belong').inV().hasLabel('city').as('d').select('d')
"用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找名为Tom和郑梅的,标签等于publisher的点公共的relation节点的名单","g.V().has('publisher', 'name', 'Tom').out('relation').as('b').in('relation').has('publisher', 'name', '郑梅').select('b').values('name')"
"查找名为黄科的student,以及与其有关的student,并返回黄科的salary和这些student的id","g.V().hasLabel('student').has('name', '黄科').as('a').bothE().otherV().hasLabel('student').as('b').select('a', 'b').by('salary').by('id')"
 找出马思琪和张红的共同作者。,"g.V().has('author', 'name', '马思琪').outE('partner').inV().as('b').inE('partner').outV().has('author', 'name', '张红').select('b').limit(180)"
 找到作家何红的朋友的朋友。,"g.V().has('author', 'name', '何红').out('partner').out('partner').out('friend')"
查询所有从大学出发，到城市的边。,g.V().hasLabel('university').outE('belong').inV().hasLabel('city').select('e')
"找出person徐月关联的person,以及关联这些person的person","g.V().has('person', 'name', '徐月').as('a').outE('relates').as('e').inV().hasLabel('person').as('b').inE('relates').as('e2').outV().hasLabel('person').as('c').select('b', 'c')"
"查询被城市属于数量大于116的国家,记为relationCount,再查询这些国家属于的公司","g.V().hasLabel('country').as('a').project('a', 'relationCount').by(identity()).by(__.in('belong').hasLabel('city').id().max()).select('a', 'relationCount').as('a_with_count').select('a_with_count').where(select('relationCount').is(gt(116))).select('a').out('belong').hasLabel('company').dedup()"
"给出全部和person点有喜欢关系的person节点,且边满足条件权重大于等于127.92,目标person节点身高在157到171之间","g.V().hasLabel('person').as('a').outE('likes').has('weight', gte(127.92)).as('e').inV().hasLabel('person').has('height', between(157, 171)).as('b').select('b')"
"查询被person何红属于的公司,和何红属于的公司","g.V().hasLabel('company').as('a').in('belong').hasLabel('person').has('name', '何红').as('b').out('belong').hasLabel('company').as('c').select('a', 'b', 'c')"
"查询85个名为Prescription_209的点包含的类型是药品的节点,且节点类别等于感冒药或id小于93","g.V().has('name', 'Prescription_209').outE('contain').inV().has('category', '感冒药').or().has('id', lt(93)).hasLabel('medicine').limit(85)"
"找出所有与book有关系的publisher节点,且publisher节点的height不等于197,并返回这些publisher的id乘id的最大值,以及publisher的age对68取余的值","g.V().hasLabel('book').as('a').outE().as('e').inV().hasLabel('publisher').has('height', neq(197)).as('b').select('b').project('max_id_squared', 'age_mod_68').by(__.values('id').math('_ * _').max()).by(__.values('age').math('_ % 68'))"
 请问能否帮我找到李梅和何月共同教授的课程节点？,"g.V().has('name', '李梅').outE('teach').inV().hasLabel('course').as('b').inE('teach').outV().has('name', '何月').select('b')"
"给出所有马科的点教的课程,然后给出马科被拥有的部门,一起返回","g.V().has('name', '马科').as('a').outE('teach').inV().hasLabel('course').as('b').select('a').inE('has').outV().hasLabel('department').as('c').select('a', 'b', 'c')"
 从英国出发，经过包含类型的边，走3到5跳到达哪个城市？,"g.V().has('country', 'name', '英国').repeat(out('contain')).times(3).emit().repeat(out('contain')).times(2).hasLabel('city').dedup()"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找名为杜伟的点的,薪资在3071到3147之间的恋人,返回这些恋人的性别,和边的权重,f1,源点id","g.V().has('person', 'name', '杜伟').outE('person_lover_person').as('e').inV().has('person', 'salary', between(3071, 3147)).as('b').select('b', 'e').by(values('gender')).by(project('weight', 'f1', 'srcId').by(values('weight')).by(values('f1')).by(values('srcId')))"
找出杜强（reader）喜欢的书，同时这些书是由其他作者写的。,"g.V().has('reader', 'name', '杜强').out('likes').in('write').hasLabel('author').count()"
"请帮我查找和名为四川大学的大学有伙伴关系,或有伙伴的伙伴关系的公司","g.V().has('university', 'name', '四川大学').out('partner').hasLabel('company').union(identity(), out('partner').hasLabel('company')).dedup()"
"请帮我找出和名为马国强的person有朋友关系,或有朋友的朋友关系的评论","g.V().has('person', 'name', '马国强').bothE('friend').otherV().repeat(bothE('friend').otherV()).times(1).hasLabel('comment')"
"给出名为周强的course或student或department,以及与其有关的teacher,并返回周强的id和这些teacher的height","g.V().has(label, within('course', 'student', 'department')).has('name', '周强').as('a').bothE().otherV().has(label, 'teacher').as('b').select('a', 'b').by('id').by('height')"
"请帮我找出全部与徐红存在认识关系的作家,作家与作家存在认识关系的点,返回这些点的性别","g.V().has('name', '徐红').out('knows').hasLabel('author').out('knows').hasLabel('author').values('gender')"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出全部源点类型是person,目标点类型是person,类型是person_lover_person的边","g.E().hasLabel('person_lover_person').where(and(outV().hasLabel('person'), inV().hasLabel('person')))"
请帮我查一下，有多少在其他部门的学生是在我们艺术学院的。,"g.V().has('department', 'name', '艺术学院').out('has').as('b').in('has').hasLabel('department').where(neq('b')).count()"
 找出与标签为'大学'的点有合作关系的公司，并进一步找到与这些公司有隶属关系的城市，最后找到与这些城市有隶属关系的国家。,g.V().hasLabel('university').out('cooperate').hasLabel('company').out('belong').hasLabel('city').out('belong').hasLabel('country').dedup()
"请帮我查找person申请的贷款, 令贷款的权重的值等于申请贷款的person的身高的和, 再查找贷款存款的账号","g.V().hasLabel('person').as('a').outE('apply').as('e').inV().hasLabel('loan').as('b').sideEffect(__.project('weight').by(__.in('apply').hasLabel('person').values('height').sum()).select('b').property(single, 'weight', __.select('weight'))).outE('deposit').as('e3').inV().hasLabel('account').as('d').select('b', 'd').by('weight').by()"
"给出选择学生Bob选择的课程,的学生","g.V().hasLabel('student').has('name', 'Bob').outE('selects').inV().hasLabel('course').as('b').inE('selects').outV().hasLabel('student').as('c').select('b', 'c')"
返回id大于等于47的节点,"g.V().has('id', gte(47))"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出从person吴若涵出发,经过类型为person_lover_person的边,走1度到达的person点","g.V().has('person', 'name', '吴若涵').outE('person_lover_person').inV().hasLabel('person').dedup()"
"请帮我找出157个和标签为person的点有支付关系的person,并且和这些person有认识关系的person",g.V().hasLabel('person').as('a').outE('pay').as('e').inV().hasLabel('person').as('b').outE('knows').as('e2').inV().hasLabel('person').as('c').select('c').limit(157)
找出没有贷款存款的账户名称，以及这些账户偿还的贷款名称。,"g.V().hasLabel('loan').has('weight', null).outE('deposit').inV().hasLabel('account').as('b').outE('repay').inV().hasLabel('loan').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"找出被公司创造数量大于70的软件,记为relationCount,再查询这些软件创造的person","g.V().hasLabel('software').as('a').project('a', 'relationCount').by(identity()).by(__.in('creates').hasLabel('company').id().mean()).select('a', 'relationCount').where(select('relationCount').is(gt(70))).select('a').out('creates').hasLabel('person').dedup()"
"请帮我找出154个名为字节的点雇佣的标签等于person的节点,且节点名字是杜红","g.V().has('name', '字节').outE('employee').inV().has('person', 'name', '杜红').limit(154)"
查询44个与ISSUE-271和ISSUE-424都存在关系的用户或事项节点,"g.V().has('name', 'ISSUE-271').outE().inV().or(__.hasLabel('user'), __.hasLabel('issue')).as('b').where(__.inE().outV().has('name', 'ISSUE-424')).select('b').limit(44)"
"查询和类型为doctor的点有belong关系的department,以及和这些department有has关系的doctor,以及和这些doctor有diagnose关系的patient",g.V().hasLabel('doctor').as('a').out('belong').hasLabel('department').as('b').in('has').hasLabel('doctor').as('c').out('diagnose').hasLabel('patient').as('d').select('d')
"返回满足条件薪资小于等于3077,名字不是徐科,id为空的节点","g.V().has('salary', lte(3077)).has('name', neq('徐科')).has('id', null)"
"请帮我查找全部person以年龄,名字,身高分组的年龄, 根据年龄从大到小排序","g.V().hasLabel('person').group().by(values('age', 'name', 'height').fold()).by(__.values('age').fold()).order(local).by(keys, desc).select(values).unfold()"
"请帮我查找所有与何建聪存在publish关系的post,post与tag存在has关系的点,返回这些点的id","g.V().has('name', '何建聪').out('publish').hasLabel('post').out('has').hasLabel('tag').id()"
"请帮我找出与person马雪有关,且与软件Kafka有关系的软件节点","g.V().has('person', 'name', '马雪').outE('buy').inV().hasLabel('software').as('b').inE('uses').outV().has('software', 'name', 'Kafka').select('b')"
"找出与名为人人影城和好视影院的点共同releases的,类型是film的节点","g.V().has('name', '人人影城').outE('releases').inV().hasLabel('film').as('b').inE('releases').outV().has('name', '好视影院').select('b')"
"返回名为黄建聪和李轩的,类型是person的点公共的parent节点的名单","g.V().has('person', 'name', '黄建聪').out('parent').as('b').in('parent').has('person', 'name', '李轩').select('b').values('name')"
"输入请求点id的列表852, 以属性id作为相等条件,请帮我找出所有与徐月存在buyer_creates_orders关系的订单,订单与商品存在orders_contain_goods关系的点,返回这些点的价格","g.withSideEffect('p', [852]).V().has('id', within('p')).has('name', '徐月').out('buyer_creates_orders').hasLabel('orders').out('orders_contain_goods').hasLabel('goods').values('price')"
"请帮我找出全部与王轩存在购买关系的软件,软件与软件存在使用关系的点,返回这些点的价值","g.V().has('name', '王轩').outE('buy').inV().hasLabel('software').outE('uses').inV().hasLabel('software').values('value')"
返回前23个name不等于蚂蚁集团且scale为large的company,"g.V().hasLabel('company').has('name', neq('蚂蚁集团')).has('scale', 'large').limit(23)"
帮我找一下从Comment_297出发，沿着属于关系走了3步后的电影节点,"g.V().has('comment', 'name', 'Comment_297').repeat(out('belong')).times(3).hasLabel('film')"
"根据value,name分组,计算id的平均值除id的最小值","g.V().hasLabel('a').group().by(union(has('value'), has('name')).fold()).by(values('id').mean()).unfold().select(values).min()"
"查询被部门拥有数量大于31的学生,记为relationCount,再查询这些学生拥有的课程",g.V().hasLabel('student').as('a').sideEffect(__.select('a').bothE('has').hasLabel('has').inV().hasLabel('department').values('id').min().as('relationCount')).select('a').where(__.select('relationCount').is(gt(31))).outE('has').hasLabel('has').inV().hasLabel('course').dedup()
"请帮我查找公司的三角的环,边类型为创造, 并返回这些点的id","g.V().hasLabel('company').as('a').outE('creates').inV().as('b').outE('creates').inV().as('c').where(__.as('c').outE('creates').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
查询与doctor周建聪有belong关系和与doctor王梅有has关系的department节点，并返回这些department的id、name和address以及doctor周建聪的名字和doctor王梅的性别。,"g.V().hasLabel('doctor').has('name', '周建聪').as('a').outE('belong').inV().hasLabel('department').as('b').inE('has').outV().hasLabel('doctor').has('name', '王梅').as('c').select('a', 'b', 'c').by('name').by(__.id()).by('name').by('address').by('gender')"
"输入请求点id的列表438,120,33,618,31, 以属性id作为相等条件,给出类型是university的点,返回114个","g.inject([438, 120, 33, 618, 31]).unfold().as('p').V().has('university', 'id', __.select('p')).limit(114)"
查找与药品枇杷糖浆有关系的处方的id,"g.V().hasLabel('medicine').has('name', '枇杷糖浆').bothE().otherV().hasLabel('prescription').values('id')"
查找以has关系关联了student何思思的department,"g.V().hasLabel('student').has('name', '何思思').inE('has').outV().hasLabel('department')"
"用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找所有吴建国的点认识的person,然后查找吴建国被认识的person,一起返回","g.V().has('person', 'name', '吴建国').as('a').outE('knows').inV().hasLabel('person').as('b').select('a').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找全部蚂蚁集团的点创造的软件,然后请帮我查找蚂蚁集团被属于的person,一起返回","g.V().has('company', 'name', '蚂蚁集团').as('a').outE('company_creates_software').inV().as('b').select('a').inE('person_belong_company').outV().as('c').select('a', 'b', 'c')"
"找出认识作家陈梅认识的作家,的作家","g.V().has('author', 'name', '陈梅').as('a').outE('knows').inV().as('b').inE('knows').outV().as('c').select('b', 'c')"
 请帮我查找与腾讯公司有关联，且与账户Faker有关联的人员节点，并返回他们的身高、年龄和性别。,"g.V().hasLabel('company').has('name', '腾讯').outE().inV().hasLabel('person').as('b').inE().outV().hasLabel('account').has('name', 'Faker').select('b').values('height', 'age', 'gender')"
请帮我找出所有相互认识的人以及他们之间的关系,"g.V().has('person', 'id', '147').bothE().otherV().hasLabel('person').as('b').inE('knows').otherV().hasLabel('person').as('c').select('b', 'c')"
返回所有和用户周月之间有创造关系的合并请求,"g.V().hasLabel('user').has('name', '周月').outE('creates').inV().hasLabel('pullRequest')"
"使用列为f0,srcId,f1, 数据为(859,196,true),(553,44,false),(794,101,true)的子查询作为输入表, 源点的srcId等于输入表srcId,返回论坛以创建时间,id分组的名字, 根据名字从大到小排序","g.withSideEffect('p', [[859,196,true],[553,44,false],[794,101,true]]).V().hasLabel('forum').as('a').where(__.select('a').values('srcId').is(__.select('p').unfold().select('srcId'))).select('a').group().by(__.project('createTime','id').by('createTime').by('id')).by(__.values('name').fold()).order(local).by(values, desc)"
 找出同时与杜建聪有友谊关系，与郑建聪有亲子关系的个人节点，并返回他们的薪资、年龄、姓名、性别以及杜建聪和郑建聪的名字。,"g.V().has('person', 'name', '杜建聪').as('a').out('friend').hasLabel('person').as('b').in('parent').has('person', 'name', '郑建聪').as('c').select('a', 'b', 'c').by('gender').by(values('salary', 'age', 'name')).by('name')"
"请帮我找出182个名为澳大利亚的点contain的label为city的节点,且其id在78到94之间且name不是76288","g.V().has('name', '澳大利亚').out('contain').hasLabel('city').has('id', between(78, 94)).has('name', neq(76288)).limit(182)"
"请帮我找出身高在162到171之间的person认识的person的名称,以及这些person 认识的person的名称","g.V().hasLabel('person').has('height', between(162, 171)).outE('knows').inV().hasLabel('person').as('b').outE('knows').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 韩轩和陈思思的共同联系人有多少个？,"g.V().has('person', 'name', '韩轩').outE('relation').inV().as('b').inE('relation').outV().has('person', 'name', '陈思思').select('b').dedup().limit(38)"
"帮我查询id为150的医生属于的部门, 并将部门有关的医生的性别的平均值赋值给部门的地址, 接着查询部门的地址小于150的部门拥有的医生","g.V().has('doctor', 'id', 150).as('a').outE('belong').inV().hasLabel('department').as('b').sideEffect(__.project('avg_gender').by(__.inE().outV().hasLabel('doctor').values('gender').mean()).select('avg_gender').as('address')).where(__.select('address').is(lt(150))).outE('has').inV().hasLabel('doctor').as('d').select('b', 'd').by('address').by()"
"给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));给出所有标签等于patient的点",g.V().hasLabel('patient')
"帮我查询11个名为李若涵的点knows的类型为person的节点,且节点name为陈梅或id为空","g.V().has('name', '李若涵').outE('knows').inV().hasLabel('person').or(has('name', '陈梅'), hasNot('id')).limit(11)"
"请帮我查找164个名为黄月的点likes的标签等于person的节点,且其age大于9","g.V().has('name', '黄月').outE('likes').inV().hasLabel('person').has('age', gt(9)).limit(164)"
返回李建聪支付的人，以及这个人知道的人的薪水和姓名。,"g.V().has('person', 'name', '李建聪').out('pay').as('b').out('knows').as('c').select('c').by(values('salary', 'name').fold())"
"以(769,33,564.56),(178,56,2114.67),(660,62,3448.07)作为请求表数据,属性分别为value,id,price, 以属性id作为相等条件,请帮我找出和买家张强之间有buyer_consult_seller关系的卖家","g.inject([['value':769, 'id':33, 'price':564.56], ['value':178, 'id':56, 'price':2114.67], ['value':660, 'id':62, 'price':3448.07]]).as('p').unfold().as('p_row').V().hasLabel('buyer').has('id', __.select('p_row').select('id')).has('name', '张强').as('a').outE('buyer_consult_seller').as('e').inV().hasLabel('seller').as('b').select('b')"
找到与买家点击相关联的商品节点，按照名称和价值进行分组，并返回它们的名称和价值。,"g.V().hasLabel('buyer').bothE('look').otherV().hasLabel('goods').group().by(values('name', 'value')).by(project('name', 'value').by(values('name')).by(values('value')).fold())"
找出满足条件性别是famale或薪资不为空或性别不等于famale的节点,"g.V().or(has('gender', 'famale'), has('salary', neq(null)), has('gender', neq('famale'))).valueMap(true)"
"查询109个名为字节的点雇佣的label为person的节点,且其薪资小于7514或年龄不为空","g.V().has('name', '字节').outE('employee').inV().hasLabel('person').where(or(has('salary', lt(7514)), has('age', neq(null)))).limit(109)"
查询与帖子 Post_386 有发布关系的用户,"g.V().hasLabel('post').has('name', 'Post_386').inE('publish').outV().hasLabel('user')"
返回user Bob likes的post节点has的tag,"g.V().hasLabel('user').has('name', 'Bob').out('likes').hasLabel('post').out('has').hasLabel('tag')"
"找出关联person周国强的person,和这些person朋友的person","g.V().has('person', 'name', '周国强').in('relates').as('b').out('friend').as('c').select('b', 'c')"
"给出109个peopleNumber为空或value为空的company,根据peopleNumber从小到大排列","g.V().hasLabel('company').or(hasNot('peopleNumber'), hasNot('value')).order().by('peopleNumber', asc).limit(109)"
 找出与读者吴思琪有关联，并且与书《Java程序设计》有关的编辑，并返回他们的薪资和姓名。,"g.V().hasLabel('reader').has('name', '吴思琪').outE().inV().hasLabel('publisher').as('b').inE().outV().hasLabel('book').has('name', 'java程序设计').select('b').values('salary', 'name')"
"找出和forum百度贴吧有contain关系的user,再找出以contain关系关联了百度贴吧的user","g.V().has('forum', 'name', '百度贴吧').as('a').out('contain').as('b').select('a').in('contain').as('c').select('a', 'b', 'c')"
"给出所有和医生周强有关系的药品或部门或医生,返回这些点的创建时间","g.V().has('doctor', 'name', '周强').bothE().otherV().hasLabel(within('medicine', 'department', 'doctor')).values('createTime')"
"输入请求点id的列表230, 源点的id等于输入表id,给出和用户有关联的帖子节点,并根据其id分组,返回id,以及字数加14的值","g.inject(230).as('p').V().hasLabel('user').has('id', select('p')).outE('user_publish_post').inV().hasLabel('post').group().by('id').by(values('wordCount').math('_ + 14').fold())"
 找呼吸科同事的相关朋友,"g.V().has('department', 'name', '呼吸科').outE('partner').inV().outE('relation').inV().outE('partner').inV()"
"使用列为area,name,peopleNumber, 数据为(70639,'北京',7861),(86408,'天津',6429),(58944,'广州',8854),(71101,'巴黎',1434)的子查询作为输入表, 源点的area等于输入表area,请帮我找出标签等于大学,名为华中科技大学的点,返回这些点的价值","g.inject([['area':70639,'name':'北京','peopleNumber':7861],['area':86408,'name':'天津','peopleNumber':6429],['area':58944,'name':'广州','peopleNumber':8854],['area':71101,'name':'巴黎','peopleNumber':1434]]).as('p').V().hasLabel('university').has('name','华中科技大学').where(values('area').as('a_area').select('p').unfold().where(eq('a_area')).by('area')).values('value')"
"找出和forum CSDN有contain关系的user,再找出以contain关系关联了CSDN的post","g.V().hasLabel('forum').has('name', 'CSDN').as('a').out('contain').hasLabel('user').as('b').select('a').in('contain').hasLabel('post').as('c').select('a', 'b', 'c')"
"以'VD'作为输入调用KHOP函数,返回运算结果","g.call('KHOP').with('input', 'VD').select('id', 'kValue')"
"请帮我查找所有源点标签等于buyer,目标点标签等于orders,标签等于buyer的边",g.E().hasLabel('buyer').where(__.outV().hasLabel('buyer')).where(__.inV().hasLabel('orders'))
id减id的值,g.V().project('result').by(constant(0))
"输入表的列为height,age,name, 数据为(151,62,'韩轩'),(177,21,'周雪'),(194,17,'王伟'),(195,5,'吴建国'), 源点的name等于输入表name,请帮我找出person的三角的环,边类型为person_pay_person, 并返回这些点的id","g.inject([['height':151,'age':62,'name':'韩轩'],['height':177,'age':21,'name':'周雪'],['height':194,'age':17,'name':'王伟'],['height':195,'age':5,'name':'吴建国']]).as('p').unfold().as('row').select('row').by(__.values('name')).as('input_name').V().hasLabel('person').has('name', __.where(eq('input_name'))).as('a').outE('person_pay_person').inV().as('b').outE('person_pay_person').inV().as('c').where(outE('person_pay_person').where(inV().as('a'))).select('a', 'b', 'c').by(__.id()).by(__.id()).by(__.id()).project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
"请帮我找出4个orders Order_210和Order_363,共同的friend","g.V().hasLabel('orders').has('name', 'Order_210').out('friend').as('b').in('friend').hasLabel('orders').has('name', 'Order_363').select('b').limit(4)"
给出和author陈科之间有knows关系的author,"g.V().has('author', 'name', '陈科').out('knows').hasLabel('author')"
获取id为109的company关联的城市的friend，再获取与该城市相关的relation。,"g.V().has('company', 'id', '109').as('a').bothE().otherV().hasLabel('city').as('b').bothE('friend').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
 查询关联了动作标签'action'的影片。,"g.V().has('tag', 'name', '动作').in('has').hasLabel('film')"
"输入表的列为id,name,size, 数据为(17,'UME',484), 以属性name作为相等条件,查找名为人人影城的点releases的所有film,并对这些点的id进行求和","g.inject([17, 'UME', 484]).as('p').V().has('name', '人人影城').as('a').outE('cinema_releases_film').as('e').inV().hasLabel('film').as('b').select('b').values('id').sum()"
 找杜建国朋友的朋友,"g.V().has('user', 'name', '杜建国').out('friend').out('relation').out('friend')"
 找出与王强有创造关系的订单，再找出订单中包含商品的元素，最后计算这些元素的价值。,"g.V().has('name', '王强').outE('creates').inV().hasLabel('orders').outE('contain').inV().hasLabel('goods').values('value')"
"以(40,'吴强','famale')作为请求表数据,属性分别为id,name,gender, 以属性id作为相等条件,给出118个与黄思思和郑宏都存在关系的person节点","g.withSideEffect('p', [['id':40, 'name':'吴强', 'gender':'famale']]).V().has('id', __.select('p').unfold().select('id')).has('name', '黄思思').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '郑宏').select('b').limit(118)"
"返回和person Sam有own关系的account,再返回以apply关系关联了Sam的loan","g.V().hasLabel('person').has('name', 'Sam').as('a').outE('own').inV().hasLabel('account').as('b').select('a').inE('apply').outV().hasLabel('loan').as('c').select('a', 'b', 'c')"
"查询电影的三角的环,边标签等于拥有, 并返回这些点的id","g.V().hasLabel('film').as('a').outE('has').inV().as('b').outE('has').inV().as('c').where(__.as('c').outE('has').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"返回id为7的person有关的person的relation, 再返回和person有关系的partner","g.V().has('person', 'id', 7).as('a').bothE().otherV().hasLabel('person').as('b').bothE().hasLabel('relation').otherV().as('c').select('b').bothE().hasLabel('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
 Comment_279是哪些电影被其他观众观看了的数量？,"g.V().hasLabel('comment').has('name', 'Comment_279').outE('belong').inV().hasLabel('film').inE('watch').outV().hasLabel('person').count()"
找出Comment_298和Comment_303这两个评论类型的点，它们共享的partner节点列表。,"g.V().has('comment', 'name', 'Comment_298').as('a').outE('partner').inV().as('b').inE('partner').outV().has('comment', 'name', 'Comment_303').as('c').select('b').values('name')"
请帮我查找所有和person吴梅之间有父母关系的person,"g.V().has('person', 'name', '吴梅').out('parent').hasLabel('person')"
'获取张宏支付的人喜欢的人节点',"g.V().has('person', 'name', '张宏').out('pay').out('likes')"
"返回122个书少年闰土和罪与罚,共同的引用","g.V().has('book', 'name', '少年闰土').outE('refers').inV().where(__.inE('refers').outV().has('book', 'name', '罪与罚')).limit(122)"
 请帮我查找Hadoop和Calcite共同使用的软件节点。,"g.V().has('name', 'Hadoop').outE('uses').inV().hasLabel('software').as('b').inE('uses').outV().has('name', 'Calcite').select('b')"
"给出和repository Mybatis有关的issue,再给出和Mybatis has的其他pullRequest,返回它们","g.V().hasLabel('repository').has('name', 'Mybatis').as('a').bothE().otherV().hasLabel('issue').as('b').select('a').outE('has').otherV().hasLabel('pullRequest').as('c').select('a', 'b', 'c')"
查询满足条件value大于等于320的节点,"g.V().has('value', gte(320))"
"查找类型为创造,且满足条件源点id在106到173之间,权重大于194.43,或源点id大于等于102的边","g.E().hasLabel('creates').or(and(has('srcId', between(106, 173)), has('weight', gt(194.43))), has('srcId', gte(102)))"
"请帮我查找处方的三角的环,边label为包含, 并返回这些点的id","g.V().hasLabel('prescription').as('a').outE('contain').inV().as('b').outE('contain').inV().as('c').where(__.outE('contain').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"查询id为125的点的salary,id,age","g.V().has('id', 125).project('salary', 'id', 'age').by('salary').by('id').by('age')"
"返回id为空且年龄小于等于81的买家咨询的卖家的名称,以及这些卖家 回答的买家的名称","g.V().hasLabel('buyer').has('id', null).has('age', lte(81)).outE('consult').inV().hasLabel('seller').as('b').outE('ask').inV().hasLabel('buyer').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 请帮我找出id为8的account的朋友中是否有与loan有关的人，然后再帮我找出与loan有关系的任何事物。,"g.V().has('account', 'id', '8').as('a').bothE().otherV().hasLabel('loan').as('b').bothE('friend').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
给出前11个标签为transfer的边,g.E().hasLabel('transfer').limit(11)
"查询名为郑宏的publisher,以及与其有关的reader,并返回郑宏的name和这些reader的gender","g.V().has('publisher', 'name', '郑宏').as('a').bothE().as('e').otherV().hasLabel('reader').as('b').select('a', 'b').by('name').by('gender')"
 返回生物学院和艺术学院的部门伙伴节点列表。,"g.V().has('department', 'name', '生物学院').as('a').outE('partner').inV().as('b').inE('partner').outV().has('department', 'name', '艺术学院').as('c').select('b').values('name')"
"返回标签等于company的点,返回98个",g.V().hasLabel('company').limit(98)
"查询所有和person吴建国有关系的person,返回这些点的身高","g.V().hasLabel('person').has('name', '吴建国').bothE().otherV().hasLabel('person').values('height')"
"根据wordCount,value,id分组,计算wordCount乘wordCount的值","g.V().hasLabel('a').group().by(values('wordCount', 'value', 'id')).by(values('wordCount').math('_ * _'))"
"请帮我查找和国家英国有关的大学,再请帮我查找和英国包含的其他城市,返回它们","g.V().has('country', 'name', '英国').as('a').bothE().as('e').otherV().hasLabel('university').as('b').select('a').outE('contain').as('e2').inV().hasLabel('city').as('c').select('a', 'b', 'c')"
"给出所有和学生马月有关系的部门,返回这些点的名字,年龄","g.V().has('student', 'name', '马月').bothE().otherV().hasLabel('department').project('b.name', 'b.age').by('name').by('age')"
"用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出帖子的1跳的环","g.V().hasLabel('post').as('a').out().range(0, 0).as('b').where(out().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"根据id,薪资,年龄分组,计算薪资乘8698的最大值","g.V().hasLabel('a').group().by(project('id', 'salary', 'age').by('id').by('salary').by('age')).by(values('salary').max().math('_ * 8698'))"
"请帮我查找和书悲惨世界有关的作家,称为X,再请帮我查找和这个X有关联的其他编辑,以及和X有关联的读者","g.V().has('book', 'name', '悲惨世界').as('a').bothE().otherV().hasLabel('author').as('b').bothE().otherV().hasLabel('publisher').as('c').select('b').bothE().otherV().hasLabel('reader').as('d').select('a', 'b', 'c', 'd')"
"查询person王若涵knows的person,以及relates这些person的person, 令person(b)的name等于person(c)的height除173, 返回person(a)的height,person(b)的name,person(c)的id","g.V().has('person', 'name', '王若涵').as('a').outE('knows').inV().hasLabel('person').as('b').inE('relates').outV().hasLabel('person').as('c').select('a', 'b', 'c').by('height').by(__.choose(__.select('c').values('height').is(neq(null)), __.math('c_height / 173').by(__.select('c').values('height')), __.constant(null))).by('id')"
"请帮我查找与名为黄强和徐雪的点共同认识的,类型是person的节点","g.V().has('name', '黄强').out('knows').hasLabel('person').as('b').in('knows').has('name', '徐雪').select('b')"
"用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询186个与赵若涵和韩思琪都存在关系的编辑节点","g.V().has('name', '赵若涵').out().hasLabel('publisher').as('b').in().has('name', '韩思琪').select('b').limit(186)"
"请帮我找出id为163的课程有关的大学的朋友, 再请帮我找出和大学有关系的朋友","g.V().has('course', 'id', 163).as('a').bothE().otherV().hasLabel('university').as('b').bothE('friend').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
"帮我查询名为Mybatis和Kafka的,类型是仓库的点公共的伙伴节点的名单","g.V().has('repository', 'name', 'Mybatis').outE('partner').inV().as('b').inE('partner').outV().has('repository', 'name', 'Kafka').select('b').values('name')"
查询与person黄红有拥有关系的1跳的环,"g.V().has('person', 'name', '黄红').as('a').bothE('own').otherV().bothE().otherV().where(eq('a')).select('a').by('id').project('a.id', 'b_id').by(select('a')).by(__.bothE('own').otherV().bothE().otherV().where(eq('a')).id())"
 找出杜梅选择的课程和体育学院拥有的教师，返回它们。,"g.V().has('student', 'name', '杜梅').as('a').out('selects').as('b').V().has('department', 'name', '体育学院').as('c').out('has').as('d').select('a', 'b', 'c', 'd')"
查询所有名为徐建聪的节点喜欢的person,"g.V().has('name', '徐建聪').outE('likes').inV().hasLabel('person')"
"帮我查询13个大学南京大学和四川大学,共同的朋友","g.V().has('university', 'name', '南京大学').outE('friend').inV().as('b').inE('friend').outV().has('university', 'name', '四川大学').select('b').limit(13)"
"以972,432作为请求点id, 以属性id作为相等条件,查询源点类型是医生,目标点类型是病人,类型是doctor_diagnose_patient的边","g.inject(972, 432).as('p').V().hasLabel('doctor').as('a').where(eq('p')).by('id').by().outE('doctor_diagnose_patient').as('e').inV().hasLabel('patient').as('b').select('e')"
找出何轩和徐建国这两位人士的共同伙伴，共有189人。,"g.V().has('person', 'name', '何轩').as('a').outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().has('person', 'name', '徐建国').as('c').select('b').limit(189)"
请帮我找出以拥有关系关联了部门体育学院的大学,"g.V().hasLabel('department').has('name', '体育学院').inE('has').outV().hasLabel('university')"
 找出马思思朋友的朋友,"g.V().has('person', 'name', '马思思').out('relation').out('friend').out('partner')"
"查询标签为user的全部点,并根据gender升序排列","g.V().hasLabel('user').order().by('gender', asc)"
请帮我找到与何伟、张梅有交集，且标签为 goods 的节点,"g.V().has('name', '何伟').outE('look').inV().hasLabel('goods').as('b').inE('look').outV().has('name', '张梅').select('b')"
"请帮我查找与名为华为和阿里的点共同creates的,类型是software的节点","g.V().has('name', '华为').out('creates').hasLabel('software').as('b').in('creates').has('name', '阿里').select('b')"
"请帮我查找大学复旦大学属于的城市,以及属于这些城市的公司","g.V().has('university', 'name', '复旦大学').outE('belong').inV().hasLabel('city').as('b').inE('belong').outV().hasLabel('company').as('c').select('b', 'c')"
"使用这个图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));查找和university复旦大学有关的city,称为X,再查找和这个X有关联的其他university,以及和X有关联的company","g.V().has('university', 'name', '复旦大学').as('a').bothE().otherV().hasLabel('city').as('b').bothE().otherV().hasLabel('university').where(neq('a')).as('c').select('b').bothE().otherV().hasLabel('company').as('d').select('a', 'b', 'c', 'd')"
"找出所有和forum点有contain关系的post节点,且边满足条件f0不为空,目标post节点createTime不是2023年06月30日","g.V().hasLabel('forum').as('a').outE('contain').has('f0', neq(null)).as('e').inV().hasLabel('post').has('createTime', neq('2023-06-30')).as('b').select('b')"
"以694,369,471,781作为请求点id, 源点的id等于输入表id,请帮我找出所有与prescription有关系的department节点,且department节点的weight小于83,并返回这些点的id减id的值,以及weight减weight的数量","g.withSideEffect('p', [694, 369, 471, 781]).V().hasLabel('prescription').where(values('id').is(within(select('p')))).outE().inV().hasLabel('department').has('weight', lt(83)).project('id_diff', 'count_weight_diff').by(values('id').math('_ - _')).by(values('weight').math('_ - _').count())"
"请帮我查找全部源点label为city,边label为contain,并且f1不等于true且weight不为空且srcId小于等于151的边","g.V().hasLabel('city').outE('contain').has('f1', neq(true)).has('weight', neq(null)).has('srcId', lte(151)).dedup()"
"给出使用软件Spark的软件,和这些软件使用的软件","g.V().has('software', 'name', 'Spark').in('uses').as('b').out('uses').as('c').select('b', 'c')"
"找出名为Alice的编辑或作家,以及与其有关的读者,并返回Alice的薪资和这些读者的id","g.V().has('name', 'Alice').hasLabel(within('publisher', 'author')).bothE().otherV().hasLabel('reader').project('a_salary', 'b_id').by(select('a').values('salary')).by(values('id'))"
找到与person相关的software节点，按id、name和stars进行分组，并返回它们。,"g.V().hasLabel('person').bothE('buy').bothV().hasLabel('software').dedup().group().by(project('id', 'name', 'stars').by(values('id')).by(values('name')).by(values('stars'))).unfold().select(values).project('b.id', 'b.name', 'b.stars').by(select('id')).by(select('name')).by(select('stars'))"
 找出与用户相关的帖子节点，按名称分组并返回名称。,g.V().hasLabel('user').bothE('publish').bothV().hasLabel('post').values('name').group().by().select(values).unfold()
帮我查询全部类型是loan的点,g.V().hasLabel('loan')
获取与名为杜强的用户为朋友，或者与该用户的任何朋友为朋友的所有帖子。,"g.V().has('user', 'name', '杜强').bothE('friend').otherV().bothE('friend').otherV().hasLabel('post').dedup()"
请帮我找出person徐宏支付的person节点认识的person,"g.V().hasLabel('person').has('name', '徐宏').outE('pay').inV().hasLabel('person').outE('knows').inV().hasLabel('person')"
"查找所有纽约的点contain的company,然后查找纽约被belong的university,一起返回","g.V().has('name', '纽约').as('a').out('contain').hasLabel('company').as('b').select('a').in('belong').hasLabel('university').as('c').select('a', 'b', 'c')"
"输入请求点id的列表488,223,199, 源点的id等于输入表id,帮我查询student以name分组的height, 根据height降序排序","g.inject([488, 223, 199]).as('p').flatMap(select('p')).as('id').V().hasLabel('student').has('id', select('id')).group().by('name').by(values('height').fold()).order(local).by(values, desc)"
"找出被评论属于数量大于3的电影,记为relationCount,再查询这些电影属于的电影","g.V().hasLabel('film').as('a').project('a', 'relationCount').by(identity()).by(__.in('belong').hasLabel('comment').count()).select('a', 'relationCount').as('a_rc').select('a_rc').by('a').where(__.select('a_rc').by('relationCount').is(gt(3))).out('belong').hasLabel('film').dedup()"
"查询类型是合作,以及满足条件f1大于等于101.27的边","g.E().hasLabel('cooperate').has('f1', gte(101.27))"
"返回与学生李强存在选择关系,且与部门计算机学院存在属于关系的课程节点，返回这些课程的id,名字,及学生李强的名字,及部门计算机学院的大小","g.V().has('student', 'name', '李强').as('a').outE('selects').inV().hasLabel('course').as('b').inE('belong').outV().has('department', 'name', '计算机学院').as('c').select('a', 'b', 'c').by('name').by(values('id', 'name')).by('size')"
"给定图的schema如下:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出满足条件名字等于89的节点","g.V().has('name', 89)"
"返回名为何思琪和张宏的,标签为person的点公共的partner节点的名单","g.V().has('person', 'name', '何思琪').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '张宏').select('b').values('name')"
 返回物理学院中具有has关系的教师，再返回与物理学院具有has关系的教师。,"g.V().hasLabel('department').has('name', '物理学院').as('a').bothE('has').otherV().hasLabel('teacher').as('b', 'c').select('a', 'b', 'c')"
 按照地址从小到大排序所有按名称、重量分组部门的信息。,"g.V().hasLabel('department').group().by(values('address', 'weight', 'name')).unfold().select(values).order().by(select('address'), asc)"
"返回和teacher张红有关的student,再返回和张红teach的其他course,返回它们","g.V().has('teacher', 'name', '张红').as('a').bothE().otherV().hasLabel('student').as('b').select('a').bothE('teach').otherV().hasLabel('course').as('c').select('a', 'b', 'c')"
"输入请求点id的列表871,318, 以属性id作为相等条件,查找与名为java程序设计和少年闰土的点共同关联的,标签为书的节点","g.withSideEffect('p', [871, 318]).V().has('id', within('p')).filter(and(has('name', 'java程序设计'), outE('relates').inV().hasLabel('book').as('b').inE('relates').outV().has('name', '少年闰土').select('b'))).select('b')"
给出person赵科观看的电影节点拥有的标签,"g.V().has('person', 'name', '赵科').out('watch').out('has').dedup()"
"以('韩科',97,8962),('孙思思',72,9477)作为请求表数据,属性分别为name,age,salary, 以属性name作为相等条件,请帮我找出113个person郑月和孙梅,共同的partner","g.withSideEffect('p', [['韩科',97,8962],['孙思思',72,9477]]).V().hasLabel('person').has('name', '郑月').as('a').outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().as('c').hasLabel('person').has('name', '孙梅').select('b').limit(113)"
"返回全部和事项ISSUE-305有关系的仓库或事项或合并请求,返回这些点的名字,年龄,薪资","g.V().hasLabel('issue').has('name', 'ISSUE-305').bothE().otherV().hasLabel(within('repository', 'issue', 'pullRequest')).project('name', 'age', 'salary').by(values('name')).by(values('age')).by(values('salary'))"
请帮我找出那些与'loan defaultName'有存款关系和偿还关系的账户节点。这些账户的创建时间、'loan defaultName'的权重以及'loan defaultName'的金额都需要返回。,"g.V().hasLabel('loan').has('name', 'defaultName').as('a').outE('deposit').inV().hasLabel('account').as('b').inE('repay').outV().hasLabel('loan').has('name', 'defaultName').as('c').select('a', 'b', 'c').by('weight').by('createTime').by('amount')"
"使用列为targetId,f0,srcId, 数据为(0,896,91),(45,887,5),(26,953,198)的子查询作为输入表, 以属性targetId作为相等条件,帮我查询person韩轩申请的贷款,被其他账号还款的数量","g.withSideEffect('p', [[0,896,91],[45,887,5],[26,953,198]]).V().hasLabel('person').has('name', '韩轩').where(__.values('targetId').is(within(__.select('p').unfold().limit(local, 1)))).outE('person_apply_loan').inV().hasLabel('loan').inE('account_repay_loan').outV().hasLabel('account').dedup().count()"
"返回id为80的书关联的书, 并将书有关的作家的id的最大值赋值给书的字数, 接着查询书的字数小于80的书关联的书","g.V().has('book', 'id', 80).outE('relates').inV().hasLabel('book').as('b').project('b_wordCount', 'd').by(coalesce(__.select('b').bothE().otherV().hasLabel('author').values('id').max(), constant(0))).by(__.select('b').filter(__.project('temp').by(coalesce(__.bothE().otherV().hasLabel('author').values('id').max(), constant(0))).select('temp').is(lt(80))).outE('relates').inV().hasLabel('book'))"
"输入请求点id的列表220,824,937,556,127, 以属性id作为相等条件,返回和prescription Prescription_256有关的prescription,称为X,再返回和这个X有关联的其他prescription,以及和X有关联的medicine","g.withSideEffect('p', [220, 824, 937, 556, 127]).V().hasLabel('prescription').where(and(__.has('id', within('p')), __.has('name', 'Prescription_256'))).as('a').bothE().otherV().hasLabel('prescription').as('b').bothE().otherV().hasLabel('prescription').as('c').select('b').bothE().otherV().hasLabel('medicine').as('d').select('a', 'b', 'c', 'd')"
请帮我找出59个与浙江大学和清华大学都存在关系的公司节点,"g.V().has('name', '浙江大学').outE().inV().hasLabel('company').as('b').inE().outV().has('name', '清华大学').select('b').limit(59)"
请帮我找出名为南京大学的点合作的公司,"g.V().has('name', '南京大学').outE('cooperate').inV().hasLabel('company')"
找出同时是李思思和马梅共同朋友，并且他们都是买家的人名列表。,"g.V().hasLabel('buyer').has('name', '李思思').outE('friend').inV().as('b').inE('friend').outV().hasLabel('buyer').has('name', '马梅').select('b').values('name')"
帮我查询person的3跳的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(3).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').values('id')).by(select('b').values('id'))"
给出62个与郑思思和郑月都存在关系的person节点,"g.V().has('name', '郑思思').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '郑月').select('b').limit(62)"
返回被电影院横店影院上映的电影,"g.V().hasLabel('cinema').has('name', '横店影院').outE('releases').inV().hasLabel('film').as('b', 'a').select('a', 'b')"
 查询马科和吴红观看关系的点。,"g.V().has('person', 'name', '马科').outE('watch').inV().as('b').inE('watch').outV().has('person', 'name', '吴红').select('b')"
"查询被贷款loan_24存款的账号,和loan_24存款的账号","g.V().hasLabel('loan').has('name', 'loan_24').as('b').outE('deposit').inV().hasLabel('account').as('a').select('b').outE('deposit').inV().hasLabel('account').as('c').select('a', 'b', 'c')"
"给出贷款的三角的环,边标签等于存款, 并返回这些点的id","g.V().hasLabel('loan').as('a').outE('deposit').inV().as('b').outE('deposit').inV().as('c').where(__.as('c').outE('deposit').inV().as('a')).select('a', 'b', 'c').by().by('id').by('id')"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));给出全部和名为巴黎的城市有伙伴关系,或有伙伴的伙伴关系的公司","g.V().has('city', 'name', '巴黎').repeat(out('partner')).times(2).hasLabel('company').dedup()"
给出前96个label为contain的边,g.E().hasLabel('contain').limit(96)
"输入表的列为id,price,category, 数据为(56,191,'安眠药'),(77,73,'皮肤药'),(44,62,'止痛药'),(19,265,'其他'), 以属性category作为相等条件,请帮我找出名为杜雪的点creates的prescription","g.inject([['id':56,'price':191,'category':'安眠药'],['id':77,'price':73,'category':'皮肤药'],['id':44,'price':62,'category':'止痛药'],['id':19,'price':265,'category':'其他']]).as('p').unfold().as('p_row').select('p_row').by().V().has('category', __.select('p_row').select('category')).has('name', '杜雪').outE('doctor_creates_prescription').inV().hasLabel('prescription').dedup()"
"帮我查询与person张宏有关,且与person陈伟有关系的person节点","g.V().has('person', 'name', '张宏').bothE('knows').otherV().hasLabel('person').bothE('likes').otherV().has('person', 'name', '陈伟').select('b')"
查找与department经管学院有关系的student的height,"g.V().has('department', 'name', '经管学院').bothE().otherV().hasLabel('student').values('height')"
"输入请求点id的列表149,513,50, 以属性id作为相等条件,找出源点标签为person,边标签为person_likes_person,并且srcId不为空的边","g.inject([149, 513, 50]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).as('a').outE('person_likes_person').has('srcId', neq(null)).as('e').select('e')"
"返回公司申请的贷款, 令贷款的权重的值等于申请贷款的公司的人数的和, 再查找贷款存款的账号","g.V().hasLabel('company').as('a').outE('apply').as('e').inV().hasLabel('loan').as('b').sideEffect(__.select('b').aggregate('bSet')).select('b').map(__.select('b').inE('apply').as('e2').outV().hasLabel('company').as('c').values('peopleNumber').sum()).as('weight').select('b').outE('deposit').as('e3').inV().hasLabel('account').as('d').select('weight', 'd')"
"输入请求点id的列表842,501,340, 源点的id等于输入表id,查询id为97的点的age,name,gender","g.V().has('id', '97').project('age', 'name', 'gender').by(values('age')).by(values('name')).by(values('gender'))"
"根据星数,开源分组,计算星数减740的最小值","g.V().hasLabel('a').group().by(values('stars', 'openSource')).by(values('stars').math('_ - 740').min())"
'列出与重庆大学合作的公司，并统计它们与其他大学的合作数量。',"g.V().has('university', 'name', '重庆大学').out('cooperate').as('b').in('cooperate').hasLabel('university').where(neq('a')).dedup().count()"
 找出44个同时与王建国和赵国强有关系的软件节点。,"g.V().has('name', '王建国').outE().inV().hasLabel('software').as('b').inE().outV().has('name', '赵国强').select('b').limit(44)"
"返回标签为公司的点,返回21个",g.V().hasLabel('company').limit(21)
"以('male','吴雪',86),('famale','周若涵',61),('male','王梅',3),('male','郑雪',31)作为请求表数据,属性分别为gender,name,age, 源点的name等于输入表name,查找被buyer孙梅look的goods","g.withSideEffect('p', [['gender': 'male', 'name': '吴雪', 'age': 86], ['gender': 'famale', 'name': '周若涵', 'age': 61], ['gender': 'male', 'name': '王梅', 'age': 3], ['gender': 'male', 'name': '郑雪', 'age': 31]]).V().hasLabel('goods').where(__.in('buyer_look_goods').hasLabel('buyer').has('name', '孙梅')).where(__.values('name').is(within(__.select('p').unfold().values('name')))).as('a').select('a').by().as('b').select('a', 'b')"
"请帮我查找person以id分组的薪资, 根据薪资降序排序","g.V().hasLabel('person').group().by('id').by(values('salary').fold()).order(local).by(values, desc)"
"帮我查询所有黄若涵的点write的book,然后帮我查询黄若涵被knows的author,一起返回","g.V().has('name', '黄若涵').as('a').outE('write').inV().hasLabel('book').as('b').select('a').inE('knows').outV().hasLabel('author').as('c').select('a', 'b', 'c')"
 请帮我查找所有与名为韩轩的教师有相关关系或相关者的课程。,"g.V().hasLabel('teacher').has('name', '韩轩').outE('relation').inV().hasLabel('course').dedup()"
请帮我查找与forum推特和中国军事论坛都存在contain关系的点,"g.V().hasLabel('forum').has('name', '推特').out('contain').as('b').in('contain').hasLabel('forum').has('name', '中国军事论坛').select('b')"
"请帮我找出与comment Comment_197存在belong关系,且与tag历史存在has关系的film节点，返回这些film的value,id,category,及comment Comment_197的id,及tag历史的name","g.V().hasLabel('comment').has('name', 'Comment_197').as('a').outE('belong').inV().hasLabel('film').as('b').inE('has').outV().hasLabel('tag').has('name', '历史').as('c').select('a', 'b', 'c').by('id').by(values('value', 'id', 'category')).by('name')"
找出所有拥有艺术学院的学生所在的大学。,"g.V().has('name', '艺术学院').as('a').outE('has').inV().hasLabel('student').as('b').select('a').inE('has').outV().hasLabel('university').as('c').select('a', 'b', 'c')"
"帮我查询height不为空的user likes的post的名称,以及这些post has的tag的名称","g.V().hasLabel('user').has('height').out('likes').hasLabel('post').as('b').out('has').hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询label为person的点",g.V().hasLabel('person')
"以532,609,741,721作为请求点id, 以属性id作为相等条件,查询与company阿里存在company_apply_loan关系,且与account Geaflow123存在loan_deposit_account关系的loan节点，返回这些loan的weight,及company阿里的name,及account Geaflow123的id","g.withSideEffect('p', [532, 609, 741, 721]).V().hasLabel('company').has('id', within('p')).has('name', '阿里').outE('company_apply_loan').inV().hasLabel('loan').as('b').inE('loan_deposit_account').outV().hasLabel('account').has('name', 'Geaflow123').as('c').select('b', 'c').by(values('weight')).by(values('id')).project('a_name', 'b_weight', 'c_id').by(constant('阿里')).by(select('b')).by(select('c'))"
"请帮我查找书认识的书, 令书的价格的值等于发布书的编辑的薪资的最大值, 再查找书认识的书","g.V().hasLabel('book').as('a').outE('knows').inV().hasLabel('book').as('b').sideEffect(__.select('b').coalesce(__.inE('publish').outV().hasLabel('publisher').values('salary').max(), __.constant(null)).as('b_price')).select('b').outE('knows').inV().hasLabel('book').as('d').select('b_price', 'd')"
"返回全部源点label为卖家,目标点label为买家,label为卖家或订单的边","g.V().hasLabel('seller').bothE('seller', 'orders').where(otherV().hasLabel('buyer'))"
"根据名字分组,计算id除23的值",g.V().hasLabel('a').group().by('name').by(values('id').math('/ 23').fold())
查询tag的1度的环,"g.V().hasLabel('tag').as('a').both().as('b').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
 找出所有与订单号为Order_399相关的商品，包括直接相关和间接相关的商品。,"g.V().has('orders', 'name', 'Order_399').bothE('relation').bothV().hasLabel('goods').dedup()"
"查询论坛百度贴吧包含的用户, 令用户的id等于论坛的价值的最大值,令用户的名字等于用户的名字, 返回论坛的人数, 用户的性别","g.V().has('forum', 'name', '百度贴吧').as('a').outE('contain').inV().hasLabel('user').as('b').project('a_peopleNumber', 'b_gender').by(select('a').values('peopleNumber')).by(select('b').values('gender'))"
查询全部与作家韩思思有关系的读者的身高,"g.V().has('author', 'name', '韩思思').bothE().otherV().hasLabel('reader').values('height')"
"找出名为徐月的点的,课时大于等于20或id不为空的朋友,返回这些朋友的学分,和边的源点id","g.V().has('name', '徐月').outE('friend').as('e').inV().as('b').where(or(__.has('courseHour', gte(20)), __.has('id', neq(null)))).select('b', 'e').by('credit').by('srcId')"
返回前24个标签为提交的边,g.E().hasLabel('commits').limit(24)
找出所有与名为黄思琪的人有直接或间接友谊关系的评论。,"g.V().hasLabel('person').has('name', '黄思琪').repeat(bothE('friend').otherV().simplePath()).times(2).emit().hasLabel('comment').dedup()"
 返回同时与标签为person的点有恋人、同事、朋友关系的其他person。,g.V().hasLabel('person').as('a').out('lover').hasLabel('person').as('b').out('colleague').hasLabel('person').as('c').out('friend').hasLabel('person').as('d').select('d')
找出前136个身高大于3249的person,"g.V().hasLabel('person').has('height', gt(3249)).limit(136)"
这里有146个账户Light和BIN，它们之间存在关联。,"g.V().hasLabel('account').has('name', 'Light').as('a').outE('relation').as('e').inV().as('b').inE('relation').as('e2').outV().hasLabel('account').has('name', 'BIN').as('c').select('b').limit(146)"
"给出id为166的点的权重,状态,创建时间","g.V().has('id', 166).project('weight', 'status', 'createTime').by(values('weight')).by(values('status')).by(values('createTime'))"
找出腾讯和Bilibili公司的共同朋友列表。,"g.V().has('company', 'name', '腾讯').out('friend').as('b').in('friend').has('company', 'name', 'Bilibili').select('b').values('name')"
请帮我找出用户的2度以内的环,"g.V().hasLabel('user').as('a').bothE().otherV().where(loops().is(lt(2))).as('b').where(eq('a')).select('a', 'b').by('id').by('id')"
 按照名字分组返回所有读者的身高，并按照身高从大到小排序。,"g.V().hasLabel('reader').group().by('name').by(values('height').fold()).order(local).by(values, desc)"
"用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));给出处方以名字分组的创建时间, 根据创建时间从大到小排序","g.V().hasLabel('prescription').group().by('name').by(values('createTime').fold()).unfold().order().by(values, desc)"
请帮我查找全部名为ISSUE-306的点属于的仓库,"g.V().has('name', 'ISSUE-306').out('belong').hasLabel('repository')"
"查询名为Light和Zeus的,标签等于account的点公共的partner节点的名单","g.V().has('account', 'name', 'Light').outE('partner').inV().as('b').inE('partner').outV().has('account', 'name', 'Zeus').select('b').values('name')"
"找出论坛推特包含的帖子,以及发布这些帖子的用户","g.V().hasLabel('forum').has('name', '推特').outE('contain').inV().hasLabel('post').as('b').inE('publish').outV().hasLabel('user').as('c').select('b', 'c')"
"找出和国家越南有包含关系的城市,再找出以包含关系关联了越南的城市","g.V().hasLabel('country').has('name', '越南').as('a').outE('contain').inV().hasLabel('city').as('b').select('a').inE('contain').outV().hasLabel('city').as('c').select('a', 'b', 'c')"
"返回所有person的relation,或其relation的relation",g.V().hasLabel('person').repeat(out('relation')).times(2).dedup()
 请帮我查询与ID为153的软件相关的开发者，以及与该软件有关的朋友。,"g.V().has('software', 'id', '153').as('a').bothE().otherV().hasLabel('software').as('b').bothE('relation').otherV().hasLabel('software').as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
"根据id,amount,weight分组,计算weight除194的最小值","g.V().hasLabel('a').group().by(project('id', 'amount', 'weight').by('id').by('amount').by('weight')).by(values('weight').math('/ 194').min())"
"查询所有person的相关者,或其相关者的相关者",g.V().hasLabel('person').repeat(out('relation')).times(2).dedup()
"以191,748,151作为请求点id, 以属性id作为相等条件,帮我查询174个peopleNumber的平均值小于341的company,根据scale从小到大排列","g.inject([191, 748, 151]).as('p').flatMap(select('p').unfold()).as('id').V().hasLabel('company').as('a').where(eq('id')).by('id').by().group().by('a').by(values('peopleNumber').mean()).unfold().as('grouped').select(values).is(lt(341)).select(keys).order().by('scale', asc).limit(174)"
"输入请求点id的列表353,259,397,346,772, 源点的id等于输入表id,找出所有book的refers,或其refers的refers","g.withSideEffect('p', [353, 259, 397, 346, 772]).V().hasLabel('book').has('id', within('p')).repeat(out('book_refers_book')).times(2).dedup()"
查询与13个类型为部门的点存在拥有关系的医生，以及这些医生所在的部门。,g.V().hasLabel('department').as('a').out('has').hasLabel('doctor').as('b').out('belong').hasLabel('department').as('c').select('c').limit(13)
 找出标签为publisher的所有点，按height升序排列。,"g.V().hasLabel('publisher').order().by('height', asc)"
id的最小值除id的值,g.V().hasLabel('a').values('id').min().as('min_id').select('min_id').as('min_id').V().hasLabel('a').values('id').as('id').math('min_id / id').by().by()
 查找与杜思思有亲戚关系的人，或者与杜思思有旁系亲属关系的人。,"g.V().has('person', 'name', '杜思思').outE('relation').inV().hasLabel('person').range(1, 2)"
找出与用户黄思琪和杜月都存在喜欢关系的点,"g.V().has('user', 'name', '黄思琪').outE('likes').inV().as('b').inE('likes').outV().has('user', 'name', '杜月').select('b')"
 找出与公司标签相关的24个贷款，并找出与这些贷款相关的存款账户。,g.V().hasLabel('company').as('a').outE('apply').as('e').inV().hasLabel('loan').as('b').outE('deposit').as('e2').inV().hasLabel('account').as('c').select('c').limit(24)
找到所有与person有关联的人节点，但名字不是'黄科'。然后返回这些人节点ID的数量除以ID的值，以及ID减去84的总和。,"g.V().hasLabel('person').as('a').outE().as('e').inV().hasLabel('person').has('name', neq('黄科')).as('b').select('b').values('id').fold().as('ids').select('ids').count(local).as('count').select('ids').unfold().as('id').select('count').as('c').select('id').math('c / _').as('divResult').select('ids').unfold().math('_ - 84').sum().as('sumResult').select('divResult', 'sumResult')"
 查询与郑梅有关且与贷款违约相关的公司。,"g.V().has('person', 'name', '郑梅').bothE('invest').bothV().hasLabel('company').bothE('apply').bothV().has('loan', 'name', 'defaultName').select('company')"
"用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找115个名为Order_422的点包含的label为商品的节点,且其名字是手机或价格不为空","g.V().has('orders', 'name', 'Order_422').outE('orders_contain_goods').inV().has('goods').or(has('name', '手机'), has('price', neq(null))).limit(115)"
"请帮我找出创造订单Order_114的买家,和这些买家创造的订单","g.V().hasLabel('orders').has('name', 'Order_114').inE('creates').outV().as('b').outE('creates').inV().hasLabel('orders').as('c').select('b', 'c')"
"用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查询department经管学院的标签为relation的边,并根据f0从小到大排列,返回169个","g.V().has('department', 'name', '经管学院').outE('relation').order().by('f0', asc).inV().limit(169)"
"帮我查询与部门外科存在拥有关系,且与部门内科存在属于关系的医生节点，返回这些医生的性别,id,年龄,及部门外科的权重,及部门内科的id","g.V().has('department', 'name', '外科').as('a').outE('has').inV().hasLabel('doctor').as('b').inE('belong').outV().has('department', 'name', '内科').as('c').select('a', 'b', 'c').by('weight').by(values('gender', 'id', 'age')).by('id')"
"使用这个图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出cinema大众影院releases的film,被其他comment belong的数量","g.V().has('cinema', 'name', '大众影院').outE('cinema_releases_film').inV().hasLabel('film').inE('comment_belong_film').outV().hasLabel('comment').count()"
帮我查询所有名为吴宏的点relates的person,"g.V().has('name', '吴宏').outE('relates').inV().hasLabel('person')"
"请帮我查找账号还款的贷款,返回其源点的id乘id的值,以及目标点的金额除8329.48减738的最大值","g.V().hasLabel('account').as('a').outE('repay').as('e').inV().hasLabel('loan').as('b').project('expr1', 'expr2').by(select('a').values('id').math('_ * _')).by(select('b').values('amount').math('_ / 8329.48 - 738')).select(values).unfold().group().by(select('expr1')).by(select('expr2').max()).unfold().project('a.id * a.id', 'MAX(b.amount / 8329.48 - 738)').by(select(keys)).by(select(values))"
查询与reader韩宏有关系的book的category,"g.V().hasLabel('reader').has('name', '韩宏').bothE().otherV().hasLabel('book').values('category')"
"找出198个作家韩强和徐科,共同的朋友","g.V().has('author', 'name', '韩强').as('a').outE('friend').inV().as('b').inE('friend').outV().has('author', 'name', '徐科').as('c').select('b').limit(198)"
找出和用户Bob之间有喜欢关系的帖子,"g.V().hasLabel('user').has('name', 'Bob').outE('likes').inV().hasLabel('post')"
"使用列为size,name,id, 数据为(144,'横店影院',32),(452,'UME',67),(192,'好视影院',56),(650,'UME',39)的子查询作为输入表, 源点的name等于输入表name,查找以watch关系关联了film神探狄仁杰的person","g.inject([['size':144,'name':'横店影院','id':32],['size':452,'name':'UME','id':67],['size':192,'name':'好视影院','id':56],['size':650,'name':'UME','id':39]]).as('p').V().hasLabel('film').as('a').where(__.select('a').values('name').is(eq(__.select('p').select('name')))).where(__.select('a').values('name').is(eq('神探狄仁杰'))).inE('person_watch_film').outV().hasLabel('person').dedup()"
请帮我找出与医生节点有诊断关系的患者节点，以及这些患者节点接受的处方节点，再找到这些处方节点包含的药品节点。,g.V().hasLabel('doctor').as('a').outE('diagnose').inV().hasLabel('patient').as('b').outE('accept').inV().hasLabel('prescription').as('c').outE('contain').inV().hasLabel('medicine').as('d').select('d')
"请帮我查找名为徐雪的病人,以及与其有关的医生,并返回徐雪的名字和这些医生的身高","g.V().hasLabel('patient').has('name', '徐雪').as('a').bothE().otherV().hasLabel('doctor').as('b').select('a', 'b').by('name').by('height')"
"根据名字,年龄分组,计算height的最大值除165除4105加85的值","g.V().hasLabel('a').group().by('name').by(group().by('age').by(values('height').max())).unfold().select(values).unfold().project('a_name', 'a_age', 'result').by(select(keys).select('name')).by(select(keys).select('age')).by(select(values).math('_ / 165 / 4105 + 85'))"
"输入请求点id的列表535,764,847,317,386, 源点的id等于输入表id,找出前119个标签等于repository_has_user的边","g.inject([535, 764, 847, 317, 386]).unfold().as('p').V().has('id', __.select('p')).outE('repository_has_user').limit(119)"
"请帮我找出person的三角的环,边标签等于朋友, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('friend').inV().as('b').outE('friend').inV().as('c').where(__.inE('friend').where(__.outV().as('a'))).select('a', 'b', 'c').by('id').by('id').by('id')"
"给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));查找与书少年闰土有book_refers_book关系的1度的环","g.V().has('book', 'name', '少年闰土').as('a').bothE('book_refers_book').bothV().where(eq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
找出卖家周轩拥有的商品,"g.V().hasLabel('seller').has('name', '周轩').as('b').outE('has').as('e').inV().hasLabel('goods').as('a').select('a', 'b')"
查找全部和person郑雪之间有投资关系的公司,"g.V().has('person', 'name', '郑雪').out('invest').hasLabel('company')"
 返回李科和何红都喜欢的点。,"g.V().has('user', 'name', '李科').out('likes').as('b').in('likes').has('user', 'name', '何红').select('b')"
 请问数学学院在哪里？,"g.V().hasLabel('department').has('name', '数学学院')"
"请帮我查找所有源点label为person,边label为父母的边,返回这些边的权重减116.84的个数,和目标点id减目标点id的值","g.V().hasLabel('person').outE('parent').project('count_diff', 'id_diff').by(__.count()).by(__.constant(0)).select('count_diff', 'id_diff')"
"给出department皮肤科has的doctor,被其他department has的数量","g.V().has('department', 'name', '皮肤科').out('has').in('has').hasLabel('department').dedup().count()"
 请帮我查找Comment_211的第三个伙伴。,"g.V().hasLabel('comment').has('name', 'Comment_211').out('partner').out('partner').out('partner')"
找出所有用户的朋友，或者他们朋友的朋友。,"g.V().hasLabel('user').outE('friend').inV().hasLabel('user').range(1, 2).dedup()"
"给出100个名为Prescription_217的点包含的标签等于药品的节点,且节点price的和除价格对87取余小于等于62","g.V().has('name', 'Prescription_217').outE('contain').inV().hasLabel('medicine').group().by(identity()).by(values('price').sum()).unfold().as('b').select(values).where(select('b').select(values).as('sumPrice').select('b').select(keys).values('price').as('price').math('sumPrice / price % 87').is(lte(62))).select('b').select(keys).limit(100)"
帮我查一下陈思思发布的帖子的标签,"g.V().has('user', 'name', '陈思思').out('publish').out('has').hasLabel('tag')"
查找所有与university复旦大学有关系的company的id,"g.V().has('university', 'name', '复旦大学').bothE().otherV().hasLabel('company').values('id')"
"返回id为157的person有关的person的parent, 再返回和person有关系的parent","g.V().has('person', 'id', 157).as('a').bothE().otherV().hasLabel('person').as('b').both().hasLabel('person').as('b2').where('b', eq('b2')).by(T.id).select('b').outE('parent').otherV().as('c').select('b').outE('parent').otherV().as('d').select('a', 'b', 'c', 'd')"
"请帮我找出109个名为知乎的点包含的类型是帖子的节点,且节点字数为空","g.V().has('name', '知乎').outE('contain').inV().hasLabel('post').has('wordCount', eq(null)).limit(109)"
"帮我查询id为13的university有关的university的partner, 再帮我查询和university有关系的relation","g.V().has('university', 'id', 13).as('a').bothE().otherV().hasLabel('university').as('b').bothE('partner').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"查找89个名为罪与罚的点关联的标签等于书的节点,且节点价格在61到71之间且字数在73到860之间","g.V().has('name', '罪与罚').outE('relates').inV().hasLabel('book').has('price', between(61, 71)).has('wordCount', between(73, 860)).limit(89)"
"输入请求点id的列表214,835,370, 以属性id作为相等条件,查询标签等于标签的点","g.inject([214, 835, 370]).unfold().as('p').V().hasLabel('tag').has('id', __.select('p')).dedup()"
请帮我查找与course形势与政策有belong关系的2度以内的环,"g.V().has('course', 'name', '形势与政策').as('a').repeat(bothE('belong').otherV().simplePath()).times(2).where(loops().is(1).or().loops().is(2)).as('b').where(__.as('b').out().as('a')).select('a', 'b').by('id').by('id')"
"请帮我找出源点标签为buyer,边标签为creates,以及满足条件targetId大于等于84,timeStamp为2003年06月08日的边","g.V().hasLabel('buyer').outE('creates').has('targetId', gte(84)).has('timeStamp', '2003-06-08')"
"帮我查询和读者黄轩有关的书,称为X,再帮我查询和这个X有关联的其他读者,以及和X有关联的作家","g.V().hasLabel('reader').has('name', '黄轩').as('a').bothE().as('e').otherV().hasLabel('book').as('b').bothE().as('e2').otherV().hasLabel('reader').as('c').select('b').bothE().as('e3').otherV().hasLabel('author').as('d').select('a', 'b', 'c', 'd')"
"用如下schema的图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查找作家的2跳的环","g.V().hasLabel('author').as('a').repeat(out().simplePath()).times(2).where(loops().is(2)).where(out().as('a')).path().by('id').project('a.id', 'b_id').by(limit(local, 1)).by(tail(local, 1))"
"找出全部和标签动作有关系的用户或标签或论坛,返回这些点的价值,创建时间,名字","g.V().has('tag', 'name', '动作').bothE().otherV().hasLabel(within('user', 'tag', 'forum')).project('value', 'createTime', 'name').by(values('value')).by(values('createTime')).by(values('name'))"
'找出马梅喜欢的人',"g.V().hasLabel('person').has('name', '马梅').outE('likes').inV().hasLabel('person').as('b').inE('likes').outV().hasLabel('person').as('a').select('a', 'b')"
"给出源点名字不是吴伟或身高不为空,且年龄小于等于186,目标点创建时间不等于2015年12月15日且权重是883,权重在328到882之间,且类型为创造的边","g.V().has('name', neq('吴伟')).or(has('height', neq(null))).has('age', lte(186)).outE('creates').as('e').inV().has('createTime', neq('2015-12-15')).has('weight', 883).has('weight', between(328, 882)).select('e')"
"找出38个价值在332到430之间,id不是96,或名字不是Order_368的订单,根据价格从小到大排列","g.V().hasLabel('orders').or(and(has('value', between(332, 430)), has('id', neq(96))), has('name', neq('Order_368'))).order().by('price', asc).limit(38)"
找出86个与Tugraph和Kafka都存在关系的issue节点,"g.V().has('name', 'Tugraph').outE().inV().hasLabel('issue').as('b').inE().outV().has('name', 'Kafka').select('b').limit(86)"
"返回所有名为东京的,规格是large且id小于29的朋友,返回这些朋友的价值,和边的权重","g.V().has('name', '东京').outE('friend').as('e').inV().has('scale', 'large').has('id', lt(29)).project('b.value', 'e.weight').by(values('value')).by(select('e').values('weight'))"
给出以拥有关系关联了用户王强的仓库,"g.V().hasLabel('user').has('name', '王强').inE('has').outV().hasLabel('repository')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询全部名为张国强的点的,性别不等于male,名字不等于孙雪的朋友,返回这些朋友的身高,和边的源点id,目标点id,权重","g.V().has('person', 'name', '张国强').outE('friend').as('e').inV().as('b').where(__.has('gender', neq('male')).has('name', neq('孙雪'))).select('b', 'e').by('height').by(__.select('srcId', 'targetId', 'weight'))"
帮我查询140个与PR-403和PR-233都存在关系的仓库节点,"g.V().has('name', 'PR-403').outE().inV().hasLabel('repository').as('b').inE().outV().has('name', 'PR-233').select('b').limit(140)"
"返回全部陈科的点认识的person,然后返回陈科被支付的person,一起返回","g.V().has('name', '陈科').as('a').outE('knows').inV().hasLabel('person').as('b').select('a').inE('pay').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
给出所有和用户徐月之间有创造关系的合并请求,"g.V().has('user', 'name', '徐月').outE('creates').inV().hasLabel('pullRequest')"
查询从department土木学院出发，通过标签为has的边，向前一步到达的学生点。,"g.V().has('department', 'name', '土木学院').out('has').hasLabel('student')"
请帮我查找名为高等数学的点属于的部门,"g.V().has('name', '高等数学').out('belong').hasLabel('department')"
"返回编辑黄建国发布的书,被其他编辑发布的数量","g.V().has('publisher', 'name', '黄建国').as('a').outE('publish').inV().hasLabel('book').as('b').inE('publish').outV().hasLabel('publisher').as('c').where(neq('a')).select('c').count()"
"找出所有和university点有belong关系的city节点,且边满足条件srcId为空,目标city节点name不等于广州","g.V().hasLabel('university').as('a').outE('belong').has('srcId', null).as('e').inV().hasLabel('city').has('name', neq('广州')).as('b').select('b')"
"请帮我查找和label为用户的点有创造关系的合并请求,并且和这些合并请求有属于关系的仓库,并且和这些仓库有拥有关系的用户",g.V().hasLabel('user').as('a').outE('creates').as('e').inV().hasLabel('pullRequest').as('b').outE('belong').as('e2').inV().hasLabel('repository').as('c').outE('has').as('e3').inV().hasLabel('user').as('d').select('d')
"根据名字,价值,创建时间分组,计算价值减价值的个数","g.V().hasLabel('a').group().by(values('name', 'value', 'createTime')).by(count(local)).select(values).unfold()"
"找出名为徐强的病人,以及与其有关的药品,并返回徐强的id和这些药品的价格","g.V().hasLabel('patient').has('name', '徐强').as('a').bothE().otherV().hasLabel('medicine').as('b').select('a', 'b').by('id').by('price')"
"给出和patient孙思琪有accept关系的prescription,再给出以accept关系关联了孙思琪的prescription","g.V().hasLabel('patient').has('name', '孙思琪').as('a').bothE('accept').otherV().hasLabel('prescription').as('b', 'c').select('a', 'b', 'c')"
 公司与伦敦有包含关系，而伦敦属于某个国家。,"g.V().has('city', 'name', '伦敦').as('a').out('contain').hasLabel('company').as('b').select('a').in('belong').hasLabel('country').as('c').select('a', 'b', 'c')"
查找全部与issue ISSUE-56有关系的repository的lang,"g.V().has('issue', 'name', 'ISSUE-56').bothE().otherV().hasLabel('repository').values('lang')"
 查找身高在167到184之间或年龄在21到88之间的医生所属的部门名称以及这些部门拥有的医生名称。,"g.V().hasLabel('doctor').or(has('height', between(167, 184)), has('age', between(21, 88))).outE('belong').inV().hasLabel('department').as('b').outE('has').inV().hasLabel('doctor').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 返回同时与卖家何科和何若涵存在关系的买家节点所对应的名字。,"g.V().hasLabel('seller').has('name', '何科').outE().inV().hasLabel('buyer').as('b').inE().outV().hasLabel('seller').has('name', '何若涵').select('b').values('name')"
"找出名为黄强的点创造的所有订单,并对这些订单的价值进行求和","g.V().has('name', '黄强').outE('creates').inV().hasLabel('orders').values('value').sum()"
 查询包含名为'推特'和'中国军事论坛'的节点，并且类型为帖子。,"g.V().has('name', '推特').outE('contain').inV().hasLabel('post').as('b').inE('contain').outV().has('name', '中国军事论坛').select('b')"
"查询名字不是知网或名字不等于中国军事论坛的论坛包含的用户的名称,以及这些用户 发布的帖子的名称","g.V().hasLabel('forum').has('name', neq('知网')).has('name', neq('中国军事论坛')).outE('contain').inV().hasLabel('user').as('b').outE('publish').inV().hasLabel('post').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"返回185个名为张伟的点选择的类型为课程的节点,且节点课时不为空,名字为大学物理","g.V().has('name', '张伟').outE('selects').inV().hasLabel('course').has('courseHour', neq(null)).has('name', '大学物理').limit(185)"
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));给出与软件Geaflow有software_uses_software关系的1跳以内的环","g.V().hasLabel('software').has('name', 'Geaflow').as('a').outE('software_uses_software').inV().simplePath().as('b').where(__.select('b').outE('software_uses_software').inV().where(eq('a'))).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"返回论坛的三角的环,边标签等于包含, 并返回这些点的id","g.V().hasLabel('forum').as('a').outE('contain').inV().as('b').outE('contain').inV().as('c').where(__.out('contain').as('a')).select('a', 'b', 'c').by().by(id).by(id).project('a', 'b_id', 'c_id').by().by(select('b').id()).by(select('c').id())"
帮我找找周建聪和周宏这两位用户，他们是否有共同的合作伙伴？,"g.V().has('user', 'name', '周建聪').outE('partner').inV().as('b').inE('partner').outV().has('user', 'name', '周宏').select('b').limit(73)"
"返回forum的三角的环,边类型是contain, 并返回这些点的id","g.V().hasLabel('forum').as('a').outE('contain').inV().as('b').outE('contain').inV().as('c').where(__.outE('contain').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
 找出《呐喊》中引用了其他书籍的引用点，并返回这些引用点的引用书籍类别。,"g.V().has('name', '呐喊').outE('refers').inV().hasLabel('book').outE('refers').inV().hasLabel('book').values('category')"
"请帮我找出与名为Prescription_428和Prescription_235的点共同contain的,类型为medicine的节点","g.V().has('name', 'Prescription_428').out('contain').hasLabel('medicine').as('b').in('contain').has('name', 'Prescription_235').select('b')"
给出全部标签等于person的点,g.V().hasLabel('person')
"请帮我找出与名为杜若涵和何伟的点共同认识的,标签等于person的节点","g.V().has('name', '杜若涵').out('knows').hasLabel('person').where(__.in('knows').has('name', '何伟'))"
找出名为吴若涵的节点支付的person,"g.V().has('name', '吴若涵').outE('pay').inV().hasLabel('person')"
"根据地址,名字,id分组,计算大小加大小的值",g.V().group().by('address').by('name').by('id').by(values('size').sum())
找出Jimmy和李雪都创建过的点,"g.V().has('user', 'name', 'Jimmy').outE('creates').inV().as('b').inE('creates').outV().has('user', 'name', '李雪').select('b')"
"用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询所有名为孙思琪的点的,年龄等于91且身高小于175的相关者,返回这些相关者的性别,和边的目标点id,权重,f0","g.V().has('person', 'name', '孙思琪').outE('relation').as('e').inV().as('b').has('age', 91).has('height', lt(175)).select('b', 'e').by(values('gender')).by(project('targetId', 'weight', 'f0').by(values('targetId')).by(values('weight')).by(values('f0')))"
返回全部与prescription Prescription_162有关系的department的id,"g.V().hasLabel('prescription').has('name', 'Prescription_162').bothE().otherV().hasLabel('department').id()"
帮我查一下吴梅发的帖子都打上了什么标签,"g.V().hasLabel('user').has('name', '吴梅').outE('publish').inV().hasLabel('post').outE('has').inV().hasLabel('tag')"
请帮我找出前72个满足条件id小于73或名字不是Order_388或名字是Order_283的订单,"g.V().hasLabel('orders').or(has('id', lt(73)), has('name', neq('Order_388')), has('name', 'Order_283')).limit(72)"
"帮我查询所有源点label为电影,目标点label为标签,label为电影或评论的边","g.V().hasLabel('film').outE('film', 'comment').has('~label', 'tag')"
"查询和用户赵雪有关的事项,再查询和赵雪创造的其他事项,返回它们","g.V().has('user', 'name', '赵雪').as('a').bothE().otherV().hasLabel('issue').as('b').select('a').outE('creates').inV().hasLabel('issue').as('c').select('a', 'b', 'c')"
"给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找所有韩国强的点诊断的病人,然后请帮我查找韩国强被拥有的部门,一起返回","g.V().has('doctor', 'name', '韩国强').as('a').outE('doctor_diagnose_patient').inV().hasLabel('patient').as('b').select('a').inE('department_has_doctor').outV().hasLabel('department').as('c').select('a', 'b', 'c')"
返回与电影泰坦尼克号和少年足球都存在拥有关系的点,"g.V().has('film', 'name', '泰坦尼克号').out('has').as('b').in('has').has('film', 'name', '少年足球').select('b')"
"查找user马红likes的post,以及likes这些post的user","g.V().has('user', 'name', '马红').out('likes').as('b').in('likes').as('c').select('b', 'c')"
"请帮我找出名为李思琪和陈强的,标签为person的点公共的相关者节点的名单","g.V().has('person', 'name', '李思琪').outE('relation').inV().as('b').inE('relation').outV().has('person', 'name', '陈强').select('b').values('name')"
"找出被repository Mybatis has的issue,和Mybatis has的user","g.V().hasLabel('repository').has('name', 'Mybatis').as('b').outE('has').inV().hasLabel('issue').as('a').select('b').outE('has').inV().hasLabel('user').as('c').select('a', 'b', 'c')"
请帮我找出全部类型为病人或处方或药品的点,"g.V().hasLabel(within('patient', 'prescription', 'medicine'))"
"查找和person有关联的film节点,并根据其id分组,返回id,以及id对46取余的值","g.V().hasLabel('person').bothE('watch').otherV().hasLabel('film').dedup().by('id').project('id', 'mod').by('id').by(values('id').math('_ % 46'))"
"以197,445作为请求点id, 以属性id作为相等条件,查找buyer马宏look的goods,被其他orders contain的数量","g.withSideEffect('p', [197, 445]).V().hasLabel('buyer').where(and(__.has('id', within('p')), __.has('name', '马宏'))).outE('buyer_look_goods').inV().hasLabel('goods').inE('orders_contain_goods').outV().hasLabel('orders').count()"
"帮我查询全部id为21的account关联的account,和以deposit关系关联了这些account的其他loan","g.V().hasLabel('account').has('id', 21).as('a').bothE().as('e').otherV().hasLabel('account').as('b').inE('deposit').as('e2').outV().hasLabel('loan').as('c').select('b', 'c')"
查询与loan关联的其他company，以及这些company通过apply关系关联的loan。,"g.V().has('loan', 'id', '94').bothE().otherV().hasLabel('loan').as('b').inE('apply').otherV().hasLabel('company').as('c').select('b', 'c')"
"查找所有名为美团的点的,名字等于何若涵的伙伴,返回这些伙伴的性别,和边的源点id,目标点id,权重","g.V().has('name', '美团').outE('partner').as('e').inV().has('name', '何若涵').select('e').project('gender', 'srcId', 'targetId', 'weight').by(__.inV().values('gender')).by(__.outV().id()).by(__.inV().id()).by(__.values('weight'))"
"根据id,level,name分组,计算value的数量减value的最小值","g.V().hasLabel('a').group().by(union(has('id'), has('level'), has('name')).fold()).by(values('value').count().math('_ - _').by().by(values('value'))).select(values).unfold().min()"
 查询同时引用了《三体》和王若涵的书，以及由王若涵撰写的书，并返回它们。,"g.V().has('book', 'name', '三体').as('a').out('refers').as('b').select('a', 'b').V().has('author', 'name', '王若涵').as('c').out('write').as('d').select('c', 'd').select('a', 'b', 'c', 'd')"
 找出孙思琪和韩科共同喜欢的人的节点，类型是person。,"g.V().has('name', '孙思琪').outE('likes').inV().hasLabel('person').as('b').inE('likes').outV().has('name', '韩科').select('b')"
"返回类型是contain,并且f1为false或f0不为空的边","g.E().hasLabel('contain').or(has('f1', false), has('f0', neq(null)))"
帮我查询标签等于用户或论坛的点,"g.V().hasLabel(within('user', 'forum'))"
找出与孙建国有父母关系的人，然后找出与孙建国有恋人关系的人。,"g.V().has('person', 'name', '孙建国').as('a').out('parent').hasLabel('person').as('b').select('a').in('lover').hasLabel('person').as('c').select('a', 'b', 'c')"
找出所有与王强有watch关系的电影，以及这些电影与tag有has关系的点，并返回这些点的价值。,"g.V().has('name', '王强').outE('watch').inV().hasLabel('film').outE('has').inV().values('value')"
"给出源点类型是city,边类型是contain,以及满足条件srcId大于131且srcId大于158且f1大于171.64的边","g.V().hasLabel('city').outE('contain').has('srcId', gt(131)).has('srcId', gt(158)).has('f1', gt(171.64))"
"返回类型为书的全部点,并根据id升序排列","g.V().hasLabel('book').order().by('id', asc)"
帮我查询以属于关系关联了国家中国的城市,"g.V().has('country', 'name', '中国').inE('belong').outV().hasLabel('city')"
"查询和person杜月有关的person,再查询和杜月父母的其他person,返回它们","g.V().hasLabel('person').has('name', '杜月').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('parent').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
帮我查询所有标签为book或author或reader的点,"g.V().hasLabel(within('book', 'author', 'reader'))"
 LX001和Geaflow123有84个共同朋友。,"g.V().has('account', 'name', 'LX001').out('friend').as('b').in('friend').has('account', 'name', 'Geaflow123').select('b').limit(84)"
"找出被comment belong数量大于58的film,记为relationCount,再查询这些film belong的person","g.V().hasLabel('film').as('a').project('a', 'relationCount').by(identity()).by(__.in('belong').hasLabel('comment').count()).unfold().as('a_with_count').select('a_with_count').where(select('relationCount').is(gt(58))).select('a').out('belong').hasLabel('person')"
"帮我查询与买家黄强存在咨询关系,且与买家郑科存在回答关系的卖家节点，返回这些卖家的身高,及买家黄强的身高,及买家郑科的性别","g.V().has('buyer', 'name', '黄强').as('a').out('consult').hasLabel('seller').as('b').in('ask').has('buyer', 'name', '郑科').as('c').select('a', 'b', 'c').by('height').by('height').by('gender')"
"帮我查询所有和person陈思思有关系的person,返回这些点的身高","g.V().hasLabel('person').has('name', '陈思思').bothE().otherV().hasLabel('person').values('height')"
"找出部门经管学院拥有的学生,以及拥有这些学生的部门","g.V().has('department', 'name', '经管学院').as('a').outE('has').inV().hasLabel('student').as('b').inE('has').outV().hasLabel('department').as('c').select('b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出所有源点满足条件身高不为空且薪资为3639,或名字为韩思琪,目标点满足条件性别为famale且名字等于Tom,或性别不是male,且类型为person_colleague_person的边","g.E().hasLabel('person_colleague_person').where(__.outV().or(__.and(__.has('height', neq(null)), __.has('salary', 3639)), __.has('name', '韩思琪'))).where(__.inV().or(__.and(__.has('gender', 'famale'), __.has('name', 'Tom')), __.has('gender', neq('male'))))"
 35个教师中，孙雪和黄宏是共同的相关者。,"g.V().hasLabel('teacher').has('name', '孙雪').outE('relation').inV().as('b').inE('relation').outV().hasLabel('teacher').has('name', '黄宏').select('b').limit(35)"
"用如下schema的图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找所有id为4的user关联的post,和以likes关系关联了这些post的其他user","g.V().has('user', 'id', '4').bothE().otherV().hasLabel('post').as('b').inE('user_likes_post').otherV().hasLabel('user').as('c').select('b', 'c')"
"找出124个账号LX001和XXD,共同的相关者","g.V().has('account', 'name', 'LX001').as('a').outE('relation').as('e').inV().as('b').inE('relation').as('e2').outV().has('account', 'name', 'XXD').as('c').select('b').limit(124)"
"返回person何梅pay的person,被其他person knows的数量","g.V().has('person', 'name', '何梅').outE('pay').inV().hasLabel('person').inE('knows').outV().hasLabel('person').count()"
"给出名为广州的点contain的全部company,并对这些company的scale进行求和","g.V().has('name', '广州').out('contain').hasLabel('company').values('scale').sum()"
 返回176个同时与纽约和深圳有联系的公司的节点。,"g.V().has('name', '纽约').outE().inV().hasLabel('company').as('b').inE().outV().has('name', '深圳').select('b').limit(176)"
"输入请求点id的列表565,441, 源点的id等于输入表id,给出全部名为马轩的点提交的软件","g.inject([565, 441]).unfold().as('p').V().has('id', __.as('p')).has('name', '马轩').outE('person_commits_software').inV().hasLabel('software').dedup()"
"帮我查询123个和类型为大学的点有拥有关系的部门,且和这些部门有拥有关系的学生",g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('student').limit(123)
"以11作为请求点id, 以属性id作为相等条件,查询id为34的点的身高,年龄","g.V().has('id', 34).project('height', 'age').by(values('height')).by(values('age'))"
返回以cooperate关系关联了university武汉大学的company,"g.V().hasLabel('university').has('name', '武汉大学').inE('cooperate').outV().hasLabel('company')"
"请帮我查找44个学生杜雪和Jack,共同的伙伴","g.V().has('student', 'name', '杜雪').outE('partner').inV().as('b').inE('partner').outV().has('student', 'name', 'Jack').select('b').limit(44)"
"输入请求点id的列表468,294,417, 以属性id作为相等条件,查询类型为reader的点,并根据salary升序排列","g.inject([468, 294, 417]).unfold().as('p').V().hasLabel('reader').has('id', __.select('p')).order().by('salary', asc)"
"查找186个名为杜月的点cancel的类型是orders的节点,且节点value是463或id小于63","g.V().has('name', '杜月').outE('cancel').inV().hasLabel('orders').has('value', 463).or(has('id', lt(63))).limit(186)"
请帮我查找被person何梅knows的person,"g.V().hasLabel('person').has('name', '何梅').outE('knows').inV().as('b').outV().as('a').select('a', 'b')"
 找出接受了Prescription_106处方的患者。,"g.V().hasLabel('prescription').has('name', 'Prescription_106').inE('accept').outV().hasLabel('patient')"
"以397,790,333作为请求点id, 源点的id等于输入表id,请帮我找出和loan defaultName有关的loan,称为X,再请帮我找出和这个X有关联的其他person,以及和X有关联的loan","g.withSideEffect('p', [397, 790, 333]).V().hasLabel('loan').has('id', within('p')).has('name', 'defaultName').as('a').bothE().otherV().hasLabel('loan').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('loan').as('d').select('a', 'b', 'c', 'd')"
"查询包含用户张科的论坛,和这些论坛包含的用户","g.V().has('user', 'name', '张科').as('a').in('contain').as('b').out('contain').as('c').select('b', 'c')"
 请帮我查找与类型为person的物品有关注（likes)的评论，并且这些评论属于某个属于（belong)电影的类别，并且这些电影包含标签（has),g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('comment').as('b').outE('belong').as('e2').inV().hasLabel('film').as('c').outE('has').as('e3').inV().hasLabel('tag').as('d').select('d')
"以82,639作为请求点id, 以属性id作为相等条件,帮我查询与city重庆和深圳都存在city_contain_company关系的点","g.withSideEffect('p', [82, 639]).V().hasLabel('city').has('id', within('p')).where(and(has('name', '重庆'), has('id', within('p')))).outE('city_contain_company').inV().as('b').inE('city_contain_company').outV().hasLabel('city').has('name', '深圳').select('b')"
"给出名为loan_89的点的,价值等于39或价值除453小于等于70的相关者,返回这些相关者的价值,和边的源点id,目标点id,时间戳","g.V().has('name', 'loan_89').outE('relation').as('e').inV().as('b').where(or(__.has('value', 39), __.math('value / 453').is(lte(70)))).select('b', 'e').by('value').by(project('srcId', 'targetId', 'timeStamp').by(__.outV().id()).by(__.inV().id()).by('timeStamp'))"
"请帮我查找与名为韩强和黄强的点共同watch的,标签为film的节点","g.V().has('name', '韩强').out('watch').hasLabel('film').as('b').in('watch').has('name', '黄强').select('b')"
给出名为孙宏的节点accept的prescription或doctor或department,"g.V().has('name', '孙宏').outE('accept').inV().hasLabel(within('prescription', 'doctor', 'department')).dedup()"
"使用列为salary,height,id, 数据为(4008,155,61)的子查询作为输入表, 源点的id等于输入表id,请帮我找出所有和author陈强有3度关系的author","g.withSideEffect('p', [['salary':4008, 'height':155, 'id':61]]).V().hasLabel('author').has('id', __.select('p').unfold().select('id')).has('name', '陈强').repeat(both().simplePath()).times(3).emit().hasLabel('author').dedup()"
"请帮我查找全部源点标签为person,目标点标签为person,标签为person的边",g.V().hasLabel('person').outE('person').as('e').inV().hasLabel('person').select('e')
找出与黄国强和张梅都有pay关系的点,"g.V().has('person', 'name', '黄国强').outE('pay').inV().as('b').inE('pay').outV().has('person', 'name', '张梅').select('b')"
请帮我找出那些销量不超过1391.95或者名称不包含'键盘'的商品，按照价值从低到高排序，数量为179个。,"g.V().hasLabel('goods').or(has('sellerNumber', lte(1391.95)), has('name', neq('键盘'))).order().by('value', asc).limit(179)"
"返回和person陈宏有属于关系的公司,再返回以提交关系关联了陈宏的软件","g.V().hasLabel('person').has('name', '陈宏').as('a').outE('belong').inV().hasLabel('company').as('b').select('a').inE('commits').outV().hasLabel('software').as('c').select('a', 'b', 'c')"
"以872,525,460,999作为请求点id, 以属性id作为相等条件,查询名为杜强和赵月的,label为person的点公共的相关者节点的名单","g.inject([872, 525, 460, 999]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('name', '杜强').as('a').outE('relation').inV().as('b').select('b').inE('relation').outV().hasLabel('person').has('name', '赵月').select('b').values('name').dedup()"
"帮我查询和买家有关联的商品节点,并根据其销量,id,价值分组,返回销量,id,价值,以及id除id减4598.43的最小值","g.V().hasLabel('buyer').as('a').bothE('look').otherV().hasLabel('goods').as('b').select('b').group().by(union(values('sellerNumber'), values('id'), values('value')).fold()).by(__.project('min_value').by(values('id').math('_ / _ - 4598.43').min()).select('min_value')).unfold().project('sellerNumber', 'id', 'value', 'min_value').by(select(keys).limit(local, 1)).by(select(keys).limit(local, 2)).by(select(keys).limit(local, 3)).by(select(values))"
"给出id为38的作家认识的作家, 并将作家有关的书的创建时间的平均值赋值给作家的身高, 接着查询作家的身高小于38的作家撰写的书","g.V().has('author', 'id', 38).out('knows').as('b').project('b_height', 'd').by(__.coalesce(__.bothE().otherV().hasLabel('book').values('createTime').mean(), constant(0))).by(__.where(__.select('b_height').is(lt(38))).out('write').hasLabel('book').fold()).select('b_height', 'd')"
找出175个company字节和滴滴都有的朋友。,"g.V().hasLabel('company').has('name', '字节').outE('friend').inV().as('b').inE('friend').outV().hasLabel('company').has('name', '滴滴').select('b').limit(175)"
 一个女性，性别不是男性，知道一个人的名字，以及这个人认识的人的姓名。,"g.V().hasLabel('person').has('gender', 'female').where(__.has('gender', neq('male'))).outE('knows').inV().hasLabel('person').as('b').outE('knows').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 查询黄思思和李轩共同喜欢的人的节点，类型为person。,"g.V().has('name', '黄思思').outE('likes').inV().hasLabel('person').as('b').inE('likes').outV().has('name', '李轩').select('b')"
"帮我查询和作家孙思琪有关系的读者,返回这些点的性别,身高,薪资","g.V().has('author', 'name', '孙思琪').bothE().otherV().hasLabel('reader').project('gender', 'height', 'salary').by(values('gender')).by(values('height')).by(values('salary'))"
查询和company滴滴有2度关系的person,"g.V().has('company', 'name', '滴滴').repeat(bothE().otherV().simplePath()).times(2).hasLabel('person').dedup()"
"找出病人孙强的标签为伙伴的边,并根据权重升序排列,返回122个","g.V().hasLabel('patient').has('name', '孙强').outE('partner').order().by('weight', asc).limit(122).inV()"
"帮我查询名为王若涵和黄若涵的,标签为买家的点公共的伙伴节点的名单","g.V().has('buyer', 'name', '王若涵').as('a').outE('partner').inV().as('b').inE('partner').outV().has('buyer', 'name', '黄若涵').as('c').select('b').values('name')"
"查询标签为教师的点,返回123个",g.V().hasLabel('teacher').limit(123)
 请帮我查询所有与我有关联的公司，以及这些公司的其他投资方。,"g.V().hasLabel('account').has('id', '118').bothE().otherV().hasLabel('company').as('b').inE('invest').otherV().hasLabel('person').as('c').select('b', 'c')"
返回标签的1跳以内的环,"g.V().hasLabel('tag').as('a').both().as('b').where(__.as('b').both().as('a')).select('a', 'b').by('id').by('id')"
请帮我查找所有与合并请求PR-194有关系的事项的状态,"g.V().hasLabel('pullRequest').has('name', 'PR-194').bothE().otherV().hasLabel('issue').values('status')"
"帮我查询名为Flink的点使用的所有软件,并对这些软件的是否开源进行求和","g.V().has('name', 'Flink').out('uses').hasLabel('software').values('openSource').sum()"
"查询源点类型是person,边类型是支付,并且满足条件目标点id为48,f0在610到712之间的边","g.V().hasLabel('person').outE('pay').has('targetId', 48).has('f0', between(610, 712))"
找出以合作关系关联了公司阿里的大学,"g.V().hasLabel('company').has('name', '阿里').inE('cooperate').outV().hasLabel('university')"
"请帮我找出吴建聪的点relates的person,然后请帮我找出吴建聪被knows的person,一起返回","g.V().has('name', '吴建聪').as('a').outE('relates').inV().hasLabel('person').as('b').select('a').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"以540,841,965,368,771作为请求点id, 以属性id作为相等条件,返回id为46的person有关的person的colleague, 再返回和person有关系的parent","g.withSideEffect('p', [540, 841, 965, 368, 771]).V().hasLabel('person').where(and(__.values('id').is(within('p')), __.values('id').is(eq('46')))).as('a').bothE().otherV().hasLabel('person').as('b').outE('person_colleague_person').inV().as('c').select('b').outE('person_parent_person').inV().as('d').select('a', 'b', 'c', 'd')"
"输入请求点id的列表105,311,379,868, 以属性id作为相等条件,找出所有源点标签等于用户,目标点标签等于帖子,标签等于user_publish_post的边","g.inject([105, 311, 379, 868]).unfold().as('p').V().hasLabel('user').has('id', __.select('p')).outE('user_publish_post').as('e').inV().hasLabel('post').select('e')"
 返回黄国强家人的父母。,"g.V().has('person', 'name', '黄国强').out('family').out('family').in('parent').dedup()"
返回前139个性别不是male的卖家,"g.V().hasLabel('seller').has('gender', neq('male')).limit(139)"
" 找出标签为'user',名字为'周建国'的点，并返回这些点的 height。","g.V().hasLabel('user').has('name', '周建国').values('height')"
"返回所有名为Kafka的点的,是否开源为false或是否开源等于false的相关者,返回这些相关者的id,和边的权重","g.V().has('name', 'Kafka').outE('relation').as('e').inV().has('openSource', false).select('e').by('weight').as('weight').select('e').inV().values('id').as('id').select('id', 'weight')"
"输入请求点id的列表21,846, 源点的id等于输入表id,请帮我查找82个与李若涵和郑若涵都存在关系的author节点","g.withSideEffect('p', [21, 846]).V().where(and(__.has('id', within('p')), __.has('name', '李若涵'))).outE().inV().hasLabel('author').as('b').inE().outV().has('name', '郑若涵').select('b').limit(82)"
找出名为华为的点creates的software,"g.V().has('name', '华为').outE('creates').inV().hasLabel('software')"
 查询周伟和徐若涵的家人节点，类型为person。,"g.V().has('person', 'name', '周伟').outE('family').inV().as('b').inE('family').outV().has('person', 'name', '徐若涵').select('b').values('name')"
帮我查询城市天津包含的公司节点合作的大学,"g.V().has('city', 'name', '天津').out('contain').hasLabel('company').out('cooperate').hasLabel('university')"
"使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询被医生吴科创造的处方","g.V().hasLabel('doctor').has('name', '吴科').outE('doctor_creates_prescription').inV().hasLabel('prescription').as('a').select('a').by(elementMap()).as('a_result').select('a').outE('doctor_creates_prescription').otherV().hasLabel('doctor').has('name', '吴科').as('b').select('b').by(elementMap()).select('a_result', 'b')"
找出与仓库Mybatis和JavaGuid都存在拥有关系的点,"g.V().has('repository', 'name', 'Mybatis').out('has').as('b').in('has').has('repository', 'name', 'JavaGuid').select('b')"
"找出全部源点类型为编辑,目标点类型为书,类型为作家或书的边","g.V().hasLabel('publisher').bothE('author', 'book').where(otherV().hasLabel('book'))"
"用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出所有与买家杜红有关系的订单的id","g.V().hasLabel('buyer').has('name', '杜红').bothE().otherV().hasLabel('orders').values('id')"
"以(10,159,'male'),(25,155,'famale')作为请求表数据,属性分别为id,height,gender, 源点的gender等于输入表gender,给出id为73的publisher有关的author的relation, 再给出和author有关系的friend","g.withSideEffect('p', [['id':10, 'height':159, 'gender':'male'], ['id':25, 'height':155, 'gender':'famale']]).V().hasLabel('publisher').has('id', '73').as('a').where(__.select('a').values('gender').is(within(__.select('p').unfold().values('gender')))).bothE().otherV().hasLabel('author').as('b').bothE().otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
"查询被person pay数量大于132的person,记为relationCount,再查询这些person pay的person","g.V().hasLabel('person').as('a').project('a', 'relationCount').by(identity()).by(__.in('pay').hasLabel('person').values('id').mean()).select('a', 'relationCount').where(select('relationCount').is(gt(132))).select('a').out('pay').hasLabel('person').dedup()"
"请帮我查找seller ask的buyer, 令buyer的height的值等于askbuyer的seller的salary的个数, 再查找buyer consult的seller","g.V().hasLabel('seller').as('a').outE('ask').inV().hasLabel('buyer').as('b').sideEffect(__.select('b').property('height', __.select('b').inE('ask').outV().hasLabel('seller').values('salary').count())).select('b').outE('consult').inV().hasLabel('seller').as('d').select('b', 'd').by('height').by()"
找出与183个买家有关联的咨询卖家，以及这些卖家所拥有的商品。,g.V().hasLabel('buyer').as('a').outE('consult').as('e').inV().hasLabel('seller').as('b').outE('has').as('e2').inV().hasLabel('goods').as('c').select('c').limit(183)
"给出87个名为何建国的点创造的类型为订单的节点,且节点id为空或id大于等于76","g.V().has('name', '何建国').outE('creates').inV().hasLabel('orders').filter(or(hasNot('id'), has('id', gte(76)))).limit(87)"
"查询belong department放射科的doctor,和这些doctor diagnose的patient","g.V().has('department', 'name', '放射科').in('belong').as('b').out('diagnose').as('c').select('b', 'c')"
"根据名字分组,计算价值加价值的值",g.V().hasLabel('a').group().by('name').by(values('value').sum(local))
"给出所有与北京存在包含关系的大学,大学与城市存在属于关系的点,返回这些点的名字","g.V().has('name', '北京').out('contain').hasLabel('university').out('belong').hasLabel('city').values('name')"
"给出类型为software的所有点,并根据openSource升序排列","g.V().hasLabel('software').order().by('openSource', asc)"
 给出按年龄和工资分组的人的工资，并按升序排序。,"g.V().hasLabel('person').group().by(project('id', 'age', 'salary').by('id').by('age').by('salary')).order(local).by(select(keys).unfold().select('salary'), asc).select(values).unfold()"
"给出名为张若涵的点invest的所有company,并对这些company的name进行求和","g.V().has('name', '张若涵').outE('invest').inV().hasLabel('company').values('name').sum()"
"查询gender不是famale的buyer consult的seller的名称,以及这些seller has的goods的名称","g.V().hasLabel('buyer').has('gender', neq('famale')).out('consult').hasLabel('seller').as('b').out('has').hasLabel('goods').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
请帮我查找与person杜思思和person李思琪都有关系的person节点,"g.V().has('person', 'name', '杜思思').bothE('likes').bothV().hasLabel('person').where(bothE('knows').bothV().has('person', 'name', '李思琪')).dedup()"
"以(2033-04-01,49,249),(2002-08-01,91,342),(2029-06-22,10,107)作为请求表数据,属性分别为createTime,id,wordCount, 以属性wordCount作为相等条件,帮我查询与person杜建国有关,且与tag科幻有关系的film节点","g.inject([['createTime': '2033-04-01', 'id': 49, 'wordCount': 249], ['createTime': '2002-08-01', 'id': 91, 'wordCount': 342], ['createTime': '2029-06-22', 'id': 10, 'wordCount': 107]]).as('p').unfold().as('p_row').select('p_row').by(values('wordCount')).as('wordCount_val').V().hasLabel('person').has('wordCount', where(eq('wordCount_val'))).has('name', '杜建国').outE('person_watch_film').inV().hasLabel('film').as('b').outE('film_has_tag').inV().hasLabel('tag').has('name', '科幻').select('b')"
请帮我查找与student黄强和徐国强都存在selects关系的点,"g.V().has('student', 'name', '黄强').outE('selects').inV().as('b').inE('selects').outV().has('student', 'name', '徐国强').select('b')"
"请帮我找出111个名为功夫的点拥有的标签等于标签的节点,且其价值加426小于等于956或id大于等于19","g.V().has('name', '功夫').outE('has').inV().hasLabel('tag').or(has('value', lte(530)), has('id', gte(19))).limit(111)"
返回所有和department数学学院之间有has关系的student,"g.V().hasLabel('department').has('name', '数学学院').out('has').hasLabel('student')"
"给出author韩若涵knows的author, 令author的name等于author的height的个数,令author的name等于author的height的平均值减167,令author的id等于author的name, 返回author(a)的height, author(b)的gender","g.V().has('author', 'name', '韩若涵').as('a').outE('knows').inV().hasLabel('author').as('b').select('a', 'b').by(project('height', 'name', 'id').by(values('height')).by(project('count', 'avg').by(constant(0)).by(constant(0)).select(values)).by(values('name'))).by(project('gender', 'name', 'id').by(values('gender')).by(values('name')).by(values('id'))).select(values).unfold().project('a.height', 'b.gender').by(select('a').select('height')).by(select('b').select('gender'))"
"给出源点label为公司,边label为合作的边,返回这些边的源点id对7取余的个数,和f0的平均值乘827的平均值","g.V().hasLabel('company').as('a').outE('cooperate').as('e').inV().as('b').select('e').project('srcIdMod', 'avgF0').by(values('srcId').math('_ % 7')).by(values('f0').mean()).select('srcIdMod', 'avgF0').group().by('srcIdMod').by(constant(1).sum()).unfold().project('count_srcId_mod', 'avg_avgF0_times_827').by(select(values)).by(select(keys).select('avgF0').mean().math('_ * 827')).select('count_srcId_mod', 'avg_avgF0_times_827')"
找出99个与神探狄仁杰和泰坦尼克号都存在关系的评论或person节点,"g.V().has('name', '神探狄仁杰').outE().inV().or(hasLabel('comment'), hasLabel('person')).as('b').inE().outV().has('name', '泰坦尼克号').select('b').limit(99)"
"根据名字,id分组,计算价值对110取余的值","g.V().hasLabel('a').group().by(values('name', 'id')).by(values('value').math('_ % 110'))"
"查找名为古代的标签,以及与其有关的标签,并返回古代的id和这些标签的id","g.V().has('tag', 'name', '古代').bothE().otherV().hasLabel('tag').project('a.id', 'b.id').by(id()).by(id())"
"请帮我找出和类型为person的点有家人关系的person,以及和这些person有父母关系的person,以及和这些person有同事关系的person",g.V().hasLabel('person').as('a').out('family').hasLabel('person').as('b').out('parent').hasLabel('person').as('c').out('colleague').hasLabel('person').as('d').select('d')
"给出与country日本存在contain关系,且与company微软存在contain关系的city节点，返回这些city的peopleNumber,及country日本的value,及company微软的name","g.V().has('country', 'name', '日本').as('a').out('contain').hasLabel('city').as('b').in('contain').has('company', 'name', '微软').as('c').select('a', 'b', 'c').by('value').by('peopleNumber').by('name')"
" 帮我查询person创建的comment,这些comment属于电影，并且这些电影拥有tag。",g.V().hasLabel('person').as('a').outE('creates').as('e').inV().hasLabel('comment').as('b').outE('belong').as('e2').inV().hasLabel('film').as('c').outE('has').as('e3').inV().hasLabel('tag').as('d').select('d')
"给出person周伟喜欢的评论,以及创造这些评论的person","g.V().hasLabel('person').has('name', '周伟').outE('likes').inV().hasLabel('comment').as('b').inE('creates').outV().hasLabel('person').as('c').select('b', 'c')"
 找出论坛知网中帖子节点所拥有的标签。,"g.V().has('forum', 'name', '知网').out('contain').hasLabel('post').out('has').hasLabel('tag')"
"请帮我查找和类型为卖家的点有回答关系的买家,以及和这些买家有咨询关系的卖家,以及和这些卖家有拥有关系的商品",g.V().hasLabel('seller').as('a').outE('ask').as('e').inV().hasLabel('buyer').as('b').outE('consult').as('e2').inV().hasLabel('seller').as('c').outE('has').as('e3').inV().hasLabel('goods').as('d').select('d')
"给出149个和类型是大学的点有拥有关系的部门,并且和这些部门有拥有关系的学生",g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('student').limit(149)
"找出全部与杜伟存在发布关系的书,书与书存在引用关系的点,返回这些点的价格","g.V().has('name', '杜伟').out('publish').hasLabel('book').out('refers').hasLabel('book').values('price')"
计算所有person的height除height的值,g.V().hasLabel('person').project('height_ratio').by(values('height').math('_ / _'))
请帮我找出salary在6388到8836之间或者age小于等于53的person knows的person的姓名。,"g.V().hasLabel('person').has('salary', between(6388, 8836)).or().has('age', lte(53)).as('a').outE('knows').inV().hasLabel('person').as('b').outE('knows').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"查询与名为李国强和李宏的点共同认识的,类型是person的节点","g.V().has('name', '李国强').out('knows').as('b').in('knows').has('name', '李宏').select('b').hasLabel('person')"
"请帮我找出与论坛知网有关,且与标签文艺有关系的帖子节点","g.V().hasLabel('forum').has('name', '知网').outE('contain').inV().hasLabel('post').as('b').inE('has').outV().hasLabel('tag').has('name', '文艺').select('b')"
"查找和person吴思思有关的person,再查找和吴思思父母的其他person,返回它们","g.V().has('person', 'name', '吴思思').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('parent').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
请帮我查找前197个label为包含的边,g.E().hasLabel('contain').limit(197)
给出全部和部门内科之间有拥有关系的医生,"g.V().hasLabel('department').has('name', '内科').out('has').hasLabel('doctor')"
年龄减86的值,g.V().hasLabel('a').project('result').by(values('age').math('_ - 86'))
"以78, 'VY'作为输入调用triangleCount函数,返回number","g.call('triangleCount').with('input1', 78).with('input2', 'VY').select('number')"
"用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回id为37的标签有关的person的伙伴, 再返回和person有关系的伙伴","g.V().has('tag', 'id', 37).as('a').bothE().otherV().hasLabel('person').as('b').bothE('partner').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
返回所有和person郑建国之间有own关系的account,"g.V().hasLabel('person').has('name', '郑建国').outE('own').inV().hasLabel('account')"
找出前90个类型为教的边,g.E().hasLabel('teach').limit(90)
给出前58个满足条件名字等于ISSUE-235的事项,"g.V().hasLabel('issue').has('name', 'ISSUE-235').limit(58)"
找出与名为'黄国强'的用户有关联的所有帖子，或者这些帖子之间的关联。,"g.V().hasLabel('user').has('name', '黄国强').outE('relation').inV().hasLabel('post').range(1, 2).dedup()"
"请帮我查找person韩雪喜欢的person,以及认识这些person的person, 令person(c)的年龄等于person(a)的年龄除54乘30,令person的id等于person的身高对身高取余对162取余,令person(b)的id等于person(a)的性别, 返回person(a)的名字,person(b)的薪资,person(c)的薪资","g.V().has('person', 'name', '韩雪').as('a').outE('likes').inV().hasLabel('person').as('b').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c').by(values('name')).by(values('salary')).by(values('salary'))"
查询全部与标签古代有关系的用户的id,"g.V().has('tag', 'name', '古代').bothE().otherV().hasLabel('user').id()"
查询所有与药品医疗酒精有关系的处方的id,"g.V().has('medicine', 'name', '医疗酒精').bothE().otherV().hasLabel('prescription').values('id')"
"以(94,59,161),(79,61,150)作为请求表数据,属性分别为id,age,height, 以属性id作为相等条件,找出和person韩强之间有person_pay_person关系的person","g.inject([['id':94,'age':59,'height':161],['id':79,'age':61,'height':150]]).as('p').unfold().as('p_row').select('p_row').by(values('id')).as('p_id').V().hasLabel('person').has('id',select('p_id')).has('name','韩强').outE('person_pay_person').inV().hasLabel('person').dedup()"
请帮我查找以拥有关系关联了学生张伟的部门,"g.V().hasLabel('student').has('name', '张伟').inE('has').outV().hasLabel('department')"
帮我查一下吴国强创建的订单,"g.V().hasLabel('buyer').has('name', '吴国强').outE('creates').inV().hasLabel('orders').as('b').select('b').by(__.in('creates').hasLabel('buyer').has('name', '吴国强')).as('a').select('a', 'b')"
"返回id为47的person有关的person的相关者, 再返回和person有关系的伙伴","g.V().has('person', 'id', 47).as('a').bothE().otherV().hasLabel('person').as('b').bothE().hasLabel('relation').otherV().as('c').select('b').bothE().hasLabel('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"返回与名为重庆大学和清华大学的点共同拥有的,类型是部门的节点","g.V().has('name', '重庆大学').outE('has').inV().hasLabel('department').as('b').inE('has').outV().has('name', '清华大学').select('b')"
"给出person认识的person,返回其源点的id减88的最大值,以及目标点的id的平均值乘id的值","g.V().hasLabel('person').as('a').outE('knows').as('e').inV().hasLabel('person').as('b').select('a', 'b').by('id').project('max_diff', 'avg_times_id').by(select('a').math('_ - 88').max()).by(select('b').mean().math('_ * _'))"
查询label为person且与名为徐月和李宏的点共同pay的节点,"g.V().has('name', '徐月').outE('pay').inV().hasLabel('person').as('b').inE('pay').outV().has('name', '李宏').select('b')"
"给出所有源点满足条件height在153到195之间,目标点满足条件name是Order_220,price大于等于1286.53,或id大于等于76,且label为cancel的边","g.V().has('height', between(153, 195)).outE('cancel').as('e').inV().where(or(and(has('name', 'Order_220'), has('price', gte(1286.53))), has('id', gte(76)))).select('e')"
"给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出和post Post_160有post_has_tag关系的tag,再请帮我找出以post_has_tag关系关联了 Post_160的tag","g.V().has('post', 'name', 'Post_160').as('a').bothE('post_has_tag').otherV().hasLabel('tag').as('b', 'c').select('a', 'b', 'c')"
"帮我查询person申请的贷款,返回其源点的薪资除1339的平均值,以及目标点的id乘52的平均值","g.V().hasLabel('person').as('a').outE('apply').as('e').inV().hasLabel('loan').as('b').select('a', 'b').by(values('salary').math('_ / 1339')).by(values('id').math('_ * 52')).select(values).unfold().group().by(keys).by(mean())"
"请帮我查找公司微软创造的软件, 令公司的id等于公司的人数对972取余, 返回公司的名字, 软件的语言","g.V().has('company', 'name', '微软').as('a').outE('creates').inV().hasLabel('software').as('b').select('a', 'b').by('name').by('lang').project('a.name', 'b.lang', 'a.id').by(select('a').values('name')).by(select('b').values('lang')).by(select('a').values('peopleNumber').math('_ % 972'))"
"查找88个person李建国和孙思琪,共同的伙伴","g.V().hasLabel('person').has('name', '李建国').as('a').outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().hasLabel('person').has('name', '孙思琪').as('c').select('b').limit(88)"
请帮我查找被读者陈梅喜欢的书,"g.V().hasLabel('reader').has('name', '陈梅').as('b').outE('likes').as('e').inV().hasLabel('book').as('a').select('a', 'b')"
返回与城市伦敦和广州都存在包含关系的点,"g.V().has('city', 'name', '伦敦').out('contain').as('b').in('contain').has('city', 'name', '广州').select('b')"
"找出与student吴轩有关,且与department艺术学院有关系的course节点","g.V().hasLabel('student').has('name', '吴轩').bothE('selects').bothV().hasLabel('course').bothE('belong').bothV().hasLabel('department').has('name', '艺术学院').select('b')"
查询名为'杭州'的城市点，返回这些点的价值和名称。,"g.V().hasLabel('city').has('name', '杭州').project('a.value', 'a.name').by('value').by('name')"
"查找被用户何雪发布的帖子,和何雪发布的帖子","g.V().hasLabel('user').has('name', '何雪').as('b').outE('publish').as('e').inV().hasLabel('post').as('a').select('b').outE('publish').as('e2').inV().hasLabel('post').as('c').select('a', 'b', 'c')"
"给出名为郑思思的person,以及与其有关的person,并返回郑思思的id和这些person的名字","g.V().has('person', 'name', '郑思思').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('id').by('name')"
"返回24个价值为空且价值为空,或创建时间为2024年01月09日的论坛,根据id从小到大排列","g.V().hasLabel('forum').or(__.and(__.hasNot('value'), __.hasNot('value')), __.has('createTime', '2024-01-09')).order().by('id', asc).limit(24)"
帮我找大学物理课程的课时,"g.V().hasLabel('course').has('name', '大学物理').values('courseHour')"
 请问有没有一个医生属于某个部门，而该部门下面有某个医生拥有诊断某种疾病的能力，能否帮我找出这些人和他们之间的关系？,g.V().hasLabel('doctor').as('a').outE('belong').as('e').inV().hasLabel('department').as('b').outE('has').as('e2').inV().hasLabel('doctor').as('c').outE('diagnose').as('e3').inV().hasLabel('patient').as('d').select('d')
"查询与用户赵建聪有关,且与标签动作有关系的帖子节点","g.V().hasLabel('user').has('name', '赵建聪').outE('publish').inV().hasLabel('post').as('b').inE('has').outV().hasLabel('tag').has('name', '动作').select('b')"
"返回id为77的点的等级,名字,价值","g.V().has('id', 77).project('level', 'name', 'value').by(values('level')).by(values('name')).by(values('value'))"
 返回医生和他们的所属部门，以及这些部门所属的组织机构。,g.V().hasLabel('doctor').as('a').outE('belong').inV().hasLabel('department').as('b').outE('has').inV().hasLabel('doctor').as('c').outE('belong').inV().hasLabel('department').as('d').select('d')
找出与Tom有关联的所有person，然后找出Tom关联的所有person，并将两者一起返回。,"g.V().has('name', 'Tom').as('a').outE('relates').inV().hasLabel('person').as('b').select('a').inE('relates').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"给出类型为家人,以及目标点id不为空或目标点id为空或权重小于等于175.86的边","g.E().hasLabel('family').or(has('targetId', neq(null)), has('targetId', eq(null)), has('weight', lte(175.86)))"
查询何伟认识的人，返回他们支付人的性别,"g.V().has('person', 'name', '何伟').out('knows').out('pay').values('gender')"
查询郑宏发布在其他论坛的帖子数量,"g.V().has('user', 'name', '郑宏').outE('publish').inV().hasLabel('post').inE('contain').outV().hasLabel('forum').count()"
请帮我找出和学生周红之间有选择关系的课程,"g.V().hasLabel('student').has('name', '周红').outE('selects').inV().hasLabel('course')"
"请帮我找出全部id为116的学生关联的部门,和以拥有关系关联了这些部门的其他大学","g.V().has('student', 'id', 116).bothE().otherV().hasLabel('department').as('b').inE('has').otherV().hasLabel('university').as('c').select('b', 'c')"
 找吴若涵这个人。,"g.V().hasLabel('person').has('name', '吴若涵')"
"帮我查询从university中国科技大学出发,经过标签等于belong的边,走2度到达的city点","g.V().has('university', 'name', '中国科技大学').repeat(out('belong')).times(2).hasLabel('city')"
帮我查询前112个类型为拥有的边,g.E().hasLabel('own').limit(112)
请告诉我医生李梅所在的部门，并返回该部门所有医生的性别。,"g.V().hasLabel('doctor').has('name', '李梅').out('belong').as('b').in('has').hasLabel('doctor').as('c').select('c').values('gender')"
给出和company字节之间有apply关系的loan,"g.V().hasLabel('company').has('name', '字节').outE('apply').inV().hasLabel('loan')"
查询徐思琪咨询的卖家的商品,"g.V().hasLabel('buyer').has('name', '徐思琪').out('consult').hasLabel('seller').out('has').hasLabel('goods')"
"找出person杜轩buy的software,以及buy这些software的person","g.V().hasLabel('person').has('name', '杜轩').as('a').outE('buy').as('e').inV().hasLabel('software').as('b').inE('buy').as('e2').outV().hasLabel('person').as('c').select('b', 'c')"
请帮我查找全部类型是pullRequest的点,g.V().hasLabel('pullRequest')
"找出174个名为徐雪的点关联的标签等于person的节点,且节点名字为黄伟","g.V().has('name', '徐雪').outE('relates').inV().hasLabel('person').has('name', '黄伟').limit(174)"
 查询与重庆大学有has关系且与徐月有has关系的部门节点，返回这些部门的值、ID、名称、重庆大学的名称以及徐月的身高。,"g.V().has('university', 'name', '重庆大学').as('a').out('has').hasLabel('department').as('b').in('has').has('student', 'name', '徐月').as('c').select('a', 'b', 'c').by('name').by(values('value', 'id', 'name').fold()).by('height').project('a_name', 'b_value', 'b_id', 'b_name', 'c_height').by(select('a')).by(select('b').unfold().limit(1)).by(select('b').unfold().skip(1).limit(1)).by(select('b').unfold().skip(2).limit(1)).by(select('c'))"
找出所有与王国强有联系的作家，以及这些作家撰写的书籍，并返回这些书籍的类型。,"g.V().has('name', '王国强').out('knows').hasLabel('author').out('write').values('category')"
 查询与一个用户相关的所有其他用户，以及这些其他用户之间的相关关系。,g.V().hasLabel('user').as('a').outE('relation').inV().hasLabel('user').as('b').select('b')
"查找id为106的person认识的person, 并将person有关的person的id的最大值赋值给person(b)的身高, 接着查询person(b)的身高小于106的person关联的person","g.V().hasLabel('person').has('id', 106).outE('knows').inV().hasLabel('person').as('b').project('b', 'height').by(identity()).by(__.inE().outV().hasLabel('person').values('id').max()).where(select('height').is(lt(106))).outE('relates').inV().hasLabel('person').project('height', 'd').by(select('height')).by(identity())"
查找名为中国军事论坛的节点包含的用户或标签或论坛,"g.V().has('name', '中国军事论坛').out('contain').hasLabel(within('user', 'tag', 'forum'))"
"输入表的列为level,name,id, 数据为(4,'中国科技大学',29), 以属性level作为相等条件,请帮我查找名为计算机体系结构的课程","g.withSideEffect('p', [['level':4, 'name':'中国科技大学', 'id':29]]).V().hasLabel('course').has('level', __.select('p').unfold().select('level')).has('name', '计算机体系结构')"
"查询和名为清华大学的大学有朋友关系,或有朋友的朋友关系的城市","g.V().has('university', 'name', '清华大学').out('friend').emit().repeat(__.out('friend')).times(2).hasLabel('city').dedup()"
"返回id为87的city contain的university, 并将university有关的city的value的求和值赋值给university的name, 接着查询university的name小于87的university cooperate的company","g.V().has('city', 'id', 87).out('contain').hasLabel('university').as('b').project('name', 'd').by(select('b').both().hasLabel('city').values('value').sum()).by(select('b').filter(select('name').is(lt(87))).out('cooperate').hasLabel('company').fold()).select('name', 'd')"
"给出名字是体育学院的部门拥有的学生的名称,以及这些学生 选择的课程的名称","g.V().has('department', 'name', '体育学院').out('has').as('b').out('selects').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 请帮我查找马思琪医生所在部门的医生。,"g.V().hasLabel('doctor').has('name', '马思琪').outE('belong').inV().hasLabel('department').outE('has').inV().hasLabel('doctor')"
"查询和pullRequest PR-414有belong关系的repository,再查询以belong关系关联了PR-414的repository","g.V().hasLabel('pullRequest').has('name', 'PR-414').as('a').bothE('belong').otherV().hasLabel('repository').as('b', 'c').select('a', 'b', 'c')"
大小乘大小的值,g.V().hasLabel('a').project('result').by(values('size').math('_ * _'))
 给出李建国观看的电影，返回该电影包含的标签的ID、名称和值。,"g.V().has('person', 'name', '李建国').outE('watch').inV().hasLabel('film').outE('has').inV().hasLabel('tag').project('id', 'name', 'value').by(values('id')).by(values('name')).by(values('value'))"
"请帮我找出全部和订单Order_141有关系的买家或订单或商品,返回这些点的id","g.V().hasLabel('orders').has('name', 'Order_141').bothE().otherV().hasLabel(within('buyer', 'orders', 'goods')).values('id')"
"帮我查询和类型为person的点有父母关系的person,且和这些person有父母关系的person,且和这些person有父母关系的person",g.V().hasLabel('person').as('a').out('parent').hasLabel('person').as('b').out('parent').hasLabel('person').as('c').out('parent').hasLabel('person').as('d').select('d')
找出与买家徐科有关联的商品，然后找出与徐科有关联的卖家,"g.V().has('buyer', 'name', '徐科').as('a').out('look').hasLabel('goods').as('b').select('a').in('consult').hasLabel('seller').as('c').select('a', 'b', 'c')"
从Geaflow123repay账户中获取贷款并返回,"g.V().hasLabel('account').has('name', 'Geaflow123').outE('repay').inV().hasLabel('loan').as('b').select('b').by().as('a').select('a', 'b')"
"查询书呐喊的标签为引用的边,并根据f1升序排列,返回157个","g.V().hasLabel('book').has('name', '呐喊').outE('refers').order().by('f1', asc).limit(157).inV()"
"用这个schema:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找以belong关系关联了film少年足球的comment","g.V().hasLabel('film').has('name', '少年足球').inE('comment_belong_film').outV().hasLabel('comment')"
 第一个人关联了CSDN论坛，第二个人是CSDN论坛中的人。,"g.V().hasLabel('forum').has('name', 'CSDN').as('a').outE('contain').inV().hasLabel('person').as('b').select('a').inE('contain').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"查找和论坛推特有包含关系的用户,再查找以包含关系关联了推特的帖子","g.V().hasLabel('forum').has('name', '推特').as('a').outE('contain').inV().hasLabel('user').as('b').select('a').inE('contain').outV().hasLabel('post').as('c').select('a', 'b', 'c')"
找出前151个类型是申请的边,g.E().hasLabel('apply').limit(151)
"找出和学生张强有关系的部门或大学或学生,返回这些点的等级","g.V().has('student', 'name', '张强').bothE().otherV().hasLabel(within('department', 'university', 'student')).values('level')"
"请帮我找出id为29的person有关的person的relation, 再请帮我找出和person有关系的friend","g.V().has('person', 'id', 29).as('a').bothE().otherV().hasLabel('person').as('b').bothE('relation').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
"用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询id为49的点的name","g.V().has('id', 49).values('name')"
"给出拥有教师吴宏的部门,和这些部门拥有的学生","g.V().has('teacher', 'name', '吴宏').as('a').in('has').as('b').out('has').as('c').select('b', 'c')"
"给出96个名为天津的点包含的标签等于大学的节点,且节点名字不等于重庆大学或价值在423到848之间","g.V().has('name', '天津').outE('contain').inV().hasLabel('university').where(or(__.not(has('name', '重庆大学')), has('value', between(423, 848)))).limit(96)"
请帮我查找所有与买家何月有关系的买家的性别,"g.V().has('buyer', 'name', '何月').bothE().otherV().hasLabel('buyer').values('gender')"
返回所有名为Flink的点has的pullRequest,"g.V().has('name', 'Flink').out('has').hasLabel('pullRequest')"
查找被部门法学院拥有的教师,"g.V().hasLabel('department').has('name', '法学院').inE('has').outV().as('b').outV().as('a').hasLabel('teacher').select('a', 'b')"
 找出马思琪在《西虹市首富》电影中的评论。,"g.V().has('person', 'name', '马思琪').bothE('likes').otherV().hasLabel('comment').bothE('belong').otherV().has('film', 'name', '西虹市首富').select('b')"
"查找事项的朋友,或其朋友的朋友",g.V().hasLabel('issue').as('a').repeat(out('friend')).times(2).as('b').select('b')
 找医生韩若涵，返回其性别、ID和名称。,"g.V().hasLabel('doctor').has('name', '韩若涵').project('gender', 'id', 'name').by(values('gender')).by(values('id')).by(values('name'))"
找出与黄建聪相关的电影院，然后找出他看过的其他电影，并将两者都返回。,"g.V().has('person', 'name', '黄建聪').as('a').bothE().otherV().hasLabel('cinema').as('b').select('a').outE('watch').inV().hasLabel('film').as('c').select('a', 'b', 'c')"
找出与Post_119相关的用户，以及Post_119所关联的其他标签，并将它们返回。,"g.V().hasLabel('post').has('name', 'Post_119').as('a').both().hasLabel('user').as('b').select('a').out('has').hasLabel('tag').as('c').select('a', 'b', 'c')"
"请帮我查找名为神探狄仁杰的comment或person,以及与其有关的film,并返回神探狄仁杰的category和这些film的id","g.V().or(hasLabel('comment'), hasLabel('person')).has('name', '神探狄仁杰').bothE().otherV().hasLabel('film').project('a.category', 'b.id').by(select('a').values('category')).by(values('id'))"
"请帮我找出名为文艺的电影或person,以及与其有关的电影院,并返回文艺的名字和这些电影院的名字","g.V().or(hasLabel('film'), hasLabel('person')).has('name', '文艺').bothE().otherV().hasLabel('cinema').project('a_name', 'b_name').by(select(all, 'v').unfold().hasLabel(within('film', 'person')).values('name')).by(values('name'))"
"返回标签等于喜欢,以及f0不为空或权重大于177.53或f1不等于false的边","g.E().hasLabel('likes').or(has('f0', neq(null)), has('weight', gt(177.53)), has('f1', neq(false)))"
"请帮我查找和买家徐梅有关的买家,称为X,再请帮我查找和这个X有关联的其他卖家,以及和X有关联的订单","g.V().has('buyer', 'name', '徐梅').as('a').bothE().otherV().hasLabel('buyer').as('b').bothE().otherV().hasLabel('seller').as('c').select('b').bothE().otherV().hasLabel('orders').as('d').select('a', 'b', 'c', 'd')"
"请帮我找出全部id为46的课程关联的课程,和以选择关系关联了这些课程的其他学生","g.V().has('course', 'id', 46).bothE().otherV().hasLabel('course').as('b').inE('selects').otherV().hasLabel('student').as('c').select('b', 'c')"
 请帮我查找用账号BIN还的贷款。,"g.V().hasLabel('loan').as('a').inE('repay').outV().hasLabel('account').has('name', 'BIN').as('b').select('a', 'b')"
 请帮我找出生物学院的学生，以及与生物学院有has关系的教师。,"g.V().hasLabel('department').has('name', '生物学院').as('a').outE('has').inV().hasLabel('student').as('b').select('a').inE('has').outV().hasLabel('teacher').as('c').select('a', 'b', 'c')"
返回全部与person周思琪有关系的person的gender,"g.V().hasLabel('person').has('name', '周思琪').bothE().otherV().hasLabel('person').values('gender')"
返回与reader何红有likes关系的3度以内的环,"g.V().hasLabel('reader').has('name', '何红').as('a').repeat(bothE().otherV().simplePath()).times(3).where(cyclicPath()).path().by('id')"
请帮我按照address降序排序，找出department以id、name和weight分组的address。,"g.V().hasLabel('department').group().by(project('id', 'name', 'weight').by('id').by('name').by('weight')).by(values('address').fold()).unfold().order().by(select(values), desc).select(values).unfold()"
请帮我查找与国家中国有关系的国家的面积,"g.V().has('country', 'name', '中国').bothE().otherV().hasLabel('country').values('area')"
"请帮我查找与user吴月存在likes关系,且与tag科幻存在has关系的post节点，返回这些post的value,及user吴月的gender,及tag科幻的value","g.V().has('user', 'name', '吴月').as('a').out('likes').as('b').in('has').has('tag', 'name', '科幻').as('c').select('a', 'b', 'c').by('gender').by('value').by('value')"
"返回id为5的软件有关的软件的伙伴, 再返回和软件有关系的相关者","g.V().has('software', 'id', 5).as('a').bothE().as('e').otherV().hasLabel('software').as('b').bothE().hasLabel('partner').as('e2').otherV().as('c').select('b').bothE().hasLabel('relation').as('e3').otherV().as('d').select('a', 'b', 'c', 'd')"
 请问从韩国强医生出发，经过一条属于边的路线，跳了两级到达的部门点是什么？,"g.V().hasLabel('doctor').has('name', '韩国强').outE('belong').inV().outE('belong').inV().hasLabel('department')"
"找出名为王思思和王轩的,标签为person的点公共的伙伴节点的名单","g.V().has('person', 'name', '王思思').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '王轩').select('b').values('name')"
 请帮我查找放射科和眼科共同合作的148个部门。,"g.V().has('department', 'name', '放射科').outE('partner').inV().as('b').inE('partner').outV().has('department', 'name', '眼科').select('b').limit(148)"
给出公司腾讯合作的大学节点属于的城市,"g.V().hasLabel('company').has('name', '腾讯').outE('cooperate').inV().hasLabel('university').outE('belong').inV().hasLabel('city')"
"查询teacher陈雪teach的course,以及teach这些course的teacher, 令course的age等于teacher的height,令teacher(a)的salary等于teacher(c)的age的平均值,令teacher的credit等于course的courseHour加20, 返回teacher(a)的name,course(b)的id,teacher(c)的salary","g.V().hasLabel('teacher').has('name', '陈雪').as('a').outE('teach').inV().hasLabel('course').as('b').inE('teach').outV().hasLabel('teacher').as('c').select('a', 'b', 'c').by('name').by('id').by('salary').project('a_name', 'b_id', 'c_salary').by(select('a')).by(select('b')).by(select('c'))"
 请帮我查找黄宏买家是否有其他卖家拥有的数量。,"g.V().hasLabel('buyer').has('name', '黄宏').outE('look').inV().hasLabel('goods').inE('has').outV().hasLabel('seller').count()"
 找出杜国强选的课程，看看有多少其他学生也选了。,"g.V().has('student', 'name', '杜国强').outE('selects').inV().hasLabel('course').inE('selects').outV().hasLabel('student').dedup().count()"
查询所有与李思思有申请关联的贷款，以及这些贷款对应的账号所存入的金额。然后返回这些点的最新登录时间。,"g.V().has('name', '李思思').outE('apply').inV().hasLabel('loan').outE('deposit').inV().hasLabel('account').values('lastLoginTime')"
"以403,68,127作为请求点id, 源点的id等于输入表id,查询名为知乎和中国诗词论坛的,标签等于论坛的点公共的朋友节点的名单","g.inject([403, 68, 127]).unfold().as('p').V().hasLabel('forum').has('id', __.as('p')).has('name', '知乎').as('a').outE('friend').as('e').inV().as('b').inE('friend').as('e2').outV().hasLabel('forum').has('name', '中国诗词论坛').as('c').select('b').values('name').dedup()"
帮我查询被买家郑轩取消的订单,"g.V().hasLabel('buyer').has('name', '郑轩').outE('cancel').inV().hasLabel('orders').as('b', 'a').select('a', 'b')"
"帮我查询名为少年闰土的book,以及与其有关的author,并返回少年闰土的price和这些author的gender","g.V().hasLabel('book').has('name', '少年闰土').as('a').bothE().otherV().hasLabel('author').as('b').select('a', 'b').by('price').by('gender')"
"请帮我找出用户孙思思喜欢的帖子,以及发布这些帖子的用户, 令帖子的薪资等于用户的名字的和,令用户的id等于帖子的名字的求和值, 返回用户(a)的名字,帖子(b)的创建时间,用户(c)的薪资","g.V().has('user', 'name', '孙思思').as('a').outE('likes').inV().hasLabel('post').as('b').inE('publish').outV().hasLabel('user').as('c').select('a', 'b', 'c').by('name').by('createTime').by(__.select('c').values('name').sum()).project('a_name', 'b_createTime', 'c_salary').by(select('a')).by(select('b')).by(select('c'))"
"使用列为peopleNumber,value,id, 数据为(97874,932,92),(99637,131,21),(39789,273,73),(35522,340,34)的子查询作为输入表, 源点的peopleNumber等于输入表peopleNumber,给出与国家中国和越南都存在country_contain_city关系的点","g.withSideEffect('p', [[97874,932,92],[99637,131,21],[39789,273,73],[35522,340,34]]).V().hasLabel('country').as('a').where(and(__.select('a').values('peopleNumber').is(within(select('p').unfold().limit(1))), __.select('a').has('name', '中国'))).outE('country_contain_city').inV().as('b').select('a').bothE('country_contain_city').where(inV().hasLabel('country').has('name', '越南')).select('b').dedup()"
"根据身高,年龄分组,计算id除92的个数","g.V().hasLabel('a').group().by(union(values('height'), values('age')).fold()).by(count(local).by(values('id').math('/ 92')))"
"输入表的列为weight,srcId,f1, 数据为(169.56,104,true), 以属性weight作为相等条件,返回与city深圳有city_contain_university关系的3跳的环","g.withSideEffect('p', [['weight':169.56, 'srcId':104, 'f1':true]]).V().hasLabel('city').has('weight', 169.56).has('name', '深圳').as('a').repeat(bothE('city_contain_university').otherV().simplePath()).times(2).where(loops().is(2)).where(eq('a')).select('a').project('a.id', 'b_id').by(values('id')).by(select('a').values('id'))"
"找出全部源点类型是仓库,目标点类型是用户,类型是合并请求的边",g.V().hasLabel('repository').outE('pullRequest').as('e').inV().hasLabel('user').select('e')
id除id对50取余的平均值,g.V().as('a').select('a').by(values('id').as('id1').select('id1').math('_ / _').by().by().math('_ % 50').math('_ / 1').mean())
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));返回所有源点类型是city,边类型是city_contain_company的边,返回这些边的f0对698取余的平均值,和f0加852乘f0减992减74的求和值","g.V().hasLabel('city').outE('city_contain_company').project('avg_result', 'sum_result').by(__.values('f0').math('_ % 698').mean()).by(__.values('f0').math('(_ + 852) * _ - 992 - 74').sum())"
"给出person的三角的环,边标签为commits, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('commits').inV().as('b').outE('commits').inV().as('c').where(__.outE('commits').inV().as('a')).select('a', 'b', 'c').by(id()).by('id').by('id')"
"查找地址为A座的部门拥有的医生的名称,以及这些医生 创造的处方的名称","g.V().hasLabel('department').has('address', 'A座').out('has').hasLabel('doctor').as('b').out('creates').hasLabel('prescription').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 找出徐强医生的伴侣的朋友,"g.V().has('doctor', 'name', '徐强').out('partner').out('relation').out('friend')"
"查找和作家点有认识关系的作家节点,且边满足条件源点id等于7,目标作家节点满足条件薪资小于8751","g.V().hasLabel('author').has('salary', lt(8751)).where(__.in('knows').hasLabel('author').has('srcId', 7))"
"返回全部名为吴梅的点的,身高不是180的同事,返回这些同事的年龄,和边的目标点id","g.V().has('name', '吴梅').outE('colleague').as('e').inV().has('height', neq(180)).as('b').select('b', 'e').by('age').by('targetId')"
 包含浙江大学的城市。,"g.V().hasLabel('university').has('name', '浙江大学').inE('contain').outV().hasLabel('city')"
查找所有与处方Prescription_303有关系的医生的年龄,"g.V().hasLabel('prescription').has('name', 'Prescription_303').bothE().otherV().hasLabel('doctor').values('age')"
"根据name分组,计算peopleNumber减560的平均值",g.V().hasLabel('a').group().by('name').by(values('peopleNumber').math('_ - 560').mean())
"给出person周若涵likes的comment, 令person的gender等于person的height加172的平均值, 返回person的salary, comment的createTime","g.V().hasLabel('person').has('name', '周若涵').as('a').outE('likes').as('e').inV().hasLabel('comment').as('b').select('a', 'b').by(project('salary', 'gender').by('salary').by(__.values('height').fold().unfold().sum().by(__.constant(172).sum()).mean())).by('createTime')"
请帮我找出所有名为韩强的节点喜欢的仓库,"g.V().has('name', '韩强').outE('likes').inV().hasLabel('repository')"
"查找和prescription Prescription_318有关系的medicine或patient或prescription,返回这些点的name","g.V().has('prescription', 'name', 'Prescription_318').bothE().otherV().hasLabel(within('medicine', 'patient', 'prescription')).values('name')"
"查询所有源点标签等于公司,目标点标签等于贷款,标签等于账号或公司的边","g.V().hasLabel('company').outE('account', 'company').as('e').inV().hasLabel('loan').select('e')"
"输入表的列为name,weight,id, 数据为('放射科',497,38), 源点的name等于输入表name,请帮我查找名为马国强的点accept的prescription","g.withSideEffect('p', [['name': '放射科', 'weight': 497, 'id': 38]]).V().has('name', '马国强').outE('patient_accept_prescription').inV().hasLabel('prescription')"
"帮我查询id为62的person有关的person的恋人, 再帮我查询和person有关系的恋人","g.V().has('person', 'id', 62).as('a').bothE().otherV().hasLabel('person').as('b').both().hasLabel('person').as('c').select('b').bothE('lover').otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
查询与Comment_199有likes关系的所有person,"g.V().hasLabel('comment').has('name', 'Comment_199').inE('likes').outV().hasLabel('person')"
 帖子源点和标签目标点之间拥有边。,g.V().hasLabel('post').outE('has').as('e').inV().hasLabel('tag').select('e')
"给出源点id小于55,目标点id为62,且类型为拥有的边","g.E().hasLabel('has').where(and(__.outV().has('id', lt(55)), __.inV().has('id', 62)))"
"请帮我找出和类型是买家的点有咨询关系的卖家,并且和这些卖家有回答关系的买家,并且和这些买家有取消关系的订单",g.V().hasLabel('buyer').as('a').outE('consult').as('e').inV().hasLabel('seller').as('b').outE('ask').as('e2').inV().hasLabel('buyer').as('c').outE('cancel').as('e3').inV().hasLabel('orders').as('d').select('d')
"查找与person何伟有关,且与软件Geaflow有关系的软件节点","g.V().has('person', 'name', '何伟').bothE('commits').otherV().hasLabel('software').bothE('uses').otherV().has('software', 'name', 'Geaflow').select('b')"
"请帮我查找全部id为89的学生关联的课程,和以教关系关联了这些课程的其他教师","g.V().hasLabel('student').has('id', 89).bothE().otherV().hasLabel('course').as('b').inE('teach').otherV().hasLabel('teacher').as('c').select('b', 'c')"
 请找出教师或相关者的相关者。,"g.V().hasLabel('teacher').outE('relation').inV().range(1, 2).dedup()"
 查询包含'person'标签的所有点，按身高升序排序。,"g.V().hasLabel('person').order().by('height', asc)"
"返回user creates的pullRequest, 令pullRequest的changeFileNumber的值等于createspullRequest的user的age的平均值, 再查找pullRequest belong的repository","g.V().hasLabel('user').as('a').outE('creates').as('e').inV().hasLabel('pullRequest').as('b').sideEffect(__.select('b').aggregate('pullRequests')).select('b').as('b').inE('creates').as('e2').outV().hasLabel('user').as('c').values('age').mean().as('changeFileNumber').select('pullRequests').unfold().as('b').project('changeFileNumber', 'd').by(__.select('changeFileNumber')).by(__.select('b').outE('belong').inV().hasLabel('repository').as('d').select('d'))"
"请帮我找出喜欢书计算机网络的读者,和这些读者喜欢的书","g.V().has('book', 'name', '计算机网络').in('likes').as('b').out('likes').as('c').select('b', 'c')"
"给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出和买家Alice有buyer_look_goods关系的商品,再请帮我找出以buyer_cancel_orders关系关联了Alice的订单","g.V().hasLabel('buyer').has('name', 'Alice').as('a').outE('buyer_look_goods').inV().hasLabel('goods').as('b').select('a').inE('buyer_cancel_orders').outV().hasLabel('orders').as('c').select('a', 'b', 'c')"
帮我查询id为39的person的lover，再帮我查询与person相关的parent,"g.V().has('person', 'id', '39').as('a').bothE().otherV().hasLabel('person').as('b').outE('lover').inV().as('c').select('b').outE('parent').inV().as('d').select('a', 'b', 'c', 'd')"
找出与韩思琪和喜剧相关的电影节点,"g.V().has('person', 'name', '韩思琪').outE('watch').inV().hasLabel('film').as('b').inE('has').outV().has('tag', 'name', '喜剧').select('b')"
"用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出77个账号TheShy和Faker,共同的相关者","g.V().has('account', 'name', 'TheShy').outE('relation').inV().as('b').inE('relation').outV().has('account', 'name', 'Faker').select('b').limit(77)"
"查找与forum天涯论坛有关,且与post Post_139有关系的user节点","g.V().has('forum', 'name', '天涯论坛').bothE('contain').bothV().hasLabel('user').as('b').bothE('likes').bothV().has('post', 'name', 'Post_139').select('b')"
"找出从城市伦敦出发,经过标签等于属于的边,走1到3度到达的国家点","g.V().hasLabel('city').has('name', '伦敦').outE('belong').inV().hasLabel('country').range(1, 3).dedup()"
"输入表的列为height,name,gender, 数据为(190,'赵伟','male'),(171,'黄宏','famale'),(155,'黄科','famale'), 以属性gender作为相等条件,请帮我找出从doctor马伟出发,经过label为doctor_diagnose_patient的边,走2跳到达的patient点","g.inject([['height':190,'name':'赵伟','gender':'male'],['height':171,'name':'黄宏','gender':'famale'],['height':155,'name':'黄科','gender':'famale']]).as('p').V().hasLabel('doctor').has('name','马伟').where(__.as('d').select('p').unfold().where(__.select('gender').as('d_gender').select('d').values('gender').where(eq('d_gender')))).repeat(__.out('doctor_diagnose_patient')).times(2).hasLabel('patient')"
帮我查询全部名为Faker的节点转账的贷款或账号,"g.V().has('name', 'Faker').outE('transfer').inV().hasLabel(within('loan', 'account'))"
获取订单号为109的订单,"g.V().hasLabel('orders').has('name', 'Order_109')"
"请帮我找出与部门传染部存在拥有关系,且与处方Prescription_255存在创造关系的医生节点，返回这些医生的id,身高,薪资,及部门传染部的权重,及处方Prescription_255的创建时间","g.V().has('department', 'name', '传染部').as('a').out('has').hasLabel('doctor').as('b').in('creates').has('prescription', 'name', 'Prescription_255').as('c').select('a', 'b', 'c').by('weight').by(values('id', 'height', 'salary')).by('createTime')"
 返回订单名Order_287的点的ID和值。,"g.V().hasLabel('orders').has('name', 'Order_287').project('a.id', 'a.value').by('id').by('value')"
"请帮我查找id为27的标签有关的评论的伙伴, 再请帮我查找和评论有关系的朋友","g.V().has('tag', 'id', 27).as('a').bothE().otherV().hasLabel('comment').as('b').bothE('partner').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
"找出所有用户以身高分组的身高, 根据身高降序排序","g.V().hasLabel('user').group().by('height').order(local).by(keys, desc).select(keys)"
"帮我查询名为人人影城的点上映的所有电影,并对这些电影的价值进行求和","g.V().has('name', '人人影城').outE('releases').inV().hasLabel('film').values('value').sum()"
"返回全部源点标签为person,目标点标签为person,标签为person的边",g.V().hasLabel('person').outE('person').as('e').inV().hasLabel('person').select('e')
 找出Comment_488所属的电影，然后找出创建Comment_488的人，一起返回。,"g.V().has('name', 'Comment_488').as('a').outE('belong').inV().hasLabel('film').as('b').select('a').inE('creates').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"返回所有名为王国强的点的,年龄在22到29之间的相关者,返回这些相关者的身高,和边的目标点id,源点id","g.V().has('name', '王国强').outE('relation').as('e').inV().has('age', between(22, 29)).as('b').select('b', 'e').by('height').by(values('targetId', 'srcId'))"
获取所有与doctor有关的prescription节点，其中prescription节点的weight不大于62。然后返回这些节点的id除以18后的结果减去265，以及这些节点id的最小值除以98的结果。,"g.V().hasLabel('doctor').outE().inV().hasLabel('prescription').has('weight', lte(62)).project('expr1', 'expr2').by(values('id').math('_ / 18').math('_ - 265')).by(values('id').min().math('_ / 98'))"
"以339作为请求点id, 以属性id作为相等条件,返回被student韩科selects的course","g.withSideEffect('p', [339]).V().hasLabel('course').has('id', select('p')).as('a').in('student_selects_course').hasLabel('student').has('name', '韩科').as('b').select('a', 'b')"
"查找全部id为65的post关联的tag,和以has关系关联了这些tag的其他post","g.V().hasLabel('post').has('id', 65).as('a').bothE().as('e').otherV().hasLabel('tag').as('b').inE('has').as('e2').otherV().hasLabel('post').as('c').select('b', 'c')"
"帮我查询类型是标签的点,返回165个",g.V().hasLabel('tag').limit(165)
查询被Zeus账号转账过的所有账号，以及这些账号被其他账号转账的次数,"g.V().has('account', 'name', 'Zeus').outE('transfer').inV().as('b').inE('transfer').outV().where(neq('a')).dedup().count()"
查询仓库的3跳以内的环,"g.V().hasLabel('repository').as('a').repeat(both().simplePath()).times(2).where(loops().is(lt(3))).where(__.both().where(eq('a'))).dedup().project('a.id', 'b_id').by(select('a').id()).by(id())"
"请帮我找出24个名为马雪的点relates的标签等于person的节点,且其name为徐国强","g.V().has('name', '马雪').outE('relates').inV().hasLabel('person').has('name', '徐国强').limit(24)"
"帮我查询18个论坛中国军事论坛和天涯论坛,共同的朋友","g.V().has('forum', 'name', '中国军事论坛').out('friend').as('b').in('friend').has('forum', 'name', '天涯论坛').select('b').limit(18)"
"查询8个名为变形金刚的点拥有的类型是标签的节点,且节点id的平均值小于等于88","g.V().has('name', '变形金刚').outE('has').inV().hasLabel('tag').group().by().by(values('id').mean()).unfold().filter(select(values).is(lte(88))).select(keys).limit(8)"
查询与医生ID为36的处方相关的医生，然后查询这些医生的合作伙伴。,"g.V().has('prescription', 'id', '36').as('a').bothE().bothV().hasLabel('doctor').as('b').bothE('relation').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
帮我找出与王伟有关联的电影，这些电影他都看过。然后再找出所有王伟喜欢的评论,"g.V().has('person', 'name', '王伟').as('a').outE('watch').inV().hasLabel('film').as('b').select('a').inE('likes').outV().hasLabel('comment').as('c').select('a', 'b', 'c')"
"使用这个图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));返回类型为city_contain_company,并且满足条件srcId不是199的边","g.E().hasLabel('city_contain_company').where(__.not(__.has('srcId', 199)))"
"帮我查询和学生黄若涵有关的课程,称为X,再帮我查询和这个X有关联的其他部门,以及和X有关联的教师","g.V().has('student', 'name', '黄若涵').as('a').bothE().as('e').otherV().hasLabel('course').as('b').bothE().as('e2').otherV().hasLabel('department').as('c').select('b').bothE().as('e3').otherV().hasLabel('teacher').as('d').select('a', 'b', 'c', 'd')"
"请帮我查找账号转账的账号,返回其源点的id除60的求和值,以及目标点的id乘14的值","g.V().hasLabel('account').as('a').outE('transfer').as('e').inV().hasLabel('account').as('b').select('a', 'b').by(id()).project('sum_a_id_div_60', 'b_id_times_14').by(select('a').math('_ / 60').sum()).by(select('b').math('_ * 14'))"
请帮我查找论坛CSDN包含的帖子节点拥有的标签,"g.V().hasLabel('forum').has('name', 'CSDN').out('contain').hasLabel('post').out('has').hasLabel('tag')"
根据给定的人名和标签（person），获取这些人的性别和身高。,"g.V().hasLabel('person').has('name', '郑梅').project('gender', 'height').by(values('gender')).by(values('height'))"
"请帮我查找学生的三角的环,边类型为选择, 并返回这些点的id","g.V().hasLabel('student').as('a').outE('selects').inV().as('b').outE('selects').inV().as('c').outE('selects').inV().where(eq('a')).select('a', 'b', 'c').by().by(id).by(id).project('a', 'b_id', 'c_id').by().by(select('b').id()).by(select('c').id())"
"请帮我找出类型是公司的点,返回49个",g.V().hasLabel('company').limit(49)
"调用pageRank函数,以'zb', 98作为输入,返回id, value","g.call('pageRank').with('graphName', 'zb').with('maxIterations', 98).project('id', 'value').by(__.select('vertex').id()).by(__.select('rank'))"
请帮我找出所有与person马轩有关系的person的名字,"g.V().hasLabel('person').has('name', '马轩').bothE().otherV().hasLabel('person').values('name')"
"请帮我找出全部大学以等级,id,名字分组的价值, 根据价值从小到大排序","g.V().hasLabel('university').group().by(values('level', 'id', 'name')).by(values('value').fold()).order(local).by(values, asc)"
"找出123个名为Order_473的点包含的label为商品的节点,且节点名字不等于书且价格是1197.84","g.V().has('name', 'Order_473').outE('contain').inV().hasLabel('goods').has('name', neq('书')).has('price', 1197.84).limit(123)"
"查找和类型是论坛的点有包含关系的用户,并且和这些用户有喜欢关系的帖子,并且和这些帖子有拥有关系的标签",g.V().hasLabel('forum').as('a').out('contain').hasLabel('user').as('b').out('likes').hasLabel('post').as('c').out('has').hasLabel('tag').as('d').select('d')
"查询名为黄建聪的点购买的所有软件,并对这些软件的id进行求和","g.V().has('name', '黄建聪').outE('buy').inV().hasLabel('software').values('id').sum()"
"帮我查询与公司蚂蚁集团存在创造关系,且与软件Geaflow存在使用关系的软件节点，返回这些软件的id,是否开源,及公司蚂蚁集团的价值,及软件Geaflow的星数","g.V().hasLabel('company').has('name', '蚂蚁集团').as('a').outE('creates').inV().hasLabel('software').as('b').inE('uses').outV().hasLabel('software').has('name', 'Geaflow').as('c').select('a', 'b', 'c').by('value').by('id').by('stars')"
"根据名字分组,计算面积加78015的值",g.V().hasLabel('a').group().by('name').by(values('area').math('_ + 78015'))
查询所有label为person的点,g.V().hasLabel('person')
"请帮我查找所有源点标签等于公司,目标点标签等于贷款,标签等于账号或公司或贷款的边","g.V().hasLabel('company').outE('account', 'company', 'loan').as('e').inV().hasLabel('loan').select('e')"
"用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出前150个薪资不为空且身高不为空,或id小于31的卖家","g.V().hasLabel('seller').or(and(has('salary', neq(null)), has('height', neq(null))), has('id', lt(31))).limit(150)"
帮我查询47个与滴滴和谷歌都存在关系的公司或person或贷款节点,"g.V().has('name', '滴滴').outE().inV().hasLabel(within('company', 'person', 'loan')).as('b').inE().outV().has('name', '谷歌').select('b').limit(47)"
"请帮我找出名为郑国强的点apply的所有loan,并对这些loan的id进行求和","g.V().has('name', '郑国强').outE('apply').inV().hasLabel('loan').values('id').sum()"
找出所有和person吴红之间有提交关系的软件,"g.V().hasLabel('person').has('name', '吴红').outE('commits').inV().hasLabel('software')"
找出person的1跳的环,"g.V().hasLabel('person').as('a').bothE().bothV().where(eq('a')).as('b').select('a', 'b').by('id').by('id').select(values).project('a.id', 'b_id').by(select('a')).by(select('b'))"
帮我找找周强读过的或者他伙伴读过的书,"g.V().has('reader', 'name', '周强').as('a').out('partner').as('b').hasLabel('book').select('b')"
 查询的医生和这些患者之间的诊断关系，以及与这些患者有关联的其他医生的患者。,"g.V().hasLabel('doctor').has('id', '5').bothE().otherV().hasLabel('patient').as('b').inE('diagnose').otherV().hasLabel('doctor').as('c').select('b', 'c')"
查找被用户郑科创造的事项,"g.V().hasLabel('user').has('name', '郑科').outE('creates').inV().hasLabel('issue').as('b', 'a').select('a', 'b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出和医生周梅有doctor_diagnose_patient关系的病人,再请帮我找出以doctor_creates_prescription关系关联了周梅的处方","g.V().hasLabel('doctor').has('name', '周梅').as('a').outE('doctor_diagnose_patient').inV().hasLabel('patient').as('b').select('a').inE('doctor_creates_prescription').outV().hasLabel('prescription').as('c').select('a', 'b', 'c')"
"给出用户王思琪喜欢的帖子,以及包含这些帖子的论坛","g.V().hasLabel('user').has('name', '王思琪').outE('likes').inV().hasLabel('post').as('b').inE('contain').outV().hasLabel('forum').as('c').select('b', 'c')"
给出前165个salary小于等于4005且name不等于王强的person,"g.V().hasLabel('person').has('salary', lte(4005)).has('name', neq('王强')).limit(165)"
"使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查询名为张思思的点选择的课程","g.V().has('student', 'name', '张思思').out('student_selects_course').hasLabel('course')"
"给出has student Tom的department,和这些department has的teacher","g.V().hasLabel('student').has('name', 'Tom').as('a').inE('has').outV().hasLabel('department').as('b').outE('has').inV().hasLabel('teacher').as('c').select('b', 'c')"
给出全部与买家马若涵有关系的买家的id,"g.V().hasLabel('buyer').has('name', '马若涵').bothE().otherV().hasLabel('buyer').id()"
 找出孙强提交的软件。,"g.V().hasLabel('person').has('name', '孙强').as('b').outE('commits').as('e').inV().hasLabel('software').as('a').select('a', 'b')"
请帮我找出所有从买家节点出发，到商品节点结束，并且标签为'查看'的边。,g.V().hasLabel('buyer').outE('look').hasLabel('look').inV().hasLabel('goods').select('e')
"查询id为122的user publish的post, 并将post有关的tag的id的数量赋值给post的id, 接着查询post的id小于122的post has的tag","g.V().has('user', 'id', 122).out('publish').hasLabel('post').as('b').project('b.id', 'd').by(__.coalesce(__.values('id'), __.constant(null))).by(__.where(__.values('id').is(lt(122))).out('has').hasLabel('tag').fold()).select('b.id', 'd')"
查询论坛知网包含的用户节点发布的帖子,"g.V().hasLabel('forum').has('name', '知网').out('contain').hasLabel('user').out('publish').hasLabel('post')"
"帮我查询height小于159,name不等于张思思的author knows的author的名称,以及这些author knows的author的名称","g.V().hasLabel('author').has('height', lt(159)).has('name', neq('张思思')).outE('knows').inV().hasLabel('author').as('b').outE('knows').inV().hasLabel('author').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 请帮我找出95个与类型为publisher的实体有publish关系，并且这些实体也引用了其他书籍的书籍。,g.V().hasLabel('publisher').as('a').outE('publish').as('e').inV().hasLabel('book').as('b').outE('refers').as('e2').inV().hasLabel('book').as('c').select('c').limit(95)
"帮我查询全部与杜建国存在认识关系的person,person与person存在支付关系的点,返回这些点的薪资","g.V().has('name', '杜建国').out('knows').hasLabel('person').out('pay').hasLabel('person').values('salary')"
"帮我查询与person张宏有关,且与person李强有关系的person节点","g.V().has('person', 'name', '张宏').bothE('likes').otherV().hasLabel('person').bothE('knows').otherV().has('person', 'name', '李强').select('b')"
"请帮我找出全部源点创建时间为2026年03月24日,目标点语言是German,id不是65,或创建时间为2012年11月26日,且类型为包含的边","g.V().has('createTime', '2026-03-24').outE('contain').as('e').inV().where(or(and(has('lang', 'German'), has('id', neq(65))), has('createTime', '2012-11-26'))).select('e')"
"请帮我找出和forum有关联的user节点,并根据其height,salary,name分组,返回height,salary,name,以及height加157的值","g.V().hasLabel('forum').bothE('contain').bothV().hasLabel('user').dedup().group().by(project('height', 'salary', 'name').by(values('height')).by(values('salary')).by(values('name'))).unfold().project('b.height', 'b.salary', 'b.name', 'b.height + 157').by(select(keys).select('height')).by(select(keys).select('salary')).by(select(keys).select('name')).by(select(keys).select('height').math('_ + 157'))"
"使用列为createTime,id,name, 数据为(2005-10-14,52,'呐喊')的子查询作为输入表, 以属性id作为相等条件,给出名为马国强的读者,以及与其有关的读者,并返回马国强的名字和这些读者的id","g.withSideEffect('p', [['createTime':'2005-10-14', 'id':52, 'name':'呐喊']]).V().hasLabel('reader').has('id', __.select('p').unfold().select('id')).has('name', '马国强').as('a').bothE().otherV().hasLabel('reader').as('b').select('a', 'b').by('name').by('id')"
"给出名为何若涵的点publish的全部post,并对这些post的lang进行求和","g.V().has('name', '何若涵').outE('publish').inV().hasLabel('post').values('lang').sum()"
"找出和person马若涵有关的贷款,称为X,再找出和这个X有关联的其他账号,以及和X有关联的公司","g.V().has('person', 'name', '马若涵').as('a').bothE().otherV().hasLabel('loan').as('b').bothE().otherV().hasLabel('account').as('c').select('b').bothE().otherV().hasLabel('company').as('d').select('a', 'b', 'c', 'd')"
 找出两个帖子Post_474和Post_112的共同相关者节点。,"g.V().hasLabel('post').has('name', 'Post_474').outE('relation').inV().as('b').inE('relation').outV().hasLabel('post').has('name', 'Post_112').select('b').values('name')"
"帮我查询和名为Post_261的post有friend关系,或有friend的friend关系的tag","g.V().hasLabel('post').has('name', 'Post_261').out('friend').hasLabel('tag').union(identity(), out('friend').hasLabel('tag')).dedup()"
" 请帮我查找标签为person,名称为黄若涵的地点，并返回这些地点的性别。","g.V().hasLabel('person').has('name', '黄若涵').values('gender')"
"返回所有源点满足条件age不是38,height大于等于158,id小于等于1200,目标点满足条件courseHour是22,且标签为teach的边","g.V().has('age', neq(38)).has('height', gte(158)).has('id', lte(1200)).outE('teach').as('e').inV().has('courseHour', 22).select('e')"
 查询名为吴月和李建国的人中，公共的伙伴节点有哪些？,"g.V().has('person', 'name', '吴月').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '李建国').select('b').values('name')"
请帮我找出用户喜欢的、与他们相关的55个帖子，以及这些帖子所涉及的所有标签,g.V().hasLabel('user').as('a').outE('likes').as('e').inV().hasLabel('post').as('b').outE('has').as('e2').inV().hasLabel('tag').as('c').select('c').limit(55)
给出person的3跳的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(3).where(loops().is(3)).where(eq('a')).project('a.id', 'b_id').by(select('a').id()).by(id())"
 哪两家公司存在雇佣关系？美团和Bilibili。,"g.V().has('company', 'name', '美团').outE('employee').inV().as('b').inE('employee').outV().has('company', 'name', 'Bilibili').select('b')"
"输入表的列为age,gender,id, 数据为(86,'male',93),(56,'male',4),(72,'male',87),(2,'male',92), 源点的gender等于输入表gender,帮我查询和loan defaultName之间有loan_deposit_account关系的account","g.inject([['age':86,'gender':'male','id':93],['age':56,'gender':'male','id':4],['age':72,'gender':'male','id':87],['age':2,'gender':'male','id':92]]).as('p').unfold().as('p_row').V().hasLabel('loan').has('gender',select('p_row').select('gender')).has('name','defaultName').outE('loan_deposit_account').inV().hasLabel('account').dedup()"
请帮我查找全部和卖家黄月之间有拥有关系的商品,"g.V().hasLabel('seller').has('name', '黄月').outE('has').inV().hasLabel('goods')"
 找到与文学院相关的部门，然后查找该部门的学生，返回它们。,"g.V().has('department', 'name', '文学院').as('a').bothE().otherV().hasLabel('department').as('b').select('a').outE('has').inV().hasLabel('student').as('c').select('a', 'b', 'c')"
"查找与名为Order_207和Order_216的点共同包含的,标签等于商品的节点","g.V().has('name', 'Order_207').out('contain').hasLabel('goods').as('b').in('contain').has('name', 'Order_216').select('b')"
查找与software Spark有uses关系的3跳以内的环,"g.V().has('software', 'name', 'Spark').as('a').repeat(bothE('uses').otherV().simplePath()).times(2).emit().as('b').where(__.as('b').out().as('a')).select('a', 'b').by('id').by('id')"
"输入请求点id的列表82, 源点的id等于输入表id,帮我查询与person李强和kate都存在person_likes_person关系的点","g.withSideEffect('p', [82]).V().hasLabel('person').has('id', within('p')).has('name', '李强').outE('person_likes_person').inV().as('b').inE('person_likes_person').outV().hasLabel('person').has('name', 'kate').select('b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询吴建国的点relates的person,然后查询吴建国被relates的person,一起返回","g.V().has('person', 'name', '吴建国').as('a').bothE('relates').otherV().hasLabel('person').as('b', 'c').select('a', 'b', 'c')"
"返回label为university,名为重庆大学的点,返回这些点的name","g.V().hasLabel('university').has('name', '重庆大学').values('name')"
"帮我查询仓库JavaGuid拥有的合并请求, 令合并请求的创建时间等于合并请求的名字, 返回仓库的语言, 合并请求的创建时间","g.V().hasLabel('repository').has('name', 'JavaGuid').as('a').outE('has').inV().hasLabel('pullRequest').as('b').project('a.lang', 'b.createTime').by(select('a').values('lang')).by(select('b').values('name'))"
 找出周思琪和韩雪的共同朋友，共有115个。,"g.V().hasLabel('user').has('name', '周思琪').outE('friend').inV().as('b').inE('friend').outV().hasLabel('user').has('name', '韩雪').select('b').limit(115)"
"找出和类型为大学的点有拥有关系的部门,以及和这些部门有拥有关系的学生,以及和这些学生有选择关系的课程",g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('student').out('selects').hasLabel('course')
查询119个与赵建聪和赵月都存在关系的编辑或读者节点,"g.V().has('name', '赵建聪').as('a').outE().as('e').inV().hasLabel(within('publisher', 'reader')).as('b').inE().as('e2').outV().has('name', '赵月').as('c').select('b').limit(119)"
查找62个与呐喊和百年孤独都存在关系的作家或编辑节点,"g.V().has('name', '呐喊').bothE().otherV().hasLabel(within('author', 'publisher')).where(__.bothE().otherV().has('name', '百年孤独')).limit(62)"
"使用列为address,weight,name, 数据为('B座',66,'放射科'),('西区',394,'眼科')的子查询作为输入表, 源点的name等于输入表name,给出53个名为眼科的点has的label为doctor的节点,且其age大于等于7或name等于韩轩","g.withSideEffect('p', [['B座', 66, '放射科'], ['西区', 394, '眼科']]).V().as('a').where(and(__.select('a').values('name').is(within(__.select('p').unfold().tail(1))), __.select('a').values('name').is(eq('眼科')))).outE('department_has_doctor').inV().hasLabel('doctor').where(or(__.values('age').is(gte(7)), __.values('name').is(eq('韩轩')))).limit(53)"
 请帮我找出杜宏写的书，以及与杜宏有合著关系的书籍。,"g.V().has('author', 'name', '杜宏').as('a').out('write').as('b').select('a').in('write').as('c').select('a', 'b', 'c')"
 查询所有由王轩发布的帖子，并筛选出标签相关的点，然后返回这些点的价值。,"g.V().has('name', '王轩').outE('publish').inV().hasLabel('post').outE('has').inV().hasLabel('tag').values('value')"
"使用这个图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));给出大学的三角的环,边标签为university_belong_city, 并返回这些点的id","g.V().hasLabel('university').as('a').outE('university_belong_city').inV().as('b').outE('university_belong_city').inV().as('c').where('a', eq('c')).select('a', 'b', 'c').by().by(id).by(id).project('a', 'b_id', 'c_id').by().by(select('b')).by(select('c'))"
 查询所有与吴若涵有同事关系的个人，找出这些个人之间的家庭关系，并返回这些家庭关系的性别。,"g.V().has('name', '吴若涵').out('colleague').hasLabel('person').out('family').hasLabel('person').values('gender')"
"查找104个和label为用户的点有创造关系的合并请求,且和这些合并请求有属于关系的仓库",g.V().hasLabel('user').as('a').outE('creates').as('e').inV().hasLabel('pullRequest').as('b').outE('belong').as('e2').inV().hasLabel('repository').as('c').select('c').limit(104)
"查询名为何思琪的点喜欢的评论,并对这些评论的id进行求和","g.V().has('name', '何思琪').outE('likes').inV().hasLabel('comment').values('id').sum()"
查找所有和city武汉有2跳关系的university,"g.V().has('city', 'name', '武汉').repeat(bothE().otherV().simplePath()).times(2).hasLabel('university').dedup()"
请帮我查找大学四川大学拥有的部门节点拥有的教师,"g.V().hasLabel('university').has('name', '四川大学').out('has').hasLabel('department').out('has').hasLabel('teacher')"
"找出医生创造的处方,返回其源点的id对46取余对58取余的值,以及目标点的权重加528乘88的值","g.V().hasLabel('doctor').as('a').outE('creates').as('e').inV().hasLabel('prescription').as('b').select('a', 'b').by(values('id').is(neq(null))).by(values('weight').is(neq(null))).project('a_id_mod46_mod58', 'b_weight_plus528_times88').by(select('a').values('id').math('_ % 46').math('_ % 58')).by(select('b').values('weight').math('_ + 528').math('_ * 88'))"
"请帮我找出全部源点标签为课程,目标点标签为部门,标签为大学或课程或部门的边","g.V().hasLabel('course').outE('university', 'course', 'department').where(__.inV().hasLabel('department'))"
"查询所有课程以价值分组的学分, 根据学分升序排序","g.V().hasLabel('course').group().by('value').by(values('credit').fold()).order(local).by(values, asc)"
id对id取余的数量,g.V().hasLabel('a').project('mod').by(values('id').math('_ % _')).count()
返回与作家徐思思有撰写关系的3度以内的环,"g.V().has('author', 'name', '徐思思').as('a').repeat(bothE('write').otherV().simplePath()).times(2).where(cyclicPath()).path().by('id').by('id')"
"返回和person徐轩有friend关系的person,再返回以lover关系关联了徐轩的person","g.V().hasLabel('person').has('name', '徐轩').as('a').bothE('friend').otherV().hasLabel('person').as('b').select('a').bothE('lover').otherV().hasLabel('person').as('c').select('a', 'b', 'c')"
"输入表的列为height,name,salary, 数据为(187,'孙科',2324),(177,'郑建聪',1412), 源点的salary等于输入表salary,返回全部杜伟的点relates的person,然后返回杜伟被knows的person,一起返回","g.inject([['height':187,'name':'孙科','salary':2324],['height':177,'name':'郑建聪','salary':1412]]).as('p').unfold().as('p_row').select('p_row').by().project('height','name','salary').by(select('p_row').select('height')).by(select('p_row').select('name')).by(select('p_row').select('salary')).as('p').V().has('salary', within(select('p').select('salary'))).has('name','杜伟').as('a').outE('relates').inV().hasLabel('person').as('b').select('a').inE('knows').outV().hasLabel('person').as('c').select('a','b','c')"
 查询悲惨世界这本书的作者和所有知道悲惨世界的点。,"g.V().has('name', '悲惨世界').as('a').outE('knows').inV().hasLabel('book').as('b').select('a').inE('write').outV().hasLabel('author').as('c').select('a', 'b', 'c')"
"查询教师陈思琪教的课程,被其他教师教的数量","g.V().has('teacher', 'name', '陈思琪').as('a').outE('teach').inV().hasLabel('course').as('b').inE('teach').outV().hasLabel('teacher').as('c').where(neq('a')).select('c').count()"
请帮我查一下韩轩这个人，他有多少个人认识。,"g.V().has('person', 'name', '韩轩').outE('pay').inV().hasLabel('person').inE('knows').outV().hasLabel('person').count()"
请帮我找出前37个标签等于撰写的边,g.E().hasLabel('write').limit(37)
请帮我找出142个与徐轩和李若涵都存在关系的商品节点,"g.V().has('name', '徐轩').outE().inV().hasLabel('goods').as('b').inE().outV().has('name', '李若涵').select('b').limit(142)"
找出标签为'城市'且名称包含'重庆'或'武汉'的点的所有共同伙伴。,"g.V().has('city', 'name', '重庆').outE('partner').inV().as('b').inE('partner').outV().has('city', 'name', '武汉').select('b').values('name')"
"查询名为Amily的点的,星数大于等于874,是否开源等于false的相关者,返回这些相关者的id,和边的权重,f0","g.V().has('name', 'Amily').outE('relation').as('e').inV().has('stars', gte(874)).has('openSource', false).project('b.id', 'e.weight', 'e.f0').by(__.id()).by(__.select('e').values('weight')).by(__.select('e').values('f0'))"
"找出和orders有关联的goods节点,并根据其sellerNumber,value,category分组,返回sellerNumber,value,category,以及value除value的值","g.V().hasLabel('orders').bothE('contain').bothV().hasLabel('goods').project('sellerNumber', 'value', 'category', 'value_div_value').by(values('sellerNumber')).by(values('value')).by(values('category')).by(values('value').math('/ value')).group().by(select('sellerNumber', 'value', 'category')).by(select('value_div_value').fold())"
 返回3到53岁或名字为孙月的人的喜欢评论的名称，以及这些评论所属的影片名称。,"g.V().hasLabel('person').or(has('age', between(3, 53)), has('name', '孙月')).outE('likes').inV().hasLabel('comment').as('b').outE('belong').inV().hasLabel('film').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
请帮我查找前151个上次登录时间不等于2020年07月06日的账号,"g.V().hasLabel('account').has('lastLoginTime', neq('2020-07-06')).limit(151)"
 请帮我查询性别不是男性的病人接受的处方和药品名称。,"g.V().hasLabel('patient').has('gender', neq('male')).outE('accept').inV().hasLabel('prescription').as('b').outE('contain').inV().hasLabel('medicine').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"查找全部goods以value分组的sellerNumber, 根据sellerNumber升序排序","g.V().hasLabel('goods').group().by('value').by(values('sellerNumber').fold()).order(local).by(keys, asc)"
请帮我查找3个与Geaflow和Flink都存在关系的software或company节点,"g.V().has('name', 'Geaflow').as('a').outE().as('e').inV().hasLabel(within('software', 'company')).as('b').inE().as('e2').outV().has('name', 'Flink').as('c').select('b').limit(3)"
查找与id为12的课程相关的部门的相关人员，然后查找这些部门的相关人员的朋友。,"g.V().has('course', 'id', '12').as('a').bothE().otherV().hasLabel('department').as('b').outE('relation').inV().as('c').select('b').outE('friend').inV().as('d').select('a', 'b', 'c', 'd')"
"帮我查询person徐建国relates的person,以及relates这些person的person","g.V().has('person', 'name', '徐建国').outE('relates').inV().as('b').inE('relates').outV().as('c').select('b', 'c')"
"帮我查询publish book悲惨世界knows的book,的publisher","g.V().hasLabel('book').has('name', '悲惨世界').as('a').outE('knows').inV().hasLabel('book').as('b').inE('publish').outV().hasLabel('publisher').as('c').select('b', 'c')"
"帮我查询名为浙江大学的department或course或university,以及与其有关的student,并返回浙江大学的level和这些student的gender","g.V().has(label, within('department', 'course', 'university')).has('name', '浙江大学').bothE().otherV().hasLabel('student').project('a_level', 'b_gender').by(select('a').values('level')).by(values('gender'))"
获取与person相关的评论节点，按其id和名称进行分组，并返回id和名称。,"g.V().hasLabel('person').bothE('likes').otherV().hasLabel('comment').group().by(values('id', 'name')).select(keys).unfold().project('b.id', 'b.name').by(select(keys).select('id')).by(select(keys).select('name'))"
"以(3695,29,'周伟'),(9251,95,'郑月'),(1876,73,'周红'),(4070,5,'李轩')作为请求表数据,属性分别为salary,age,name, 以属性salary作为相等条件,查询person Amily喜欢的person,被其他person支付的数量","g.withSideEffect('p', [['salary': 3695, 'age': 29, 'name': '周伟'], ['salary': 9251, 'age': 95, 'name': '郑月'], ['salary': 1876, 'age': 73, 'name': '周红'], ['salary': 4070, 'age': 5, 'name': '李轩']]).V().hasLabel('person').has('name', 'Amily').as('a').where(__.select('a').values('salary').is(within(__.select('p').unfold().values('salary')))).outE('person_likes_person').as('e').inV().hasLabel('person').as('b').inE('person_pay_person').as('e2').outV().hasLabel('person').as('c').select('c').dedup().count()"
"返回和处方Prescription_458有关的处方,再返回和Prescription_458包含的其他药品,返回它们","g.V().has('prescription', 'name', 'Prescription_458').as('a').bothE().otherV().hasLabel('prescription').as('b').select('a').outE('contain').inV().hasLabel('medicine').as('c').select('a', 'b', 'c')"
"查询与名为Zeus和Geaflow123的点共同转账的,类型为账号的节点","g.V().has('name', 'Zeus').outE('transfer').inV().hasLabel('account').as('b').inE('transfer').outV().has('name', 'Geaflow123').select('b')"
"帮我查询和person杜建国有同事关系的person,再帮我查询以恋人关系关联了杜建国的person","g.V().has('person', 'name', '杜建国').as('a').outE('colleague').inV().hasLabel('person').as('b').select('a').inE('lover').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
 查询陈思思和赵国强两个用户共同的朋友节点。,"g.V().has('user', 'name', '陈思思').out('friend').as('b').in('friend').has('user', 'name', '赵国强').select('b').values('name')"
"帮我查询所有字节的点属于的城市,然后帮我查询字节被合作的大学,一起返回","g.V().has('name', '字节').as('a').outE('belong').inV().hasLabel('city').as('b').select('a').inE('cooperate').outV().hasLabel('university').as('c').select('a', 'b', 'c')"
帮我查询公司的3跳的环,"g.V().hasLabel('company').as('a').repeat(both().simplePath()).times(3).where(loops().is(3)).where(eq('a')).dedup().project('a.id', 'b_id').by(select('a').id()).by(id())"
请帮我查找所有与person何梅有关系的person的gender,"g.V().has('person', 'name', '何梅').bothE().otherV().hasLabel('person').values('gender')"
"查询全部与person有关系的公司节点,且公司节点的规格为large,并返回这些公司的id减id的个数,以及公司的value的最大值乘829的平均值","g.V().hasLabel('person').as('a').outE().as('e').inV().hasLabel('company').has('scale', 'large').as('b').select('b').dedup().project('count_id_minus_id', 'avg_max_value_times_829').by(__.values('id').fold().project('id1', 'id2').by(__.unfold()).by(__.unfold()).select(values).math('id1 - id2').count()).by(__.values('value').max().math('_ * 829').mean())"
 查询id为101的患者与医生的关系，再查询与该医生有关系的患者的朋友。,"g.V().hasLabel('patient').has('id', '101').as('a').bothE().as('e').otherV().hasLabel('doctor').as('b').outE('relation').as('e2').inV().as('c').select('b').outE('friend').as('e3').inV().as('d').select('a', 'b', 'c', 'd')"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));返回账号的1度的环","g.V().hasLabel('account').as('a').both().as('b').where(__.select('b').both().where(eq('a'))).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
查询前53个类型是拥有的边,g.E().hasLabel('own').limit(53)
"帮我查询学生周红 选择的课程,返回课程 属于的部门的价值除价值的值","g.V().has('student', 'name', '周红').out('selects').hasLabel('course').out('belong').hasLabel('department').project('result').by(values('value').math('_ / _'))"
"请帮我找出与编辑马建国存在发布关系,且与书少年闰土存在引用关系的书节点，返回这些书的创建时间,价格,id,及编辑马建国的年龄,及书少年闰土的类别","g.V().has('publisher', 'name', '马建国').as('a').outE('publish').inV().hasLabel('book').as('b').inE('refers').outV().has('book', 'name', '少年闰土').as('c').select('a', 'b', 'c').by(values('age')).by(values('createTime', 'price', 'id')).by(values('category'))"
"给出和账号Geaflow123有还款关系的贷款,再给出以还款关系关联了Geaflow123的贷款","g.V().hasLabel('account').has('name', 'Geaflow123').as('a').bothE('repay').otherV().hasLabel('loan').as('b').select('a').bothE('repay').otherV().hasLabel('loan').as('c').select('a', 'b', 'c')"
"查询前91个规格不等于large,价值为空的公司","g.V().hasLabel('company').has('scale', neq('large')).has('value', eq(null)).limit(91)"
"查询和author郑雪有knows关系的author,再查询以write关系关联了郑雪的book","g.V().has('author', 'name', '郑雪').as('a').out('knows').as('b').select('a').in('write').hasLabel('book').as('c').select('a', 'b', 'c')"
"使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出被person李思琪拥有的账号","g.V().hasLabel('person').has('name', '李思琪').as('b').outE('person_own_account').as('e').inV().hasLabel('account').as('a').select('a', 'b')"
查询与教师黄红有教关系的1度的环,"g.V().has('teacher', 'name', '黄红').as('a').outE('teach').inV().as('b').where(__.select('b').out().as('c').where(eq('a')).select('c')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
请帮我找找和郑思思作者以及《百年孤独》这本书相关的作者节点,"g.V().has('author', 'name', '郑思思').bothE('knows').otherV().hasLabel('author').bothE('write').otherV().has('book', 'name', '百年孤独').select('b')"
"请帮我找出peopleNumber为空的country contain的city的名称,以及这些city contain的company的名称","g.V().hasLabel('country').has('peopleNumber', eq(null)).out('contain').hasLabel('city').as('b').out('contain').hasLabel('company').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
找出与腾讯有关的城市，然后列出这些城市与腾讯的关系。,"g.V().hasLabel('company').has('name', '腾讯').as('a').bothE('belong').as('e', 'e2').otherV().hasLabel('city').as('b', 'c').select('a', 'b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出前191个标签等于buyer_look_goods的边",g.E().hasLabel('buyer_look_goods').limit(191)
查询和学生王宏之间有选择关系的课程,"g.V().hasLabel('student').has('name', '王宏').outE('selects').inV().hasLabel('course')"
请帮我找出王思琪和张雪共同的60个合作伙伴。,"g.V().has('author', 'name', '王思琪').outE('partner').inV().as('b').inE('partner').outV().has('author', 'name', '张雪').select('b').limit(60)"
 请问从读者何建聪出发，走3度，喜欢类型的边，到达哪个书点？,"g.V().has('reader', 'name', '何建聪').repeat(outE('likes').inV().hasLabel('book')).times(3).dedup()"
 找出与徐伟有喜欢关系的人和与郑雪有支付关系的人，并返回这两个人的名字。,"g.V().has('person', 'name', '徐伟').as('a').out('likes').as('b').select('a').V().has('person', 'name', '郑雪').as('c').out('pay').as('d').select('a', 'b', 'c', 'd')"
"输入请求点id的列表307,389,431,684,713, 源点的id等于输入表id,计算所有post的wordCount的数量减253除266的值","g.inject([307, 389, 431, 684, 713]).unfold().as('p').V().hasLabel('post').has('id', __.select('p')).values('wordCount').fold().project('result').by(__.math('(sum - 253) / 266'))"
请帮我查找前83个类型为包含的边,g.E().hasLabel('contain').limit(83)
"帮我查询全部doctor以age,salary,id分组的name, 根据name升序排序","g.V().hasLabel('doctor').group().by(values('age', 'salary', 'id').fold()).by(values('name').fold()).order(local).by(keys, asc).select(values).unfold().order().by(asc)"
查找全部与person Tom有关系的person的性别,"g.V().hasLabel('person').has('name', 'Tom').bothE().otherV().hasLabel('person').values('gender')"
找出在某个论坛发过推特的人，他们在其他论坛被提到的次数。,"g.V().hasLabel('forum').has('name', '推特').outE('contain').inV().hasLabel('person').inE('contain').outV().hasLabel('forum').count()"
请帮我查找被医生马国强诊断的病人,"g.V().hasLabel('doctor').has('name', '马国强').outE('diagnose').inV().hasLabel('patient').as('b').select('b').by().as('a').select('a', 'b')"
请帮我找出前172个类型是拥有的边,g.E().hasLabel('has').limit(172)
"请帮我找出所有源点类型是person,目标点类型是person,类型是person的边",g.V().hasLabel('person').outE('person').where(inV().hasLabel('person'))
查询与名为defaultName的贷款有朋友关系或者有朋友的朋友关系的账号,"g.V().hasLabel('loan').has('name', 'defaultName').bothE('friend').bothV().hasLabel('account').dedup()"
查询公司的3跳的环,"g.V().hasLabel('company').as('a').repeat(both().simplePath()).times(3).where(loops().is(3)).where(eq('a')).project('a.id', 'b_id').by(select('a').id()).by(id())"
"请帮我找出标签为创造,且源点id大于等于163的边","g.E().hasLabel('creates').has('srcId', gte(163))"
找出110个与杜强和徐建聪都存在关系的person节点,"g.V().has('name', '杜强').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '徐建聪').select('b').limit(110)"
请帮我找出与重庆大学有关联的部门，以及那些与重庆大学有拥有关系的部门。,"g.V().has('university', 'name', '重庆大学').as('a').outE('has').inV().hasLabel('department').as('b').select('a').inE('has').outV().hasLabel('department').as('c').select('a', 'b', 'c')"
"给出类型是包含,并且满足条件f0为空,目标点id在81到125之间,f0不是859的边","g.E().hasLabel('contain').has('f0', null).has('targetId', between(81, 125)).has('f0', neq(859))"
查找177个与孙若涵和赵若涵都存在关系的商品或卖家节点,"g.V().has('name', '孙若涵').outE().inV().where(__.inE().outV().has('name', '赵若涵')).hasLabel(within('goods', 'seller')).limit(177)"
"找出公司华为创造的软件, 令公司的语言等于软件的id减id的个数, 返回公司的名字, 软件的价值","g.V().has('company', 'name', '华为').as('a').outE('creates').inV().hasLabel('software').as('b').select('a', 'b').by('name').by('value')"
请帮我找出所有与韩红存在喜欢关系的人，以及这些人之间存在的认识关系的节点，并返回这些节点的身高。,"g.V().has('name', '韩红').out('likes').hasLabel('person').out('knows').hasLabel('person').values('height')"
请帮我找一下叫黄宏的编辑,"g.V().has('publisher', 'name', '黄宏')"
 返回从account XXD出发，经过标签为transfer的边，经过1跳或2跳到达的account点。,"g.V().hasLabel('account').has('name', 'XXD').repeat(bothE('transfer').otherV().simplePath()).times(2).emit().hasLabel('account').dedup()"
查找所有类型是person的点,g.V().hasLabel('person')
"输入请求点id的列表190,9,266,111,144, 源点的id等于输入表id,查找名为Prescription_367的prescription,以及与其有关的user,并返回Prescription_367的weight和这些user的id","g.inject([190, 9, 266, 111, 144]).as('p').flatMap(select('p').unfold().as('id')).V().hasLabel('prescription').has('id', P.within(select('id').select('id'))).has('name', 'Prescription_367').as('a').bothE().as('e').otherV().hasLabel('user').as('b').select('a', 'b').by('weight').by('id')"
"使用列为name,age,gender, 数据为('陈科',29,'male'),('黄梅',14,'famale')的子查询作为输入表, 源点的age等于输入表age,帮我查询买家何国强的全部label为相关者的边,并根据目标点id升序排列,返回19个","g.inject([['陈科', 29, 'male'], ['黄梅', 14, 'famale']]).as('p').unfold().as('row').select('row').by(project('name', 'age', 'gender').by(__.limit(local, 1)).by(__.skip(local, 1).limit(local, 1)).by(__.skip(local, 2).limit(local, 1))).V().hasLabel('buyer').has('name', '何国强').where(__.values('age').as('a_age').select('p').unfold().select('age').where(eq('a_age'))).outE('relation').as('e').inV().as('b').order().by(__.select('e').values('targetId'), asc).limit(19).select('b')"
 请问郑月喜欢哪本书？,"g.V().hasLabel('reader').has('name', '郑月').outE('likes').inV().hasLabel('book').outE('knows').inV().hasLabel('book')"
"请帮我找出所有和person点有knows关系的person节点,且边满足条件f1不是false,目标person节点满足条件salary为空","g.V().hasLabel('person').as('a').outE('knows').has('f1', neq(false)).as('e').inV().hasLabel('person').has('salary', eq(null)).as('b').select('b')"
"输入请求点id的列表327,221,891, 以属性id作为相等条件,查询从卖家郑建聪出发,经过标签为seller_has_goods的边,走1度到达的商品点","g.withSideEffect('p', [327, 221, 891]).V().hasLabel('seller').has('id', within('p')).has('name', '郑建聪').outE('seller_has_goods').inV().hasLabel('goods')"
 查询被包含在中国军事论坛中的人。,"g.V().hasLabel('forum').has('name', '中国军事论坛').as('b').outE('contain').as('e').inV().hasLabel('person').as('a').select('a', 'b')"
"请帮我找出与名为孙雪和郑思思的点共同创造的,label为处方的节点","g.V().has('name', '孙雪').outE('creates').inV().hasLabel('prescription').as('b').inE('creates').outV().has('name', '郑思思').select('b')"
找出141个与孙思思和杜宏都存在关系的tag或user节点,"g.V().has('name', '孙思思').outE().inV().hasLabel(within('tag', 'user')).as('b').inE().outV().has('name', '杜宏').select('b').limit(141)"
"请帮我找出22个名为徐思思的点has的标签为goods的节点,且其name等于苹果","g.V().has('name', '徐思思').outE('has').inV().hasLabel('goods').has('name', '苹果').limit(22)"
"返回和cinema点有releases关系的film节点,且边满足条件weight是108.72,目标film节点category是悬疑","g.V().hasLabel('cinema').outE('releases').has('weight', 108.72).inV().hasLabel('film').has('category', '悬疑').dedup()"
 请帮我查询作者ID为106的书籍的引用，以及书籍相关的引用。,"g.V().has('author', 'id', '106').as('a').bothE().bothV().hasLabel('book').as('b').bothE('refers').bothV().as('c').select('b').bothE('refers').bothV().as('d').select('a', 'b', 'c', 'd')"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找名为Kafka的,id不是81,开源不是false的相关者,返回这些相关者的开源,和边的权重,目标点id","g.V().has('name', 'Kafka').outE('relation').as('e').inV().has('id', neq(81)).has('openSource', neq(false)).project('openSource', 'weight', 'targetId').by(values('openSource')).by(select('e').values('weight')).by(id())"
"输入请求点id的列表738, 以属性id作为相等条件,查询和部门皮肤科有关的医生,再查询和皮肤科department_has_doctor的其他医生,返回它们","g.withSideEffect('p', [738]).V().hasLabel('department').has('id', within('p')).has('name', '皮肤科').as('a').bothE().otherV().hasLabel('doctor').as('b').select('a').outE('department_has_doctor').inV().hasLabel('doctor').as('c').select('a', 'b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));查询名为Hive的点uses的software,并对这些点的id进行求和","g.V().has('software', 'name', 'Hive').out('software_uses_software').hasLabel('software').values('id').sum()"
"给出所有与吴国强存在拥有关系的账号,账号与账号存在转账关系的点,返回这些点的价值","g.V().has('name', '吴国强').outE('own').inV().hasLabel('account').outE('transfer').inV().hasLabel('account').values('value')"
"给定图的schema如下:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出person的3度的环","g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(2).where(loops().is(2)).where(__.both().where(eq('a'))).dedup().project('a.id', 'b_id').by(__.select('a').id()).by(id())"
 找出喜欢Post_104的用户。,"g.V().hasLabel('post').has('name', 'Post_104').inE('likes').outV().dedup()"
给出全部与person何科有关系的person的名字,"g.V().has('person', 'name', '何科').bothE().otherV().hasLabel('person').values('name')"
"请帮我找出72个名为李国强的点creates的标签为pullRequest的节点,且节点changeFileNumber大于等于470,createTime不是2009年02月26日","g.V().has('name', '李国强').outE('creates').inV().hasLabel('pullRequest').has('changeFileNumber', gte(470)).has('createTime', neq('2009-02-26')).limit(72)"
"找出被读者喜欢数量大于18的书,记为relationCount,再查询这些书喜欢的作家","g.V().hasLabel('book').as('a').project('node', 'relationCount').by(identity()).by(bothE('likes').hasLabel('reader').count()).select('node').where(select('relationCount').is(gt(18))).outE('likes').hasLabel('author').inV().dedup()"
请帮我查找30个与Post_438和Post_433都存在关系的用户节点,"g.V().has('name', 'Post_438').outE().inV().hasLabel('user').as('b').inE().outV().has('name', 'Post_433').select('b').limit(30)"
找出与周思思和李思思都有关联的171本书。,"g.V().has('name', '周思思').outE().inV().hasLabel('book').as('b').inE().outV().has('name', '李思思').select('b').limit(171)"
"给出id为132的点的名字,年龄","g.V().has('id', 132).project('name', 'age').by('name').by('age')"
"查询32个和标签为合并请求的点有属于关系的仓库,以及和这些仓库有拥有关系的事项",g.V().hasLabel('pullRequest').as('a').out('belong').hasLabel('repository').as('b').out('has').hasLabel('issue').as('c').select('c').limit(32)
请帮我查找李强认识和被关联的所有人，并将他们一起返回。,"g.V().has('name', '李强').as('a').bothE('knows', 'relates').otherV().hasLabel('person').as('b', 'c').select('a', 'b', 'c').by(valueMap(true))"
"返回源点标签为person,边标签为申请,并且满足条件权重为空,f0大于等于556的边","g.V().hasLabel('person').outE('apply').has('weight', null).has('f0', gte(556))"
"输入请求点id的列表388, 源点的id等于输入表id,找出部门文学院的所有类型为朋友的边,并根据f0从小到大排列,返回95个","g.withSideEffect('p', [388]).V().hasLabel('department').has('id', within('p')).has('name', '文学院').outE('friend').order().by('f0', asc).limit(95).inV()"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出全部和person周建国之间有person_pay_person关系的person","g.V().hasLabel('person').has('name', '周建国').outE('person_pay_person').inV().hasLabel('person')"
"返回person的三角的环,边类型为属于, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('belong').inV().as('b').outE('belong').inV().as('c').where(eq('a')).select('a', 'b', 'c').by().by(id).by(id).project('a', 'b_id', 'c_id').by().by(select('b')).by(select('c'))"
"返回拥有仓库Tugraph拥有的事项,的仓库","g.V().has('repository', 'name', 'Tugraph').out('has').as('b').in('has').hasLabel('repository').as('c').select('b', 'c')"
返回height大于180且height为39且gender不是male的节点,"g.V().has('height', gt(180)).has('height', 39).has('gender', neq('male'))"
返回全部类型是编辑或作家的点,"g.V().hasLabel(within('publisher', 'author'))"
"给出id为155的部门关联的部门,和以属于关系关联了这些部门的其他医生","g.V().has('department', 'id', 155).bothE().otherV().hasLabel('department').as('b').inE('belong').otherV().hasLabel('doctor').as('c').select('b', 'c')"
 找出Zeus账号相关人的联系人。,"g.V().has('account', 'name', 'Zeus').out('relation').out('relation').out('partner')"
 返回与吴思思和Bob有关联的人的年龄和性别。,"g.V().has('person', 'name', '吴思思').outE().as('e').inV().hasLabel('person').as('b').inE().as('e2').outV().has('person', 'name', 'Bob').select('b').values('age', 'gender')"
"请帮我查找名为赵强的点关联的全部person,并对这些person的id进行求和","g.V().has('name', '赵强').outE('relates').inV().hasLabel('person').values('id').sum()"
"给定图的schema如下:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询被电影院横店影院上映的电影","g.V().hasLabel('cinema').has('name', '横店影院').outE('cinema_releases_film').inV().hasLabel('film').as('a').select('a').by().by(__.select('a').outE('cinema_releases_film').inV().hasLabel('cinema').has('name', '横店影院'))"
 医生杜梅和赵科都涉及到某个共同点。,"g.V().hasLabel('doctor').has('name', '杜梅').outE('belong').inV().as('b').inE('belong').outV().hasLabel('doctor').has('name', '赵科').select('b')"
 请帮我查找所有与标签关联的电影，以及这些电影在其他电影院的上映情况。,"g.V().hasLabel('tag').has('id', '74').bothE().otherV().hasLabel('film').as('b').inE('releases').otherV().hasLabel('cinema').as('c').select('b', 'c')"
"以250,953作为请求点id, 以属性id作为相等条件,查询168个person吴梅和周雪,共同的relation","g.withSideEffect('p', [250, 953]).V().hasLabel('person').as('a').where(and(__.select('a').values('id').where(within('p')), __.select('a').has('name', '吴梅'))).outE('relation').as('e').inV().as('b').inE('relation').as('e2').outV().as('c').hasLabel('person').has('name', '周雪').select('b').limit(168)"
"请帮我找出名为陈强的person,以及与其有关的公司,并返回陈强的薪资和这些公司的价值","g.V().hasLabel('person').has('name', '陈强').as('a').bothE().as('e').otherV().hasLabel('company').as('b').select('a', 'b').by('salary').by('value')"
获取与内科部门有has关系并且与急诊部门有belong关系的医生的薪水、年龄以及内科部门的地址和急诊部门的重量。,"g.V().hasLabel('department').has('name', '内科').as('a').outE('has').inV().hasLabel('doctor').as('b').inE('belong').outV().hasLabel('department').has('name', '急诊部').as('c').select('a', 'b', 'c').by('address').by(values('salary', 'age')).by('weight')"
找到所有与tag有关的cinema节点，这些节点的name为'好视影院'。返回这些节点的id除以80和98的结果。,"g.V().hasLabel('tag').outE().inV().hasLabel('cinema').has('name', '好视影院').project('div80', 'div98').by(values('id').math('/ 80')).by(values('id').math('/ 98'))"
 查询和作家赵科有认识的作家，以及和编辑何建国合作的书。,"g.V().has('author', 'name', '赵科').as('a').out('knows').as('b').V().has('publisher', 'name', '何建国').as('c').out('publish').as('d').select('a', 'b', 'c', 'd')"
"查询与公司Bilibili有关,且与国家越南有关系的城市节点","g.V().hasLabel('company').has('name', 'Bilibili').as('a').outE('belong').inV().hasLabel('city').as('b').outE('belong').inV().hasLabel('country').has('name', '越南').select('b')"
"给出从person徐宏出发,经过label为朋友的边,走2跳到达的person点","g.V().hasLabel('person').has('name', '徐宏').repeat(outE('friend').inV().simplePath()).times(2).hasLabel('person').dedup()"
返回由李轩创建的评论,"g.V().hasLabel('person').has('name', '李轩').outE('creates').inV().hasLabel('comment').as('b').as('a').select('a', 'b')"
"查找34个处方Prescription_366和Prescription_148,共同的朋友","g.V().has('prescription', 'name', 'Prescription_366').out('friend').as('b').in('friend').has('prescription', 'name', 'Prescription_148').select('b').limit(34)"
"帮我查询LX001的点还款的贷款,然后帮我查询LX001被存款的贷款,一起返回","g.V().has('name', 'LX001').as('a').outE('repay').inV().hasLabel('loan').as('b').select('a').inE('deposit').outV().hasLabel('loan').as('c').select('a', 'b', 'c')"
"给出person何强认识的person,以及关联这些person的person","g.V().has('person', 'name', '何强').as('a').outE('knows').as('e').inV().hasLabel('person').as('b').inE('relates').as('e2').outV().hasLabel('person').as('c').select('b', 'c')"
 找出同时与存款、转账和还款相关的账户，并确定它们与贷款的关系。,g.V().hasLabel('loan').as('a').outE('deposit').inV().hasLabel('account').as('b').outE('transfer').inV().hasLabel('account').as('c').outE('repay').inV().hasLabel('loan').as('d').select('d')
"请帮我找出被卖家陈建聪回答的买家,和陈建聪回答的买家","g.V().hasLabel('seller').has('name', '陈建聪').as('b').outE('ask').inV().hasLabel('buyer').as('c').select('b').inE('ask').outV().hasLabel('buyer').as('a').select('a', 'b', 'c')"
"用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));给出被账号TheShy转账的账号","g.V().hasLabel('account').has('name', 'TheShy').outE('account_transfer_account').inV().as('a').select('a').by().addV('b').by(__.select('a').outE('account_transfer_account').inV().hasLabel('account').has('name', 'TheShy')).select('a', 'b')"
"请帮我找出名为王建聪的person或公司或软件,以及与其有关的软件,并返回王建聪的性别和这些软件的价值","g.V().has(label, within('person', 'company', 'software')).has('name', '王建聪').as('a').bothE().as('e').otherV().has(label, 'software').as('b').select('a', 'b').by('gender').by('value')"
找出以拥有关系关联了合并请求PR-121的仓库,"g.V().hasLabel('pullRequest').has('name', 'PR-121').inE('has').outV().hasLabel('repository')"
"找出59个和标签等于person的点有家人关系的person,并且和这些person有父母关系的person",g.V().hasLabel('person').as('a').outE('family').inV().hasLabel('person').as('b').outE('parent').inV().hasLabel('person').as('c').select('c').limit(59)
返回被company字节creates的software,"g.V().hasLabel('company').has('name', '字节').outE('creates').inV().hasLabel('software').as('b', 'a').select('a', 'b')"
"请帮我查找所有和名为吴思琪的教师有朋友关系,或有朋友的朋友关系的课程","g.V().has('teacher', 'name', '吴思琪').repeat(bothE('friend').otherV()).times(2).hasLabel('course').dedup()"
返回所有和person赵伟之间有认识关系的person,"g.V().hasLabel('person').has('name', '赵伟').out('knows').hasLabel('person')"
"查询所有和university点有belong关系的city节点,且边满足条件f1不等于false,目标city节点value为空","g.V().hasLabel('university').as('a').outE('belong').has('f1', neq(false)).as('e').inV().hasLabel('city').has('value', eq(null)).as('b').select('b')"
"找出和forum点有contain关系的post节点,且边满足条件srcId在94到164之间,目标post节点满足条件wordCount是515","g.V().hasLabel('forum').as('a').outE('contain').has('srcId', between(94, 164)).as('e').inV().hasLabel('post').has('wordCount', 515).as('b').select('b')"
"输入表的列为id,value,name, 数据为(95,491,'土木学院'), 以属性id作为相等条件,查询被teacher黄雪teach的course","g.withSideEffect('p', [['id': 95, 'value': 491, 'name': '土木学院']]).V().hasLabel('course').has('id', __.select('p').unfold().select('id')).as('a').in('teacher_teach_course').hasLabel('teacher').has('name', '黄雪').as('b').select('a', 'b')"
"查询creates person陈科likes的comment,的person","g.V().has('person', 'name', '陈科').outE('likes').inV().hasLabel('comment').as('b').inE('creates').outV().hasLabel('person').as('c').select('b', 'c')"
请帮我找出周宏和何思思的共同朋友，他们都是卖家。,"g.V().has('seller', 'name', '周宏').out('friend').as('b').in('friend').has('seller', 'name', '何思思').select('b').limit(107)"
"帮我查询满足条件名字等于kate,身高小于等于167且性别是famale的节点","g.V().has('name', 'kate').has('height', lte(167)).has('gender', 'famale')"
给出前60个满足条件salary大于3490且salary不是3599的person,"g.V().hasLabel('person').has('salary', gt(3490)).has('salary', neq(3599)).limit(60)"
"查询和名为陈强的person有相关者关系,或有相关者的相关者关系的person","g.V().hasLabel('person').has('name', '陈强').repeat(out('relation')).times(2).emit().hasLabel('person').dedup()"
"找出源点name的和为157或name不是韩伟或gender为male,边标签等于knows,且满足条件targetId大于等于189或weight为空的边,返回这些边的targetId的最大值减90的最小值","g.V().hasLabel('a').or(has('name', sum().is(157)), has('name', neq('韩伟')), has('gender', 'male')).outE('knows').or(has('targetId', gte(189)), hasNot('weight')).as('e').select('e').values('targetId').max().math('_ - 90').min()"
"请帮我查找person黄思思buy的software,以及buy这些software的person, 令person(a)的name等于person(c)的age的求和值,令software的openSource等于software的stars对615取余,令person(a)的id等于person(c)的id乘id, 返回person(a)的age,software(b)的lang,person(c)的salary","g.V().has('person', 'name', '黄思思').as('a').outE('buy').inV().hasLabel('software').as('b').inE('buy').outV().hasLabel('person').as('c').select('a', 'b', 'c').by(__.choose(__.values('name'), __.constant('SUM'), __.constant(''))).by(__.choose(__.values('stars'), __.math('_ % 615'), __.constant(''))).by(__.choose(__.values('id'), __.math('_ * _'), __.constant(''))).project('a_age', 'b_lang', 'c_salary').by(__.select('a').values('age')).by(__.select('b').values('lang')).by(__.select('c').values('salary'))"
找出以pay关系关联了person徐梅的person,"g.V().hasLabel('person').has('name', '徐梅').inE('pay').outV().dedup()"
返回以取消关系关联了订单Order_436的买家,"g.V().hasLabel('orders').has('name', 'Order_436').in('cancel').hasLabel('buyer')"
"帮我查询全部源点标签等于user,目标点标签等于post,标签等于tag的边",g.E().hasLabel('tag').where(outV().hasLabel('user')).where(inV().hasLabel('post'))
返回与person张思思有观看关系的3度的环,"g.V().has('person', 'name', '张思思').as('a').repeat(bothE('watch').otherV().simplePath()).times(2).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id')"
帮我查询与user王宏有关系的forum的peopleNumber,"g.V().hasLabel('user').has('name', '王宏').bothE().otherV().hasLabel('forum').values('peopleNumber')"
"返回和user郑若涵有likes关系的post,再返回以publish关系关联了郑若涵的post","g.V().has('user', 'name', '郑若涵').as('a').out('likes').as('b').select('a').in('publish').as('c').select('a', 'b', 'c')"
"返回172个名为黄宏的点咨询的类型是卖家的节点,且其性别不等于male","g.V().has('name', '黄宏').outE('consult').inV().hasLabel('seller').has('gender', neq('male')).limit(172)"
"给出和部门点有拥有关系的医生节点,且边满足条件f1不是false,目标医生节点年龄小于52","g.V().hasLabel('department').as('a').outE('has').has('f1', neq(false)).as('e').inV().hasLabel('doctor').has('age', lt(52)).as('b').select('b')"
"输入表的列为name,gender,age, 数据为('赵轩','male',21),('李思琪','male',75),('Tom','male',53), 源点的gender等于输入表gender,查找100个名为内科的点拥有的类型是医生的节点,且其年龄小于等于73或身高的最小值大于等于3605","g.inject(['赵轩', 'male', 21], ['李思琪', 'male', 75], ['Tom', 'male', 53]).as('p').V().has('gender', __.select('p').tail().select('gender')).has('name', '内科').outE('department_has_doctor').inV().hasLabel('doctor').where(__.or(__.has('age', lte(73)), __.values('height').min().is(gte(3605)))).limit(100)"
帮我找出包含'post'标签且同时被知网和百度贴吧引用的节点,"g.V().has('name', '知网').outE('contain').inV().hasLabel('post').as('b').inE('contain').outV().has('name', '百度贴吧').select('b')"
"请帮我查找所有id为68的商品关联的卖家,和以咨询关系关联了这些卖家的其他买家","g.V().has('goods', 'id', 68).bothE().otherV().hasLabel('seller').as('b').inE('consult').otherV().hasLabel('buyer').as('c').select('b', 'c')"
帮我查询与孙思琪有关联的人,"g.V().hasLabel('person').has('name', '孙思琪').inE('knows').outV().dedup()"
 请帮我查找所有与名为郑若涵的买家有关联，包括伙伴或合作伙伴的订单。,"g.V().hasLabel('buyer').has('name', '郑若涵').outE('partner').inV().hasLabel('orders').dedup()"
 查询与王月认识的作家。,"g.V().has('author', 'name', '王月').as('b').outE('knows').inV().as('a').select('a', 'b')"
"请帮我找出issue belong的repository, 令repository的stars的值等于belongrepository的issue的weight的最小值, 再查找repository has的pullRequest","g.V().hasLabel('issue').as('a').outE('belong').inV().hasLabel('repository').as('b').sideEffect(__.project('stars').by(__.select('b').inE('belong').outV().hasLabel('issue').values('weight').min())).select('b').outE('has').inV().hasLabel('pullRequest').as('d').select('b').values('stars').as('stars').select('d').select('stars', 'd')"
 返回电子科技大学与某大学的合作关系。,"g.V().has('university', 'name', '电子科技大学').outE('relation').inV().outE('partner').inV().outE('relation').inV()"
"查询147个名为徐宏的点认识的标签为person的节点,且其性别为male或id小于等于87","g.V().has('name', '徐宏').outE('knows').inV().hasLabel('person').or(has('gender', 'male'), has('id', lte(87))).limit(147)"
"输入请求点id的列表469, 以属性id作为相等条件,给出所有名为吴红的点watch的film","g.withSideEffect('p', [469]).V().has('id', within('p')).has('name', '吴红').outE('person_watch_film').inV().hasLabel('film')"
"查询和大学北京大学有关系的大学或公司,返回这些点的价值","g.V().has('university', 'name', '北京大学').bothE().otherV().hasLabel(within('university', 'company')).values('value')"
"请帮我查找名为王思思的点的,id不是20且地址不等于B座的朋友,返回这些朋友的名字,和边的f0","g.V().has('name', '王思思').outE('friend').as('e').inV().has('id', neq(20)).has('address', neq('B座')).as('b').select('b', 'e').by('name').by('f0')"
"请帮我查找被person徐宏关联的person,和徐宏认识的person","g.V().hasLabel('person').has('name', '徐宏').as('b').outE('relates').inV().hasLabel('person').as('a').select('b').outE('knows').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
 找出韩伟的朋友的伙伴。,"g.V().has('person', 'name', '韩伟').out('relation').out('partner').out('relation')"
"输入表的列为age,id,name, 数据为(41,84,'Alice'),(4,53,'陈宏'),(88,87,'马科'), 以属性id作为相等条件,请帮我查找id为171的reader有关的publisher的relation, 再请帮我查找和publisher有关系的relation","g.withSideEffect('p', [['age': 41, 'id': 84, 'name': 'Alice'], ['age': 4, 'id': 53, 'name': '陈宏'], ['age': 88, 'id': 87, 'name': '马科']]).V().hasLabel('reader').has('id', '171').as('a').bothE().as('e').otherV().hasLabel('publisher').as('b').bothE('relation').as('e2').otherV().as('c').select('b').bothE('relation').as('e3').otherV().as('d').select('a', 'b', 'c', 'd')"
"以393,883,646,206,332作为请求点id, 源点的id等于输入表id,给出类型是department的点,并根据id升序排列","g.inject([393, 883, 646, 206, 332]).unfold().as('id').V().has('department', 'id', __.where(eq('id'))).order().by('id', asc)"
"查询名为何轩的点的,创建时间是2005年07月07日的相关者,返回这些相关者的创建时间,和边的目标点id,f1","g.V().has('name', '何轩').outE('relation').as('e').inV().has('createTime', '2005-07-07').as('b').select('b', 'e').by(values('createTime')).by(union(values('targetId'), values('f1')).fold())"
"请帮我查找id为112的person喜欢的person, 并将person有关的person的id的求和值赋值给person(b)的年龄, 接着查询person(b)的年龄小于112的person认识的person","g.V().hasLabel('person').has('id', 112).outE('likes').inV().hasLabel('person').as('b').project('b', 'age').by(identity()).by(__.inE().bothV().hasLabel('person').values('id').sum()).select('b', 'age').where(select('age').is(lt(112))).outE('knows').inV().hasLabel('person').project('age', 'd').by(select('age')).by(identity())"
请帮我查找所有类型是person的点,g.V().hasLabel('person')
"给出课程属于的部门,返回其源点的价值对386取余的值,以及目标点的大小除50的和","g.V().hasLabel('course').as('a').outE('belong').as('e').inV().hasLabel('department').as('b').project('mod_value', 'sum_size').by(select('a').values('value').math('_ % 386')).by(select('b').values('size').math('_ / 50').sum())"
 找出天涯论坛中跟历史标签有关的帖子。,"g.V().hasLabel('forum').has('name', '天涯论坛').outE('contain').inV().hasLabel('post').as('b').inE('has').outV().hasLabel('tag').has('name', '历史').select('b')"
给出以creates关系关联了prescription Prescription_154的doctor,"g.V().hasLabel('prescription').has('name', 'Prescription_154').inE('creates').outV().hasLabel('doctor')"
 请帮我找出与CSDN论坛有关联的人，以及与CSDN有关联的人。,"g.V().has('forum', 'name', 'CSDN').as('a').outE('contain').inV().hasLabel('person').as('b').select('a').inE('contain').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"帮我查询和账号Geaflow123有还款关系的贷款,再帮我查询以还款关系关联了Geaflow123的贷款","g.V().hasLabel('account').has('name', 'Geaflow123').as('a').outE('repay').inV().hasLabel('loan').as('b').select('a').inE('repay').outV().hasLabel('loan').as('c').select('a', 'b', 'c')"
"请帮我找出与公司蚂蚁集团存在雇佣关系,且与person何建国存在认识关系的person节点，返回这些person的年龄,及公司蚂蚁集团的id,及person何建国的身高","g.V().hasLabel('company').has('name', '蚂蚁集团').as('a').outE('employee').inV().hasLabel('person').as('b').inE('knows').outV().hasLabel('person').has('name', '何建国').as('c').select('a', 'b', 'c').by('id').by('age').by('height')"
请帮我找出与买家王轩有创造关系的2跳以内的环,"g.V().has('buyer', 'name', '王轩').as('a').repeat(bothE().otherV().simplePath()).times(2).where(loops().is(1).or().loops().is(2)).where(__.as('a').bothE().otherV().as('b').select('a', 'b').by('id').by('id').select('b').where(eq('a'))).select('a', 'b').by('id').by('id')"
"请帮我找出名为李月的person,以及与其有关的person,并返回李月的名字和这些person的年龄","g.V().has('person', 'name', '李月').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('name').by('age')"
帮我查询全部名为郑国强的节点喜欢的person,"g.V().has('name', '郑国强').outE('likes').inV().hasLabel('person')"
 返回同时与 Prescription_255 和 Prescription_497 存在关系的 prescription 节点的 name 和 weight。,"g.V().has('prescription', 'name', 'Prescription_255').outE().inV().hasLabel('prescription').as('b').inE().outV().has('prescription', 'name', 'Prescription_497').select('b').values('name', 'weight')"
 找出与国家点相关的城市节点，按名称和面积分组，返回名称和面积。,"g.V().hasLabel('country').bothE('contain').bothV().hasLabel('city').group().by(values('name', 'area')).select(values)"
给出被病人何伟接受的处方,"g.V().hasLabel('patient').has('name', '何伟').in('accept').hasLabel('prescription').as('b').out('accept').as('a').select('a', 'b')"
"帮我查询129个和标签为user的点有likes关系的post,且和这些post有has关系的tag",g.V().hasLabel('user').out('likes').hasLabel('post').out('has').hasLabel('tag').limit(129)
"查找大学南京大学的全部label为相关者的边,并根据源点id升序排列,返回12个","g.V().has('university', 'name', '南京大学').outE('relation').order().by('srcId', asc).limit(12).inV()"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询id为87的点的名字,身高","g.V().has('id', 87).project('a.name', 'a.height').by(values('name')).by(values('height'))"
"帮我查询id为75的forum有关的user的friend, 再帮我查询和user有关系的relation","g.V().has('forum', 'id', 75).as('a').bothE().otherV().hasLabel('user').as('b').bothE().hasLabel('friend').otherV().as('c').select('b').bothE().hasLabel('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"给出名为王若涵的读者,以及与其有关的书,并返回王若涵的名字和这些书的id","g.V().hasLabel('reader').has('name', '王若涵').as('a').bothE().otherV().hasLabel('book').as('b').select('a', 'b').by('name').by('id')"
"请帮我查找person的相关者,或其相关者的相关者","g.V().hasLabel('person').as('a').outE('relation').inV().range(1,2).as('b').select('b')"
"以'AI', 'Yv'作为输入调用triangleCount函数,返回number","g.call('triangleCount').with('nodeLabels', ['AI', 'Yv']).select('number')"
"以(683,163.01,true),(881,156.66,true)作为请求表数据,属性分别为f0,weight,f1, 以属性f0作为相等条件,请帮我找出全部和编辑徐梅有关系的书节点,返回这些点的创建时间","g.withSideEffect('p', [[683, 163.01, true], [881, 156.66, true]]).V().hasLabel('publisher').as('a').where(and(__.select('a').values('f0').is(within(__.select('p').unfold().project('f0').by(limit(local, 1)))), __.select('a').values('name').is(eq('徐梅')))).bothE().otherV().hasLabel('book').values('createTime')"
找出标签为person且与韩思思和张宏都有关联的所有节点,"g.V().has('person', 'name', '韩思思').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '张宏').select('b').values('name')"
"帮我查询标签为购买,以及f0不为空,权重为空的边","g.E().hasLabel('buy').has('f0', neq(null)).has('weight', eq(null))"
"使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));查询源点类型为reader,边类型为reader_likes_book的边,返回这些边的weight加161.73的求和值,和srcId减130的最大值","g.V().hasLabel('reader').outE('reader_likes_book').project('sum_weight_plus', 'max_srcId_minus').by(values('weight').sum().math('_ + 161.73')).by(values('srcId').math('_ - 130').max())"
"使用这个图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));返回名为Prescription_135的处方,以及与其有关的处方,并返回Prescription_135的id和这些处方的id","g.V().has('prescription', 'name', 'Prescription_135').as('a').bothE().otherV().hasLabel('prescription').as('b').select('a', 'b').by('id')"
"返回喜欢用户何伟发布的帖子,的用户","g.V().has('user', 'name', '何伟').outE('publish').inV().hasLabel('post').as('b').inE('likes').outV().hasLabel('user').as('c').select('b', 'c')"
 找出身高不为空且不是195的人，以及这些人认识的人的名称。,"g.V().hasLabel('person').has('height', neq(null)).has('height', neq(195)).as('a').outE('pay').as('e').inV().hasLabel('person').as('b').outE('knows').as('e2').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
根据买家王思思创建的订单，返回包含商品价格和销量的订单信息。,"g.V().hasLabel('buyer').has('name', '王思思').out('creates').hasLabel('orders').out('contain').hasLabel('goods').project('price', 'sellerNumber').by('price').by('sellerNumber')"
"请帮我找出和标签等于repository的点有has关系的pullRequest,并且和这些pullRequest有belong关系的repository,并且和这些repository有has关系的issue",g.V().hasLabel('repository').as('a').out('has').hasLabel('pullRequest').as('b').out('belong').hasLabel('repository').as('c').out('has').hasLabel('issue').as('d').select('d')
"请帮我找出身高不是191,名字为韩雪的person喜欢的person的名称,以及这些person 支付的person的名称","g.V().hasLabel('person').has('name', '韩雪').has('height', neq(191)).outE('likes').inV().hasLabel('person').as('b').outE('pay').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 查询与ID为35的人有关联的人的朋友，再查询该人的父母。,"g.V().has('person', 'id', '35').as('a').bothE().otherV().hasLabel('person').as('b').bothE().hasLabel('friend').otherV().as('c').select('b').bothE().hasLabel('parent').otherV().as('d').select('a', 'b', 'c', 'd')"
 请帮我找出赵国强和韩科共同认识的人，标签为'person'。,"g.V().has('name', '赵国强').outE('knows').inV().hasLabel('person').as('b').inE('knows').outV().has('name', '韩科').select('b')"
查询所有与大学浙江大学有关系的城市的价值,"g.V().hasLabel('university').has('name', '浙江大学').bothE().otherV().hasLabel('city').values('value')"
年龄对66取余的值,g.V().hasLabel('a').project('age_mod_66').by(values('age').math('_ % 66'))
 请问能否按薪资、ID、姓名对人员进行分组并按性别从大到小排序？需要查询的人员信息包括性别。,"g.V().hasLabel('person').group().by(project('salary', 'id', 'name').by(values('salary')).by(values('id')).by(values('name'))).by(values('gender')).order(local).by(values, desc)"
找出全部名为数学学院的节点拥有的教师或学生或部门,"g.V().has('name', '数学学院').out('has').hasLabel(within('teacher', 'student', 'department'))"
"查询id为186的点的gender,salary,id","g.V().has('id', 186).project('gender', 'salary', 'id').by(values('gender')).by(values('salary')).by(values('id'))"
查找所有标签等于person的点,g.V().hasLabel('person')
找出名为阿里的点创造的软件,"g.V().has('name', '阿里').outE('creates').inV().hasLabel('software')"
查询person王建聪认识的person节点提交的软件,"g.V().has('person', 'name', '王建聪').out('knows').hasLabel('person').out('commits').hasLabel('software')"
 给出复旦大学和四川大学的公共关联节点列表，它们都是大学。,"g.V().has('university', 'name', '复旦大学').outE('relation').inV().as('b').inE('relation').outV().has('university', 'name', '四川大学').select('b').values('name')"
"给出和person有关联的person节点,并根据其性别分组,返回性别,以及薪资对5158取余的值","g.V().hasLabel('person').as('a').bothE('family').otherV().hasLabel('person').as('b').select('b').group().by(values('gender')).by(project('gender', 'salary_mod').by(values('gender')).by(values('salary').math('_ % 5158')).fold())"
"请帮我查找所有编辑以性别,id,名字分组的id, 根据id从小到大排序","g.V().hasLabel('publisher').group().by(values('gender', 'id', 'name').fold()).by(values('id').fold()).order(local).by(keys, asc)"
"给出103个和类型为department的点有has关系的doctor,以及和这些doctor有belong关系的department",g.V().hasLabel('department').as('a').out('has').hasLabel('doctor').as('b').out('belong').hasLabel('department').as('c').select('c').limit(103)
"以681,831,289,391,300作为请求点id, 以属性id作为相等条件,查找所有数学学院的点拥有的学生,然后查找数学学院被拥有的大学,一起返回","g.inject([681, 831, 289, 391, 300]).unfold().as('p').V().has('id', __.where(eq('p'))).has('name', '数学学院').as('a').outE('department_has_student').inV().as('b').select('a').inE('university_has_department').outV().as('c').select('a', 'b', 'c')"
请帮我找出以contain关系关联了university北京大学的city,"g.V().hasLabel('university').has('name', '北京大学').inE('contain').outV().hasLabel('city')"
"查询所有源点类型是person,目标点类型是comment,类型是cinema或comment的边","g.V().hasLabel('person').outE('cinema', 'comment').as('e').inV().hasLabel('comment').select('e')"
"找出所有和名为蚂蚁集团的公司有朋友关系,或有朋友的朋友关系的软件","g.V().has('company', 'name', '蚂蚁集团').bothE('friend').bothV().hasLabel('software').simplePath().dedup()"
"给出account的三角的环,边label为transfer, 并返回这些点的id","g.V().hasLabel('account').as('a').outE('transfer').inV().as('b').outE('transfer').inV().as('c').outE('transfer').inV().where(eq('a')).select('a', 'b', 'c').by(id()).by('id').by('id')"
"找出所有作家的朋友,或其朋友的朋友","g.V().hasLabel('author').as('a').outE('friend').inV().range(1, 2).as('b').select('b')"
"找出person杜伟购买的软件,以及使用这些软件的软件, 令软件的年龄等于person的身高除165,令软件的年龄等于person的年龄对19取余的最大值,令软件的名字等于person的salary的最大值除1730, 返回person(a)的薪资,软件(b)的id,软件(c)的星数","g.V().has('person', 'name', '杜伟').as('a').outE('buy').inV().hasLabel('software').as('b').inE('uses').outV().hasLabel('software').as('c').select('a', 'b', 'c').by(values('salary')).by(values('id')).by(values('stars')).project('a_salary', 'b_id', 'c_stars').by(select('a')).by(select('b')).by(select('c'))"
返回前25个标签为likes的边,g.E().hasLabel('likes').limit(25)
查找所有和comment Comment_312之间有belong关系的film,"g.V().hasLabel('comment').has('name', 'Comment_312').out('belong').hasLabel('film')"
查询与医生赵强有属于关系的2跳的环,"g.V().has('doctor', 'name', '赵强').as('a').bothE('belong').bothV().where(neq('a')).as('b').select('a', 'b').by('id').by('id').as('result').select('result').by(select('a').by('id')).by(select('b').by('id').as('b_id'))"
"以762,850,827,713,983作为请求点id, 源点的id等于输入表id,找出被person赵若涵knows的person","g.inject([762, 850, 827, 713, 983]).as('p').flatMap(select('p')).unfold().as('id').V().hasLabel('person').has('id', __.as('id').select('id')).as('a').in('knows').hasLabel('person').has('name', '赵若涵').as('b').select('a', 'b')"
"使用列为id,area,value, 数据为(48,39945,570)的子查询作为输入表, 以属性value作为相等条件,给出与company阿里和滴滴都存在company_cooperate_university关系的点","g.withSideEffect('p', [['id':48, 'area':39945, 'value':570]]).V().hasLabel('company').has('value', __.select('p').unfold().select('value')).has('name', '阿里').outE('company_cooperate_university').inV().as('b').inE('company_cooperate_university').outV().hasLabel('company').has('name', '滴滴').select('b')"
"给出和course有关联的department节点,并根据其id,size,name分组,返回id,size,name,以及id乘24的值","g.V().hasLabel('course').bothE('belong').otherV().hasLabel('department').group().by(project('id', 'size', 'name').by(values('id', 'size', 'name'))).by(project('id', 'size', 'name', 'id_times_24').by(values('id', 'size', 'name')).by(values('id').math('_ * 24'))).select(values).unfold().select('id', 'size', 'name', 'id_times_24')"
"返回72个person王强和王建聪,共同的lover","g.V().has('person', 'name', '王强').out('lover').as('b').in('lover').has('person', 'name', '王建聪').select('b').limit(72)"
帮我找找和马雪有关，标签是悬疑的电影,"g.V().hasLabel('person').has('name', '马雪').outE('watch').inV().hasLabel('film').as('b').inE('has').outV().hasLabel('tag').has('name', '悬疑').select('b')"
"使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回和forum百度贴吧有关的user,称为X,再返回和这个X有关联的其他forum,以及和X有关联的user","g.V().has('forum', 'name', '百度贴吧').as('a').bothE().otherV().hasLabel('user').as('b').bothE().otherV().hasLabel('forum').as('c').select('b').bothE().otherV().hasLabel('user').as('d').select('a', 'b', 'c', 'd')"
"返回所有编辑的相关者,或其相关者的相关者",g.V().hasLabel('publisher').outE('relation').inV().outE('relation').inV().dedup()
"请帮我查找类型是商品,名为苹果的点,返回这些点的名字","g.V().hasLabel('goods').has('name', '苹果').values('name')"
请帮我找出与id为40的prescription相关的user，以及这些user的相关朋友。,"g.V().has('prescription', 'id', '40').as('a').bothE().otherV().hasLabel('user').as('b').bothE('relation').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
请帮我查询person在何月申请的贷款，包括贷款存款账号是否冻结、上次登录时间和姓名。,"g.V().has('person', 'name', '何月').outE('apply').inV().hasLabel('loan').outE('deposit').inV().hasLabel('account').project('isBlock', 'lastLoginTime', 'name').by(values('isBlock')).by(values('lastLoginTime')).by(values('name'))"
请帮我找出身高不是155或薪资为7806或id在4到67之间的节点,"g.V().or(has('height', neq(155)), has('salary', 7806), has('id', between(4, 67)))"
 请帮我找出中国诗词论坛某个相关者的伙伴。,"g.V().has('forum', 'name', '中国诗词论坛').outE('relation').inV().outE('relation').inV().outE('partner').inV()"
"返回类型为contain,并且满足条件srcId小于等于822且f1不等于false,或f1不是true的边","g.E().hasLabel('contain').or(has('srcId', lte(822)).has('f1', neq(false)), has('f1', neq(true)))"
"输入表的列为size,id,name, 数据为(82,67,'土木学院'),(82,96,'法学院'), 以属性size作为相等条件,帮我查询与名为浙江大学和华中科技大学的点共同has的,类型为department的节点","g.withSideEffect('p', [[82, 67, '土木学院'], [82, 96, '法学院']]).V().hasLabel('department').as('b').bothE('university_has_department').otherV().has('name', within('浙江大学', '华中科技大学')).groupCount().by('name').where(select('b').bothE('university_has_department').otherV().has('name', within('浙江大学', '华中科技大学')).groupCount().by('name').select(values).is(eq(2))).select('b')"
计算所有country的area减27381的值,g.V().hasLabel('country').project('result').by(values('area').is(neq(null)).math('_ - 27381'))
"给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));查找公司的3跳的环","g.V().hasLabel('company').as('a').repeat(both().simplePath()).times(2).where(loops().is(2)).where(eq('a')).path().by('id').project('a.id', 'b_id').by(unfold().limit(1)).by(unfold().skip(1).limit(1))"
"返回名为知乎的forum,以及与其有关的post,并返回知乎的id和这些post的value","g.V().hasLabel('forum').has('name', '知乎').as('a').bothE().as('e').otherV().hasLabel('post').as('b').select('a', 'b').by('id').by('value')"
"返回id为156的点的大小,价值","g.V().has('id', 156).project('size', 'value').by('size').by('value')"
 请帮我查询，艺术学院和文学院共有多少个合作伙伴。,"g.V().has('department', 'name', '艺术学院').outE('partner').inV().as('b').inE('partner').outV().has('department', 'name', '文学院').select('b').dedup().limit(26)"
给出以拥有关系关联了商品香蕉的卖家,"g.V().hasLabel('goods').has('name', '香蕉').inE('has').outV().hasLabel('seller')"
查询全部名为李科的点knows的person,"g.V().has('name', '李科').out('knows').hasLabel('person')"
"以('杜梅',5307,86),('徐月',9847,15),('张月',2911,54)作为请求表数据,属性分别为name,salary,age, 以属性age作为相等条件,找出和person有关联的person节点,并根据其薪资,名字分组,返回薪资,名字,以及salary的平均值对4825取余的值","g.withSideEffect('p', [['name': '杜梅', 'salary': 5307, 'age': 86], ['name': '徐月', 'salary': 9847, 'age': 15], ['name': '张月', 'salary': 2911, 'age': 54]]).V().hasLabel('person').as('a').bothE('person_knows_person').otherV().hasLabel('person').as('b').where(__.select('a').values('age').is(within(__.select('p').unfold().values('age')))).select('b').group().by(__.project('salary', 'name').by('salary').by('name')).by(__.values('salary').mean().math('_ % 4825')).unfold().project('b.salary', 'b.name', 'AVG(b.salary) % 4825').by(__.select(keys).select('salary')).by(__.select(keys).select('name')).by(__.select(values))"
 帮我查询耳鼻喉科医生和部门之间的关系。,"g.V().hasLabel('department').has('name', '耳鼻喉科').inE('belong').outV().hasLabel('doctor')"
 请问您需要查询哪个用户，并按名字升序排列标签？,"g.V().hasLabel('user').order().by('name', asc)"
返回医生赵轩和医生杜强所在的部门,"g.V().hasLabel('doctor').has('name', '赵轩').as('a').out('belong').as('b').select('a').V().hasLabel('doctor').has('name', '杜强').as('c').out('belong').as('d').select('a', 'b', 'c', 'd')"
"帮我查询被仓库Mybatis拥有的合并请求,和Mybatis拥有的用户","g.V().hasLabel('repository').has('name', 'Mybatis').as('b').outE('has').inV().hasLabel('pullRequest').as('a').select('b').outE('has').inV().hasLabel('user').as('c').select('a', 'b', 'c')"
请帮我查找与我选购的商品相关的其他商品，以及拥有这些商品的其他卖家,"g.V().has('goods', 'id', '127').bothE().otherV().hasLabel('goods').as('b').inE('has').otherV().hasLabel('seller').as('c').select('b', 'c')"
查询以创造关系关联了软件Zookeeper的公司,"g.V().hasLabel('software').has('name', 'Zookeeper').inE('creates').outV().hasLabel('company')"
"返回pullRequest PR-360 belong的repository,被其他issue belong的数量","g.V().hasLabel('pullRequest').has('name', 'PR-360').out('belong').in('belong').hasLabel('issue').count()"
 全额贷款的朋友，或者是朋友的朋友,"g.V().hasLabel('loan').as('a').outE('friend').inV().range(1,2).as('b').select('b')"
"使用列为name,age,gender, 数据为('孙国强',62,'famale')的子查询作为输入表, 以属性name作为相等条件,帮我查询全部名为王轩的点knows的person","g.withSideEffect('p', [['name': '孙国强', 'age': 62, 'gender': 'famale']]).V().has('name', '王轩').outE('knows').inV().hasLabel('person')"
"查找所有和名为孙思思的用户有伙伴关系,或有伙伴的伙伴关系的仓库","g.V().hasLabel('user').has('name', '孙思思').repeat(out('partner')).times(2).hasLabel('repository').dedup()"
"用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查找以拥有关系关联了标签其他的电影","g.V().hasLabel('tag').has('name', '其他').inE('film_has_tag').outV().hasLabel('film')"
"返回与买家赵思思有关,且与商品手机有关系的订单节点","g.V().hasLabel('buyer').has('name', '赵思思').outE('creates').inV().hasLabel('orders').as('b').inE('contain').outV().hasLabel('goods').has('name', '手机').select('b')"
"查找公司的三角的环,边标签为雇佣, 并返回这些点的id","g.V().hasLabel('company').as('a').outE('employee').inV().as('b').bothE('employee').otherV().as('c').where(__.out('employee').as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
找出全部和买家吴雪之间有取消关系的订单,"g.V().hasLabel('buyer').has('name', '吴雪').outE('cancel').inV().hasLabel('orders')"
"返回和标签为person的点有认识关系的person,以及和这些person有认识关系的person,以及和这些person有提交关系的软件",g.V().hasLabel('person').as('a').out('knows').hasLabel('person').as('b').out('knows').hasLabel('person').as('c').out('commits').hasLabel('software').as('d').select('d')
帮我查询19个与周月和赵若涵都存在关系的合并请求节点,"g.V().has('name', '周月').outE().inV().hasLabel('pullRequest').as('b').inE().outV().has('name', '赵若涵').select('b').limit(19)"
"查找名为Alice的编辑或书或作家,以及与其有关的作家,并返回Alice的性别和这些作家的名字","g.V().has(label, within('publisher', 'book', 'author')).has('name', 'Alice').bothE().otherV().has(label, 'author').project('a_gender', 'b_name').by(select('a').by('gender')).by('name')"
"用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));给出全部与软件有关系的软件节点,且软件节点的id为空,并返回这些点的星数除868的最小值,以及id的数量加25乘849的个数","g.V().hasLabel('software').as('a').outE().inV().hasLabel('software').has('id', null).as('b').select('b').dedup().project('min_stars_div_868', 'count_expr').by(values('stars').math('_ / 868').min()).by(count().math('(_ + 25) * 849'))"
 查询马建国认识的人中，那些购买过软件的人，并返回这些人的购买记录。,"g.V().has('name', '马建国').out('knows').hasLabel('person').out('buy').hasLabel('software').values('value')"
"返回所有和病人点有接受关系的处方节点,且边满足条件f1不等于791,目标处方节点满足条件权重大于等于61","g.V().hasLabel('patient').as('a').outE('accept').has('f1', neq(791)).as('e').inV().hasLabel('prescription').has('weight', gte(61)).as('b').select('b')"
 找出同时与微软和滴滴有联系的每个人，并返回他们的年龄。,"g.V().has('company', 'name', '微软').outE().inV().hasLabel('person').as('b').inE().outV().has('company', 'name', '滴滴').select('b').values('age')"
请帮我找出与论坛百度贴吧有关系的论坛的名字,"g.V().has('forum', 'name', '百度贴吧').bothE().otherV().hasLabel('forum').values('name')"
年龄减年龄的值,g.V().hasLabel('a').project('result').by(values('age').math('_ - _'))
"请帮我查找名为张红的用户,以及与其有关的论坛,并返回张红的名字和这些论坛的创建时间","g.V().hasLabel('user').has('name', '张红').as('a').bothE().otherV().hasLabel('forum').as('b').select('a', 'b').by('name').by('createTime')"
"返回身高为空的person认识的person的名称,以及这些person 认识的person的名称","g.V().hasLabel('person').has('height', null).as('a').out('knows').hasLabel('person').as('b').out('knows').hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"查询名为何红的person,以及与其有关的person,并返回何红的age和这些person的id","g.V().has('person', 'name', '何红').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('age').by('id')"
 请帮我查询人名称为张思思，点类型为person的点，并返回这些点的height和id。,"g.V().hasLabel('person').has('name', '张思思').project('height', 'id').by('height').by('id')"
帮我查询全部和doctor李建聪之间有creates关系的prescription,"g.V().hasLabel('doctor').has('name', '李建聪').outE('creates').inV().hasLabel('prescription')"
"给出全部和标签悬疑有关系的标签或person,返回这些点的身高","g.V().has('tag', 'name', '悬疑').bothE().otherV().hasLabel(within('tag', 'person')).values('height')"
"帮我查询comment Comment_462 belong的film,以及belong这些film的comment, 令film的id等于film的id除30, 返回comment(a)的id,film(b)的name,comment(c)的wordCount","g.V().hasLabel('comment').has('name', 'Comment_462').as('a').outE('belong').inV().hasLabel('film').as('b').inE('belong').outV().hasLabel('comment').as('c').select('a', 'b', 'c').by('id').by('name').by('wordCount').project('a.id', 'b.name', 'c.wordCount').by(select('a')).by(select('b')).by(select('c')).by(__.project('b.id').by(select('b').values('id').math('/ 30'))).select('a.id', 'b.name', 'c.wordCount')"
 找出属于City纽约的Company。,"g.V().hasLabel('city').has('name', '纽约').inE('belong').outV().hasLabel('company')"
"请帮我查找全部名为Post_328的,名字为其他或价值小于437的伙伴,返回这些伙伴的名字,和边的f0,权重,目标点id","g.V().has('name', 'Post_328').outE('partner').as('e').inV().has('name', '其他').or().has('value', lt(437)).select('e').project('b_name', 'e_f0', 'e_weight', 'e_targetId').by(__.inV().values('name')).by(values('f0')).by(values('weight')).by(values('targetId'))"
"查询全部源点满足条件性别不等于male且年龄在43到47之间,目标点满足条件身高在162到197之间,且标签等于喜欢的边","g.V().has('gender', neq('male')).has('age', between(43, 47)).outE('likes').as('e').inV().has('height', between(162, 197)).select('e')"
"输入表的列为height,gender,id, 数据为(161,'male',58),(169,'famale',90), 源点的height等于输入表height,给出名为星际穿越的film","g.inject([['height':161,'gender':'male','id':58], ['height':169,'gender':'female','id':90]]).unfold().as('p').V().hasLabel('film').has('height', __.select('p').select('height')).has('name', '星际穿越').as('a').select('a')"
请帮我查找所有类型为仓库的点,g.V().hasLabel('repository')
找出被城市杭州包含的公司,"g.V().hasLabel('city').has('name', '杭州').outE('contain').inV().hasLabel('company').as('b', 'a').select('a', 'b')"
"返回名为徐科的person,以及与其有关的person,并返回徐科的gender和这些person的height","g.V().hasLabel('person').has('name', '徐科').as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a', 'b').by('gender').by('height')"
"请帮我查找全部id为103的issue关联的repository,和以belong关系关联了这些repository的其他issue","g.V().has('issue', 'id', 103).bothE().otherV().hasLabel('repository').as('b').inE('belong').otherV().hasLabel('issue').as('c').select('b', 'c')"
"查找所有软件的相关者,或其相关者的相关者",g.V().hasLabel('software').outE('relation').inV().hasLabel('software').optional(outE('relation').inV().hasLabel('software')).dedup()
帮我查询与部门文学院有拥有关系的1度以内的环,"g.V().has('department', 'name', '文学院').as('a').bothE('has').bothV().where(neq('a')).simplePath().by(T.id).limit(1).as('b').select('a', 'b').by('id').by('id')"
 找周红这个人。,"g.V().hasLabel('person').has('name', '周红')"
给出与书悲惨世界有关系的作家的薪资,"g.V().hasLabel('book').has('name', '悲惨世界').bothE().otherV().hasLabel('author').values('salary')"
"请帮我查找名为Bilibili的贷款或公司,以及与其有关的person,并返回Bilibili的名字和这些person的身高","g.V().hasLabel(within('loan', 'company')).has('name', 'Bilibili').bothE().otherV().hasLabel('person').project('a_name', 'b_height').by(select(all, 'a').unfold().values('name')).by(values('height'))"
"查询与事项ISSUE-154有关,且与事项ISSUE-75有关系的仓库节点","g.V().hasLabel('issue').has('name', 'ISSUE-154').bothE('belong').otherV().hasLabel('repository').as('b').bothE('has').otherV().hasLabel('issue').has('name', 'ISSUE-75').select('b')"
 按照性别分组，找出所有出版物的年龄，然后按年龄从小到大排序。,"g.V().hasLabel('publisher').group().by('gender').by(values('age').fold()).order(local).by(values, asc)"
请帮我找出所有标签为person，名字是孙思琪的点，并返回它们的id、name和salary。,"g.V().hasLabel('person').has('name', '孙思琪').project('id', 'name', 'salary').by('id').by('name').by('salary')"
"给出拥有教师张思思的部门,和这些部门拥有的教师","g.V().hasLabel('teacher').has('name', '张思思').as('a').inE('has').outV().hasLabel('department').as('b').outE('has').inV().hasLabel('teacher').as('c').select('b', 'c')"
 请帮我找出与类型为'person'的元素有关联的'likes'评论，这些评论属于'film'元素，并且这些'film'元素包含'has'标签。,g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('comment').as('b').outE('belong').as('e2').inV().hasLabel('film').as('c').outE('has').as('e3').inV().hasLabel('tag').as('d').select('d')
给出贷款的3度的环,"g.V().hasLabel('loan').as('a').repeat(both().simplePath()).times(2).where(loops().is(2)).as('b').where(__.out().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
 从横店影院出发，沿着releases标签的方向走三到六度，就能到达film点。,"g.V().has('cinema', 'name', '横店影院').repeat(out('releases')).times(3).emit().repeat(out('releases')).times(3).dedup().hasLabel('film')"
"查找满足条件salary不是9457,id不是88,或name不是王强的节点","g.V().or(and(has('salary', neq(9457)), has('id', neq(88))), has('name', neq('王强')))"
请帮我找出与城市标签相关的公司，以及这些公司所属的城市和这些城市所属的国家。,g.V().hasLabel('city').as('a').out('contain').hasLabel('company').as('b').out('belong').hasLabel('city').as('c').out('belong').hasLabel('country').as('d').select('d')
帮我查询与电影建国大业和少年足球都存在拥有关系的点,"g.V().hasLabel('film').has('name', '建国大业').out('has').as('b').in('has').hasLabel('film').has('name', '少年足球').select('b')"
"给出名为北京和重庆的,标签等于city的点公共的relation节点的名单","g.V().has('city', 'name', '北京').out('relation').as('b').in('relation').has('city', 'name', '重庆').select('b').values('name')"
"帮我查询类型为person,名为赵国强的点,返回这些点的id,薪资","g.V().hasLabel('person').has('name', '赵国强').project('a.id', 'a.salary').by('id').by('salary')"
"请帮我找出名为王思琪的company或software,以及与其有关的person,并返回王思琪的gender和这些person的age","g.V().has(label, within('company', 'software')).has('name', '王思琪').bothE().otherV().has(label, 'person').project('a_gender', 'b_age').by(select(all, 'a').unfold().values('gender')).by(values('age'))"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找person徐建聪的所有标签为lover的边,并根据f0从小到大排列,返回25个","g.V().has('person', 'name', '徐建聪').outE('person_lover_person').order().by('f0', asc).limit(25).inV()"
"以(99,184,'famale')作为请求表数据,属性分别为id,height,gender, 以属性height作为相等条件,查找和person杜若涵有person_friend_person关系的person,以及和person黄轩有person_family_person关系的person,将它们都返回","g.withSideEffect('p', [['id':99, 'height':184, 'gender':'famale']]).V().hasLabel('person').has('height', __.select('p').unfold().select('height')).has('name', '杜若涵').as('a').outE('person_friend_person').inV().as('b').select('a').V().hasLabel('person').has('name', '黄轩').as('c').outE('person_family_person').inV().as('d').select('a', 'b', 'c', 'd')"
"找出所有名为王若涵的点的,id为29且age小于56的relation,返回这些relation的gender,和边的weight,targetId,f0","g.V().has('name', '王若涵').outE('relation').as('e').inV().has('id', 29).has('age', lt(56)).select('e').project('gender', 'weight', 'targetId', 'f0').by(__.inV().values('gender')).by(values('weight')).by(values('targetId')).by(values('f0'))"
"请帮我查找全部issue的friend,或其friend的friend",g.V().hasLabel('issue').out('friend').emit().times(2).dedup()
请帮我找出前195个gender不是male且age小于83的person,"g.V().hasLabel('person').has('gender', neq('male')).has('age', lt(83)).limit(195)"
帮我查询以购买关系关联了软件Redis的person,"g.V().hasLabel('software').has('name', 'Redis').inE('buy').outV().hasLabel('person')"
请帮我按peopleNumber和id对company进行分组，并根据value进行降序排序。,"g.V().hasLabel('company').group().by(values('peopleNumber', 'id')).by(values('value')).order(local).by(values, desc)"
找出韩雪和黄轩共同的父节点，这些父节点都标记为'person'。,"g.V().has('person', 'name', '韩雪').outE('parent').inV().as('b').inE('parent').outV().has('person', 'name', '黄轩').select('b').values('name')"
"请帮我查找name不等于郑梅或salary不等于4783的doctor belong的department的名称,以及这些department has的doctor的名称","g.V().hasLabel('doctor').has('name', neq('郑梅')).or().has('salary', neq(4783)).as('a').outE('belong').as('e').inV().hasLabel('department').as('b').outE('has').as('e2').inV().hasLabel('doctor').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
请找出与Post_359和Post_203都有关联的post节点，并返回它们的语言和单词数量,"g.V().hasLabel('post').has('name', 'Post_359').outE().inV().hasLabel('post').as('b').inE().outV().hasLabel('post').has('name', 'Post_203').select('b').values('lang', 'wordCount')"
"找出被账号转账数量大于101的账号,记为relationCount,再查询这些账号转账的person","g.V().hasLabel('account').as('a').project('a', 'relationCount').by(identity()).by(__.in('transfer').hasLabel('account').count()).as('p').select('a', 'relationCount').where(__.select('relationCount').is(gt(101))).select('a').out('transfer').hasLabel('person').dedup()"
帮我查询作家何科认识的作家节点认识的作家,"g.V().has('author', 'name', '何科').out('knows').out('knows')"
"给出标签等于雇佣,且f1不是true或权重是183的边","g.E().hasLabel('employee').or(has('f1', neq(true)), has('weight', 183))"
"返回名为艺术学院的点拥有的全部教师,并对这些教师的年龄进行求和","g.V().has('name', '艺术学院').out('has').hasLabel('teacher').values('age').sum()"
" 请问能否帮我查询company按照value和peopleNumber分组的scale,并按照升序排序？","g.V().hasLabel('company').group().by(values('value', 'peopleNumber')).by(values('scale')).order(local).by(value, asc)"
请帮我找出所有标签为'悬疑'的点，包括它们的ID、名称和价值。,"g.V().hasLabel('tag').has('name', '悬疑').project('a.id', 'a.name', 'a.value').by('id').by('name').by('value')"
"查找与person郑雪有关,且与person马强有关系的person节点","g.V().has('person', 'name', '郑雪').bothE('pay').bothV().hasLabel('person').where(bothE('pay').bothV().has('person', 'name', '马强')).dedup()"
"找出id为103的person关联的person,和以关联关系关联了这些person的其他person","g.V().has('person', 'id', 103).bothE().otherV().hasLabel('person').as('b').inE('relates').otherV().hasLabel('person').as('c').select('b', 'c')"
"请帮我查找被person认识数量大于171的person,记为relationCount,再查询这些person认识的软件","g.V().hasLabel('person').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('knows').hasLabel('person').count()).unfold().as('a_with_count').select('relationCount').where(__.is(gt(171))).select('a_with_count').select('a').out('knows').hasLabel('software').dedup()"
"请帮我找出名为周科的点认识的全部person,并对这些person的名字进行求和","g.V().has('name', '周科').outE('knows').inV().hasLabel('person').values('name').sum()"
'请帮我找出杜建国喜欢的评论，以及这些评论是由多少人创作的。',"g.V().has('person', 'name', '杜建国').out('likes').hasLabel('comment').in('creates').hasLabel('person').dedup().count()"
"帮我查询全部和person黄建聪有关系的person,返回这些点的年龄,性别","g.V().hasLabel('person').has('name', '黄建聪').bothE().otherV().hasLabel('person').project('age', 'gender').by('age').by('gender')"
"帮我查询源点身高在151到152之间且年龄在22到80之间且身高为空,边标签为支付,且满足条件时间戳是2031年03月24日且f0等于732的边,返回这些边的源点id加26的平均值","g.V().has('height', between(151, 152)).has('age', between(22, 80)).has('height', null).outE('pay').has('timeStamp', '2031-03-24').has('f0', 732).project('sum', 'count').by(values('srcId').sum()).by(constant(1L).sum()).select(values).math('sum / count').by(constant(26).sum())"
"查询全部源点满足条件状态不是Finished或名字不等于ISSUE-413,目标点满足条件id在55到57之间,星数大于等于619,且类型是属于的边","g.V().has('status', neq('Finished')).or().has('name', neq('ISSUE-413')).outE('belong').as('e').inV().has('id', between(55, 57)).has('stars', gte(619)).select('e')"
weight的平均值乘weight的值,"g.V().hasLabel('a').values('weight').fold().as('weights').select('weights').unfold().mean().as('avg').select('weights').unfold().as('w').select('avg', 'w').by().by().math('_ * _')"
"请帮我查找名为PR-471的点属于的全部仓库,并对这些仓库的星数进行求和","g.V().has('name', 'PR-471').outE('belong').inV().hasLabel('repository').values('stars').sum()"
 查询属于美国城市的belong关系。,"g.V().has('country', 'name', '美国').inE('belong').outV()"
'徐建聪主演的电影在其他影院上映的数量是多少？',"g.V().has('person', 'name', '徐建聪').outE('watch').inV().hasLabel('film').inE('releases').outV().hasLabel('cinema').dedup().count()"
查询以认识关系关联了person陈建聪的person,"g.V().hasLabel('person').has('name', '陈建聪').inE('knows').outV().dedup()"
请帮我查找所有名为韩思琪的节点关联的person,"g.V().has('name', '韩思琪').outE('relates').inV().hasLabel('person')"
 返回一个包含点名为Prescription_341和Prescription_461的类型为处方的公共伙伴节点的列表。,"g.V().has('prescription', 'name', 'Prescription_341').out('partner').as('b').in('partner').has('prescription', 'name', 'Prescription_461').select('b').values('name')"
"返回146个和label为person的点有family关系的person,并且和这些person有lover关系的person",g.V().hasLabel('person').as('a').outE('family').inV().hasLabel('person').as('b').outE('lover').inV().hasLabel('person').as('c').select('c').limit(146)
"查询名为悲惨世界的读者或编辑或作家,以及与其有关的作家,并返回悲惨世界的名字和这些作家的名字","g.V().hasLabel(within('reader', 'publisher', 'author')).has('name', '悲惨世界').bothE().otherV().hasLabel('author').project('a_name', 'b_name').by(select('a').values('name')).by(values('name')).select('a').as('a')"
"找出名为黄国强和陈宏的,类型是卖家的点公共的相关者节点的名单","g.V().has('seller', 'name', '黄国强').outE('relation').inV().as('b').inE('relation').outV().has('seller', 'name', '陈宏').select('b').values('name')"
"查询名为中国军事论坛的点包含的全部帖子,并对这些帖子的语言进行求和","g.V().has('name', '中国军事论坛').outE('contain').inV().hasLabel('post').values('lang').sum()"
"查找id为67的prescription有关的patient的friend, 再查找和patient有关系的relation","g.V().has('prescription', 'id', 67).as('a').bothE().otherV().hasLabel('patient').as('b').bothE().otherV().hasLabel('patient').as('b').outE('friend').otherV().as('c').select('b').outE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
 查询张宏和张科共同关注的类型为'商品'的节点。,"g.V().has('name', '张宏').outE('look').inV().hasLabel('goods').as('b').inE('look').outV().has('name', '张科').select('b')"
"输入请求点id的列表644,131,311,57,404, 以属性id作为相等条件,返回买家张雪的朋友的相关者的伙伴","g.inject([644, 131, 311, 57, 404]).unfold().as('p').V().hasLabel('buyer').has('id', __.select('p')).has('name', '张雪').as('a').out('friend').as('b').out('relation').as('c').out('partner').as('d').select('d')"
"请帮我找出与LX001存在转账关系的账号,账号与贷款存在还款关系的点,返回这些点的金额","g.V().has('name', 'LX001').out('transfer').hasLabel('account').out('repay').hasLabel('loan').values('amount')"
 请问与吴宏有认识关系的谁？,"g.V().has('person', 'name', '吴宏').in('knows').hasLabel('person')"
"请帮我找出论坛知网包含的帖子, 令论坛的语言等于帖子的字数,令论坛的人数等于论坛的名字,令帖子的id等于帖子的创建时间, 返回论坛的名字, 帖子的名字","g.V().hasLabel('forum').has('name', '知网').outE('contain').inV().hasLabel('post').as('b').select('b').by(values('createTime').as('id')).as('a').select('a').by(union(values('name'), values('wordCount').as('lang'), values('name').as('peopleNumber')).fold()).select('a', 'b').by('name').by('name')"
查找以发布关系关联了书java程序设计的编辑,"g.V().hasLabel('book').has('name', 'java程序设计').inE('publish').outV().hasLabel('publisher')"
"使用列为id,value,peopleNumber, 数据为(15,322,637)的子查询作为输入表, 以属性id作为相等条件,请帮我查找满足条件身高不为空的节点","g.withSideEffect('p', [[id:15, value:322, peopleNumber:637]]).V().as('a').where(eq('p')).by('id').by(select('p').unfold().select('id')).where(neq('height')).by(constant(null))"
"输入请求点id的列表742,31,827, 源点的id等于输入表id,帮我查询名为吴建国和张月的,label为用户的点公共的朋友节点的名单","g.inject([742, 31, 827]).unfold().as('p').V().hasLabel('user').has('id', __.select('p')).has('name', '吴建国').as('a').outE('friend').inV().as('b').inE('friend').outV().hasLabel('user').has('name', '张月').as('c').select('b').values('name').dedup()"
"以907作为请求点id, 源点的id等于输入表id,帮我查询138个名为黄若涵的点relates的label为person的节点,且其age在20到52之间且gender是male","g.withSideEffect('p', [907]).V().has('id', within('p')).has('name', '黄若涵').outE('relates').inV().hasLabel('person').has('age', between(20, 52)).has('gender', 'male').limit(138)"
"查找名为体育学院的course或department,以及与其有关的department,并返回体育学院的size和这些department的id","g.V().has(label, within('course', 'department')).has('name', '体育学院').bothE().otherV().has(label, 'department').project('a_size', 'b_id').by(select(all, 'a').unfold().values('size')).by(values('id'))"
"请帮我查找和author吴思琪有关系的book,返回这些点的salary,age,height","g.V().has('author', 'name', '吴思琪').bothE().otherV().hasLabel('book').project('salary', 'age', 'height').by(values('salary')).by(values('age')).by(values('height'))"
 查找44到69之间大学中ID大于15的部门以及它们的教师名称。,"g.V().hasLabel('university').has('id', gt(15)).has('id', between(44, 69)).outE('has').inV().hasLabel('department').as('b').outE('has').inV().hasLabel('teacher').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
查找所有与company蚂蚁集团有关系的person的name,"g.V().hasLabel('company').has('name', '蚂蚁集团').bothE().otherV().hasLabel('person').values('name')"
 请帮我找出12个与'买家'标签相关的卖家，并找出这些卖家所拥有的商品。,g.V().hasLabel('buyer').outE('consult').inV().hasLabel('seller').outE('has').inV().hasLabel('goods').limit(12)
"帮我查询与person陈国强有关,且与person徐强有关系的person节点","g.V().has('person', 'name', '陈国强').bothE('colleague').otherV().hasLabel('person').bothE('parent').otherV().has('person', 'name', '徐强').select('b')"
给出label为person的点,g.V().hasLabel('person')
获取与person节点相关的person节点，并按salary进行分组，然后返回salary。,g.V().hasLabel('person').as('a').bothE('pay').otherV().hasLabel('person').as('b').select('b').values('salary').group().by(identity()).by(count())
 作者与名为孙红的人有关联，或者作者与孙红的朋友有关联的书。,"g.V().has('author', 'name', '孙红').bothE('friend').otherV().bothE('friend').otherV().hasLabel('book').dedup()"
"请帮我找出department土木学院has的teacher, 令department的size等于department的size,令department的name等于department的size的最大值, 返回department的size, teacher的salary","g.V().hasLabel('department').has('name', '土木学院').as('a').outE('has').inV().hasLabel('teacher').as('b').select('a', 'b').by('size').by('salary').project('a.size', 'b.salary').by(select('a')).by(select('b'))"
"找出所有id为130的卖家关联的商品,和以拥有关系关联了这些商品的其他卖家","g.V().has('seller', 'id', 130).bothE().otherV().hasLabel('goods').as('b').inE('has').otherV().hasLabel('seller').as('c').select('b', 'c')"
"给出和电影院有关联的电影节点,并根据其id,价值,名字分组,返回id,价值,名字,以及id减53的平均值","g.V().hasLabel('cinema').bothE('releases').otherV().hasLabel('film').group().by(project('id', 'value', 'name').by(values('id')).by(values('value')).by(values('name'))).by(__.values('id').math('_ - 53').mean()).select(values).unfold().project('b.id', 'b.value', 'b.name', 'AVG(b.id - 53)').by(select(keys).select('id')).by(select(keys).select('value')).by(select(keys).select('name')).by(select(values))"
 查询与publisher节点关联的book节点，按其ID分组并返回。,g.V().hasLabel('publisher').bothE('publish').otherV().hasLabel('book').group().by('id')
"查找151个用户赵思思和黄宏,共同的朋友","g.V().has('user', 'name', '赵思思').out('friend').as('b').in('friend').has('user', 'name', '黄宏').select('b').limit(151)"
查询耳鼻喉科的点和该科室所属的医生，将两者的结果一起返回。,"g.V().has('name', '耳鼻喉科').as('a').outE('has').inV().hasLabel('doctor').as('b').select('a').inE('belong').outV().hasLabel('doctor').as('c').select('a', 'b', 'c')"
"请帮我查找id为78的loan有关的account的partner, 再请帮我查找和account有关系的relation","g.V().has('loan', 'id', 78).as('a').bothE().as('e').otherV().hasLabel('account').as('b').bothE('partner').as('e2').otherV().as('c').select('b').bothE('relation').as('e3').otherV().as('d').select('a', 'b', 'c', 'd')"
"返回大学电子科技大学拥有的部门,被其他课程属于的数量","g.V().has('university', 'name', '电子科技大学').out('has').in('belong').count()"
 Bilibili公司申请贷款节点存款的账号是什么？,"g.V().hasLabel('company').has('name', 'Bilibili').outE('apply').inV().hasLabel('loan').outE('deposit').inV().hasLabel('account')"
给出前1个满足条件id小于20的prescription,"g.V().hasLabel('prescription').has('id', lt(20)).limit(1)"
 查找与Post_224有拥有关系的标签，再查找关联了Post_224的拥有关系的标签。,"g.V().hasLabel('post').has('name', 'Post_224').as('a').bothE('has').as('e', 'e2').otherV().hasLabel('tag').as('b', 'c').select('a', 'b', 'c')"
 请问从王伟开始，沿着知道类型的边走3度，会到达哪里？,"g.V().has('person', 'name', '王伟').repeat(out('knows').simplePath()).times(3).hasLabel('person').dedup()"
"请帮我查找与名为郑科和张红的点共同关联的,类型是person的节点","g.V().has('name', '郑科').outE('relates').inV().hasLabel('person').as('b').inE('relates').outV().has('name', '张红').select('b')"
请帮我找出department耳鼻喉科has的doctor节点creates的prescription,"g.V().has('department', 'name', '耳鼻喉科').out('has').out('creates').dedup()"
请帮我找出以购买关系关联了软件Spark的person,"g.V().hasLabel('software').has('name', 'Spark').inE('buy').outV().hasLabel('person')"
"请帮我查找所有用户以薪资,身高,年龄分组的薪资, 根据薪资从大到小排序","g.V().hasLabel('user').group().by(values('salary', 'height', 'age').fold()).by(values('salary').fold()).order(local).by(keys, desc)"
"用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询75个与吴建国和孙强都存在关系的编辑节点","g.V().has('name', '吴建国').outE().inV().hasLabel('publisher').as('b').inE().outV().has('name', '孙强').select('b').limit(75)"
"返回名为古代的标签或帖子,以及与其有关的论坛,并返回古代的价值和这些论坛的创建时间","g.V().or(hasLabel('tag'), hasLabel('post')).has('name', '古代').bothE().otherV().hasLabel('forum').project('a.value', 'b.createTime').by(select('a').values('value')).by(values('createTime'))"
 找出某个对象的伙伴，包括其伙伴的伙伴。,g.V().hasLabel('post').as('a').repeat(outE('partner').inV().simplePath()).times(2).emit().as('b').select('b').dedup()
 找出与标签为'person'的点有家庭关系的34个人，以及与这些人有恋爱关系的个人。,g.V().hasLabel('person').as('a').outE('family').as('e').inV().hasLabel('person').as('b').outE('lover').as('e2').inV().hasLabel('person').as('c').select('c').limit(34)
 找出公司源点且边类型为创造的边，并返回这些边中源点ID乘186和目标点ID加65的最大值。,"g.V().hasLabel('company').outE('creates').project('srcId_times_186', 'targetId_plus_65').by(values('srcId').math('_ * 186')).by(inV().id().math('_ + 65')).select(values).unfold().project('max_targetId_plus_65').by(select('targetId_plus_65').max()).select(values).unfold()"
"给出id为60的person认识的person, 并将person有关的person的性别的平均值赋值给person(b)的年龄, 接着查询person(b)的年龄小于60的person喜欢的person","g.V().hasLabel('person').has('id', 60).out('knows').hasLabel('person').as('b').project('b_age', 'd').by(__.coalesce(__.bothE().bothV().hasLabel('person').values('gender').mean(), __.constant(0))).by(__.where(__.select('b_age').is(lt(60))).out('likes').hasLabel('person'))"
"查询和person何思思有关的company,再查询和何思思apply的其他loan,返回它们","g.V().hasLabel('person').has('name', '何思思').as('a').bothE().otherV().hasLabel('company').as('b').select('a').outE('apply').otherV().hasLabel('loan').as('c').select('a', 'b', 'c')"
找出位于武汉市的大学,"g.V().hasLabel('city').has('name', '武汉').outE('contain').inV().hasLabel('university').as('a').select('a').by(valueMap(true)).as('a_result').select('a').outE('contain').inV().hasLabel('city').has('name', '武汉').as('b').select('b').by(valueMap(true)).select('a_result', 'b')"
"查找id为22的点的价值,学分","g.V().has('id', 22).project('value', 'credit').by(values('value')).by(values('credit'))"
"请帮我找出买家张轩取消的订单, 令买家的性别等于买家的id的平均值, 返回买家的身高, 订单的价格","g.V().hasLabel('buyer').has('name', '张轩').as('a').outE('cancel').inV().hasLabel('orders').as('b').select('a').sideEffect(properties('id').values().mean().as('gender_mean')).select('a', 'b').project('a_height', 'b_price').by(select('a').values('height')).by(select('b').values('price'))"
"给出名为loan_31的贷款,以及与其有关的公司,并返回loan_31的金额和这些公司的名字","g.V().hasLabel('loan').has('name', 'loan_31').as('a').bothE().otherV().hasLabel('company').as('b').select('a', 'b').by('amount').by('name')"
"查找性别不等于male的person认识的person的名称,以及这些person 认识的person的名称","g.V().hasLabel('person').has('gender', neq('male')).as('a').outE('knows').as('e').inV().hasLabel('person').as('b').outE('knows').as('e2').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
帮我查询186个与张若涵和马红都存在关系的药品或病人节点,"g.V().has('name', '张若涵').as('a').outE().as('e').inV().or(hasLabel('medicine'), hasLabel('patient')).as('b').inE().as('e2').outV().has('name', '马红').as('c').select('b').limit(186)"
"找出comment belong的film,返回其源点的id对64取余的值,以及目标点的value乘670的个数","g.V().hasLabel('comment').as('a').outE('belong').as('e').inV().hasLabel('film').as('b').select('a', 'b').by(id()).by(values('value')).project('mod_id', 'count_value').by(select('a').math('_ % 64')).by(select('b').math('_ * 670').count())"
"请帮我查找全部和company滴滴有关系的person,返回这些点的name,scale","g.V().hasLabel('company').has('name', '滴滴').bothE().otherV().hasLabel('person').project('b.name', 'b.scale').by('name').by('scale')"
"根据价值分组,计算价值减644的值",g.V().hasLabel('a').group().by('value').by(values('value').math('_ - 644'))
"输入表的列为name,id,value, 数据为('天涯论坛',70,397), 以属性name作为相等条件,返回全部源点标签等于论坛,边标签等于forum_contain_person的边,返回这些边的f0的和减820除2的最大值,和权重加148.55除805的值","g.withSideEffect('p', [['name': '天涯论坛', 'id': 70, 'value': 397]]).V().hasLabel('forum').has('name', within('天涯论坛')).outE('forum_contain_person').as('e').inV().as('b').select('e').project('max_sum', 'weight_expr').by(__.values('f0').sum().is(neq(null)).math('(_ - 820) / 2').max()).by(__.values('weight').math('(_ + 148.55) / 805'))"
给出以属于关系关联了仓库Flink的合并请求,"g.V().hasLabel('repository').has('name', 'Flink').inE('belong').outV().hasLabel('pullRequest')"
" 返回与 person 节点关联的 person 对象的 age,根据年龄分组。",g.V().hasLabel('person').bothE('pay').otherV().hasLabel('person').values('age').groupCount()
"给出62个和标签等于公司的点有合作关系的大学,以及和这些大学有属于关系的城市",g.V().hasLabel('company').as('a').outE('cooperate').as('e').inV().hasLabel('university').as('b').outE('belong').as('e2').inV().hasLabel('city').as('c').select('c').limit(62)
 请帮我查找华为和阿里这两个公司，它们在公共的朋友节点上的标签是公司的。,"g.V().has('company', 'name', '华为').out('friend').as('b').in('friend').has('company', 'name', '阿里').select('b').values('name')"
"请帮我查找全部用户以身高,薪资,性别分组的性别, 根据性别从小到大排序","g.V().hasLabel('user').group().by(values('height', 'salary', 'gender').fold()).by(values('gender').fold()).order(local).by(keys, asc).unfold().select(values).unfold()"
"查找账号Light转账的账号,以及转账这些账号的账号, 令账号的id等于账号的名字的数量,令账号(c)的上次登录时间等于账号(a)的创建时间的最大值,令账号的价值等于账号的价值除885, 返回账号(a)的创建时间,账号(b)的创建时间,账号(c)的价值","g.V().has('account', 'name', 'Light').as('a').outE('transfer').as('e').inV().hasLabel('account').as('b').inE('transfer').as('e2').outV().hasLabel('account').as('c').project('a_createTime', 'b_createTime', 'c_value').by(select('a').values('createTime')).by(select('b').values('createTime')).by(select('c').values('value').math('_ / 885'))"
找到与韩科和绿巨人电影相关的评论节点,"g.V().has('person', 'name', '韩科').out('creates').hasLabel('comment').as('b').in('belong').has('film', 'name', '绿巨人').select('b')"
"请帮我找出与person张思琪存在申请关系,且与账号LX001存在存款关系的贷款节点，返回这些贷款的id,及person张思琪的薪资,及账号LX001的名字","g.V().has('person', 'name', '张思琪').as('a').outE('apply').inV().hasLabel('loan').as('b').inE('deposit').outV().has('account', 'name', 'LX001').as('c').select('a', 'b', 'c').by('salary').by('id').by('name')"
"返回所有与买家有关系的买家节点,且买家节点的年龄不是17,并返回这些买家的id除id的值,以及买家的salary的最小值加3999加17的最小值","g.V().hasLabel('buyer').as('a').outE().inV().hasLabel('buyer').has('age', neq(17)).as('b').select('b').project('expr1', 'expr2').by(values('id').math('_ / _')).by(values('salary').min().math('_ + 3999 + 17').min())"
"请帮我查找被用户喜欢数量大于188的帖子,记为relationCount,再查询这些帖子喜欢的标签","g.V().hasLabel('post').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('likes').hasLabel('user').id().min()).select('a', 'relationCount').as('a_with_count').select('a_with_count').where(__.select('relationCount').is(gt(188))).select('a').out('likes').hasLabel('tag').dedup()"
 请帮我找出所有关于user或user的relationship的记录。,"g.V().hasLabel('user').outE('relation').inV().range(1, 2).dedup()"
根据buyer孙强取消的订单，返回包含这些商品的订单中的商品类别和价格。,"g.V().hasLabel('buyer').has('name', '孙强').outE('cancel').inV().hasLabel('orders').outE('contain').inV().hasLabel('goods').project('category', 'price').by('category').by('price')"
"查找所有源点label为仓库,边label为拥有,并且满足条件f0为空的边",g.V().hasLabel('repository').outE('has').hasNot('f0').elementMap()
请帮我找出与赵梅和何雪都有关的191个处方节点,"g.V().has('name', '赵梅').outE().inV().hasLabel('prescription').as('b').inE().outV().has('name', '何雪').select('b').limit(191)"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找所有person以name,salary分组的salary, 根据salary从大到小排序","g.V().hasLabel('person').group().by(values('name', 'salary')).by(values('salary')).order(local).by(values, desc)"
请帮我找出薪水为空、与medicine有关联的医生节点。返回这些节点的薪水除以3838后的余数，以及他们的身高减去174再乘以178的结果。,"g.V().hasLabel('medicine').outE().inV().hasLabel('doctor').has('salary', null).project('salary_mod', 'height_calc').by(values('salary').math('_ / 3838 % 1').math('_ * 3838')).by(values('height').math('_ - 174').math('_ * 178'))"
 请帮我找出和周红、黄建国都有关系的person节点。,"g.V().has('person', 'name', '周红').bothE('knows').otherV().hasLabel('person').as('b').bothE('pay').otherV().has('person', 'name', '黄建国').select('b')"
"给出person的三角的环,边类型为恋人, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('lover').inV().as('b').outE('lover').inV().as('c').where(__.outE('lover').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
 找出7位医生类型患者，并找出与这些患者有处方关系的患者。,g.V().hasLabel('doctor').as('a').outE('diagnose').as('e').inV().hasLabel('patient').as('b').outE('accept').as('e2').inV().hasLabel('prescription').as('c').select('c').limit(7)
"找出id为30的课程关联的课程,和以教关系关联了这些课程的其他教师","g.V().has('course', 'id', 30).bothE().otherV().hasLabel('course').as('b').inE('teach').otherV().hasLabel('teacher').as('c').select('b', 'c')"
请帮我查找前20个类型为认识的边,g.E().hasLabel('knows').limit(20)
"查询全部源点满足条件gender为male,目标点满足条件weight在493到572之间或status不是Closed或id减8的平均值小于515,且标签等于creates的边","g.V().has('gender', 'male').as('a').outE('creates').as('e').inV().as('b').where(or(and(__.as('b').has('weight', between(493, 572))), __.as('b').has('status', neq('Closed')), __.as('b').values('id').math('_ - 8').mean().is(lt(515)))).select('e')"
"查询源点标签等于医生,边标签等于属于,并且权重大于100.57,f0为空,或目标点id为41的边","g.V().hasLabel('doctor').outE('belong').or(and(has('weight', gt(100.57)), hasNot('f0')), has('targetId', 41)).as('e').select('e')"
"找出名为何轩的用户,以及与其有关的论坛,并返回何轩的性别和这些论坛的价值","g.V().has('user', 'name', '何轩').as('a').bothE().as('e').otherV().hasLabel('forum').as('b').select('a', 'b').by('gender').by('value')"
找到名为韩思思的学生,"g.V().hasLabel('student').has('name', '韩思思')"
给出前155个满足条件salary为空且gender是male的author,"g.V().hasLabel('author').has('gender', 'male').hasNot('salary').limit(155)"
"给出名为Prescription_381的医生,以及与其有关的部门,并返回Prescription_381的id和这些部门的名字","g.V().hasLabel('doctor').has('name', 'Prescription_381').as('a').bothE().as('e').otherV().hasLabel('department').as('b').select('a', 'b').by('id').by('name')"
"给出所有id为90的帖子关联的用户,和以包含关系关联了这些用户的其他论坛","g.V().hasLabel('post').has('id', 90).bothE().otherV().hasLabel('user').as('b').inE('contain').otherV().hasLabel('forum').as('c').select('b', 'c')"
 请帮我查找等级小于2的大学中，它们的部门名称和所属教师名称。,"g.V().hasLabel('university').has('level', lt(2)).outE('has').inV().hasLabel('department').as('b').outE('has').inV().hasLabel('teacher').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
请帮我找出名为王红的点选择的课程,"g.V().has('name', '王红').outE('selects').inV().hasLabel('course')"
"查询被course belong数量大于183的department,记为relationCount,再查询这些department belong的department","g.V().hasLabel('department').as('a').project('a', 'relationCount').by(identity()).by(__.in('belong').hasLabel('course').id().max()).select('a', 'relationCount').as('a', 'relationCount').select('a').where(select('relationCount').is(gt(183))).out('belong').hasLabel('department').dedup()"
"查询被person knows数量大于59的person,记为relationCount,再查询这些person relates的person","g.V().hasLabel('person').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('knows').hasLabel('person').values('id').mean()).select('a', 'relationCount').as('a_with_count').select('a', 'relationCount').where(__.select('relationCount').is(gt(59))).select('a').out('relates').hasLabel('person').dedup()"
"用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));查找类型是user_likes_repository,并且f1不是true且f0不为空且targetId不为空的边","g.E().hasLabel('user_likes_repository').has('f1', neq(true)).has('f0', neq(null)).has('targetId', neq(null))"
帮我找一下名为李建聪、标签为读者的点，把它们的名字列出来,"g.V().hasLabel('reader').has('name', '李建聪').values('name')"
请帮我找出以属于关系关联了部门外科的医生,"g.V().has('department', 'name', '外科').inE('belong').outV().hasLabel('doctor')"
 找出与王思琪有关联且申请贷款的公司，并返回它们的权重。,"g.V().has('name', '王思琪').outE('invest').inV().hasLabel('company').outE('apply').inV().hasLabel('loan').values('weight')"
返回全部类型为作家的点,g.V().hasLabel('author')
"查找名为线性代数的学生或课程或大学,以及与其有关的大学,并返回线性代数的名字和这些大学的价值","g.V().has(label, within('student', 'course', 'university')).has('name', '线性代数').bothE().otherV().has(label, 'university').project('a_name', 'b_value').by(select(all, 'v').unfold().has(label, within('student', 'course', 'university')).has('name', '线性代数').values('name')).by(values('value'))"
 查找与书三体有引用关系且出版商为马红的书籍，并将它们都返回。,"g.V().hasLabel('book').has('name', '三体').as('a').outE('refers').inV().hasLabel('book').as('b').select('a').V().hasLabel('publisher').has('name', '马红').as('c').outE('publish').inV().hasLabel('book').as('d').select('a', 'b', 'c', 'd')"
"给出名为悬疑的标签,以及与其有关的帖子,并返回悬疑的价值和这些帖子的id","g.V().hasLabel('tag').has('name', '悬疑').as('a').bothE().as('e').otherV().hasLabel('post').as('b').select('a', 'b').by('value').by('id')"
找出所有与部门经管学院有关系的教师的id,"g.V().has('department', 'name', '经管学院').bothE().otherV().hasLabel('teacher').values('id')"
 查找person王强所属的公司节点，以及与software Spark存在创建关系的公司节点，返回这些公司的ID、名称、person王强的性别以及software Spark的ID。,"g.V().has('person', 'name', '王强').as('a').outE('belong').inV().hasLabel('company').as('b').inE('creates').outV().has('software', 'name', 'Spark').as('c').select('a', 'b', 'c').by('gender').by(values('id', 'name')).by('id')"
"请帮我找出属于用户王思琪喜欢的仓库,的事项","g.V().hasLabel('user').has('name', '王思琪').outE('likes').inV().hasLabel('repository').as('b').inE('belong').outV().hasLabel('issue').as('c').select('b', 'c')"
"输入表的列为value,name,id, 数据为(212,'武汉大学',85),(564,'清华大学',78), 源点的id等于输入表id,找出全部源点标签等于department,目标点标签等于teacher,标签等于department_has_teacher的边","g.withSideEffect('p', [[212, '武汉大学', 85], [564, '清华大学', 78]]).V().hasLabel('department').as('a').where(__.select('a').values('id').is(within(__.select('p').unfold().tail(1)))).outE('department_has_teacher').as('e').inV().hasLabel('teacher').select('e')"
 请帮我查找放射科部门中由哪个医生节点开具的处方。,"g.V().hasLabel('department').has('name', '放射科').out('has').hasLabel('doctor').out('creates').hasLabel('prescription')"
查询与贷款loan_46有关系的公司的规格,"g.V().has('loan', 'name', 'loan_46').bothE().otherV().hasLabel('company').values('scale')"
帮我查询全部名为Tugraph的节点拥有的用户或合并请求或仓库,"g.V().has('name', 'Tugraph').outE('has').inV().hasLabel(within('user', 'pullRequest', 'repository')).dedup()"
找出与土木学院有has关系的大学,"g.V().hasLabel('department').has('name', '土木学院').inE('has').outV().hasLabel('university')"
请帮我找出label为公司的点,g.V().hasLabel('company')
"查询与评论Comment_340存在属于关系,且与标签文艺存在拥有关系的电影节点，返回这些电影的id,及评论Comment_340的名字,及标签文艺的价值","g.V().hasLabel('comment').has('name', 'Comment_340').as('a').outE('belong').inV().hasLabel('film').as('b').inE('has').outV().hasLabel('tag').has('name', '文艺').as('c').select('a', 'b', 'c').by('name').by('id').by('value')"
"以(51,'Prescription_158',202),(56,'Prescription_127',677)作为请求表数据,属性分别为id,name,weight, 源点的id等于输入表id,查询user以age分组的salary, 根据salary从大到小排序","g.inject([['id':51,'name':'Prescription_158','weight':202],['id':56,'name':'Prescription_127','weight':677]]).as('p').unfold().as('row').select('row').by().V().hasLabel('user').has('id',select('row').select('id')).group().by('age').by(values('salary').fold()).order(local).by(values, desc)"
"请帮我找出cancel buyer孙建聪cancel的orders,的buyer","g.V().hasLabel('buyer').has('name', '孙建聪').outE('cancel').inV().hasLabel('orders').as('b').inE('cancel').outV().hasLabel('buyer').as('c').select('b', 'c')"
"使用列为height,gender,id, 数据为(178,'male',88)的子查询作为输入表, 源点的gender等于输入表gender,给出id为36的department有关的doctor的friend, 再给出和doctor有关系的relation","g.withSideEffect('p', [['height':178, 'gender':'male', 'id':88]]).V().hasLabel('department').has('gender', __.select('p').unfold().select('gender')).has('id', '36').as('a').bothE().otherV().hasLabel('doctor').as('b').both().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"找出和标签为用户的点有喜欢关系的仓库,以及和这些仓库有拥有关系的用户,以及和这些用户有喜欢关系的仓库",g.V().hasLabel('user').as('a').out('likes').hasLabel('repository').as('b').in('has').hasLabel('user').as('c').out('likes').hasLabel('repository').as('d').select('d')
"查找类型为patient的点,返回93个",g.V().hasLabel('patient').limit(93)
"查询创造病人徐思思接受的处方,的医生","g.V().hasLabel('patient').has('name', '徐思思').outE('accept').inV().hasLabel('prescription').as('b').inE('creates').outV().hasLabel('doctor').as('c').select('b', 'c')"
耳鼻喉科部门合伙人的朋友关系,"g.V().has('department', 'name', '耳鼻喉科').out('partner').out('friend').out('relation')"
"请帮我查找被buyer徐科consult的seller,和徐科look的goods","g.V().hasLabel('buyer').has('name', '徐科').as('b').outE('consult').inV().hasLabel('seller').as('a').select('b').outE('look').inV().hasLabel('goods').as('c').select('a', 'b', 'c')"
"找出和person陈建国有knows关系的person,再找出以likes关系关联了陈建国的person","g.V().has('person', 'name', '陈建国').as('a').out('knows').as('b').select('a').in('likes').as('c').select('a', 'b', 'c')"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));查询与公司微软和蚂蚁集团都存在company_belong_city关系的点","g.V().has('company', 'name', '微软').out('company_belong_city').as('b').in('company_belong_city').has('company', 'name', '蚂蚁集团').select('b')"
"帮我查询读者韩红喜欢的书,被其他书关联的数量","g.V().has('reader', 'name', '韩红').out('likes').in('relates').count()"
"请帮我找出scale不是medium或scale不等于757,且value等于465的节点","g.V().has('value', 465).filter(or(has('scale', neq('medium')), has('scale', neq(757))))"
"查找111个和标签为读者的点有喜欢关系的书,以及和这些书有引用关系的书",g.V().hasLabel('reader').out('likes').hasLabel('book').out('refers').hasLabel('book').limit(111)
找出澳大利亚这个国家所包含的城市节点,"g.V().has('country', 'name', '澳大利亚').out('contain').hasLabel('city').out('belong').hasLabel('country')"
"输入请求点id的列表795,282,195, 以属性id作为相等条件,找出7个与赵轩和吴轩都存在关系的person节点","g.inject([795, 282, 195]).unfold().as('p').V().has('id', __.as('p')).has('name', '赵轩').outE().as('e').inV().hasLabel('person').as('b').inE().as('e2').outV().has('name', '吴轩').select('b').limit(7)"
 查询与买家孙梅有咨询关系的卖家，以及与卖家李轩有拥有关系的商品，返回两者。,"g.V().has('buyer', 'name', '孙梅').as('a').out('consult').as('b').V().has('seller', 'name', '李轩').as('c').out('has').as('d').select('a', 'b', 'c', 'd')"
"查找所有与推特存在包含关系的用户,用户与帖子存在发布关系的点,返回这些点的字数","g.V().has('name', '推特').out('contain').hasLabel('user').out('publish').values('wordCount')"
"找出id为67的点的height,age,salary","g.V().has('id', 67).project('height', 'age', 'salary').by(values('height')).by(values('age')).by(values('salary'))"
 请帮我查找华中科技大学所在城市，并返回该城市中公司的规模、员工人数。,"g.V().has('university', 'name', '华中科技大学').out('belong').as('b').out('contain').hasLabel('company').project('scale', 'peopleNumber').by('scale').by('peopleNumber')"
"找出所有账号以是否冻结分组的是否冻结, 根据是否冻结升序排序","g.V().hasLabel('account').group().by('isBlock').order(local).by(keys, asc).select(values).unfold().group().by(keys).by(select(values).unfold().values('isBlock').fold()).select(keys).unfold()"
找出reader likes的身高大于168或者年龄大于等于70的book，以及这些book相关的book的名称。,"g.V().hasLabel('reader').has('height', gt(168)).as('a').outE('likes').inV().hasLabel('book').as('b').outE('relates').inV().hasLabel('book').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
获取department体育学院的所有教师，以及他们所教课程的ID和名称。,"g.V().has('department', 'name', '体育学院').out('has').hasLabel('teacher').out('teach').hasLabel('course').project('c.id', 'c.name').by('id').by('name')"
"查询类型是department的点,返回35个",g.V().hasLabel('department').limit(35)
"查找类型是用户的点,返回157个",g.V().hasLabel('user').limit(157)
"返回公司谷歌合作的大学, 令公司的价值等于大学的名字,令大学的名字等于大学的id, 返回公司的价值, 大学的等级","g.V().hasLabel('company').has('name', '谷歌').as('a').outE('cooperate').inV().hasLabel('university').as('b').project('a_value', 'b_level').by(select('b').values('name')).by(select('b').values('level'))"
"查询马梅的点创造的处方,然后查询马梅被拥有的部门,一起返回","g.V().has('name', '马梅').as('a').outE('creates').inV().hasLabel('prescription').as('b').select('a').inE('has').outV().hasLabel('department').as('c').select('a', 'b', 'c')"
"给出与cinema UME有关,且与tag古代有关系的film节点","g.V().hasLabel('cinema').has('name', 'UME').outE('releases').inV().hasLabel('film').as('b').outE('has').inV().hasLabel('tag').has('name', '古代').select('b')"
查找与大学四川大学有合作关系的2跳以内的环,"g.V().has('university', 'name', '四川大学').as('a').bothE('cooperate').otherV().as('b').where(loops().is(lt(3))).select('a', 'b').by('id').by('id')"
查找前179个满足条件id是33或id不是14或名字是动作的标签,"g.V().hasLabel('tag').or(has('id', 33), has('id', neq(14)), has('name', '动作')).limit(179)"
"查询所有和名为BIN的账号有伙伴关系,或有伙伴的伙伴关系的贷款","g.V().has('account', 'name', 'BIN').bothE('partner').otherV().hasLabel('loan').dedup()"
"帮我查询作家孙红撰写的书,被其他编辑发布的数量","g.V().has('author', 'name', '孙红').out('write').in('publish').hasLabel('publisher').count()"
 请帮我找出使用Redis的全部软件，以及Redis的创建公司。,"g.V().has('name', 'Redis').as('a').outE('uses').inV().hasLabel('software').as('b').select('a').inE('creates').outV().hasLabel('company').as('c').select('a', 'b', 'c')"
给出前22个学分的最大值大于1的课程,g.V().hasLabel('course').where(values('credit').max().is(gt(1))).limit(22)
"给出认识书孤城关联的书,的书","g.V().hasLabel('book').has('name', '孤城').as('a').outE('relates').inV().as('b').inE('knows').outV().as('c').select('b', 'c')"
"给出id为98的person关联的person,和以支付关系关联了这些person的其他person","g.V().has('person', 'id', 98).bothE().otherV().hasLabel('person').as('b').inE('pay').otherV().hasLabel('person').as('c').select('b', 'c')"
查找与论坛天涯论坛和中国诗词论坛都存在包含关系的点,"g.V().hasLabel('forum').has('name', '天涯论坛').outE('contain').inV().as('b').inE('contain').outV().hasLabel('forum').has('name', '中国诗词论坛').select('b')"
"帮我查询和label为读者的点有喜欢关系的书,且和这些书有引用关系的书,且和这些书有引用关系的书",g.V().hasLabel('reader').as('a').out('likes').hasLabel('book').as('b').out('refers').hasLabel('book').as('c').out('refers').hasLabel('book').as('d').select('d')
"查找has tag喜剧的post,和这些post has的tag","g.V().hasLabel('tag').has('name', '喜剧').inE('has').outV().as('b').outE('has').inV().as('c').select('b', 'c')"
"以(67,98033,5502),(74,33708,5534)作为请求表数据,属性分别为id,area,peopleNumber, 源点的id等于输入表id,查找城市的朋友,或其朋友的朋友","g.withSideEffect('p', [[67, 98033, 5502], [74, 33708, 5534]]).V().hasLabel('city').as('a').where(__.select('a').values('id').is(within(__.select('p').unfold().limit(1)))).repeat(__.out('friend').simplePath()).times(2).emit().dedup().project('b').by(__.identity())"
找出在东京和纽约都有朋友的15个城市。,"g.V().has('city', 'name', '东京').out('friend').as('b').in('friend').has('city', 'name', '纽约').select('b').limit(15)"
找出前191个满足条件薪资大于7798的用户,"g.V().hasLabel('user').has('salary', gt(7798)).limit(191)"
"返回名为XXRepo的,status是Running的relation,返回这些relation的id,和边的weight","g.V().has('name', 'XXRepo').outE('relation').as('e').inV().has('status', 'Running').select('e').by('weight').as('weight').select('e').by(id).as('id').select('id', 'weight')"
"返回前173个id小于等于25或salary不等于9249,且height大于183的person","g.V().hasLabel('person').has('height', gt(183)).or(has('id', lte(25)), has('salary', neq(9249))).limit(173)"
"请帮我找出person陈强的标签为伙伴的边,并根据时间戳升序排列,返回32个","g.V().has('person', 'name', '陈强').outE('partner').as('e').inV().as('b').select('e', 'b').order().by(select('e').values('timeStamp'), asc).limit(32).select('b')"
"给出43个医生何建国和杜思思,共同的伙伴","g.V().hasLabel('doctor').has('name', '何建国').as('a').outE('partner').inV().as('b').inE('partner').outV().hasLabel('doctor').has('name', '杜思思').as('c').select('b').limit(43)"
"查找122个电影变形金刚和复仇者联盟,共同的相关者","g.V().has('film', 'name', '变形金刚').outE('relation').inV().as('b').inE('relation').outV().has('film', 'name', '复仇者联盟').select('b').limit(122)"
 找出别的标签。,"g.V().hasLabel('tag').has('name', '其他')"
"请帮我找出用户的相关者,或其相关者的相关者","g.V().hasLabel('user').as('a').outE('relation').inV().hasLabel('user').range(1, 2).as('b').select('b')"
"输入表的列为name,id,value, 数据为('Order_185',0,484),('Order_465',71,995),('Order_298',38,477), 源点的id等于输入表id,帮我查询和buyer陈科有关的goods,称为X,再帮我查询和这个X有关联的其他goods,以及和X有关联的orders","g.inject([['Order_185', 0, 484], ['Order_465', 71, 995], ['Order_298', 38, 477]]).as('p').unfold().as('p_row').select('p_row').project('name', 'id', 'value').by(limit(local, 1)).by(limit(local, 2)).by(limit(local, 3)).as('p').V().hasLabel('buyer').has('id', select('p').select('id')).has('name', '陈科').as('a').bothE().as('e').otherV().hasLabel('goods').as('b').bothE().as('e2').otherV().hasLabel('goods').as('c').select('b').bothE().as('e3').otherV().hasLabel('orders').as('d').select('a', 'b', 'c', 'd')"
"给出与名为黄建国和韩红的点共同观看的,label为电影的节点","g.V().has('name', '黄建国').as('a').outE('watch').inV().hasLabel('film').as('b').inE('watch').outV().has('name', '韩红').as('c').select('b')"
"查询12个名为纽约的点contain的类型为university的节点,且节点value在66到200之间且name不等于电子科技大学","g.V().has('name', '纽约').outE('contain').inV().hasLabel('university').has('value', between(66, 200)).has('name', neq('电子科技大学')).limit(12)"
"返回名为李月的教师,以及与其有关的大学,并返回李月的名字和这些大学的名字","g.V().hasLabel('teacher').has('name', '李月').as('a').bothE().as('e').otherV().hasLabel('university').as('b').select('a', 'b').by('name').by('name')"
"给出所有名为吴雪的点的,id大于0或价值为44的伙伴,返回这些伙伴的价值,和边的f1","g.V().has('name', '吴雪').outE('partner').as('e').inV().has('id', gt(0)).or().has('value', 44).project('b_value', 'e_f1').by('value').by(select('e').values('f1'))"
"请帮我找出所有与商品有关系的买家节点,且买家节点的年龄等于5697,并返回这些买家的身高对190取余的值,以及买家的薪资乘7592加80减9117的求和值","g.V().hasLabel('goods').as('a').outE().as('e').inV().hasLabel('buyer').has('age', 5697).as('b').project('height_mod', 'salary_sum').by(__.select('b').values('height').math('_ % 190')).by(__.select('b').values('salary').math('_ * 7592 + 80 - 9117').sum())"
"返回和名为南京大学的大学有相关者关系,或有相关者的相关者关系的公司","g.V().hasLabel('university').has('name', '南京大学').outE('relation').inV().hasLabel('company').union(__.identity(), __.outE('relation').inV().hasLabel('company')).dedup()"
"请帮我查找认识person孙若涵关联的person,的person","g.V().has('person', 'name', '孙若涵').outE('relates').inV().as('b').inE('knows').outV().as('c').select('b', 'c')"
"输入请求点id的列表166,313, 以属性id作为相等条件,返回名为Post_429和Post_326的,label为帖子的点公共的相关者节点的名单","g.withSideEffect('p', [166, 313]).V().hasLabel('post').has('id', within('p')).has('name', 'Post_429').out('relation').as('b').in('relation').hasLabel('post').has('name', 'Post_326').select('b').values('name').dedup()"
"使用列为id,salary,height, 数据为(22,2031,153)的子查询作为输入表, 源点的salary等于输入表salary,返回和forum中国诗词论坛有关的forum,再返回和中国诗词论坛forum_contain_post的其他post,返回它们","g.withSideEffect('p', [['id': 22, 'salary': 2031, 'height': 153]]).V().hasLabel('forum').has('salary', __.select('p').unfold().select('salary')).has('name', '中国诗词论坛').as('a').both().hasLabel('forum').as('b').select('a').outE('forum_contain_post').inV().hasLabel('post').as('c').select('a', 'b', 'c')"
 请问哪里有播放电影《星际穿越》的影院？,"g.V().hasLabel('film').has('name', '星际穿越').in('releases').hasLabel('cinema')"
 找出性别为女性或薪水不等于9360的人的关联人，以及这些人的关联人。,"g.V().hasLabel('person').has('gender', 'female').or().has('salary', neq(9360)).as('a').outE('relates').as('e').inV().hasLabel('person').as('b').outE('relates').as('e2').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name')"
给出和帖子Post_333有1跳关系的论坛,"g.V().hasLabel('post').has('name', 'Post_333').outE().inV().hasLabel('forum').dedup()"
"请帮我找出id为80的大学有关的课程的朋友, 再请帮我找出和课程有关系的伙伴","g.V().has('university', 'id', 80).as('a').bothE().otherV().hasLabel('course').as('b').bothE('friend').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
 找出与陈国强有亲友关系或朋友的朋友所在的部门。,"g.V().has('doctor', 'name', '陈国强').bothE('friend').bothV().range(1, 2).hasLabel('department').dedup()"
返回所有与名为'建国大业'的电影有直接或间接关系的标签,"g.V().has('film', 'name', '建国大业').bothE('partner').otherV().hasLabel('tag').dedup()"
找到黄国强病人的处方中包含哪些药品,"g.V().has('patient', 'name', '黄国强').out('accept').hasLabel('prescription').out('contain').hasLabel('medicine')"
"返回person支付的person, 令person(b)的年龄的值等于喜欢person的person的性别的平均值, 再查找person喜欢的person","g.V().hasLabel('person').as('a').outE('pay').hasLabel('pay').inV().hasLabel('person').as('b').select('b').as('b_avg').inE('likes').hasLabel('likes').outV().hasLabel('person').values('gender').mean().as('avg_gender').select('b_avg').property('age', __.select('avg_gender')).select('b').outE('likes').hasLabel('likes').inV().hasLabel('person').as('d').select('b').values('age').as('b_age').select('b_age', 'd')"
人数除684加80的值,g.V().hasLabel('a').values('peopleNumber').math('_ / 684 + 80')
"请帮我查找id为60的department有关的department的friend, 再请帮我查找和department有关系的partner","g.V().has('department', 'id', 60).as('a').bothE().otherV().hasLabel('department').as('b').bothE().hasLabel('friend').otherV().as('c').select('b').bothE().hasLabel('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
获取与部门点关联的教师节点，并按其ID进行分组，返回ID。,g.V().hasLabel('department').bothE('has').otherV().hasLabel('teacher').values('id').group().by(identity()).select(keys)
帮我查询全部类型是person的点,g.V().hasLabel('person')
"找出98个id小于49或名字不等于陈科,且年龄不是74的person,根据身高升序排列","g.V().hasLabel('person').has('id', lt(49)).or().has('name', neq('陈科')).has('age', neq(74)).order().by('height', asc).limit(98)"
给出论坛中国诗词论坛包含的用户节点发布的帖子,"g.V().hasLabel('forum').has('name', '中国诗词论坛').outE('contain').inV().hasLabel('user').outE('publish').inV().hasLabel('post')"
 找出5个拥有'部门'标签的点的教师，并找出这些教师教授的课程。,g.V().hasLabel('department').out('has').hasLabel('teacher').out('teach').hasLabel('course').limit(5)
"查找与论坛推特有关,且与标签喜剧有关系的帖子节点","g.V().has('forum', 'name', '推特').out('contain').as('b').in('has').has('tag', 'name', '喜剧').select('b')"
请帮我找出所有与person有关联的人节点，这些人节点的身高必须大于或等于161，并返回他们的id的平方和，以及他们年龄对年龄取模后乘以39的最小值。,"g.V().hasLabel('person').as('a').outE().as('e').inV().hasLabel('person').has('height', gte(161)).as('b').select('b').project('id_squared', 'age_mod').by(values('id').math('_ * _')).by(values('age').math('_ % _').math('_ * 39')).select(values).fold().project('id_squared_sum', 'min_age_mod').by(unfold().select('id_squared').sum()).by(unfold().select('age_mod').min())"
 查询所有起点标签为买家，终点标签为订单，标签为取消的边。,g.V().hasLabel('buyer').outE('cancel').where(inV().hasLabel('orders'))
 请问能否帮我找出王建聪partner的朋友关系？,"g.V().has('user', 'name', '王建聪').out('partner').out('friend').out('relation')"
 查询包含以下内容的评论：评论ID大于等于35或创建时间不为2018年11月19日的，以及它们所属的电影的名称和这些电影拥有的标签。,"g.V().hasLabel('comment').or(has('id', gte(35)), has('createTime', neq('2018-11-19'))).outE('belong').inV().hasLabel('film').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 找出100个与两个人李宏和韩轩都有联系的订单。,"g.V().has('name', '李宏').outE().inV().hasLabel('orders').as('b').inE().outV().has('name', '韩轩').select('b').limit(100)"
"以21,569,916,411作为请求点id, 以属性id作为相等条件,帮我查询和doctor韩梅有doctor_creates_prescription关系的prescription,再帮我查询以doctor_belong_department关系关联了韩梅的department","g.inject([21, 569, 916, 411]).as('p').V().hasLabel('doctor').as('a').where(and(__.select('a').values('id').where(within(select('p'))), __.select('a').has('name', '韩梅'))).outE('doctor_creates_prescription').inV().hasLabel('prescription').as('b').select('a').inE('doctor_belong_department').outV().hasLabel('department').as('c').select('a', 'b', 'c')"
"查询和person马强有关的软件,称为X,再查询和这个X有关联的其他公司,以及和X有关联的公司","g.V().has('person', 'name', '马强').as('a').bothE().otherV().hasLabel('software').as('b').bothE().otherV().hasLabel('company').as('c').select('b').bothE().otherV().hasLabel('company').as('d').select('a', 'b', 'c', 'd')"
"帮我查询111个film星际穿越和变形金刚,共同的friend","g.V().has('film', 'name', '星际穿越').out('friend').as('b').in('friend').has('film', 'name', '变形金刚').select('b').limit(111)"
 请帮我查找韩国强在开源软件中提交的代码，并返回该代码使用的开源软件的版本。,"g.V().has('person', 'name', '韩国强').outE('commits').inV().hasLabel('software').outE('uses').inV().hasLabel('software').project('value', 'openSource').by('value').by('openSource')"
"以633,424,191,696,680作为请求点id, 以属性id作为相等条件,返回所有city的partner,或其partner的partner","g.inject([633, 424, 191, 696, 680]).unfold().as('p').V().hasLabel('city').has('id', __.as('p')).repeat(bothE('partner').otherV().simplePath()).times(2).emit().dedup()"
查询全部和goods短袖有2跳关系的orders,"g.V().hasLabel('goods').has('name', '短袖').repeat(bothE().otherV().simplePath()).times(2).hasLabel('orders').dedup()"
"查找和person孙月有关的person,称为X,再查找和这个X有关联的其他person,以及和X有关联的person","g.V().has('person', 'name', '孙月').as('a').bothE().bothV().hasLabel('person').where(neq('a')).dedup().as('b').bothE().bothV().hasLabel('person').where(neq('b')).dedup().as('c').select('b').bothE().bothV().hasLabel('person').where(neq('b')).dedup().as('d').select('a', 'b', 'c', 'd')"
"给出与university电子科技大学有关系的teacher, 返回和这些teacher有关联的university的,value除value的值","g.V().has('university', 'name', '电子科技大学').bothE().otherV().hasLabel('teacher').bothE().otherV().hasLabel('university').project('result').by(math('value / value'))"
"查询全部名为张红的,id小于93或薪资不等于9786的相关者,返回这些相关者的名字,和边的时间戳,f1","g.V().has('name', '张红').outE('relation').as('e').inV().as('b').or(has('id', lt(93)), has('salary', neq(9786))).select('b', 'e').by('name').by(values('timeStamp', 'f1'))"
"查找和goods香蕉有关的goods,称为X,再查找和这个X有关联的其他buyer,以及和X有关联的orders","g.V().has('goods', 'name', '香蕉').as('a').bothE().otherV().hasLabel('goods').as('b').bothE().otherV().hasLabel('buyer').as('c').select('b').bothE().otherV().hasLabel('orders').as('d').select('a', 'b', 'c', 'd')"
"以(85,359,'眼科')作为请求表数据,属性分别为id,weight,name, 源点的weight等于输入表weight,请帮我找出名为黄建聪和黄伟的,标签等于病人的点公共的朋友节点的名单","g.withSideEffect('p', [['id':85, 'weight':359, 'name':'眼科']]).V().hasLabel('patient').has('weight', __.select('p').unfold().select('weight')).has('name', '黄建聪').out('friend').as('b').in('friend').hasLabel('patient').has('name', '黄伟').select('b').values('name')"
"给出被公司合作数量大于69的大学,记为relationCount,再查询这些大学合作的公司","g.V().hasLabel('university').as('a').project('a', 'relationCount').by(identity()).by(bothE('cooperate').hasLabel('cooperate').otherV().hasLabel('company').id().fold().count(local)).where(select('relationCount').is(gt(69))).select('a').outE('cooperate').hasLabel('cooperate').inV().hasLabel('company').dedup()"
"返回id为66的买家咨询的卖家, 并将卖家有关的买家的id的和赋值给卖家的id, 接着查询卖家的id小于66的卖家拥有的商品","g.V().has('buyer', 'id', 66).out('consult').hasLabel('seller').as('b').sideEffect(__.select('b').sack(assign).by(constant(0)).select('b').in().hasLabel('buyer').sack(sum).by('id').select('b').property('id', __.sack())).select('b').has('id', lt(66)).out('has').hasLabel('goods').project('b.id', 'd').by(__.select('b').values('id')).by()"
"查询18个名字是黄月的person,根据薪资升序排列","g.V().hasLabel('person').has('name', '黄月').order().by('salary', asc).limit(18)"
"查找与公司微软有关,且与国家越南有关系的城市节点","g.V().hasLabel('company').has('name', '微软').bothE('belong').otherV().hasLabel('city').as('b').bothE('belong').otherV().hasLabel('country').has('name', '越南').select('b')"
"请帮我找出和类型是公司的点有申请关系的贷款,且和这些贷款有存款关系的账号,且和这些账号有转账关系的账号",g.V().hasLabel('company').as('a').out('apply').hasLabel('loan').as('b').out('deposit').hasLabel('account').as('c').out('transfer').hasLabel('account').as('d').select('d')
"帮我查询book的三角的环,边标签等于refers, 并返回这些点的id","g.V().hasLabel('book').as('a').outE('refers').inV().as('b').outE('refers').inV().as('c').where(__.outE('refers').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"输入请求点id的列表721,465,288,762,647, 源点的id等于输入表id,查找所有与person李红有关系的person的age","g.inject([721, 465, 288, 762, 647]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('name', '李红').bothE().otherV().hasLabel('person').values('age')"
 查找与贷款defaultName1有存款关系的账户，再查找这些账户中与defaultName1有存款关联的账户。,"g.V().has('loan', 'name', 'defaultName1').as('a').outE('deposit').as('e').inV().hasLabel('account').as('b').select('a').inE('deposit').as('e2').outV().hasLabel('account').as('c').select('a', 'b', 'c')"
"给出类型为城市的点,返回100个",g.V().hasLabel('city').limit(100)
给出id为7的点的语言,"g.V().has('id', 7).values('lang')"
"以369作为请求点id, 源点的id等于输入表id,查询6个与四川大学和南京大学都存在关系的teacher节点","g.withSideEffect('p', [369]).V().has('id', __.select('p')).has('name', '四川大学').outE().inV().hasLabel('teacher').as('b').inE().outV().has('name', '南京大学').select('b').limit(6)"
 给出订单Order_166的朋友的伙伴的朋友,"g.V().hasLabel('orders').has('name', 'Order_166').out('friend').out('partner').out('partner')"
"帮我查询和person郑国强有关的person,再帮我查询和郑国强恋人的其他person,返回它们","g.V().has('person', 'name', '郑国强').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('lover').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
"返回被user Sam publish的post,和Sam publish的post","g.V().hasLabel('user').has('name', 'Sam').as('b').outE('publish').as('e').inV().hasLabel('post').as('a').select('b').outE('publish').as('e2').inV().hasLabel('post').as('c').select('a', 'b', 'c')"
 Bob和陈梅之间没有共同的医生关系。,"g.V().hasLabel('doctor').has('name', 'Bob').outE('relation').inV().as('b').inE('relation').outV().hasLabel('doctor').has('name', '陈梅').select('b').limit(58)"
"请帮我查找咨询卖家韩建聪的买家,和这些买家创造的订单","g.V().hasLabel('seller').has('name', '韩建聪').inE('consult').outV().hasLabel('buyer').as('b').outE('creates').inV().hasLabel('orders').as('c').select('b', 'c')"
"以('java',true,48),('python',false,35),('java',true,47),('go',false,13)作为请求表数据,属性分别为lang,openSource,id, 以属性id作为相等条件,给出person韩月buy的software节点uses的software","g.inject([['java', true, 48], ['python', false, 35], ['java', true, 47], ['go', false, 13]]).as('p').unfold().as('row').project('lang', 'openSource', 'id').by(__.select('row').limit(1)).by(__.select('row').skip(1).limit(1)).by(__.select('row').skip(2).limit(1)).as('p').V().hasLabel('person').has('id', __.select('p').select('id')).has('name', '韩月').outE('person_buy_software').inV().hasLabel('software').outE('software_uses_software').inV().hasLabel('software').dedup()"
给出被软件Kafka使用的软件,"g.V().has('software', 'name', 'Kafka').as('b').outE('uses').inV().hasLabel('software').as('a').select('a', 'b')"
 请问有没有小于6783的买家取消的订单，还有包含哪些商品？,"g.V().hasLabel('buyer').has('salary', lt(6783)).outE('cancel').inV().hasLabel('orders').as('b').outE('contain').inV().hasLabel('goods').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
返回标签等于电影或person的点,"g.V().hasLabel(within('film', 'person'))"
"以10,30,645作为请求点id, 源点的id等于输入表id,给出所有person以height,gender分组的age, 根据age升序排序","g.inject([10, 30, 645]).as('p').V().hasLabel('person').as('a').where(eq('p')).by('id').by().select('a').group().by(values('height', 'gender').fold()).by(values('age').fold()).order(local).by(values('age').unfold(), asc)"
id的最大值乘id的值,"g.V().hasLabel('a').values('id').max().as('maxId').select('maxId').as('a').select('maxId', 'a').by(identity()).by(constant(1).math('_ * _'))"
"查询person的三角的环,边label为申请, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('apply').inV().as('b').outE('apply').inV().as('c').where(__.outE('apply').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
 查询郑若涵取消的订单中包含的商品。,"g.V().hasLabel('buyer').has('name', '郑若涵').outE('cancel').inV().hasLabel('orders').outE('contain').inV().hasLabel('goods')"
"以704,44,184作为请求点id, 以属性id作为相等条件,请帮我找出标签等于loan_deposit_account,并且源点id小于等于16的边","g.withSideEffect('p', [704, 44, 184]).V().has('id', within('p')).outE('loan_deposit_account').has('srcId', lte(16))"
"找出与买家何月有关,且与买家李科有关系的卖家节点","g.V().hasLabel('buyer').has('name', '何月').bothE('consult').otherV().hasLabel('seller').as('b').bothE('ask').otherV().hasLabel('buyer').has('name', '李科').select('b')"
"请帮我查找和类型是公司的点有雇佣关系的person,以及和这些person有认识关系的person,以及和这些person有认识关系的person",g.V().hasLabel('company').as('a').out('employee').hasLabel('person').as('b').out('knows').hasLabel('person').as('c').out('knows').hasLabel('person').as('d').select('d')
"请帮我找出认识person陈建国关联的person,的person","g.V().hasLabel('person').has('name', '陈建国').as('a').outE('relates').as('e').inV().hasLabel('person').as('b').inE('knows').as('e2').outV().hasLabel('person').as('c').select('b', 'c')"
"给出与person杜国强有关,且与person王建聪有关系的person节点","g.V().has('person', 'name', '杜国强').bothE('family').otherV().hasLabel('person').as('b').bothE('parent').otherV().has('person', 'name', '王建聪').select('b')"
"查找全部company的friend,或其friend的friend",g.V().hasLabel('company').repeat(out('friend')).times(2).dedup()
"返回与论坛中国诗词论坛存在包含关系,且与标签古代存在拥有关系的帖子节点，返回这些帖子的创建时间,字数,名字,及论坛中国诗词论坛的人数,及标签古代的id","g.V().has('forum', 'name', '中国诗词论坛').as('a').outE('contain').inV().hasLabel('post').as('b').inE('has').outV().has('tag', 'name', '古代').as('c').select('a', 'b', 'c').by('peopleNumber').by(values('createTime', 'wordCount', 'name')).by('id')"
"请帮我查找全部和书点有认识关系的书节点,且边满足条件f0不是131.99,目标书节点字数大于72","g.V().hasLabel('book').as('a').outE('knows').has('f0', neq(131.99)).as('e').inV().hasLabel('book').has('wordCount', gt(72)).as('b').select('b')"
请帮我找出所有与教师赵宏有关系的部门的名字,"g.V().has('teacher', 'name', '赵宏').bothE().otherV().hasLabel('department').values('name')"
"以('famale',190,4727),('famale',190,4943)作为请求表数据,属性分别为gender,height,salary, 以属性salary作为相等条件,找出28个age大于11且gender不是famale的doctor,根据id升序排列","g.inject([['famale', 190, 4727], ['famale', 190, 4943]]).as('p').unfold().as('row').select('row').by(__.project('gender', 'height', 'salary').by(__.limit(local, 1)).by(__.skip(local, 1).limit(local, 1)).by(__.skip(local, 2).limit(local, 1))).select('salary').as('salaryVal').V().hasLabel('doctor').has('salary', __.where(eq('salaryVal'))).has('age', gt(11)).has('gender', neq('famale')).order().by('id', asc).limit(28)"
"根据category分组,计算sellerNumber加1850.53的值",g.V().hasLabel('a').group().by('category').by(values('sellerNumber').math('_ + 1850.53'))
"找出与读者杜伟存在喜欢关系,且与书三体存在引用关系的书节点，返回这些书的字数,及读者杜伟的名字,及书三体的价格","g.V().has('reader', 'name', '杜伟').as('a').outE('likes').inV().hasLabel('book').as('b').inE('refers').outV().has('book', 'name', '三体').as('c').select('a', 'b', 'c').by('name').by('wordCount').by('price')"
"请帮我查找person的三角的环,边标签为支付, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('pay').inV().as('b').outE('pay').inV().as('c').where(__.outE('pay').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"以('徐思琪','famale',57),('吴强','famale',36),('Jimmy','famale',12),('韩宏','male',15)作为请求表数据,属性分别为name,gender,age, 以属性name作为相等条件,返回标签等于电影院的点,返回174个","g.inject([['徐思琪','famale',57],['吴强','famale',36],['Jimmy','famale',12],['韩宏','male',15]]).unfold().as('p').select('p').by(project('name','gender','age').by(limit(local,1)).by(limit(local,2)).by(limit(local,3))).V().hasLabel('cinema').as('a').where(eq('a')).by('name').by(select('p').select('name')).limit(174).select('a')"
请帮我找出病人王雪接受的处方节点包含的药品,"g.V().hasLabel('patient').has('name', '王雪').outE('accept').inV().hasLabel('prescription').outE('contain').inV().hasLabel('medicine')"
"查询和tag历史有关系的cinema或film或comment,返回这些点的name","g.V().has('tag', 'name', '历史').bothE().otherV().hasLabel(within('cinema', 'film', 'comment')).values('name')"
"找出id为9的用户有关的仓库的朋友, 再找出和仓库有关系的伙伴","g.V().has('user', 'id', 9).as('a').bothE().otherV().hasLabel('repository').as('b').bothE().as('e').otherV().hasLabel('user').as('c').select('b').bothE('friend').otherV().hasLabel('user').as('c').dedup().select('b').bothE('partner').otherV().hasLabel('user').as('d').select('a', 'b', 'c', 'd')"
"请帮我找出与卖家赵建国存在回答关系,且与商品杯子存在查看关系的买家节点，返回这些买家的身高,性别,薪资,及卖家赵建国的id,及商品杯子的类别","g.V().has('seller', 'name', '赵建国').as('a').outE('ask').inV().hasLabel('buyer').as('b').inE('look').outV().has('goods', 'name', '杯子').as('c').select('a', 'b', 'c').by('id').by(values('height', 'gender', 'salary')).by('category')"
"请帮我查找和名为王红的person有朋友关系,或有朋友的朋友关系的贷款","g.V().hasLabel('person').has('name', '王红').bothE('friend').otherV().repeat(bothE('friend').otherV().simplePath()).times(2).hasLabel('loan').dedup()"
返回书的1度的环,"g.V().hasLabel('book').as('a').bothE().bothV().where(eq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"输入表的列为height,id,gender, 数据为(197,39,'famale'),(179,93,'famale'), 源点的height等于输入表height,查询以likes关系关联了book计算机网络的reader","g.withSideEffect('p', [['height':197, 'id':39, 'gender':'famale'], ['height':179, 'id':93, 'gender':'famale']]).V().hasLabel('book').as('a').where(and(__.select('a').values('height').is(within(select('p').unfold().values('height'))), __.select('a').has('name', '计算机网络'))).in('reader_likes_book').as('b').select('b')"
年龄对19取余除薪资的个数,"g.V().hasLabel('a').project('result').by(values('age', 'salary').by(constant(19)).math('_ / _').count())"
"帮我查询名为张红的点发布的全部书,并对这些书的价格进行求和","g.V().has('name', '张红').outE('publish').inV().hasLabel('book').values('price').sum()"
"帮我查询与公司美团有关系的软件, 返回和这些软件有关联的软件的,价值对价值取余的值","g.V().has('company', 'name', '美团').bothE().otherV().hasLabel('software').bothE().otherV().hasLabel('software').project('result').by(values('value').math('_ % _'))"
"帮我查询和person吴思思有关的person,称为X,再帮我查询和这个X有关联的其他person,以及和X有关联的person","g.V().has('person', 'name', '吴思思').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
请帮我查找被账号Geaflow123转账的账号,"g.V().hasLabel('account').has('name', 'Geaflow123').outE('transfer').inV().as('b').inE('transfer').outV().as('a').select('a', 'b')"
找出与《白夜行》有关的书籍。,"g.V().hasLabel('book').has('name', '白夜行').outE('relates').inV().hasLabel('book').as('b').select('b').as('a').select('a', 'b')"
"查找名字不是眼科且地址等于976的部门拥有的医生的名称,以及这些医生 创造的处方的名称","g.V().hasLabel('department').has('name', neq('眼科')).has('address', 976).out('has').hasLabel('doctor').as('b').out('creates').hasLabel('prescription').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"返回公司合作的大学,返回其源点的价值除375的值,以及目标点的id乘56的求和值","g.V().hasLabel('company').as('a').outE('cooperate').as('e').inV().hasLabel('university').as('b').select('a', 'b').by('value').by('id').project('expr1', 'expr2').by(__.select('a').math('/ _ / 375')).by(__.select('b').math('* 56').sum())"
返回被person何思琪认识的person,"g.V().hasLabel('person').has('name', '何思琪').as('b').outE('knows').as('e').inV().as('a').select('a', 'b')"
"根据年龄,id分组,计算身高对身高取余的值","g.V().hasLabel('a').group().by(values('age', 'id')).by(values('height').math('_ / _ * _').by().by().by(constant(0)))"
 请帮我查找与ID为98的用户有关联的用户，然后再帮我查找这些用户的朋友。,"g.V().has('user', 'id', '98').as('a').bothE().otherV().hasLabel('user').as('b').both().hasLabel('user').as('c').select('b').bothE('friend').otherV().hasLabel('user').as('d').select('a', 'b', 'c', 'd')"
 帮我查找与给定标签（tag)相关的所有帖子，以及包含这些标签的帖子的关联帖子。,"g.V().has('post', 'id', '172').bothE().otherV().hasLabel('tag').as('b').inE('has').outV().hasLabel('post').as('c').select('b', 'c')"
"请帮我查找103个名为LX001的点转账的标签为账号的节点,且节点是否冻结是false或价值为空","g.V().has('name', 'LX001').outE('transfer').inV().hasLabel('account').where(or(has('isBlock', false), not(has('value')))).limit(103)"
"返回所有和作家点有认识关系的作家节点,且边满足条件f0不是595,目标作家节点性别等于famale","g.V().hasLabel('author').as('a').outE('knows').has('f0', neq(595)).inV().hasLabel('author').has('gender', 'famale').as('b').select('b')"
 所有与读者相关的作者，以及与他们知道关系的其他作者。,"g.V().has('reader', 'id', '121').bothE().otherV().hasLabel('author').as('b').inE('knows').otherV().hasLabel('author').as('c').select('b', 'c')"
找出与眼科部门有朋友关系或者朋友的朋友关系的医生,"g.V().has('department', 'name', '眼科').bothE('friend').bothV().hasLabel('doctor').simplePath().by('name').range(1, 2).dedup()"
 查询与孙红有关联的公司，并同时申请贷款和存在投资关系，返回这些公司的名称、孙红的ID以及贷款的金额。,"g.V().has('person', 'name', '孙红').as('a').outE('invest').as('e').inV().hasLabel('company').as('b').inE('apply').as('e2').outV().has('loan', 'name', 'defaultName').as('c').select('a', 'b', 'c').by('id').by('name').by('amount')"
帮我查询tag的2跳以内的环,"g.V().hasLabel('tag').as('a').optional(__.out().as('b').where(__.out().as('a'))).select('a', 'b').by('id').by(coalesce(__.select('b').id(), constant('null')))"
"查找全部源点height大于等于182或id大于48,且id小于等于22,目标点name等于高等数学且value在298到331之间,courseHour不是44,且类型是selects的边","g.V().has('id', lte(22)).or(has('height', gte(182)), has('id', gt(48))).outE('selects').as('e').inV().has('name', '高等数学').has('value', between(298, 331)).has('courseHour', neq(44)).select('e')"
"返回所有和名为马宏的医生有相关者关系,或有相关者的相关者关系的病人","g.V().has('doctor', 'name', '马宏').bothE('relation').otherV().hasLabel('patient').simplePath().times(2).emit().dedup()"
"请帮我查找197个卖家马思琪和周轩,共同的朋友","g.V().has('seller', 'name', '马思琪').outE('friend').inV().as('b').inE('friend').outV().has('seller', 'name', '周轩').select('b').limit(197)"
请帮我查找与孙国强有关联的账号，以及申请贷款时关联了孙国强的账号。,"g.V().has('person', 'name', '孙国强').as('a').outE('own').as('e').inV().hasLabel('account').as('b').select('a').inE('apply').as('e2').outV().hasLabel('loan').as('c').select('a', 'b', 'c')"
"给出所有和公司蚂蚁集团有关系的person或公司或软件,返回这些点的规格,id","g.V().hasLabel('company').has('name', '蚂蚁集团').bothE().otherV().hasLabel(within('person', 'company', 'software')).project('scale', 'id').by('scale').by('id')"
找到label为city且包含名为美国和英国的点的节点,"g.V().has('name', '美国').out('contain').hasLabel('city').as('b').in('contain').has('name', '英国').select('b')"
 找出与用户点相关的帖子节点，按语言、ID和创建时间分组，返回语言、ID和创建时间。,"g.V().hasLabel('user').bothE('likes').otherV().hasLabel('post').group().by(values('lang', 'id', 'createTime')).unfold().select(values)"
"找出与账号Light有关,且与账号Light有关系的贷款节点","g.V().has('account', 'name', 'Light').bothE('repay').otherV().hasLabel('loan').bothE('deposit').otherV().has('account', 'name', 'Light').select('b')"
 找出何红名下的贷款，以及她申请的其他贷款。,"g.V().has('person', 'name', '何红').as('a').bothE().otherV().hasLabel('loan').as('b').select('a').bothE('apply').otherV().hasLabel('loan').as('c').select('a', 'b', 'c')"
"调用triangleCount函数,以'bV', 'rw'作为输入,返回number","g.call('triangleCount').with('vertexLabel', 'bV').with('edgeLabel', 'rw').select('number')"
"查找所有名为Bilibili的,价值大于等于238或名字小于等于4的相关者,返回这些相关者的id,和边的目标点id,源点id,f0","g.V().has('name', 'Bilibili').outE('relation').as('e').inV().as('b').where(or(__.has('value', gte(238)), __.has('name', lte(4)))).select('b', 'e').by('id').by(project('targetId', 'srcId', 'f0').by(inV().id()).by(outV().id()).by('f0'))"
"请帮我查找所有名为马思思的,scale是large,id为空的partner,返回这些partner的id,和边的weight,targetId","g.V().has('name', '马思思').outE('partner').as('e').inV().has('scale', 'large').has('id', eq(null)).project('b.id', 'e.weight', 'e.targetId').by(values('id')).by(select('e').values('weight')).by(select('e').values('targetId'))"
"请帮我找出Post_479的点拥有的标签,然后请帮我找出Post_479被发布的用户,一起返回","g.V().has('name', 'Post_479').as('a').outE('has').inV().hasLabel('tag').as('b').select('a').inE('publish').outV().hasLabel('user').as('c').select('a', 'b', 'c')"
"请帮我找出标签为拥有,以及f1不是false的边","g.E().hasLabel('has').has('f1', neq(false))"
找出在知网和CSDN论坛上共同出现的相关节点列表。,"g.V().has('forum', 'name', '知网').outE('relation').inV().as('b').inE('relation').outV().has('forum', 'name', 'CSDN').select('b').values('name')"
"以496,133,47作为请求点id, 源点的id等于输入表id,帮我查询账号Light的所有标签等于相关者的边,并根据权重从小到大排列,返回139个","g.withSideEffect('p', [496, 133, 47]).V().hasLabel('account').where(__.id().is(within('p'))).has('name', 'Light').outE('relation').order().by('weight', asc).limit(139).inV()"
给出以创造关系关联了评论Comment_417的person,"g.V().has('comment', 'name', 'Comment_417').in('creates').hasLabel('person')"
查询与巴黎和中国科技大学都相关的公司节点,"g.V().has('city', 'name', '巴黎').bothE('contain').bothV().hasLabel('company').as('b').bothE('cooperate').bothV().has('university', 'name', '中国科技大学').select('b')"
"找出所有和person点有拥有关系的账号节点,且边满足条件目标点id是165,目标账号节点满足条件名字不是Geaflow123","g.V().hasLabel('person').as('a').outE('own').has('targetId', 165).as('e').inV().hasLabel('account').has('name', neq('Geaflow123')).as('b').select('b')"
 找出非家庭买家的卖家名称和他们出售的商品名称。,"g.V().hasLabel('buyer').has('gender', neq('famale')).out('consult').hasLabel('seller').as('b').out('has').hasLabel('goods').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));给出与loan defaultName有关,且与loan defaultName有关系的account节点","g.V().hasLabel('loan').has('name', 'defaultName').bothE('loan_deposit_account').otherV().hasLabel('account').bothE('account_repay_loan').otherV().hasLabel('loan').has('name', 'defaultName').path().by(__.choose(__.hasLabel('account'), __.identity(), __.otherV())).unfold().filter(__.hasLabel('account')).dedup()"
"找出和名为知网的论坛有伙伴关系,或有伙伴的伙伴关系的帖子","g.V().hasLabel('forum').has('name', '知网').outE('partner').inV().hasLabel('post').union(__.identity(), __.outE('partner').inV().hasLabel('post')).dedup()"
"输入请求点id的列表38,651, 源点的id等于输入表id,查询全部源点类型为书,目标点类型为书,类型为book_refers_book的边","g.inject([38, 651]).unfold().as('p').V().hasLabel('book').has('id', __.select('p')).outE('book_refers_book').where(inV().hasLabel('book')).as('e').select('e')"
帮我查询名为赵思思的节点关联的person,"g.V().has('name', '赵思思').outE('relates').inV().hasLabel('person')"
"查找全部和person陈思思有关系的person,返回这些点的id,年龄,身高","g.V().has('person', 'name', '陈思思').bothE().otherV().hasLabel('person').project('id', 'age', 'height').by('id').by('age').by('height')"
"给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查询全部书以类别分组的id, 根据id升序排序",g.V().hasLabel('book').group().by('category').by(values('id').order().fold())
 请帮我找出与李伟有关且与滴滴公司有联系的任何人。,"g.V().has('person', 'name', '李伟').bothE('knows').bothV().hasLabel('person').where(bothE('belong').bothV().has('company', 'name', '滴滴')).dedup()"
"返回名为UME的点releases的所有film,并对这些film的category进行求和","g.V().has('name', 'UME').outE('releases').inV().hasLabel('film').values('category').sum()"
"输入请求点id的列表433,383, 以属性id作为相等条件,查找和编辑孙若涵有关的作家,再查找和孙若涵publisher_publish_book的其他书,返回它们","g.withSideEffect('p', [433, 383]).V().hasLabel('publisher').has('id', within('p')).has('name', '孙若涵').as('a').bothE().otherV().hasLabel('author').as('b').select('a').outE('publisher_publish_book').inV().hasLabel('book').as('c').select('a', 'b', 'c')"
查找所有与合并请求PR-187有关系的事项的权重,"g.V().hasLabel('pullRequest').has('name', 'PR-187').bothE().otherV().hasLabel('issue').values('weight')"
找出名为杜国强的用户的点，返回他们的名字和年龄。,"g.V().hasLabel('user').has('name', '杜国强').project('a.name', 'a.age').by('name').by('age')"
"查找104个department外科和急诊部,共同的friend","g.V().has('department', 'name', '外科').outE('friend').otherV().where(__.inE('friend').otherV().has('department', 'name', '急诊部')).limit(104)"
"请帮我查找film has的tag,返回其源点的id对15取余的值,以及目标点的value减530的最小值","g.V().hasLabel('film').as('a').outE('has').as('e').inV().hasLabel('tag').as('b').select('a', 'b').by('id').by('value').project('mod_id', 'min_value').by(select('a').math('_ % 15')).by(select('b').math('_ - 530').min())"
"返回publisher publish的book, 令book(b)的price的值等于knowsbook的book的id的平均值, 再查找book relates的book","g.V().hasLabel('publisher').as('a').outE('publish').inV().hasLabel('book').as('b').sideEffect(__.project('price').by(__.inE('knows').outV().hasLabel('book').id().mean()).select('b').property('price', __.select('price'))).outE('relates').inV().hasLabel('book').as('d').select('b', 'd').by('price').by()"
 找出与韩国有关且与字节有关系的城市节点，并返回它们的人数。,"g.V().has('country', 'name', '韩国').outE().inV().hasLabel('city').as('b').inE().outV().has('company', 'name', '字节').select('b').values('peopleNumber')"
向用户推荐他们的朋友，或者他们朋友的朋友,g.V().hasLabel('user').as('a').outE('partner').inV().hasLabel('user').as('b').select('b')
获取名为微软的公司,"g.V().hasLabel('company').has('name', '微软')"
"给出和label为作家的点有认识关系的作家,以及和这些作家有撰写关系的书,以及和这些书有引用关系的书",g.V().hasLabel('author').as('a').out('knows').hasLabel('author').as('b').out('write').hasLabel('book').as('c').out('refers').hasLabel('book').as('d').select('d')
查找以投资关系关联了公司华为的person,"g.V().has('company', 'name', '华为').in('invest').hasLabel('person')"
 查询孙伟观看过的电影，并返回这些电影标签的价值。,"g.V().has('person', 'name', '孙伟').outE('watch').inV().hasLabel('film').outE('has').inV().hasLabel('tag').values('value')"
"输入请求点id的列表729,480,63,148, 源点的id等于输入表id,返回源点薪资为空,边标签为author_write_book,且时间戳不等于2007年09月25日或源点id不为空或时间戳不等于2027年04月26日的边,返回这些边的目标点id对22取余的值","g.inject([729, 480, 63, 148]).unfold().as('p').V().has('id', __.as('p')).has('salary', null).as('a').outE('author_write_book').as('e').where(or(__.as('e').values('timeStamp').is(neq('2007-09-25')), __.as('e').has('srcId', neq(null)), __.as('e').values('timeStamp').is(neq('2027-04-26')))).inV().as('b').select('e').by('targetId').math('_ % 22')"
帮我查询issue的2度的环,"g.V().hasLabel('issue').as('a').repeat(both().simplePath()).times(2).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
请帮我查找前193个类型为取消的边,g.E().hasLabel('cancel').limit(193)
"用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找label为department的点,返回40个",g.V().hasLabel('department').limit(40)
"调用pageRank函数,以'me', 'rV'作为输入,返回id, value","g.call('pageRank').with('me', 'rV').project('id', 'value').by(__.id()).by(__.values('value'))"
获取用户及其朋友的朋友列表,g.V().hasLabel('user').as('a').outE('partner').inV().hasLabel('user').as('b').select('b')
查询全部和person李强之间有投资关系的公司,"g.V().has('person', 'name', '李强').out('invest').hasLabel('company')"
"输入请求点id的列表342, 以属性id作为相等条件,找出88个id大于73且name不是中国,或id为空的country,根据area从小到大排列","g.withSideEffect('p', [342]).V().hasLabel('country').where(or(and(has('id', eq(73)), has('id', gt(73)), has('name', neq('中国'))), has('id', null))).order().by('area', asc).limit(88)"
"查找和标签等于部门的点有拥有关系的教师,并且和这些教师有教关系的课程,并且和这些课程有属于关系的部门",g.V().hasLabel('department').as('a').out('has').hasLabel('teacher').as('b').out('teach').hasLabel('course').as('c').out('belong').hasLabel('department').as('d').select('d')
 查找与类型为'person'的点有'likes'关系的点，并进一步查找与这些点有'knows'关系的点，最后再查找与这些点有'likes'关系的点。,g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('person').as('b').outE('knows').as('e2').inV().hasLabel('person').as('c').outE('likes').as('e3').inV().hasLabel('person').as('d').select('d')
" 请帮我查找所有与department有关系的prescription,以及以accept关系接受这些prescription的其他patient。","g.V().hasLabel('department').has('id', '62').bothE().otherV().hasLabel('prescription').as('b').inE('accept').otherV().hasLabel('patient').as('c').select('b', 'c')"
"查找全部和合并请求PR-406有关系的合并请求或仓库或事项,返回这些点的id","g.V().hasLabel('pullRequest').has('name', 'PR-406').bothE().otherV().hasLabel(within('pullRequest', 'repository', 'issue')).values('id')"
"返回名为赵思思和黄伟的,label为person的点公共的伙伴节点的名单","g.V().has('person', 'name', '赵思思').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '黄伟').select('b').values('name')"
 请帮我找出喜欢Post_403的用户。,"g.V().hasLabel('post').has('name', 'Post_403').inE('likes').outV().hasLabel('user')"
"以757,171,315,133作为请求点id, 以属性id作为相等条件,查询49个与郑红和黄国强都存在关系的person节点","g.inject([757, 171, 315, 133]).unfold().as('p').V().has('id', __.where(eq('p'))).has('name', '郑红').outE().as('e').inV().as('b').hasLabel('person').inE().as('e2').outV().has('name', '黄国强').select('b').limit(49)"
id除id的值,g.V().hasLabel('a').project('result').by(math('_ / _').by('id').by('id'))
"查找全部与徐宏存在恋人关系的person,person与person存在朋友关系的点,返回这些点的身高","g.V().has('name', '徐宏').out('lover').hasLabel('person').out('friend').hasLabel('person').values('height')"
"请帮我查找所有和repository点有has关系的pullRequest节点,且边满足条件srcId大于等于35,目标pullRequest节点满足条件name不是PR-424","g.V().hasLabel('repository').as('a').outE('has').has('srcId', gte(35)).as('e').inV().hasLabel('pullRequest').has('name', neq('PR-424')).as('b').select('b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询前64个性别等于famale的卖家","g.V().hasLabel('seller').has('gender', 'famale').limit(64)"
 按照薪水分组查询每个人的年龄，并以年龄从小到大的顺序排序。,"g.V().hasLabel('person').group().by('salary').by(values('age').fold()).order(local).by(values, asc)"
"根据年龄分组,计算id减96的最大值",g.V().hasLabel('a').group().by('age').by(values('id').math('_ - 96').max())
获取名为'好视影院'的所有电影院的大小、ID和地址。,"g.V().hasLabel('cinema').has('name', '好视影院').project('a.size', 'a.id', 'a.address').by(values('size')).by(values('id')).by(values('address'))"
找出全部和buyer赵建聪之间有creates关系的orders,"g.V().hasLabel('buyer').has('name', '赵建聪').outE('creates').inV().hasLabel('orders')"
请帮我查找前45个标签为belong的边,g.E().hasLabel('belong').limit(45)
查询前183个label为喜欢的边,g.E().hasLabel('likes').limit(183)
"根据id分组,计算wordCount的最小值乘wordCount的值","g.V().hasLabel('a').group().by('id').by(values('wordCount').min()).unfold().project('id', 'result').by(keys).by(select(values).as('min').select(values).as('wordCount').math('min * wordCount'))"
"根据id,age,salary分组,计算salary除3415的值","g.V().hasLabel('a').group().by(project('id', 'age', 'salary').by('id').by('age').by('salary')).by(values('salary').math('/ 3415'))"
返回与author相关的reader节点，这些节点的年龄小于49，并返回它们的salary除以salary的平均值和height的最大值减去176的平均值。,"g.V().hasLabel('author').as('a').outE().as('e').inV().hasLabel('reader').has('age', lt(49)).as('b').select('b').group().by(constant(1)).by(__.values('salary').math('_ / _').mean()).select(values).unfold().select(values).as('avg_salary_ratio').select('b').group().by(constant(1)).by(__.values('height').max().math('_ - 176').mean()).select(values).unfold().select(values).as('avg_height_diff').select('avg_salary_ratio', 'avg_height_diff')"
年龄除年龄的值,g.V().hasLabel('a').project('result').by(math('_ / _').by('age').by('age'))
 请帮我查找韩轩买家查看过的商品。,"g.V().hasLabel('buyer').has('name', '韩轩').outE('look').inV().hasLabel('goods').as('b').select('b').by().as('a').select('a', 'b')"
"请帮我找出与person吴若涵有关,且与person孙建聪有关系的person节点","g.V().has('person', 'name', '吴若涵').bothE('knows').otherV().hasLabel('person').bothE('knows').otherV().has('person', 'name', '孙建聪').path().unfold().hasLabel('person').dedup()"
找出与作家杜强相关的读者，以及他撰写的其他书籍，并将它们返回。,"g.V().has('author', 'name', '杜强').as('a').bothE().otherV().hasLabel('reader').as('b').select('a').outE('write').inV().hasLabel('book').as('c').select('a', 'b', 'c')"
找出名为赵建国的点接受的处方,"g.V().has('name', '赵建国').outE('accept').inV().hasLabel('prescription')"
"给定图的schema如下:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出全部和教师黄科之间有teacher_teach_course关系的课程","g.V().hasLabel('teacher').has('name', '黄科').outE('teacher_teach_course').inV().hasLabel('course')"
"用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));返回被person Jack拥有的账号","g.V().hasLabel('person').has('name', 'Jack').as('b').outE('person_own_account').as('e').inV().hasLabel('account').as('a').select('a', 'b')"
"请帮我找出名为喜剧的post或tag或forum,以及与其有关的user,并返回喜剧的name和这些user的gender","g.V().has(label, within('post', 'tag', 'forum')).has('name', '喜剧').both().has(label, 'user').project('a_name', 'b_gender').by(select(all, 'v').unfold().has(label, within('post', 'tag', 'forum')).values('name')).by(select(all, 'v').unfold().has(label, 'user').values('gender'))"
" 给定university电子科技大学的某个department,返回该department的教师身高。","g.V().has('university', 'name', '电子科技大学').out('has').hasLabel('department').out('has').hasLabel('teacher').values('height')"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出和person有关联的person节点,并根据其name,salary,height分组,返回name,salary,height,以及id除14乘3966的值","g.V().hasLabel('person').as('a').bothE('person_family_person').otherV().hasLabel('person').as('b').select('b').group().by(__.project('name', 'salary', 'height').by(__.values('name')).by(__.values('salary')).by(__.values('height'))).unfold().project('name', 'salary', 'height', 'calculated_value').by(__.select(keys).select('name')).by(__.select(keys).select('salary')).by(__.select(keys).select('height')).by(__.select(values).unfold().values('id').math('_ / 14 * 3966').fold())"
 找出Comment_280这个评论。,"g.V().hasLabel('comment').has('name', 'Comment_280')"
"给定图的schema如下:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));给出87个id大于等于62的city,根据name升序排列","g.V().hasLabel('city').has('id', gte(62)).order().by('name', asc).limit(87)"
 找出周宏用户发布的与喜剧标签相关的帖子。,"g.V().hasLabel('user').has('name', '周宏').bothE('likes').otherV().hasLabel('post').bothE('has').otherV().hasLabel('tag').has('name', '喜剧').select('post')"
"帮我查询与名为吴梅和王宏的点共同diagnose的,标签等于patient的节点","g.V().has('name', '吴梅').outE('diagnose').inV().hasLabel('patient').as('b').inE('diagnose').outV().has('name', '王宏').select('b')"
"请帮我查找forum contain的post,返回其源点的value减871的值,以及目标点的value除796的求和值","g.V().hasLabel('forum').as('a').outE('contain').inV().hasLabel('post').as('b').select('a', 'b').by('value').project('expr1', 'expr2').by(__.select('a').math('_ - 871')).by(__.select('b').math('_ / 796').sum())"
找出与上海有关联的公司,"g.V().has('city', 'name', '上海').in('belong').hasLabel('company')"
获取与医生陈思琪有'has'关系的所有部门,"g.V().hasLabel('doctor').has('name', '陈思琪').in('has').hasLabel('department')"
给出全部名为孤城的节点关联的读者或书或作家,"g.V().has('name', '孤城').outE('relates').inV().hasLabel(within('reader', 'book', 'author')).dedup()"
"查找person的三角的环,边标签等于恋人, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('lover').inV().as('b').outE('lover').inV().as('c').where(__.outE('lover').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"请帮我找出全部源点gender等于male或height大于等于180或gender不是famale,目标点id大于等于39,且类型是colleague的边","g.E().hasLabel('colleague').where(and(__.outV().or(has('gender', 'male'), has('height', gte(180)), has('gender', neq('famale'))), __.inV().has('id', gte(39))))"
返回大学南京大学拥有的部门节点拥有的学生,"g.V().has('university', 'name', '南京大学').out('has').hasLabel('department').out('has').hasLabel('student')"
找出以喜欢关系关联了person王梅的person,"g.V().has('person', 'name', '王梅').in('likes').hasLabel('person')"
 先给出与ID为146的卖家有关联的卖家，然后再给出与该卖家有关系的友人。,"g.V().has('seller', 'id', '146').as('a').bothE().otherV().hasLabel('seller').as('b').bothE('relation').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
请帮我找出以咨询关系关联了卖家陈科的买家,"g.V().has('seller', 'name', '陈科').in('consult').hasLabel('buyer')"
 返回与赵梅有关的人，再返回赵梅喜欢但与这些人不同的人。,"g.V().has('person', 'name', '赵梅').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('likes').otherV().hasLabel('person').as('c').where(neq('b')).select('a', 'b', 'c')"
 清华大学合作的公司有哪些,"g.V().hasLabel('university').has('name', '清华大学').as('b').outE('cooperate').as('e').inV().hasLabel('company').as('a').select('a', 'b')"
 返回与张轩有恋人关系的人和与杜红有恋人关系的人。,"g.V().hasLabel('person').has('name', '张轩').as('a').out('lover').as('b').select('a').V().hasLabel('person').has('name', '杜红').as('c').out('lover').as('d').select('a', 'b', 'c', 'd')"
"给出department数学学院has的teacher,被其他department has的数量","g.V().has('department', 'name', '数学学院').as('a').out('has').hasLabel('teacher').as('b').in('has').hasLabel('department').as('c').where(neq('a')).select('c').count()"
 哪些国家与名为天津的城市有合作伙伴关系，或者与天津有合作伙伴关系的合作伙伴国家。,"g.V().has('city', 'name', '天津').outE('partner').inV().hasLabel('country').dedup().values('name')"
"查找全部源点id小于38或id小于184或薪资为空,目标点名字不等于57,且标签等于属于的边","g.E().hasLabel('belong').where(__.and(__.outV().or(__.has('id', lt(38)), __.has('id', lt(184)), __.hasNot('salary')), __.inV().has('name', neq(57))))"
"请帮我查找和事项ISSUE-360有关的仓库,称为X,再请帮我查找和这个X有关联的其他用户,以及和X有关联的用户","g.V().hasLabel('issue').has('name', 'ISSUE-360').as('a').bothE().otherV().hasLabel('repository').as('b').bothE().otherV().hasLabel('user').as('c').select('b').bothE().otherV().hasLabel('user').as('d').select('a', 'b', 'c', 'd')"
"返回全部源点id大于35或薪资大于8762,且性别不等于male,目标点名字为杜强或薪资在2658到9145之间或性别不等于male,且标签为认识的边","g.V().has('id', gt(35)).or(has('salary', gt(8762))).has('gender', neq('male')).outE('knows').as('e').inV().has('name', '杜强').or(has('salary', between(2658, 9145))).or(has('gender', neq('male'))).select('e')"
"帮我查询全部和名为徐科的买家有伙伴关系,或有伙伴的伙伴关系的卖家","g.V().hasLabel('buyer').has('name', '徐科').out('partner').hasLabel('seller').union(identity(), out('partner').hasLabel('seller')).dedup()"
 查询同时与陈红和黄建国有关联的人，返回所有结果。,"g.V().has('person', 'name', '陈红').as('a').out('lover').hasLabel('person').as('b').select('a').V().has('person', 'name', '黄建国').as('c').out('lover').hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"请帮我查找person马轩的所有类型是朋友的边,并根据权重从小到大排列,返回83个","g.V().has('person', 'name', '马轩').outE('friend').order().by('weight', asc).limit(83).inV()"
返回被公司腾讯雇佣的person,"g.V().hasLabel('company').has('name', '腾讯').inE('employee').outV().hasLabel('person').as('b').select('b').by().as('a').select('a', 'b')"
 找出与杜宏有关且与变形金刚有关的评论节点。,"g.V().has('person', 'name', '杜宏').out('creates').hasLabel('comment').as('b').in('belong').has('film', 'name', '变形金刚').select('b')"
"查询地址不是西区,地址不是B座的节点","g.V().has('address', neq('西区')).has('address', neq('B座'))"
"返回全部名为北京大学的,value为空且name不是谷歌的relation,返回这些relation的name,和边的srcId","g.V().has('name', '北京大学').outE('relation').as('e').inV().has('name', neq('谷歌')).hasNot('value').select('e').by('srcId').by(constant('e')).select(values)"
"查找58个电影院好视影院和UME,共同的伙伴","g.V().has('cinema', 'name', '好视影院').outE('partner').inV().as('b').inE('partner').outV().has('cinema', 'name', 'UME').select('b').limit(58)"
"请帮我找出所有与java程序设计存在引用关系的书,书与书存在引用关系的点,返回这些点的价格","g.V().has('name', 'java程序设计').out('refers').hasLabel('book').out('refers').hasLabel('book').values('price')"
请帮我找出全部和loan loan_50之间有deposit关系的account,"g.V().has('loan', 'name', 'loan_50').outE('deposit').inV().hasLabel('account')"
"查询标签为拥有,且满足条件f1是false或权重大于等于101.62,且源点id在171到196之间的边","g.E().hasLabel('has').or(has('f1', false), has('weight', gte(101.62))).has('srcId', between(171, 196))"
请帮我找出与person相关的账号节点，并按价值进行分组，然后返回这些节点的价值。,g.V().hasLabel('person').bothE('own').bothV().hasLabel('account').values('value').group().by(identity()).select(values)
"返回所有源点类型是prescription,边类型是contain,以及targetId为空或targetId不为空,且f0小于等于538的边","g.V().hasLabel('prescription').outE('contain').has('f0', lte(538)).where(or(__.not(has('targetId')), has('targetId'))).elementMap()"
"找出所有person的colleague,或其colleague的colleague",g.V().hasLabel('person').repeat(out('colleague')).times(2).dedup()
"请帮我找出与学生韩思思存在选择关系,且与部门艺术学院存在属于关系的课程节点，返回这些课程的价值,id,及学生韩思思的名字,及部门艺术学院的id","g.V().has('student', 'name', '韩思思').as('a').outE('selects').inV().hasLabel('course').as('b').inE('belong').outV().has('department', 'name', '艺术学院').as('c').select('a', 'b', 'c').by('name').by(values('value', 'id')).by('id')"
找出university四川大学has的department节点has的teacher,"g.V().hasLabel('university').has('name', '四川大学').out('has').hasLabel('department').out('has').hasLabel('teacher')"
 找出名为英国的国家，返回其面积、人口和名称。,"g.V().hasLabel('country').has('name', '英国').project('area', 'peopleNumber', 'name').by('area').by('peopleNumber').by('name')"
帮我查询全部和buyer吴红之间有cancel关系的orders,"g.V().hasLabel('buyer').has('name', '吴红').outE('cancel').inV().hasLabel('orders')"
"查找所有person的伙伴,或其伙伴的伙伴","g.V().hasLabel('person').as('a').outE('partner').inV().range(1, 2).as('b').select('b')"
查找全部与account TheShy有关系的loan的id,"g.V().hasLabel('account').has('name', 'TheShy').bothE().otherV().hasLabel('loan').values('id')"
帮我查询所有和城市纽约之间有包含关系的大学,"g.V().hasLabel('city').has('name', '纽约').outE('contain').inV().hasLabel('university')"
"返回与Comment_322存在belong关系的film,film与tag存在has关系的点,返回这些点的value","g.V().has('name', 'Comment_322').out('belong').hasLabel('film').out('has').values('value')"
"使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询54个论坛推特和知网,共同的朋友","g.V().has('forum', 'name', '推特').outE('friend').inV().as('b').inE('friend').outV().has('forum', 'name', '知网').select('b').limit(54)"
"输入请求点id的列表172, 以属性id作为相等条件,找出和label为person的点有person_likes_comment关系的评论,以及和这些评论有comment_belong_film关系的电影,以及和这些电影有film_has_tag关系的标签","g.withSideEffect('p', [172]).V().hasLabel('person').has('id', within('p')).out('person_likes_comment').hasLabel('comment').out('comment_belong_film').hasLabel('film').out('film_has_tag').hasLabel('tag')"
"请帮我找出全部与person有关系的comment节点,且comment节点的id等于35,并返回这些comment的id对38取余的个数,以及comment的wordCount乘823的值","g.V().hasLabel('person').outE().inV().hasLabel('comment').has('id', 35).project('count', 'wordCountTimes').by(__.values('id').math('_ % 38').dedup().count()).by(__.values('wordCount').math('_ * 823'))"
在百度贴吧中包含forum的帖子,"g.V().hasLabel('forum').has('name', '百度贴吧').outE('contain').inV().hasLabel('post').as('b').select('b').as('a').select('a', 'b')"
查找所有名为王建国的节点diagnose的patient或department或doctor,"g.V().has('name', '王建国').outE('diagnose').inV().hasLabel(within('patient', 'department', 'doctor')).dedup()"
"请帮我找出类型是使用,并且f1不是true的边","g.E().hasLabel('uses').has('f1', neq(true))"
"返回person陈思思认识的person,以及认识这些person的person, 令person(c)的性别等于person(b)的身高的最大值, 返回person(a)的年龄,person(b)的年龄,person(c)的薪资","g.V().has('person', 'name', '陈思思').as('a').outE('knows').inV().hasLabel('person').as('b').inE('knows').outV().hasLabel('person').as('c').group().by(select('c')).by(select('b').values('height').max()).select(values).unfold().as('c_gender').select('a', 'b', 'c').by('age').by('age').by(select('c_gender').select(values).project('salary').by(select('c').values('salary')))"
找到所有关于张建国并且和《悲惨世界》有关的书籍。,"g.V().has('publisher', 'name', '张建国').out('publish').as('b').in('refers').has('book', 'name', '悲惨世界').select('b')"
 返回22个与类型为'person'的点有'属于'关系的公司，以及这些公司与软件之间的'创建'关系。,g.V().hasLabel('person').as('a').outE('belong').as('e').inV().hasLabel('company').as('b').outE('creates').as('e2').inV().hasLabel('software').as('c').select('c').limit(22)
"请帮我找出名为罪与罚和百年孤独的,标签等于book的点公共的refers节点的名单","g.V().has('book', 'name', '罪与罚').out('refers').as('b').in('refers').has('book', 'name', '百年孤独').select('b').values('name')"
找出与'文艺'标签有关系的帖子,"g.V().hasLabel('tag').has('name', '文艺').inE('has').outV().hasLabel('post')"
"返回从person黄轩出发,经过类型是parent的边,走2跳到达的person点","g.V().has('person', 'name', '黄轩').repeat(outE('parent').otherV().simplePath()).times(2).hasLabel('person').dedup()"
返回张伟创建的评论，以及这些评论所关联的所有人。,"g.V().has('person', 'name', '张伟').as('a').outE('creates').inV().hasLabel('comment').as('b').inE('creates').outV().hasLabel('comment').as('c').select('a', 'b', 'c')"
"输入表的列为value,id,name, 数据为(542,94,'南京大学'),(141,72,'华中科技大学'), 源点的value等于输入表value,请帮我找出以contain关系关联了company华为的city","g.withSideEffect('p', [[542,94,'南京大学'],[141,72,'华中科技大学']]).V().hasLabel('company').as('a').where(and(__.select('a').values('value').is(within(select('p').unfold().limit(1))), __.select('a').has('name', '华为'))).in('city_contain_company').hasLabel('city').as('b').select('b')"
"请帮我找出被论坛包含数量大于63的用户,记为relationCount,再查询这些用户包含的帖子","g.V().hasLabel('user').as('a').project('user', 'relationCount').by(identity()).by(bothE('contain').hasLabel('contain').inV().hasLabel('forum').id().fold().count()).where(select('relationCount').is(gt(63))).select('user').outE('contain').hasLabel('contain').inV().hasLabel('post')"
给出全部和person徐建国之间有喜欢关系的评论,"g.V().hasLabel('person').has('name', '徐建国').outE('likes').inV().hasLabel('comment')"
"查询和论坛CSDN有包含关系的用户,再查询以包含关系关联了CSDN的帖子","g.V().hasLabel('forum').has('name', 'CSDN').as('a').outE('contain').inV().hasLabel('user').as('b').select('a').inE('contain').outV().hasLabel('post').as('c').select('a', 'b', 'c')"
查找label为公司的点,g.V().hasLabel('company')
"找出id为177的点的字数,创建时间,id","g.V().has('id', 177).project('wordCount', 'createTime', 'id').by(values('wordCount')).by(values('createTime')).by(values('id'))"
"查找所有与读者有关系的作家节点,且作家节点的薪资不为空,并返回这些作家的id对2取余的值,以及作家的id减id的值","g.V().hasLabel('reader').as('a').outE().as('e').inV().hasLabel('author').has('salary', neq(null)).as('b').project('b_id_mod_2', 'b_id_minus_id').by(select('b').values('id').math('_ % 2')).by(select('b').values('id').math('_ - _'))"
" 找出吴轩的parents,并返回他们之间的height差。","g.V().has('name', '吴轩').out('parent').hasLabel('person').out('parent').hasLabel('person').values('height')"
"查询和类型为person的点有likes关系的comment,且和这些comment有belong关系的film,且和这些film有has关系的tag",g.V().hasLabel('person').as('a').out('likes').hasLabel('comment').as('b').out('belong').hasLabel('film').as('c').out('has').hasLabel('tag').as('d').select('d')
"查询源点满足条件名字的个数小于等于805,人数小于等于801,目标点满足条件创建时间为1995年05月04日且创建时间为1997年10月29日且语言为German,且label为包含的边","g.V().has('peopleNumber', lte(801)).where(values('name').count().is(lte(805))).outE('contain').as('e').inV().has('createTime', '1995-05-04').has('createTime', '1997-10-29').has('lang', 'German').select('e')"
"以924,423作为请求点id, 以属性id作为相等条件,请帮我查找类型为买家的点,返回113个","g.inject([924, 423]).unfold().as('p').V().hasLabel('buyer').has('id', __.select('p')).limit(113)"
"给出全部和名为Flink的repository有partner关系,或有partner的partner关系的user","g.V().has('repository', 'name', 'Flink').bothE('partner').bothV().hasLabel('user').dedup()"
 滴滴和美团之间有什么关系？,"g.V().has('company', 'name', '滴滴').outE('belong').otherV().as('b').inE('belong').otherV().has('company', 'name', '美团').select('b')"
查询31个与建国大业和神探狄仁杰都存在关系的film或tag节点,"g.V().has('name', '建国大业').outE().inV().where(and(__.inE().outV().has('name', '神探狄仁杰'), or(hasLabel('film'), hasLabel('tag')))).limit(31)"
"找出名为徐梅的goods,以及与其有关的seller,并返回徐梅的gender和这些seller的gender","g.V().hasLabel('goods').has('name', '徐梅').as('a').bothE().otherV().hasLabel('seller').as('b').select('a', 'b').by(values('gender'))"
 从吴强开始，沿着拥有类型的边走2步，到达一个终点。,"g.V().has('person', 'name', '吴强').repeat(out('own')).times(2).hasLabel('account')"
找出所有和王科有喜欢关系的人，这些人之间又存在认识关系，返回这些人的名字。,"g.V().has('name', '王科').out('likes').hasLabel('person').out('knows').hasLabel('person').values('name')"
"给出从person王思琪出发,经过类型为认识的边,走1度到达的person点","g.V().has('person', 'name', '王思琪').outE('knows').inV().hasLabel('person').dedup()"
获取university的所有关系，或者这些关系的关系。,g.V().hasLabel('university').outE('relation').inV().outE('relation').inV().dedup()
 返回90个同时与Prescription_115和Prescription_439有关系的处方节点。,"g.V().has('name', 'Prescription_115').outE().inV().hasLabel('prescription').as('b').inE().outV().has('name', 'Prescription_439').select('b').limit(90)"
 请帮我找出所有与某个出版商相关的作者，以及这些作者认识的所有其他作者。,"g.V().has('publisher', 'id', '154').bothE().otherV().hasLabel('author').as('b').inE('knows').otherV().hasLabel('author').as('c').select('b', 'c')"
"帮我查询所有和卖家点有拥有关系的商品节点,且边满足条件f0小于716,目标商品节点名字是手机","g.V().hasLabel('seller').as('a').outE('has').has('f0', lt(716)).inV().hasLabel('goods').has('name', '手机').as('b').select('b')"
能否帮我找一下作者叫李若涵的作品,"g.V().hasLabel('author').has('name', '李若涵')"
"查找和仓库FSM有关的合并请求,称为X,再查找和这个X有关联的其他用户,以及和X有关联的仓库","g.V().has('repository', 'name', 'FSM').as('a').bothE().otherV().hasLabel('pullRequest').as('b').bothE().otherV().hasLabel('user').as('c').select('b').bothE().otherV().hasLabel('repository').as('d').select('a', 'b', 'c', 'd')"
"查询名为何轩的,年龄不等于72或年龄小于等于58的相关者,返回这些相关者的性别,和边的f0,权重,时间戳","g.V().has('name', '何轩').outE('relation').as('e').inV().as('b').where(or(__.not(__.has('age', 72)), __.has('age', lte(58)))).select('b', 'e').by(values('gender')).by(project('f0', 'weight', 'timeStamp').by(values('f0')).by(values('weight')).by(values('timeStamp')))"
 找出与吴思琪有关的人，包括她的家人和其他相关人员，然后返回这些人员。,"g.V().has('person', 'name', '吴思琪').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('family').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
 张若涵观看的电影和吴建国创建的评论,"g.V().has('person', 'name', '张若涵').as('a').out('watch').as('b').select('a').V().has('person', 'name', '吴建国').as('c').out('creates').as('d').select('a', 'b', 'c', 'd')"
 找出54个与Post_495和Post_103有联系的论坛节点。,"g.V().has('name', 'Post_495').outE().inV().hasLabel('forum').as('b').inE().outV().has('name', 'Post_103').select('b').limit(54)"
"根据id,权重,名字分组,计算权重对权重取余的值","g.V().hasLabel('a').group().by(union(id(), values('weight'), values('name')).fold()).by(values('weight').as('w').select('w').math('_ % _'))"
找出与张建国有pay关系的所有person，这些人之间有likes关系，然后返回他们的gender信息。,"g.V().has('name', '张建国').out('pay').hasLabel('person').as('b').out('likes').hasLabel('person').as('c').select('c').values('gender')"
"查找label为软件,名为Mysql的点,返回这些点的星数","g.V().hasLabel('software').has('name', 'Mysql').values('stars')"
" 查询id为27的goods的seller的friends,再查询seller的friends。","g.V().has('goods', 'id', '27').as('a').bothE().bothV().hasLabel('seller').as('b').bothE('friend').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
"查找名字不等于大众影院的电影院上映的电影的名称,以及这些电影 拥有的标签的名称","g.V().hasLabel('cinema').has('name', neq('大众影院')).outE('releases').inV().hasLabel('film').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我查找全部和名为陈红的person有父母关系,或有父母的父母关系的person","g.V().has('person', 'name', '陈红').repeat(out('parent')).times(2).dedup()"
"输入表的列为height,id,age, 数据为(199,51,19),(183,7,6), 以属性id作为相等条件,查询所有和名为李月的person有family关系,或有family的family关系的person","g.inject([['height':199,'id':51,'age':19],['height':183,'id':7,'age':6]]).as('p').unfold().as('p_row').select('p_row').by(values).V().hasLabel('person').has('id', select('p_row').select('id')).filter(has('name', '李月')).bothE('person_family_person').bothV().where(neq('p_row')).bothE('person_family_person').bothV().where(neq('p_row')).dedup()"
"请帮我找出label为company的点,返回6个",g.V().hasLabel('company').limit(6)
"请帮我查找134个名为郑强的点取消的类型是订单的节点,且节点名字为Order_113,id小于4","g.V().has('name', '郑强').outE('cancel').inV().hasLabel('orders').has('name', 'Order_113').has('id', lt(4)).limit(134)"
请帮我查找和forum中国军事论坛之间有contain关系的post,"g.V().hasLabel('forum').has('name', '中国军事论坛').outE('contain').inV().hasLabel('post')"
"查询所有和作家点有认识关系的作家节点,且边满足条件目标点id大于44,目标作家节点名字不等于马轩","g.V().hasLabel('author').as('a').outE('knows').has('targetId', gt(44)).as('e').inV().hasLabel('author').has('name', neq('马轩')).as('b').select('b')"
找出所有与买家有关的订单节点，但不包括id为18的节点。然后返回这些节点的价值减去759乘以该价值的数量，以及价值减去638的结果。,"g.V().hasLabel('buyer').outE().inV().hasLabel('orders').has('id', neq(18)).project('count_result', 'value_minus_638').by(__.project('value').by('value').math('(value - 759) * value').count()).by(__.values('value').math('_ - 638'))"
找出seller的1跳的环,"g.V().hasLabel('seller').as('a').bothE().otherV().where(eq('a')).select('a').by('id').project('a.id', 'b_id').by(identity()).by(select('a').values('id'))"
找出Tom喜欢的书并返回,"g.V().hasLabel('reader').has('name', 'Tom').as('b').outE('likes').as('e').inV().hasLabel('book').as('a').select('a', 'b')"
 请帮我查找与药品ID为95的处方相关的患者，然后再帮我查找与该处方有关的合作伙伴。,"g.V().has('medicine', 'id', '95').bothE().otherV().hasLabel('prescription').as('b').bothE().otherV().hasLabel('prescription').as('b').bothE('relation').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd').by(valueMap(true)).by(valueMap(true)).by(valueMap(true)).by(valueMap(true))"
找出前176个类型为look的边,g.E().hasLabel('look').limit(176)
 查询与吴思琪有亲戚关系或相关联的人。,"g.V().has('person', 'name', '吴思琪').outE('relation').inV().hasLabel('person').range(1, 2)"
 返回与person孙伟和person Jack有关联的节点，并返回它们的身高。,"g.V().has('person', 'name', '孙伟').outE().inV().hasLabel('person').as('b').inE().outV().has('person', 'name', 'Jack').select('b').values('height')"
请帮我找出和course马克思原理之间有belong关系的department,"g.V().hasLabel('course').has('name', '马克思原理').outE('belong').inV().hasLabel('department')"
"请帮我查找全部person的相关者,或其相关者的相关者",g.V().hasLabel('person').repeat(out('relation')).times(2).dedup()
"给出被医生诊断数量大于180的病人,记为relationCount,再查询这些病人诊断的病人","g.V().hasLabel('patient').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('diagnose').hasLabel('doctor').id().max()).select('a', 'relationCount').as('a_with_count').select('a_with_count').where(__.select('relationCount').is(gt(180))).out('diagnose').hasLabel('patient').dedup()"
"调用KHOP函数,以8作为输入,返回运算结果","g.call(""KHOP"").with(""input"", 8).select(""id"", ""kValue"")"
"请帮我找出医生的三角的环,边标签等于创造, 并返回这些点的id","g.V().hasLabel('doctor').as('a').outE('creates').inV().as('b').outE('creates').inV().as('c').where(__.outE('creates').inV().as('a')).select('a', 'b', 'c').by().by('id').by('id').project('a', 'b_id', 'c_id').by().by(select('b')).by(select('c'))"
"请帮我找出person张雪喜欢的person,被其他person认识的数量","g.V().has('person', 'name', '张雪').out('likes').in('knows').dedup().count()"
"请帮我找出合作大学武汉大学合作的公司,的大学","g.V().has('university', 'name', '武汉大学').outE('cooperate').inV().hasLabel('company').as('b').inE('cooperate').outV().hasLabel('university').as('c').select('b', 'c')"
 查询与电影《我不是药神》有关的人物，并返回他们的信息。然后查询该电影的标签，返回它们。,"g.V().hasLabel('film').has('name', '我不是药神').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('has').otherV().hasLabel('tag').as('c').select('a', 'b', 'c')"
"帮我查询和person点有watch关系的film节点,且边满足条件weight不是105.49,目标film节点满足条件id在29到96之间","g.V().hasLabel('person').as('a').outE('watch').has('weight', neq(105.49)).as('e').inV().hasLabel('film').has('id', between(29, 96)).as('b').select('b')"
 找赵强这个人。,"g.V().hasLabel('person').has('name', '赵强')"
"根据height,gender,age分组,计算height除height加9减age的和",g.V().hasLabel('a').group().by('height').by('gender').by('age').by(__.values('height').math('_ / _ + 9 - _').by('height').by('height').by('age').sum())
查询与forum中国诗词论坛有contain关系的2度的环,"g.V().has('forum', 'name', '中国诗词论坛').as('a').outE('contain').inV().as('b').where(out().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"以3作为请求点id, 以属性id作为相等条件,返回名为defaultName的loan,以及与其有关的company,并返回defaultName的weight和这些company的value","g.withSideEffect('p_id', 3).V().hasLabel('loan').has('id', __.constant('p_id')).has('name', 'defaultName').as('a').bothE().as('e').otherV().hasLabel('company').as('b').select('a', 'b').by('weight').by('value')"
找出与电影院相关的电影节点，按价值、ID和类别进行分组，并返回这些信息。,"g.V().hasLabel('cinema').bothE('releases').otherV().hasLabel('film').group().by(values('value', 'id', 'category')).select(keys).unfold().project('b.value', 'b.id', 'b.category').by(select(keys).select('value')).by(select(keys).select('id')).by(select(keys).select('category'))"
找出处方的3度的环,"g.V().hasLabel('prescription').as('a').repeat(both().simplePath()).times(3).where(loops().is(3)).where(eq('a')).project('a.id', 'b_id').by(select('a').id()).by(id())"
"请帮我查找buyer陈梅cancel的orders,被其他buyer cancel的数量","g.V().has('buyer', 'name', '陈梅').outE('cancel').inV().hasLabel('orders').inE('cancel').outV().hasLabel('buyer').dedup().count()"
"返回评论以字数分组的id, 根据id升序排序","g.V().hasLabel('comment').group().by('wordCount').by(values('id').fold()).order(local).by(keys, asc)"
"输入请求点id的列表361,312,917,937,365, 源点的id等于输入表id,查询person喜欢的person,返回其源点的id对88取余加182的值,以及目标点的id的数量对8取余除薪资的平均值","g.inject([361, 312, 917, 937, 365]).as('p').flatMap(select('p')).unfold().as('id').V().has('person', 'id', select('id')).as('a').outE('person_likes_person').as('e').inV().hasLabel('person').as('b').select('a', 'b').by('id').by('id').group().by(select('a')).by(__.select('b').fold()).unfold().project('result1', 'result2').by(select(keys).math('_ % 88 + 182')).by(select(values).unfold().count(local).math('_ % 8').as('count_mod').select(values).unfold().values('salary').mean().math('count_mod / _'))"
"用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找前176个满足条件名字不是郑雪且薪资大于等于163且id不为空的编辑","g.V().hasLabel('publisher').has('name', neq('郑雪')).has('salary', gte(163)).has('id', neq(null)).limit(176)"
"以232,481,248,407作为请求点id, 源点的id等于输入表id,查询person马思琪认识的person,被其他person支付的数量","g.withSideEffect('p', [232, 481, 248, 407]).V().hasLabel('person').where(and(values('id').is(within('p')), values('name').is(eq('马思琪')))).outE('person_knows_person').inV().hasLabel('person').inE('person_pay_person').outV().hasLabel('person').dedup().count()"
找出大学中国科技大学合作的公司节点属于的城市,"g.V().hasLabel('university').has('name', '中国科技大学').outE('cooperate').inV().hasLabel('company').outE('belong').inV().hasLabel('city').dedup()"
"找出读者喜欢的书, 令书的名字的值等于发布书的编辑的名字的个数, 再查找书认识的书","g.V().hasLabel('reader').as('a').outE('likes').inV().hasLabel('book').as('b').sideEffect(select('b').property('name', select('b').inE('publish').outV().hasLabel('publisher').values('name').count())).select('b').outE('knows').inV().hasLabel('book').as('d').select('b', 'd').by('name').by()"
"返回类型是拥有,且权重大于140.45,f1不是true的边","g.E().hasLabel('has').has('weight', gt(140.45)).has('f1', neq(true))"
 查找一起购买过'Knows Who'软件的人和被'Knows Who'软件知道的人。,"g.V().has('name', '何科').as('a').outE('buy').inV().hasLabel('software').as('b').select('a').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"找出25个和类型为seller的点有ask关系的buyer,且和这些buyer有creates关系的orders",g.V().hasLabel('seller').as('a').outE('ask').inV().hasLabel('buyer').as('b').outE('creates').inV().hasLabel('orders').as('c').select('c').limit(25)
返回所有与城市相关联的公司，以及这些公司所属的城市。,"g.V().has('city', 'id', '110').bothE().otherV().hasLabel('city').as('b').inE('belong').otherV().hasLabel('company').as('c').select('b', 'c')"
"以341,495,209,505,887作为请求点id, 以属性id作为相等条件,查找label为prescription,名为Prescription_139的点,返回这些点的createTime,weight","g.inject([341, 495, 209, 505, 887]).unfold().as('p').V().hasLabel('prescription').has('id', __.select('p')).has('name', 'Prescription_139').project('createTime', 'weight').by('createTime').by('weight')"
"用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出118个person马雪和韩建聪,共同的相关者","g.V().has('person', 'name', '马雪').outE('relation').inV().as('b').inE('relation').outV().has('person', 'name', '韩建聪').select('b').limit(118)"
"查找watch comment Comment_490 belong的film,的person","g.V().hasLabel('comment').has('name', 'Comment_490').outE('belong').inV().hasLabel('film').as('b').inE('watch').outV().hasLabel('person').as('c').select('b', 'c')"
"输入请求点id的列表378,624,794,612,532, 以属性id作为相等条件,查询全部源点类型为作家,边类型为author_knows_author的边,返回这些边的f0加f0的数量,和f0加f0的值","g.inject([378, 624, 794, 612, 532]).unfold().as('p').V().has('author', 'id', __.select('p')).outE('author_knows_author').as('e').project('count', 'sum').by(__.count()).by(__.select('e').values('f0').sum().math('_ + _'))"
"查找名为孙红的点喜欢的所有person,并对这些person的薪资进行求和","g.V().has('name', '孙红').outE('likes').inV().hasLabel('person').values('salary').sum()"
"请帮我查找person何红观看的电影,被其他评论属于的数量","g.V().has('person', 'name', '何红').out('watch').in('belong').hasLabel('comment').count()"
查询被处方Prescription_325包含的药品,"g.V().hasLabel('prescription').has('name', 'Prescription_325').outE('contain').inV().hasLabel('medicine').as('b').select('b').by().as('a').select('a', 'b')"
 按照名字对评论进行分组，然后按照创建时间从大到小排序。,"g.V().hasLabel('comment').group().by(values('name', 'wordCount').fold()).by(values('createTime').fold()).order(Scope.local).by(values('createTime').unfold(), Order.desc)"
找出在2026年01月06日创建的所有与处方有关的节点，并返回它们的ID对99取余，然后除以891、58和37，最后再减去42得到的最小值。,"g.V().hasLabel('prescription').has('createTime', '2026-01-06').project('expr1', 'min_val').by(values('id').math('_ / 99 % 891 / 58 / 37')).by(values('id').math('_ - 42').min())"
"输入请求点id的列表949,767,616, 以属性id作为相等条件,给出person的2跳的环","g.inject([949, 767, 616]).unfold().as('p').V().has('person', 'id', __.select('p')).as('a').out().as('b').where(out().where(eq('a'))).select('a', 'b').by('id').by('id')"
"请帮我查找帖子的相关者,或其相关者的相关者","g.V().hasLabel('post').as('a').outE('relation').inV().range(1, 2).as('b').select('b')"
"请帮我找出contain user郑宏likes的post,的forum","g.V().has('user', 'name', '郑宏').outE('likes').inV().hasLabel('post').as('b').inE('contain').outV().hasLabel('forum').as('c').select('b', 'c')"
"以914作为请求点id, 以属性id作为相等条件,查询和person黄建国有关的person,再查询和黄建国person_colleague_person的其他person,返回它们","g.withSideEffect('p_id', 914).V().hasLabel('person').has('id', __.constant(914)).has('name', '黄建国').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('person_colleague_person').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
 查询王雪的喜欢对象，以及这些对象之间的朋友关系，并返回这些朋友的性别。,"g.V().has('name', '王雪').out('likes').hasLabel('person').out('knows').hasLabel('person').values('gender')"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找软件的3度的环","g.V().hasLabel('software').as('a').repeat(both().simplePath()).times(3).where(loops().is(3)).where(__.both().where(eq('a'))).dedup().project('a.id', 'b_id').by(__.select('a').id()).by(id())"
"给出源点id不等于17或salary为6736,且id小于88,边标签等于publish,且满足条件srcId大于等于35或f1不等于false的边,返回这些边的f0加965的最小值","g.V().has('id', lt(88)).or(has('id', neq(17)), has('salary', 6736)).outE('publish').or(has('srcId', gte(35)), has('f1', neq(false))).values('f0').math('_ + 965').min()"
" 返回47个拥有own关系且与这些account有repay关系的loan,其中标签为person。",g.V().hasLabel('person').as('a').outE('own').as('e').inV().hasLabel('account').as('b').outE('repay').as('e2').inV().hasLabel('loan').as('c').select('c').limit(47)
"返回名为蚂蚁集团的公司,以及与其有关的城市,并返回蚂蚁集团的名字和这些城市的人数","g.V().hasLabel('company').has('name', '蚂蚁集团').bothE().otherV().hasLabel('city').project('a.name', 'b.peopleNumber').by(select('a').values('name')).by(values('peopleNumber'))"
"查询身高不为空或薪资大于7712的用户喜欢的帖子的名称,以及这些帖子 拥有的标签的名称","g.V().hasLabel('user').or(has('height', neq(null)), has('salary', gt(7712))).outE('likes').inV().hasLabel('post').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"帮我查询187个名为LX001的点repay的类型是loan的节点,且节点weight小于等于50,id除81的平均值不等于8","g.V().has('name', 'LX001').outE('repay').inV().hasLabel('loan').has('weight', lte(50)).where(__.values('id').mean().is(neq(8))).limit(187)"
"查找id为174的学生有关的学生的伙伴, 再查找和学生有关系的朋友","g.V().has('student', 'id', 174).as('a').bothE().otherV().hasLabel('student').as('b').bothE().hasLabel('partner').otherV().as('c').select('b').bothE().hasLabel('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
"查询与company字节存在employee关系,且与software Redis存在buy关系的person节点，返回这些person的gender,name,id,及company字节的value,及software Redis的lang","g.V().hasLabel('company').has('name', '字节').as('a').out('employee').hasLabel('person').as('b').in('buy').hasLabel('software').has('name', 'Redis').as('c').select('a', 'b', 'c').by('value').by(values('gender', 'name', 'id').fold()).by('lang')"
"找出和issue ISSUE-420有belong关系的repository,再找出以belong关系关联了ISSUE-420的repository","g.V().has('issue', 'name', 'ISSUE-420').as('a').bothE('belong').otherV().hasLabel('repository').as('b', 'c').select('a', 'b', 'c')"
"找出名为吴宏的点的,薪资在6180到9965之间且性别不等于male的朋友,返回这些朋友的年龄,和边的权重,源点id,目标点id","g.V().has('name', '吴宏').outE('friend').as('e').inV().has('salary', between(6180, 9965)).has('gender', neq('male')).as('b').select('b', 'e').by('age').by(values('weight', 'srcId', 'targetId'))"
"给出合作城市纽约包含的大学,的公司","g.V().has('city', 'name', '纽约').out('contain').hasLabel('university').as('b').in('cooperate').hasLabel('company').as('c').select('b', 'c')"
"以868,776,834,176作为请求点id, 源点的id等于输入表id,请帮我找出全部和university点有has关系的department节点,且边满足条件f1不等于false,目标department节点满足条件id为空","g.inject([868, 776, 834, 176]).unfold().as('p').V().has('university', 'id', __.as('p')).as('a').outE('university_has_department').has('f1', neq(false)).as('e').inV().has('department', 'id', null).as('b').select('b')"
给出所有和person周若涵之间有friend关系的person,"g.V().hasLabel('person').has('name', '周若涵').outE('friend').inV().hasLabel('person')"
"输入请求点id的列表309, 源点的id等于输入表id,找出全部源点标签为读者,目标点标签为书,标签为reader_likes_book的边","g.inject(309).as('p').V().has('reader', 'id', select('p')).outE('reader_likes_book').as('e').inV().hasLabel('book').select('e')"
"查找全部作家的朋友,或其朋友的朋友",g.V().hasLabel('author').as('a').repeat(out('friend')).times(2).emit().as('b').select('b')
 找出所有与评论相关的标签，并找出与这些标签相关的其他电影。,"g.V().has('comment', 'id', '179').bothE().otherV().hasLabel('tag').as('b').in('has').hasLabel('film').as('c').select('b', 'c')"
"查找名为谷歌的点雇佣的所有person,并对这些person的性别进行求和","g.V().has('name', '谷歌').outE('employee').inV().hasLabel('person').values('gender').sum()"
"调用triangleCount函数,以'GG', 're'作为输入,返回number","g.call(""triangleCount"").with(""graphName"", ""GG"").with(""edgeLabel"", ""re"").select(""number"")"
"返回标签为用户的点,返回179个",g.V().hasLabel('user').limit(179)
"给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查找以拥有关系关联了医生徐梅的部门","g.V().hasLabel('doctor').has('name', '徐梅').inE('department_has_doctor').outV().hasLabel('department')"
"查找关联person吴建国认识的person,的person","g.V().has('person', 'name', '吴建国').outE('knows').inV().hasLabel('person').as('b').inE('relates').outV().hasLabel('person').as('c').select('b', 'c')"
"请帮我找出和department经管学院有has关系的student,再请帮我找出以has关系关联了经管学院的student","g.V().hasLabel('department').has('name', '经管学院').as('a').bothE('has').otherV().hasLabel('student').as('b', 'c').select('a', 'b', 'c')"
"请帮我查找id为155的person观看的电影, 并将电影有关的评论的字数的平均值赋值给电影的id, 接着查询电影的id小于155的电影拥有的标签","g.V().has('person', 'id', 155).out('watch').hasLabel('film').as('b').project('b.id', 'd').by(coalesce(select('b').bothE().where(otherV().hasLabel('comment')).values('wordCount').mean(), constant(0))).by(select('b').filter(values('id').is(lt(155))).out('has').hasLabel('tag'))"
"找出与名为武汉大学和四川大学的点共同合作的,类型为公司的节点","g.V().has('name', '武汉大学').outE('cooperate').inV().hasLabel('company').as('b').inE('cooperate').outV().has('name', '四川大学').select('b')"
请找出与Comment_151有关系并和标签动作有关的评论节点，返回它们的名称和创建时间。,"g.V().has('comment', 'name', 'Comment_151').outE().inV().hasLabel('comment').as('b').inE().outV().has('tag', 'name', '动作').select('b').project('name', 'createTime').by(values('name')).by(values('createTime'))"
 给出与ID为9的帖子相关的论坛的朋友，再给出与该论坛有关的伙伴。,"g.V().has('post', 'id', '9').as('a').bothE().bothV().hasLabel('forum').as('b').bothE('friend').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"请帮我查找薪资在6368到7049之间的person属于的公司的名称,以及这些公司 雇佣的person的名称","g.V().hasLabel('person').has('salary', between(6368, 7049)).outE('belong').inV().hasLabel('company').as('b').outE('employee').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
返回与清华大学有关联的部门，然后再返回与这些部门有关联的清华大学。,"g.V().hasLabel('university').has('name', '清华大学').as('a').outE('has').inV().hasLabel('department').as('b').select('a').inE('has').outV().hasLabel('department').as('c').select('a', 'b', 'c')"
"给出comment Comment_204 belong的film, 令film的id等于comment的wordCount的平均值,令comment的wordCount等于comment的id,令film的id等于comment的name的最大值, 返回comment的name, film的name","g.V().has('comment', 'name', 'Comment_204').as('a').outE('belong').inV().hasLabel('film').as('b').select('a', 'b').by(values('name')).by(values('name')).project('a.name', 'b.name').by(select('a')).by(select('b'))"
"请帮我找出id为146的person关联的贷款,和以申请关系关联了这些贷款的其他公司","g.V().has('person', 'id', 146).bothE().otherV().hasLabel('loan').as('b').inE('apply').otherV().hasLabel('company').as('c').select('b', 'c')"
查询课程的2跳的环,"g.V().hasLabel('course').as('a').repeat(both().simplePath()).times(2).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').values('id')).by(select('b').values('id'))"
请帮我找出名为吴建国的点喜欢的评论,"g.V().has('name', '吴建国').outE('likes').inV().hasLabel('comment')"
请帮我查找与城市北京和纽约都存在包含关系的点,"g.V().has('city', 'name', '北京').outE('contain').inV().as('b').inE('contain').outV().has('city', 'name', '纽约').select('b')"
"帮我查询全部公司以规格分组的id, 根据id升序排序",g.V().hasLabel('company').group().by('scale').by(values('id').order().fold()).order(local).by(keys)
"查找所有person以名字,年龄,id分组的身高, 根据身高从小到大排序","g.V().hasLabel('person').group().by(values('name', 'age', 'id')).by(values('height').fold()).order(local).by(values, asc)"
"帮我查询所有用户的伙伴,或其伙伴的伙伴","g.V().hasLabel('user').outE('partner').inV().range(1, 2).dedup()"
"给出与名为滴滴和美团的点共同合作的,label为大学的节点","g.V().has('name', '滴滴').outE('cooperate').inV().hasLabel('university').as('b').inE('cooperate').outV().has('name', '美团').select('b')"
"请帮我找出源点满足条件id是16,id小于83,目标点满足条件身高大于等于5956,薪资大于8449,且类型为拥有的边","g.V().has('id', 16).has('id', lt(83)).outE('has').as('e').inV().has('height', gte(5956)).has('salary', gt(8449)).select('e')"
"使用列为createTime,id,name, 数据为(2014-05-03,61,'Prescription_312'),(2004-09-01,75,'Prescription_187'),(2034-03-27,85,'Prescription_264'),(1995-09-22,40,'Prescription_380')的子查询作为输入表, 以属性createTime作为相等条件,帮我查询所有用户以身高,年龄,性别分组的id, 根据id从大到小排序","g.withSideEffect('p', [['createTime':'2014-05-03','id':61,'name':'Prescription_312'],['createTime':'2004-09-01','id':75,'name':'Prescription_187'],['createTime':'2034-03-27','id':85,'name':'Prescription_264'],['createTime':'1995-09-22','id':40,'name':'Prescription_380']]).V().hasLabel('user').as('a').where(eq('a')).by('createTime').by(select('p').unfold().values('createTime')).select('a').values('id').group().by(project('height','age','gender').by(values('height')).by(values('age')).by(values('gender'))).order(local).by(values, desc)"
"帮我查询所有和公司美团有关系的账号或person或公司,返回这些点的创建时间,是否冻结","g.V().has('company', 'name', '美团').bothE().otherV().hasLabel(within('account', 'person', 'company')).project('createTime', 'isBlock').by(values('createTime')).by(values('isBlock'))"
"找出所有名为JavaGuid的点的,id小于124或name小于30的friend,返回这些friend的name,和边的f0,weight","g.V().has('name', 'JavaGuid').outE('friend').as('e').inV().as('b').where(or(__.has('id', lt(124)), __.has('name', lt(30)))).select('b', 'e').by('name').by(project('f0', 'weight').by('f0').by('weight'))"
 查询与何思思有喜欢关系的用户。,"g.V().hasLabel('person').has('name', '何思思').inE('likes').outV()"
 找名叫韩思琪的人，并返回他们的身高。,"g.V().hasLabel('person').has('name', '韩思琪').values('height')"
查找前164个label为包含的边,g.E().hasLabel('contain').limit(164)
查找全部和事项ISSUE-359之间有属于关系的仓库,"g.V().hasLabel('issue').has('name', 'ISSUE-359').outE('belong').inV().hasLabel('repository')"
提供一个Light转移账户，显示其他人员拥有的数量。,"g.V().has('account', 'name', 'Light').outE('transfer').inV().hasLabel('account').inE('own').outV().hasLabel('person').count()"
"以786,320作为请求点id, 以属性id作为相等条件,请帮我查找所有与country中国有关系的country的id","g.inject([786, 320]).unfold().as('p').V().hasLabel('country').has('id', __.select('p')).has('name', '中国').bothE().otherV().hasLabel('country').id()"
"查询与名为徐梅和Jimmy的点共同认识的,label为person的节点","g.V().has('name', '徐梅').out('knows').as('a').in('knows').has('name', 'Jimmy').as('c').select('a').hasLabel('person')"
 请帮我找出14个与Order_482和Order_189有关系的orders节点。,"g.V().has('name', 'Order_482').outE().inV().hasLabel('orders').as('b').inE().outV().has('name', 'Order_189').select('b').limit(14)"
"请帮我找出buyer cancel的orders, 令orders的name的值等于createsorders的buyer的age的最小值, 再查找orders contain的goods","g.V().hasLabel('buyer').as('a').outE('cancel').as('e').inV().hasLabel('orders').as('b').sideEffect(__.select('b').sack(assign).by(__.in('creates').hasLabel('buyer').values('age').min()).property('name', __.sack())).select('b').out('contain').hasLabel('goods').as('d').select('b', 'd').by('name').by()"
 请帮我找出Order_229订单相关的订单，并返回包含在Order_229订单中的其他商品。,"g.V().has('orders', 'name', 'Order_229').as('a').bothE().otherV().hasLabel('orders').as('b').select('a').outE('contain').inV().hasLabel('goods').as('c').select('a', 'b', 'c')"
"查询person王国强knows的person,被其他person likes的数量","g.V().hasLabel('person').has('name', '王国强').out('knows').hasLabel('person').in('likes').hasLabel('person').count()"
"请帮我查找48个和label为电影院的点有上映关系的电影,并且和这些电影有拥有关系的标签",g.V().hasLabel('cinema').out('releases').hasLabel('film').out('has').hasLabel('tag').limit(48)
"帮我查询student selects的course, 令course的courseHour的值等于selectscourse的student的gender的最小值, 再查找course belong的department","g.V().hasLabel('student').as('a').outE('selects').as('e').inV().hasLabel('course').as('b').sideEffect(select('b').property('courseHour', select('b').inE('selects').as('e2').outV().hasLabel('student').as('c').values('gender').min())).outE('belong').as('e3').inV().hasLabel('department').as('d').select('b', 'd').by('courseHour').by()"
"请帮我找出167个reader黄思思和陈轩,共同的partner","g.V().has('reader', 'name', '黄思思').as('a').outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().has('reader', 'name', '陈轩').as('c').select('b').limit(167)"
"给出university has的department, 令department的name的值等于belongdepartment的course的id的和, 再查找department has的teacher","g.V().hasLabel('university').as('a').outE('has').inV().hasLabel('department').as('b').sideEffect(__.select('b').inE('belong').outV().hasLabel('course').values('id').sum().as('name')).select('b').outE('has').inV().hasLabel('teacher').as('d').select('b', 'd').by('name').by()"
"返回标签等于contain,且f1不是false的边","g.E().hasLabel('contain').has('f1', neq(false))"
"使用列为id,value,name, 数据为(88,519,'天津'),(95,608,'深圳')的子查询作为输入表, 源点的value等于输入表value,找出标签等于国家的点,返回46个","g.inject([['id':88,'value':519,'name':'天津'],['id':95,'value':608,'name':'深圳']]).as('p').unfold().as('row').select('row').by(values).as('p_row').V().hasLabel('country').as('a').where(eq('a')).by('value').by(select('p_row').select('value')).limit(46).select('a')"
获取所有名为'越南'且标签为'国家'的点，并返回它们的价值。,"g.V().hasLabel('country').has('name', '越南').values('value')"
"查询与计算机学院存在拥有关系的学生,学生与课程存在选择关系的点,返回这些点的价值","g.V().has('name', '计算机学院').out('has').hasLabel('student').out('selects').hasLabel('course').values('value')"
从作家到书，通过撰写连接。,g.V().hasLabel('author').outE('write').as('e').inV().hasLabel('book').select('e')
"以212作为请求点id, 源点的id等于输入表id,帮我查询和类型为person的点有person_apply_loan关系的贷款,并且和这些贷款有loan_deposit_account关系的账号,并且和这些账号有account_repay_loan关系的贷款","g.withSideEffect('p', [[212]]).V().hasLabel('person').as('a').where(__.select('a').values('id').is(__.select('p').unfold())).outE('person_apply_loan').as('e').inV().hasLabel('loan').as('b').outE('loan_deposit_account').as('e2').inV().hasLabel('account').as('c').outE('account_repay_loan').as('e3').inV().hasLabel('loan').as('d').select('d')"
"请帮我查找和seller有关联的goods节点,并根据其price,id,value分组,返回price,id,value,以及id的最小值加11的值","g.V().hasLabel('seller').bothE('has').otherV().hasLabel('goods').group().by(project('price', 'id', 'value').by(values('price')).by(values('id')).by(values('value'))).by(values('id').min().math('_ + 11')).select(values).unfold().project('b.price', 'b.id', 'b.value', 'MIN(b.id) + 11').by(select(keys).select('price')).by(select(keys).select('id')).by(select(keys).select('value')).by(select(values))"
"使用列为name,value,peopleNumber, 数据为('腾讯',510,679),('腾讯',286,774),('滴滴',558,739)的子查询作为输入表, 源点的name等于输入表name,查询university belong的city,返回其源点的level除1的个数,以及目标点的peopleNumber的最小值减3233加917的数量","g.withSideEffect('p', [['腾讯', 510, 679], ['腾讯', 286, 774], ['滴滴', 558, 739]]).V().hasLabel('university').as('a').where(__.select('a').values('name').is(within(__.select('p').unfold().limit(local, 1)))).outE('university_belong_city').inV().hasLabel('city').as('b').select('a', 'b').by().group().by(__.constant(1)).unfold().project('count_level_div_1', 'count_min_peopleNumber_expr').by(__.select(values).unfold().select('a').values('level').fold().count(local)).by(__.select(values).unfold().select('b').values('peopleNumber').min().is(neq(null)).choose(__.is(neq(null)), __.math('_ - 3233 + 917'), __.constant(null)).fold().count(local))"
"返回被person孙宏创造的评论,和孙宏观看的电影","g.V().hasLabel('person').has('name', '孙宏').as('b').out('creates').hasLabel('comment').as('a').select('b').out('watch').hasLabel('film').as('c').select('a', 'b', 'c')"
请帮我查找和book呐喊之间有refers关系的book,"g.V().hasLabel('book').has('name', '呐喊').outE('refers').inV().hasLabel('book')"
"请帮我查找与person吴思琪存在申请关系,且与账号LX001存在存款关系的贷款节点，返回这些贷款的id,金额,权重,及person吴思琪的名字,及账号LX001的名字","g.V().has('person', 'name', '吴思琪').as('a').outE('apply').inV().hasLabel('loan').as('b').inE('deposit').outV().has('account', 'name', 'LX001').as('c').select('a', 'b', 'c').by('name').by(values('id', 'amount', 'weight')).by('name')"
"请帮我找出所有与仓库有关系的用户节点,且用户节点的名字不是张国强,并返回这些用户的年龄加年龄的值,以及用户的height的数量加192的值","g.V().hasLabel('repository').as('a').outE().as('e').inV().hasLabel('user').has('name', neq('张国强')).as('b').project('age_plus_age', 'count_height_plus_192').by(select('b').values('age').math('_ + _')).by(select('b').values('height').count().math('_ + 192'))"
请帮我找出country为美国的所有city及其对应的university名称,"g.V().has('country', 'name', '美国').out('contain').hasLabel('city').as('b').out('contain').hasLabel('university').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"以847,620,181作为请求点id, 以属性id作为相等条件,请帮我查找标签为buyer_look_goods,并且weight小于170.44的边","g.inject([847, 620, 181]).unfold().as('p').V().has('id', __.select('p')).as('a').outE('buyer_look_goods').has('weight', lt(170.44)).as('e').inV().as('b').select('e')"
"查询创造买家黄月取消的订单,的买家","g.V().hasLabel('buyer').has('name', '黄月').outE('cancel').inV().hasLabel('orders').as('b').inE('creates').outV().hasLabel('buyer').as('c').select('b', 'c')"
"找出被教师教数量大于15的课程,记为relationCount,再查询这些课程教的课程","g.V().hasLabel('course').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('teach').hasLabel('teacher').id().max()).where(__.select('relationCount').is(gt(15))).select('a').out('teach').hasLabel('course').dedup()"
"用这个schema:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出所有源点满足条件性别等于male且年龄不为空,或性别大于等于43,目标点满足条件名字不是李思琪或身高不是99,且label为buyer_consult_seller的边","g.E().hasLabel('buyer_consult_seller').where(__.or(__.and(__.outV().has('gender', 'male').has('age', neq(null)), __.inV().or(__.has('name', neq('李思琪')), __.has('height', neq(99)))), __.and(__.outV().has('gender', gte(43)), __.inV().or(__.has('name', neq('李思琪')), __.has('height', neq(99))))))"
"返回20个名为陈红的点knows的label为person的节点,且节点gender不等于male或gender不是famale","g.V().has('name', '陈红').out('knows').hasLabel('person').has('gender', neq('male')).or().has('gender', neq('famale')).limit(20)"
"以('陈月',80,196),('赵轩',42,162)作为请求表数据,属性分别为name,id,height, 以属性name作为相等条件,帮我查询名为周国强的person","g.inject(['陈月',80,196],['赵轩',42,162]).as('p').select('p').unfold().as('row').project('name','id','height').by(limit(local, 1)).by(limit(local, 2)).by(limit(local, 3)).as('p').V().hasLabel('person').as('a').where(eq('a')).by('name').by(select('p').select('name')).where(select('a').values('name').is(eq('周国强'))).select('a')"
"用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询名为XXD的account,以及与其有关的loan,并返回XXD的value和这些loan的weight","g.V().hasLabel('account').has('name', 'XXD').as('a').bothE().otherV().hasLabel('loan').as('b').select('a', 'b').by('value').by('weight')"
"查询person何伟支付的person,以及支付这些person的person","g.V().has('person', 'name', '何伟').outE('pay').inV().hasLabel('person').as('b').inE('pay').outV().hasLabel('person').as('c').select('b', 'c')"
"请帮我查找教课程高等数学的教师,和这些教师教的课程","g.V().has('course', 'name', '高等数学').in('teach').as('b').out('teach').as('c').select('b', 'c')"
"输入请求点id的列表769,772, 源点的id等于输入表id,返回全部与university有关系的university节点,且university节点的name不是重庆大学,并返回这些点的level对4取余减66的值,以及level除3的值","g.withSideEffect('p', [769, 772]).V().hasLabel('university').as('a').where(__.select('a').values('id').is(within(__.select('p')))).outE().as('e').inV().hasLabel('university').as('b').where(__.select('b').values('name').is(neq('重庆大学'))).select('b').project('expr1', 'expr2').by(__.values('level').math('_ % 4').math('_ - 66')).by(__.values('level').math('_ / 3'))"
"返回医生的三角的环,边类型为属于, 并返回这些点的id","g.V().hasLabel('doctor').as('a').outE('belong').inV().as('b').outE('belong').inV().as('c').where(__.as('c').outE('belong').inV().as('a')).select('a', 'b', 'c').by().by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
 查找张建国和杜建聪共同认识的人。,"g.V().has('person', 'name', '张建国').outE('knows').inV().where(__.inE('knows').outV().has('person', 'name', '杜建聪')).dedup()"
 145个用户节点与黄思思和Jimmy有关联。,"g.V().has('name', '黄思思').outE().inV().hasLabel('user').as('b').inE().outV().has('name', 'Jimmy').select('b').limit(145)"
 返回与郑建聪有关的人，再返回与郑建聪同事的其他人员。,"g.V().has('person', 'name', '郑建聪').as('a').bothE().otherV().hasLabel('person').as('b').select('a').bothE('colleague').otherV().hasLabel('person').as('c').select('a', 'b', 'c')"
"查询性别为famale且身高在155到188之间的person喜欢的评论的名称,以及这些评论 属于的电影的名称","g.V().hasLabel('person').has('gender', 'famale').has('height', between(155, 188)).out('likes').hasLabel('comment').as('b').out('belong').hasLabel('film').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"帮我查询被电影拥有数量大于57的标签,记为relationCount,再查询这些标签拥有的标签","g.V().hasLabel('tag').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('has').hasLabel('film').id().mean()).select('a', 'relationCount').as('a_with_count').select('a_with_count').where(__.select('relationCount').is(gt(57))).select('a').out('has').hasLabel('tag').as('c').select('c')"
"调用SSSP函数,以'jk', 'iO', 'RM'作为输入,返回运算结果","g.withSideEffect('startVertex', 'jk').withSideEffect('endVertex', 'iO').withSideEffect('edgeProperty', 'RM').V().has('id', 'jk').repeat(bothE().has('label', 'RM').otherV().simplePath()).until(has('id', 'iO')).path().by('id').by('weight').limit(1).project('id', 'distance').by(tail(local).select('id')).by(tail(local).select('weight').sum())"
找出全部名为广州的节点包含的国家或城市或公司,"g.V().has('name', '广州').outE('contain').inV().hasLabel(within('country', 'city', 'company')).dedup()"
 请帮我找出与王思琪和陈梅相关的185个买家。,"g.V().has('buyer', 'name', '王思琪').outE('relation').inV().as('b').inE('relation').outV().has('buyer', 'name', '陈梅').select('b').limit(185)"
"查询所有与film有关系的film节点,且film节点的name不等于功夫,并返回这些film的id减32乘328的值,以及film的value对223取余的最大值","g.V().hasLabel('film').as('a').outE().as('e').inV().hasLabel('film').has('name', neq('功夫')).as('b').project('expr1', 'expr2').by(__.select('b').values('id').math('(_ - 32) * 328')).by(__.select('b').values('value').math('_ % 223')).select(values).unfold().group().by(keys).by(__.unfold().select(values).max()).select(values).project('(b.id - 32) * 328', 'MAX(b.value % 223)').by(__.select('expr1').unfold()).by(__.select('expr2'))"
请帮我找出与徐思琪和马梅都有关联的114个Patient节点。,"g.V().has('name', '徐思琪').outE().inV().hasLabel('patient').as('b').inE().outV().has('name', '马梅').select('b').limit(114)"
 朋友的朋友或大学的朋友,g.V().hasLabel('university').outE('friend').inV().outE('friend').inV().dedup()
找到与生物学院部门和程序设计课程相关的教师节点。,"g.V().has('department', 'name', '生物学院').out('has').hasLabel('teacher').as('b').out('teach').has('course', 'name', '程序设计').select('b')"
 电子科技大学位于哪个城市？这个城市被其他国家包含的数量是多少？,"g.V().has('university', 'name', '电子科技大学').out('belong').in('contain').hasLabel('country').count()"
"请帮我找出与作家赵科有关,且与书悲惨世界有关系的书节点","g.V().has('author', 'name', '赵科').out('write').as('b').in('refers').has('book', 'name', '悲惨世界').select('b')"
"返回全部源点类型为编辑,边类型为发布的边,返回这些边的目标点id对162取余的最大值,和srcId的平均值乘110的值","g.V().hasLabel('publisher').outE('publish').project('max_targetId_mod', 'avg_srcId_times_110').by(__.values('targetId').math('_ % 162').max()).by(__.values('srcId').mean().math('_ * 110'))"
 Find the point where buyer Xu Mei and Wu Xue both create relationships.,"g.V().has('buyer', 'name', '徐梅').outE('creates').inV().as('b').inE('creates').outV().has('buyer', 'name', '吴雪').select('b')"
给出大学的3度以内的环,"g.V().hasLabel('university').as('a').repeat(both().simplePath().as('b')).times(2).where(out().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').values('id')).by(select('b').values('id'))"
获取贷款人的朋友，或者贷款人朋友的朋友。,"g.V().hasLabel('loan').outE('friend').inV().range(1, 2).dedup()"
"找出forum推特contain的post,以及publish这些post的user, 令post的peopleNumber等于forum的value,令post的createTime等于post的value减72加409, 返回forum的createTime,post的name,user的name","g.V().hasLabel('forum').has('name', '推特').as('a').outE('contain').inV().hasLabel('post').as('b').inE('publish').outV().hasLabel('user').as('c').select('a', 'b', 'c').by('createTime').by(__.project('name', 'peopleNumber', 'createTime').by('name').by(select('a').values('value')).by(select('b').values('value').math('_ - 72 + 409'))).by('name')"
"返回名为计算机学院的部门或课程或大学,以及与其有关的课程,并返回计算机学院的名字和这些课程的学分","g.V().has(label, within('department', 'course', 'university')).has('name', '计算机学院').bothE().otherV().has(label, 'course').project('a_name', 'b_credit').by(select('a').values('name')).by(values('credit'))"
" 请帮我查询点名为Prescription_134,类型为prescription的数据点，并返回这些点的createTime。","g.V().hasLabel('prescription').has('name', 'Prescription_134').values('createTime')"
"查询申请公司Bilibili申请的贷款,的person","g.V().hasLabel('company').has('name', 'Bilibili').outE('apply').inV().hasLabel('loan').as('b').inE('apply').outV().hasLabel('person').as('c').select('b', 'c')"
"以555,924,987,225,588作为请求点id, 源点的id等于输入表id,请帮我查找名为李国强的person,以及与其有关的person,并返回李国强的gender和这些person的age","g.inject([555, 924, 987, 225, 588]).as('p').V().hasLabel('person').as('a').where('a', eq('p')).by('id').by().has('name', '李国强').bothE().as('e').otherV().hasLabel('person').as('b').select('a', 'b').by('gender').by('age')"
获取Comment_128所属电影的标签,"g.V().hasLabel('comment').has('name', 'Comment_128').out('belong').hasLabel('film').out('has').hasLabel('tag')"
请帮我找出192个与徐强和杜雪都存在关系的person节点,"g.V().has('name', '徐强').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '杜雪').select('b').limit(192)"
获取名为Comment_128的评论,"g.V().hasLabel('comment').has('name', 'Comment_128')"
"返回所有person的relation,或其relation的relation",g.V().hasLabel('person').outE('relation').inV().outE('relation').inV().dedup()
 找出同时与徐月和孙伟有关联的人，包括他们的ID、姓名、薪资，以及徐月和孙伟的ID。,"g.V().has('person', 'name', '徐月').as('a').out('lover').hasLabel('person').as('b').in('friend').has('person', 'name', '孙伟').as('c').select('a', 'b', 'c').by('id').by(union(id(), values('name'), values('salary')).fold()).by('id').project('a_id', 'b_id', 'b_name', 'b_salary', 'c_id').by(select('a')).by(select('b').unfold().limit(1)).by(select('b').unfold().skip(1).limit(1)).by(select('b').unfold().skip(2).limit(1)).by(select('c'))"
返回类型为tag或user或post的点,"g.V().hasLabel(within('tag', 'user', 'post'))"
 请帮我查询黄科和郑梅这两个用户，他们之间共同拥有的partner节点名单。,"g.V().has('user', 'name', '黄科').outE('partner').inV().as('b').inE('partner').outV().has('user', 'name', '郑梅').select('b').values('name')"
"帮我查询5个publisher张若涵和徐思思,共同的partner","g.V().has('publisher', 'name', '张若涵').outE('partner').inV().as('b').inE('partner').outV().has('publisher', 'name', '徐思思').select('b').limit(5)"
"输入请求点id的列表167, 源点的id等于输入表id,查询前101个满足条件id不是75的作家","g.withSideEffect('p', [167]).V().hasLabel('author').as('a').where(and(__.select('a').values('id').is(eq(__.select('p'))), __.select('a').values('id').is(neq(75)))).select('a').limit(101)"
"查找名为罪与罚的点关联的全部书,并对这些书的id进行求和","g.V().has('name', '罪与罚').outE('relates').inV().hasLabel('book').values('id').sum()"
"查找医生以薪资分组的id, 根据id从大到小排序","g.V().hasLabel('doctor').group().by('salary').by(values('id').fold()).order(local).by(keys, desc)"
请帮我找出与author相关的book，以及通过write关系与其他author相关的book,"g.V().has('author', 'id', '172').bothE().otherV().hasLabel('book').as('b').inE('write').otherV().hasLabel('author').as('c').select('b', 'c')"
"帮我查询label为likes,以及f1等于false或srcId不是163或f1不是false的边","g.E().hasLabel('likes').or(has('f1', false), has('srcId', neq(163)), has('f1', neq(false)))"
 返回吴红和郑红两个用户共同的朋友节点，标签为person。,"g.V().has('person', 'name', '吴红').out('friend').as('b').in('friend').has('person', 'name', '郑红').select('b').values('name')"
 找出134个与孙思思和王思思有关联的软件节点。,"g.V().has('name', '孙思思').outE().inV().hasLabel('software').as('b').inE().outV().has('name', '王思思').select('b').limit(134)"
查询编辑的1跳以内的环,"g.V().hasLabel('publisher').as('a').bothE().otherV().where(within('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
查询法学院的学生选择了哪些课程,"g.V().hasLabel('department').has('name', '法学院').out('has').hasLabel('student').out('selects').hasLabel('course')"
"给出认识person马轩的person,和这些person恋人的person","g.V().hasLabel('person').has('name', '马轩').as('a').in('knows').hasLabel('person').as('b').out('lover').hasLabel('person').as('c').select('b', 'c')"
"请帮我找出所有与外科存在拥有关系的医生,医生与病人存在诊断关系的点,返回这些点的身高","g.V().has('name', '外科').out('has').hasLabel('doctor').out('diagnose').hasLabel('patient').values('height')"
返回前77个label为包含的边,g.E().hasLabel('contain').limit(77)
"返回所有名为徐建国的,薪资不等于3103或身高大于161的父母,返回这些父母的名字,和边的目标点id,f1,f0","g.V().has('name', '徐建国').outE('parent').as('e').inV().has('salary', neq(3103)).or().has('height', gt(161)).as('b').select('b', 'e').by('name').by('targetId').by('f1').by('f0')"
"给出person apply的loan,返回其源点的age减age的值,以及目标点的amount减amount除0的和","g.V().hasLabel('person').as('a').outE('apply').as('e').inV().hasLabel('loan').as('b').project('expr1', 'sum_expr2').by(select('a').values('age').math('_ - _')).by(select('b').values('amount').math('_ - _').math('_ / 0').sum())"
"以110作为请求点id, 以属性id作为相等条件,请帮我找出以watch关系关联了film绿巨人的person","g.withSideEffect('p', [['id', 110]]).V().hasLabel('film').as('a').where(and(__.select('a').values('id').is(eq(__.select('p').select('id'))), __.select('a').has('name', '绿巨人'))).inE('person_watch_film').outV().hasLabel('person').as('b').select('b')"
 请帮我查找共同支付人名为周月和吴国强，标签为person的点。,"g.V().has('name', '周月').outE('pay').inV().hasLabel('person').as('b').inE('pay').outV().has('name', '吴国强').select('b')"
"查找关联person周宏的person,和这些person家人的person","g.V().hasLabel('person').has('name', '周宏').in('relates').as('b').out('family').as('c').select('b', 'c')"
返回与论坛推特和知网都存在包含关系的点,"g.V().hasLabel('forum').has('name', '推特').outE('contain').inV().as('b').inE('contain').outV().hasLabel('forum').has('name', '知网').select('b')"
找到买家陈思琪咨询的卖家，返回该卖家拥有的商品名称和类别。,"g.V().hasLabel('buyer').has('name', '陈思琪').out('consult').hasLabel('seller').out('has').hasLabel('goods').project('c.name', 'c.category').by('name').by('category')"
"查询181个和标签为person的点有knows关系的person,并且和这些person有knows关系的person",g.V().hasLabel('person').as('a').out('knows').hasLabel('person').as('b').out('knows').hasLabel('person').as('c').select('c').limit(181)
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出和person有关联的person节点,并根据其名字,性别,年龄分组,返回名字,性别,年龄,以及薪资减6419的值","g.V().hasLabel('person').as('a').bothE('person_colleague_person').otherV().hasLabel('person').as('b').select('b').values('name', 'gender', 'age', 'salary').by().by().by().by(__.math('_ - 6419')).group().by(__.select('name', 'gender', 'age')).by(__.select('salary').fold())"
"查找前104个状态不是Running,状态是Closed,或状态不等于Running的事项","g.V().hasLabel('issue').or(has('status', neq('Running')).and(has('status', 'Closed')), has('status', neq('Running'))).limit(104)"
 找出所有与字节公司有合作伙伴关系或合作伙伴的合作伙伴关系的贷款公司。,"g.V().hasLabel('company').has('name', '字节').outE('partner').inV().hasLabel('loan').union(identity(), outE('partner').inV().hasLabel('loan')).dedup()"
"返回与杜梅存在喜欢关系的仓库,仓库与合并请求存在拥有关系的点,返回这些点的名字","g.V().has('name', '杜梅').out('likes').hasLabel('repository').out('has').hasLabel('pullRequest').values('name')"
"查询标签等于orders的点,返回133个",g.V().hasLabel('orders').limit(133)
"返回与名为韩国强和吴雪的点共同likes的,标签为repository的节点","g.V().has('name', '韩国强').outE('likes').inV().hasLabel('repository').as('b').inE('likes').outV().has('name', '吴雪').select('b')"
查找与person郑科有关系的person的身高,"g.V().hasLabel('person').has('name', '郑科').bothE().otherV().hasLabel('person').values('height')"
请帮我找出user马红喜欢的帖子，并返回这些帖子所包含的标签的名称和ID。,"g.V().has('user', 'name', '马红').out('likes').out('has').project('c.name', 'c.id').by('name').by('id')"
返回包含论坛知网并拥有标签文艺的帖子节点。这些帖子的字数、语言以及论坛知网和标签文艺的创建时间都需要提供。,"g.V().hasLabel('forum').has('name', '知网').as('a').outE('contain').inV().hasLabel('post').as('b').inE('has').outV().hasLabel('tag').has('name', '文艺').as('c').select('a', 'b', 'c').by('createTime').by(values('wordCount', 'lang')).by('id')"
"帮我查询用户黄宏创造的事项,以及拥有这些事项的仓库, 令仓库的id等于仓库的星数减668, 返回用户的性别,事项的状态,仓库的id","g.V().has('user', 'name', '黄宏').as('a').outE('creates').inV().hasLabel('issue').as('b').inE('has').outV().hasLabel('repository').as('c').project('a_gender', 'b_status', 'c_id').by(select('a').values('gender')).by(select('b').values('status')).by(select('c').values('stars').math('_ - 668'))"
 请帮我查找郑强所有点知的作者，以及郑强被点知的作者，然后一起返回。,"g.V().has('name', '郑强').as('a').bothE('knows').otherV().hasLabel('author').as('b').select('a', 'b')"
"请帮我找出和名为百年孤独的书有引用关系,或有引用的引用关系的书","g.V().has('book', 'name', '百年孤独').bothE('refers').otherV().hasLabel('book').range(1, 3).dedup()"
"使用列为id,peopleNumber,value, 数据为(29,6338,302)的子查询作为输入表, 以属性value作为相等条件,查询所有id为47的company关联的company,和以cooperate关系关联了这些company的其他university","g.withSideEffect('p', [['id':29, 'peopleNumber':6338, 'value':302]]).V().hasLabel('company').has('value', __.select('p').unfold().select('value')).has('id', '47').bothE().otherV().hasLabel('company').as('b').inE('university_cooperate_company').outV().hasLabel('university').as('c').select('b', 'c')"
找出与person王强有父母关系的1跳以内的环,"g.V().has('person', 'name', '王强').as('a').repeat(bothE('parent').otherV().simplePath()).times(1).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').id()).by(select('b').id())"
请帮我找出名为赵建聪和孙建国的，类型为person的点的共同相关者节点名单。,"g.V().has('person', 'name', '赵建聪').outE('relation').inV().as('b').inE('relation').outV().has('person', 'name', '孙建国').select('b').values('name')"
"返回id为109的书关联的作家,和以认识关系关联了这些作家的其他作家","g.V().has('book', 'id', 109).bothE().otherV().hasLabel('author').as('b').inE('knows').otherV().hasLabel('author').as('c').select('b', 'c')"
"查询被person何若涵创造的评论,和何若涵创造的评论","g.V().has('person', 'name', '何若涵').as('b').out('creates').hasLabel('comment').as('c').select('b').out('creates').hasLabel('comment').as('a').select('a', 'b', 'c')"
请帮我查找所有类型为论坛或标签或帖子的点,"g.V().hasLabel(within('forum', 'tag', 'post'))"
"帮我查询7个和label为医生的点有诊断关系的病人,以及和这些病人有接受关系的处方",g.V().hasLabel('doctor').outE('diagnose').inV().hasLabel('patient').outE('accept').inV().hasLabel('prescription').limit(7)
查找标签等于合并请求或用户或仓库的点,"g.V().hasLabel(within('pullRequest', 'user', 'repository'))"
返回doctor的1度的环,"g.V().hasLabel('doctor').as('a').bothE().otherV().as('b').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"返回和buyer有关联的seller节点,并根据其height,name,salary分组,返回height,name,salary,以及height除188的值","g.V().hasLabel('buyer').bothE('consult').otherV().hasLabel('seller').dedup().group().by(project('height', 'name', 'salary').by(values('height')).by(values('name')).by(values('salary'))).unfold().project('b.height', 'b.name', 'b.salary', 'b.height / 188').by(select(keys).select('height')).by(select(keys).select('name')).by(select(keys).select('salary')).by(select(keys).select('height').math('_ / 188'))"
查询与department表中的急诊部和外科都有关联的点,"g.V().has('department', 'name', '急诊部').outE('has').inV().as('b').inE('has').outV().has('department', 'name', '外科').select('b')"
"请帮我找出id为96的buyer creates的orders, 并将orders有关的orders的name的和赋值给orders(b)的name, 接着查询orders(b)的name小于96的orders contain的goods","g.V().hasLabel('buyer').has('id', 96).outE('creates').inV().hasLabel('orders').as('b').project('b_name', 'd').by(__.coalesce(__.select('b').bothE().bothV().hasLabel('orders').values('name').sum(), __.constant(0))).by(__.select('b').filter(__.project('sum_name').by(__.coalesce(__.bothE().bothV().hasLabel('orders').values('name').sum(), __.constant(0))).select('sum_name').is(lt(96))).outE('contain').inV().hasLabel('goods'))"
请帮我找出所有和部门传染部之间有拥有关系的医生,"g.V().hasLabel('department').has('name', '传染部').outE('has').inV().hasLabel('doctor')"
"找出id为88的点的身高,年龄,薪资","g.V().has('id', 88).project('height', 'age', 'salary').by(values('height')).by(values('age')).by(values('salary'))"
"使用列为srcId,weight,targetId, 数据为(15,110.51,42),(18,168.86,192),(105,189.37,195),(129,170.09,128)的子查询作为输入表, 源点的weight等于输入表weight,查询所有和patient马思思有关系的department节点,返回这些点的weight,name","g.inject([['srcId':15,'weight':110.51,'targetId':42],['srcId':18,'weight':168.86,'targetId':192],['srcId':105,'weight':189.37,'targetId':195],['srcId':129,'weight':170.09,'targetId':128]]).unfold().as('p').V().hasLabel('patient').has('weight', __.select('p').select('weight')).has('name', '马思思').bothE().otherV().hasLabel('department').project('b.weight', 'b.name').by('weight').by('name').dedup()"
"查询和合并请求有关联的仓库节点,并根据其语言分组,返回语言,以及星数除408减624的值",g.V().hasLabel('pullRequest').as('a').bothE('belong').otherV().hasLabel('repository').as('b').select('b').group().by('lang').by(values('stars').math('/ 408 - 624').fold())
"返回名为王思琪和陈轩的,类型是医生的点公共的朋友节点的名单","g.V().hasLabel('doctor').has('name', '王思琪').as('a').outE('friend').inV().as('b').inE('friend').outV().hasLabel('doctor').has('name', '陈轩').as('c').select('b').values('name')"
请帮我找出与部门点相关的学生节点，按姓名和性别进行分组，并返回他们的姓名和性别。,"g.V().hasLabel('department').bothE('has').otherV().hasLabel('student').group().by(values('name', 'gender')).select(keys).unfold().project('b.name', 'b.gender').by(select(keys).select('name')).by(select(keys).select('gender'))"
 请帮我找出与university department partner有关的朋友，然后再帮我找出这些朋友的相关信息。,"g.V().has('university', 'id', '117').bothE().otherV().hasLabel('department').as('b').bothE().otherV().hasLabel('department').as('b').bothE('partner').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
返回与好视影院（cinema）相关的人员，然后返回好视影院发行的其他电影。最后返回这些电影。,"g.V().hasLabel('cinema').has('name', '好视影院').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('releases').otherV().hasLabel('film').as('c').select('a', 'b', 'c')"
"帮我查询76个名为Prescription_147的点包含的类型是药品的节点,且其名字不是999感冒灵,价格小于52","g.V().has('name', 'Prescription_147').outE('contain').inV().hasLabel('medicine').has('name', neq('999感冒灵')).has('price', lt(52)).limit(76)"
"使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查找与patient王梅有patient_accept_prescription关系的3跳的环","g.V().has('patient', 'name', '王梅').as('a').repeat(outE('patient_accept_prescription').inV().simplePath()).times(2).where(loops().is(2)).where(eq('a')).project('a.id', 'b_id').by(select('a').id()).by(id())"
请帮我查找全部与orders Order_319有关系的buyer的gender,"g.V().hasLabel('orders').has('name', 'Order_319').bothE().otherV().hasLabel('buyer').values('gender')"
请帮我找出李科和陈思琪这两位买家的共同朋友。,"g.V().has('buyer', 'name', '李科').outE('friend').inV().as('b').inE('friend').outV().has('buyer', 'name', '陈思琪').select('b').limit(122)"
 请帮我找出所有与计算机学院有关系的教师，以及这些教师所教授的课程，并返回这些课程的名称。,"g.V().has('name', '计算机学院').out('has').hasLabel('teacher').out('teach').hasLabel('course').values('name')"
"用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Vertex tag ( id int ID, name varchar, value int ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出与comment Comment_193和Comment_490都存在comment_belong_film关系的点","g.V().has('comment', 'name', 'Comment_193').out('comment_belong_film').as('b').in('comment_belong_film').has('comment', 'name', 'Comment_490').select('b')"
请帮我找出所有与cinema大众影院有关系的film的value,"g.V().has('cinema', 'name', '大众影院').bothE().otherV().hasLabel('film').values('value')"
给出前151个满足条件等级在3到4之间的大学,"g.V().hasLabel('university').has('level', between(3, 4)).limit(151)"
"请帮我查找id为134的点的语言,星数","g.V().has('id', 134).project('lang', 'stars').by('lang').by('stars')"
"给出名为Post_195和Post_369的,类型是post的点公共的relation节点的名单","g.V().has('post', 'name', 'Post_195').outE('relation').inV().as('b').inE('relation').outV().has('post', 'name', 'Post_369').select('b').values('name')"
 查找与贷款defaultName和defaultName1有存款关系的账户。,"g.V().hasLabel('loan').has('name', 'defaultName').outE('deposit').inV().as('b').inE('deposit').outV().hasLabel('loan').has('name', 'defaultName1').select('b')"
"查询所有源点label为公司,目标点label为城市,label为公司的边",g.V().hasLabel('company').outE('company').where(inV().hasLabel('city')).valueMap(true)
"返回部门物理学院拥有的教师,以及拥有这些教师的部门, 令部门的id等于部门的id, 返回部门(a)的id,教师(b)的年龄,部门(c)的价值","g.V().has('department', 'name', '物理学院').as('a').outE('has').inV().hasLabel('teacher').as('b').inE('has').outV().hasLabel('department').as('c').select('a', 'b', 'c').by('id').by('age').by('value')"
 请帮我查找和郑梅有认识关系的作者，再帮我查找认识郑梅的作者。,"g.V().has('author', 'name', '郑梅').as('a').out('knows').as('b').select('a').in('knows').as('c').select('a', 'b', 'c')"
"请帮我找出所有和名为大众影院的电影院有相关者关系,或有相关者的相关者关系的电影","g.V().has('cinema', 'name', '大众影院').out('relation').aggregate('x').out('relation').where(neq('x')).dedup().union(identity(), select('x').unfold()).hasLabel('film')"
请帮我查找年龄在14到96之间的节点,"g.V().has('age', between(14, 96))"
"根据大小,地址分组,计算id的最大值对id取余的最小值","g.V().hasLabel('a').group().by(union(values('size'), values('address')).fold()).by(values('id').max().as('max_id').select('max_id').math('_ % id').min())"
"使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));返回与doctor张国强和马建国都存在doctor_diagnose_patient关系的点","g.V().hasLabel('doctor').has('name', '张国强').outE('doctor_diagnose_patient').inV().where(__.inE('doctor_diagnose_patient').outV().hasLabel('doctor').has('name', '马建国')).dedup()"
"帮我查询名为XXRepo和Flink的,label为仓库的点公共的相关者节点的名单","g.V().has('repository', 'name', 'XXRepo').outE('relation').inV().as('b').inE('relation').outV().has('repository', 'name', 'Flink').select('b').values('name')"
"查找与公司美团有关系的公司, 返回和这些公司有关联的城市的,面积除59124的值","g.V().has('company', 'name', '美团').bothE().otherV().hasLabel('company').bothE().otherV().hasLabel('city').project('result').by(values('area').math('/ 59124'))"
"请帮我查找全部源点height为空且name等于陈建聪且age在42到59之间,目标点wordCount小于790,且标签为creates的边","g.V().has('name', '陈建聪').has('age', between(42, 59)).hasNot('height').outE('creates').as('e').inV().has('wordCount', lt(790)).select('e')"
"帮我查询喜欢帖子Post_392的用户,和这些用户喜欢的帖子","g.V().hasLabel('post').has('name', 'Post_392').inE('likes').outV().as('b').outE('likes').inV().hasLabel('post').as('c').select('b', 'c')"
返回类型为公司的点,g.V().hasLabel('company')
返回Jimmy的朋友的朋友的伙伴的伙伴,"g.V().has('user', 'name', 'Jimmy').out('friend').out('partner').out('partner')"
"请帮我查找类型是事项的点,返回126个",g.V().hasLabel('issue').limit(126)
"根据身高,薪资分组,计算身高对170取余乘32的值","g.V().hasLabel('a').group().by(values('height', 'salary')).by(values('height').math('_ % 170 * 32'))"
"输入请求点id的列表399,970, 以属性id作为相等条件,请帮我找出被买家郑红创造的订单","g.inject([399, 970]).unfold().as('p').V().hasLabel('orders').has('id', __.select('p')).where(__.in('buyer_creates_orders').hasLabel('buyer').has('name', '郑红')).as('a').select('a').as('b').select('a', 'b')"
返回被买家张建国创造的订单,"g.V().hasLabel('buyer').has('name', '张建国').outE('creates').inV().hasLabel('orders').as('a').select('a').by().project('a', 'b').by().by(__.select('a').in('creates').hasLabel('buyer').has('name', '张建国'))"
 查找皮肤科医生的归属部门。,"g.V().has('department', 'name', '皮肤科').out('has').hasLabel('doctor').out('belong').hasLabel('department')"
查找所有与person韩建国有关系的person的height,"g.V().has('person', 'name', '韩建国').bothE().otherV().hasLabel('person').values('height')"
 返回周思琪的同事，同事的同事，以及他们之间的认识关系，并返回这些人的年龄。,"g.V().has('name', '周思琪').outE('pay').inV().hasLabel('person').outE('knows').inV().hasLabel('person').values('age')"
"请帮我找出与名为Prescription_227和Prescription_437的点共同包含的,标签等于药品的节点","g.V().has('name', 'Prescription_227').out('contain').hasLabel('medicine').as('b').in('contain').has('name', 'Prescription_437').select('b')"
"输入请求点id的列表426,938, 以属性id作为相等条件,请帮我查找87个和label为person的点有person_pay_person关系的person,以及和这些person有person_knows_person关系的person","g.inject([426, 938]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).as('a').outE('person_pay_person').inV().hasLabel('person').as('b').outE('person_knows_person').inV().hasLabel('person').as('c').select('c').limit(87)"
请帮我找出与software Geaflow有关系的software的lang,"g.V().hasLabel('software').has('name', 'Geaflow').bothE().otherV().hasLabel('software').values('lang')"
找出95个与滴滴和华为都存在关系的国家或公司节点,"g.V().has('name', '滴滴').outE().inV().hasLabel(within('country', 'company')).as('b').inE().outV().has('name', '华为').select('b').limit(95)"
请帮我找出所有和seller黄月之间有has关系的goods,"g.V().hasLabel('seller').has('name', '黄月').outE('has').inV().hasLabel('goods')"
"帮我查询全部名为土木学院的,id在6到30之间且薪资大于57的朋友,返回这些朋友的id,和边的目标点id,f1,f0","g.V().has('name', '土木学院').outE('friend').as('e').inV().has('id', between(6, 30)).has('salary', gt(57)).project('b.id', 'e.targetId', 'e.f1', 'e.f0').by(values('id')).by(select('e').values('targetId')).by(select('e').values('f1')).by(select('e').values('f0'))"
查询所有马月点赞的人，以及所有给马月付款的人，并将结果一起返回。,"g.V().has('name', '马月').as('a').outE('likes').inV().hasLabel('person').as('b').select('a').inE('pay').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
查询全部与pullRequest PR-104有关系的user的height,"g.V().hasLabel('pullRequest').has('name', 'PR-104').bothE().otherV().hasLabel('user').values('height')"
 找出95个用户发布的帖子和它们所拥有的标签。,g.V().hasLabel('user').as('a').outE('publish').as('e').inV().hasLabel('post').as('b').outE('has').as('e2').inV().hasLabel('tag').as('c').select('c').limit(95)
"查询全部源点标签等于person,边标签等于pay,并且满足条件targetId为空的边","g.V().hasLabel('person').outE('pay').has('targetId', null).elementMap()"
 查找共同包含英国和中国且标签为城市的节点。,"g.V().has('name', '英国').out('contain').hasLabel('city').as('b').in('contain').has('name', '中国').select('b')"
"请帮我找出121个和类型为person的点有支付关系的person,且和这些person有认识关系的person",g.V().hasLabel('person').as('a').outE('pay').as('e').inV().hasLabel('person').as('b').outE('knows').as('e2').inV().hasLabel('person').as('c').select('c').limit(121)
返回卖家王建聪回答的买家节点咨询的卖家,"g.V().has('seller', 'name', '王建聪').outE('ask').inV().hasLabel('buyer').outE('consult').inV().hasLabel('seller')"
"帮我查询和person吴若涵有关的person,称为X,再帮我查询和这个X有关联的其他person,以及和X有关联的person","g.V().has('person', 'name', '吴若涵').as('a').bothE().bothV().hasLabel('person').where(neq('a')).dedup().as('b').bothE().bothV().hasLabel('person').where(neq('b')).dedup().as('c').select('b').bothE().bothV().hasLabel('person').where(neq('b')).dedup().as('d').select('a', 'b', 'c', 'd')"
找到名为Geaflow123的账户,"g.V().hasLabel('account').has('name', 'Geaflow123')"
帮我查询前44个等级小于3的大学,"g.V().hasLabel('university').has('level', lt(3)).limit(44)"
"给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex tag ( id int ID, name varchar, value int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出全部名为韩红的点likes的post","g.V().has('user', 'name', '韩红').out('user_likes_post').hasLabel('post')"
"根据id分组,计算等级减1的值",g.V().group().by('id').by(values('level').math('_ - 1'))
"找出所有和买家点有取消关系的订单节点,且边满足条件f1不等于true,目标订单节点满足条件价值的最大值小于345","g.V().hasLabel('buyer').as('a').outE('cancel').has('f1', neq(true)).as('e').inV().hasLabel('orders').as('b').group().by('b').by(values('value').max()).unfold().filter(select(values).is(lt(345))).select(keys).select('b')"
找王建国的伙伴的朋友的关系,"g.V().has('buyer', 'name', '王建国').outE('partner').inV().outE('friend').inV().outE('relation').inV()"
找出那些wordCount小于130，或者createTime不是2002年06月02日，或者name不等于Post_197的post，并按照id进行升序排序。,"g.V().hasLabel('post').or(has('wordCount', lt(130)), has('createTime', neq('2002-06-02')), has('name', neq('Post_197'))).order().by('id', asc).limit(176)"
"查找被城市属于数量大于196的国家,记为relationCount,再查询这些国家属于的公司","g.V().hasLabel('country').as('a').project('a', 'relationCount').by(identity()).by(__.in('belong').hasLabel('city').values('id').mean()).where(select('relationCount').is(gt(196))).select('a').out('belong').hasLabel('company').dedup()"
 找出与person节点关联的person节点，按age、id、height分组并返回。,"g.V().hasLabel('person').as('a').bothE('colleague').otherV().hasLabel('person').as('b').select('b').values('age', 'id', 'height').group().by().by(count())"
"请帮我找出作家周月的所有标签等于朋友的边,并根据f1升序排列,返回83个","g.V().has('author', 'name', '周月').outE('friend').order().by('f1', asc).limit(83).inV()"
"查找用户Tom创造的合并请求,被其他用户创造的数量","g.V().hasLabel('user').has('name', 'Tom').outE('creates').inV().hasLabel('pullRequest').as('b').inE('creates').outV().hasLabel('user').as('c').where(neq('a')).select('c').count()"
请帮我查找与person张月有认识关系的1跳以内的环,"g.V().has('person', 'name', '张月').as('a').bothE('knows').otherV().as('b').where('a', eq('b')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').id()).by(select('b').id())"
"根据salary,name,id分组,计算age减17的值","g.V().hasLabel('a').group().by(project('salary', 'name', 'id').by('salary').by('name').by('id')).by(values('age').math('_ - 17'))"
"请帮我找出person何伟的所有类型为相关者的边,并根据权重升序排列,返回13个","g.V().has('person', 'name', '何伟').outE('relation').order().by('weight', asc).limit(13).inV()"
 查找与黄宏有knows关系的作者。,"g.V().has('author', 'name', '黄宏').in('knows').hasLabel('author')"
"以(2,5375.78,388),(73,5569.24,903),(87,9032.69,479)作为请求表数据,属性分别为id,amount,weight, 源点的id等于输入表id,请帮我查找和label为account的点有account_repay_loan关系的loan,并且和这些loan有loan_deposit_account关系的account,并且和这些account有account_repay_loan关系的loan","g.withSideEffect('p', [[id:2, amount:5375.78, weight:388], [id:73, amount:5569.24, weight:903], [id:87, amount:9032.69, weight:479]]).V().hasLabel('account').as('a').where(__.select('a').values('id').is(within(__.select('p').unfold().values('id')))).out('account_repay_loan').hasLabel('loan').as('b').in('loan_deposit_account').hasLabel('account').as('c').out('account_repay_loan').hasLabel('loan').as('d').select('d')"
 找出与软件MySQL和阿里公司有关联的软件节点，并返回它们的名称。,"g.V().has('software', 'name', 'Mysql').outE().inV().hasLabel('software').as('b').inE().outV().has('company', 'name', '阿里').select('b').values('name')"
 查找与张月有联系或相关联系的商品。,"g.V().hasLabel('buyer').has('name', '张月').outE('relation').inV().hasLabel('goods').range(1, 2).dedup()"
"请帮我找出薪资为空或性别不是famale的person认识的person的名称,以及这些person 认识的person的名称","g.V().hasLabel('person').where(or(__.not(values('salary')), __.not(has('gender', 'famale')))).as('a').out('knows').hasLabel('person').as('b').out('knows').hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"帮我查询与部门眼科有关,且与处方Prescription_497有关系的医生节点","g.V().has('department', 'name', '眼科').bothE('has').otherV().hasLabel('doctor').bothE('creates').otherV().has('prescription', 'name', 'Prescription_497').select('b')"
 找出56岁以上的顾客取消的订单，并列举出包含的商品。,"g.V().hasLabel('buyer').has('age', gt(56)).outE('cancel').inV().hasLabel('orders').as('b').outE('contain').inV().hasLabel('goods').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
请帮我找出前20个满足条件id不是27的电影院,"g.V().hasLabel('cinema').has('id', neq(27)).limit(20)"
"查询label为父母,且满足条件权重为空或权重在122.59到167.02之间,且f1不等于false的边","g.E().hasLabel('parent').where(or(hasNot('weight'), has('weight', between(122.59, 167.02)))).has('f1', neq(false))"
 找出与类型为'person'的实体有关联的'knows'关系的人，以及与这些人有关联的'pay'关系的人，以及与这些人有关联的'pay'关系的人。,g.V().hasLabel('person').as('a').outE('knows').hasLabel('knows').inV().hasLabel('person').as('b').outE('pay').hasLabel('pay').inV().hasLabel('person').as('c').outE('pay').hasLabel('pay').inV().hasLabel('person').as('d').select('d')
"查找全部与吴思思存在取消关系的订单,订单与商品存在包含关系的点,返回这些点的价值","g.V().has('name', '吴思思').outE('cancel').inV().hasLabel('orders').outE('contain').inV().hasLabel('goods').values('value')"
"查找和user马月有关系的issue或pullRequest,返回这些点的createTime,weight","g.V().hasLabel('user').has('name', '马月').bothE().otherV().hasLabel(within('issue', 'pullRequest')).project('createTime', 'weight').by(values('createTime')).by(values('weight'))"
"以('微软',3,552),('腾讯',27,3),('Bilibili',55,154),('Bilibili',3,476)作为请求表数据,属性分别为name,id,value, 源点的id等于输入表id,帮我查询id为124的点的name,value","g.inject(['微软', 3, 552], ['腾讯', 27, 3], ['Bilibili', 55, 154], ['Bilibili', 3, 476]).as('p').V().has('id', 124).as('a').project('a.name', 'a.value').by(values('name')).by(values('value'))"
"查询所有源点标签等于医生,边标签等于创造,且f0为514且f0等于34的边","g.V().hasLabel('doctor').outE('creates').has('f0', 514).has('f0', 34).dedup()"
帮我查询课程大学物理属于的部门节点拥有的学生,"g.V().has('course', 'name', '大学物理').out('belong').out('has').hasLabel('student')"
"帮我查询公司美团创造的软件,以及提交这些软件的person","g.V().has('company', 'name', '美团').outE('creates').inV().hasLabel('software').as('b').inE('commits').outV().hasLabel('person').as('c').select('b', 'c')"
查询与person王思思有喜欢关系的3度的环,"g.V().has('person', 'name', '王思思').as('a').repeat(bothE('likes').otherV().simplePath()).times(2).where(cyclicPath()).where(eq('a')).select('a').project('a.id', 'b_id').by(id()).by(select(all, 'v').unfold().tail(1).id())"
"查找名为Order_133的卖家,以及与其有关的商品,并返回Order_133的价值和这些商品的id","g.V().has('seller', 'name', 'Order_133').as('a').bothE().as('e').otherV().hasLabel('goods').as('b').select('a', 'b').by('value').by('id')"
"找出orders Order_417 contain的goods,被其他buyer look的数量","g.V().has('orders', 'name', 'Order_417').out('contain').in('look').hasLabel('buyer').count()"
"使用列为value,name,size, 数据为(930,'法学院',79),(533,'数学学院',56)的子查询作为输入表, 源点的size等于输入表size,给出和部门土木学院有department_has_student关系的学生,再给出以department_has_teacher关系关联了土木学院的教师","g.withSideEffect('p', [['value':930, 'name':'法学院', 'size':79], ['value':533, 'name':'数学学院', 'size':56]]).V().hasLabel('department').has('name', '土木学院').as('a').filter(where(select('a').values('size').is(within(select('p').unfold().values('size'))))).bothE('department_has_student', 'department_has_teacher').otherV().choose(values('label')).option('student', __.as('b')).option('teacher', __.as('c')).select('a', 'b', 'c')"
请帮我找出全部名为TheShy的点还款的贷款,"g.V().has('name', 'TheShy').outE('repay').inV().hasLabel('loan')"
获取teach的course的名称，其teacher在department has中，且该teacher的value大于等于942并且size小于95,"g.V().hasLabel('department').has('value', gte(942)).has('size', lt(95)).out('has').hasLabel('teacher').as('b').out('teach').hasLabel('course').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我找出被贷款loan_43存款的账号,和loan_43存款的账号","g.V().hasLabel('loan').has('name', 'loan_43').as('b').outE('deposit').inV().hasLabel('account').as('c').select('b').inE('deposit').outV().hasLabel('account').as('a').select('a', 'b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出person的3跳的环","g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(2).where(loops().is(2)).where(eq('a')).path().by('id').project('a.id', 'b_id').by(limit(local, 1)).by(tail(local, 1))"
请帮我找出那些既不在数学学院又不拥有价值大于44的部门的教师的名字，以及他们所教授的课程的名字。,"g.V().hasLabel('department').has('name', neq('数学学院')).or(__.has('value', lte(44))).outE('has').inV().hasLabel('teacher').outE('teach').inV().hasLabel('course').project('b_name', 'c_name').by(__.select('b').values('name')).by(__.values('name')).select('b').by(__.inE('has').outV().hasLabel('department'))"
"请帮我查找和teacher点有teach关系的course节点,且边满足条件srcId为空,目标course节点满足条件value不是379","g.V().hasLabel('teacher').as('a').outE('teach').has('srcId', eq(null)).as('e').inV().hasLabel('course').has('value', neq(379)).as('b').select('b')"
"以335,678作为请求点id, 以属性id作为相等条件,查找与名为建国大业和西虹市首富的点共同拥有的,类型为标签的节点","g.withSideEffect('p', [335, 678]).V().has('id', within('p')).where(or(has('name', '建国大业'), has('name', '西虹市首富'))).as('a').outE('film_has_tag').inV().hasLabel('tag').as('b').select('a').outE('film_has_tag').inV().hasLabel('tag').where(eq('b')).select('b').dedup()"
"给出名为周建聪的,语言不是go,语言等于c++的相关者,返回这些相关者的名字,和边的f0,目标点id,源点id","g.V().has('name', '周建聪').outE('relation').as('e').inV().has('lang', neq('go')).has('lang', 'c++').as('b').select('b', 'e').by('name').by(values('f0', 'targetId', 'srcId'))"
"查找person吴红knows的person,以及knows这些person的person","g.V().has('person', 'name', '吴红').outE('knows').inV().hasLabel('person').as('b').inE('knows').outV().hasLabel('person').as('c').select('b', 'c')"
 按照年龄、身高、薪资分组查询所有人的名字，并按照名字从小到大的顺序排序。,"g.V().hasLabel('person').group().by(values('age', 'height', 'salary').fold()).by(values('name').fold()).order(local).by(keys, asc).select(values).unfold().order(Scope.local).by(asc)"
根据department呼吸科的医生，获取诊断病人的薪水、年龄和身高。,"g.V().hasLabel('department').has('name', '呼吸科').out('has').hasLabel('doctor').out('diagnose').hasLabel('patient').project('salary', 'age', 'height').by(values('salary')).by(values('age')).by(values('height'))"
找到名为王红且标签为人的人的薪水,"g.V().hasLabel('person').has('name', '王红').values('salary')"
"请帮我查找和医生李若涵有属于关系的部门,再请帮我查找以诊断关系关联了李若涵的病人","g.V().hasLabel('doctor').has('name', '李若涵').as('a').outE('belong').inV().hasLabel('department').as('b').select('a').inE('diagnose').outV().hasLabel('patient').as('c').select('a', 'b', 'c')"
"给出被医生韩若涵创造的处方,和韩若涵创造的处方","g.V().hasLabel('doctor').has('name', '韩若涵').as('b').outE('creates').as('e').inV().hasLabel('prescription').as('a').select('b').outE('creates').as('e2').inV().hasLabel('prescription').as('c').select('a', 'b', 'c')"
"以916,564,762,275作为请求点id, 以属性id作为相等条件,请帮我查找被author孙伟write的book","g.inject([916, 564, 762, 275]).unfold().as('p').V().hasLabel('book').has('id', __.select('p')).where(__.in('author_write_book').hasLabel('author').has('name', '孙伟')).as('a').select('a').by().as('a').select('a').in('author_write_book').hasLabel('author').has('name', '孙伟').as('b').select('a', 'b')"
"请帮我找出满足条件value大于736且peopleNumber为空,或id的个数乘7小于等于95的节点","g.V().or(and(has('value', gt(736)), hasNot('peopleNumber')), project('count').by(count()).by(select('count').math('_ * 7').is(lte(95))))"
"请帮我找出person关联的person, 令person(b)的年龄的值等于关联person的person的性别的最小值, 再查找person认识的person","g.V().hasLabel('person').as('a').outE('relates').as('e').inV().hasLabel('person').as('b').select('b').map(__.inE('relates').as('e2').outV().hasLabel('person').as('c').values('gender').min()).as('b_age').select('b').outE('knows').as('e3').inV().hasLabel('person').as('d').select('b_age', 'd')"
找出与耳鼻喉科有关联的医生，然后再找出这些医生与耳鼻喉科有关联的情况。,"g.V().hasLabel('department').has('name', '耳鼻喉科').as('a').outE('has').inV().hasLabel('doctor').as('b').select('a').inE('has').outV().hasLabel('doctor').as('c').select('a', 'b', 'c')"
"以(133,152,true),(176,144,true)作为请求表数据,属性分别为srcId,targetId,f1, 以属性srcId作为相等条件,请帮我查找用户的三角的环,边类型是user_likes_post, 并返回这些点的id","g.withSideEffect('p', [['srcId':133, 'targetId':152, 'f1':true], ['srcId':176, 'targetId':144, 'f1':true]]).V().hasLabel('user').as('a').where(__.in('user_likes_post').as('c').out('user_likes_post').as('b').where(eq('a')).where(__.out('user_likes_post').as('b').where(__.in('user_likes_post').as('c').where(eq('a'))))).select('a', 'b', 'c').by('id').by('id').by('id')"
请帮我查找所有label为标签或用户的点,"g.V().hasLabel(within('tag', 'user'))"
"找出全部id为104的标签关联的电影,和以观看关系关联了这些电影的其他person","g.V().has('tag', 'id', 104).as('a').bothE().as('e').otherV().hasLabel('film').as('b').inE('watch').as('e2').outV().hasLabel('person').as('c').select('b', 'c')"
"输入请求点id的列表477,843,447, 以属性id作为相等条件,查找person的3跳以内的环","g.inject([477, 843, 447]).as('p').select('p').unfold().as('id').V().hasLabel('person').has('id', __.select('id')).as('a').bothE().otherV().as('b').bothE().otherV().where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"请帮我查找与名为李思思和马强的点共同教的,标签等于课程的节点","g.V().has('name', '李思思').outE('teach').inV().hasLabel('course').as('b').inE('teach').outV().has('name', '马强').select('b')"
"以('浙江大学',2,473)作为请求表数据,属性分别为name,level,value, 以属性level作为相等条件,帮我查询所有源点类型为city,边类型为city_belong_country,并且srcId不是193或weight的个数大于等于678,且targetId为空的边","g.withSideEffect('p', [['name':'浙江大学', 'level':2, 'value':473]]).V().hasLabel('city').has('level', __.select('p').unfold().select('level')).outE('city_belong_country').where(__.or(__.not(__.has('srcId', 193)), __.values('weight').count().is(P.gte(678)))).hasNot('targetId')"
 查询与阿里公司有关的账户，再查询阿里申请的其他贷款，返回它们。,"g.V().hasLabel('company').has('name', '阿里').as('a').bothE().as('e').otherV().hasLabel('account').as('b').select('a').outE('apply').as('e2').inV().hasLabel('loan').as('c').select('a', 'b', 'c')"
"返回person李若涵支付的person,以及认识这些person的person","g.V().has('person', 'name', '李若涵').outE('pay').inV().hasLabel('person').as('b').inE('knows').outV().hasLabel('person').as('c').select('b', 'c')"
返回所有名为字节的节点申请的贷款或公司,"g.V().has('name', '字节').outE('apply').inV().hasLabel(within('loan', 'company')).dedup()"
找出全部名为java程序设计的点关联的书,"g.V().has('name', 'java程序设计').outE('relates').inV().hasLabel('book')"
 查询体育学院（名称）为空部门的教师姓名和所授课程名称。,"g.V().hasLabel('department').has('name', '体育学院').has('size', eq(null)).outE('has').inV().hasLabel('teacher').as('b').outE('teach').inV().hasLabel('course').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
以下是简化后的句子：'列出不属于艺术学院的部门中，教师的名字和他们教授的课程名。' 这个句子更加简洁明了，并且避免了一些不必要的重复。,"g.V().hasLabel('department').has('name', neq('艺术学院')).out('has').hasLabel('teacher').as('b').out('teach').hasLabel('course').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"给出性别不是famale且年龄小于等于16的person属于的公司的名称,以及这些公司 创造的软件的名称","g.V().hasLabel('person').has('gender', neq('famale')).has('age', lte(16)).out('belong').hasLabel('company').as('b').out('creates').hasLabel('software').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
请查询与知乎论坛有关联，同时与徐伟有关联的论坛节点，并返回它们的名字和人数。,"g.V().has('forum', 'name', '知乎').outE().inV().hasLabel('forum').as('b').inE().outV().has('person', 'name', '徐伟').select('b').values('name', 'peopleNumber')"
请帮我找出与patient何伟和马思琪都存在accept关系的点,"g.V().has('patient', 'name', '何伟').outE('accept').inV().as('b').inE('accept').outV().has('patient', 'name', '马思琪').select('b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));计算所有读者的薪资除2589乘年龄乘74的最大值","g.V().hasLabel('reader').project('calc').by(values('salary', 'age').math('_1 / 2589 * _2 * 74')).select('calc').max()"
"返回course操作系统的全部label为friend的边,并根据f0升序排列,返回153个","g.V().hasLabel('course').has('name', '操作系统').outE('friend').order().by('f0', asc).limit(153).inV()"
"查找所有源点label为film,目标点label为tag,label为person的边",g.E().hasLabel('person').where(outV().hasLabel('film')).where(inV().hasLabel('tag'))
"返回与名为杜梅和徐伟的点共同喜欢的,类型为书的节点","g.V().has('name', '杜梅').out('likes').hasLabel('book').as('b').in('likes').has('name', '徐伟').select('b')"
"找出全部和城市点有包含关系的公司节点,且边满足条件f1不是true,目标公司节点规格为large","g.V().hasLabel('city').outE('contain').has('f1', neq(true)).inV().hasLabel('company').has('scale', 'large').dedup()"
找出王若涵和郑建聪共同的朋友列表。,"g.V().has('user', 'name', '王若涵').out('friend').as('b').in('friend').has('user', 'name', '郑建聪').select('b').values('name')"
"以870作为请求点id, 以属性id作为相等条件,查找名为何思思的person,以及与其有关的person,并返回何思思的age和这些person的age","g.withSideEffect('p_id', 870).V().hasLabel('person').has('id', __.constant(870)).has('name', '何思思').as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a', 'b').by('age')"
"找出前97个满足条件名字等于放射科或id不等于46,且地址不是C栋的部门","g.V().hasLabel('department').has('name', '放射科').or().has('id', neq(46)).has('address', neq('C栋')).limit(97)"
"查询82个和类型为卖家的点有回答关系的买家,以及和这些买家有查看关系的商品",g.V().hasLabel('seller').as('a').outE('ask').inV().hasLabel('buyer').as('b').outE('look').inV().hasLabel('goods').as('c').select('c').limit(82)
给出名为Alan的节点申请的公司或贷款或person,"g.V().has('name', 'Alan').outE('apply').inV().hasLabel(within('company', 'loan', 'person')).dedup()"
帮我查询全部与仓库Mybatis有关系的仓库的星数,"g.V().has('repository', 'name', 'Mybatis').bothE().otherV().hasLabel('repository').values('stars')"
查找所有和论坛CSDN之间有包含关系的用户,"g.V().hasLabel('forum').has('name', 'CSDN').outE('contain').inV().hasLabel('user')"
"返回与名为吴国强和杜建聪的点共同认识的,标签等于person的节点","g.V().has('name', '吴国强').out('knows').hasLabel('person').where(__.in('knows').has('name', '杜建聪')).dedup()"
"根据age,name,salary分组,计算height的最小值对182取余的数量","g.V().hasLabel('a').group().by(__.choose(__.values('age', 'name', 'salary').count().is(3), __.values('age', 'name', 'salary').fold(), __.constant('null'))).unfold().select(values).unfold().groupCount().by(__.values('height').min().is(neq(null)).choose(__.is(neq(null)), __.math('_ % 182'), __.constant(null)))"
 查找与书籍《孤城》有引用关系的其他书籍，再查找引用了《孤城》的其他书籍。,"g.V().has('book', 'name', '孤城').as('a').outE('refers').inV().as('b').select('a').inE('refers').outV().as('c').select('a', 'b', 'c')"
"请帮我查找名为Comment_209的点belong的所有film,并对这些film的category进行求和","g.V().has('name', 'Comment_209').outE('belong').inV().hasLabel('film').values('category').sum()"
请帮我找出person Tom关联的person节点关联的person,"g.V().hasLabel('person').has('name', 'Tom').out('relates').out('relates').dedup()"
"返回person relates的person,返回其源点的id除6减7647的值,以及目标点的height除194的值","g.V().hasLabel('person').as('a').outE('relates').as('e').inV().hasLabel('person').as('b').project('a_id_div_6_minus_7647', 'b_height_div_194').by(select('a').values('id').math('_ / 6').math('_ - 7647')).by(select('b').values('height').math('_ / 194'))"
"找出部门拥有的教师, 令教师的身高的值等于拥有教师的部门的大小的平均值, 再查找教师教的课程","g.V().hasLabel('department').as('a').outE('has').inV().hasLabel('teacher').as('b').select('b').project('height', 'd').by(__.inE('has').outV().hasLabel('department').values('size').mean()).by(__.outE('teach').inV().hasLabel('course').fold()).select('height', 'd')"
"使用列为age,name,height, 数据为(54,'郑轩',170),(49,'韩若涵',151)的子查询作为输入表, 以属性name作为相等条件,请帮我查找卖家郑宏拥有的商品,被其他买家查看的数量","g.withSideEffect('p', [['age':54,'name':'郑轩','height':170], ['age':49,'name':'韩若涵','height':151]]).V().hasLabel('seller').has('name', '郑宏').outE('seller_has_goods').inV().hasLabel('goods').inE('buyer_look_goods').outV().hasLabel('buyer').count()"
"请帮我查找从company华为出发,经过类型为employee的边,走3度到达的person点","g.V().has('company', 'name', '华为').repeat(out('employee')).times(3).hasLabel('person')"
"给出和订单Order_238有关的商品,再给出和Order_238包含的其他商品,返回它们","g.V().hasLabel('orders').has('name', 'Order_238').as('a').bothE().otherV().hasLabel('goods').as('b').select('a').outE('contain').inV().hasLabel('goods').as('c').select('a', 'b', 'c')"
"找出label为软件的所有点,并根据星数升序排列","g.V().hasLabel('software').order().by('stars', asc)"
"使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询tag的1跳以内的环","g.V().hasLabel('tag').as('a').both().as('b').where('a', eq('b')).by(T.id).select('a', 'b').by('id').by('id')"
"给出满足条件gender是male,id大于44的节点","g.V().has('gender', 'male').has('id', gt(44))"
"请帮我查找119个名为Post_334的点has的标签为tag的节点,且其name不等于古代,value为32","g.V().has('name', 'Post_334').outE('has').inV().hasLabel('tag').has('value', 32).has('name', neq('古代')).limit(119)"
"返回所有源点标签为person,边标签为喜欢,并且f1不是true或f0在896到978之间或目标点id不是47的边","g.V().hasLabel('person').outE('likes').or(has('f1', neq(true)), has('f0', between(896, 978)), has('targetId', neq(47)))"
 查询包含'中国军事论坛'的帖子，并返回与'中国军事论坛'标签相关的标签值。,"g.V().has('name', '中国军事论坛').out('contain').hasLabel('post').out('has').values('value')"
查询全部名为法学院的节点拥有的部门或大学或学生,"g.V().has('name', '法学院').out('has').hasLabel(within('department', 'university', 'student'))"
"输入表的列为gender,id,name, 数据为('male',9,'韩思琪'),('famale',34,'赵宏'), 源点的name等于输入表name,查找全部名为韩红的点own的account","g.inject(['male', 9, '韩思琪'], ['famale', 34, '赵宏']).as('p').select('p').unfold().as('row').select('row').where(select('row').tail(1).is('韩红')).select('row').tail(1).as('name').V().has('name', select('name')).as('a').outE('person_own_account').inV().hasLabel('account').as('b').select('b')"
 请帮我查询与马梅有关联的电影，以及与马梅有关联的电影。,"g.V().has('person', 'name', '马梅').as('a').outE('watch').inV().hasLabel('film').as('b').select('a').inE('watch').outV().hasLabel('film').as('c').select('a', 'b', 'c')"
"返回和类型为作家的点有认识关系的作家,并且和这些作家有认识关系的作家,并且和这些作家有撰写关系的书",g.V().hasLabel('author').as('a').out('knows').hasLabel('author').as('b').out('knows').hasLabel('author').as('c').out('write').hasLabel('book').as('d').select('d')
请帮我找出所有和订单Order_225之间有包含关系的商品,"g.V().hasLabel('orders').has('name', 'Order_225').outE('contain').inV().hasLabel('goods')"
"查找22个价值在410到503之间的帖子,根据名字升序排列","g.V().hasLabel('post').has('value', between(410, 503)).order().by('name', asc).limit(22)"
"返回名为张轩的person,以及与其有关的person,并返回张轩的身高和这些person的身高","g.V().has('person', 'name', '张轩').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('height')"
"找出属于用户马红喜欢的仓库,的事项","g.V().hasLabel('user').has('name', '马红').outE('likes').inV().hasLabel('repository').as('b').inE('belong').outV().hasLabel('issue').as('c').select('b', 'c')"
帮我查询被城市北京属于的国家,"g.V().has('city', 'name', '北京').as('b').outE('belong').as('e').inV().hasLabel('country').as('a').select('a', 'b')"
"给出名为周伟的点has的所有goods,并对这些goods的id进行求和","g.V().has('name', '周伟').outE('has').inV().hasLabel('goods').values('id').sum()"
"找出person赵思琪支付的person,被其他person喜欢的数量","g.V().has('person', 'name', '赵思琪').outE('pay').inV().hasLabel('person').inE('likes').outV().hasLabel('person').count()"
"给出全部和名为Order_427的订单有朋友关系,或有朋友的朋友关系的商品","g.V().has('orders', 'name', 'Order_427').bothE('friend').bothV().hasLabel('goods').dedup()"
"给出帖子的三角的环,边标签为拥有, 并返回这些点的id","g.V().hasLabel('post').as('a').outE('has').inV().as('b').outE('has').inV().as('c').where(__.out('has').as('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
请帮我找出与person吴建国有关联的所有person节点,"g.V().hasLabel('person').has('name', '吴建国').outE('relates').inV().hasLabel('person').outE('relates').inV().hasLabel('person').dedup()"
"查找类型为卖家,名为张宏的点,返回这些点的名字","g.V().hasLabel('seller').has('name', '张宏').values('name')"
 找寻与名为Light和TheShy的节点共同拥有类型为'贷款'的共同借款人。,"g.V().has('name', 'Light').outE('repay').inV().hasLabel('loan').as('b').inE('repay').outV().has('name', 'TheShy').select('b')"
"查询38个user吴思思和吴国强,共同的partner","g.V().has('user', 'name', '吴思思').outE('partner').inV().as('b').inE('partner').outV().has('user', 'name', '吴国强').select('b').limit(38)"
"查找认识person赵建国的person,和这些person认识的person","g.V().has('person', 'name', '赵建国').in('knows').as('b').out('knows').as('c').select('b', 'c')"
请帮我查找gender不等于male的节点,"g.V().has('gender', neq('male'))"
查询与person周梅有likes关系的1度的环,"g.V().has('person', 'name', '周梅').as('a').outE('likes').inV().as('b').where(__.out().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').values('id')).by(select('b').values('id'))"
"查询书少年闰土关联的书,被其他读者喜欢的数量","g.V().hasLabel('book').has('name', '少年闰土').outE('relates').inV().hasLabel('book').inE('likes').outV().hasLabel('reader').count()"
请找出与徐建聪是朋友关系的人，以及与赵红是家人关系的人，并将他们全部返回。,"g.V().has('person', 'name', '徐建聪').as('a').out('friend').as('b').select('a', 'b').by().fold().as('ab').V().has('person', 'name', '赵红').as('c').out('family').as('d').select('c', 'd').by().fold().as('cd').select('ab', 'cd').unfold().unfold()"
"以67, 5作为输入调用triangleCount函数,返回运算结果","g.call('triangleCount').with('nodeIds', [67, 5]).select('number')"
请帮我查找被公司美团申请的贷款,"g.V().hasLabel('company').has('name', '美团').outE('apply').inV().hasLabel('loan').as('b').select('b').by().as('a').select('a', 'b')"
 查询部门内的同事，或同事的同事。,"g.V().hasLabel('department').outE('partner').inV().hasLabel('department').range(1,2).dedup()"
"给出与teacher赵若涵有关,且与department物理学院有关系的course节点","g.V().has('teacher', 'name', '赵若涵').outE('teach').inV().hasLabel('course').as('b').inE('belong').outV().has('department', 'name', '物理学院').select('b')"
 查询学生节点，其中学生张国强与课程程序设计存在关系，返回这些节点的名称和身高。,"g.V().hasLabel('student').has('name', '张国强').as('a').outE().as('e').inV().hasLabel('student').as('b').inE().as('e2').outV().hasLabel('course').has('name', '程序设计').as('c').select('b').project('name', 'height').by(values('name')).by(values('height'))"
"根据薪资分组,计算id的个数除32对4193取余的值","g.V().hasLabel('a').group().by('salary').by(count().by('id')).unfold().project('salary', 'result').by(select(keys)).by(select(values).math('_ / 32 % 4193'))"
"给出所有名为吴梅的点的,id为空,createTime不是2000年05月11日的relation,返回这些relation的name,和边的f1,weight,timeStamp","g.V().has('name', '吴梅').outE('relation').as('e').inV().as('b').where(__.not(__.has('id'))).has('createTime', neq('2000-05-11')).select('b', 'e').by('name').by(__.project('f1', 'weight', 'timeStamp').by('f1').by('weight').by('timeStamp'))"
"找出id为21的城市有关的城市的相关者, 再找出和城市有关系的朋友","g.V().has('city', 'id', 21).as('a').bothE().otherV().hasLabel('city').as('b').bothE().hasLabel('relation').otherV().as('c').select('b').bothE().hasLabel('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
请帮我查找person的3跳以内的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(3).where(loops().is(gt(0))).where(path().unfold().tail(1).is(eq('a'))).dedup().project('a.id', 'b_id').by(select('a').id()).by(tail(local, 1).id())"
"以624作为请求点id, 以属性id作为相等条件,查找所有与buyer孙月有关系的goods的price","g.withSideEffect('p', [624]).V().hasLabel('buyer').has('id', __.select('p')).has('name', '孙月').bothE().otherV().hasLabel('goods').values('price')"
"帮我查询person黄国强属于的公司,以及属于这些公司的person","g.V().hasLabel('person').has('name', '黄国强').outE('belong').inV().hasLabel('company').as('b').inE('belong').outV().hasLabel('person').as('c').select('b', 'c')"
"查找和person徐宏有关的person,称为X,再查找和这个X有关联的其他person,以及和X有关联的person","g.V().has('person', 'name', '徐宏').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"请帮我找出类型为账号,名为BIN的点,返回这些点的创建时间","g.V().hasLabel('account').has('name', 'BIN').values('createTime')"
找出与8个person类型的点有own关系的account，以及这些account对应的repay关系的loan。,g.V().hasLabel('person').as('a').outE('own').as('e').inV().hasLabel('account').as('b').outE('repay').as('e2').inV().hasLabel('loan').as('c').select('c').limit(8)
"以613,524,913,663作为请求点id, 源点的id等于输入表id,查询software的1度的环","g.inject([613, 524, 913, 663]).unfold().as('p').V().has('software', 'id', __.select('p')).as('a').both().as('b').where(__.as('b').both().as('a')).select('a', 'b').by('id').by('id')"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));找出所有和person黄宏之间有person_apply_loan关系的贷款","g.V().hasLabel('person').has('name', '黄宏').outE('person_apply_loan').inV().hasLabel('loan').dedup()"
 返回中国诗词论坛中包含标签为'动作'的帖子，并返回这些帖子的名称、创建时间、以及中国诗词论坛的名称和标签'动作'的价值。,"g.V().hasLabel('forum').has('name', '中国诗词论坛').as('a').outE('contain').inV().hasLabel('post').as('b').inE('has').outV().hasLabel('tag').has('name', '动作').as('c').select('a', 'b', 'c').by('name').by('name').by('value').project('a_name', 'b_name', 'b_createTime', 'c_value').by(select('a')).by(select('b')).by(select('b').values('createTime')).by(select('c'))"
"返回全部名为韩强的,salary不等于5658或id在91到91之间的lover,返回这些lover的height,和边的weight,srcId","g.V().has('name', '韩强').outE('lover').as('e').inV().as('b').where(or(__.not(out('b').has('salary', 5658)), __.has('id', between(91, 91)))).select('b', 'e').by('height').by(project('weight', 'srcId').by('weight').by('srcId'))"
"查找名为华为的person或company或software,以及与其有关的software,并返回华为的id和这些software的openSource","g.V().has(label, within('person', 'company', 'software')).has('name', '华为').bothE().otherV().has(label, 'software').project('a.id', 'b.openSource').by(select(all, 'v').unfold().has(label, within('person', 'company', 'software')).has('name', '华为').id()).by(select(all, 'v').unfold().has(label, 'software').values('openSource'))"
"查找id为116的用户发布的帖子, 并将帖子有关的论坛的id的最小值赋值给帖子的创建时间, 接着查询帖子的创建时间小于116的帖子拥有的标签","g.V().has('user', 'id', 116).outE('publish').inV().hasLabel('post').as('b').project('b', 'createTime').by(identity()).by(__.inE().outV().hasLabel('forum').values('id').min()).select('b', 'createTime').where(select('createTime').is(lt(116))).outE('has').inV().hasLabel('tag').as('d').select('b', 'createTime', 'd').by(__.select('b')).by(__.select('createTime')).by(__.select('d')).select('createTime', 'd')"
"输入请求点id的列表128,386, 源点的id等于输入表id,请帮我找出department法学院的全部标签为relation的边,并根据srcId升序排列,返回110个","g.withSideEffect('p', [128, 386]).V().hasLabel('department').where(__.values('id').is(within('p'))).has('name', '法学院').outE('relation').order().by('srcId').limit(110).inV()"
查询与合并请求PR-425有关系的合并请求的创建时间,"g.V().hasLabel('pullRequest').has('name', 'PR-425').bothE().otherV().hasLabel('pullRequest').values('createTime')"
计算所有帖子的id对id取余的值,g.V().hasLabel('post').project('result').by(values('id').math('_ / _'))
"输入请求点id的列表922, 源点的id等于输入表id,请帮我找出以属于关系关联了部门内科的医生","g.inject(922).as('p').V().hasLabel('department').has('id', select('p')).has('name', '内科').in('doctor_belong_department').hasLabel('doctor')"
"找出全部id为181的person关联的person,和以关联关系关联了这些person的其他person","g.V().has('person', 'id', 181).bothE().otherV().hasLabel('person').as('b').inE('relates').otherV().hasLabel('person').as('c').select('b', 'c')"
"请帮我找出patient的friend,或其friend的friend","g.V().hasLabel('patient').out('friend').range(1, 2).dedup()"
请帮我查找id为90的seller的所有buyer关系，再查找这些buyer相关的partner,"g.V().has('seller', 'id', '90').as('a').bothE().otherV().hasLabel('buyer').as('b').outE('relation').inV().as('c').select('b').outE('partner').inV().as('d').select('a', 'b', 'c', 'd')"
找出全部名为杜国强的点拥有的商品,"g.V().has('name', '杜国强').out('has').hasLabel('goods')"
 张思思和何雪都有父母。,"g.V().has('person', 'name', '张思思').outE('parent').inV().as('b').inE('parent').outV().has('person', 'name', '何雪').select('b')"
获取按身高、年龄和姓名分组的所有人的ID，然后按照ID进行降序排序。,"g.V().hasLabel('person').group().by(values('height', 'age', 'name').fold()).by(values('id').fold()).order(Scope.local).by(keys, Order.desc).select(values).unfold()"
"请帮我找出与卖家马雪有关,且与订单Order_149有关系的买家节点","g.V().hasLabel('seller').has('name', '马雪').as('a').bothE('ask').otherV().hasLabel('buyer').as('b').bothE('cancel').otherV().hasLabel('orders').has('name', 'Order_149').as('c').select('b')"
请帮我查找类型是user或repository或issue的点,"g.V().hasLabel(within('user', 'repository', 'issue'))"
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找person的三角的环,边类型是person_knows_person, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('person_knows_person').inV().hasLabel('person').as('b').outE('person_knows_person').inV().hasLabel('person').as('c').where('a', eq('c')).by(T.id).select('a', 'b', 'c').by().by(values('id')).by(values('id'))"
请帮我找出与电影星际穿越有拥有关系的2度的环,"g.V().has('film', 'name', '星际穿越').as('a').bothE('has').otherV().bothE('has').otherV().where(eq('a')).select('a').by('id').project('a.id', 'b_id').by(identity()).by(__.bothE('has').otherV().id())"
"帮我查询读者的三角的环,边类型是喜欢, 并返回这些点的id","g.V().hasLabel('reader').as('a').outE('likes').inV().as('b').bothE('likes').otherV().as('c').where(__.out('likes').as('a')).select('a', 'b', 'c').by().by(id).by(id).project('a', 'b_id', 'c_id').by().by(select('b').id()).by(select('c').id())"
请帮我找出所有源点和目标点都标记为 person，且标签为 parent 的边。,g.V().hasLabel('person').outE('parent').where(inV().hasLabel('person'))
"给出30个和类型为loan的点有deposit关系的account,以及和这些account有repay关系的loan",g.V().hasLabel('loan').as('a').outE('deposit').inV().hasLabel('account').as('b').inE('repay').outV().hasLabel('loan').as('c').select('c').limit(30)
找出放射科属于哪个部门的医生。,"g.V().has('department', 'name', '放射科').out('has').hasLabel('doctor').out('belong').hasLabel('department')"
帮我查询196个与TheShy和Faker都存在关系的person或账号节点,"g.V().has('name', 'TheShy').outE().inV().or(hasLabel('person'), hasLabel('account')).as('b').inE().outV().has('name', 'Faker').select('b').limit(196)"
"找出从person周国强出发,经过类型为购买的边,走3到5跳到达的软件点","g.V().hasLabel('person').has('name', '周国强').repeat(outE('buy').inV()).times(3).emit().repeat(outE('buy').inV()).times(2).hasLabel('software').dedup()"
 找到从推特论坛出发，标签等于包含，走1或2度到达的帖子。,"g.V().has('forum', 'name', '推特').outE('contain').inV().hasLabel('post').path().by(elementMap()).limit(1).union(__.identity(), __.outE('contain').inV().hasLabel('post')).tail(1).unfold().select('b')"
"查找与doctor李宏存在creates关系,且与medicine生理盐水存在contain关系的prescription节点，返回这些prescription的id,及doctor李宏的salary,及medicine生理盐水的name","g.V().has('doctor', 'name', '李宏').as('a').outE('creates').inV().hasLabel('prescription').as('b').inE('contain').outV().has('medicine', 'name', '生理盐水').as('c').select('a', 'b', 'c').by('salary').by('id').by('name')"
"给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));找出名为Prescription_219的点包含的全部药品,并对这些点的id进行求和","g.V().has('prescription', 'name', 'Prescription_219').out('prescription_contain_medicine').hasLabel('medicine').values('id').sum()"
"帮我查询类型是事项的点,返回181个",g.V().hasLabel('issue').limit(181)
请帮我找出被person马雪likes的comment,"g.V().hasLabel('person').has('name', '马雪').outE('likes').inV().hasLabel('comment').as('b').inE('likes').outV().as('a').select('a', 'b')"
查询51个与杜思思和周思琪都存在关系的person节点,"g.V().has('name', '杜思思').as('a').outE().as('e').inV().hasLabel('person').as('b').inE().as('e2').outV().has('name', '周思琪').as('c').select('b').limit(51)"
"请帮我找出和person何建国有关的软件,称为X,再请帮我找出和这个X有关联的其他person,以及和X有关联的公司","g.V().has('person', 'name', '何建国').as('a').bothE().otherV().hasLabel('software').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('company').as('d').select('a', 'b', 'c', 'd')"
返回与卖家陈伟和吴雪都存在拥有关系的点,"g.V().has('seller', 'name', '陈伟').outE('has').inV().as('b').inE('has').outV().has('seller', 'name', '吴雪').select('b')"
 找出Order_231订单中包含的商品，以及买家李轩创建的订单，返回它们。,"g.V().hasLabel('orders').has('name', 'Order_231').as('a').outE('contain').inV().hasLabel('goods').as('b').select('a').V().hasLabel('buyer').has('name', '李轩').as('c').outE('creates').inV().hasLabel('orders').as('d').select('a', 'b', 'c', 'd')"
"帮我查询所有源点满足条件id为空且height的平均值乘187不等于186,身高不为空,目标点满足条件性别等于famale或年龄不为空,且身高小于等于177,且label为认识的边","g.V().has('id', null).has('height', neq(null)).group().by(constant('avg')).by(values('height').mean()).select('avg').where(mean().is(neq(186))).select('avg').unfold().as('a').outE('knows').as('e').inV().as('b').where(or(has('gender', 'famale'), has('age', neq(null)))).has('height', lte(177)).select('e')"
找出LX001repay账户中，被其他公司申请的贷款数量。,"g.V().has('account', 'name', 'LX001').outE('repay').inV().hasLabel('loan').inE('apply').outV().hasLabel('company').count()"
 返回天津城市中包含公司的信息，包括公司所属的城市的ID、面积和人口数量。,"g.V().has('city', 'name', '天津').out('contain').as('b').out('belong').as('c').select('c').by(id()).as('c_id').select('c').by('area').as('c_area').select('c').by('peopleNumber').as('c_peopleNumber').select('c_id', 'c_area', 'c_peopleNumber')"
"返回和person王国强有观看关系的电影,再返回以创造关系关联了王国强的评论","g.V().hasLabel('person').has('name', '王国强').as('a').outE('watch').inV().hasLabel('film').as('b').select('a').inE('creates').outV().hasLabel('comment').as('c').select('a', 'b', 'c')"
"帮我查询与person吴雪有关,且与person孙建国有关系的person节点","g.V().has('person', 'name', '吴雪').bothE('colleague').bothV().hasLabel('person').where(bothE('friend').bothV().has('person', 'name', '孙建国')).dedup()"
 列出与订单号为Order_370相关的商品，或者列出与Order_370有关系的商品的列表。,"g.V().has('orders', 'name', 'Order_370').out('relation').range(1, 2).hasLabel('goods')"
"帮我查询write author张红write的book,的author","g.V().has('author', 'name', '张红').as('a').outE('write').as('e').inV().hasLabel('book').as('b').inE('write').as('e2').outV().hasLabel('author').as('c').select('b', 'c')"
"返回label为account,名为Geaflow123的点,返回这些点的isBlock","g.V().hasLabel('account').has('name', 'Geaflow123').values('isBlock')"
 找出百度贴吧和中国诗词论坛这两个论坛的共同关系节点。,"g.V().has('forum', 'name', '百度贴吧').outE('relation').inV().as('b').inE('relation').outV().has('forum', 'name', '中国诗词论坛').select('b').values('name')"
 查询的卖家以及与这些卖家有咨询关系的其他买家。,"g.V().has('seller', 'id', '73').bothE().otherV().hasLabel('seller').as('b').inE('consult').otherV().hasLabel('buyer').as('c').select('b', 'c')"
"帮我查询包含订单Order_188包含的商品,的订单","g.V().hasLabel('orders').has('name', 'Order_188').outE('contain').inV().hasLabel('goods').as('b').inE('contain').outV().hasLabel('orders').as('c').select('b', 'c')"
 找出与类型为person的点有支付和认识关系的个人。,g.V().hasLabel('person').as('a').outE('pay').as('e').inV().hasLabel('person').as('b').outE('knows').as('e2').inV().hasLabel('person').as('c').select('c').limit(152)
查询全部名为韩宏的点取消的订单,"g.V().has('name', '韩宏').outE('cancel').inV().hasLabel('orders')"
请帮我找出四川大学的所有合作伙伴公司，并且也查一下四川大学所在的城市，一并返回。,"g.V().has('name', '四川大学').as('a').outE('cooperate').inV().hasLabel('company').as('b').select('a').inE('contain').outV().hasLabel('city').as('c').select('a', 'b', 'c')"
返回与吴建聪相关的作家，然后返回吴建聪认识的其他作家。,"g.V().has('author', 'name', '吴建聪').as('a').bothE().otherV().hasLabel('author').as('b').select('a').bothE('knows').otherV().hasLabel('author').as('c').select('a', 'b', 'c')"
"查找使用公司Bilibili创造的软件,的软件","g.V().hasLabel('company').has('name', 'Bilibili').outE('creates').inV().hasLabel('software').as('b').inE('uses').outV().hasLabel('software').as('c').select('b', 'c')"
返回与处方Prescription_355有关系的医生的身高,"g.V().has('prescription', 'name', 'Prescription_355').bothE().otherV().hasLabel('doctor').values('height')"
 查找所有艺术学院的学生，以及它们所属的大学，然后一起返回。,"g.V().has('name', '艺术学院').as('a').outE('has').inV().hasLabel('student').as('b').select('a').inE('has').outV().hasLabel('university').as('c').select('a', 'b', 'c')"
 请帮我找一下这部电影的配音演员，或者配音演员的配音演员。,g.V().hasLabel('film').as('a').outE('partner').inV().hasLabel('film').as('b').select('b')
查询所有名为李宏的节点喜欢的person,"g.V().has('name', '李宏').outE('likes').inV().hasLabel('person')"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询89个等级不为空或名字为浙江大学的大学,根据名字从小到大排列","g.V().hasLabel('university').or(has('level', neq(null)), has('name', '浙江大学')).order().by('name', asc).limit(89)"
"请帮我找出作家的朋友,或其朋友的朋友",g.V().hasLabel('author').outE('friend').inV().hasLabel('author').outE('friend').inV().hasLabel('author').dedup()
找到属于蚂蚁集团的城市节点中包含的公司。,"g.V().has('company', 'name', '蚂蚁集团').out('belong').in('contain').hasLabel('company')"
"请帮我找出所有名为吴思思的点的,id小于22,薪资大于等于4851的伙伴,返回这些伙伴的名字,和边的f1","g.V().has('name', '吴思思').outE('partner').as('e').inV().has('id', lt(22)).has('salary', gte(4851)).project('b_name', 'e_f1').by('name').by(select('e').values('f1'))"
"查找国家法国的所有类型是朋友的边,并根据目标点id升序排列,返回155个","g.V().has('country', 'name', '法国').outE('friend').order().by('targetId', asc).limit(155).inV()"
"查找id为151的编辑有关的读者的相关者, 再查找和读者有关系的相关者","g.V().has('publisher', 'id', 151).as('a').bothE().otherV().hasLabel('reader').as('b').bothE('relation').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"请帮我找出和卖家Sam有关的卖家,再请帮我找出和Sam拥有的其他商品,返回它们","g.V().has('seller', 'name', 'Sam').as('a').bothE().otherV().hasLabel('seller').as('b').select('a').outE('has').inV().hasLabel('goods').as('c').select('a', 'b', 'c')"
"以513,692,47作为请求点id, 源点的id等于输入表id,帮我查询和帖子Post_453有关的论坛,再帮我查询和Post_453post_has_tag的其他标签,返回它们","g.withSideEffect('p', [513, 692, 47]).V().hasLabel('post').where(__.id().is(within('p'))).has('name', 'Post_453').as('a').bothE().otherV().hasLabel('forum').as('b').select('a').outE('post_has_tag').inV().hasLabel('tag').as('c').select('a', 'b', 'c')"
"返回类型是prescription的点,返回175个",g.V().hasLabel('prescription').limit(175)
"请帮我查找标签为账号,名为BIN的点,返回这些点的上次登录时间,是否冻结,id","g.V().hasLabel('account').has('name', 'BIN').project('lastLoginTime', 'isBlock', 'id').by('lastLoginTime').by('isBlock').by('id')"
查询与论坛推特有包含关系的3跳的环,"g.V().has('forum', 'name', '推特').as('a').repeat(bothE().otherV().simplePath()).times(3).where(cyclicPath()).where(eq('a')).project('a.id', 'b_id').by(select('a').id()).by(id())"
"给出89个名为数据结构的点属于的类型是部门的节点,且节点价值小于等于670","g.V().has('name', '数据结构').outE('belong').inV().hasLabel('department').has('value', lte(670)).limit(89)"
帮我查询全部名为吴轩的节点回答的商品或订单或卖家,"g.V().has('name', '吴轩').outE('ask').inV().hasLabel(within('goods', 'orders', 'seller')).dedup()"
帮我查询所有与seller吴思琪有关系的orders的price,"g.V().hasLabel('seller').has('name', '吴思琪').bothE().otherV().hasLabel('orders').values('price')"
"查询id为126的doctor有关的doctor的relation, 再查询和doctor有关系的relation","g.V().has('doctor', 'id', 126).as('a').bothE().otherV().hasLabel('doctor').as('b').bothE().hasLabel('relation').otherV().as('c').select('b').bothE().hasLabel('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
帮我查询前54个满足条件性别不是famale的作家,"g.V().hasLabel('author').has('gender', neq('famale')).limit(54)"
"查找公司雇佣的person,返回其源点的人数对人数取余的值,以及目标点的id对50取余的和","g.V().hasLabel('company').as('a').outE('employee').as('e').inV().hasLabel('person').as('b').project('expr1', 'expr2').by(select('a').values('peopleNumber').math('_ / _').by(constant(1)).by(select('a').values('peopleNumber'))).by(select('b').values('id').math('_ % 50').fold().sum())"
"使用列为gender,name,salary, 数据为('famale','韩思琪',7240),('famale','赵红',3657),('famale','张若涵',7305),('male','吴思思',9548)的子查询作为输入表, 以属性gender作为相等条件,请帮我找出名为杜建国和徐红的,类型为person的点公共的恋人节点的名单","g.inject([['famale', '韩思琪', 7240], ['famale', '赵红', 3657], ['famale', '张若涵', 7305], ['male', '吴思思', 9548]]).unfold().as('p').V().hasLabel('person').has('name', '杜建国').as('a').where(eq('a')).by('gender').by(select('p').limit(1)).outE('person_lover_person').inV().as('b').inE('person_lover_person').outV().hasLabel('person').has('name', '徐红').as('c').where(eq('c')).by('gender').by(select('p').limit(1)).select('b').values('name')"
"查找university的三角的环,边label为belong, 并返回这些点的id","g.V().hasLabel('university').as('a').out('belong').as('b').out('belong').as('c').where(__.in('belong').as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"输入请求点id的列表555, 源点的id等于输入表id,请帮我查找全部源点标签为处方,边标签为prescription_contain_medicine,且权重为空或f0为745的边","g.inject(555).as('p').V().hasLabel('prescription').has('id', __.select('p')).as('a').outE('prescription_contain_medicine').where(or(__.values('weight').is(eq(null)), __.values('f0').is(eq(745)))).as('e').select('e')"
 查询Bilibili雇佣的所有人员，以及Bilibili所属的人员，并将它们一起返回。,"g.V().has('name', 'Bilibili').as('a').outE('employee').inV().hasLabel('person').as('b').select('a').inE('belong').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"以364,60作为请求点id, 源点的id等于输入表id,查找被teacher马梅teach的course","g.withSideEffect('p', [364, 60]).V().hasLabel('course').as('a').where(__.values('id').is(within('p'))).select('a').in('teacher_teach_course').hasLabel('teacher').has('name', '马梅').as('b').select('a', 'b')"
"请帮我查找用户张思琪喜欢的帖子,以及包含这些帖子的论坛, 令用户的id等于用户的名字,令帖子的价值等于论坛的价值对721取余的个数,令论坛的名字等于用户的名字, 返回用户的名字,帖子的语言,论坛的价值","g.V().has('user', 'name', '张思琪').as('a').outE('likes').inV().hasLabel('post').as('b').inE('contain').outV().hasLabel('forum').as('c').project('a_name', 'b_lang', 'c_value').by(select('a').values('name')).by(select('b').values('lang')).by(select('c').values('value'))"
"以507,223作为请求点id, 以属性id作为相等条件,请帮我查找名为Prescription_209的处方,以及与其有关的病人,并返回Prescription_209的id和这些病人的薪资","g.withSideEffect('p', [507, 223]).V().hasLabel('prescription').as('a').where(and(__.values('id').where(within('p')), __.has('name', 'Prescription_209'))).bothE().as('e').otherV().hasLabel('patient').as('b').select('a', 'b').by('id').by('salary')"
"查找大学属于的城市, 令城市的名字的值等于属于城市的大学的等级的最小值, 再查找城市属于的国家","g.V().hasLabel('university').as('a').outE('belong').as('e').inV().hasLabel('city').as('b').select('b').map(union(identity(), __.in('belong').hasLabel('university').values('level').min()).fold()).as('b_with_min').select('b_with_min').unfold().project('b_name', 'd').by(tail(local, 1)).by(select('b_with_min').unfold().limit(local, 1).out('belong').hasLabel('country'))"
"以(67,2202,155),(65,4714,151)作为请求表数据,属性分别为id,salary,height, 源点的id等于输入表id,帮我查询部门传染部拥有的医生,被其他部门拥有的数量","g.withSideEffect('p', [[67, 2202, 155], [65, 4714, 151]]).V().hasLabel('department').as('a').where(and(__.select('a').values('id').is(within(select('p').unfold().limit(1))), __.select('a').has('name', '传染部'))).outE('department_has_doctor').inV().hasLabel('doctor').as('b').inE('department_has_doctor').outV().hasLabel('department').as('c').select('c').dedup().count()"
"根据age,height分组,计算salary的最大值减5851的值","g.V().hasLabel('a').group().by(values('age', 'height')).by(values('salary').max()).unfold().select(values).math('_ - 5851')"
 查询与账户XXD和Zeus存在返利关系的点。,"g.V().has('account', 'name', 'XXD').outE('repay').inV().as('b').inE('repay').outV().has('account', 'name', 'Zeus').select('b')"
"用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回名为郑思思和王思琪的,标签为person的点公共的相关者节点的名单","g.V().hasLabel('person').has('name', '郑思思').outE('relation').inV().as('b').inE('relation').outV().hasLabel('person').has('name', '王思琪').select('b').values('name')"
请帮我找出与标签为'department'的点有'has'关系的178位医生，以及这些医生与之有'diagnose'关系的患者。,g.V().hasLabel('department').out('has').hasLabel('doctor').out('diagnose').hasLabel('patient').limit(178)
"请帮我找出46个电影绿巨人和少年足球,共同的相关者","g.V().hasLabel('film').has('name', '绿巨人').as('a').outE('relation').as('e').inV().as('b').inE('relation').as('e2').outV().hasLabel('film').has('name', '少年足球').as('c').select('b').limit(46)"
找出孙红和陈国强的共同朋友，共有147人。,"g.V().has('person', 'name', '孙红').outE('friend').inV().as('b').inE('friend').outV().has('person', 'name', '陈国强').select('b').dedup().limit(147)"
找出由黄伟认识的作家所写的书,"g.V().has('author', 'name', '黄伟').out('knows').out('write').dedup()"
"请帮我找出所有孙国强的点撰写的书,然后请帮我找出孙国强被认识的作家,一起返回","g.V().has('name', '孙国强').as('a').outE('write').inV().hasLabel('book').as('b').select('a').inE('knows').outV().hasLabel('author').as('c').select('a', 'b', 'c')"
 查询李月和郑思琪共同的友人。,"g.V().has('person', 'name', '李月').outE('friend').inV().as('b').inE('friend').outV().has('person', 'name', '郑思琪').select('b').limit(24)"
"请帮我查找名为XXRepo的点拥有的所有合并请求,并对这些合并请求的名字进行求和","g.V().has('name', 'XXRepo').out('has').hasLabel('pullRequest').values('name').sum()"
 返回我和李雪、郑红共同的朋友节点，标签为用户的点。,"g.V().has('user', 'name', '李雪').out('friend').as('b').in('friend').has('user', 'name', '郑红').select('b').values('name')"
查询名为Comment_338的评论,"g.V().hasLabel('comment').has('name', 'Comment_338')"
"输入请求点id的列表325, 以属性id作为相等条件,查找id为113的点的height,age,name","g.V().has('id', '113').project('height', 'age', 'name').by(values('height')).by(values('age')).by(values('name'))"
"查询类型为城市,名为东京的点,返回这些点的id,名字","g.V().hasLabel('city').has('name', '东京').project('a.id', 'a.name').by(id()).by(values('name'))"
"给出名为吴梅的,是否开源不等于true的伙伴,返回这些伙伴的是否开源,和边的f0,源点id,目标点id","g.V().has('name', '吴梅').outE('partner').as('e').inV().has('openSource', neq(true)).project('openSource', 'f0', 'srcId', 'targetId').by(values('openSource')).by(select('e').values('f0')).by(select('e').outV().id()).by(select('e').inV().id())"
"请帮我找出与person韩红存在朋友关系,且与person徐若涵存在家人关系的person节点，返回这些person的身高,及person韩红的身高,及person徐若涵的名字","g.V().has('person', 'name', '韩红').as('a').out('friend').hasLabel('person').as('b').in('family').has('person', 'name', '徐若涵').as('c').select('a', 'b', 'c').by('height').by('height').by('name')"
 土木学院的老师们被返回了。,"g.V().hasLabel('department').has('name', '土木学院').inE('has').outV().hasLabel('teacher').as('b').select('b').by().as('a').select('a', 'b')"
"请帮我查找和doctor吴建国有belong关系的department,再请帮我查找以diagnose关系关联了吴建国的patient","g.V().hasLabel('doctor').has('name', '吴建国').as('a').outE('belong').inV().hasLabel('department').as('b').select('a').inE('diagnose').outV().hasLabel('patient').as('c').select('a', 'b', 'c')"
"帮我查询和合并请求PR-304有关的事项,再帮我查询和PR-304属于的其他仓库,返回它们","g.V().hasLabel('pullRequest').has('name', 'PR-304').as('a').bothE().otherV().hasLabel('issue').as('b').select('a').outE('belong').otherV().hasLabel('repository').as('c').select('a', 'b', 'c')"
返回以belong关系关联了company阿里的person,"g.V().hasLabel('company').has('name', '阿里').inE('belong').outV().hasLabel('person')"
"找出被person pay数量大于96的person,记为relationCount,再查询这些person pay的person","g.V().hasLabel('person').as('a').project('a', 'relationCount').by(identity()).by(__.in('pay').hasLabel('person').values('id').sum()).select('a', 'relationCount').as('b').where(select('relationCount').is(gt(96))).select('a').out('pay').hasLabel('person').dedup()"
"返回与名为华为和微软的点共同创造的,类型为软件的节点","g.V().has('name', '华为').outE('creates').inV().hasLabel('software').as('b').inE('creates').outV().has('name', '微软').select('b')"
"返回与用户何建聪有关,且与标签喜剧有关系的帖子节点","g.V().hasLabel('user').has('name', '何建聪').outE('publish').inV().hasLabel('post').as('b').inE('has').outV().hasLabel('tag').has('name', '喜剧').select('b')"
获取与公司相关的人员，包括他们的联系人,"g.V().hasLabel('company').as('a').outE('relation').inV().hasLabel('person').range(1, 2).as('b').select('b')"
"找出和buyer周建聪有look关系的goods,再找出以cancel关系关联了周建聪的orders","g.V().hasLabel('buyer').has('name', '周建聪').as('a').outE('look').inV().hasLabel('goods').as('b').select('a').inE('cancel').outV().hasLabel('orders').as('c').select('a', 'b', 'c')"
 找朋友，或者朋友的朋友和腾讯公司有关系的人。,"g.V().hasLabel('company').has('name', '腾讯').out('friend').range(1, 2).hasLabel('person')"
"返回张雪的点creates的issue,然后返回张雪被has的repository,一起返回","g.V().has('name', '张雪').as('a').outE('creates').inV().hasLabel('issue').as('b').select('a').inE('has').outV().hasLabel('repository').as('c').select('a', 'b', 'c')"
 请帮我查询一下，有哪些账户名称为空，但是进行了贷款存款，并且这些账户之间进行了转账。,"g.V().hasLabel('loan').has('weight', null).outE('deposit').inV().hasLabel('account').as('b').outE('transfer').inV().hasLabel('account').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"返回标签等于合作,并且满足条件f1不是false且目标点id大于640,或目标点id不为空的边","g.E().hasLabel('cooperate').or(and(has('f1', neq(false)), has('targetId', gt(640))), has('targetId', neq(null)))"
查询与周科有父母关系的人，以及这些人之间的朋友关系，然后返回这些人的年龄。,"g.V().has('name', '周科').out('parent').hasLabel('person').out('friend').hasLabel('person').values('age')"
"帮我查询全部和卖家韩若涵有关系的商品,返回这些点的性别","g.V().has('seller', 'name', '韩若涵').bothE().otherV().hasLabel('goods').values('gender')"
"给出179个名为loan_82的点存款的标签等于账号的节点,且节点上次登录时间不等于1995年11月28日或上次登录时间为2022年03月19日","g.V().has('name', 'loan_82').outE('deposit').inV().hasLabel('account').or(has('lastLoginTime', neq('1995-11-28')), has('lastLoginTime', '2022-03-19')).limit(179)"
请帮我查找被部门生物学院拥有的教师,"g.V().hasLabel('department').has('name', '生物学院').inE('has').outV().hasLabel('teacher').as('b').select('b').as('a').select('a', 'b')"
"以(85,189,66),(4,175,83),(86,198,37)作为请求表数据,属性分别为age,height,id, 源点的age等于输入表age,请帮我查找全部和药品枇杷糖浆有关系的病人节点,返回这些点的年龄,性别","g.inject([85, 189, 66], [4, 175, 83], [86, 198, 37]).as('p').select('p').by(unfold()).as('age', 'height', 'id').select('age').as('input_age').V().hasLabel('medicine').has('age', __.as('input_age')).has('name', '枇杷糖浆').bothE().otherV().hasLabel('patient').project('b.age', 'b.gender').by(values('age')).by(values('gender'))"
"查询全部id为196的city关联的city,和以belong关系关联了这些city的其他company","g.V().has('city', 'id', 196).bothE().otherV().hasLabel('city').as('b').inE('belong').otherV().hasLabel('company').as('c').select('b', 'c')"
"返回和person郑梅有关的账号,再返回和郑梅申请的其他贷款,返回它们","g.V().has('person', 'name', '郑梅').as('a').bothE().otherV().hasLabel('account').as('b').select('a').outE('apply').inV().hasLabel('loan').as('c').select('a', 'b', 'c')"
"返回被person创造数量大于154的评论,记为relationCount,再查询这些评论创造的person","g.V().hasLabel('comment').as('a').project('a', 'relationCount').by(identity()).by(__.in('creates').hasLabel('person').id().min()).select('a', 'relationCount').as('b').where(select('relationCount').is(gt(154))).select('a').out('creates').hasLabel('person')"
"给出标签等于contain,以及满足条件weight大于等于179.00且f1不等于true,或srcId小于198的边","g.E().hasLabel('contain').or(and(has('weight', gte(179.00)), has('f1', neq(true))), has('srcId', lt(198)))"
"请帮我查找被事项属于数量大于43的仓库,记为relationCount,再查询这些仓库属于的事项","g.V().hasLabel('repository').as('a').project('a', 'relationCount').by(identity()).by(bothE('belong').hasLabel('belong').inV().hasLabel('issue').dedup().count()).where(select('relationCount').is(gt(43))).select('a').bothE('belong').hasLabel('belong').inV().hasLabel('issue').dedup()"
找出Order_391和Order_192这两个标签为orders的点共同的朋友列表。,"g.V().hasLabel('orders').has('name', 'Order_391').out('friend').as('b').in('friend').hasLabel('orders').has('name', 'Order_192').select('b').values('name')"
"给出与user徐红存在likes关系,且与tag古代存在has关系的post节点，返回这些post的lang,及user徐红的height,及tag古代的id","g.V().has('user', 'name', '徐红').as('a').out('likes').as('b').in('has').has('tag', 'name', '古代').as('c').select('a', 'b', 'c').by('height').by('lang').by('id')"
请帮我查找被publisher马伟publish的book,"g.V().hasLabel('publisher').has('name', '马伟').as('b').outE('publish').as('e').inV().hasLabel('book').as('a').select('a', 'b')"
"查询所有city的partner,或其partner的partner","g.V().hasLabel('city').out('partner').range(1, 2).dedup()"
查询所有城市的朋友，或者他们的好友。,"g.V().hasLabel('city').outE('friend').inV().range(1, 2).dedup().values('name')"
查找所有和公司谷歌之间有属于关系的城市,"g.V().hasLabel('company').has('name', '谷歌').outE('belong').inV().hasLabel('city')"
"返回所有和名为经管学院的department有friend关系,或有friend的friend关系的teacher","g.V().has('department', 'name', '经管学院').bothE('friend').bothV().hasLabel('teacher').dedup()"
 找出陈思思喜欢的书其他编辑发布的数量。,"g.V().has('reader', 'name', '陈思思').outE('likes').inV().hasLabel('book').inE('publish').outV().hasLabel('publisher').dedup().count()"
"根据level分组,计算id的最大值减6的值",g.V().hasLabel('a').group().by('level').by(values('id').max().is(neq(null)).math('_ - 6'))
请帮我找出与周国强有关联的薪酬信息，然后找出所有与周国强有关联的人。,"g.V().has('person', 'name', '周国强').as('a').outE('pay').as('e').inV().as('b').select('a').inE('pay').as('e2').outV().as('c').select('a', 'b', 'c')"
帮我找一下名叫周轩，标签是person的点，然后把它们的id和salary给我,"g.V().hasLabel('person').has('name', '周轩').project('a.id', 'a.salary').by(values('id')).by(values('salary'))"
"根据名字,id分组,计算id减49加196的值","g.V().as('a').group().by(union(__.values('name'), __.values('id')).fold()).by(__.values('id').math('_ - 49 + 196').fold())"
 列出一个人所关联的软件，以及这些软件的其他创建公司。,"g.V().has('person', 'id', '39').bothE().otherV().hasLabel('software').as('b').inE('creates').otherV().hasLabel('company').as('c').select('b', 'c')"
请帮我找出赵强和马建国的共同相关者，共有46人。,"g.V().has('person', 'name', '赵强').outE('relation').inV().where(__.inE('relation').outV().has('person', 'name', '马建国')).limit(46)"
"查找183个创建时间不等于2017年09月23日的账号,根据id升序排列","g.V().hasLabel('account').has('createTime', neq('2017-09-23')).order().by('id', asc).limit(183)"
 找出陈若涵和赵强共同的伙伴，有62个人。,"g.V().has('person', 'name', '陈若涵').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '赵强').select('b').limit(62)"
"找出和person陈思思有认识关系的person,再找出以支付关系关联了陈思思的person","g.V().hasLabel('person').has('name', '陈思思').as('a').outE('knows').inV().hasLabel('person').as('b').select('a').inE('pay').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
 找出王伟观看的电影。,"g.V().has('person', 'name', '王伟').outE('watch').inV().hasLabel('film').as('b').select('b').by().as('a').select('a', 'b')"
 找出某人所有的朋友，或某人朋友的朋友。,g.V().hasLabel('person').outE('friend').inV().hasLabel('person').outE('friend').inV().hasLabel('person').dedup()
"请帮我查找所有源点标签为person,边标签为提交的边,返回这些边的权重减权重除553的值,和源点id加源点id除77的最小值","g.V().hasLabel('person').as('a').outE('commits').as('e').inV().as('b').project('expr1', 'expr2').by(__.select('e').values('weight').math('_ - _').math('_ / 553')).by(__.select('e').values('srcId').math('_ + _').math('_ / 77')).select(values).unfold().group().by(keys).by(select(values).fold()).project('expr1', 'expr2').by(select('expr1')).by(select('expr2').unfold().min())"
帮我查询被何宏支付的人员,"g.V().hasLabel('person').has('name', '何宏').as('b').outE('pay').as('e').inV().hasLabel('person').as('a').select('a', 'b')"
请帮我找出被用户李雪发布的帖子,"g.V().hasLabel('user').has('name', '李雪').outE('publish').inV().hasLabel('post').as('b').inE('publish').outV().as('a').select('a', 'b')"
"查找名为郑宏和周思琪的,类型是person的点公共的朋友节点的名单","g.V().has('person', 'name', '郑宏').out('friend').as('b').in('friend').has('person', 'name', '周思琪').select('b').values('name')"
"给出名为UME的person或电影院或电影,以及与其有关的电影院,并返回UME的id和这些电影院的名字","g.V().has('name', 'UME').hasLabel(within('person', 'cinema', 'film')).bothE().otherV().hasLabel('cinema').project('a_id', 'b_name').by(select(all, 'a').by('id')).by('name')"
"以(7631,15,'吴建国'),(8086,99,'杜思思'),(2417,90,'赵思思'),(3864,31,'赵国强')作为请求表数据,属性分别为salary,id,name, 以属性id作为相等条件,帮我查询和orders Order_111有orders_contain_goods关系的goods,再帮我查询以orders_contain_goods关系关联了 Order_111的goods","g.withSideEffect('p', [['salary':7631,'id':15,'name':'吴建国'], ['salary':8086,'id':99,'name':'杜思思'], ['salary':2417,'id':90,'name':'赵思思'], ['salary':3864,'id':31,'name':'赵国强']]).V().hasLabel('orders').has('name', 'Order_111').as('a').where(__.in('orders_contain_goods').hasLabel('goods').as('c')).bothE('orders_contain_goods').otherV().hasLabel('goods').as('b').select('a', 'b', 'c')"
身高对170取余的值,g.V().hasLabel('a').project('height_mod_170').by(values('height').math('_ % 170'))
"帮我查询被学生马伟选择的课程,和马伟选择的课程","g.V().hasLabel('student').has('name', '马伟').as('b').outE('selects').as('e').inV().hasLabel('course').as('a').select('b').outE('selects').as('e2').inV().hasLabel('course').as('c').select('a', 'b', 'c')"
"查询所有和教师王宏有关系的学生,返回这些点的id,价值,等级","g.V().has('teacher', 'name', '王宏').bothE().otherV().hasLabel('student').project('id', 'value', 'level').by('id').by('value').by('level')"
"给出pay person孙建国pay的person,的person","g.V().has('person', 'name', '孙建国').outE('pay').inV().hasLabel('person').as('b').inE('pay').outV().hasLabel('person').as('c').select('b', 'c')"
 查询包含以下内容的帖子：用户喜欢并且age不为空，salary在1722到8557之间的帖子，以及这些帖子包含的标签。,"g.V().hasLabel('user').has('age', neq(null)).has('salary', between(1722, 8557)).outE('likes').inV().hasLabel('post').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我找出全部名为Geaflow123的点的,权重乘权重等于62,金额在2536.30到8732.43之间的相关者,返回这些相关者的id,和边的源点id,f1","g.V().has('name', 'Geaflow123').outE('relation').as('e').inV().as('b').where(__.as('b').math('_ * _').by('weight').is(eq(62))).where(__.as('b').values('amount').is(between(2536.30, 8732.43))).select('b', 'e').by('id').by(__.select('srcId', 'f1'))"
"找出观看电影泰坦尼克号的person,和这些person创造的评论","g.V().hasLabel('film').has('name', '泰坦尼克号').in('watch').hasLabel('person').as('b').out('creates').hasLabel('comment').as('c').select('b', 'c')"
找出吴雪和何建国都发布的点,"g.V().hasLabel('user').has('name', '吴雪').outE('publish').inV().as('b').inE('publish').outV().hasLabel('user').has('name', '何建国').select('b')"
帮我找出与张伟和徐建聪都为朋友的人,"g.V().has('person', 'name', '张伟').out('friend').as('b').in('friend').has('person', 'name', '徐建聪').select('b')"
"请帮我查找42个名为黄若涵的点发布的类型为帖子的节点,且节点id小于30","g.V().has('name', '黄若涵').outE('publish').inV().hasLabel('post').has('id', lt(30)).limit(42)"
查询被买家杜国强咨询的卖家,"g.V().hasLabel('buyer').has('name', '杜国强').outE('consult').inV().hasLabel('seller').as('b').select('b').by().as('a').select('a', 'b')"
 找到黄强和Alan的共同合作伙伴，共有36人。,"g.V().has('buyer', 'name', '黄强').outE('partner').inV().where(__.inE('partner').outV().has('buyer', 'name', 'Alan')).dedup().limit(36)"
找出user马国强和孙科都喜欢的点,"g.V().has('user', 'name', '马国强').out('likes').as('b').in('likes').has('user', 'name', '孙科').select('b')"
"找出源点类型为公司,边类型为属于,且满足条件f0的最小值小于等于51且源点id不等于168,目标点id乘199大于24的边","g.V().hasLabel('company').as('a').outE('belong').as('e').where(and(__.select('e').values('f0').min().is(lte(51)), __.select('e').values('srcId').is(neq(168)), __.select('e').values('targetId').math('_ * 199').is(gt(24)))).select('e')"
返回标签等于teacher的点,g.V().hasLabel('teacher')
 孙月从teacher出发，沿着一条类型为teach的边走了3度，到达course点。,"g.V().hasLabel('teacher').has('name', '孙月').repeat(outE('teach').inV()).times(3).hasLabel('course')"
"请帮我找出和person郑国强有提交关系的软件,再请帮我找出以提交关系关联了郑国强的软件","g.V().hasLabel('person').has('name', '郑国强').as('a').bothE('commits').otherV().hasLabel('software').as('b', 'c').select('a', 'b', 'c')"
找出徐国强申请的贷款，被其他账户偿还的数量。,"g.V().has('person', 'name', '徐国强').outE('apply').inV().hasLabel('loan').inE('repay').outV().hasLabel('account').count()"
"返回person的三角的环,边类型为购买, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('buy').inV().as('b').outE('buy').inV().as('c').where(__.as('c').outE('buy').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"输入请求点id的列表657,369,294, 以属性id作为相等条件,请帮我找出孤城的点knows的book,然后请帮我找出孤城被relates的book,一起返回","g.withSideEffect('p', [657, 369, 294]).V().has('id', within('p')).has('name', '孤城').as('a').out('knows').hasLabel('book').as('b').select('a').in('relates').hasLabel('book').as('c').select('a', 'b', 'c')"
请帮我找出薪资为空且年龄大于52的作家及其认识的作家的姓名。,"g.V().hasLabel('author').has('salary', null).has('age', gt(52)).as('a').outE('knows').as('e').inV().hasLabel('author').as('b').outE('knows').as('e2').inV().hasLabel('author').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"查找论坛包含的帖子, 令帖子的价值的值等于发布帖子的用户的名字的求和值, 再查找帖子拥有的标签","g.V().hasLabel('forum').as('a').outE('contain').inV().hasLabel('post').as('b').sideEffect(__.select('b').aggregate('bSet')).select('b').inE('publish').outV().hasLabel('user').values('name').sum().as('bValue').select('bSet').unfold().as('b').select('bValue').sideEffect(__.select('b').property('value', __.select('bValue'))).select('b').outE('has').inV().hasLabel('tag').as('d').select('b', 'd').by('value').by()"
"给出标签为转账,且权重不等于182.60或f1不等于true的边","g.E().hasLabel('transfer').or(has('weight', neq(182.60)), has('f1', neq(true)))"
"给出film的partner,或其partner的partner",g.V().hasLabel('film').repeat(out('partner')).times(2).dedup()
请帮我查找前146个标签等于认识的边,g.E().hasLabel('knows').limit(146)
"使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出id为77的author有关的author的partner, 再请帮我找出和author有关系的relation","g.V().has('author', 'id', 77).as('a').bothE().otherV().hasLabel('author').as('b').bothE('partner').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"使用这个图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询从buyer张梅出发,经过label为buyer_consult_seller的边,走1到3跳到达的seller点","g.V().hasLabel('buyer').has('name', '张梅').repeat(outE('buyer_consult_seller').inV().simplePath()).times(3).emit().hasLabel('seller').range(1, 3).dedup()"
"查询全部与阿里存在雇佣关系的person,person与软件存在购买关系的点,返回这些点的是否开源","g.V().has('name', '阿里').out('employee').hasLabel('person').out('buy').hasLabel('software').values('openSource')"
"以(180,9117,'famale')作为请求表数据,属性分别为height,salary,gender, 以属性gender作为相等条件,找出年龄是1,年龄小于5461,或性别为famale的节点","g.inject(['height':180,'salary':9117,'gender':'famale']).as('p').V().as('a').where(and(__.select('a').values('gender').is(eq(__.select('p').select('gender'))), or(and(__.select('a').values('age').is(eq(1)), __.select('a').values('age').is(lt(5461))), __.select('a').values('gender').is(eq('famale'))))).select('a')"
找出180个与马思琪和韩建国都存在关系的medicine或department节点,"g.V().has('name', '马思琪').as('a').outE().as('e').inV().hasLabel(within('medicine', 'department')).as('b').inE().as('e2').outV().has('name', '韩建国').as('c').select('b').limit(180)"
"帮我查询150个和类型为买家的点有咨询关系的卖家,且和这些卖家有拥有关系的商品",g.V().hasLabel('buyer').outE('consult').inV().hasLabel('seller').outE('has').inV().hasLabel('goods').limit(150)
 黄思琪和杜轩共有20个partner。,"g.V().has('person', 'name', '黄思琪').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '杜轩').select('b').limit(20)"
 找出所有与周强有写作关系的书籍，并返回这些书籍的作者。,"g.V().has('name', '周强').out('write').hasLabel('book').out('refers').hasLabel('book').values('name')"
"查找软件Calcite的所有伙伴,的targetId的平均值减目标点id乘193的值","g.V().has('software', 'name', 'Calcite').outE('partner').as('e').inV().as('b').select('e').by('targetId').fold().as('targetIds').select('e').by(constant(1)).select('targetIds').unfold().mean().as('avg').select('e').by('targetId').math('(avg - _) * 193').by('avg').by()"
请帮我找出全部类型为doctor的点,g.V().hasLabel('doctor')
请帮我找出创建时间为2009年03月19日或id为空或id在19到58之间的节点,"g.V().or(has('createTime', '2009-03-19'), hasNot('id'), has('id', between(19, 58)))"
"请帮我查找所有源点满足条件名字为Zeus,价值小于416,创建时间是2025年04月16日,目标点满足条件id等于49,且类型为转账的边","g.V().has('name', 'Zeus').has('value', lt(416)).has('createTime', '2025-04-16').outE('transfer').as('e').inV().has('id', 49).select('e')"
查询所有名为JavaGuid的点拥有的事项,"g.V().has('name', 'JavaGuid').out('has').hasLabel('issue')"
"以332,773,10作为请求点id, 以属性id作为相等条件,找出名字不是张宏,身高不为空的买家创造的订单的名称,以及这些订单 包含的商品的名称","g.withSideEffect('p', [332, 773, 10]).V().hasLabel('buyer').has('id', within('p')).has('name', neq('张宏')).has('height').out('buyer_creates_orders').hasLabel('orders').as('b').out('orders_contain_goods').hasLabel('goods').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
请帮我查找满足条件价值为986的节点,"g.V().has('value', 986)"
"根据peopleNumber,name,id分组,计算id对30取余的值","g.V().hasLabel('a').project('id_mod_30', 'peopleNumber', 'name', 'id').by(values('id').math('_ % 30')).by(values('peopleNumber')).by(values('name')).by(values('id')).dedup().by(select('peopleNumber', 'name', 'id'))"
 找到张思琪和何建国都发布过的内容。,"g.V().has('user', 'name', '张思琪').outE('publish').inV().as('b').inE('publish').outV().has('user', 'name', '何建国').select('b')"
"返回标签等于person的点,并根据薪资升序排列","g.V().hasLabel('person').order().by('salary', asc)"
"返回名为Jimmy的seller,以及与其有关的goods,并返回Jimmy的id和这些goods的sellerNumber","g.V().hasLabel('seller').has('name', 'Jimmy').as('a').bothE().as('e').otherV().hasLabel('goods').as('b').select('a', 'b').by('id').by('sellerNumber')"
 找出与浙江大学有合作关系的所有公司，然后找出这些公司与城市之间的关联，最后计算这些点的总面积。,"g.V().has('name', '浙江大学').out('cooperate').hasLabel('company').out('belong').hasLabel('city').values('area').sum()"
请帮我找出与部门内科有拥有关系的3跳以内的环,"g.V().has('department', 'name', '内科').as('a').repeat(bothE().otherV().simplePath()).times(2).where(cyclicPath()).path().by('id').by('id')"
 返回与鞋子相关且与吴思琪卖家相关的订单，并返回它们的名称、价格和ID。,"g.V().has('goods', 'name', '鞋子').outE().inV().hasLabel('orders').as('b').inE().outV().has('seller', 'name', '吴思琪').select('b').values('name', 'price', 'id')"
"请帮我找出名为李建聪的点取消的全部订单,并对这些订单的价格进行求和","g.V().has('name', '李建聪').outE('cancel').inV().hasLabel('orders').values('price').sum()"
"找出仓库Mybatis拥有的用户,以及拥有这些用户的仓库","g.V().hasLabel('repository').has('name', 'Mybatis').outE('has').inV().hasLabel('user').as('b').inE('has').outV().hasLabel('repository').as('c').select('b', 'c')"
 查询黄强朋友的朋友的朋友。,"g.V().has('person', 'name', '黄强').out('friend').out('friend').out('friend')"
"帮我查询被电影院好视影院上映的电影,和好视影院上映的电影","g.V().hasLabel('cinema').has('name', '好视影院').as('b').bothE('releases').otherV().hasLabel('film').as('a', 'c').select('a', 'b', 'c')"
请帮我找出所有与person徐宏有关系的person的名字,"g.V().hasLabel('person').has('name', '徐宏').bothE().otherV().hasLabel('person').values('name')"
"请帮我查找名字为马月的person认识的person的名称,以及这些person 喜欢的person的名称","g.V().hasLabel('person').has('name', '马月').outE('knows').inV().hasLabel('person').as('b').outE('likes').inV().hasLabel('person').as('c').select('b', 'c').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"帮我查询医生创造的处方,返回其源点的薪资加5136的值,以及目标点的weight的最小值对权重取余减585的值","g.V().hasLabel('doctor').as('a').outE('creates').as('e').inV().hasLabel('prescription').as('b').project('salary_plus_5136', 'min_weight_mod_weight_minus_585').by(__.select('a').values('salary').math('_ + 5136')).by(__.select('b').values('weight').fold().math('min(_) % _ - 585'))"
 找出与这些公司有关联的公司，以及与这些公司有包含关系的其他城市。,"g.V().has('company', 'id', '107').bothE().otherV().hasLabel('company').as('b').inE('contain').outV().hasLabel('city').as('c').select('b', 'c')"
给出所有标签等于卖家的点,g.V().hasLabel('seller')
 找出医生（源点）到处方（目标点）的边，标签为'creates'。,g.V().hasLabel('doctor').outE('creates').as('e').inV().hasLabel('prescription').select('e')
请帮我查找person的3度的环,"g.V().hasLabel('person').as('a').repeat(both().simplePath()).times(2).where(loops().is(2)).as('b').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
找buyer的朋友，或者朋友的朋友,g.V().hasLabel('buyer').repeat(out('friend')).times(2).dedup()
"返回id为24的点的薪资,id,名字","g.V().has('id', 24).project('salary', 'id', 'name').by('salary').by('id').by('name')"
"输入请求点id的列表658, 源点的id等于输入表id,查询前98个满足条件名字不等于王建聪或性别是famale的person","g.withSideEffect('p', [658]).V().hasLabel('person').where(and(__.has('id', within('p')), or(__.has('name', neq('王建聪')), __.has('gender', 'famale')))).limit(98)"
 找出被 XiaoHu 转移的账户。,"g.V().hasLabel('account').has('name', 'XiaoHu').as('b').outE('transfer').inV().as('a').select('a', 'b')"
"以17,276,325作为请求点id, 以属性id作为相等条件,找出全部orders以name,id分组的value, 根据value从大到小排序","g.inject([17, 276, 325]).unfold().as('p').V().hasLabel('orders').has('id', __.where(eq('p'))).group().by(__.values('name', 'id').fold()).by(__.values('value').fold()).order(local).by(__.tail(local, 1), desc)"
"返回被病人接受数量大于97的处方,记为relationCount,再查询这些处方接受的药品","g.V().hasLabel('prescription').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('accept').hasLabel('patient').id().mean()).select('a', 'relationCount').as('b').select('a').where(__.select('b').select('relationCount').is(gt(97))).out('accept').hasLabel('medicine')"
"帮我查询被课程属于数量大于199的部门,记为relationCount,再查询这些部门属于的教师","g.V().hasLabel('department').as('a').project('a', 'relationCount').by(__.identity()).by(__.outE('belong').hasLabel('belong').inV().hasLabel('course').values('id').max()).select('a', 'relationCount').as('a_with_count').select('a_with_count').where(__.select('relationCount').is(gt(199))).select('a').outE('belong').hasLabel('belong').inV().hasLabel('teacher').dedup()"
找出与黄建聪相关的人员，然后找出黄建聪喜欢的其他人，并将它们返回。,"g.V().hasLabel('person').has('name', '黄建聪').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('likes').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
"请帮我查找名为华为的,height在159到199之间且height为174的relation,返回这些relation的id,和边的srcId,targetId,f0","g.V().has('name', '华为').outE('relation').as('e').inV().has('height', between(159, 199)).has('height', 174).project('b.id', 'e.srcId', 'e.targetId', 'e.f0').by(__.id()).by(__.select('e').id()).by(__.select('e').outV().id()).by(__.select('e').values('f0'))"
请提供与徐宏有关的账户信息，以及与李国强有关的投资公司的信息。,"g.V().hasLabel('person').has('name', '徐宏').as('a').outE('own').as('e').inV().hasLabel('account').as('b').select('a').V().hasLabel('person').has('name', '李国强').as('c').outE('invest').as('e2').inV().hasLabel('company').as('d').select('a', 'b', 'c', 'd')"
 找出名叫杜宏的人的社交网络中的人名，以及他们认识的人的姓名。,"g.V().has('person', 'name', '杜宏').outE('relates').inV().hasLabel('person').as('b').outE('knows').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 找出包含帖子Post_459的论坛。,"g.V().hasLabel('post').has('name', 'Post_459').inE('contain').outV().hasLabel('forum')"
"调用triangleCount函数,以57作为输入,返回运算结果","g.call('triangleCount').with('input', 57).select('number')"
请帮我找出课程的1跳以内的环,"g.V().hasLabel('course').as('a').repeat(out().simplePath()).times(1).where(out().as('a')).path().by('id').project('a.id', 'b_id').by(limit(local, 1)).by(tail(local, 1))"
 查询与华为公司有关且与Kafka软件相关的个人节点。,"g.V().has('company', 'name', '华为').bothE('employee').otherV().hasLabel('person').bothE('buy').otherV().has('software', 'name', 'Kafka').as('c').select('c').by(__.in('buy')).hasLabel('person')"
"返回label为选择,且源点id小于127或f1是true,且f0小于717的边","g.E().hasLabel('selects').and(has('srcId', lt(127)).or().has('f1', true)).has('f0', lt(717))"
"查找id为181的编辑关联的作家,和以认识关系关联了这些作家的其他作家","g.V().has('publisher', 'id', 181).bothE().otherV().hasLabel('author').as('b').inE('knows').otherV().hasLabel('author').as('c').select('b', 'c')"
"返回所有名为Bilibili的,名字等于北京大学或等级不等于3的朋友,返回这些朋友的id,和边的权重,源点id","g.V().has('name', 'Bilibili').outE('friend').as('e').inV().has('name', '北京大学').or().has('level', neq(3)).select('e').project('b.id', 'e.weight', 'e.srcId').by(__.inV().id()).by('weight').by(outV().id())"
找出与person李建聪和马红都存在父母关系的点,"g.V().has('person', 'name', '李建聪').out('parent').as('b').in('parent').has('person', 'name', '马红').select('b')"
"返回李建聪的点认识的person,然后返回李建聪被喜欢的person,一起返回","g.V().has('name', '李建聪').as('a').outE('knows').inV().hasLabel('person').as('b').select('a').inE('likes').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
获取与cinema相关的film节点，按name和category进行分组，并返回name和category。,"g.V().hasLabel('cinema').bothE('releases').otherV().hasLabel('film').project('name', 'category').by(values('name')).by(values('category')).group().by(select('name', 'category')).by(count())"
给出所有类型为公司或软件的点,"g.V().hasLabel(within('company', 'software'))"
查询被person徐梅关联的person,"g.V().hasLabel('person').has('name', '徐梅').outE('relates').inV().as('b').outV().as('a').select('a', 'b')"
 查询与复旦大学有关且与华为有合作的城市的节点。,"g.V().has('university', 'name', '复旦大学').outE('belong').inV().as('b').inE('contain').outV().has('company', 'name', '华为').select('b')"
"返回买家马思思的标签为相关者的边,并根据目标点id从小到大排列,返回68个","g.V().has('buyer', 'name', '马思思').outE('relation').as('e').inV().as('b').order().by(select('e').values('targetId'), asc).select('b').limit(68)"
请帮我找出所有与卖家有关联的订单，以及那些与这些订单被取消状态相关联的其他买家。,"g.V().hasLabel('seller').has('id', '108').bothE().otherV().hasLabel('orders').as('b').inE('cancel').outV().hasLabel('buyer').as('c').select('b', 'c')"
"给出和course计算机体系结构有关的course,再给出和计算机体系结构belong的其他department,返回它们","g.V().has('course', 'name', '计算机体系结构').as('a').bothE().otherV().hasLabel('course').as('b').select('a').outE('belong').inV().hasLabel('department').as('c').select('a', 'b', 'c')"
查找名为徐思思的点knows的person,"g.V().has('name', '徐思思').outE('knows').inV().hasLabel('person')"
"给出源点类型为读者,目标点类型为书,类型为读者或作家或书的边","g.V().hasLabel('reader').as('a').outE('reader', 'author', 'book').as('e').inV().hasLabel('book').as('b').select('e')"
"返回名为王伟的,id小于200,id小于89的friend,返回这些friend的name,和边的f0,f1,srcId","g.V().has('name', '王伟').outE('friend').as('e').inV().has('id', lt(200)).has('id', lt(89)).as('b').select('b', 'e').by('name').by(valueMap('f0', 'f1', 'srcId'))"
返回person的1度的环,"g.V().hasLabel('person').as('a').both().as('b').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"给出名为人人影城的,id在0到99之间或价值不为空的相关者,返回这些相关者的类别,和边的源点id","g.V().has('name', '人人影城').outE('relation').as('e').inV().has('id', between(0, 99)).or().has('value', neq(null)).project('b.category', 'e.srcId').by(values('category')).by(select('e').values('srcId'))"
"找出label为合并请求的点,返回104个",g.V().hasLabel('pullRequest').limit(104)
"查找和名为王轩的person有朋友关系,或有朋友的朋友关系的person","g.V().hasLabel('person').has('name', '王轩').bothE('friend').otherV().hasLabel('person').range(1, 2).dedup()"
"找出全部源点id小于等于93且性别不是male,性别不等于famale,目标点id大于等于24,且标签为喜欢的边","g.V().has('id', lte(93)).has('gender', neq('male')).has('gender', neq('famale')).outE('likes').as('e').inV().has('id', gte(24)).select('e')"
 找出与孙科有关的人，以及与孙科同事的其他人员。,"g.V().has('person', 'name', '孙科').as('a').bothE().otherV().hasLabel('person').as('b').select('a').bothE('colleague').otherV().hasLabel('person').as('c').select('a', 'b', 'c')"
"请帮我查找身高不为空或性别不等于famale的买家咨询的卖家的名称,以及这些卖家 拥有的商品的名称","g.V().hasLabel('buyer').or(has('height', neq(null)), has('gender', neq('famale'))).outE('consult').inV().hasLabel('seller').as('b').outE('has').inV().hasLabel('goods').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"给出城市武汉属于的国家,被其他城市属于的数量","g.V().has('city', 'name', '武汉').out('belong').as('country').in('belong').hasLabel('city').where(neq('武汉')).count()"
"请帮我找出employee company谷歌employee的person,的company","g.V().has('company', 'name', '谷歌').outE('employee').inV().hasLabel('person').as('b').inE('employee').outV().hasLabel('company').as('c').select('b', 'c')"
找出全部名为孙若涵的节点look的seller或goods或buyer,"g.V().has('name', '孙若涵').outE('look').inV().hasLabel(within('seller', 'goods', 'buyer')).dedup()"
"使用列为value,id,area, 数据为(299,93,21874)的子查询作为输入表, 源点的id等于输入表id,返回全部id为65的university关联的city,和以contain关系关联了这些city的其他country","g.withSideEffect('p', [['value':299, 'id':93, 'area':21874]]).V().hasLabel('university').has('id', 93).has('id', '65').bothE().otherV().hasLabel('city').as('b').inE('country_contain_city').otherV().hasLabel('country').as('c').select('b', 'c')"
"给出123个创建时间是1997年08月12日的论坛,根据id从小到大排列","g.V().hasLabel('forum').has('createTime', '1997-08-12').order().by('id', asc).limit(123)"
"帮我查询72个名为王若涵的点喜欢的label为仓库的节点,且其创建时间大于445,星数不是381","g.V().has('name', '王若涵').outE('likes').inV().hasLabel('repository').has('createTime', gt(445)).has('stars', neq(381)).limit(72)"
"请帮我查找名为马红的person,以及与其有关的person,并返回马红的名字和这些person的身高","g.V().has('person', 'name', '马红').as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a', 'b').by('name').by('height')"
"帮我查询software Hive uses的software,以及creates这些software的company","g.V().hasLabel('software').has('name', 'Hive').outE('uses').inV().hasLabel('software').as('b').inE('creates').outV().hasLabel('company').as('c').select('b', 'c')"
" 返回所有与马月有knows关系的person的id,包括person与person之间的knows关系。","g.V().has('name', '马月').out('knows').hasLabel('person').out('knows').hasLabel('person').id()"
帮我查询以属于关系关联了电影我不是药神的评论,"g.V().hasLabel('film').has('name', '我不是药神').inE('belong').outV().hasLabel('comment')"
请帮我找出与伦敦有关联的大学,"g.V().hasLabel('city').has('name', '伦敦').inE('belong').outV().hasLabel('university')"
"输入请求点id的列表435,984,267,908,832, 以属性id作为相等条件,给出id为86的部门有关的医生的朋友, 再给出和医生有关系的伙伴","g.withSideEffect('p', [435, 984, 267, 908, 832]).V().hasLabel('department').where(__.values('id').is(within('p')).and().values('id').is(eq('86'))).as('a').bothE().otherV().hasLabel('doctor').as('b').bothE('friend').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
请帮我找出与person杜建聪有联系的person,"g.V().has('person', 'name', '杜建聪').inE('knows').outV().hasLabel('person')"
"查找源点label为person,目标点label为软件,label为软件的边",g.V().hasLabel('person').outE('software').where(inV().hasLabel('software'))
获取id不为49且小于等于31的person pay的person的名称,"g.V().hasLabel('person').has('id', P.neq(49)).has('id', P.lte(31)).as('a').outE('pay').as('e').inV().hasLabel('person').as('b').outE('pay').as('e2').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').select(values).project('b_name', 'c_name').by(select('b')).by(select('c'))"
"输入请求点id的列表893,388, 以属性id作为相等条件,给出162个名为张月的点creates的标签等于prescription的节点,且其name是Prescription_294或weight乘552小于等于251","g.inject([893, 388]).unfold().as('p').V().has('id', __.as('p')).has('name', '张月').outE('doctor_creates_prescription').inV().hasLabel('prescription').where(or(has('name', 'Prescription_294'), math('weight * 552').is(lte(251)))).limit(162)"
"输入请求点id的列表918,916,957,52,229, 源点的id等于输入表id,查找源点id大于等于45且id乘35除86大于35,或name不等于李国强,边标签为doctor_belong_department,且targetId小于等于48且srcId在67到166之间,或targetId是182的边,返回这些边的weight的最大值减113.43的最小值","g.inject([918, 916, 957, 52, 229]).as('p').V().as('a').where(eq('p')).by('id').by().where(or(and(has('id', gte(45)), math('id * 35 / 86').is(gt(35))), has('name', neq('李国强')))).outE('doctor_belong_department').as('e').where(or(and(has('targetId', lte(48)), has('srcId', between(67, 166))), has('targetId', eq(182)))).inV().as('b').select('e').values('weight').max().math('_ - 113.43').min()"
请帮我查找所有与person孙雪有关系的person的age,"g.V().hasLabel('person').has('name', '孙雪').bothE().otherV().hasLabel('person').values('age')"
"返回buyer consult的seller, 令seller的height的值等于consultseller的buyer的gender的个数, 再查找seller has的goods","g.V().hasLabel('buyer').as('a').outE('consult').as('e').inV().hasLabel('seller').as('b').sideEffect(__.sack(assign).by(__.inE('consult').as('e2').outV().hasLabel('buyer').as('c').values('gender').dedup().count()).sack()).as('b').outE('has').as('e3').inV().hasLabel('goods').as('d').select('b', 'd').by(__.sack()).by()"
"输入表的列为age,id,name, 数据为(84,10,'李国强'), 以属性id作为相等条件,帮我查询与department传染部存在department_has_doctor关系,且与prescription Prescription_476存在doctor_creates_prescription关系的doctor节点，返回这些doctor的gender,及department传染部的address,及prescription Prescription_476的weight","g.withSideEffect('p', [['age':84, 'id':10, 'name':'李国强']]).V().hasLabel('department').has('id', __.select('p').unfold().select('id')).has('name', '传染部').as('a').outE('department_has_doctor').inV().hasLabel('doctor').as('b').inE('doctor_creates_prescription').outV().hasLabel('prescription').has('name', 'Prescription_476').as('c').select('a', 'b', 'c').by('address').by('gender').by('weight')"
"给出被pullRequest belong数量大于170的repository,记为relationCount,再查询这些repository belong的pullRequest","g.V().hasLabel('repository').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('belong').hasLabel('pullRequest').id().mean()).select('a', 'relationCount').where(__.select('relationCount').is(gt(170))).select('a').out('belong').hasLabel('pullRequest')"
查询前197个标签为创造的边,g.E().hasLabel('creates').limit(197)
请帮我找出与person孙若涵和person Alice都有关联的人，并返回他们的gender,"g.V().hasLabel('person').has('name', '孙若涵').as('a').outE().as('e').inV().hasLabel('person').as('b').inE().as('e2').outV().hasLabel('person').has('name', 'Alice').as('c').select('b').values('gender')"
查询创建时间是2005年10月22日或名字等于LX001或创建时间为29的节点,"g.V().or(has('createTime', '2005-10-22'), has('name', 'LX001'), has('createTime', 29))"
"查找标签等于发布,并且满足条件时间戳不是2004年02月16日的边","g.E().hasLabel('publish').has('timeStamp', neq('2004-02-16'))"
"找出全部和person马梅有关系的person,返回这些点的名字,身高","g.V().has('person', 'name', '马梅').bothE().otherV().hasLabel('person').project('name', 'height').by('name').by('height')"
"帮我查询与buyer郑雪有关系的orders, 返回和这些orders有关联的goods的,sellerNumber乘sellerNumber的值","g.V().hasLabel('buyer').has('name', '郑雪').bothE().otherV().hasLabel('orders').bothE().otherV().hasLabel('goods').project('result').by(values('sellerNumber').math('_ * _'))"
 找名叫做徐轩的人，返回他们的名字。,"g.V().hasLabel('person').has('name', '徐轩').values('name')"
"请帮我查找帖子Post_290拥有的标签,被其他帖子拥有的数量","g.V().hasLabel('post').has('name', 'Post_290').out('has').in('has').where(neq('a')).dedup().count()"
"返回从部门数学学院出发,经过label为拥有的边,走1度到达的教师点","g.V().hasLabel('department').has('name', '数学学院').outE('has').inV().hasLabel('teacher').limit(1)"
查找所有和person黄建国之间有恋人关系的person,"g.V().has('person', 'name', '黄建国').out('lover').hasLabel('person')"
"找出全部源点类型是cinema,目标点类型是film,类型是comment或tag的边","g.V().hasLabel('cinema').outE('comment', 'tag').as('e').inV().hasLabel('film').select('e')"
"根据age,name,id分组,计算id减28减age的值","g.V().as('a').group().by(union(values('age'), values('name'), values('id')).fold()).by(project('result').by(math('a.id - 28 - a.age')))"
返回与person韩宏和杜伟都存在喜欢关系的点,"g.V().hasLabel('person').has('name', '韩宏').outE('likes').inV().as('b').inE('likes').outV().hasLabel('person').has('name', '杜伟').select('b').dedup()"
 请帮我查找与类型为'person'的点有认识关系的另外55个'person'，并找出与这些'person'有提交关系的软件。,g.V().hasLabel('person').as('a').outE('knows').inV().hasLabel('person').as('b').outE('commits').inV().hasLabel('software').as('c').select('c').limit(55)
"返回名为东京的点的,id在29到32之间,人数小于75590的朋友,返回这些朋友的面积,和边的目标点id","g.V().has('name', '东京').outE('friend').as('e').inV().has('id', between(29, 32)).has('peopleNumber', lt(75590)).project('area', 'targetId').by('area').by(select('e').values('targetId'))"
计算所有论坛的价值减652的值,g.V().hasLabel('forum').project('result').by(values('value').math('_ - 652'))
找出与卖家相关的人员，或者这些人员的联系人,"g.V().hasLabel('seller').outE('relation').inV().range(1, 2).dedup()"
"查找标签等于issue,名为ISSUE-284的点,返回这些点的createTime,id,status","g.V().hasLabel('issue').has('name', 'ISSUE-284').project('createTime', 'id', 'status').by('createTime').by('id').by('status')"
"请帮我查找person徐宏喜欢的评论, 令评论的薪资等于person的身高, 返回person的薪资, 评论的名字","g.V().hasLabel('person').has('name', '徐宏').as('a').outE('likes').inV().hasLabel('comment').as('b').sideEffect(__.select('b').property('salary', __.select('a').values('height'))).select('a', 'b').by('salary').by('name')"
"返回类型为属于,以及f1不是false或源点id在15到112之间或权重在105.07到107.16之间的边","g.E().hasLabel('belong').or(has('f1', neq(false)), has('srcId', between(15, 112)), has('weight', between(105.07, 107.16)))"
 找出ID小于等于91的评论所属电影名称及标签。,"g.V().hasLabel('comment').has('id', lte(91)).out('belong').hasLabel('film').as('b').out('has').hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
找出与账号有转账关系的账号，以及这些账号与其有转账关系的账号，并且这些账号与贷款有还款关系。,g.V().hasLabel('account').as('a').outE('transfer').as('e').inV().hasLabel('account').as('b').outE('transfer').as('e2').inV().hasLabel('account').as('c').outE('repay').as('e3').inV().hasLabel('loan').as('d').select('d')
查询与何思思和黄若涵都有关联的人，返回他们的性别。,"g.V().has('person', 'name', '何思思').outE().inV().hasLabel('person').as('b').inE().outV().has('person', 'name', '黄若涵').select('b').values('gender')"
"给出标签等于创造,并且源点id大于等于24,目标点id不为空,或源点id为163的边","g.E().hasLabel('creates').or(and(has('srcId', gte(24)), has('targetId', neq(null))), has('srcId', 163))"
"帮我查询全部源点类型是author,边类型是knows,以及满足条件f0大于等于928的边","g.V().hasLabel('author').as('a').outE('knows').has('f0', gte(928)).as('e').inV().as('b').select('e')"
"请帮我查找和cinema点有releases关系的film节点,且边满足条件srcId不是186,目标film节点id小于27","g.V().hasLabel('cinema').outE('releases').has('srcId', neq(186)).inV().hasLabel('film').has('id', lt(27)).dedup()"
"用这个schema:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查询teacher的3跳以内的环","g.V().hasLabel('teacher').as('a').repeat(both().simplePath()).times(3).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"查询大学的三角的环,边类型为合作, 并返回这些点的id","g.V().hasLabel('university').as('a').outE('cooperate').inV().as('b').outE('cooperate').inV().as('c').where(__.outE('cooperate').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"以943,290,221,302,158作为请求点id, 源点的id等于输入表id,请帮我查找160个与Faker和Zeus都存在关系的账号节点","g.withSideEffect('p', [943, 290, 221, 302, 158]).V().where(values('id').is(within('p')).and().has('name', 'Faker')).outE().inV().hasLabel('account').where(__.inE().outV().has('name', 'Zeus')).limit(160)"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出前37个标签为person_pay_person的边",g.E().hasLabel('person_pay_person').limit(37)
"查找所有源点标签等于person,边标签等于朋友的边,返回这些边的源点id加源点id的值,和源点id减48的和","g.V().hasLabel('person').outE('friend').project('expr1', 'sum').by(__.values('srcId').math('_ + _')).by(__.values('srcId').math('_ - 48').sum())"
请帮我找出以uses关系关联了software Hive的software,"g.V().hasLabel('software').has('name', 'Hive').inE('uses').outV().hasLabel('software')"
 请帮我找出 person 的相关人，或者相关人的相关人。,g.V().hasLabel('person').as('a').outE('relation').inV().hasLabel('person').as('b').select('b').dedup()
请帮我查找与澳大利亚相关的公司，以及包含在澳大利亚的城市，并将结果返回。,"g.V().has('country', 'name', '澳大利亚').as('a').both().hasLabel('company').as('b').select('a').out('contain').hasLabel('city').as('c').select('a', 'b', 'c')"
查询与黄国强有恋人关系的人，然后再查询与黄国强有同事关系的人。,"g.V().has('person', 'name', '黄国强').as('a').out('lover').hasLabel('person').as('b').select('a').in('colleague').hasLabel('person').as('c').select('a', 'b', 'c')"
找出张月喜欢的人,"g.V().hasLabel('person').has('name', '张月').as('b').outE('likes').as('e').inV().hasLabel('person').as('a').select('a', 'b')"
找出清华大学的friend关系,"g.V().has('university', 'name', '清华大学').outE('relation').inV().outE('relation').inV().outE('friend').inV()"
请帮我找出与四川大学有has关系，并且与孙宏老师有has关系的department节点。请返回这些department的id、value和name，以及四川大学的level和孙宏老师的name。,"g.V().hasLabel('university').has('name', '四川大学').as('a').out('has').hasLabel('department').as('b').in('has').hasLabel('teacher').has('name', '孙宏').as('c').select('a', 'b', 'c').by('level').by(values('id', 'value', 'name').fold()).by('name').project('a.level', 'b.id', 'b.value', 'b.name', 'c.name').by(select('a')).by(select('b').unfold().limit(1)).by(select('b').unfold().skip(1).limit(1)).by(select('b').unfold().skip(2).limit(1)).by(select('c'))"
返回全部和用户郑国强之间有创造关系的事项,"g.V().has('user', 'name', '郑国强').out('creates').hasLabel('issue')"
"输入请求点id的列表572,737,631, 以属性id作为相等条件,查询和doctor赵强有doctor_diagnose_patient关系的patient,以及和doctor孙若涵有doctor_diagnose_patient关系的patient,将它们都返回","g.inject([572, 737, 631]).as('p').unfold().as('id').V().hasLabel('doctor').has('id', __.select('id')).has('name', '赵强').as('a').outE('doctor_diagnose_patient').inV().hasLabel('patient').as('b').select('a', 'b').as('result1').V().hasLabel('doctor').has('name', '孙若涵').as('c').outE('doctor_diagnose_patient').inV().hasLabel('patient').as('d').select('c', 'd').as('result2').select('result1', 'result2').project('a', 'b', 'c', 'd').by(__.select('result1').select('a')).by(__.select('result1').select('b')).by(__.select('result2').select('c')).by(__.select('result2').select('d'))"
"使用列为name,gender,salary, 数据为('赵科','male',1491),('何若涵','male',8972)的子查询作为输入表, 源点的salary等于输入表salary,查询所有买家以薪资分组的性别, 根据性别从大到小排序","g.inject([['赵科', 'male', 1491], ['何若涵', 'male', 8972]]).as('p').flatMap(select('p').unfold().as('row')).V().hasLabel('buyer').as('a').where(eq('a')).by('salary').by(select('row').select('salary')).select('a').group().by('salary').by(values('gender').fold()).order(local).by(values, desc)"
找到author为何月所写的book，且该book与另一个book有关系。,"g.V().has('author', 'name', '何月').out('write').as('b').out('relates').as('c').select('c')"
查询id为24的点的id,"g.V().has('id', 24).values('id')"
"请帮我查找所有与吴强存在认识关系的person,person与person存在支付关系的点,返回这些点的性别","g.V().has('name', '吴强').out('knows').hasLabel('person').out('pay').hasLabel('person').values('gender')"
"查询名为杜若涵的goods或seller,以及与其有关的buyer,并返回杜若涵的name和这些buyer的name","g.V().hasLabel('goods', 'seller').has('name', '杜若涵').bothE().otherV().hasLabel('buyer').project('a_name', 'b_name').by(select(all, 'a').unfold().values('name')).by(values('name'))"
"用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询所有名为艺术学院的,薪资为空的伙伴,返回这些伙伴的名字,和边的源点id","g.V().has('name', '艺术学院').outE('partner').as('e').inV().has('salary', null).project('b_name', 'e_srcId').by('name').by(select('e').values('srcId'))"
帮我查询所有和事项ISSUE-120之间有属于关系的仓库,"g.V().hasLabel('issue').has('name', 'ISSUE-120').outE('belong').inV().hasLabel('repository')"
"使用列为age,id,name, 数据为(29,78,'陈伟'),(76,48,'郑思琪'),(52,75,'何若涵'),(99,3,'周思思')的子查询作为输入表, 源点的name等于输入表name,请帮我查找195个prescription Prescription_454和Prescription_145,共同的partner","g.withSideEffect('p', [['age':29,'id':78,'name':'陈伟'],['age':76,'id':48,'name':'郑思琪'],['age':52,'id':75,'name':'何若涵'],['age':99,'id':3,'name':'周思思']]).V().hasLabel('prescription').as('a').where(and(__.select('a').values('name').is(within(select('p').unfold().values('name'))), __.select('a').values('name').is(eq('Prescription_454')))).outE('partner').inV().as('b').inE('partner').outV().as('c').hasLabel('prescription').has('name', 'Prescription_145').select('b').limit(195)"
查询名为周若涵的点认识的person,"g.V().has('name', '周若涵').out('knows').hasLabel('person')"
"以(166,'吴雪','male')作为请求表数据,属性分别为height,name,gender, 源点的gender等于输入表gender,查找名为陈宏的点cancel的orders","g.withSideEffect('p', [['height': 166, 'name': '吴雪', 'gender': 'male']]).V().has('gender', select('p').unfold().values('gender')).has('name', '陈宏').outE('buyer_cancel_orders').inV().hasLabel('orders')"
找出好视影院和横店影院作为电影院标签的共同朋友列表。,"g.V().has('cinema', 'name', '好视影院').out('friend').as('b').in('friend').has('cinema', 'name', '横店影院').select('b').values('name')"
"以623作为请求点id, 以属性id作为相等条件,给出名为杜思思的点喜欢的帖子,并对这些点的id进行求和","g.withSideEffect('p', [623]).V().has('id', __.select('p')).has('name', '杜思思').outE('user_likes_post').inV().hasLabel('post').values('id').sum()"
"请帮我找出contain post Post_186的forum,和这些forum contain的user","g.V().hasLabel('post').has('name', 'Post_186').in('contain').as('b').out('contain').hasLabel('user').as('c').select('b', 'c')"
 找出所有与 'defaultName' 有存款关系的账户，以及这些账户之间的转账关系，并返回这些点的 'isBlock'。,"g.V().has('name', 'defaultName').outE('deposit').inV().hasLabel('account').outE('transfer').inV().hasLabel('account').values('isBlock')"
"查询2个和类型为用户的点有创造关系的事项,且和这些事项有属于关系的仓库",g.V().hasLabel('user').as('a').out('creates').hasLabel('issue').as('b').out('belong').hasLabel('repository').as('c').select('c').limit(2)
 回到韩国。,"g.V().hasLabel('country').has('name', '韩国')"
"给出person周雪拥有的账号, 令账号的身高等于person的年龄减76,令账号的名字等于账号的名字的数量,令person的价值等于账号的价值乘260, 返回person的薪资, 账号的价值","g.V().has('person', 'name', '周雪').as('a').outE('own').inV().hasLabel('account').as('b').sideEffect(select('b').property('height', select('a').values('age').is(neq(null)).by(constant(76)).math('_ - 76'))).sideEffect(select('b').property('name', select('b').values('name').count())).sideEffect(select('a').property('value', select('b').values('value').math('_ * 260'))).select('a', 'b').by('salary').by('value')"
"用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出类型为company的点,并根据id升序排列","g.V().hasLabel('company').order().by('id', asc)"
"以25, 65, 'nL'作为输入调用triangleCount函数,返回运算结果","g.call('triangleCount').with('minDegree', 25).with('maxDegree', 65).with('vertexLabel', 'nL').select('number')"
请帮我找出与doctor徐科和李国强都存在belong关系的点,"g.V().hasLabel('doctor').has('name', '徐科').outE('belong').inV().as('b').inE('belong').outV().hasLabel('doctor').has('name', '李国强').select('b')"
"请帮我找出和帖子Post_213有关系的用户或帖子或论坛,返回这些点的价值,创建时间,字数","g.V().has('post', 'name', 'Post_213').bothE().otherV().hasLabel(within('user', 'post', 'forum')).project('value', 'createTime', 'wordCount').by(values('value')).by(values('createTime')).by(values('wordCount'))"
帮我找一下李梅喜欢的电影评论,"g.V().has('person', 'name', '李梅').out('likes').hasLabel('comment').out('belong').hasLabel('film')"
"查找全部名为赵科的,createTime等于2034年01月18日或value为空的friend,返回这些friend的wordCount,和边的f1,f0","g.V().has('name', '赵科').outE('friend').as('e').inV().as('b').or(has('createTime', '2034-01-18'), hasNot('value')).select('b', 'e').by('wordCount').by(select('f1', 'f0').by('f1').by('f0'))"
"查找和大学有关联的公司节点,并根据其人数,名字分组,返回人数,名字,以及人数除759的值","g.V().hasLabel('university').bothE('cooperate').otherV().hasLabel('company').group().by(project('peopleNumber', 'name').by(values('peopleNumber')).by(values('name'))).by(project('peopleNumber', 'name', 'ratio').by(values('peopleNumber')).by(values('name')).by(math('_ / 759').by(values('peopleNumber')))).unfold().select(values)"
 查询徐宏朋友partner的publisher。,"g.V().has('publisher', 'name', '徐宏').out('relation').out('friend').out('partner')"
查询陈若涵伙伴的伙伴,"g.V().has('person', 'name', '陈若涵').out('partner').out('relation').out('partner')"
"帮我查询名为Order_120的点contain的全部goods,并对这些goods的category进行求和","g.V().has('name', 'Order_120').out('contain').hasLabel('goods').values('category').sum()"
"使用这个图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));返回全部学生以性别分组的身高, 根据身高从大到小排序","g.V().hasLabel('student').group().by('gender').by(values('height').fold()).order(local).by(values, desc)"
"以(188,2934,80),(188,6264,13),(178,5765,72),(178,5152,94)作为请求表数据,属性分别为height,salary,age, 以属性height作为相等条件,请帮我找出标签等于书的点,返回125个","g.inject([['height':188,'salary':2934,'age':80],['height':188,'salary':6264,'age':13],['height':178,'salary':5765,'age':72],['height':178,'salary':5152,'age':94]]).unfold().as('p').V().hasLabel('book').has('height', __.select('p').select('height')).limit(125)"
 返回的不是B座电影院上映的电影名称和它们的标签，而是它们的地址。,"g.V().hasLabel('cinema').has('address', neq('B座')).outE('releases').inV().hasLabel('film').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
返回被仓库FSM拥有的合并请求,"g.V().hasLabel('repository').has('name', 'FSM').outE('has').inV().hasLabel('pullRequest').as('b', 'a').select('a', 'b')"
 找出杜强所属的部门，再找出部门与医生之间的关系，返回相关点的ID。,"g.V().has('name', '杜强').outE('belong').inV().hasLabel('department').outE('has').inV().hasLabel('doctor').id()"
"请帮我查找全部和名为张科的学生有相关者关系,或有相关者的相关者关系的课程","g.V().hasLabel('student').has('name', '张科').outE('relation').inV().hasLabel('course').dedup().fold().union(__.identity(), __.outE('relation').inV().hasLabel('course').dedup()).unfold().dedup()"
"请帮我查找与名为孙建国和李思琪的点共同撰写的,标签为书的节点","g.V().has('name', '孙建国').outE('write').inV().hasLabel('book').as('b').inE('write').outV().has('name', '李思琪').select('b')"
"请帮我找出源点标签为公司,目标点标签为贷款,标签为贷款或公司或person的边","g.V().hasLabel('company').outE('loan', 'company', 'person').as('e').inV().hasLabel('loan').select('e')"
"请帮我查找id大于10,价值大于等于599,id大于等于25的节点","g.V().has('id', gt(10)).has('value', gte(599)).has('id', gte(25))"
"返回与合并请求PR-311有关,且与合并请求PR-237有关系的仓库节点","g.V().hasLabel('pullRequest').has('name', 'PR-311').as('a').outE('belong').inV().hasLabel('repository').as('b').inE('has').outV().hasLabel('pullRequest').has('name', 'PR-237').select('b')"
"根据价值,上次登录时间分组,计算id减53的值","g.V().project('a.id - 53', 'a.value', 'a.lastLoginTime').by(values('id').math('_ - 53')).by(values('value')).by(values('lastLoginTime')).group().by(select('a.value', 'a.lastLoginTime')).by(select('a.id - 53'))"
"以545,412,231,626,59作为请求点id, 以属性id作为相等条件,查询和person王思思有person_watch_film关系的电影,以及和电影院横店影院有cinema_releases_film关系的电影,将它们都返回","g.inject([545, 412, 231, 626, 59]).as('p').V().hasLabel('person').as('a').where(and(__.select('a').values('id').where(within(select('p'))), __.select('a').has('name', '王思思'))).outE('person_watch_film').inV().hasLabel('film').as('b').select('a', 'b').V().hasLabel('cinema').has('name', '横店影院').as('c').outE('cinema_releases_film').inV().hasLabel('film').as('d').select('a', 'b', 'c', 'd')"
"给出医生赵红的全部标签等于伙伴的边,并根据f1升序排列,返回114个","g.V().hasLabel('doctor').has('name', '赵红').outE('partner').order().by('f1', asc).limit(114).inV()"
找到同时被Bilibili和字节标记为城市的节点。,"g.V().has('name', 'Bilibili').outE('belong').inV().hasLabel('city').as('b').inE('belong').outV().has('name', '字节').select('b')"
 从大学到部门的边已经存在。,g.V().hasLabel('university').outE('has').as('e').inV().hasLabel('department').select('e')
 找出同时与标签为城市的点有属于关系、与这些城市有包含关系，以及与这些国家有属于关系的国家。,g.V().hasLabel('city').as('a').outE('belong').inV().hasLabel('country').as('b').outE('contain').inV().hasLabel('city').as('c').outE('belong').inV().hasLabel('country').as('d').select('d')
"以332,705,590,685作为请求点id, 以属性id作为相等条件,查找所有和loan defaultName之间有loan_deposit_account关系的account","g.inject([332, 705, 590, 685]).unfold().as('p').V().hasLabel('loan').has('id', __.select('p')).has('name', 'defaultName').outE('loan_deposit_account').inV().hasLabel('account').dedup()"
返回前123个满足条件value在478到538之间的country,"g.V().hasLabel('country').has('value', between(478, 538)).limit(123)"
"输入请求点id的列表975,985,885,92,27, 以属性id作为相等条件,返回159个person吴轩和陈宏,共同的相关者","g.withSideEffect('p', [975, 985, 885, 92, 27]).V().hasLabel('person').where(and(has('id', within('p')), has('name', '吴轩'))).as('a').outE('relation').as('e').inV().as('b').inE('relation').as('e2').outV().hasLabel('person').has('name', '陈宏').as('c').select('b').limit(159)"
"给出与course形势与政策存在belong关系,且与teacher何思思存在has关系的department节点，返回这些department的size,及course形势与政策的courseHour,及teacher何思思的name","g.V().has('course', 'name', '形势与政策').as('a').out('belong').hasLabel('department').as('b').in('has').has('teacher', 'name', '何思思').as('c').select('a', 'b', 'c').by('courseHour').by('size').by('name')"
"帮我查询名为Prescription_204的点contain的全部medicine,并对这些medicine的price进行求和","g.V().has('name', 'Prescription_204').out('contain').hasLabel('medicine').values('price').sum()"
返回film的2跳以内的环,"g.V().hasLabel('film').as('a').repeat(both().simplePath()).times(2).where(loops().is(2)).where(out().as('a')).path().by('id').project('a.id', 'b_id').by(limit(local, 1)).by(tail(local, 1))"
"帮我查询名为Spark的软件,以及与其有关的公司,并返回Spark的价值和这些公司的id","g.V().hasLabel('software').has('name', 'Spark').bothE().otherV().hasLabel('company').project('a.value', 'b.id').by(select('a').values('value')).by(values('id'))"
"输入请求点id的列表414, 以属性id作为相等条件,帮我查询名为Order_106的订单,以及与其有关的商品,并返回Order_106的名字和这些商品的名字","g.withSideEffect('p', [414]).V().hasLabel('orders').has('id', within('p')).has('name', 'Order_106').bothE().otherV().hasLabel('goods').project('a_name', 'b_name').by(select('a').by('name')).by('name')"
"查找名为SprintBoot的person或公司或软件,以及与其有关的公司,并返回SprintBoot的是否开源和这些公司的价值","g.V().has('name', 'SprintBoot').hasLabel(within('person', 'company', 'software')).bothE().otherV().hasLabel('company').project('a.openSource', 'b.value').by(select('a').values('openSource')).by(values('value'))"
"请帮我找出类型是prescription的点,返回78个",g.V().hasLabel('prescription').limit(78)
"请帮我查找大学的三角的环,边label为合作, 并返回这些点的id","g.V().hasLabel('university').as('a').outE('cooperate').inV().as('b').outE('cooperate').inV().as('c').where(__.out('cooperate').as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"找出所有和名为韩月的医生有伙伴关系,或有伙伴的伙伴关系的处方","g.V().hasLabel('doctor').has('name', '韩月').bothE('partner').bothV().hasLabel('prescription').dedup()"
找出与国家英国有关系的城市的面积,"g.V().has('country', 'name', '英国').bothE().otherV().hasLabel('city').values('area')"
"以(275,'百度贴吧',2006-01-25),(54,'推特',2032-10-04),(953,'中国诗词论坛',2017-11-27),(770,'推特',2018-03-16)作为请求表数据,属性分别为peopleNumber,name,createTime, 源点的createTime等于输入表createTime,帮我查询forum推特contain的post,被其他forum contain的数量","g.withSideEffect('p', [['peopleNumber': 275, 'name': '百度贴吧', 'createTime': '2006-01-25'], ['peopleNumber': 54, 'name': '推特', 'createTime': '2032-10-04'], ['peopleNumber': 953, 'name': '中国诗词论坛', 'createTime': '2017-11-27'], ['peopleNumber': 770, 'name': '推特', 'createTime': '2018-03-16']]).V().hasLabel('forum').as('a').where(and(__.select('a').values('createTime').is(within(__.select('p').unfold().values('createTime'))), __.select('a').values('name').is(eq('推特')))).outE('forum_contain_post').inV().hasLabel('post').as('b').inE('forum_contain_post').outV().hasLabel('forum').as('c').select('c').dedup().count()"
 找出与teacher节点关联的course节点，按名称分组并返回名称。,g.V().hasLabel('teacher').bothE('teach').otherV().hasLabel('course').values('name').groupCount().by(__.identity()).select(values).unfold().select(keys)
 找出与韩宏和陈强有关联的65个人。,"g.V().has('name', '韩宏').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '陈强').select('b').limit(65)"
返回被软件Calcite使用的软件,"g.V().has('software', 'name', 'Calcite').as('b').outE('uses').inV().hasLabel('software').as('a').select('a', 'b')"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));查询类型为city_belong_country,且满足条件f1为false且srcId在8到54之间的边","g.E().hasLabel('city_belong_country').has('f1', false).has('srcId', between(8, 54))"
给出前187个满足条件身高是151或身高小于等于189或性别不是famale的读者,"g.V().hasLabel('reader').or(has('height', 151), has('height', lte(189)), has('gender', neq('famale'))).limit(187)"
找出与名为张宏的人有朋友关系，或者有朋友的朋友关系的人。,"g.V().has('person', 'name', '张宏').bothE('friend').bothV().simplePath().by(T.id).dedup().hasLabel('person')"
"返回95个和label为city的点有contain关系的university,且和这些university有belong关系的city",g.V().hasLabel('city').out('contain').hasLabel('university').out('belong').hasLabel('city').limit(95)
"查询和country越南有关的university,再查询和越南contain的其他city,返回它们","g.V().has('country', 'name', '越南').as('a').bothE().otherV().hasLabel('university').as('b').select('a').outE('contain').otherV().hasLabel('city').as('c').select('a', 'b', 'c')"
"返回id为3的点的身高,性别","g.V().has('id', 3).project('height', 'gender').by('height').by('gender')"
找出所有与被标记为'person'的节点有家庭关系的'person'节点，以及与这些节点有家庭关系的所有其他'person'节点。,g.V().hasLabel('person').as('a').out('family').hasLabel('person').as('b').out('family').hasLabel('person').as('c').out('family').hasLabel('person').as('d').select('d')
"查找和事项ISSUE-239有关的仓库,称为X,再查找和这个X有关联的其他合并请求,以及和X有关联的用户","g.V().has('issue', 'name', 'ISSUE-239').as('a').bothE().otherV().hasLabel('repository').as('b').bothE().otherV().hasLabel('pullRequest').as('c').select('b').bothE().otherV().hasLabel('user').as('d').select('a', 'b', 'c', 'd')"
 找出与书《呐喊》有写作关系的作者。,"g.V().hasLabel('book').has('name', '呐喊').inE('write').outV().dedup()"
请帮我查找id为6的author有关的reader的relation，再查找与reader相关的partner,"g.V().has('author', 'id', '6').as('a').bothE().otherV().hasLabel('reader').as('b').bothE('relation').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
 找出名为滴滴的公司点，并返回这些点的人数和ID。,"g.V().hasLabel('company').has('name', '滴滴').project('peopleNumber', 'id').by('peopleNumber').by('id')"
"根据salary,height,name分组,计算salary减7890乘age乘199减7896的最大值","g.V().hasLabel('a').group().by(project('salary', 'height', 'name').by('salary').by('height').by('name')).by(values('salary', 'age').math('(salary - 7890) * age * 199 - 7896').max())"
查询所有名为横店影院的点上映的电影,"g.V().has('name', '横店影院').outE('releases').inV().hasLabel('film')"
请帮我找出所有与订单相关的订单，以及取消这些订单的其他买家。,"g.V().hasLabel('orders').has('id', '26').bothE().otherV().hasLabel('orders').as('b').inE('cancel').outV().hasLabel('buyer').as('c').select('b', 'c')"
"输入请求点id的列表219, 源点的id等于输入表id,查找19个名为周强的点认识的标签为person的节点,且节点名字不是韩梅","g.withSideEffect('p', [[219]]).V().as('a').where(and(__.select('a').values('id').is(within(select('p').unfold())), __.select('a').values('name').is(eq('周强')))).outE('person_knows_person').inV().as('b').hasLabel('person').where(__.select('b').values('name').is(neq('韩梅'))).select('b').limit(19)"
"查询id为110的点的身高,id,年龄","g.V().has('id', 110).project('height', 'id', 'age').by('height').by('id').by('age')"
请帮我查找所有与作家赵强有关系的作家的名字,"g.V().has('author', 'name', '赵强').both().hasLabel('author').values('name')"
"查找和label为论坛的点有包含关系的用户,且和这些用户有喜欢关系的帖子,且和这些帖子有拥有关系的标签",g.V().hasLabel('forum').as('a').out('contain').hasLabel('user').as('b').out('likes').hasLabel('post').as('c').out('has').hasLabel('tag').as('d').select('d')
查询前3个类型为friend的边,g.E().hasLabel('friend').limit(3)
"请帮我查找所有和名为字节的公司有相关者关系,或有相关者的相关者关系的软件","g.V().has('company', 'name', '字节').bothE('relation').bothV().hasLabel('software').dedup()"
"找出所有id为64的买家关联的卖家,和以咨询关系关联了这些卖家的其他买家","g.V().hasLabel('buyer').has('id', 64).as('a').bothE().otherV().hasLabel('seller').as('b').inE('consult').otherV().hasLabel('buyer').as('c').select('b', 'c')"
获取与用户ID为72的处方相关的用户的朋友，然后获取与该用户相关的朋友。,"g.V().has('prescription', 'id', '72').as('a').bothE().otherV().hasLabel('user').as('b').bothE('friend').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
帮我查询被person徐国强支付的person,"g.V().hasLabel('person').has('name', '徐国强').as('b').outE('pay').inV().hasLabel('person').as('a').select('a', 'b')"
"输入表的列为id,height,gender, 数据为(50,163,'famale'),(52,175,'male'),(37,183,'famale'), 以属性height作为相等条件,查询person的2跳的环","g.withSideEffect('p', [[50, 163, 'famale'], [52, 175, 'male'], [37, 183, 'famale']]).V().hasLabel('person').as('a').where(__.select('a').values('height').is(within(__.select('p').unfold().project('id', 'height', 'gender').by(__.limit(1)).by(__.limit(2)).by(__.limit(3)).select('height')))).both().as('b').both().where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"返回113个名为XiaoHu的点转账的label为账号的节点,且其名字不是Zeus或名字不是XiaoHu","g.V().has('name', 'XiaoHu').outE('transfer').inV().hasLabel('account').has('name', without('Zeus', 'XiaoHu')).limit(113)"
"给出所有和课程点有属于关系的部门节点,且边满足条件权重小于等于190,目标部门节点id等于38","g.V().hasLabel('course').as('a').outE('belong').has('weight', lte(190)).as('e').inV().hasLabel('department').has('id', 38).as('b').select('b')"
找出全部与软件Geaflow有关系的公司的人数,"g.V().hasLabel('software').has('name', 'Geaflow').bothE().otherV().hasLabel('company').values('peopleNumber')"
我想找到名为Prescription_410的处方,"g.V().hasLabel('prescription').has('name', 'Prescription_410')"
"帮我查询与company蚂蚁集团存在employee关系,且与person徐梅存在knows关系的person节点，返回这些person的id,age,height,及company蚂蚁集团的peopleNumber,及person徐梅的gender","g.V().has('company', 'name', '蚂蚁集团').as('a').out('employee').as('b').in('knows').has('person', 'name', '徐梅').as('c').select('a', 'b', 'c').by('peopleNumber').by(values('id', 'age', 'height')).by('gender')"
"帮我查询与买家黄思思有关,且与买家黄红有关系的卖家节点","g.V().has('buyer', 'name', '黄思思').bothE('consult').bothV().hasLabel('seller').bothE('ask').bothV().has('buyer', 'name', '黄红').select('seller')"
 请帮我查找孙宏写的书籍，并统计与其他书籍的相关数量。,"g.V().has('author', 'name', '孙宏').out('write').in('relates').count()"
"帮我查询与贷款有关系的person节点,且person节点的年龄不是12,并返回这些person的age的平均值减50的平均值,以及person的年龄加年龄的最小值","g.V().hasLabel('loan').as('a').outE().as('e').inV().hasLabel('person').has('age', neq(12)).as('b').select('b').values('age').fold().as('ages').select('ages').mean().sack(assign).by(constant(50)).math('_ - sack').mean().as('result1').select('ages').math('_ + _').min().as('result2').select('result1', 'result2')"
请帮我查找和仓库Flink有2度关系的仓库,"g.V().has('repository', 'name', 'Flink').repeat(bothE().otherV().simplePath()).times(2).hasLabel('repository').dedup()"
"找出全部和作家吴月有关系的作家或编辑或书,返回这些点的id,id","g.V().has('author', 'name', '吴月').bothE().otherV().hasLabel(within('author', 'publisher', 'book')).project('b.id', 'b.id').by(id()).by(id())"
查询属于广州的城市所在的国家，返回该国家包含的城市的面积、价值和人口数量。,"g.V().has('city', 'name', '广州').outE('belong').inV().hasLabel('country').outE('contain').inV().hasLabel('city').project('area', 'value', 'peopleNumber').by('area').by('value').by('peopleNumber')"
"查找大学重庆大学拥有的部门,以及拥有这些部门的大学, 令部门的id等于大学的id对1取余的和, 返回大学(a)的名字,部门(b)的价值,大学(c)的价值","g.V().hasLabel('university').has('name', '重庆大学').as('a').outE('has').inV().hasLabel('department').as('b').inE('has').outV().hasLabel('university').as('c').select('a', 'b', 'c').by('name').by('value').by('value').project('a_name', 'b_value', 'c_value').by(select('a')).by(select('b')).by(select('c'))"
查询全部与person韩强有关系的公司的价值,"g.V().has('person', 'name', '韩强').bothE().otherV().hasLabel('company').values('value')"
"用如下schema的图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));给出和person马建国有person_own_account关系的账号,再给出以person_invest_company关系关联了马建国的公司","g.V().has('person', 'name', '马建国').as('a').outE('person_own_account').inV().as('b').select('a').inE('person_invest_company').outV().as('c').select('a', 'b', 'c')"
"给出被书计算机网络认识的书,和计算机网络关联的书","g.V().hasLabel('book').has('name', '计算机网络').as('b').in('knows').as('a').out('relates').as('c').select('a', 'b', 'c')"
"输入表的列为age,id,salary, 数据为(70,14,9921),(65,2,4624),(16,37,8955), 以属性age作为相等条件,查询所有prescription以weight,createTime分组的id, 根据id从大到小排序","g.inject([['age':70,'id':14,'salary':9921],['age':65,'id':2,'salary':4624],['age':16,'id':37,'salary':8955]]).as('p').unfold().as('row').select('row').by(__.values('age')).as('age_val').V().hasLabel('prescription').as('a').where(eq('a')).by('age').by('age_val').select('a').group().by(__.project('weight','createTime').by(__.values('weight')).by(__.values('createTime'))).by(__.values('id').fold()).select(values).unfold().order().by(desc)"
"用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询与company微软有关系的software的id","g.V().hasLabel('company').has('name', '微软').bothE().otherV().hasLabel('software').values('id')"
 请帮我查询王雪和赵月这两个buyer的共同朋友节点。,"g.V().has('buyer', 'name', '王雪').out('friend').as('b').in('friend').has('buyer', 'name', '赵月').select('b').values('name')"
请帮我查找和person周梅之间有喜欢关系的person,"g.V().hasLabel('person').has('name', '周梅').outE('likes').inV().hasLabel('person')"
"帮我查询93个名为蚂蚁集团的点employee的类型为person的节点,且其height为空或name等于陈若涵","g.V().has('name', '蚂蚁集团').outE('employee').inV().hasLabel('person').where(or(hasNot('height'), has('name', '陈若涵'))).limit(93)"
"帮我查询191个名为Order_156的点包含的标签为商品的节点,且节点类别等于书籍且id大于65","g.V().has('name', 'Order_156').out('contain').hasLabel('goods').has('category', '书籍').has('id', gt(65)).limit(191)"
"用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查询全部与读者有关系的读者节点,且读者节点的名字是马建聪,并返回这些点的年龄对年龄取余的数量,以及薪资除3142的最大值","g.V().hasLabel('reader').as('a').outE().inV().hasLabel('reader').has('name', '马建聪').as('b').select('b').project('age_mod', 'salary_div').by(values('age').math('_ / _').by(constant(1)).by(values('age'))).by(values('salary').math('_ / 3142')).select(values).fold().project('count_age_mod', 'max_salary_div').by(count(local)).by(max(local))"
"输入请求点id的列表902, 源点的id等于输入表id,帮我查询前62个性别不等于male的学生","g.withSideEffect('p', [[902]]).V().hasLabel('student').as('a').where(and(__.as('a').values('id').is(eq(__.select('p').unfold().select('id'))), __.as('a').values('gender').is(neq('male')))).select('a').limit(62)"
查询与医生张国强有诊断关系的1跳以内的环,"g.V().hasLabel('doctor').has('name', '张国强').as('a').outE('diagnose').inV().as('b').where(__.out().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"请帮我查找标签为大学的点,返回59个",g.V().hasLabel('university').limit(59)
返回person韩思琪关联的person节点认识的person,"g.V().hasLabel('person').has('name', '韩思琪').outE('relates').inV().hasLabel('person').outE('knows').inV().hasLabel('person')"
请帮我找出所有包含'CSDN'的帖子，以及这些帖子中与标签存在'has'关系的点，并返回这些点的名称。,"g.V().has('name', 'CSDN').out('contain').hasLabel('post').out('has').values('name')"
"请帮我查找认识person陈科的person,和这些person属于的公司","g.V().has('person', 'name', '陈科').in('knows').hasLabel('person').as('b').out('belong').hasLabel('company').as('c').select('b', 'c')"
"查询id为155的person关联的person,和以关联关系关联了这些person的其他person","g.V().has('person', 'id', 155).bothE().otherV().hasLabel('person').as('b').inE('relates').otherV().hasLabel('person').as('c').select('b', 'c')"
"帮我查询94个名为杜建国的点投资的标签等于公司的节点,且其人数不为空","g.V().has('name', '杜建国').outE('invest').inV().hasLabel('company').has('peopleNumber', neq(null)).limit(94)"
"给出名为郑雪的点的,name不等于何科的friend,返回这些friend的salary,和边的f0,f1","g.V().has('name', '郑雪').outE('friend').as('e').inV().has('name', neq('何科')).as('b').select('b', 'e').by(values('salary')).by(project('f0', 'f1').by(values('f0')).by(values('f1')))"
请帮我找出全部标签为person的点,g.V().hasLabel('person')
"帮我查询属于国家英国的城市,和这些城市属于的国家","g.V().hasLabel('country').has('name', '英国').in('belong').hasLabel('city').as('b').out('belong').hasLabel('country').as('c').select('b', 'c')"
"查询9个和类型为评论的点有属于关系的电影,且和这些电影有拥有关系的标签",g.V().hasLabel('comment').as('a').out('belong').hasLabel('film').as('b').out('has').hasLabel('tag').as('c').select('c').limit(9)
 找出与李雪有关且购买鞋子的订单。,"g.V().has('buyer', 'name', '李雪').as('a').outE('cancel').inV().hasLabel('orders').as('b').outE('contain').inV().has('goods', 'name', '鞋子').select('b')"
"根据salary,gender,height分组,计算salary的最小值减3197的值",g.V().hasLabel('a').group().by('salary').by('gender').by('height').by(__.values('salary').min()).select(values).unfold().project('result').by(__.math('_ - 3197'))
请帮我找出所有源点标签是公司，目标点标签是贷款和申请的边。,g.V().hasLabel('company').outE('apply').as('e').inV().hasLabel('loan').select('e')
"给出公司美团雇佣的person,被其他person认识的数量","g.V().has('company', 'name', '美团').out('employee').as('b').in('knows').as('c').select('c').count()"
"用如下schema的图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出全部与prescription Prescription_201有关系的user的height","g.V().has('prescription', 'name', 'Prescription_201').both().hasLabel('user').values('height')"
"帮我查询所有id为13的商品关联的订单,和以创造关系关联了这些订单的其他买家","g.V().has('goods', 'id', 13).bothE().otherV().hasLabel('orders').as('b').inE('creates').otherV().hasLabel('buyer').as('c').select('b', 'c')"
"给定图的schema如下:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询与大学复旦大学有关,且与教师韩思思有关系的部门节点","g.V().has('university', 'name', '复旦大学').out('university_has_department').as('b').in('department_has_teacher').has('teacher', 'name', '韩思思').select('b')"
"查询和买家韩思琪有关系的买家或订单,返回这些点的id,价值,销量","g.V().has('buyer', 'name', '韩思琪').bothE().otherV().hasLabel(within('buyer', 'orders')).project('id', 'value', 'sellerNumber').by(id()).by(values('value')).by(values('sellerNumber'))"
"帮我查询存款person徐梅拥有的账号,的贷款","g.V().has('person', 'name', '徐梅').outE('own').inV().hasLabel('account').as('b').inE('deposit').outV().hasLabel('loan').as('c').select('b', 'c')"
"请帮我找出person的三角的环,边label为认识, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('knows').inV().as('b').outE('knows').inV().as('c').where(__.inE('knows').outV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
请帮我找出与医生徐若涵有关联的处方，以及被徐若涵诊断过的病人。,"g.V().hasLabel('doctor').has('name', '徐若涵').as('a').outE('creates').inV().hasLabel('prescription').as('b').select('a').inE('diagnose').outV().hasLabel('patient').as('c').select('a', 'b', 'c')"
"找出标签等于pullRequest,名为PR-382的点,返回这些点的changeFileNumber","g.V().hasLabel('pullRequest').has('name', 'PR-382').values('changeFileNumber')"
返回和person李强之间有支付关系的person,"g.V().hasLabel('person').has('name', '李强').outE('pay').inV().hasLabel('person')"
"给定图的schema如下:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询17个部门内科和耳鼻喉科,共同的相关者","g.V().has('department', 'name', '内科').out('relation').as('b').in('relation').has('department', 'name', '耳鼻喉科').select('b').limit(17)"
"输入请求点id的列表915, 以属性id作为相等条件,查询seller马宏的全部friend,的srcId乘101的值","g.withSideEffect('p', [[915]]).V().hasLabel('seller').has('id', __.select('p').unfold()).has('name', '马宏').outE('friend').project('result').by(__.select('srcId').math('_ * 101'))"
"请帮我找出名为王宏的点创造的事项,并对这些事项的创建时间进行求和","g.V().has('name', '王宏').outE('creates').inV().hasLabel('issue').values('createTime').sum()"
查询person李伟创造的评论节点属于的电影,"g.V().hasLabel('person').has('name', '李伟').out('creates').hasLabel('comment').out('belong').hasLabel('film')"
请帮我找出医生源头和部门目标，且类型为归属关系的边。,g.V().hasLabel('doctor').outE('belong').as('e').inV().hasLabel('department').select('e')
"返回id为98的城市有关的公司的伙伴, 再返回和公司有关系的伙伴","g.V().has('city', 'id', 98).as('a').bothE().otherV().hasLabel('company').as('b').bothE('partner').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"以694,657,74,250作为请求点id, 以属性id作为相等条件,给出与city巴黎有关,且与company Bilibili有关系的university节点","g.withSideEffect('p', [694, 657, 74, 250]).V().hasLabel('city').has('id', within('p')).has('name', '巴黎').outE('city_contain_university').inV().hasLabel('university').as('b').outE('university_cooperate_company').inV().hasLabel('company').has('name', 'Bilibili').select('b')"
 找出与大众影院有发行关系的电影，以及与复仇者联盟有标签关联的标签，返回它们。,"g.V().has('cinema', 'name', '大众影院').as('a').outE('releases').as('e').inV().as('b').V().has('film', 'name', '复仇者联盟').as('c').outE('has').as('e2').inV().as('d').select('a', 'b', 'c', 'd')"
 找出杜思思和张若涵中，卖家朋友节点类型的共同朋友。,"g.V().has('seller', 'name', '杜思思').out('friend').as('b').in('friend').has('seller', 'name', '张若涵').select('b').values('name')"
"查询与名为Comment_356和Comment_264的点共同belong的,label为film的节点","g.V().has('name', 'Comment_356').out('belong').hasLabel('film').as('b').in('belong').has('name', 'Comment_264').select('b')"
 请找出与陈建聪有薪酬关系的人，以及与陈建聪有认识关系的人。,"g.V().has('person', 'name', '陈建聪').as('a').outE('pay').inV().as('b').select('a').inE('knows').outV().as('c').select('a', 'b', 'c')"
"根据value分组,计算id的求和值除id减786的值",g.V().hasLabel('a').group().by('value').by(values('id').sum().math('_ / id - 786'))
"查询PR-425的点属于的仓库,然后查询PR-425被拥有的仓库,一起返回","g.V().has('name', 'PR-425').as('a').outE('belong').inV().hasLabel('repository').as('b').select('a').inE('has').outV().hasLabel('repository').as('c').select('a', 'b', 'c')"
"给出105个和类型是学生的点有选择关系的课程,以及和这些课程有属于关系的部门",g.V().hasLabel('student').as('a').outE('selects').as('e').inV().hasLabel('course').as('b').outE('belong').as('e2').inV().hasLabel('department').as('c').select('c').limit(105)
 返回同时引用了书《呐喊》和《罪与罚》的书的节点，包括它们的名字、类别、ID、《呐喊》的页码以及《罪与罚》的名字。,"g.V().has('book', 'name', '呐喊').as('a').outE('refers').inV().hasLabel('book').as('b').inE('refers').outV().has('book', 'name', '罪与罚').as('c').select('a', 'b', 'c').by('wordCount').by(values('name', 'category', 'id')).by('name').project('a.wordCount', 'b.name', 'b.category', 'b.id', 'c.name').by(select('a')).by(select('b').select('name')).by(select('b').select('category')).by(select('b').select('id')).by(select('c'))"
"帮我查询和repository有关联的pullRequest节点,并根据其createTime分组,返回createTime,以及changeFileNumber加417的最小值",g.V().hasLabel('repository').bothE('has').otherV().hasLabel('pullRequest').group().by('createTime').by(values('changeFileNumber').math('_ + 417').min())
"给出89个年龄小于52或性别等于famale,且身高的最大值小于45的person,根据名字升序排列","g.V().hasLabel('person').has('age', lt(52)).or().has('gender', 'famale').has('height', lt(45)).order().by('name', asc).limit(89)"
"给出teacher马建聪teach的course,被其他teacher teach的数量","g.V().has('teacher', 'name', '马建聪').outE('teach').inV().hasLabel('course').inE('teach').outV().hasLabel('teacher').where(neq('马建聪')).count()"
返回与用户相关的帖子节点，并按语言进行分组。,g.V().hasLabel('user').as('a').bothE('publish').as('e').otherV().hasLabel('post').as('b').select('b').values('lang').group().by(identity()).by(count())
 找出与标签为'公司'的点有员工关系的17个人，并找出与这些人有关联的软件。,g.V().hasLabel('company').out('employee').hasLabel('person').out('commits').hasLabel('software').limit(17)
 查询所有处方笺的合作伙伴，或合作伙伴的合作伙伴。,g.V().hasLabel('prescription').outE('partner').inV().outE('partner').inV().dedup()
"使用列为gender,age,id, 数据为('male',39,3),('male',46,53)的子查询作为输入表, 源点的age等于输入表age,返回id为105的person有关的person的同事, 再返回和person有关系的朋友","g.inject(['male', 39, 3], ['male', 46, 53]).as('p').select('p').unfold().as('p_age').select(values).unfold().skip(1).limit(1).as('age_val').V().hasLabel('person').has('age', __.select('age_val')).has('id', '105').as('a').bothE().otherV().hasLabel('person').as('b').outE('person_colleague_person').otherV().as('c').select('b').outE('person_friend_person').otherV().as('d').select('a', 'b', 'c', 'd')"
"给出被person张科提交的软件,和张科购买的软件","g.V().hasLabel('person').has('name', '张科').as('b').outE('buy').inV().hasLabel('software').as('c').select('b').inE('commits').outV().hasLabel('software').as('a').select('a', 'b', 'c')"
找出所有标记为'person'且由徐若涵和李雪共同支付的节点。,"g.V().has('name', '徐若涵').outE('pay').inV().hasLabel('person').as('b').inE('pay').outV().has('name', '李雪').select('b')"
"查找仓库Tugraph的所有类型为伙伴的边,并根据f0从小到大排列,返回86个","g.V().has('repository', 'name', 'Tugraph').outE('partner').order().by('f0', asc).limit(86).inV()"
"返回belong issue ISSUE-239 belong的repository,的pullRequest","g.V().hasLabel('issue').has('name', 'ISSUE-239').outE('belong').inV().hasLabel('repository').as('b').inE('belong').outV().hasLabel('pullRequest').as('c').select('b', 'c')"
"请帮我查找与person王宏存在父母关系,且与person黄科存在父母关系的person节点，返回这些person的id,及person王宏的名字,及person黄科的id","g.V().has('person', 'name', '王宏').as('a').out('parent').as('b').in('parent').has('person', 'name', '黄科').as('c').select('a', 'b', 'c').by('name').by('id').by('id')"
"输入请求点id的列表567, 源点的id等于输入表id,查询id为71的person关联的person,和以knows关系关联了这些person的其他person","g.withSideEffect('p', [567]).V().hasLabel('person').has('id', '71').bothE().otherV().hasLabel('person').as('b').inE('knows').otherV().hasLabel('person').as('c').select('b', 'c')"
找出韩伟和陈建聪共同的朋友列表，这些朋友被标记为用户。,"g.V().has('user', 'name', '韩伟').out('friend').as('b').in('friend').has('user', 'name', '陈建聪').select('b').values('name')"
找出前48个满足条件价值小于等于22的大学,"g.V().hasLabel('university').has('value', lte(22)).limit(48)"
"找出标签等于读者,名为李国强的点,返回这些点的id,薪资,身高","g.V().hasLabel('reader').has('name', '李国强').project('id', 'salary', 'height').by(id()).by(values('salary')).by(values('height'))"
"请帮我找出与名为ISSUE-95和ISSUE-96的点共同属于的,类型为仓库的节点","g.V().has('name', 'ISSUE-95').outE('belong').inV().hasLabel('repository').as('b').inE('belong').outV().has('name', 'ISSUE-96').select('b')"
帮我查询所有名为华为的节点申请的账号,"g.V().has('name', '华为').outE('apply').inV().hasLabel('account')"
"输入请求点id的列表999,385, 以属性id作为相等条件,请帮我找出person徐宏 watch的film,返回film has的tag的id加80的值 ","g.inject([999, 385]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('name', '徐宏').as('a').outE('person_watch_film').as('e').inV().hasLabel('film').as('b').outE('film_has_tag').as('e2').inV().hasLabel('tag').as('c').select('c').by('id').math('_ + 80')"
"查询公司Bilibili创造的软件, 令软件的id等于软件的是否开源的最小值, 返回公司的id, 软件的星数","g.V().has('company', 'name', 'Bilibili').as('a').outE('creates').inV().hasLabel('software').as('b').project('a_id', 'b_stars').by(select('a').values('id')).by(select('b').values('stars')).dedup()"
 请帮我查找和赵建聪有亲戚关系的人。,"g.V().has('person', 'name', '赵建聪').outE('relation').inV().hasLabel('person').range(1, 2).values('name')"
"返回咨询买家吴思思咨询的卖家,的买家","g.V().hasLabel('buyer').has('name', '吴思思').outE('consult').inV().hasLabel('seller').as('b').inE('consult').outV().hasLabel('buyer').as('c').select('b', 'c')"
查询前103个标签等于恋人的边,g.E().hasLabel('lover').limit(103)
"请帮我查找课程大学英语属于的部门,以及属于这些部门的课程, 令课程的课时等于课程的课时,令部门的名字等于课程的价值加271的平均值,令课程的名字等于部门的价值, 返回课程(a)的价值,部门(b)的大小,课程(c)的价值","g.V().hasLabel('course').has('name', '大学英语').as('a').outE('belong').inV().hasLabel('department').as('b').inE('belong').outV().hasLabel('course').as('c').select('a', 'b', 'c').by('value').by('size').by('value')"
"找出和标签为论坛的点有包含关系的用户,以及和这些用户有发布关系的帖子,以及和这些帖子有拥有关系的标签",g.V().hasLabel('forum').as('a').out('contain').hasLabel('user').as('b').out('publish').hasLabel('post').as('c').out('has').hasLabel('tag').as('d').select('d')
"调用KHOP函数,以'qh', 'QL', 'Io'作为输入,返回运算结果","g.call(""KHOP"").with(""arg0"", ""qh"").with(""arg1"", ""QL"").with(""arg2"", ""Io"").select(""id"", ""kValue"")"
"用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));给出与编辑韩建聪和李思琪都存在publisher_publish_book关系的点","g.V().has('publisher', 'name', '韩建聪').out('publisher_publish_book').as('b').in('publisher_publish_book').has('publisher', 'name', '李思琪').select('b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部与person徐思思有关系的person的性别","g.V().has('person', 'name', '徐思思').bothE().otherV().hasLabel('person').values('gender')"
"请帮我查找和用户马科有关的事项,再请帮我查找和马科创造的其他合并请求,返回它们","g.V().hasLabel('user').has('name', '马科').as('a').bothE().as('e').otherV().hasLabel('issue').as('b').select('a').outE('creates').as('e2').inV().hasLabel('pullRequest').as('c').select('a', 'b', 'c')"
查找被person马梅关联的person,"g.V().hasLabel('person').has('name', '马梅').outE('relates').inV().as('b').outE('relates').inV().as('a').select('a', 'b')"
"请帮我找出名为华为和阿里的,类型为company的点公共的relation节点的名单","g.V().has('company', 'name', '华为').outE('relation').inV().as('b').inE('relation').outV().has('company', 'name', '阿里').select('b').values('name')"
 查找与《孤城》相关的作家，再查找这些作家引用过的其他书籍，返回它们。,"g.V().hasLabel('book').has('name', '孤城').as('a').bothE().otherV().hasLabel('author').as('b').select('a').outE('refers').otherV().hasLabel('book').as('c').select('a', 'b', 'c')"
找出郑轩所有的部门，然后找出郑轩所在的部门，将两者合并并返回。,"g.V().has('name', '郑轩').as('a').outE('belong').inV().hasLabel('department').as('b').select('a').inE('has').outV().hasLabel('department').as('c').select('a', 'b', 'c')"
找出所有类型为goods的点，并按照category从低到高排序。,"g.V().hasLabel('goods').order().by('category', Order.asc)"
"以864,562,338作为请求点id, 以属性id作为相等条件,查找类型为部门的点,并根据id升序排列","g.inject([864, 562, 338]).unfold().as('p').V().hasLabel('department').has('id', __.select('p')).order().by('id', asc)"
"查询名为越南的公司或大学,以及与其有关的公司,并返回越南的名字和这些公司的名字","g.V().has('name', '越南').hasLabel(within('company', 'university')).bothE().otherV().hasLabel('company').project('a_name', 'b_name').by(select('a').values('name')).by(values('name')).as('a').select('a')"
找出前91个类型是属于的边,g.E().hasLabel('belong').limit(91)
请帮我找出与Prescription_181和Prescription_409这两个点都包含在其中，且类型为medicine的所有节点。,"g.V().has('name', 'Prescription_181').out('contain').hasLabel('medicine').as('b').in('contain').has('name', 'Prescription_409').select('b')"
"给出全部订单以价值,id分组的价格, 根据价格从小到大排序","g.V().hasLabel('orders').group().by(union(values('value'), values('id')).fold()).by(values('price').fold()).order(local).by(values, asc)"
"查找类型为用户,名为杜若涵的点,返回这些点的性别,身高,年龄","g.V().hasLabel('user').has('name', '杜若涵').project('gender', 'height', 'age').by(values('gender')).by(values('height')).by(values('age'))"
查询所有名为李若涵的点教的课程,"g.V().has('name', '李若涵').outE('teach').inV().hasLabel('course')"
找出名字不为'苹果'，销量不大于661.96，且ID不为52的96个商品，并按名字升序排序。,"g.V().hasLabel('goods').has('id', neq(52)).has('name', neq('苹果')).has('sellerNumber', lte(661.96)).order().by('name', asc).limit(96)"
 找出同时满足以下条件的个人：他们与标签为'person'的节点有认识关系，并且他们属于与这些个人相关的公司，并且这些公司与软件有关联。,g.V().hasLabel('person').as('a').outE('knows').as('e').inV().hasLabel('person').as('b').outE('belong').as('e2').inV().hasLabel('company').as('c').outE('creates').as('e3').inV().hasLabel('software').as('d').select('d')
帮我查询全部与person赵轩有关系的person的id,"g.V().hasLabel('person').has('name', '赵轩').bothE().otherV().hasLabel('person').id()"
id减0的值,"g.V().has('id', 0).project('id_minus_0').by(values('id').math('_ - 0'))"
"请帮我查找和公司腾讯有关的国家,称为X,再请帮我查找和这个X有关联的其他国家,以及和X有关联的大学","g.V().has('company', 'name', '腾讯').as('a').bothE().otherV().hasLabel('country').as('b').bothE().otherV().hasLabel('country').as('c').select('b').bothE().otherV().hasLabel('university').as('d').select('a', 'b', 'c', 'd')"
查找被论坛天涯论坛包含的用户,"g.V().hasLabel('forum').has('name', '天涯论坛').as('b').outE('contain').inV().hasLabel('user').as('a').select('a', 'b')"
"用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查找满足条件价值在287到769之间,价值为空且名字不是其他的节点","g.V().has('value', between(287, 769)).has('value', null).has('name', neq('其他'))"
"以'XL', 33, 95作为输入调用triangleCount函数,返回number","g.withSideEffect('a', ['XL', 33, 95]).call('triangleCount').with('a', 'a').select('number')"
"查找与医生杜轩存在属于关系,且与医生杜思思存在拥有关系的部门节点，返回这些部门的名字,id,权重,及医生杜轩的年龄,及医生杜思思的id","g.V().hasLabel('doctor').has('name', '杜轩').as('a').outE('belong').inV().hasLabel('department').as('b').inE('has').outV().hasLabel('doctor').has('name', '杜思思').as('c').select('a', 'b', 'c').by('age').by(values('name', 'id', 'weight')).by('id')"
"返回名为王梅和陈梅的,label为医生的点公共的伙伴节点的名单","g.V().has('doctor', 'name', '王梅').as('a').outE('partner').inV().as('b').inE('partner').outV().has('doctor', 'name', '陈梅').as('c').select('b').values('name')"
"请帮我找出与论坛百度贴吧存在包含关系,且与帖子Post_496存在发布关系的用户节点，返回这些用户的身高,薪资,id,及论坛百度贴吧的名字,及帖子Post_496的字数","g.V().has('forum', 'name', '百度贴吧').as('a').outE('contain').inV().hasLabel('user').as('b').inE('publish').outV().has('post', 'name', 'Post_496').as('c').select('a', 'b', 'c').by('name').by(values('height', 'salary', 'id').fold()).by('wordCount')"
"使用列为name,id,age, 数据为('赵科',16,51)的子查询作为输入表, 源点的age等于输入表age,查询前121个标签为patient_accept_prescription的边","g.withSideEffect('p', [['name': '赵科', 'id': 16, 'age': 51]]).V().has('age', __.select('p').unfold().select('age')).outE('patient_accept_prescription').limit(121)"
找出与buyer徐若涵和吴伟都存在consult关系的点,"g.V().has('buyer', 'name', '徐若涵').out('consult').as('b').in('consult').has('buyer', 'name', '吴伟').select('b')"
"输入请求点id的列表112,688,864, 源点的id等于输入表id,请帮我查找类型为comment_belong_film,以及满足条件权重在108.58到123.26之间的边","g.inject([112, 688, 864]).unfold().as('p').V().has('id', __.select('p')).as('a').outE('comment_belong_film').has('weight', between(108.58, 123.26)).as('e').select('e')"
给出名为马红的节点认识的person,"g.V().has('name', '马红').outE('knows').inV().hasLabel('person')"
"请帮我找出公司微软申请的贷款,以及还款这些贷款的账号","g.V().hasLabel('company').has('name', '微软').as('a').outE('apply').as('e').inV().hasLabel('loan').as('b').inE('repay').as('e2').outV().hasLabel('account').as('c').select('b', 'c')"
找出与32个人物标签相关的评论，这些评论与电影有关，并且这些评论还具有'likes'关系。同时，这些评论也与电影有关，即它们具有'belongs'关系。,g.V().hasLabel('person').as('a').outE('likes').as('e').inV().hasLabel('comment').as('b').outE('belong').as('e2').inV().hasLabel('film').as('c').select('c').limit(32)
"请帮我查找名为短袖的买家或订单,以及与其有关的买家,并返回短袖的类别和这些买家的id","g.V().has(label, within('buyer', 'orders')).has('name', '短袖').bothE().otherV().hasLabel('buyer').project('category', 'id').by(select('a').values('category')).by(values('id'))"
"返回所有名为Sam的,语言等于rust的伙伴,返回这些伙伴的权重,和边的源点id,f0","g.V().has('name', 'Sam').outE('partner').as('e').inV().has('lang', 'rust').as('b').select('b', 'e').by('weight').by('srcId').by('f0')"
 找出张轩和周伟的共同朋友，共有17个。,"g.V().has('person', 'name', '张轩').outE('friend').inV().as('b').inE('friend').outV().has('person', 'name', '周伟').select('b').dedup().limit(17)"
"以(56,20,8459),(15,1,7809),(37,67,5715),(62,91,1518)作为请求表数据,属性分别为id,age,salary, 以属性age作为相等条件,查询全部author以salary分组的salary, 根据salary从大到小排序","g.withSideEffect('p', [[56,20,8459],[15,1,7809],[37,67,5715],[62,91,1518]]).V().hasLabel('author').as('a').where(__.select('a').values('age').is(__.select('p').unfold().select('age'))).values('salary').group().by(identity()).select(keys).order().by(desc)"
"请帮我找出92个账号Geaflow123和Light,共同的伙伴","g.V().hasLabel('account').has('name', 'Geaflow123').as('a').outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().hasLabel('account').has('name', 'Light').as('c').select('b').limit(92)"
"查询和person郑建国有关的film,称为X,再查询和这个X有关联的其他tag,以及和X有关联的tag","g.V().hasLabel('person').has('name', '郑建国').as('a').bothE().otherV().hasLabel('film').as('b').bothE().otherV().hasLabel('tag').as('c').select('b').bothE().otherV().hasLabel('tag').as('d').select('a', 'b', 'c', 'd')"
返回与名为'数学学院'的部门有关联关系，或者具有关联关系的学生。,"g.V().has('department', 'name', '数学学院').out('relation').hasLabel('student').dedup()"
"找出类型是person,名为周思琪的点,返回这些点的身高,名字","g.V().hasLabel('person').has('name', '周思琪').project('a.height', 'a.name').by('height').by('name')"
请帮我找出全部和person李伟之间有likes关系的person,"g.V().hasLabel('person').has('name', '李伟').outE('likes').inV().hasLabel('person').dedup()"
请帮我查找id的个数大于6473且名字不等于赵红的节点,g.V().where(values('id').count().is(gt(6473))).where(values('name').is(neq('赵红')))
找出person郑国强和黄梅都拥有的点,"g.V().has('person', 'name', '郑国强').outE('own').inV().as('b').inE('own').outV().has('person', 'name', '黄梅').select('b')"
"请帮我查找类型是publish,以及targetId为138,f0在612到968之间,或weight不等于138.43的边","g.E().hasLabel('publish').or(and(has('targetId', 138), has('f0', between(612, 968))), has('weight', neq(138.43)))"
"返回id为40的country有关的university的friend, 再返回和university有关系的relation","g.V().has('country', 'id', 40).as('a').bothE().otherV().hasLabel('university').as('b').bothE('friend').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"找出全部源点满足条件价格在68到95之间,价格不为空,或名字是悲惨世界,目标点满足条件id小于等于3或类别不等于科普,且类别不是文学,且类型为引用的边","g.V().has('price', between(68, 95)).has('price', neq(null)).or().has('name', '悲惨世界').as('a').outE('refers').as('e').inV().has('id', lte(3)).or().has('category', neq('科普')).has('category', neq('文学')).as('b').select('e')"
"帮我查询软件使用的软件,返回其源点的价值加214减57的求和值,以及目标点的id加83的最小值","g.V().hasLabel('software').as('a').outE('uses').as('e').inV().hasLabel('software').as('b').select('a', 'b').by('value').by('id').project('sum_value', 'min_id').by(__.select('a').sum()).by(__.select('b').min()).select(values).project('sum_expr', 'min_expr').by(__.select('sum_value').math('_ + 214 - 57')).by(__.select('min_id').math('_ + 83'))"
 查询与书节点相关的节点，按价格、ID分组，返回价格、ID。,"g.V().hasLabel('book').as('b').bothE('publish').otherV().hasLabel('publisher').as('a').select('b').group().by(project('price', 'id').by('price').by('id')).by('id')"
"返回全部和repository点有has关系的issue节点,且边满足条件f0在565到716之间,目标issue节点id大于等于1","g.V().hasLabel('repository').as('a').outE('has').has('f0', between(565, 716)).as('e').inV().hasLabel('issue').has('id', gte(1)).as('b').select('b')"
"查找类型是认识,以及f1为true的边","g.E().hasLabel('knows').has('f1', true)"
" 找出名为韩宏的person,并返回它们的age、height和name。","g.V().hasLabel('person').has('name', '韩宏').project('age', 'height', 'name').by('age').by('height').by('name')"
"请帮我找出197个和标签为person的点有watch关系的film,并且和这些film有has关系的tag",g.V().hasLabel('person').out('watch').hasLabel('film').out('has').hasLabel('tag').limit(197)
"请帮我找出71个名为南京大学的点属于的类型为城市的节点,且节点面积小于20732","g.V().has('name', '南京大学').outE('belong').inV().hasLabel('city').has('area', lt(20732)).limit(71)"
"帮我查询全部帖子以id,创建时间,价值分组的创建时间, 根据创建时间从大到小排序","g.V().hasLabel('post').group().by(project('id', 'createTime', 'value').by('id').by('createTime').by('value')).by(values('createTime').fold()).order(local).by(values, desc)"
 搜索腾讯公司。,"g.V().hasLabel('company').has('name', '腾讯')"
"输入请求点id的列表822,519, 源点的id等于输入表id,请帮我找出student的1度以内的环","g.withSideEffect('p', [822, 519]).V().hasLabel('student').has('id', within('p')).as('a').out().as('b').where(__.select('b').out().as('c').where(eq('a')).select('c')).select('a', 'b').by('id').by('id')"
 请找出与孙强有家庭关系的亲属，并找出与孙强有恋爱关系的人。,"g.V().has('person', 'name', '孙强').as('a').outE('family').inV().as('b').select('a').inE('lover').outV().as('c').select('a', 'b', 'c')"
"返回与账号Geaflow123存在还款关系,且与账号LX001存在存款关系的贷款节点，返回这些贷款的金额,及账号Geaflow123的上次登录时间,及账号LX001的上次登录时间","g.V().hasLabel('account').has('name', 'Geaflow123').as('a').outE('repay').inV().hasLabel('loan').as('b').inE('deposit').outV().hasLabel('account').has('name', 'LX001').as('c').select('a', 'b', 'c').by('lastLoginTime').by('amount').by('lastLoginTime')"
"输入请求点id的列表58,170,200,797,863, 以属性id作为相等条件,帮我查询所有和software Zookeeper有关系的person节点,返回这些点的salary","g.withSideEffect('p', [58, 170, 200, 797, 863]).V().hasLabel('software').where(__.values('id').is(within('p'))).has('name', 'Zookeeper').bothE().otherV().hasLabel('person').values('salary')"
 请找出所有与类型为'account'的点有转移关系的账户，并找出与这些账户有转移关系的其他账户。,g.V().hasLabel('account').as('a').out('transfer').hasLabel('account').as('b').out('transfer').hasLabel('account').as('c').select('c').limit(188)
返回以认识关系关联了person徐思琪的person,"g.V().hasLabel('person').has('name', '徐思琪').inE('knows').outV().dedup()"
"给出名为loan_67的贷款或person,以及与其有关的贷款,并返回loan_67的id和这些贷款的金额","g.V().hasLabel(within('loan', 'person')).has('name', 'loan_67').bothE().otherV().hasLabel('loan').project('a_id', 'b_amount').by(select('a').id()).by(values('amount')).as('a')"
查询city为杭州的partner的partner的partner,"g.V().has('city', 'name', '杭州').out('partner').out('partner').out('partner')"
"返回id为81的点的人数,价值","g.V().has('id', 81).project('peopleNumber', 'value').by(values('peopleNumber')).by(values('value'))"
请帮我找出滴滴和字节同时申请的贷款节点,"g.V().has('name', '滴滴').outE('apply').inV().hasLabel('loan').as('b').inE('apply').outV().has('name', '字节').select('b')"
返回XiaoHu和188个account BIN之间的关系,"g.V().hasLabel('account').has('name', 'BIN').outE('relation').inV().as('b').inE('relation').outV().hasLabel('account').has('name', 'XiaoHu').select('b').limit(188)"
"帮我查询所有名为杜月的,weight不为空的relation,返回这些relation的createTime,和边的weight,targetId,f1","g.V().has('name', '杜月').outE('relation').as('e').inV().has('weight', neq(null)).select('e').project('b.createTime', 'e.weight', 'e.targetId', 'e.f1').by(select('e').inV().values('createTime')).by(values('weight')).by(values('targetId')).by(values('f1'))"
 Sam和韩思琪有105个共同的合作伙伴。,"g.V().has('user', 'name', 'Sam').outE('partner').inV().as('b').inE('partner').outV().has('user', 'name', '韩思琪').select('b').limit(105)"
"查询全部源点label为医生,边label为属于,以及满足条件目标点id大于124的边","g.V().hasLabel('doctor').outE('belong').as('e').inV().has('id', gt(124)).select('e')"
"给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找与名为孤城和白夜行的点共同knows的,标签为book的节点","g.V().has('name', '孤城').out('knows').hasLabel('book').as('b').in('knows').has('name', '白夜行').select('b')"
"返回身高大于等于1943且年龄大于82的作家认识的作家的名称,以及这些作家 撰写的书的名称","g.V().hasLabel('author').has('height', gte(1943)).has('age', gt(82)).as('a').out('knows').hasLabel('author').as('b').out('write').hasLabel('book').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 帮我找找百度贴吧里被包含的帖子,"g.V().hasLabel('forum').has('name', '百度贴吧').outE('contain').inV().hasLabel('post').as('a').select('a').by().as('b').select('a', 'b')"
"用如下schema的图:CREATE GRAPH g ( Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找满足条件level为空或name不等于北京大学或level为空的节点","g.V().or(hasNot('level'), has('name', neq('北京大学')), hasNot('level'))"
"请帮我找出全部源点label为读者,边label为喜欢的边,返回这些边的weight的最大值加174.68的值,和f0乘700的值","g.V().hasLabel('reader').outE('likes').project('max_weight_plus', 'f0_times_700').by(__.values('weight').max().math('_ + 174.68')).by(__.values('f0').math('_ * 700'))"
找出以转账关系关联了账号Geaflow123的账号,"g.V().hasLabel('account').has('name', 'Geaflow123').inE('transfer').outV()"
"用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出公司腾讯的全部类型为相关者的边,并根据f0升序排列,返回108个","g.V().hasLabel('company').has('name', '腾讯').outE('relation').order().by('f0', asc).limit(108).inV()"
找出与少年闰土有关的书籍，并统计它们与其他书籍之间的关联数量。,"g.V().has('book', 'name', '少年闰土').out('relates').in('relates').where(neq('a')).dedup().count()"
"帮我查询性别不是famale且性别是male的用户喜欢的帖子的名称,以及这些帖子 拥有的标签的名称","g.V().hasLabel('user').has('gender', neq('famale')).has('gender', 'male').out('likes').hasLabel('post').as('b').out('has').hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
查找前115个标签为包含的边,g.E().hasLabel('contain').limit(115)
"以(324,'Post_445',2026-07-07),(91,'Post_347',2010-10-26),(498,'Post_108',2002-03-16),(820,'Post_479',1995-04-30)作为请求表数据,属性分别为wordCount,name,createTime, 以属性wordCount作为相等条件,给出以has关系关联了tag科幻的post","g.inject([['wordCount': 324, 'name': 'Post_445', 'createTime': '2026-07-07'], ['wordCount': 91, 'name': 'Post_347', 'createTime': '2010-10-26'], ['wordCount': 498, 'name': 'Post_108', 'createTime': '2002-03-16'], ['wordCount': 820, 'name': 'Post_479', 'createTime': '1995-04-30']]).as('p').flatMap(select('p')).as('row').select('row').by(select(values).unfold().range(0, 1)).as('wordCount').V().hasLabel('tag').has('wordCount', __.as('wordCount')).has('name', '科幻').inE('post_has_tag').outV().hasLabel('post').dedup()"
"找出标签为属于,以及满足条件源点id大于等于113的边","g.E().hasLabel('belong').has('srcId', gte(113))"
找出与79个账号类型的点有转账关系的账号，以及这些账号与其他账号之间的转账关系,g.V().hasLabel('account').as('a').outE('transfer').as('e').inV().hasLabel('account').as('b').outE('transfer').as('e2').inV().hasLabel('account').as('c').select('c').limit(79)
"查找源点类型是buyer,目标点类型是orders,类型是orders的边","g.E().hasLabel('orders').where(and(__.outV().hasLabel('buyer'), __.inV().hasLabel('orders')))"
返回与ID为71的教师相关的教师，再返回这些教师的关系人。,"g.V().has('teacher', 'id', '71').as('a').bothE().otherV().hasLabel('teacher').as('b').bothE('relation').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"输入请求点id的列表575,446,711,18,11, 以属性id作为相等条件,请帮我查找标签为buyer_cancel_orders,并且f1不等于true或srcId在53到100之间或srcId为空的边","g.inject([575, 446, 711, 18, 11]).unfold().as('p').V().has('id', __.as('p')).as('a').outE('buyer_cancel_orders').where(or(has('f1', neq(true)), has('srcId', between(53, 100)), hasNot('srcId'))).as('e').select('e')"
"使用这个图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));查询名为Prescription_388的处方,以及与其有关的处方,并返回Prescription_388的创建时间和这些处方的id","g.V().has('prescription', 'name', 'Prescription_388').as('a').both().hasLabel('prescription').as('b').select('a', 'b').by('createTime').by('id')"
返回徐红作家,"g.V().hasLabel('author').has('name', '徐红')"
"查询person Amily relates的person,以及knows这些person的person, 令person(c)的age等于person(b)的id的数量减99,令person的height等于person的height的最大值, 返回person(a)的age,person(b)的name,person(c)的salary","g.V().has('person', 'name', 'Amily').as('a').outE('relates').inV().hasLabel('person').as('b').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c').by(values('age')).by(values('name')).by(project('salary', 'age').by(values('salary')).by(select('b').values('id').count().is(gt(0)).math('_ - 99')).select('salary', 'age').select('salary'))"
"以('西区','大众影院',33)作为请求表数据,属性分别为address,name,id, 源点的name等于输入表name,查询与film神探狄仁杰和泰坦尼克号都存在film_has_tag关系的点","g.withSideEffect('p', [['address': '西区', 'name': '大众影院', 'id': 33]]).V().hasLabel('film').has('name', '大众影院').where(__.has('name', '神探狄仁杰')).as('a').outE('film_has_tag').inV().as('b').where(__.inE('film_has_tag').outV().hasLabel('film').has('name', '泰坦尼克号')).select('b')"
请找出与作家李科和书孤城都有联系的读者节点，并返回他们的ID、年龄和薪资。,"g.V().has('author', 'name', '李科').outE().inV().hasLabel('reader').as('b').inE().outV().has('book', 'name', '孤城').select('b').project('id', 'age', 'salary').by(values('id')).by(values('age')).by(values('salary'))"
"根据名字,id,人数分组,计算人数除人数的值","g.V().group().by('name').by('id').by('peopleNumber').unfold().select(values).project('name', 'id', 'peopleNumber', 'division').by(select(keys).select('name')).by(select(keys).select('id')).by(select(keys).select('peopleNumber')).by(select(values).math('_ / _'))"
查询与reader韩红有关系的book的createTime,"g.V().has('reader', 'name', '韩红').bothE().otherV().hasLabel('book').values('createTime')"
id减50的值,g.V().hasLabel('a').project('id_minus_50').by(values('id').math('_ - 50'))
"查询被公司创造数量大于176的软件,记为relationCount,再查询这些软件创造的公司","g.V().hasLabel('software').as('a').project('a', 'relationCount').by(identity()).by(__.in('creates').hasLabel('company').id().sum()).select('a', 'relationCount').where(select('relationCount').is(gt(176))).select('a').out('creates').hasLabel('company')"
 查找70个与法国和越南有关联的公司节点。,"g.V().has('name', '法国').outE().inV().hasLabel('company').as('b').inE().outV().has('name', '越南').select('b').limit(70)"
"查找名为徐宏的医生,以及与其有关的药品,并返回徐宏的年龄和这些药品的类别","g.V().hasLabel('doctor').has('name', '徐宏').as('a').bothE().as('e').otherV().hasLabel('medicine').as('b').select('a', 'b').by('age').by('category')"
请帮我找出周科和张伟作为用户时，共同拥有的朋友列表。,"g.V().has('user', 'name', '周科').out('friend').as('b').in('friend').has('user', 'name', '张伟').select('b').values('name')"
获取与seller张轩有consult关系的所有buyer信息,"g.V().has('seller', 'name', '张轩').in('consult').hasLabel('buyer')"
帮我查询名为Prescription_149的处方,"g.V().hasLabel('prescription').has('name', 'Prescription_149')"
"查找48个和类型是卖家的点有回答关系的买家,以及和这些买家有咨询关系的卖家",g.V().hasLabel('seller').as('a').outE('ask').as('e').inV().hasLabel('buyer').as('b').outE('consult').as('e2').inV().hasLabel('seller').as('c').select('c').limit(48)
"请帮我查找与名为陈建国和杜伟的点共同投资的,label为公司的节点","g.V().has('name', '陈建国').as('a').outE('invest').inV().hasLabel('company').as('b').inE('invest').outV().has('name', '杜伟').as('c').select('b')"
"请帮我查找名为计算机体系结构和程序设计的,label为课程的点公共的相关者节点的名单","g.V().has('course', 'name', '计算机体系结构').outE('relation').inV().as('b').inE('relation').outV().has('course', 'name', '程序设计').select('b').values('name')"
按权重对处方进行分组，并按照降序排列权重。,"g.V().hasLabel('prescription').group().by('weight').order(local).by(keys, desc)"
查询与person赵轩有friend关系的3跳的环,"g.V().has('person', 'name', '赵轩').as('a').repeat(bothE('friend').otherV().simplePath()).times(3).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').id()).by(select('b').id())"
 请帮我查找和Comment_296相关的电影，并返回它们。另外，请帮我查找Comment_296所属的其他电影，也一并返回。,"g.V().has('comment', 'name', 'Comment_296').as('a').bothE().otherV().hasLabel('film').as('b').select('a').bothE('belong').otherV().hasLabel('film').as('c').select('a', 'b', 'c')"
 查询眼科部门中，与马国强患者有关的医生。,"g.V().hasLabel('department').has('name', '眼科').outE('has').inV().hasLabel('doctor').as('b').outE('diagnose').inV().hasLabel('patient').has('name', '马国强').select('b')"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询person郑若涵的所有parent,的f0加640乘920的值","g.V().has('person', 'name', '郑若涵').outE('person_parent_person').project('result').by(values('f0').math('(_ + 640) * 920'))"
"查询名为赵思思和黄红的,类型是person的点公共的朋友节点的名单","g.V().has('person', 'name', '赵思思').out('friend').as('b').in('friend').has('person', 'name', '黄红').select('b').values('name')"
id减13的值,"g.V().has('id', 13).project('result').by(values('id').math('_ - 13'))"
"给出包含公司腾讯的城市,和这些城市包含的大学","g.V().hasLabel('company').has('name', '腾讯').in('contain').as('b').out('contain').hasLabel('university').as('c').select('b', 'c')"
"请帮我查找被person孙雪喜欢的评论,和孙雪创造的评论","g.V().hasLabel('person').has('name', '孙雪').as('b').outE('likes').inV().hasLabel('comment').as('a').select('b').outE('creates').inV().hasLabel('comment').as('c').select('a', 'b', 'c')"
"以734,406,191作为请求点id, 源点的id等于输入表id,查询医生的伙伴,或其伙伴的伙伴","g.inject([734, 406, 191]).as('p').V().hasLabel('doctor').as('a').where(eq('p')).by('id').by().repeat(bothE('partner').otherV().simplePath()).times(2).emit().dedup().project('b').by()"
 查询黄强和赵强共同创造的点。,"g.V().has('user', 'name', '黄强').as('a').outE('creates').as('e').inV().as('b').inE('creates').as('e2').outV().has('user', 'name', '赵强').as('c').select('b')"
请帮我找出大学南京大学拥有的部门节点拥有的教师,"g.V().hasLabel('university').has('name', '南京大学').out('has').hasLabel('department').out('has').hasLabel('teacher')"
"以195,332,750作为请求点id, 源点的id等于输入表id,查询与city天津有关系的university的value","g.withSideEffect('p', [195, 332, 750]).V().hasLabel('city').has('id', within('p')).has('name', '天津').bothE().otherV().hasLabel('university').values('value')"
"帮我查询和person周月有关系的person,返回这些点的性别,薪资","g.V().has('person', 'name', '周月').bothE().otherV().hasLabel('person').project('gender', 'salary').by(values('gender')).by(values('salary'))"
请帮我找出所有卖家及其伙伴的伙伴,g.V().hasLabel('seller').as('a').outE('partner').inV().as('b').outE('partner').inV().as('c').select('c')
"查找教师徐思琪的所有相关者,的f0对739取余的值","g.V().hasLabel('teacher').has('name', '徐思琪').outE('relation').project('result').by(values('f0').math('_ % 739'))"
请帮我找出满足条件id小于等于86或id大于35或id不为空的节点,"g.V().or(has('id', lte(86)), has('id', gt(35)), has('id', neq(null)))"
"以933,296作为请求点id, 源点的id等于输入表id,请帮我找出和用户周思思有关的论坛,再请帮我找出和周思思user_publish_post的其他帖子,返回它们","g.withSideEffect('p', [933, 296]).V().hasLabel('user').where(__.values('id').is(within('p'))).has('name', '周思思').as('a').bothE().otherV().hasLabel('forum').as('b').select('a').outE('user_publish_post').inV().hasLabel('post').as('c').select('a', 'b', 'c')"
"帮我查询类型是账号的点,返回18个",g.V().hasLabel('account').limit(18)
请帮我找出与用户点相关的帖子节点，并按照它们的id、创建时间和价值进行分组，然后返回这些信息。,"g.V().hasLabel('user').bothE('likes').otherV().hasLabel('post').group().by(project('id', 'createTime', 'value').by('id').by('createTime').by('value')).select(values).unfold().project('b.id', 'b.createTime', 'b.value').by(select('id')).by(select('createTime')).by(select('value'))"
找到999感冒灵药品,"g.V().hasLabel('medicine').has('name', '999感冒灵')"
"帮我查询和person点有认识关系的person节点,且边满足条件源点id大于10,目标person节点年龄大于49","g.V().hasLabel('person').as('a').outE('knows').has('srcId', gt(10)).as('e').inV().hasLabel('person').has('age', gt(49)).as('b').select('b')"
查询所有和repository JavaGuid之间有has关系的issue,"g.V().hasLabel('repository').has('name', 'JavaGuid').out('has').hasLabel('issue')"
"输入请求点id的列表529,16,92,93, 源点的id等于输入表id,请帮我找出名为吴思思和杜宏的,标签为person的点公共的恋人节点的名单","g.inject([529, 16, 92, 93]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('name', '吴思思').as('a').outE('person_lover_person').inV().as('b').inE('person_lover_person').outV().hasLabel('person').has('name', '杜宏').as('c').select('b').values('name').dedup()"
"给出源点价值不为空,边类型是拥有,且满足条件源点id小于199的边,返回这些边的目标点id除目标点id的值","g.V().has('value', neq(null)).outE('has').has('srcId', lt(199)).project('result').by(values('targetId').math('_ / _'))"
找出以拥有关系关联了标签悬疑的电影,"g.V().hasLabel('tag').has('name', '悬疑').inE('has').outV().hasLabel('film')"
"请帮我找出全部源点salary不为空,age大于4,目标点name是ISSUE-325且id大于57,或status不等于Closed,且label为creates的边","g.E().hasLabel('creates').where(and(__.outV().and(has('salary', neq(null)), has('age', gt(4))), __.inV().or(and(has('name', 'ISSUE-325'), has('id', gt(57))), has('status', neq('Closed')))))"
查询与滴滴相关的公司，然后查询这些公司所在的城市，并将结果返回。,"g.V().has('company', 'name', '滴滴').as('a').bothE().as('e').otherV().hasLabel('company').as('b').select('a').outE('belong').as('e2').inV().hasLabel('city').as('c').select('a', 'b', 'c')"
"给出和名为徐梅的卖家有朋友关系,或有朋友的朋友关系的买家","g.V().hasLabel('seller').has('name', '徐梅').bothE('friend').otherV().hasLabel('buyer').dedup()"
查询前108个类型为朋友的边,g.E().hasLabel('friend').limit(108)
"用如下schema的图:CREATE GRAPH g ( Vertex university ( id int ID, name varchar, level int, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出名为Bilibili和蚂蚁集团的,类型是company的点公共的partner节点的名单","g.V().has('company', 'name', 'Bilibili').out('partner').as('b').in('partner').has('company', 'name', '蚂蚁集团').select('b').values('name')"
帮我查询所有名为阿里的点申请的贷款,"g.V().has('name', '阿里').outE('apply').inV().hasLabel('loan')"
 请帮我查找Bilibili和阿里共同创建的软件节点。,"g.V().has('name', 'Bilibili').outE('creates').inV().hasLabel('software').as('b').inE('creates').outV().has('name', '阿里').select('b')"
给出全部与issue ISSUE-390有关系的user的name,"g.V().hasLabel('issue').has('name', 'ISSUE-390').bothE().otherV().hasLabel('user').values('name')"
"查询account XXD transfer的account, 令account的name等于account的id对87取余的个数,令account(b)的value等于account(a)的value对38取余的最小值,令account(a)的isBlock等于account(b)的value乘value, 返回account(a)的isBlock, account(b)的name","g.V().has('account', 'name', 'XXD').as('a').outE('transfer').inV().hasLabel('account').as('b').select('a', 'b').by(__.project('isBlock', 'name').by(__.select('b').values('value').math('_ * _')).by(__.select('b').values('name'))).by(__.project('name', 'value').by(__.select('a').values('id').fold().project('count').by(__.unfold().math('_ % 87').dedup().count()).select('count')).by(__.select('a').values('value').fold().project('min').by(__.unfold().math('_ % 38').min()).select('min')))"
"请帮我找出id为178的pullRequest belong的repository, 并将repository有关的user的salary的个数赋值给repository的id, 接着查询repository的id小于178的repository has的issue","g.V().has('pullRequest', 'id', 178).out('belong').hasLabel('repository').as('b').sideEffect(select('b').property('id', select('b').both().hasLabel('user').values('salary').count())).where(select('b').values('id').is(lt(178))).out('has').hasLabel('issue').as('d').select('b', 'd').by('id').by()"
"给出源点label为buyer,目标点label为orders,label为buyer的边",g.V().hasLabel('buyer').outE('buyer').where(inV().hasLabel('orders'))
帮我查询全部类型为person的点,g.V().hasLabel('person')
"返回被person陈红认识的person,和陈红提交的软件","g.V().hasLabel('person').has('name', '陈红').as('b').outE('knows').inV().hasLabel('person').as('a').select('b').outE('commits').inV().hasLabel('software').as('c').select('a', 'b', 'c')"
 返回眼科部门中，与药品生理盐水有关系的节点，包括其名称、ID和地址。,"g.V().has('medicine', 'name', '生理盐水').outE().inV().hasLabel('department').as('b').inE().outV().has('department', 'name', '眼科').select('b').project('b.name', 'b.id', 'b.address').by(values('name')).by(values('id')).by(values('address'))"
"找出17个名为孙梅的点创造的标签等于事项的节点,且其状态为Closed","g.V().has('name', '孙梅').outE('creates').inV().hasLabel('issue').has('status', 'Closed').limit(17)"
"请帮我查找id为4的department has的teacher, 并将teacher有关的student的name的最大值赋值给teacher的salary, 接着查询teacher的salary小于4的teacher teach的course","g.V().has('department', 'id', 4).out('has').hasLabel('teacher').as('b').project('salary', 'd').by(__.select('b').coalesce(__.inE().hasLabel('has').outV().hasLabel('student').values('name').max(), __.constant(null))).by(__.select('b').filter(__.values('salary').is(lt(4))).out('teach').hasLabel('course')).select('salary', 'd')"
"查找从书少年闰土出发,经过标签等于引用的边,走1度到达的书点","g.V().has('book', 'name', '少年闰土').outE('refers').inV().hasLabel('book').dedup()"
"返回194个person何科和韩红,共同的朋友","g.V().hasLabel('person').has('name', '何科').outE('friend').inV().as('b').inE('friend').outV().hasLabel('person').has('name', '韩红').select('b').limit(194)"
"请帮我查找所有名为韩建聪的点的,id在7到24之间,价值为空的朋友,返回这些朋友的名字,和边的f1,权重,源点id","g.V().has('name', '韩建聪').outE('friend').as('e').inV().has('id', between(7, 24)).has('value', null).as('b').select('b', 'e').by('name').by(values('f1', 'weight', 'srcId'))"
"查询名为李伟的点关联的person,并对这些person的名字进行求和","g.V().has('name', '李伟').outE('relates').inV().hasLabel('person').values('name').sum()"
"请帮我找出名为谷歌的软件,以及与其有关的公司,并返回谷歌的价值和这些公司的规格","g.V().hasLabel('software').has('name', '谷歌').as('a').bothE().as('e').otherV().hasLabel('company').as('b').select('a', 'b').by('value').by('scale')"
"请帮我找出与仓库Tugraph有关,且与仓库Flink有关系的事项节点","g.V().has('repository', 'name', 'Tugraph').outE('has').inV().hasLabel('issue').as('b').inE('belong').outV().has('repository', 'name', 'Flink').select('b')"
"请帮我查找名为张宏和赵宏的,标签为卖家的点公共的伙伴节点的名单","g.V().has('seller', 'name', '张宏').outE('partner').inV().as('b').inE('partner').outV().has('seller', 'name', '赵宏').select('b').values('name')"
"返回和city东京有belong关系的country,再返回以belong关系关联了东京的country","g.V().has('city', 'name', '东京').as('a').outE('belong').inV().hasLabel('country').as('b').select('a').inE('belong').outV().hasLabel('country').as('c').select('a', 'b', 'c')"
获取Prescription_391中药品在其他处方中的数量,"g.V().hasLabel('prescription').has('name', 'Prescription_391').outE('contain').inV().hasLabel('medicine').inE('contain').outV().hasLabel('prescription').count()"
"用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询person韩强likes的comment,被其他person likes的数量","g.V().has('person', 'name', '韩强').outE('person_likes_comment').inV().hasLabel('comment').inE('person_likes_comment').outV().hasLabel('person').dedup().count()"
"查找全部和person点有支付关系的person节点,且边满足条件源点id的和等于33,目标person节点满足条件性别不等于famale","g.V().hasLabel('person').as('a').outE('pay').as('e').inV().hasLabel('person').has('gender', neq('famale')).as('b').select('a', 'e', 'b').by().by().by().where(__.select('e').unfold().values('srcId').sum().is(eq(33))).select('b')"
"给出与company微软有关,且与country中国有关系的city节点","g.V().hasLabel('company').has('name', '微软').bothE('belong').otherV().hasLabel('city').bothE('belong').otherV().hasLabel('country').has('name', '中国').as('c').select('c').bothE('belong').otherV().hasLabel('city').dedup()"
找出名为王梅且标签为person的人的年龄,"g.V().hasLabel('person').has('name', '王梅').values('age')"
"请帮我查找全部源点label为事项,目标点label为仓库,label为仓库或用户或合并请求的边","g.V().hasLabel('issue').outE('repository', 'user', 'pullRequest').as('e').inV().hasLabel('repository').select('e')"
返回所有category为film的点，并按照category从小到大排序。,"g.V().hasLabel('film').order().by('category', Order.asc)"
"查询全部和book计算机网络有关系的reader或book或publisher,返回这些点的id,id,price","g.V().hasLabel('book').has('name', '计算机网络').bothE().otherV().hasLabel(within('reader', 'book', 'publisher')).project('id', 'id', 'price').by(id()).by(id()).by(values('price'))"
"请帮我查找全部教师的相关者,或其相关者的相关者","g.V().hasLabel('teacher').out('relation').range(1, 2).dedup()"
"请帮我找出全部源点标签为用户,边标签为喜欢,且满足条件时间戳不等于2030年11月07日且时间戳不是2026年10月06日,目标点id小于74的边","g.V().hasLabel('user').outE('likes').has('timeStamp', neq('2030-11-07')).has('timeStamp', neq('2026-10-06')).where(outV().has('targetId', lt(74))).dedup()"
"以('famale',6824,74),('famale',7374,93)作为请求表数据,属性分别为gender,salary,id, 源点的id等于输入表id,给出height不为空或height为空,且id不为空的节点","g.withSideEffect('p', [['gender': 'famale', 'salary': 6824, 'id': 74], ['gender': 'famale', 'salary': 7374, 'id': 93]]).V().where(and(__.select('p').unfold().values('id').as('pid'), __.values('id').where(eq('pid')))).where(or(values('height').is(neq(null)), values('height').is(eq(null)))).where(values('id').is(neq(null)))"
"请帮我找出76个名为Sam的点购买的label为软件的节点,且其是否开源不等于true或名字等于Redis","g.V().has('name', 'Sam').outE('buy').inV().hasLabel('software').or(has('openSource', neq(true)), has('name', 'Redis')).limit(76)"
"以(65,5865,'male'),(49,6018,'famale'),(31,9767,'male'),(6,1588,'male')作为请求表数据,属性分别为age,salary,gender, 以属性age作为相等条件,返回182个名为李思思的点支付的label为person的节点,且其年龄大于等于70,id为空","g.withSideEffect('p', [['age':65,'salary':5865,'gender':'male'],['age':49,'salary':6018,'gender':'famale'],['age':31,'salary':9767,'gender':'male'],['age':6,'salary':1588,'gender':'male']]).V().as('a').where(and(__.select('a').values('age').is(within(__.select('p').unfold().values('age'))), __.select('a').values('name').is(eq('李思思')))).outE('person_pay_person').as('e').inV().as('b').hasLabel('person').where(and(__.select('b').values('age').is(gte(70)), __.select('b').values('id').is(eq(null)))).select('b').limit(182)"
 请帮我查找共同关联标签为'book'的节点，其中包括了名为'少年闰土'和'三体'的书籍。,"g.V().has('name', '少年闰土').outE('relates').inV().hasLabel('book').as('b').inE('relates').outV().has('name', '三体').select('b')"
返回所有从买家源点到订单目标点，且类型为创建的边。,g.V().hasLabel('buyer').outE('creates').hasLabel('orders').inV().path().by(elementMap()).unfold().limit(1).tail(1)
请帮我找出与杜建国和韩雪都有关联的189个标签节点,"g.V().has('name', '杜建国').outE().inV().hasLabel('tag').as('b').inE().outV().has('name', '韩雪').select('b').limit(189)"
 找出与软件节点相关的软件节点，按名称、评分、价值分组，并返回名称、评分、价值。,"g.V().hasLabel('software').as('a').bothE('uses').otherV().hasLabel('software').as('b').select('b').values('name', 'stars', 'value').group().by().by(count())"
"请帮我查找user张建国likes的repository,被其他pullRequest belong的数量","g.V().hasLabel('user').has('name', '张建国').outE('likes').inV().hasLabel('repository').inE('belong').outV().hasLabel('pullRequest').count()"
"查询标签为电影的点,返回55个",g.V().hasLabel('film').limit(55)
" 请问能否帮我查询与用户有关系的处方（prescription)节点，并且要求节点的名称不等于'Prescription_222',同时返回这些节点的体重除以体重取余再乘以体重的求和值，以及节点ID减去55的求和值。","g.V().hasLabel('user').as('a').outE().as('e').inV().hasLabel('prescription').has('name', neq('Prescription_222')).as('b').select('b').project('weight_expr', 'id_expr').by(values('weight').as('w').math('w % w * w')).by(values('id').math('_ - 55')).select(values).unfold().group().by(keys).by(select(values).sum()).select(values)"
查找所有与读者王建国有关系的读者的薪资,"g.V().has('reader', 'name', '王建国').both().hasLabel('reader').values('salary')"
找出与黄红作家有合作关系，或者有合作伙伴关系的书籍。,"g.V().has('author', 'name', '黄红').outE('partner').inV().hasLabel('book').dedup()"
"请帮我找出label为贷款,名为loan_32的点,返回这些点的id,金额,权重","g.V().hasLabel('loan').has('name', 'loan_32').project('id', 'amount', 'weight').by('id').by('amount').by('weight')"
"请帮我查找学生李建国选择的课程,以及选择这些课程的学生","g.V().hasLabel('student').has('name', '李建国').as('a').outE('selects').inV().hasLabel('course').as('b').inE('selects').outV().hasLabel('student').as('c').select('b', 'c')"
"返回标签为药品的点,返回198个",g.V().hasLabel('medicine').limit(198)
"请帮我找出所有源点标签等于买家,目标点标签等于卖家,标签等于买家或商品或订单的边","g.V().hasLabel('buyer').outE('buyer', 'goods', 'orders').as('e').inV().hasLabel('seller').select('e')"
"输入请求点id的列表594,482,787,795,643, 以属性id作为相等条件,查找33个名为周雪的点属于的类型是部门的节点,且节点地址不是西区","g.inject([594, 482, 787, 795, 643]).unfold().as('p').V().has('id', __.as('p')).has('name', '周雪').outE('doctor_belong_department').inV().hasLabel('department').has('address', neq('西区')).limit(33)"
"给定图的schema如下:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));返回满足条件名字为马克思原理,学分的平均值大于25且价值大于等于557的节点","g.V().hasLabel('course').has('name', '马克思原理').where(__.values('credit').mean().is(gt(25))).has('value', gte(557))"
"输入表的列为height,gender,age, 数据为(193,'male',49), 源点的gender等于输入表gender,返回读者的三角的环,边类型为reader_likes_book, 并返回这些点的id","g.withSideEffect('p', [['height':193, 'gender':'male', 'age':49]]).V().hasLabel('reader').has('gender', __.select('p').unfold().select('gender')).as('a').outE('reader_likes_book').inV().as('b').inE('reader_likes_book').outV().as('c').where(__.as('c').outE('reader_likes_book').inV().as('a')).select('a', 'b', 'c').by().by('id').by('id')"
"返回68个名为UME的点releases的标签等于film的节点,且节点name不是复仇者联盟,id为空","g.V().has('name', 'UME').outE('releases').inV().hasLabel('film').has('name', neq('复仇者联盟')).has('id', eq(null)).limit(68)"
"查询全部和名为郑若涵的作家有相关者关系,或有相关者的相关者关系的作家","g.V().has('author', 'name', '郑若涵').bothE('relation').otherV().hasLabel('author').union(identity(), bothE('relation').otherV().hasLabel('author')).dedup()"
"根据id分组,计算weight减656的最大值",g.V().hasLabel('a').group().by('id').by(values('weight').math('_ - 656').max())
"查询与person郑月有关系的person, 返回和这些person有关联的person的,id的最大值加95乘1824的值","g.V().has('person', 'name', '郑月').bothE().otherV().hasLabel('person').bothE().otherV().hasLabel('person').values('id').max().math('(_ + 95) * 1824')"
"请帮我找出city的relation,或其relation的relation",g.V().hasLabel('city').outE('relation').inV().optional(outE('relation').inV()).dedup()
"给出全部孙宏的点commits的software,然后给出孙宏被knows的person,一起返回","g.V().has('name', '孙宏').as('a').outE('commits').inV().hasLabel('software').as('b').select('a').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"找出和读者Alice有关的编辑,称为X,再找出和这个X有关联的其他读者,以及和X有关联的读者","g.V().has('reader', 'name', 'Alice').as('a').bothE().otherV().hasLabel('publisher').as('b').bothE().otherV().hasLabel('reader').where(neq('a')).as('c').select('b').bothE().otherV().hasLabel('reader').where(neq('a')).where(neq('c')).as('d').select('a', 'b', 'c', 'd')"
"请帮我找出和person周强有关的person,再请帮我找出和周强喜欢的其他person,返回它们","g.V().hasLabel('person').has('name', '周强').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('likes').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
查询前41个满足条件age不等于61的student,"g.V().hasLabel('student').has('age', neq(61)).limit(41)"
找出属于微软公司的城市，以及这些城市中其他大学的数量。,"g.V().has('company', 'name', '微软').out('belong').as('b').in('belong').hasLabel('university').as('c').select('b', 'c').by().count()"
"返回类型为university的点,返回49个",g.V().hasLabel('university').limit(49)
 Alan从起点出发，沿着类型为apply的边走1度，到达终点loan。,"g.V().hasLabel('person').has('name', 'Alan').outE('apply').inV().hasLabel('loan')"
"查询id为空或id等于74的书关联的书的名称,以及这些书 认识的书的名称","g.V().hasLabel('book').or(__.has('id', null), __.has('id', 74)).outE('relates').inV().hasLabel('book').as('b').outE('knows').inV().hasLabel('book').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"返回和电影复仇者联盟有拥有关系的标签,再返回以拥有关系关联了复仇者联盟的标签","g.V().hasLabel('film').has('name', '复仇者联盟').as('a').bothE('has').otherV().hasLabel('tag').as('b').select('a', 'b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查询person郑建国knows的person节点knows的person","g.V().has('person', 'name', '郑建国').out('person_knows_person').out('person_knows_person').dedup()"
"给出university的friend,或其friend的friend","g.V().hasLabel('university').out('friend').range(1, 2).dedup()"
"返回和person徐雪有同事关系的person,再返回以恋人关系关联了徐雪的person","g.V().has('person', 'name', '徐雪').as('a').outE('colleague').inV().hasLabel('person').as('b').select('a').inE('lover').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"请帮我查找全部与艺术学院存在拥有关系的教师,教师与课程存在教关系的点,返回这些点的学分","g.V().has('name', '艺术学院').out('has').hasLabel('teacher').out('teach').hasLabel('course').values('credit')"
"帮我查询person张伟购买的软件,被其他软件使用的数量","g.V().has('person', 'name', '张伟').out('buy').in('uses').count()"
查询与处方Prescription_435有关联，并且与患者李轩有关联的药品节点，返回它们的名字和价格。,"g.V().has('prescription', 'name', 'Prescription_435').outE().inV().has('medicine').as('b').inE().outV().has('patient', 'name', '李轩').select('b').values('name', 'price')"
"帮我查询源点年龄不等于22,边标签为支付,且满足条件源点id大于51或f1不等于true的边,返回这些边的targetId的平均值加目标点id的值","g.V().has('age', neq(22)).as('a').outE('pay').has('srcId', gt(51)).or().has('f1', neq(true)).as('e').inV().as('b').select('e').values('targetId').fold().as('targetIds').select('targetIds').unfold().mean().as('avg').select('targetIds').unfold().as('targetId').select('avg', 'targetId').by().by().math('_ + _')"
 找所有起点和终点都是人的标记为'喜欢'的边。,g.V().hasLabel('person').outE('likes').where(inV().hasLabel('person'))
"找出全部学生的朋友,或其朋友的朋友",g.V().hasLabel('student').out('friend').emit().repeat(__.out('friend')).times(2).dedup()
"输入请求点id的列表230,209, 以属性id作为相等条件,找出名为深圳的点contain的company,并对这些点的id进行求和","g.inject([230, 209]).unfold().as('p').V().has('id', __.as('p')).has('name', '深圳').outE('city_contain_company').inV().hasLabel('company').values('id').sum()"
"查找id为145的点的人数,名字","g.V().has('id', 145).project('peopleNumber', 'name').by('peopleNumber').by('name')"
获取帖子的相关人员，或者这些人员的联系人,"g.V().hasLabel('post').as('a').outE('relation').inV().range(1, 2).as('b').select('b')"
"查询全部源点label为person,边label为父母,以及f1不等于true的边","g.V().hasLabel('person').outE('parent').has('f1', neq(true)).elementMap()"
 找出物理学院中教授数据结构课程的老师。,"g.V().has('department', 'name', '物理学院').out('has').hasLabel('teacher').as('b').out('teach').has('course', 'name', '数据结构').select('b')"
查询所有与课程操作系统有关系的部门的名字,"g.V().has('course', 'name', '操作系统').bothE().otherV().hasLabel('department').values('name')"
查找与用户马宏和徐科都存在喜欢关系的点,"g.V().has('user', 'name', '马宏').out('likes').as('b').in('likes').has('user', 'name', '徐科').select('b')"
获取与名为'武汉'的城市有伙伴关系，或者有伙伴的伙伴关系的所有公司。,"g.V().has('city', 'name', '武汉').out('partner').hasLabel('company').fold().union(__.identity(), __.out('partner').hasLabel('company')).unfold().dedup()"
请查询与买家何若涵有创造关系，并包含商品手机的订单。返回这些订单的价格、价值以及买家何若涵的身高和商品手机的价格。,"g.V().has('buyer', 'name', '何若涵').as('a').outE('creates').inV().hasLabel('orders').as('b').inE('contain').outV().has('goods', 'name', '手机').as('c').select('a', 'b', 'c').by('height').by(values('price', 'value')).by('price')"
"以531作为请求点id, 以属性id作为相等条件,请帮我找出和公司有关联的软件节点,并根据其id分组,返回id,以及value的最小值减842的值","g.withSideEffect('p', [531]).V().hasLabel('company').has('id', select('p')).outE('company_creates_software').inV().hasLabel('software').group().by('id').by(values('value').min().math('_ - 842'))"
"帮我查询认识person张梅的person,和这些person支付的person","g.V().hasLabel('person').has('name', '张梅').inE('knows').outV().as('b').outE('pay').inV().as('c').select('b', 'c')"
"给出与公司微软有关,且与公司微软有关系的person节点","g.V().hasLabel('company').has('name', '微软').bothE('employee').otherV().hasLabel('person').where(bothE('belong').otherV().hasLabel('company').has('name', '微软')).dedup()"
 请帮我查找用户名为杜月，且标签为动作的帖子节点。,"g.V().hasLabel('user').has('name', '杜月').bothE('likes').otherV().hasLabel('post').bothE('has').otherV().hasLabel('tag').has('name', '动作').select('b')"
返回与账号Zeus和TheShy都存在还款关系的点,"g.V().has('account', 'name', 'Zeus').outE('repay').inV().as('b').inE('repay').outV().has('account', 'name', 'TheShy').select('b').dedup()"
请帮我找到名为Prescription_447的处方节点，并返回其id加76的值，以及权重对745取余的平均值。,"g.V().hasLabel('prescription').has('name', 'Prescription_447').project('id_plus_76', 'avg_weight_mod_745').by(values('id').math('_ + 76')).by(values('weight').math('_ % 745').mean())"
找出标签为department且同时包含耳鼻喉科和外科的partner节点列表。,"g.V().hasLabel('department').has('name', '耳鼻喉科').outE('partner').inV().as('b').inE('partner').outV().hasLabel('department').has('name', '外科').select('b').values('name')"
 请帮我找出39个身高在153到195之间的病人，按照ID从小到大排序。,"g.V().hasLabel('patient').has('height', between(153, 195)).order().by('id', asc).limit(39)"
 查询同时与郑月和张轩有喜欢关系的用户，返回这些用户的性别，姓名，郑月的年龄和张轩的年龄。,"g.V().has('person', 'name', '郑月').as('a').out('likes').hasLabel('person').as('b').in('likes').has('person', 'name', '张轩').as('c').select('a', 'b', 'c').by('age').by(values('gender', 'name')).by('age').project('a_age', 'b_gender', 'b_name', 'c_age').by(select('a')).by(select('b').select('gender')).by(select('b').select('name')).by(select('c'))"
"输入请求点id的列表260,431,170,604, 源点的id等于输入表id,查询115个和类型是patient的点有patient_accept_prescription关系的prescription,并且和这些prescription有prescription_contain_medicine关系的medicine","g.inject([260, 431, 170, 604]).unfold().as('p').V().hasLabel('patient').has('id', __.select('p')).as('a').outE('patient_accept_prescription').inV().hasLabel('prescription').as('b').outE('prescription_contain_medicine').inV().hasLabel('medicine').as('c').select('c').limit(115)"
帮我查一下LX001的账号,"g.V().hasLabel('account').has('name', 'LX001')"
帮我查询和卖家陈国强之间有回答关系的买家,"g.V().hasLabel('seller').has('name', '陈国强').outE('ask').inV().hasLabel('buyer')"
"帮我查询和标签古代有关的论坛,称为X,再帮我查询和这个X有关联的其他帖子,以及和X有关联的用户","g.V().has('tag', 'name', '古代').bothE().otherV().hasLabel('forum').as('a').bothE().otherV().hasLabel('post').as('c').select('a').bothE().otherV().hasLabel('user').as('d').select('a').as('b').select('a', 'b', 'c', 'd')"
 找周宏这个人。,"g.V().hasLabel('person').has('name', '周宏')"
"使用列为id,gender,name, 数据为(30,'famale','李若涵'),(19,'male','Amily'),(75,'male','李若涵'),(66,'male','马宏')的子查询作为输入表, 源点的name等于输入表name,请帮我查找与publisher李若涵有publisher_publish_book关系的2度的环","g.withSideEffect('p', [['id':30, 'gender':'famale', 'name':'李若涵'], ['id':19, 'gender':'male', 'name':'Amily'], ['id':75, 'gender':'male', 'name':'李若涵'], ['id':66, 'gender':'male', 'name':'马宏']]).V().hasLabel('publisher').as('a').where(and(__.values('name').is(within(select('p').unfold().values('name'))), __.values('name').is(eq('李若涵')))).outE('publisher_publish_book').inV().as('b').where(eq('a')).select('a', 'b').by('id').by('id')"
"请帮我查找和person点有relates关系的person节点,且边满足条件f0在751到923之间,目标person节点id在7到80之间","g.V().hasLabel('person').as('a').outE('relates').has('f0', between(751, 923)).as('e').inV().hasLabel('person').has('id', between(7, 80)).as('b').select('b')"
"查找id为157的person有关的person的家人, 再查找和person有关系的父母","g.V().hasLabel('person').has('id', 157).as('a').bothE().otherV().hasLabel('person').as('b').bothE().hasLabel('family').otherV().as('c').select('b').bothE().hasLabel('parent').otherV().as('d').select('a', 'b', 'c', 'd')"
给出满足条件name不等于枇杷糖浆或category不等于其他的节点,"g.V().has('name', neq('枇杷糖浆')).or().has('category', neq('其他'))"
 返回同时与person李伟和person何科有关联的person节点，包括它们的id、性别、薪水，以及person李伟的薪水、person何科的性别。,"g.V().has('person', 'name', '李伟').as('a').out('likes').hasLabel('person').as('b').in('knows').has('person', 'name', '何科').as('c').select('a', 'b', 'c').by('salary').by(values('id', 'gender', 'salary')).by('gender')"
"给出被用户创造数量大于198的事项,记为relationCount,再查询这些事项创造的合并请求","g.V().hasLabel('issue').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('creates').hasLabel('user').count()).unfold().as('a_with_count').select('relationCount').where(__.is(gt(198))).select('a_with_count').select('a').out('creates').hasLabel('pullRequest').dedup()"
"查找卖家吴宏拥有的商品,以及查看这些商品的买家, 令商品的身高等于买家的薪资,令商品的价值等于商品的价值, 返回卖家的薪资,商品的名字,买家的年龄","g.V().has('seller', 'name', '吴宏').as('a').outE('has').inV().hasLabel('goods').as('b').inE('look').outV().hasLabel('buyer').as('c').sideEffect(select('b').property('height', select('c').values('salary'))).select('a', 'b', 'c').by('salary').by('name').by('age')"
"帮我查询性别不是male或性别为famale的person支付的person的名称,以及这些person 认识的person的名称","g.V().hasLabel('person').has('gender', neq('male')).or(__.has('gender', 'famale')).as('a').outE('pay').as('e').inV().hasLabel('person').as('b').outE('knows').as('e2').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"根据id,age,salary分组,计算age对age取余除154的最大值","g.V().hasLabel('a').group().by(union(identity(), values('age'), values('salary')).fold()).by(values('age').as('age').math('age % age / 154').max())"
"查找被doctor creates数量大于162的prescription,记为relationCount,再查询这些prescription creates的prescription","g.V().hasLabel('prescription').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('creates').hasLabel('doctor').id().max()).unfold().as('a_with_count').select('relationCount').where(gt(162)).select('a_with_count').select('a').out('creates').hasLabel('prescription')"
"查询从处方Prescription_193出发,经过标签为包含的边,走1跳到达的药品点","g.V().hasLabel('prescription').has('name', 'Prescription_193').out('contain').hasLabel('medicine')"
 从外科部门出发，沿着has类型的边走2度，到达医生位置。,"g.V().has('department', 'name', '外科').repeat(out('has')).times(2).hasLabel('doctor')"
"根据createTime,value分组,计算value加719对id取余的最大值",g.V().hasLabel('a').group().by(both().by('createTime').by('value')).by(values('value').math('_ + 719 % id').max())
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));查找157个名为郑思琪的点likes的类型是person的节点,且其gender不是famale且height不为空","g.V().has('person', 'name', '郑思琪').outE('person_likes_person').inV().hasLabel('person').has('gender', neq('famale')).has('height').limit(157)"
查询与陈若涵有关的人，以及这些人被其他人认识的数量。,"g.V().has('person', 'name', '陈若涵').outE('relates').inV().hasLabel('person').as('b').inE('knows').outV().hasLabel('person').as('c').select('c').count()"
帮我查询与university四川大学有has关系的1度的环,"g.V().has('university', 'name', '四川大学').as('a').bothE('has').otherV().as('b').where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
返回与马雪的关联者相关的伙伴,"g.V().has('user', 'name', '马雪').out('relation').out('relation').out('partner').dedup()"
"帮我查询所有id为27的编辑关联的作家,和以认识关系关联了这些作家的其他作家","g.V().has('publisher', 'id', 27).bothE().otherV().hasLabel('author').as('b').inE('knows').otherV().hasLabel('author').as('c').select('b', 'c')"
请帮我找出所有与Post_446和Post_276有相同tag标签的节点,"g.V().has('name', 'Post_446').out('has').as('b').in('has').has('name', 'Post_276').select('b')"
找到黄月的买家朋友的朋友,"g.V().has('buyer', 'name', '黄月').out('relation').out('friend').out('relation')"
"查询名为Prescription_389的医生或药品,以及与其有关的药品,并返回Prescription_389的权重和这些药品的名字","g.V().has(label, within('doctor', 'medicine')).has('name', 'Prescription_389').bothE().otherV().has(label, 'medicine').project('a_weight', 'b_name').by(select(all, 'a').unfold().values('weight')).by(values('name'))"
请帮我找出全部与账号XXD有关系的账号的id,"g.V().hasLabel('account').has('name', 'XXD').bothE().otherV().hasLabel('account').id()"
"查找42个年龄小于等于13且名字不等于陈若涵的person,根据性别从小到大排列","g.V().hasLabel('person').has('age', lte(13)).has('name', neq('陈若涵')).order().by('gender', asc).limit(42)"
"找出person徐红knows的person,以及knows这些person的person","g.V().hasLabel('person').has('name', '徐红').as('a').outE('knows').as('e').inV().hasLabel('person').as('b').inE('knows').as('e2').outV().hasLabel('person').as('c').select('b', 'c')"
id对id取余的值,g.V().project('result').by(values('id').math('_ / _'))
"给出person的三角的环,边label为likes, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('likes').inV().as('b').outE('likes').inV().as('c').where(__.outE('likes').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
找出与教师相关的课程节点，按课时进行分组，并返回结果。,g.V().hasLabel('teacher').as('a').outE('teach').inV().hasLabel('course').as('b').group().by('b.courseHour').select(values).unfold()
"帮我查询与名为知乎和中国诗词论坛的点共同包含的,类型是帖子的节点","g.V().has('name', '知乎').outE('contain').inV().hasLabel('post').as('b').inE('contain').outV().has('name', '中国诗词论坛').select('b')"
"帮我查询公司蚂蚁集团属于的城市,被其他公司属于的数量","g.V().has('company', 'name', '蚂蚁集团').out('belong').in('belong').hasLabel('company').count()"
"请帮我查找likes book罪与罚的reader,和这些reader likes的book","g.V().hasLabel('book').has('name', '罪与罚').as('a').in('likes').hasLabel('reader').as('b').out('likes').hasLabel('book').as('c').select('b', 'c')"
"查找所有和名为深圳的城市有相关者关系,或有相关者的相关者关系的国家","g.V().has('city', 'name', '深圳').outE('relation').inV().hasLabel('country').union(identity(), outE('relation').inV().hasLabel('country')).dedup()"
给出所有和person张轩之间有parent关系的person,"g.V().hasLabel('person').has('name', '张轩').outE('parent').inV().hasLabel('person')"
"输入请求点id的列表125,819,695,480,665, 源点的id等于输入表id,找出与person周梅有关,且与person赵轩有关系的person节点","g.withSideEffect('p', [125, 819, 695, 480, 665]).V().hasLabel('person').where(values('id').is(within('p'))).has('name', '周梅').bothE('person_pay_person').otherV().hasLabel('person').as('b').bothE('person_likes_person').otherV().hasLabel('person').has('name', '赵轩').select('b')"
"返回被贷款存款数量大于72的账号,记为relationCount,再查询这些账号存款的person","g.V().hasLabel('account').as('a').project('a', 'relationCount').by(identity()).by(__.in('deposit').hasLabel('loan').count()).where(select('relationCount').is(gt(72))).select('a').out('deposit').hasLabel('person')"
"返回公司蚂蚁集团创造的软件,以及使用这些软件的软件, 令公司的名字等于软件的id的最小值加21的最小值,令公司的星数等于软件的是否开源, 返回公司(a)的名字,软件(b)的价值,软件(c)的是否开源","g.V().hasLabel('company').has('name', '蚂蚁集团').as('a').outE('creates').inV().hasLabel('software').as('b').inE('uses').outV().hasLabel('software').as('c').select('a', 'b', 'c').by(project('name', 'stars').by(__.select('b').values('id').min().math('_ + 21').min()).by(__.select('c').values('openSource'))).by(values('value')).by(values('openSource'))"
"根据id分组,计算salary的最大值除2197的值","g.V().hasLabel('a').group().by('id').by(values('salary').max()).unfold().project('id', 'result').by(keys).by(values().math('_ / 2197'))"
"查找名为放射科的,gender为male或name不等于周梅的relation,返回这些relation的gender,和边的targetId,srcId,weight","g.V().has('name', '放射科').outE('relation').as('e').inV().as('b').where(or(__.has('gender', 'male'), __.has('name', neq('周梅')))).select('e', 'b').by(project('targetId', 'srcId', 'weight').by('targetId').by('srcId').by('weight')).by('gender')"
找出满足条件薪资在1481到4376之间的节点,"g.V().has('salary', between(1481, 4376))"
"请帮我找出全部和公司腾讯有关系的person或公司,返回这些点的id,金额,权重","g.V().hasLabel('company').has('name', '腾讯').bothE().otherV().hasLabel(within('person', 'company')).project('id', 'amount', 'weight').by(id()).by(values('amount')).by(values('weight'))"
"给出标签为city的点,返回56个",g.V().hasLabel('city').limit(56)
 与作家郑伟有关联的书。,"g.V().has('author', 'name', '郑伟').outE('relation').inV().hasLabel('book').range(1, 2).dedup()"
"给出has course大学英语belong的department,的university","g.V().has('course', 'name', '大学英语').out('belong').as('b').in('has').hasLabel('university').as('c').select('b', 'c')"
"以(79,'Prescription_299',2014-11-01),(148,'Prescription_240',2028-04-12),(681,'Prescription_456',2011-12-23),(607,'Prescription_223',2022-08-30)作为请求表数据,属性分别为weight,name,createTime, 源点的createTime等于输入表createTime,返回patient的3度的环","g.inject([['weight':79,'name':'Prescription_299','createTime':'2014-11-01'],['weight':148,'name':'Prescription_240','createTime':'2028-04-12'],['weight':681,'name':'Prescription_456','createTime':'2011-12-23'],['weight':607,'name':'Prescription_223','createTime':'2022-08-30']]).as('p').V().hasLabel('patient').as('a').where(eq('a')).by('createTime').by(select('p').unfold().select('createTime')).repeat(both().simplePath()).times(3).where(eq('a')).path().as('path').select('a').values('id').as('a_id').select('path').unfold().tail(1).values('id').as('b_id').select('a_id','b_id')"
 查询与某个城市相关的大学以及与这些大学有合作关系的其他公司。,"g.V().has('city', 'id', '165').bothE().otherV().hasLabel('university').as('b').inE('cooperate').otherV().hasLabel('company').as('c').select('b', 'c')"
"输入表的列为peopleNumber,id,value, 数据为(248,30,929), 源点的id等于输入表id,查询类型是forum,名为知乎的点,返回这些点的peopleNumber,value","g.withSideEffect('p', [['peopleNumber': 248, 'id': 30, 'value': 929]]).V().hasLabel('forum').has('id', __.select('p').unfold().select('id')).has('name', '知乎').project('peopleNumber', 'value').by('peopleNumber').by('value')"
"帮我查询名为马伟的点发布的所有帖子,并对这些帖子的id进行求和","g.V().has('name', '马伟').outE('publish').inV().hasLabel('post').values('id').sum()"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出和person韩雪有关的person,称为X,再请帮我找出和这个X有关联的其他person,以及和X有关联的person","g.V().has('person', 'name', '韩雪').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
找出郑宏观看的电影,"g.V().hasLabel('person').has('name', '郑宏').outE('watch').inV().hasLabel('film').as('b', 'a').select('a', 'b')"
"根据salary,id,name分组,计算height除height的值",g.V().group().by('salary').by('id').by('name').by(values('height').math('_ / _'))
"请帮我找出和软件Geaflow有关系的person或软件,返回这些点的价值","g.V().has('software', 'name', 'Geaflow').bothE().otherV().hasLabel(within('person', 'software')).values('value')"
"找出名为郑宏的点购买的软件,并对这些软件的是否开源进行求和","g.V().has('name', '郑宏').outE('buy').inV().hasLabel('software').values('openSource').sum()"
"给出与forum天涯论坛存在contain关系,且与tag动作存在has关系的post节点，返回这些post的createTime,及forum天涯论坛的name,及tag动作的id","g.V().hasLabel('forum').has('name', '天涯论坛').outE('contain').inV().hasLabel('post').as('b').inE('has').outV().hasLabel('tag').has('name', '动作').as('c').select('b', 'c').by('createTime').by('id').project('a.name', 'b.createTime', 'c.id').by(constant('天涯论坛')).by(select('b')).by(select('c'))"
"返回28个处方Prescription_351和Prescription_279,共同的伙伴","g.V().hasLabel('prescription').has('name', 'Prescription_351').outE('partner').inV().as('b').inE('partner').outV().hasLabel('prescription').has('name', 'Prescription_279').select('b').dedup().limit(28)"
请帮我找出被用户郑若涵创造的合并请求,"g.V().hasLabel('user').has('name', '郑若涵').outE('creates').inV().hasLabel('pullRequest').as('b', 'a').select('a', 'b')"
"返回44个和label为company的点有apply关系的loan,且和这些loan有deposit关系的account",g.V().hasLabel('company').out('apply').hasLabel('loan').out('deposit').hasLabel('account').limit(44)
给出与person何梅和赵伟都存在同事关系的点,"g.V().hasLabel('person').has('name', '何梅').outE('colleague').inV().as('b').inE('colleague').outV().hasLabel('person').has('name', '赵伟').select('b')"
 查询与贷款defaultName存在存款关系且与账号LX001存在转账关系的账户节点，返回这些账户的创建时间、贷款defaultName的权重和账号LX001的上次登录时间。,"g.V().hasLabel('loan').has('name', 'defaultName').as('a').outE('deposit').inV().hasLabel('account').as('b').inE('transfer').outV().hasLabel('account').has('name', 'LX001').as('c').select('a', 'b', 'c').by('weight').by('createTime').by('lastLoginTime')"
给出公司的2度的环,"g.V().hasLabel('company').as('a').repeat(both().simplePath()).times(2).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"输入请求点id的列表178,860,169,881, 源点的id等于输入表id,请帮我找出名为郑红的点consult的seller","g.inject([178, 860, 169, 881]).unfold().as('p').V().has('id', __.as('p')).has('name', '郑红').outE('buyer_consult_seller').inV().hasLabel('seller').dedup()"
帮我查询前52个标签等于cancel的边,g.E().hasLabel('cancel').limit(52)
"用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找person徐建国的所有类型是朋友的边,并根据源点id从小到大排列,返回191个","g.V().has('person', 'name', '徐建国').outE('friend').order().by('srcId', asc).limit(191).inV()"
查找满足条件name是呐喊的节点,"g.V().has('name', '呐喊')"
"以(79,'郑梅',1385)作为请求表数据,属性分别为id,name,salary, 以属性id作为相等条件,给出label为商品的点,返回48个","g.withSideEffect('p', [['id':79, 'name':'郑梅', 'salary':1385]]).V().hasLabel('goods').as('a').where(eq('a')).by('id').by(select('p').unfold().select('id')).limit(48)"
帮我查询与电影星际穿越有拥有关系的1跳的环,"g.V().has('film', 'name', '星际穿越').as('a').bothE('has').bothV().where(neq('a')).dedup().as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"帮我查询和读者黄轩有喜欢关系的书,再帮我查询以喜欢关系关联了黄轩的书","g.V().hasLabel('reader').has('name', '黄轩').as('a').outE('likes').inV().hasLabel('book').as('b').select('a').inE('likes').outV().hasLabel('book').as('c').select('a', 'b', 'c')"
返回与事项ISSUE-367和ISSUE-123都存在属于关系的点,"g.V().has('issue', 'name', 'ISSUE-367').out('belong').as('b').in('belong').has('issue', 'name', 'ISSUE-123').select('b')"
 查找与书籍ID为31的作家相关的关联者，再查找与这些关联者相关的其他关联者。,"g.V().has('book', 'id', '31').as('a').bothE().as('e').otherV().hasLabel('author').as('b').outE('relation').as('e2').inV().as('c').select('b').outE('relation').as('e3').inV().as('d').select('a', 'b', 'c', 'd')"
"输入请求点id的列表485,273,335, 以属性id作为相等条件,给出名为黄梅的person,以及与其有关的person,并返回黄梅的名字和这些person的年龄","g.inject([485, 273, 335]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('name', '黄梅').as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a', 'b').by('name').by('age')"
"帮我查询与名为操作系统和高等数学的点共同属于的,类型为部门的节点","g.V().has('name', '操作系统').outE('belong').inV().hasLabel('department').as('b').inE('belong').outV().has('name', '高等数学').select('b')"
"查找id为44的country有关的city的relation, 再查找和city有关系的friend","g.V().has('country', 'id', 44).as('a').bothE().otherV().hasLabel('city').as('b').bothE().hasLabel('relation').otherV().as('c').select('b').bothE().hasLabel('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
给出贷款loan_41存款的账号节点还款的贷款,"g.V().hasLabel('loan').has('name', 'loan_41').outE('deposit').inV().hasLabel('account').outE('repay').inV().hasLabel('loan')"
"使用这个图:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ));找出和标签等于reader的点有reader_likes_book关系的book,且和这些book有book_refers_book关系的book,且和这些book有book_refers_book关系的book",g.V().hasLabel('reader').as('a').outE('reader_likes_book').as('e').inV().hasLabel('book').as('b').outE('book_refers_book').as('e2').inV().hasLabel('book').as('c').outE('book_refers_book').as('e3').inV().hasLabel('book').as('d').select('d')
"找出与名为Light和Geaflow123的点共同还款的,标签等于贷款的节点","g.V().has('name', 'Light').outE('repay').inV().hasLabel('loan').as('b').inE('repay').outV().has('name', 'Geaflow123').select('b')"
"查询id是9且name不等于阿里的company employee的person的名称,以及这些person buy的software的名称","g.V().hasLabel('company').has('id', 9).has('name', neq('阿里')).outE('employee').inV().hasLabel('person').as('b').outE('buy').inV().hasLabel('software').as('c').select('b', 'c').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
请帮我查找和账号TheShy之间有转账关系的账号,"g.V().has('account', 'name', 'TheShy').outE('transfer').inV().hasLabel('account')"
"查找city belong的country,返回其源点的peopleNumber除2655加value的平均值,以及目标点的peopleNumber减peopleNumber的平均值","g.V().hasLabel('city').as('a').outE('belong').as('e').inV().hasLabel('country').as('b').project('avg1', 'avg2').by(__.select('a').values('peopleNumber').math('/ 2655').math('+ value').mean()).by(__.select('b').values('peopleNumber').math('- peopleNumber').mean())"
" 请帮我查找标签等于person的comment,这些comment创建了对电影belong的影片，并且这些影片拥有标签has。",g.V().hasLabel('person').as('a').outE('creates').as('e').inV().hasLabel('comment').as('b').outE('belong').as('e2').inV().hasLabel('film').as('c').outE('has').as('e3').inV().hasLabel('tag').as('d').select('d')
"返回所有和贷款loan_43有关系的账号或公司或person,返回这些点的权重","g.V().has('loan', 'name', 'loan_43').bothE().otherV().hasLabel(within('account', 'company', 'person')).values('weight')"
 四川大学和复旦大学有什么共同点？,"g.V().has('university', 'name', '四川大学').outE('relation').inV().as('b').inE('relation').outV().has('university', 'name', '复旦大学').select('b').limit(29)"
"调用personalRank函数,以'fl', 'bv', 'Sp'作为输入,返回运算结果","g.call('PERSONALRANK').with('input1', 'fl').with('input2', 'bv').with('input3', 'Sp').select('id', 'value')"
"请帮我查找121个person杜强和陈国强,共同的relation","g.V().has('person', 'name', '杜强').outE('relation').inV().as('b').inE('relation').outV().has('person', 'name', '陈国强').select('b').limit(121)"
"帮我查询account Geaflow123 transfer的account,返回account repay的loan的weight减237的值","g.V().has('account', 'name', 'Geaflow123').out('transfer').hasLabel('account').out('repay').hasLabel('loan').values('weight').math('_ - 237')"
"查找61个和标签等于电影院的点有上映关系的电影,且和这些电影有拥有关系的标签",g.V().hasLabel('cinema').out('releases').hasLabel('film').out('has').hasLabel('tag').limit(61)
 查询药品医疗酒精处方的包含关系。,"g.V().hasLabel('medicine').has('name', '医疗酒精').inE('contain').outV().hasLabel('prescription')"
"帮我查询与Tom存在撰写关系的书,书与书存在引用关系的点,返回这些点的名字","g.V().has('name', 'Tom').out('write').hasLabel('book').out('refers').hasLabel('book').values('name')"
"给出与名为马建聪和杜红的点共同教的,类型是课程的节点","g.V().has('name', '马建聪').as('a').outE('teach').inV().hasLabel('course').as('b').inE('teach').outV().has('name', '杜红').as('c').select('b').dedup()"
"请帮我找出编辑孙轩发布的书,被其他读者喜欢的数量","g.V().has('publisher', 'name', '孙轩').outE('publish').inV().hasLabel('book').inE('likes').outV().hasLabel('reader').count()"
"根据id,金额,权重分组,计算金额除金额的值","g.V().hasLabel('a').group().by(union(identity(), values('amount'), values('weight')).fold()).by(values('amount').math('_ / _'))"
"给出和issue有关联的repository节点,并根据其lang,stars,id分组,返回lang,stars,id,以及weight减weight的值","g.V().hasLabel('issue').bothE('belong').bothV().hasLabel('repository').group().by(union(values('lang'), values('stars'), values('id')).fold()).by(project('lang', 'stars', 'id', 'weight_diff').by(values('lang')).by(values('stars')).by(values('id')).by(constant(0)).select(values).fold()).unfold().project('lang', 'stars', 'id', 'weight_diff').by(select(keys).select('lang')).by(select(keys).select('stars')).by(select(keys).select('id')).by(select(values).unfold().select('weight_diff').fold().math('_ / size()').by(__.count()))"
"查找id为36的company有关的account的partner, 再查找和account有关系的relation","g.V().has('company', 'id', 36).as('a').bothE().otherV().hasLabel('account').as('b').bothE('partner').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"以528作为请求点id, 源点的id等于输入表id,请帮我查找类型是prescription,名为Prescription_139的点,返回这些点的createTime,id,weight","g.V().has('id', 528).as('p').V().hasLabel('prescription').has('id', __.select('p').values('id')).has('name', 'Prescription_139').project('createTime', 'id', 'weight').by(values('createTime')).by(values('id')).by(values('weight'))"
"查询被合并请求属于数量大于60的仓库,记为relationCount,再查询这些仓库属于的事项","g.V().hasLabel('repository').as('a').project('a', 'relationCount').by(identity()).by(__.in('belong').hasLabel('pullRequest').values('id').mean()).select('a', 'relationCount').where(select('relationCount').is(gt(60))).select('a').out('belong').hasLabel('issue')"
找出既是李建聪朋友又是陈伟朋友，且他们都是医生的人名列表。,"g.V().hasLabel('doctor').has('name', '李建聪').out('friend').as('b').in('friend').hasLabel('doctor').has('name', '陈伟').select('b').values('name')"
 请帮我查询陈红购买过的软件，以及与陈红有提交关系（commits)的软件。,"g.V().has('person', 'name', '陈红').as('a').outE('buy').inV().hasLabel('software').as('b').select('a').inE('commits').outV().hasLabel('software').as('c').select('a', 'b', 'c')"
"请帮我找出和事项ISSUE-54有关的合并请求,再请帮我找出和ISSUE-54属于的其他仓库,返回它们","g.V().has('issue', 'name', 'ISSUE-54').as('a').bothE().otherV().hasLabel('pullRequest').as('b').select('a').bothE('belong').otherV().hasLabel('repository').as('c').select('a', 'b', 'c')"
请帮我查找所有和仓库Flink之间有拥有关系的用户,"g.V().hasLabel('repository').has('name', 'Flink').outE('has').inV().hasLabel('user')"
"请帮我查找和病人王思琪有关的部门,再请帮我查找和王思琪接受的其他处方,返回它们","g.V().has('patient', 'name', '王思琪').as('a').bothE().otherV().hasLabel('department').as('b').select('a').bothE('accept').otherV().hasLabel('prescription').as('c').select('a', 'b', 'c')"
"用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出名为defaultName的点存款的所有账号,并对这些点的是否冻结进行求和","g.V().has('name', 'defaultName').outE('loan_deposit_account').inV().hasLabel('account').values('isBlock').sum()"
"帮我查询名为Amily的点knows的person,并对这些person的age进行求和","g.V().has('name', 'Amily').outE('knows').inV().hasLabel('person').values('age').sum()"
"请帮我找出和用户李思琪有关的用户,称为X,再请帮我找出和这个X有关联的其他帖子,以及和X有关联的标签","g.V().hasLabel('user').has('name', '李思琪').as('a').bothE().otherV().hasLabel('user').as('b').bothE().otherV().hasLabel('post').as('c').select('b').bothE().otherV().hasLabel('tag').as('d').select('a', 'b', 'c', 'd')"
"请帮我找出标签等于publish,且满足条件srcId大于500或f1等于false的边","g.E().hasLabel('publish').or(has('srcId', gt(500)), has('f1', false))"
"查找id为23的tag有关的person的partner, 再查找和person有关系的relation","g.V().has('tag', 'id', 23).as('a').bothE().as('e').otherV().hasLabel('person').as('b').bothE('partner').as('e2').otherV().as('c').select('b').bothE('relation').as('e3').otherV().as('d').select('a', 'b', 'c', 'd')"
"以581,767,402作为请求点id, 以属性id作为相等条件,返回person Amily提交的软件,被其他person购买的数量","g.inject([581, 767, 402]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('name', 'Amily').as('a').outE('person_commits_software').as('e').inV().hasLabel('software').as('b').inE('person_buy_software').as('e2').outV().hasLabel('person').as('c').select('c').count()"
返回所有名为马科的节点教的学生或大学或部门,"g.V().has('name', '马科').outE('teach').inV().hasLabel(within('student', 'university', 'department')).dedup()"
"查找医生属于的部门,返回其源点的id乘29减194的值,以及目标点的id对92取余的平均值","g.V().hasLabel('doctor').as('a').outE('belong').as('e').inV().hasLabel('department').as('b').select('a', 'b').by('id').project('expr1', 'avg_expr2').by(__.select('a').math('_ * 29 - 194')).by(__.select('b').math('_ % 92').mean())"
"找出全部名为吴轩的点的,性别为famale或薪资大于等于9916的伙伴,返回这些伙伴的身高,和边的权重,目标点id,源点id","g.V().has('name', '吴轩').as('a').outE('partner').as('e').inV().as('b').where(or(has('gender', 'famale'), has('salary', gte(9916)))).select('b', 'e').by(values('height')).by(project('weight', 'targetId', 'srcId').by(values('weight')).by(inV().id()).by(outV().id()))"
 找出李思琪认识的人，以及李思琪认识的人，一起返回。,"g.V().has('name', '李思琪').as('a').outE('knows').inV().hasLabel('person').as('b').select('a').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
请帮我找出与体育学院有关系的大学,"g.V().hasLabel('department').has('name', '体育学院').inE('has').outV().hasLabel('university')"
查询名为'推特'的论坛。,"g.V().hasLabel('forum').has('name', '推特')"
"用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));查找178个name是蚂蚁集团且name是华为,name不等于华为的company,根据id升序排列","g.V().hasLabel('company').has('name', '蚂蚁集团').has('name', '华为').has('name', neq('华为')).order().by('id', asc).limit(178)"
"给出所有和学生王雪有关系的课程或大学或学生,返回这些点的身高","g.V().has('student', 'name', '王雪').bothE().otherV().hasLabel(within('course', 'university', 'student')).values('height')"
"查询与公司字节有关,且与国家越南有关系的城市节点","g.V().has('company', 'name', '字节').bothE('belong').bothV().hasLabel('city').as('b').bothE('belong').bothV().has('country', 'name', '越南').select('b')"
"以586作为请求点id, 源点的id等于输入表id,查找所有部门以价值,大小,id分组的大小, 根据大小升序排序","g.inject(586).as('p').V().hasLabel('department').has('id', select('p')).as('a').select('a').by(values('value', 'size', 'id').fold()).group().by(identity()).by(select('a').values('size').fold()).order(local).by(values, asc)"
找出作家黄建国撰写的书节点认识的书,"g.V().hasLabel('author').has('name', '黄建国').out('write').as('b').out('knows').as('c').select('c')"
"给出gender不等于male的buyer creates的orders的名称,以及这些orders contain的goods的名称","g.V().hasLabel('buyer').has('gender', neq('male')).out('creates').hasLabel('orders').as('b').out('contain').hasLabel('goods').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
请帮我找出所有与杜思思存在从属关系的部门，以及这些部门所拥有的医生节点。然后返回这些医生节点的高度信息。,"g.V().has('name', '杜思思').outE('belong').inV().hasLabel('department').outE('has').inV().hasLabel('doctor').values('height')"
请帮我查找前17个label为拥有的边,g.E().hasLabel('has').limit(17)
"返回仓库拥有的事项,返回其源点的id乘61的值,以及目标点的id的最大值对46取余的最大值","g.V().hasLabel('repository').as('a').out('has').hasLabel('issue').as('b').select('a', 'b').by('id').project('a_id_times_61', 'max_mod_46').by(select('a').math('_ * 61')).by(select('b').max().math('_ % 46').max())"
" 找出名为defaultName,且label为贷款的点，并返回它们的金额和权重。","g.V().hasLabel('loan').has('name', 'defaultName').project('a.amount', 'a.weight').by(values('amount')).by(values('weight'))"
"返回147个名为横店影院的点releases的类型是film的节点,且其category不是文艺","g.V().has('name', '横店影院').outE('releases').inV().hasLabel('film').has('category', neq('文艺')).limit(147)"
"查询从编辑黄科出发,经过label为发布的边,走2跳到达的书点","g.V().has('publisher', 'name', '黄科').outE('publish').inV().hasLabel('book').outE('publish').inV().hasLabel('book')"
请帮我找出何若涵认识的人,"g.V().has('person', 'name', '何若涵').outE('relates').inV().hasLabel('person').outE('knows').inV().hasLabel('person')"
"查询前142个价值的求和值不是58或id除id的最大值是383,且id不等于3的电影","g.V().hasLabel('film').has('id', neq(3)).filter(or(project('sum').by(values('value').sum()).by(constant(1)).where(select('sum').is(neq(58))), project('max').by(values('id').as('id').select('id').math('_ / _').max()).by(constant(1)).where(select('max').is(eq(383))))).limit(142)"
给出所有类型为company的点,g.V().hasLabel('company')
找到所有从病人节点出发，到处方节点，并且标签为接受的边。,g.V().hasLabel('patient').outE('accept').inV().hasLabel('prescription').select('e')
 查询与韩雪认识的作家。,"g.V().hasLabel('author').has('name', '韩雪').in('knows').hasLabel('author')"
找出前105个满足条件性别等于famale且身高在153到155之间的person,"g.V().hasLabel('person').has('gender', 'famale').has('height', between(153, 155)).limit(105)"
 请问浙江大学和北京大学有没有共同的合作伙伴？,"g.V().has('university', 'name', '浙江大学').outE('partner').inV().as('b').inE('partner').outV().has('university', 'name', '北京大学').select('b').limit(127)"
 找出15个与大学有合作关系的公司，以及这些公司与哪些城市有合作关系。,g.V().hasLabel('university').as('a').outE('cooperate').as('e').inV().hasLabel('company').as('b').outE('belong').as('e2').inV().hasLabel('city').as('c').select('c').limit(15)
"查询合并请求属于的仓库,返回其源点的变更文件数除变更文件数的值,以及目标点的id乘71的最大值","g.V().hasLabel('pullRequest').as('a').outE('belong').as('e').inV().hasLabel('repository').as('b').select('a', 'b').by('changeFileNumber').by('id').math('a / a').by(__.constant(71).math('b * 71')).select(values).max()"
"请帮我查找源点名字为赵月或身高小于等于180,且id是20,目标点id减id大于等于501,且标签为发布的边","g.V().has('id', 20).has('name', '赵月').or(has('height', lte(180))).outE('publish').where(inV().has('id', where(math('_ - _').is(gte(501))))).select('e')"
请帮我找出与论坛推特有关联的人，以及那些将推特关联起来的人。,"g.V().has('forum', 'name', '推特').as('a').outE('contain').inV().hasLabel('person').as('b').select('a').inE('contain').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"给出所有源点标签为账号,目标点标签为贷款,标签为贷款的边",g.V().hasLabel('account').outE('loan').as('e').inV().hasLabel('loan').select('e')
"给出买家的伙伴,或其伙伴的伙伴",g.V().hasLabel('buyer').outE('partner').inV().hasLabel('buyer').simplePath().by(T.id).dedup().project('b').by(valueMap().with(WithOptions.tokens))
"帮我查询id为87的person关联的账号,和以拥有关系关联了这些账号的其他person","g.V().hasLabel('person').has('id', 87).bothE().otherV().hasLabel('account').as('b').inE('own').outV().hasLabel('person').as('c').select('b', 'c')"
查找买家韩科咨询的卖家节点回答的买家,"g.V().hasLabel('buyer').has('name', '韩科').outE('consult').inV().hasLabel('seller').outE('ask').inV().hasLabel('buyer')"
"给出全部与黄轩存在认识关系的作家,作家与作家存在认识关系的点,返回这些点的年龄","g.V().has('name', '黄轩').out('knows').hasLabel('author').out('knows').hasLabel('author').values('age')"
 找出与陈科和王思琪都有关系的180个学生节点。,"g.V().has('name', '陈科').outE().inV().hasLabel('student').as('b').inE().outV().has('name', '王思琪').select('b').limit(180)"
"请帮我查找源点标签等于prescription,目标点标签等于medicine,标签等于prescription或doctor的边","g.E().hasLabel('prescription', 'doctor').where(and(outV().hasLabel('prescription'), inV().hasLabel('medicine')))"
"以749,851,521,820作为请求点id, 源点的id等于输入表id,找出前49个类型为person_colleague_person的边","g.inject([749, 851, 521, 820]).unfold().as('p').V().has('id', __.select('p')).outE('person_colleague_person').limit(49)"
 返回Alice和王轩共同发布且类型为post的节点。,"g.V().has('name', 'Alice').outE('publish').inV().hasLabel('post').as('b').inE('publish').outV().has('name', '王轩').select('b')"
找出与标签为'person'的点有'likes'关系的92条评论，以及这些评论所属的电影。,g.V().hasLabel('person').outE('likes').inV().hasLabel('comment').outE('belong').inV().hasLabel('film').limit(92)
查找goods的2跳以内的环,"g.V().hasLabel('goods').as('a').repeat(both().simplePath()).times(2).where(loops().is(2)).where(path().unfold().tail(1).is(eq('a'))).dedup().project('a.id', 'b_id').by(select('a').id()).by(tail(local, 1).id())"
"使用列为age,name,salary, 数据为(57,'何红',4321),(86,'周思琪',5025),(7,'陈雪',8260)的子查询作为输入表, 源点的age等于输入表age,查询和account XXD之间有account_repay_loan关系的loan","g.inject([['age':57,'name':'何红','salary':4321],['age':86,'name':'周思琪','salary':5025],['age':7,'name':'陈雪','salary':8260]]).unfold().as('p').V().hasLabel('account').has('age', __.select('p').select('age')).has('name','XXD').outE('account_repay_loan').inV().hasLabel('loan').dedup()"
"返回和person韩伟有关的person,再返回和韩伟支付的其他person,返回它们","g.V().has('person', 'name', '韩伟').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('pay').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
"查找城市东京的所有标签等于相关者的边,并根据权重从小到大排列,返回87个","g.V().has('city', 'name', '东京').outE('relation').as('e').inV().as('b').select('e', 'b').order().by(select('e').values('weight'), asc).limit(87).select('b')"
 谷歌与哪些大学合作了？,"g.V().has('company', 'name', '谷歌').out('cooperate').hasLabel('university').out('cooperate').hasLabel('company')"
"以664,776,653,651,762作为请求点id, 源点的id等于输入表id,请帮我找出29个age为6或id大于等于10的person,根据salary从小到大排列","g.inject([664, 776, 653, 651, 762]).unfold().as('p').V().hasLabel('person').as('a').where(eq('p')).by(identity()).by('id').where(or(has('age', 6), has('id', gte(10)))).order().by('salary', asc).limit(29)"
请帮我找出与forum知乎有关系的user的id,"g.V().hasLabel('forum').has('name', '知乎').bothE().otherV().hasLabel('user').values('id')"
"请帮我查找department数学学院has的student,被其他department has的数量","g.V().has('department', 'name', '数学学院').out('has').in('has').hasLabel('department').count()"
"用这个schema:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回与名为TheShy和Geaflow123的点共同repay的,类型是loan的节点","g.V().has('account', 'name', 'TheShy').outE('account_repay_loan').inV().hasLabel('loan').as('b').inE('account_repay_loan').outV().has('account', 'name', 'Geaflow123').select('b')"
"请帮我找出和公司微软有关的贷款,再请帮我找出和微软申请的其他贷款,返回它们","g.V().hasLabel('company').has('name', '微软').as('a').bothE().otherV().hasLabel('loan').as('b').select('a').bothE('apply').otherV().hasLabel('loan').as('c').select('a', 'b', 'c')"
"返回buyer creates的orders,返回其源点的height除159的数量,以及目标点的id对59取余加53的值","g.V().hasLabel('buyer').as('a').outE('creates').as('e').inV().hasLabel('orders').as('b').project('count_a_height_div_159', 'b_id_mod_59_plus_53').by(select('a').values('height').math('/ 159').count()).by(select('b').values('id').math('% 59').math('+ 53'))"
"以640,909,99,380作为请求点id, 源点的id等于输入表id,查询源点满足条件age小于62,salary小于9155,目标点满足条件salary大于3204且height不是153且age为空,且标签等于person_friend_person的边","g.withSideEffect('p', [640, 909, 99, 380]).V().has('id', within('p')).has('age', lt(62)).has('salary', lt(9155)).outE('person_friend_person').as('e').inV().has('salary', gt(3204)).has('height', neq(153)).hasNot('age').select('e')"
帮我查询person的lover，或者person的lover的lover,g.V().hasLabel('person').repeat(out('lover')).times(2).dedup()
"以377作为请求点id, 以属性id作为相等条件,帮我查询和comment Comment_430有2跳关系的tag","g.V().has('comment', 'id', 377).has('name', 'Comment_430').repeat(bothE().otherV()).times(2).hasLabel('tag')"
"给出全部源点类型为person,边类型为父母,以及f0为空,权重在158.07到179.30之间的边","g.V().hasLabel('person').outE('parent').has('f0', null).has('weight', between(158.07, 179.30))"
level对level取余的数量,g.V().hasLabel('a').project('mod').by(values('level').math('_ % _')).count()
 查找Prescription_352的朋友的相关者。,"g.V().has('prescription', 'name', 'Prescription_352').out('friend').out('friend').out('relation').dedup()"
 陈强和郑建国有两个共同朋友，他们都是96号买家。,"g.V().has('buyer', 'name', '陈强').outE('friend').inV().as('b').inE('friend').outV().has('buyer', 'name', '郑建国').select('b').limit(96)"
返回从生物学院出发，通过拥有标签的边，走1跳或2跳到达的学生点。,"g.V().has('department', 'name', '生物学院').repeat(out('has')).times(2).emit().hasLabel('student').dedup()"
"请帮我找出20个名为华为的点合作的label为大学的节点,且节点等级在2到3之间","g.V().has('name', '华为').outE('cooperate').inV().hasLabel('university').has('level', between(2, 3)).limit(20)"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找和person赵思琪有person_likes_person关系的person,再请帮我查找以person_knows_person关系关联了赵思琪的person","g.V().hasLabel('person').has('name', '赵思琪').as('a').outE('person_likes_person').inV().as('b').select('a').inE('person_knows_person').outV().as('c').select('a', 'b', 'c')"
"返回公司美团合作的大学, 令公司的名字等于大学的id,令大学的名字等于公司的名字,令公司的id等于大学的id对id取余, 返回公司的规格, 大学的等级","g.V().has('company', 'name', '美团').as('a').outE('cooperate').inV().hasLabel('university').as('b').select('a', 'b').by(__.choose(__.values('name'), __.constant(__.select('b').values('id')))).by(__.choose(__.values('name'), __.constant(__.select('a').values('name')))).by(__.choose(__.values('id'), __.constant(__.select('b').values('id').math('_ % _').by(__.select('b').values('id'))))).select('a', 'b').by(values('scale')).by(values('level'))"
"查询id为12的department has的student, 并将student有关的university的value的平均值赋值给student的name, 接着查询student的name小于12的student selects的course","g.V().has('department', 'id', 12).out('has').hasLabel('student').as('b').project('name', 'd').by(__.coalesce(__.in().hasLabel('university').values('value').mean(), __.constant(0))).by(__.where(__.select('name').is(lt(12))).out('selects').hasLabel('course').fold()).select(values)"
"帮我查询75个名为泰坦尼克号的点拥有的类型是标签的节点,且其id大于74或名字不等于其他","g.V().has('name', '泰坦尼克号').outE('has').inV().hasLabel('tag').or(has('id', gt(74)), has('name', neq('其他'))).limit(75)"
请帮我查找以belong关系关联了department艺术学院的course,"g.V().hasLabel('department').has('name', '艺术学院').inE('belong').outV().hasLabel('course')"
"给出所有源点类型是书,边类型是引用,且满足条件f0为空的边","g.V().hasLabel('book').outE('refers').has('f0', null).elementMap()"
"找出city伦敦的所有label为partner的边,并根据f1从小到大排列,返回61个","g.V().hasLabel('city').has('name', '伦敦').outE('partner').order().by('f1', asc).limit(61).inV()"
返回81个与Prescription_176和Prescription_180都存在关系的医生或部门节点,"g.V().has('name', 'Prescription_176').outE().inV().or(hasLabel('doctor'), hasLabel('department')).as('b').inE().outV().has('name', 'Prescription_180').select('b').limit(81)"
"请帮我找出所有id为177的电影关联的电影,和以上映关系关联了这些电影的其他电影院","g.V().has('film', 'id', 177).bothE().otherV().hasLabel('film').as('b').inE('releases').otherV().hasLabel('cinema').as('c').select('b', 'c')"
"找出和事项ISSUE-73有属于关系的仓库,再找出以属于关系关联了ISSUE-73的仓库","g.V().has('issue', 'name', 'ISSUE-73').as('a').outE('belong').inV().hasLabel('repository').as('b').select('a').inE('belong').outV().hasLabel('repository').as('c').select('a', 'b', 'c')"
找出前50个label为knows的边,g.E().hasLabel('knows').limit(50)
"请帮我找出99个名为陈建聪的点创造的标签等于处方的节点,且节点权重等于400且创建时间不是1995年12月22日","g.V().has('name', '陈建聪').outE('creates').inV().has('prescription').has('weight', 400).has('createTime', neq('1995-12-22')).limit(99)"
 查询小胡转账的账户，并返回该账户是否冻结。,"g.V().has('account', 'name', 'XiaoHu').outE('transfer').inV().hasLabel('account').outE('transfer').inV().hasLabel('account').values('isBlock')"
请帮我找出按照age、name和salary分组的所有用户的身高，并按照身高从低到高进行排序。,"g.V().hasLabel('user').group().by(values('age', 'name', 'salary').fold()).by(values('height').fold()).unfold().order().by(select(values).unfold().min(), asc)"
"找出与大学中国科技大学存在属于关系,且与公司蚂蚁集团存在包含关系的城市节点，返回这些城市的面积,价值,名字,及大学中国科技大学的等级,及公司蚂蚁集团的人数","g.V().has('university', 'name', '中国科技大学').as('a').outE('belong').inV().hasLabel('city').as('b').inE('contain').outV().has('company', 'name', '蚂蚁集团').as('c').select('a', 'b', 'c').by(values('level')).by(project('area', 'value', 'name').by(values('area')).by(values('value')).by(values('name'))).by(values('peopleNumber'))"
"给出id为129的城市包含的大学, 并将大学有关的城市的价值的求和值赋值给大学的价值, 接着查询大学的价值小于129的大学属于的城市","g.V().has('city', 'id', 129).out('contain').hasLabel('university').as('b').project('b_value', 'd').by(__.bothE().otherV().hasLabel('city').values('value').sum()).by(__.out('belong').hasLabel('city').where(__.select('b_value').is(lt(129))).fold())"
"请帮我查找label为城市,名为北京的点,返回这些点的面积,id,价值","g.V().hasLabel('city').has('name', '北京').project('area', 'id', 'value').by('area').by('id').by('value')"
"返回write book孤城的author,和这些author write的book","g.V().hasLabel('book').has('name', '孤城').in('write').as('b').out('write').as('c').select('b', 'c')"
"查询全部和名为赵建国的person有相关者关系,或有相关者的相关者关系的person","g.V().hasLabel('person').has('name', '赵建国').bothE('relation').otherV().hasLabel('person').dedup()"
查询何梅的伙伴,"g.V().hasLabel('doctor').has('name', '何梅').outE('relation').inV().outE('relation').inV().outE('partner').inV()"
"以636,678作为请求点id, 源点的id等于输入表id,请帮我找出所有公司的伙伴,或其伙伴的伙伴","g.withSideEffect('p', [636, 678]).V().hasLabel('company').has('id', within('p')).repeat(out('partner')).times(2).emit().dedup()"
"请帮我查找满足条件名字不是王轩且名字为何思思,或年龄是28的节点","g.V().or(has('name', neq('王轩')).has('name', '何思思'), has('age', 28))"
"给出cancel orders Order_494的buyer,和这些buyer creates的orders","g.V().hasLabel('orders').has('name', 'Order_494').in('cancel').hasLabel('buyer').as('b').out('creates').hasLabel('orders').as('c').select('b', 'c')"
 找出名为周伟的人，返回他们的薪资、年龄和身高。,"g.V().hasLabel('person').has('name', '周伟').project('salary', 'age', 'height').by('salary').by('age').by('height')"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex software ( id int ID, name varchar, lang varchar, stars int, openSource boolean, value int ), Edge person_commits_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_creates_software ( srcId int FROM company SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_employee_person ( srcId int FROM company SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_belong_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_buy_software ( srcId int FROM person SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge software_uses_software ( srcId int FROM software SOURCE ID, targetId int FROM software DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出前52个标签等于company_creates_software的边",g.E().hasLabel('company_creates_software').limit(52)
"查找person徐月拥有的账号,被其他账号转账的数量","g.V().has('person', 'name', '徐月').outE('own').inV().hasLabel('account').inE('transfer').outV().hasLabel('account').count()"
 查询198个开源为false且语言为c++且ID在12到40之间的软件，按语言升序排列。,"g.V().hasLabel('software').has('lang', 'c++').has('id', between(12, 40)).has('openSource', false).order().by('lang', asc).limit(198)"
"帮我查询源点标签为城市,目标点标签为大学,标签为国家或公司或大学的边","g.V().hasLabel('city').outE('country', 'company', 'university').as('e').inV().hasLabel('university').select('e')"
帮我查询前64个性别等于famale的买家,"g.V().hasLabel('buyer').has('gender', 'famale').limit(64)"
 请帮我查找名为杜红和周梅的人共同喜欢的，标签为评论的节点。,"g.V().has('name', '杜红').outE('likes').inV().hasLabel('comment').as('b').inE('likes').outV().has('name', '周梅').select('b')"
"以(51,31045,292),(53,24036,977)作为请求表数据,属性分别为id,area,value, 以属性value作为相等条件,返回177个和标签等于company的点有company_belong_city关系的city,并且和这些city有city_contain_company关系的company","g.withSideEffect('p', [['id':51, 'area':31045, 'value':292], ['id':53, 'area':24036, 'value':977]]).V().hasLabel('company').as('a').where(__.select('a').values('value').is(within(__.select('p').unfold().values('value')))).outE('company_belong_city').inV().hasLabel('city').as('b').inE('city_contain_company').outV().hasLabel('company').as('c').select('c').limit(177)"
 找出110个人拥有的所有与类型为person的账户有转移关系的账户。,g.V().hasLabel('person').as('a').outE('own').as('e').inV().hasLabel('account').as('b').outE('transfer').as('e2').inV().hasLabel('account').as('c').select('c').limit(110)
 返回点名为Prescription_175的数据类型，并返回这些点的重量。,"g.V().hasLabel('prescription').has('name', 'Prescription_175').values('weight')"
查找与publisher郑伟和郑宏都存在publish关系的点,"g.V().has('publisher', 'name', '郑伟').outE('publish').inV().as('b').inE('publish').outV().has('publisher', 'name', '郑宏').select('b')"
"请帮我找出全部和person点有创造关系的评论节点,且边满足条件f1不等于true,目标评论节点名字为Comment_493","g.V().hasLabel('person').as('a').outE('creates').has('f1', neq(true)).as('e').inV().hasLabel('comment').has('name', 'Comment_493').as('b').select('b')"
"用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出所有comment以createTime,name分组的name, 根据name降序排序","g.V().hasLabel('comment').group().by(values('createTime', 'name')).by(values('name').fold()).order(Scope.local).by(keys, Order.desc).select(Column.values).unfold()"
请帮我找出与person周伟有关系的person的id,"g.V().hasLabel('person').has('name', '周伟').bothE().otherV().hasLabel('person').id()"
找到所有源点标签为用户的、边标签为喜欢的边，计算它们的f0减去f0的值，并将结果与源点ID对45取余后除以权重。,"g.V().hasLabel('user').outE('likes').project('result1', 'result2').by(values('f0').math('_ - _')).by(values('srcId').math('_ % 45').math('_ / ').by(values('weight')))"
"用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出满足条件性别等于male或薪资在2908到6608之间的节点","g.V().has('person', or(has('gender', 'male'), has('salary', between(2908, 6608))))"
"请帮我找出名为吴梅的点的,name大于970,id等于83的friend,返回这些friend的credit,和边的targetId","g.V().has('name', '吴梅').outE('friend').as('e').inV().has('name', gt(970)).has('id', 83).as('b').select('b', 'e').by('credit').by('targetId')"
"找出卖家郑月拥有的商品,以及查看这些商品的买家","g.V().hasLabel('seller').has('name', '郑月').outE('has').inV().hasLabel('goods').as('b').inE('look').outV().hasLabel('buyer').as('c').select('b', 'c')"
"输入表的列为gender,name,height, 数据为('male','张轩',158), 以属性name作为相等条件,帮我查询被person孙国强pay的person","g.withSideEffect('p', [['gender': 'male', 'name': '张轩', 'height': 158]]).V().hasLabel('person').has('name', within('张轩')).as('a').inE('person_pay_person').outV().hasLabel('person').has('name', '孙国强').as('b').select('a', 'b')"
"请帮我找出前75个id小于等于15,id为空,权重不为空的事项","g.V().hasLabel('issue').has('id', lte(15)).hasNot('id').has('weight').limit(75)"
 请问张建聪认识哪些人？需要查询他认识的人的关系网。,"g.V().hasLabel('person').has('name', '张建聪').out('knows').hasLabel('person').out('knows').hasLabel('person')"
"请帮我找出课程马克思原理的所有朋友,的源点id减18减44的值","g.V().has('course', 'name', '马克思原理').outE('friend').project('result').by(__.values('srcId').math('_ - 18 - 44'))"
 查询身高大于等于7749或性别为男性或女性，并按年龄升序排列的58个人。,"g.V().hasLabel('person').or(has('height', gte(7749)), has('gender', 'male'), has('gender', 'female')).order().by('age', asc).limit(58)"
"以57, 'Yp'作为输入调用KHOP函数,返回运算结果","g.call('KHOP').with('arg1', 57).with('arg2', 'Yp').select('id', 'kValue')"
 查询同时涉及王宏和李雪的84个商品节点。,"g.V().has('name', '王宏').outE().inV().hasLabel('goods').as('b').inE().outV().has('name', '李雪').select('b').limit(84)"
给出company的2跳的环,"g.V().hasLabel('company').as('a').repeat(both().simplePath()).times(2).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
找出与名为马雪的人有伙伴关系，或者有伙伴关系的人。,"g.V().hasLabel('person').has('name', '马雪').outE('partner').inV().hasLabel('person').dedup()"
"请帮我找出被仓库Flink拥有的事项,和Flink拥有的合并请求","g.V().hasLabel('repository').has('name', 'Flink').as('b').outE('has').inV().hasLabel('issue').as('a').select('b').outE('has').inV().hasLabel('pullRequest').as('c').select('a', 'b', 'c')"
"查询和comment Comment_493有belong关系的film,再查询以belong关系关联了Comment_493的film","g.V().hasLabel('comment').has('name', 'Comment_493').as('a').bothE('belong').otherV().hasLabel('film').as('b', 'c').select('a', 'b', 'c')"
 请问处方Prescription_425上有哪些药品？,"g.V().has('prescription', 'name', 'Prescription_425').outE('contain').inV().hasLabel('medicine').as('b').select('b').by().as('a').select('a', 'b')"
 找出与文艺和其他存在关系的135个Cinemas节点。,"g.V().has('name', '文艺').outE().inV().hasLabel('cinema').as('b').inE().outV().has('name', '其他').select('b').limit(135)"
 找出滴滴和美团两家公司的公共相关者节点。,"g.V().has('company', 'name', '滴滴').outE('relation').inV().as('b').inE('relation').outV().has('company', 'name', '美团').select('b').values('name')"
"查找喜欢帖子Post_470的用户,和这些用户喜欢的帖子","g.V().hasLabel('post').has('name', 'Post_470').in('likes').as('b').out('likes').as('c').select('b', 'c')"
"查找和country英国有关的university,再查找和英国contain的其他city,返回它们","g.V().has('country', 'name', '英国').as('a').bothE().otherV().hasLabel('university').as('b').select('a').outE('contain').otherV().hasLabel('city').as('c').select('a', 'b', 'c')"
 找出所有与处方有关的患者节点，其中患者的身高大于等于169。然后返回这些患者节点的身高除以171取余的个数，以及他们的工资除以工资对178取余的值。,"g.V().hasLabel('prescription').outE().inV().hasLabel('patient').has('height', gte(169)).project('count', 'salary_mod').by(__.values('height').math('_ / 171 % 1').count()).by(__.values('salary').math('_ / _ % 178'))"
"查找公司申请的贷款,返回其源点的id减22的平均值,以及目标点的weight的最大值对权重取余的平均值","g.V().hasLabel('company').as('a').outE('apply').as('e').inV().hasLabel('loan').as('b').select('a', 'b').by('id').by('weight').project('avg_id_minus_22', 'avg_max_weight_mod_weight').by(__.select('a').math('_ - 22').mean()).by(__.select('b').fold().project('max_weight', 'weights').by(__.max()).by(__.unfold()).select(values).math('max_weight % weights').mean())"
找出与person徐月和杜雪都存在认识关系的点,"g.V().has('person', 'name', '徐月').outE('knows').inV().as('b').inE('knows').outV().has('person', 'name', '杜雪').select('b')"
"返回用户孙雪创造的事项,以及创造这些事项的用户, 令用户的创建时间等于事项的id减74, 返回用户(a)的薪资,事项(b)的id,用户(c)的身高","g.V().has('user', 'name', '孙雪').as('a').outE('creates').as('e').inV().hasLabel('issue').as('b').inE('creates').as('e2').outV().hasLabel('user').as('c').select('a', 'b', 'c').by(choose(values('salary')).option(none, constant('null'))).by(values('id')).by(choose(values('height')).option(none, constant('null'))).project('a_salary', 'b_id', 'c_height').by(select('a').values('salary')).by(select('b').values('id')).by(select('c').values('height'))"
"帮我查询类型是tag的全部点,并根据name升序排列","g.V().hasLabel('tag').order().by('name', asc)"
"返回贷款loan_51的所有朋友,的权重加165.36的值","g.V().has('loan', 'name', 'loan_51').outE('friend').project('result').by(values('weight').math('_ + 165.36'))"
"请帮我找出名为天津的城市,以及与其有关的公司,并返回天津的价值和这些公司的id","g.V().hasLabel('city').has('name', '天津').as('a').bothE().as('e').otherV().hasLabel('company').as('b').select('a', 'b').by('value').by('id')"
获取id为71的loan关联的account，再获取该account相关的friend。,"g.V().has('loan', 'id', '71').bothE().otherV().hasLabel('account').as('b').bothE('relation').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd').by(valueMap(true))"
"请帮我查找电影的三角的环,边类型是拥有, 并返回这些点的id","g.V().hasLabel('film').as('a').outE('has').inV().as('b').outE('has').inV().as('c').where(__.as('c').outE('has').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
" 查询label为'loan',名称为'defaultName'的点，返回它们的weight和ID。","g.V().hasLabel('loan').has('name', 'defaultName').project('weight', 'id').by('weight').by(id())"
"根据gender,age,height分组,计算height减158的值",g.V().hasLabel('a').group().by('gender').by(group().by('age').by(group().by('height').by(values('height').math('_ - 158'))))
请帮我找出所有与编辑有关的书籍节点，但名字不能是《罪与罚》。然后返回这些节点的id除以id的结果，以及字数乘以757的结果。,"g.V().hasLabel('publisher').outE().inV().hasLabel('book').has('name', neq('罪与罚')).project('id_div_id', 'wordCount_times_757').by(values('id').math('_ / _')).by(values('wordCount').math('_ * 757'))"
请帮我找出周雪和吴梅共同的标签为person的朋友列表,"g.V().has('person', 'name', '周雪').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '吴梅').select('b').values('name')"
 请帮我查找同时与一个标签为person的人有同事关系、恋人关系和家人关系的另外三个人。,g.V().hasLabel('person').as('a').outE('colleague').inV().hasLabel('person').as('b').outE('lover').inV().hasLabel('person').as('c').outE('family').inV().hasLabel('person').as('d').select('d')
找出全部和buyer黄思琪之间有consult关系的seller,"g.V().hasLabel('buyer').has('name', '黄思琪').outE('consult').inV().hasLabel('seller')"
"查询名为周国强的点喜欢的全部person,并对这些person的身高进行求和","g.V().has('name', '周国强').outE('likes').inV().hasLabel('person').values('height').sum()"
"帮我查询全部与何建聪存在恋人关系的person,person与person存在恋人关系的点,返回这些点的名字","g.V().has('name', '何建聪').out('lover').hasLabel('person').out('lover').hasLabel('person').values('name')"
"用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));查询源点满足条件名字等于数学学院或id不等于88,且价值不为空,目标点满足条件年龄是66,且标签为department_has_student的边","g.E().hasLabel('department_has_student').where(__.outV().and(__.or(__.has('name', '数学学院'), __.has('id', neq(88))), __.has('value', neq(null)))).where(__.inV().has('age', 66))"
"给出被user publish数量大于143的post,记为relationCount,再查询这些post publish的tag","g.V().hasLabel('post').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('publish').hasLabel('user').id().sum()).select('a', 'relationCount').as('b').where(__.select('relationCount').is(gt(143))).select('a').out('publish').hasLabel('tag').dedup()"
"给出和label为公司的点有雇佣关系的person,以及和这些person有认识关系的person,以及和这些person有认识关系的person",g.V().hasLabel('company').as('a').out('employee').hasLabel('person').as('b').out('knows').hasLabel('person').as('c').out('knows').hasLabel('person').as('d').select('d')
帮我查询全部名为复旦大学的节点belong的university,"g.V().has('name', '复旦大学').outE('belong').inV().hasLabel('university')"
返回所有属于物理学院的学生和该学院所在的大学。,"g.V().has('name', '物理学院').as('a').out('has').hasLabel('student').as('b').select('a').in('has').hasLabel('university').as('c').select('a', 'b', 'c')"
 找出与徐梅和杜红都有关系的节点。,"g.V().has('person', 'name', '徐梅').bothE('friend').bothV().hasLabel('person').where(bothE('parent').bothV().has('person', 'name', '杜红')).dedup()"
帮我查询前10个标签为拥有的边,g.E().hasLabel('own').limit(10)
返回李若涵的friend关系,"g.V().has('buyer', 'name', '李若涵').out('relation').out('relation').out('friend')"
查找id大于等于54的节点,"g.V().has('id', gte(54))"
帮我查询名为'古代'的标签,"g.V().hasLabel('tag').has('name', '古代')"
获取所有person及其喜欢的其他person,"g.V().has('person', 'id', '124').bothE().otherV().hasLabel('person').as('b').inE('likes').otherV().hasLabel('person').as('c').select('b', 'c')"
"帮我查询全部person以性别分组的薪资, 根据薪资从小到大排序","g.V().hasLabel('person').group().by('gender').by(values('salary').fold()).order(local).by(values, asc)"
"请帮我查找和标签等于person的点有family关系的person,且和这些person有parent关系的person,且和这些person有colleague关系的person",g.V().hasLabel('person').as('a').out('family').hasLabel('person').as('b').out('parent').hasLabel('person').as('c').out('colleague').hasLabel('person').as('d').select('d')
"查询和书悲惨世界有关的书,再查询和悲惨世界引用的其他书,返回它们","g.V().has('book', 'name', '悲惨世界').as('a').bothE().otherV().hasLabel('book').as('b').select('a').outE('refers').inV().hasLabel('book').as('c').select('a', 'b', 'c')"
"查询名为王伟的person,以及与其有关的company,并返回王伟的salary和这些company的id","g.V().hasLabel('person').has('name', '王伟').as('a').bothE().as('e').otherV().hasLabel('company').as('b').select('a', 'b').by('salary').by('id')"
"查找和软件Hadoop有使用关系的软件,再查找以使用关系关联了Hadoop的软件","g.V().has('software', 'name', 'Hadoop').as('a').outE('uses').inV().hasLabel('software').as('b').select('a').inE('uses').outV().hasLabel('software').as('c').select('a', 'b', 'c')"
"给出源点名字是Bilibili或名字不等于字节或规格不是large,边标签等于申请,且满足条件目标点id不为空,源点id小于157,或f0等于647的边,返回这些边的源点id减179的平均值","g.V().has('name', within('Bilibili')).or(__.has('name', neq('字节')), __.has('scale', neq('large'))).outE('apply').where(or(and(__.values('targetId').is(neq(null)), __.values('srcId').is(lt(157))), __.has('f0', 647))).values('srcId').math('_ - 179').mean()"
找出仓库Kafka拥有的合并请求节点属于的仓库,"g.V().hasLabel('repository').has('name', 'Kafka').out('has').hasLabel('pullRequest').out('belong').hasLabel('repository')"
返回所有名为华为的点申请的贷款,"g.V().has('name', '华为').outE('apply').inV().hasLabel('loan')"
"请帮我找出195个和类型为city的点有belong关系的country,且和这些country有contain关系的city",g.V().hasLabel('city').out('belong').hasLabel('country').out('contain').hasLabel('city').limit(195)
"输入请求点id的列表951, 以属性id作为相等条件,给出从student王雪出发,经过标签等于student_selects_course的边,走1跳到达的course点","g.V().hasLabel('student').has('id', 951).has('name', '王雪').outE('student_selects_course').inV().hasLabel('course')"
返回全部名为王月的节点commits的person或company或software,"g.V().has('name', '王月').outE('commits').inV().hasLabel(within('person', 'company', 'software')).dedup()"
"请帮我找出28个城市天津和纽约,共同的相关者","g.V().has('city', 'name', '天津').outE('relation').inV().as('b').inE('relation').outV().has('city', 'name', '纽约').select('b').limit(28)"
请帮我查询与我的账户关联的公司，以及这些公司与其他个人之间的投资关系。,"g.V().hasLabel('account').has('id', '28').bothE().otherV().hasLabel('company').as('b').inE('invest').otherV().hasLabel('person').as('c').select('b', 'c')"
"请帮我找出115个和类型是person的点有creates关系的comment,并且和这些comment有belong关系的film",g.V().hasLabel('person').outE('creates').inV().hasLabel('comment').outE('belong').inV().hasLabel('film').limit(115)
"查询评论属于的电影, 令电影的名字的值等于上映电影的电影院的id的求和值, 再查找电影拥有的标签","g.V().hasLabel('comment').as('a').out('belong').hasLabel('film').as('b').sideEffect(__.select('b').sack(assign).by(constant(0)).select('b').in('releases').hasLabel('cinema').values('id').sack(sum).sack().as('name')).select('b').out('has').hasLabel('tag').as('d').select('b', 'd').by('name').by()"
"给出所有源点类型为person,边类型为认识,且f1不等于true的边",g.V().hasLabel('person').outE('knows').where(values('f1').is(neq(true))).dedup()
"找出seller李雪has的goods, 令goods的value等于goods的value,令seller的category等于goods的id,令goods的age等于seller的height的个数, 返回seller的age, goods的category","g.V().hasLabel('seller').has('name', '李雪').as('a').outE('has').inV().hasLabel('goods').as('b').select('a', 'b').by(valueMap().by(unfold())).project('a_age', 'b_category').by(select('a').project('age').by(select('b').values('id'))).by(select('b').values('id'))"
"帮我查询48个名为赵雪的点发布的标签为书的节点,且节点名字不是计算机网络且类别是小说","g.V().has('name', '赵雪').outE('publish').inV().hasLabel('book').has('name', neq('计算机网络')).has('category', '小说').limit(48)"
请帮我查找名为杜若涵的节点喜欢的用户或事项或合并请求,"g.V().has('name', '杜若涵').outE('likes').inV().hasLabel(within('user', 'issue', 'pullRequest')).dedup()"
查询所有和国家英国之间有包含关系的城市,"g.V().has('country', 'name', '英国').out('contain').hasLabel('city')"
"找出account Geaflow123的所有标签为friend的边,并根据targetId从小到大排列,返回138个","g.V().hasLabel('account').has('name', 'Geaflow123').outE('friend').as('e').inV().as('b').order().by(select('e').values('targetId'), asc).limit(138).select('b')"
"请帮我找出prescription Prescription_102 contain的medicine,以及contain这些medicine的prescription","g.V().has('prescription', 'name', 'Prescription_102').out('contain').as('b').in('contain').as('c').select('b', 'c')"
"返回与贷款loan_51有关,且与贷款loan_60有关系的账号节点","g.V().has('loan', 'name', 'loan_51').bothE('deposit').otherV().hasLabel('account').where(bothE('repay').otherV().has('loan', 'name', 'loan_60')).dedup()"
"找出所有源点性别为famale,目标点名字不是操作系统且名字小于43,学分小于等于4,且类型是选择的边","g.E().hasLabel('selects').where(and(outV().has('gender', 'famale'), inV().has('name', neq('操作系统')).has('name', lt(43)).has('credit', lte(4))))"
查找全部标签等于订单或商品或卖家的点,"g.V().hasLabel(within('orders', 'goods', 'seller'))"
给出全部类型是教师或部门或大学的点,"g.V().hasLabel(within('teacher', 'department', 'university'))"
"返回性别是famale或id在77到78之间的person观看的电影的名称,以及这些电影 拥有的标签的名称","g.V().hasLabel('person').or(has('gender', 'famale'), has('id', between(77, 78))).outE('watch').inV().hasLabel('film').as('b').outE('has').inV().hasLabel('tag').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 请帮我查找何思琪购买的商品，以及她创建的其他订单，并返回它们。,"g.V().hasLabel('buyer').has('name', '何思琪').as('a').bothE().otherV().hasLabel('goods').as('b').select('a').outE('creates').inV().hasLabel('orders').as('c').select('a', 'b', 'c')"
"查询被department艺术学院has的student,和艺术学院has的teacher","g.V().hasLabel('department').has('name', '艺术学院').as('b').bothE('has').otherV().hasLabel('student').as('a').select('b').bothE('has').otherV().hasLabel('teacher').as('c').select('a', 'b', 'c')"
查询和person徐梅之间有拥有关系的账号,"g.V().hasLabel('person').has('name', '徐梅').outE('own').inV().hasLabel('account')"
帮我查询标签等于person的点,g.V().hasLabel('person')
"请帮我查找与名为赵宏和陈强的点共同购买的,类型为软件的节点","g.V().has('name', '赵宏').outE('buy').inV().hasLabel('software').as('b').inE('buy').outV().has('name', '陈强').select('b')"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找和person黄伟有关的person,称为X,再请帮我查找和这个X有关联的其他person,以及和X有关联的person","g.V().has('person', 'name', '黄伟').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
请帮我查找所有和person孙伟之间有knows关系的person,"g.V().hasLabel('person').has('name', '孙伟').outE('knows').inV().hasLabel('person')"
"查询person孙建聪支付的person,以及支付这些person的person","g.V().has('person', 'name', '孙建聪').outE('pay').inV().as('b').inE('pay').outV().as('c').select('b', 'c')"
给出所有和评论Comment_134之间有属于关系的电影,"g.V().hasLabel('comment').has('name', 'Comment_134').outE('belong').inV().hasLabel('film')"
找文艺标签,"g.V().hasLabel('tag').has('name', '文艺')"
"请帮我找出id为59的点的薪资,id","g.V().has('id', 59).project('salary', 'id').by('salary').by('id')"
 请帮我查询生物学院的学生选择了哪些课程，从 department(部门） 生物学院 这个节点开始。,"g.V().has('department', 'name', '生物学院').out('has').hasLabel('student').out('selects').hasLabel('course')"
"请帮我查找person韩伟commits的software,以及buy这些software的person","g.V().has('person', 'name', '韩伟').outE('commits').inV().hasLabel('software').as('b').inE('buy').outV().hasLabel('person').as('c').select('b', 'c')"
"找出person杜建国观看的电影,以及观看这些电影的person","g.V().has('person', 'name', '杜建国').outE('watch').inV().hasLabel('film').as('b').inE('watch').outV().hasLabel('person').as('c').select('b', 'c')"
查询前42个满足条件height为空的person,g.V().hasLabel('person').not(has('height')).limit(42)
"返回105个和类型是学生的点有选择关系的课程,以及和这些课程有属于关系的部门",g.V().hasLabel('student').as('a').outE('selects').as('e').inV().hasLabel('course').as('b').outE('belong').as('e2').inV().hasLabel('department').as('c').select('c').limit(105)
"查找id为118的点的id,名字,价值","g.V().has('id', 118).project('a.id', 'a.name', 'a.value').by(values('id')).by(values('name')).by(values('value'))"
"请帮我查找与名为吴国强和郑若涵的点共同认识的,类型是person的节点","g.V().has('name', '吴国强').outE('knows').inV().hasLabel('person').as('b').inE('knows').outV().has('name', '郑若涵').select('b')"
"请帮我找出编辑的三角的环,边类型为发布, 并返回这些点的id","g.V().hasLabel('publisher').as('a').outE('publish').inV().as('b').outE('publish').inV().as('c').where(eq('a')).select('a', 'b', 'c').by().by(id).by(id).project('a', 'b_id', 'c_id').by().by(select('b')).by(select('c'))"
"返回post的三角的环,边类型是has, 并返回这些点的id","g.V().hasLabel('post').as('a').outE('has').inV().as('b').outE('has').inV().as('c').where(outE('has').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
 周思琪和周建聪认识吗？,"g.V().has('author', 'name', '周思琪').outE('knows').inV().as('b').inE('knows').outV().has('author', 'name', '周建聪').select('b')"
查找所有与论坛推特有关系的论坛的创建时间,"g.V().hasLabel('forum').has('name', '推特').bothE().otherV().hasLabel('forum').values('createTime')"
"返回源点名字为皮肤科或名字不等于急诊部,且名字不等于内科,边类型为拥有,且f1是false或f0不为空的边,返回这些边的源点id除66的值","g.V().has('name', within('皮肤科')).or(has('name', neq('急诊部'))).has('name', neq('内科')).outE('has').or(has('f1', false), has('f0', neq(null))).project('result').by(select('srcId').by('srcId').math('_ / 66'))"
帮我查询全部名为杜伟的点creates的orders,"g.V().has('name', '杜伟').outE('creates').inV().hasLabel('orders')"
"查找所有源点类型为person,目标点类型为person,类型为person的边",g.V().hasLabel('person').outE('person').where(inV().hasLabel('person'))
"找出被reader likes数量大于8的book,记为relationCount,再查询这些book likes的reader","g.V().hasLabel('book').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('likes').hasLabel('reader').id().mean()).select('a', 'relationCount').as('b').where(__.select('relationCount').is(gt(8))).select('a').out('likes').hasLabel('reader')"
 给出的用户关联的帖子，以及与这些帖子有发布关系的其他用户。,"g.V().has('user', 'id', '124').bothE().otherV().hasLabel('post').as('b').inE('publish').otherV().hasLabel('user').as('c').select('b', 'c')"
"给出label为评论的点,返回73个",g.V().hasLabel('comment').limit(73)
"用如下schema的图:CREATE GRAPH g ( Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));返回所有名为吴梅的点取消的订单","g.V().has('buyer', 'name', '吴梅').out('buyer_cancel_orders').hasLabel('orders')"
"找出68个名为少年足球的点has的标签等于tag的节点,且节点value在106到112之间","g.V().has('name', '少年足球').outE('has').inV().hasLabel('tag').has('value', between(106, 112)).limit(68)"
给出医生的2度的环,"g.V().hasLabel('doctor').as('a').repeat(out().simplePath().as('b')).times(2).where(out().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"帮我查询98个名为生物学院的点拥有的标签等于教师的节点,且其身高大于194且名字为黄梅","g.V().has('name', '生物学院').outE('has').inV().hasLabel('teacher').has('height', gt(194)).has('name', '黄梅').limit(98)"
"查询被大学中国科技大学合作的公司,和中国科技大学合作的公司","g.V().hasLabel('university').has('name', '中国科技大学').as('b').outE('cooperate').as('e2').inV().hasLabel('company').as('c').select('b').inE('cooperate').as('e').outV().hasLabel('company').as('a').select('a', 'b', 'c')"
" 返回与university_id=183的teacher的partner,再返回与teacher有关系的relation。","g.V().has('university', 'id', '183').bothE().otherV().hasLabel('teacher').as('a').bothE().otherV().hasLabel('teacher').as('b').outE('partner').otherV().as('c').select('b').outE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"查询创造处方Prescription_185的医生,和这些医生创造的处方","g.V().hasLabel('prescription').has('name', 'Prescription_185').in('creates').as('b').out('creates').as('c').select('b', 'c')"
找到account BIN转账的账户，返回account转账的账户的创建时间、值和名称。,"g.V().has('account', 'name', 'BIN').out('transfer').as('b').out('transfer').as('c').select('c').by(valueMap('createTime', 'value', 'name'))"
"返回名为马科的学生,以及与其有关的教师,并返回马科的id和这些教师的薪资","g.V().hasLabel('student').has('name', '马科').as('a').bothE().as('e').otherV().hasLabel('teacher').as('b').select('a', 'b').by('id').by('salary')"
请帮我查找名为Zookeeper的点使用的软件,"g.V().has('name', 'Zookeeper').outE('uses').inV().hasLabel('software').dedup()"
"以64,622作为请求点id, 以属性id作为相等条件,查找被person周伟申请的贷款","g.withSideEffect('p', [64, 622]).V().hasLabel('loan').has('id', within('p')).as('a').in('person_apply_loan').hasLabel('person').has('name', '周伟').as('b').select('a', 'b')"
"帮我查询所有和course形势与政策有关系的student或department或university,返回这些点的salary,id","g.V().has('course', 'name', '形势与政策').bothE().otherV().hasLabel(within('student', 'department', 'university')).project('salary', 'id').by(values('salary')).by(values('id'))"
"帮我查询与person有关系的person节点,且person节点的薪资大于5840,并返回这些person的身高减198的值,以及person的薪资对4416取余的数量","g.V().hasLabel('person').as('a').outE().as('e').inV().hasLabel('person').has('salary', gt(5840)).as('b').project('height_minus_198', 'salary_mod_count').by(__.select('b').values('height').math('_ - 198')).by(__.select('b').values('salary').math('_ % 4416').count())"
帮我查一下叫马建国的人,"g.V().hasLabel('person').has('name', '马建国')"
"帮我查询person黄思思拥有的账号,以及转账这些账号的账号","g.V().has('person', 'name', '黄思思').outE('own').inV().hasLabel('account').as('b').inE('transfer').outV().hasLabel('account').as('c').select('b', 'c')"
"给出全部id为31的公司关联的账号,和以存款关系关联了这些账号的其他贷款","g.V().hasLabel('company').has('id', 31).bothE().otherV().hasLabel('account').as('b').inE('deposit').otherV().hasLabel('loan').as('c').select('b', 'c')"
"请帮我找出forum推特的全部partner,的f0减583的值","g.V().hasLabel('forum').has('name', '推特').outE('partner').project('result').by(values('f0').math('_ - 583'))"
请帮我找出郑梅和张宏共同创建的点,"g.V().has('user', 'name', '郑梅').outE('creates').inV().as('b').inE('creates').outV().has('user', 'name', '张宏').select('b')"
"请帮我找出和person韩轩有关的person,称为X,再请帮我找出和这个X有关联的其他person,以及和X有关联的person","g.V().has('person', 'name', '韩轩').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
"查找label为部门,名为外科的点,返回这些点的名字,地址","g.V().hasLabel('department').has('name', '外科').project('a.name', 'a.address').by('name').by('address')"
"根据gender,salary,name分组,计算salary除9546的个数","g.V().hasLabel('a').group().by(union(identity().values('gender'), identity().values('salary'), identity().values('name')).fold()).by(values('salary').math('/ 9546').count())"
查找和城市武汉之间有包含关系的公司,"g.V().hasLabel('city').has('name', '武汉').outE('contain').inV().hasLabel('company')"
"帮我查询标签为person的点,返回100个",g.V().hasLabel('person').limit(100)
"给出名为Order_442的卖家,以及与其有关的订单,并返回Order_442的价格和这些订单的价格","g.V().has('seller', 'name', 'Order_442').as('a').bothE().otherV().hasLabel('orders').as('b').select('a', 'b').by('price').by('price')"
"找出身高在157到189之间或id不为空的卖家回答的买家的名称,以及这些买家 取消的订单的名称","g.V().hasLabel('seller').or(has('height', between(157, 189)), has('id', neq(null))).outE('ask').inV().hasLabel('buyer').as('b').outE('cancel').inV().hasLabel('orders').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"查询20个和label为论坛的点有包含关系的帖子,以及和这些帖子有拥有关系的标签",g.V().hasLabel('forum').out('contain').hasLabel('post').out('has').hasLabel('tag').limit(20)
"帮我查询城市的伙伴,或其伙伴的伙伴","g.V().hasLabel('city').outE('partner').inV().range(1, 2).dedup()"
"给出被公司属于数量大于104的城市,记为relationCount,再查询这些城市属于的国家","g.V().hasLabel('city').as('a').project('a', 'relationCount').by(identity()).by(__.in('belong').hasLabel('company').id().max()).select('a', 'relationCount').as('a_with_count').select('a_with_count').where(select('relationCount').is(gt(104))).select('a').out('belong').hasLabel('country').dedup()"
 查询与公司ID为39的大学的关联，再查询与大学有关系的合作伙伴。,"g.V().has('company', 'id', '39').as('a').bothE().otherV().hasLabel('university').as('b').bothE('relation').otherV().as('c').select('b').bothE('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"查找所有源点标签为书,边标签为引用的边,返回这些边的目标点id加38的值,和目标点id除48减507加3的最小值","g.V().hasLabel('book').outE('refers').as('e').inV().as('b').project('expr1', 'expr2').by(__.select('e').values('targetId').math('_ + 38')).by(__.select('e').values('targetId').math('_ / 48 - 507 + 3')).select(values).unfold().group().by(keys).by(select(values).fold().math('min(_)'))"
查询满足条件id大于2或名字不是Order_229或价格在313.05到4842.40之间的节点,"g.V().or(has('id', gt(2)), has('name', neq('Order_229')), has('price', between(313.05, 4842.40)))"
"查找订单以id,名字分组的id, 根据id从小到大排序","g.V().hasLabel('orders').group().by(values('id', 'name')).select(values).unfold().order().by(select('id'), asc)"
 找出订单名Order_289的点，返回它们的名称、ID和价格。,"g.V().hasLabel('orders').has('name', 'Order_289').project('a.name', 'a.id', 'a.price').by('name').by('id').by('price')"
"帮我查询地址不是南区或名字不等于急诊部的部门拥有的医生的名称,以及这些医生 属于的部门的名称","g.V().hasLabel('department').has('address', neq('南区')).or().has('name', neq('急诊部')).outE('has').inV().hasLabel('doctor').as('b').outE('belong').inV().hasLabel('department').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
查找id为72的点的价值,"g.V().has('id', 72).values('value')"
找出与吴雪和李强都有关系的191个人。,"g.V().has('name', '吴雪').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '李强').select('b').limit(191)"
"帮我查询全部源点标签等于作家,边标签等于撰写,且f1为true或源点id小于等于189.77,且时间戳为2016年09月11日的边","g.V().hasLabel('author').outE('write').has('timeStamp', '2016-09-11').or(has('f1', true), has('srcId', lte(189.77)))"
'列出隶属于耳鼻喉科的医生。',"g.V().hasLabel('department').has('name', '耳鼻喉科').inE('has').outV().hasLabel('doctor').as('b').outE('has').inV().hasLabel('doctor').as('a').select('a', 'b')"
查询所有名为Sam的点喜欢的帖子,"g.V().has('name', 'Sam').outE('likes').inV().hasLabel('post')"
"返回全部与杜红存在认识关系的作家,作家与作家存在认识关系的点,返回这些点的id","g.V().has('name', '杜红').out('knows').hasLabel('author').out('knows').hasLabel('author').id()"
找出与person何宏和张建聪都存在父母关系的点,"g.V().hasLabel('person').has('name', '何宏').outE('parent').inV().as('b').inE('parent').outV().hasLabel('person').has('name', '张建聪').select('b')"
"帮我查询所有源点标签为city,边标签为contain,并且满足条件f0是931的边","g.V().hasLabel('city').outE('contain').has('f0', 931).dedup()"
"根据value分组,计算value对650取余的最大值",g.V().hasLabel('a').group().by('value').by(values('value').math('_ % 650').max())
"找出包含订单Order_316包含的商品,的订单","g.V().hasLabel('orders').has('name', 'Order_316').outE('contain').inV().hasLabel('goods').as('b').inE('contain').outV().hasLabel('orders').as('c').select('b', 'c')"
"请帮我查找与国家美国存在包含关系,且与大学电子科技大学存在包含关系的城市节点，返回这些城市的名字,面积,及国家美国的id,及大学电子科技大学的id","g.V().has('country', 'name', '美国').as('a').out('contain').hasLabel('city').as('b').in('contain').has('university', 'name', '电子科技大学').as('c').select('a', 'b', 'c').by('id').by(values('name', 'area')).by('id')"
"输入请求点id的列表26,34, 以属性id作为相等条件,请帮我查找124个和标签等于country的点有country_contain_city关系的city,且和这些city有city_contain_company关系的company","g.withSideEffect('p', [26, 34]).V().hasLabel('country').where(__.values('id').is(within('p'))).out('country_contain_city').hasLabel('city').out('city_contain_company').hasLabel('company').limit(124)"
返回赵雪和何伟共同申请的贷款节点,"g.V().has('name', '赵雪').outE('apply').inV().hasLabel('loan').as('b').inE('apply').outV().has('name', '何伟').select('b')"
"返回被user陈若涵publish的post,和陈若涵likes的post","g.V().hasLabel('user').has('name', '陈若涵').as('b').out('publish').hasLabel('post').as('a').select('b').out('likes').hasLabel('post').as('c').select('a', 'b', 'c')"
 请问周思思观看的电影节有哪些标签？,"g.V().has('person', 'name', '周思思').outE('watch').inV().hasLabel('film').outE('has').inV().hasLabel('tag')"
"使用这个图:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));查询与用户徐月和郑国强都存在user_creates_issue关系的点","g.V().has('user', 'name', '徐月').outE('user_creates_issue').inV().as('b').inE('user_creates_issue').outV().has('user', 'name', '郑国强').select('b')"
"给出医生诊断的病人, 令病人的名字的值等于诊断病人的医生的名字的平均值, 再查找病人接受的处方","g.V().hasLabel('doctor').as('a').outE('diagnose').as('e').inV().hasLabel('patient').as('b').select('b').project('name', 'patient').by(__.in('diagnose').hasLabel('doctor').values('name').mean()).by(__.identity()).select(values).unfold().as('b').outE('accept').as('e3').inV().hasLabel('prescription').as('d').select('b', 'd').by('name').by()"
"查询4个评论Comment_133和Comment_312,共同的朋友","g.V().hasLabel('comment').has('name', 'Comment_133').as('a').outE('friend').as('e').inV().as('b').inE('friend').as('e2').outV().hasLabel('comment').has('name', 'Comment_312').as('c').select('b').limit(4)"
"找出全部医生以名字,id分组的年龄, 根据年龄从大到小排序","g.V().hasLabel('doctor').group().by(values('name', 'id')).by(values('age').fold()).order(local).by(values, desc)"
 根据publisher节点，获取与它关联的book节点，然后根据category和name属性对它们进行分组，并返回每个组中的category和name属性。,"g.V().hasLabel('publisher').bothE('publish').otherV().hasLabel('book').group().by(values('category', 'name')).by(fold())"
"以587,933,143作为请求点id, 源点的id等于输入表id,返回被person杜轩投资的公司","g.withSideEffect('p', [587, 933, 143]).V().hasLabel('company').has('id', within('p')).as('a').in('person_invest_company').hasLabel('person').has('name', '杜轩').as('b').select('a', 'b')"
"使用这个图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));查找全部与user有关系的prescription节点,且prescription节点的createTime等于2008年10月12日,并返回这些点的id加89的数量,以及id加30对55取余的最大值","g.V().hasLabel('user').as('a').outE().inV().hasLabel('prescription').has('createTime', '2008-10-12').as('b').select('b').project('id_plus_89', 'id_mod_55').by(values('id').math('_ + 89')).by(values('id').math('_ + 30 % 55')).select(values).fold().project('count_b_id_plus_89', 'max_b_id_plus_30_mod_55').by(unfold().select('id_plus_89').count()).by(unfold().select('id_mod_55').max())"
请找出同时与部门法学院和经管学院有联系的点,"g.V().has('department', 'name', '法学院').out('has').as('b').in('has').has('department', 'name', '经管学院').select('b')"
 请问有没有一个叫李月和杜梅的人，他们是一个人在同一个职位上的同事？,"g.V().has('person', 'name', '李月').outE('colleague').inV().as('b').inE('colleague').outV().has('person', 'name', '杜梅').select('b').values('name')"
请找出所有包含谷歌的城市，并返回这些城市的ID。,"g.V().has('name', '谷歌').out('belong').hasLabel('city').out('contain').hasLabel('company').values('id')"
"请帮我查找和读者王科有关的编辑,再请帮我查找和王科喜欢的其他书,返回它们","g.V().has('reader', 'name', '王科').as('a').bothE().otherV().hasLabel('publisher').as('b').select('a').outE('likes').inV().hasLabel('book').as('c').select('a', 'b', 'c')"
" 请问有没有一个level为376,id不是91的university有合作的公司名称，以及这些公司合作的university名称？","g.V().hasLabel('university').has('level', 376).has('id', neq(91)).outE('cooperate').inV().hasLabel('company').as('b').outE('cooperate').inV().hasLabel('university').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
" 请帮我找出所有大学的等级分组ID,并按从小到大的顺序排序。",g.V().hasLabel('university').group().by('level').by(values('id').fold()).order(local).by(keys)
"查找和user点有creates关系的pullRequest节点,且边满足条件targetId小于1,目标pullRequest节点changeFileNumber加352的平均值不是466","g.V().hasLabel('user').as('a').outE('creates').has('targetId', lt(1)).as('e').inV().hasLabel('pullRequest').as('b').where(__.select('b').values('changeFileNumber').math('_ + 352').mean().is(neq(466))).select('b')"
给出与作家黄思思和周思思都存在撰写关系的点,"g.V().has('author', 'name', '黄思思').out('write').as('b').in('write').has('author', 'name', '周思思').select('b')"
请帮我找出所有包含药品徐思琪接受过的处方，并返回这些处方的价格,"g.V().has('name', '徐思琪').outE('accept').inV().hasLabel('prescription').outE('contain').inV().hasLabel('medicine').values('price')"
"查询和medicine生理盐水有关的medicine,称为X,再查询和这个X有关联的其他medicine,以及和X有关联的medicine","g.V().has('medicine', 'name', '生理盐水').as('a').bothE().otherV().hasLabel('medicine').as('b').bothE().otherV().hasLabel('medicine').as('c').select('b').bothE().otherV().hasLabel('medicine').as('d').select('a', 'b', 'c', 'd')"
"用如下schema的图:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));返回和department有关联的student节点,并根据其salary分组,返回salary,以及salary加salary的值","g.V().hasLabel('department').bothE('department_has_student').otherV().hasLabel('student').group().by('salary').by(__.project('salary', 'salary_plus_salary').by(__.select('salary')).by(__.select('salary').math('_ + _')).fold())"
返回与处方Prescription_463和Prescription_185都存在包含关系的点,"g.V().hasLabel('prescription').has('name', 'Prescription_463').out('contain').as('b').in('contain').hasLabel('prescription').has('name', 'Prescription_185').select('b')"
请帮我找出与seller何建国和徐月都存在ask关系的点,"g.V().has('seller', 'name', '何建国').outE('ask').inV().where(__.inE('ask').outV().has('seller', 'name', '徐月')).dedup()"
"给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));查询author徐建国的friend的refers的refers","g.V().has('author', 'name', '徐建国').out('friend').out('book_refers_book').out('book_refers_book')"
"请帮我找出和标签等于country的点有contain关系的city,并且和这些city有contain关系的company,并且和这些company有cooperate关系的university",g.V().hasLabel('country').out('contain').hasLabel('city').out('contain').hasLabel('company').out('cooperate').hasLabel('university')
查找与person杜国强有关系的person的id,"g.V().hasLabel('person').has('name', '杜国强').bothE().otherV().hasLabel('person').id()"
" 找所有标签为city,标签为contain的边，然后返回这些边的targetId-7和srcId+srcId-194。","g.V().hasLabel('city').outE('contain').project('expr1', 'expr2').by(values('targetId').math('_ - 7')).by(values('srcId').math('_ + _ - 194')).group().by(select('expr1')).by(select('expr2').count()).select(values)"
"查找用户马轩发布的帖子,以及喜欢这些帖子的用户, 令用户的名字等于用户的性别,令帖子的身高等于用户的id的平均值减12,令帖子的字数等于帖子的价值, 返回用户(a)的身高,帖子(b)的字数,用户(c)的身高","g.V().has('user', 'name', '马轩').as('a').outE('publish').inV().hasLabel('post').as('b').inE('likes').outV().hasLabel('user').as('c').select('a', 'b', 'c').by(project('name', 'gender').by('name').by('gender').select('gender')).by(project('height', 'wordCount').by(__.select('c').values('id').mean().math('_ - 12')).by('value')).by('height').select(values).unfold().project('a_height', 'b_wordCount', 'c_height').by(select('a')).by(select('b').select('wordCount')).by(select('c'))"
获取所有与名为张科的买家有合作关系，或者有合作伙伴关系的订单。,"g.V().hasLabel('buyer').has('name', '张科').outE('partner').inV().hasLabel('orders').dedup()"
 返回计算机学院标签的点的大小和价值。,"g.V().hasLabel('department').has('name', '计算机学院').project('a.size', 'a.value').by('size').by('value')"
 查名为Zeus的账户。,"g.V().hasLabel('account').has('name', 'Zeus')"
获取id为118的university相关的company的relation，然后获取这个company相关的friend。,"g.V().has('university', 'id', '118').bothE().otherV().hasLabel('company').as('b').bothE('relation').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd').by(valueMap(true))"
"帮我查询185个和类型为卖家的点有回答关系的买家,且和这些买家有取消关系的订单",g.V().hasLabel('seller').as('a').outE('ask').inV().hasLabel('buyer').as('b').outE('cancel').inV().hasLabel('orders').as('c').select('c').limit(185)
"请帮我查找名为美团的公司,以及与其有关的person,并返回美团的id和这些person的id","g.V().hasLabel('company').has('name', '美团').as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a', 'b').by('id').by('id')"
"用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查找全部源点类型为account,边类型为account_repay_loan的边,返回这些边的f0减799减18的值,和srcId除50的值","g.E().hasLabel('account_repay_loan').where(outV().hasLabel('account')).project('expr1', 'expr2').by(values('f0').math('_ - 799 - 18')).by(values('srcId').math('_ / 50'))"
找出与土木学院相关的所有学生，包括那些与相关者有关的学生。,"g.V().has('department', 'name', '土木学院').outE('relation').inV().hasLabel('student').dedup()"
"给出book knows的book, 令book的name的值等于publishbook的publisher的height的最大值, 再查找book knows的book","g.V().hasLabel('book').as('a').out('knows').hasLabel('book').as('b').project('b_name', 'd').by(choose(outE('publish').hasLabel('publish').inV().hasLabel('publisher').values('height').max().fold().project('max_height').by(unfold().max())).option(none, constant('')).by(select('max_height'))).by(out('knows').hasLabel('book').as('d').select('d'))"
"输入请求点id的列表833,950,342,912,638, 源点的id等于输入表id,查询和person杜轩有关的person,称为X,再查询和这个X有关联的其他person,以及和X有关联的person","g.inject([833, 950, 342, 912, 638]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('name', '杜轩').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('person').as('c').select('b').bothE().otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
请帮我找出所有标签为'书'的点，并按照创建时间从早到晚排序。,"g.V().hasLabel('book').order().by('createTime', asc)"
"用这个schema:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));找出34个id小于等于83的读者,根据薪资升序排列","g.V().hasLabel('reader').has('id', lte(83)).order().by('salary', asc).limit(34)"
"请帮我查找所有部门以权重,名字分组的id, 根据id从小到大排序","g.V().hasLabel('department').group().by(values('weight', 'name')).by(values('id').fold()).order(local).by(keys, asc)"
请提供与买家王宏有关联的商品，以及包含在订单Order_322中的商品。,"g.V().has('buyer', 'name', '王宏').as('a').out('look').as('b').select('a').V().has('orders', 'name', 'Order_322').as('c').out('contain').as('d').select('a', 'b', 'c', 'd')"
"查找类型为person,名为郑国强的点,返回这些点的salary","g.V().hasLabel('person').has('name', '郑国强').values('salary')"
"以138,268,373作为请求点id, 源点的id等于输入表id,请帮我查找person郑梅的所有标签等于相关者的边,并根据f1升序排列,返回56个","g.inject([138, 268, 373]).unfold().as('p').V().hasLabel('person').has('id', __.select('p')).has('name', '郑梅').outE('relation').as('e').inV().as('b').order().by(__.select('e').values('f1'), asc).limit(56).select('b')"
"帮我查询全部源点类型是城市,目标点类型是公司,类型是国家或大学或公司的边","g.V().hasLabel('city').outE('country', 'university', 'company').as('e').inV().hasLabel('company').select('e')"
 请问能否帮我找出耳鼻喉科医生节点，他们开了处方Prescription_255并且隶属于耳鼻喉科部门？,"g.V().has('department', 'name', '耳鼻喉科').bothE('has').otherV().hasLabel('doctor').as('b').bothE('creates').otherV().has('prescription', 'name', 'Prescription_255').select('b')"
 请帮我查找与软件Zookeeper有使用关系的软件。,"g.V().hasLabel('software').has('name', 'Zookeeper').inE('uses').outV()"
"返回全部和名为何思思的person有lover关系,或有lover的lover关系的person","g.V().has('person', 'name', '何思思').bothE('lover').bothV().simplePath().by(T.id).dedup().hasLabel('person')"
 找出赵国强喜欢过的帖子，并返回这些帖子所拥有的标签名。,"g.V().has('name', '赵国强').out('likes').hasLabel('post').out('has').values('name')"
"查找名为蚂蚁集团和美团的,类型为公司的点公共的伙伴节点的名单","g.V().has('company', 'name', '蚂蚁集团').outE('partner').inV().as('b').inE('partner').outV().has('company', 'name', '美团').select('b').values('name')"
"用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));找出以属于关系关联了部门传染部的医生","g.V().has('department', 'name', '传染部').in('doctor_belong_department').hasLabel('doctor')"
身高除身高减9950的值,"g.V().hasLabel('a').project('result').by(math('it.value(""height"") / it.value(""height"") - 9950'))"
"找出id为196的点的名字,创建时间,权重","g.V().has('id', 196).project('a.name', 'a.createTime', 'a.weight').by(values('name')).by(values('createTime')).by(values('weight'))"
"请帮我查找reader likes的book,返回其源点的height对158取余对3570取余的值,以及目标点的id减96的最小值","g.V().hasLabel('reader').as('a').outE('likes').as('e').inV().hasLabel('book').as('b').project('expr1', 'expr2').by(__.select('a').values('height').math('_ % 158').math('_ % 3570')).by(__.select('b').values('id').math('_ - 96').min())"
请帮我找出与标签为'university'的点有'has'关系的78个部门，以及这些部门有'has'关系的所有教师。,g.V().hasLabel('university').out('has').hasLabel('department').out('has').hasLabel('teacher').limit(78)
 请帮我查找与电子科技大学和清华大学有关的公司节点。,"g.V().has('university', 'name', '电子科技大学').bothE('cooperate').otherV().hasLabel('company').as('b').bothE('cooperate').otherV().has('university', 'name', '清华大学').select('b')"
"帮我查询与名为Post_229和Post_118的点共同拥有的,标签等于标签的节点","g.V().has('name', 'Post_229').out('has').hasLabel('tag').as('b').in('has').has('name', 'Post_118').select('b')"
"返回医生郑梅创造的处方, 令医生的id等于医生的id的求和值,令处方的创建时间等于处方的weight的最小值对149取余, 返回医生的年龄, 处方的权重","g.V().hasLabel('doctor').has('name', '郑梅').as('a').outE('creates').inV().hasLabel('prescription').as('b').select('a', 'b').by(__.project('age', 'id').by('age').by(__.values('id').sum())).by(__.project('weight', 'createTime').by('weight').by(__.values('weight').min().math('_ % 149'))).select(values).unfold().project('a.age', 'b.weight').by(select('a').select('age')).by(select('b').select('weight'))"
找张梅的朋友的朋友,"g.V().has('person', 'name', '张梅').out('relation').out('friend').out('friend')"
找到与处方Prescription_474有创建关系的医生,"g.V().hasLabel('prescription').has('name', 'Prescription_474').inE('creates').outV().hasLabel('doctor')"
"请帮我找出company cooperate的university, 令university的name的值等于containuniversity的city的value的和, 再查找university cooperate的company","g.V().hasLabel('company').as('a').outE('cooperate').inV().hasLabel('university').as('b').sideEffect(__.select('b').aggregate('b_agg')).select('b').inE('contain').outV().hasLabel('city').values('value').sum().as('b_name').select('b_agg').unfold().as('b').outE('cooperate').inV().hasLabel('company').as('d').select('b_name', 'd').by(__.select('b_name')).by(__.select('d'))"
"给出账号Zeus还款的贷款,以及申请这些贷款的公司, 令账号的是否冻结等于账号的价值减253,令公司的价值等于账号的创建时间, 返回账号的名字,贷款的权重,公司的id","g.V().hasLabel('account').has('name', 'Zeus').as('a').outE('repay').inV().hasLabel('loan').as('b').inE('apply').outV().hasLabel('company').as('c').select('a', 'b', 'c').by(project('name', 'isBlock').by('name').by(values('value').math('_ - 253'))).by(project('weight').by('weight')).by(project('id', 'value').by('id').by(select('a').values('createTime')))"
"帮我查询与forum中国军事论坛存在contain关系,且与post Post_285存在likes关系的user节点，返回这些user的salary,id,name,及forum中国军事论坛的name,及post Post_285的wordCount","g.V().has('forum', 'name', '中国军事论坛').as('a').out('contain').as('b').in('likes').has('post', 'name', 'Post_285').as('c').select('a', 'b', 'c').by('name').by(values('salary', 'id', 'name').fold()).by('wordCount')"
找出与patient郑红有关系的prescription的id,"g.V().has('patient', 'name', '郑红').bothE().otherV().hasLabel('prescription').values('id')"
身高对190取余的值,g.V().hasLabel('a').project('result').by(values('height').math('_ % 190'))
 韩宏和李强都拥有家庭关系。,"g.V().has('person', 'name', '韩宏').outE('family').inV().as('b').inE('family').outV().has('person', 'name', '李强').select('b')"
 请帮我查找与华中科技大学有关的公司，并返回它们；再帮我查找与华中科技大学有合作的其他公司，也返回它们。,"g.V().has('university', 'name', '华中科技大学').as('a').bothE().otherV().hasLabel('company').as('b').select('a').bothE('cooperate').otherV().hasLabel('company').as('c').select('a', 'b', 'c')"
按照身高降序，找出所有按id、性别和薪资分组的人的身高。,"g.V().hasLabel('person').group().by(union(id(), values('gender'), values('salary')).fold()).by(values('height').fold()).order(local).by(values, desc)"
查询所有和电影泰坦尼克号之间有拥有关系的标签,"g.V().hasLabel('film').has('name', '泰坦尼克号').out('has').hasLabel('tag')"
"输入表的列为salary,id,name, 数据为(8100,37,'杜轩'),(8933,49,'韩月'),(7198,82,'黄建聪'),(8541,43,'徐雪'), 以属性id作为相等条件,给出名为孙伟的点likes的所有person,并对这些点的salary进行求和","g.withSideEffect('p', [['salary':8100,'id':37,'name':'杜轩'],['salary':8933,'id':49,'name':'韩月'],['salary':7198,'id':82,'name':'黄建聪'],['salary':8541,'id':43,'name':'徐雪']]).V().has('person','name','孙伟').as('a').outE('person_likes_person').inV().hasLabel('person').as('b').where(__.select('a').values('id').as('a_id').select('b').values('id').as('b_id').select('p').unfold().where(__.select('a_id').is(eq('id'))).where(__.select('b_id').is(eq('id')))).select('b').values('salary').sum()"
 帮我找出周建国这个人。,"g.V().hasLabel('person').has('name', '周建国')"
"输入表的列为id,name,gender, 数据为(95,'赵国强','famale'), 源点的gender等于输入表gender,帮我查询id为150的点的价值,名字","g.withSideEffect('p', [['id':95, 'name':'赵国强', 'gender':'famale']]).V().has('id', '150').has('gender', __.select('p').unfold().select('gender')).project('value', 'name').by(__.select('value')).by(__.select('name'))"
"帮我查询和账号Zeus有关的账号,称为X,再帮我查询和这个X有关联的其他账号,以及和X有关联的账号","g.V().has('account', 'name', 'Zeus').as('a').bothE().otherV().hasLabel('account').as('b').bothE().otherV().hasLabel('account').as('c').select('b').bothE().otherV().hasLabel('account').as('d').select('a', 'b', 'c', 'd')"
"查询与名为陈思琪和Bob的点共同发布的,标签等于书的节点","g.V().has('name', '陈思琪').outE('publish').inV().hasLabel('book').as('b').inE('publish').outV().has('name', 'Bob').select('b')"
"请帮我查找类型是person,名为吴强的点,返回这些点的性别,身高","g.V().hasLabel('person').has('name', '吴强').project('gender', 'height').by(values('gender')).by(values('height'))"
"输入请求点id的列表564,456,860,711, 以属性id作为相等条件,给出id为36的点的value,id,credit","g.withSideEffect('p', [564, 456, 860, 711]).V().has('id', within('p')).has('id', '36').project('value', 'id', 'credit').by(values('value')).by(values('id')).by(values('credit'))"
请帮我找出和person李若涵之间有支付关系的person,"g.V().has('person', 'name', '李若涵').outE('pay').inV().hasLabel('person')"
帮我查询所有部门的人脉关系，包括朋友和朋友的朋友,"g.V().hasLabel('department').outE('friend').inV().hasLabel('person').range(1, 2).dedup()"
"给出id为117的点的价格,价值","g.V().has('id', 117).project('price', 'value').by('price').by('value')"
"找出软件的三角的环,边标签等于使用, 并返回这些点的id","g.V().hasLabel('software').as('a').outE('uses').inV().as('b').inE('uses').outV().as('c').where(eq('a')).select('a', 'b', 'c').by().by(id).by(id).project('a', 'b_id', 'c_id').by().by().by()"
"请帮我找出所有源点label为软件,边label为使用,以及满足条件f1等于true的边","g.V().hasLabel('software').outE('uses').has('f1', true).project('e').by(identity())"
"找出与公司蚂蚁集团存在雇佣关系,且与软件Hadoop存在购买关系的person节点，返回这些person的年龄,身高,及公司蚂蚁集团的名字,及软件Hadoop的星数","g.V().has('company', 'name', '蚂蚁集团').as('a').out('employee').as('b').in('buy').has('software', 'name', 'Hadoop').as('c').select('a', 'b', 'c').by('name').by(values('age', 'height')).by('stars')"
帮我找类型为prescription、名称为Prescription_358的点，并返回它们的id,"g.V().hasLabel('prescription').has('name', 'Prescription_358').id()"
"给出和名为郑宏的读者有相关者关系,或有相关者的相关者关系的书","g.V().hasLabel('reader').has('name', '郑宏').out('relation').hasLabel('book').union(identity(), out('relation').hasLabel('book')).dedup()"
"查询与名为郑强和李若涵的点共同创造的,标签等于评论的节点","g.V().has('name', '郑强').outE('creates').inV().hasLabel('comment').as('b').inE('creates').outV().has('name', '李若涵').select('b')"
查找被person吴若涵支付的person,"g.V().hasLabel('person').has('name', '吴若涵').as('b').outE('pay').inV().hasLabel('person').as('a').select('a', 'b')"
"查询139个salary为空,id大于等于62,id的和大于187的publisher,根据age升序排列","g.V().hasLabel('publisher').has('salary', null).has('id', gte(62)).as('a').select('a').by(__.values('id').sum()).where(__.select('a').is(gt(187))).select('a').order().by('age', asc).limit(139)"
"请帮我找出id为42的账号还款的贷款, 并将贷款有关的person的身高的数量赋值给贷款的金额, 接着查询贷款的金额小于42的贷款存款的账号","g.V().hasLabel('account').has('id', 42).outE('repay').inV().hasLabel('loan').as('b').sideEffect(select('b').property('amount', select('b').bothE().otherV().hasLabel('person').values('height').count())).has('amount', lt(42)).outE('deposit').inV().hasLabel('account').as('d').select('b', 'd').by('amount').by()"
"帮我查询包含用户李思思的论坛,和这些论坛包含的帖子","g.V().has('user', 'name', '李思思').in('contain').as('b').out('contain').as('c').select('b', 'c')"
"找出论坛的三角的环,边标签为包含, 并返回这些点的id","g.V().hasLabel('forum').as('a').outE('contain').inV().as('b').outE('contain').inV().as('c').where(__.outE('contain').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
 查询阿里位于的城市，以及阿里合作的大学。,"g.V().has('name', '阿里').as('a').outE('belong').inV().hasLabel('city').as('b').select('a').inE('cooperate').outV().hasLabel('university').as('c').select('a', 'b', 'c')"
"返回从论坛中国军事论坛出发,经过类型是包含的边,走2跳到达的帖子点","g.V().has('forum', 'name', '中国军事论坛').repeat(out('contain')).times(2).hasLabel('post')"
"请帮我找出名为Comment_264的评论或电影,以及与其有关的电影,并返回Comment_264的创建时间和这些电影的类别","g.V().has(label, within('comment', 'film')).has('name', 'Comment_264').bothE().otherV().has(label, 'film').project('a.createTime', 'b.category').by(select(all, 'v').unfold().has(label, within('comment', 'film')).has('name', 'Comment_264').values('createTime')).by(select(all, 'v').unfold().has(label, 'film').values('category'))"
" 找出所有与 person 有关系的标签节点，且标签节点的值小于436,然后返回这些点的 ID 加 56 加 806 的值以及 ID 加 34 的值。","g.V().hasLabel('person').outE().as('e').inV().hasLabel('tag').has('value', lt(436)).project('b_id_plus_56_plus_806', 'b_id_plus_34').by(values('id').math('_ + 56 + 806')).by(values('id').math('_ + 34'))"
"帮我查询名为上海的点包含的公司,并对这些公司的人数进行求和","g.V().has('name', '上海').out('contain').hasLabel('company').values('peopleNumber').sum()"
"用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));返回大学的三角的环,边标签等于university_has_department, 并返回这些点的id","g.V().hasLabel('university').as('a').out('university_has_department').as('b').out('university_has_department').as('c').where(__.in('university_has_department').as('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
"返回源点满足条件height为空,目标点满足条件gender不是male或age大于等于17,且age不为空,且类型为knows的边","g.E().hasLabel('knows').where(__.outV().has('height', null)).where(__.inV().and(__.has('age', neq(null)), __.or(__.has('gender', neq('male')), __.has('age', gte(17)))))"
"用如下schema的图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询所有与账号有关系的贷款节点,且贷款节点的金额小于等于66,并返回这些点的权重加239乘824对74取余的最大值,以及权重除权重减8184.39的最大值","g.V().hasLabel('account').as('a').outE().as('e').inV().hasLabel('loan').has('amount', lte(66)).as('b').select('b').project('expr1', 'expr2').by(project('weight').by(values('weight')).math('(weight + 239) * 824 % 74')).by(project('weight').by(values('weight')).math('weight / weight - 8184.39')).select(values).select('expr1', 'expr2').math('max').math('max')"
"请帮我查找名为黄思思和徐国强的,标签为person的点公共的伙伴节点的名单","g.V().has('person', 'name', '黄思思').outE('partner').inV().as('b').inE('partner').outV().has('person', 'name', '徐国强').select('b').values('name')"
"请帮我查找名为孙雪的点relates的person,并对这些person的id进行求和","g.V().has('name', '孙雪').outE('relates').inV().hasLabel('person').values('id').sum()"
"输入表的列为courseHour,credit,value, 数据为(25,4,295), 以属性value作为相等条件,找出名为韩轩的student","g.inject([25, 4, 295]).as('p').V().hasLabel('student').has('value', select('p').select('value')).has('name', '韩轩').as('a').select('a')"
"用如下schema的图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));查询buyer周科cancel的orders节点contain的goods","g.V().hasLabel('buyer').has('name', '周科').outE('buyer_cancel_orders').inV().hasLabel('orders').outE('orders_contain_goods').inV().hasLabel('goods')"
"帮我查询与名为杜建国和陈红的点共同创造的,label为事项的节点","g.V().has('name', '杜建国').outE('creates').inV().hasLabel('issue').as('b').inE('creates').outV().has('name', '陈红').select('b')"
找出与作者黄轩有关联的作者，以及与读者韩国强有关联的书籍，并将它们全部返回。,"g.V().has('author', 'name', '黄轩').as('a').out('knows').as('b').select('a').V().has('reader', 'name', '韩国强').as('c').out('likes').as('d').select('a', 'b', 'c', 'd')"
"用这个schema:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));返回与名为徐雪和韩科的点共同knows的,标签等于person的节点","g.V().has('name', '徐雪').out('knows').hasLabel('person').as('b').in('knows').has('name', '韩科').select('b')"
 查询与名为赵伟的buyer有好友关系或好友的好友关系的订单。,"g.V().hasLabel('buyer').has('name', '赵伟').repeat(bothE('friend').otherV().simplePath()).times(2).emit().hasLabel('orders').dedup()"
"以(53,69,'Comment_120')作为请求表数据,属性分别为wordCount,id,name, 以属性wordCount作为相等条件,查找和comment Comment_385有关的cinema,再查找和 Comment_385comment_belong_film的其他film,返回它们","g.withSideEffect('p', [['wordCount':53, 'id':69, 'name':'Comment_120']]).V().hasLabel('comment').has('wordCount', __.select('p').unfold().select('wordCount')).has('name', 'Comment_385').as('a').bothE().as('e').otherV().hasLabel('cinema').as('b').select('a').outE('comment_belong_film').as('e2').inV().hasLabel('film').as('c').select('a', 'b', 'c')"
"请帮我查找全部和课程程序设计有关系的学生,返回这些点的价值","g.V().hasLabel('course').has('name', '程序设计').bothE().otherV().hasLabel('student').values('value')"
 查询与ID为73的贷款账户有关的朋友，再查询与这些朋友有关系的伙伴。,"g.V().has('loan', 'id', '73').as('a').bothE().otherV().hasLabel('account').as('b').outE('friend').inV().as('c').select('b').outE('partner').inV().as('d').select('a', 'b', 'c', 'd')"
找出创建了label为orders且被名为张宏和杜建国的点共同创建的节点,"g.V().has('name', '张宏').outE('creates').inV().hasLabel('orders').as('b').inE('creates').outV().has('name', '杜建国').select('b')"
"帮我查询44个和类型是person的点有拥有关系的账号,且和这些账号有还款关系的贷款",g.V().hasLabel('person').as('a').outE('own').as('e').inV().hasLabel('account').as('b').outE('repay').as('e2').inV().hasLabel('loan').as('c').select('c').limit(44)
给出id为96的点的id,"g.V().has('id', 96).values('id')"
请帮我找出与person何伟和黄伟都存在朋友关系的点,"g.V().has('person', 'name', '何伟').out('friend').as('b').in('friend').has('person', 'name', '黄伟').select('b')"
找出与天津有关联的国家，然后找出这些国家中包含天津的大学。,"g.V().has('city', 'name', '天津').as('a').outE('belong').inV().hasLabel('country').as('b').select('a').inE('contain').outV().hasLabel('university').as('c').select('a', 'b', 'c')"
查询id为185的person及其伙伴，以及与该person相关的其他人员。,"g.V().hasLabel('person').has('id', '185').as('a').bothE().otherV().hasLabel('person').as('b').bothE().hasLabel('partner').otherV().as('c').select('b').bothE().hasLabel('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
"以950作为请求点id, 以属性id作为相等条件,帮我查询名为美团的company","g.V().hasLabel('company').has('id', 950).has('name', '美团')"
将源点和目标点的标签都设为'person'，并且这条边的标签是'恋人'。,g.V().hasLabel('person').as('a').outE('lover').as('e').inV().hasLabel('person').as('b').select('e')
"帮我查询名为复仇者联盟的电影,以及与其有关的person,并返回复仇者联盟的名字和这些person的性别","g.V().hasLabel('film').has('name', '复仇者联盟').as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a', 'b').by('name').by('gender')"
给出全部类型是电影或评论或电影院的点,"g.V().hasLabel(within('film', 'comment', 'cinema'))"
"请帮我查找write book呐喊的author,和这些author write的book","g.V().hasLabel('book').has('name', '呐喊').inE('write').outV().as('b').outE('write').inV().as('c').select('b', 'c')"
"请帮我查找和标签等于person的点有创造关系的评论,以及和这些评论有属于关系的电影,以及和这些电影有拥有关系的标签",g.V().hasLabel('person').as('a').outE('creates').as('e').inV().hasLabel('comment').as('b').outE('belong').as('e2').inV().hasLabel('film').as('c').outE('has').as('e3').inV().hasLabel('tag').as('d').select('d')
"查询和名为吴伟的person有friend关系,或有friend的friend关系的comment","g.V().hasLabel('person').has('name', '吴伟').bothE('friend').otherV().hasLabel('comment').union(__.identity(), __.bothE('friend').otherV().hasLabel('comment')).dedup()"
查询前109个标签等于accept的边,g.E().hasLabel('accept').limit(109)
返回与买家郑建国有查看关系的1跳以内的环,"g.V().has('buyer', 'name', '郑建国').as('a').bothE('look').bothV().where(eq('a')).as('b').select('a', 'b').by('id').by('id').select(values).project('a.id', 'b_id').by(select('a')).by(select('b'))"
 找出与吴轩和徐科都相关的作家。,"g.V().has('name', '吴轩').outE().as('e').inV().hasLabel('author').as('b').inE().as('e2').outV().has('name', '徐科').select('b').limit(1)"
查找17个与赵科和张月都存在关系的person节点,"g.V().has('name', '赵科').as('a').outE().as('e').inV().hasLabel('person').as('b').inE().as('e2').outV().has('name', '张月').as('c').select('b').limit(17)"
"请帮我找出147个person赵宏和张宏,共同的朋友","g.V().has('person', 'name', '赵宏').outE('friend').inV().as('b').inE('friend').outV().has('person', 'name', '张宏').select('b').dedup().limit(147)"
"请帮我找出名为赵雪的教师,以及与其有关的学生,并返回赵雪的薪资和这些学生的身高","g.V().has('teacher', 'name', '赵雪').as('a').bothE().otherV().hasLabel('student').as('b').select('a', 'b').by('salary').by('height')"
"给出源点类型是账号,边类型是还款,且满足条件权重在139.11到154.78之间或源点id小于等于174的边","g.V().hasLabel('account').as('a').outE('repay').as('e').where(or(and(__.values('weight').is(between(139.11, 154.78))), __.values('srcId').is(lte(174)))).select('e')"
找出既有与贷款defaultName的关系，又有与贷款defaultName1的关系的点,"g.V().has('loan', 'name', 'defaultName').outE('deposit').inV().where(__.inE('deposit').outV().has('loan', 'name', 'defaultName1')).dedup()"
"给出和仓库Tugraph有拥有关系的事项,再给出以拥有关系关联了Tugraph的用户","g.V().hasLabel('repository').has('name', 'Tugraph').as('a').outE('has').inV().hasLabel('issue').as('b').select('a').inE('has').outV().hasLabel('user').as('c').select('a', 'b', 'c')"
"以886,70,685,718作为请求点id, 以属性id作为相等条件,查找和software有关联的software节点,并根据其stars,id,lang分组,返回stars,id,lang,以及value除416的值","g.inject([886, 70, 685, 718]).unfold().as('p').V().hasLabel('software').has('id', __.select('p')).as('a').bothE('software_uses_software').otherV().as('b').select('b').values('stars', 'id', 'lang', 'value').by().by().by().by(__.math('_ / 416')).group().by(__.select('stars', 'id', 'lang')).by(__.select('value').fold())"
"给出label为person,名为周思琪的点,返回这些点的salary,id","g.V().hasLabel('person').has('name', '周思琪').project('salary', 'id').by('salary').by('id')"
找出与陈雪和赵若涵都有关联的159个处方节点,"g.V().has('name', '陈雪').out().as('b').in().has('name', '赵若涵').select('b').limit(159)"
"给出和comment Comment_351有关的tag,称为X,再给出和这个X有关联的其他tag,以及和X有关联的film","g.V().has('comment', 'name', 'Comment_351').as('a').bothE().otherV().hasLabel('tag').as('b').bothE().otherV().hasLabel('tag').where(neq('b')).as('c').select('b').bothE().otherV().hasLabel('film').as('d').select('a', 'b', 'c', 'd')"
"帮我查询全部id为150的person关联的person,和以支付关系关联了这些person的其他person","g.V().hasLabel('person').has('id', 150).bothE().otherV().hasLabel('person').as('b').inE('pay').otherV().hasLabel('person').as('c').select('b', 'c')"
"根据规格,id,价值分组,计算id对id取余的值","g.V().hasLabel('a').group().by(union(select('scale'), select('id'), select('value')).fold()).by(values('id').math('_ % _'))"
查询所有和帖子Post_143有1度或2度关系的用户,"g.V().hasLabel('post').has('name', 'Post_143').bothE().bothV().hasLabel('user').dedup()"
"返回被合并请求属于数量大于101的仓库,记为relationCount,再查询这些仓库属于的事项","g.V().hasLabel('repository').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('belong').hasLabel('pullRequest').id().min()).select('a', 'relationCount').where(__.select('relationCount').is(gt(101))).select('a').out('belong').hasLabel('issue')"
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));找出loan的三角的环,边标签等于loan_deposit_account, 并返回这些点的id","g.V().hasLabel('loan').as('a').outE('loan_deposit_account').inV().as('b').outE('loan_deposit_account').inV().as('c').where('a', eq('c')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
"帮我查询id为98的论坛有关的用户的伙伴, 再帮我查询和用户有关系的朋友","g.V().has('forum', 'id', 98).as('a').bothE().otherV().hasLabel('user').as('b').bothE().hasLabel('partner').otherV().as('c').select('b').bothE().hasLabel('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
"输入请求点id的列表560,299, 源点的id等于输入表id,查找所有和名为陈思思的teacher有friend关系,或有friend的friend关系的course","g.withSideEffect('p', [560, 299]).V().hasLabel('teacher').has('id', within('p')).has('name', '陈思思').repeat(out('friend')).times(2).emit().hasLabel('course').dedup()"
查询韩建聪喜欢的评论，再查询韩建聪观看过的电影,"g.V().has('person', 'name', '韩建聪').as('a').outE('likes').inV().hasLabel('comment').as('b').select('a').inE('watch').outV().hasLabel('film').as('c').select('a', 'b', 'c')"
查询所有与user吴宏有关系的repository的lang,"g.V().has('user', 'name', '吴宏').bothE().otherV().hasLabel('repository').values('lang')"
帮我查询被用户郑梅创造的事项,"g.V().hasLabel('user').has('name', '郑梅').outE('creates').inV().hasLabel('issue').as('b', 'a').select('a', 'b')"
 返回一个包含百度贴吧和中国军事论坛的集合。,"g.V().hasLabel('forum').has('name', '百度贴吧').outE('contain').inV().as('b').inE('contain').outV().hasLabel('forum').has('name', '中国军事论坛').select('b')"
"找出id为14的点的id,名字","g.V().has('id', 14).project('id', 'name').by('id').by('name')"
 找出与吴宏有联系的人，并找出这些人之间的关联关系，最后返回这些关联关系的性别。,"g.V().has('name', '吴宏').out('knows').hasLabel('person').out('knows').hasLabel('person').values('gender')"
"查询全部源点类型是person,边类型是购买,并且f1等于true或权重小于等于157.36的边","g.V().hasLabel('person').outE('buy').or(has('f1', true), has('weight', lte(157.36))).as('e').select('e')"
" 找出以id,value,name分组的university,按value升序排序。","g.V().hasLabel('university').group().by(union(id(), values('value'), values('name')).fold()).by(values('value').fold()).order(local).by(values('value'), asc).select(values)"
"给定图的schema如下:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));给出与user吴若涵有user_likes_repository关系的3跳的环","g.V().has('user', 'name', '吴若涵').as('a').repeat(bothE('user_likes_repository').otherV().simplePath()).times(2).where(cyclicPath()).path().by('id').by('id')"
"给出和编辑何轩有关的读者,再给出和何轩发布的其他书,返回它们","g.V().has('publisher', 'name', '何轩').as('a').bothE().otherV().hasLabel('reader').as('b').select('a').outE('publish').otherV().hasLabel('book').as('c').select('a', 'b', 'c')"
"找出名为Post_276的帖子或标签,以及与其有关的论坛,并返回Post_276的价值和这些论坛的名字","g.V().has('name', 'Post_276').or(hasLabel('post'), hasLabel('tag')).bothE().otherV().hasLabel('forum').project('a.value', 'b.name').by(select(all, 'a').by('value')).by('name')"
查询所有与seller韩雪有关系的buyer的name,"g.V().has('seller', 'name', '韩雪').bothE().otherV().hasLabel('buyer').values('name')"
请帮我找出所有和person Tom之间有提交关系的软件,"g.V().has('person', 'name', 'Tom').outE('commits').inV().hasLabel('software')"
"找出12个和label为department的点有has关系的student,且和这些student有selects关系的course",g.V().hasLabel('department').out('has').hasLabel('student').out('selects').hasLabel('course').limit(12)
"以775,957作为请求点id, 以属性id作为相等条件,请帮我查找名为喜剧的tag,以及与其有关的cinema,并返回喜剧的name和这些cinema的address","g.withSideEffect('p', [775, 957]).V().hasLabel('tag').where(and(__.values('id').is(within('p')), __.has('name', '喜剧'))).as('a').bothE().as('e').otherV().hasLabel('cinema').as('b').select('a', 'b').by('name').by('address')"
"请帮我查找所有和部门点有拥有关系的医生节点,且边满足条件f1不等于false,目标医生节点满足条件身高小于等于159","g.V().hasLabel('department').as('a').outE('has').where(values('f1').is(neq(false))).as('e').inV().hasLabel('doctor').has('height', lte(159)).as('b').select('b')"
返回和仓库FSM之间有拥有关系的用户,"g.V().hasLabel('repository').has('name', 'FSM').outE('has').inV().hasLabel('user')"
 请帮我查找与节点Comment_469和Comment_415共同属于的电影类型节点。,"g.V().has('name', 'Comment_469').outE('belong').inV().hasLabel('film').as('b').inE('belong').outV().has('name', 'Comment_415').select('b')"
找出与《呐喊》有关的书籍,"g.V().hasLabel('book').has('name', '呐喊').outE('relates').inV().as('b').select('b').as('a').select('a', 'b')"
"请帮我查找person杜强knows的person,以及relates这些person的person, 令person的age等于person的height的平均值,令person的gender等于person的id减id的平均值,令person(a)的id等于person(c)的height, 返回person(a)的id,person(b)的name,person(c)的gender","g.V().has('person', 'name', '杜强').as('a').outE('knows').inV().hasLabel('person').as('b').inE('relates').outV().hasLabel('person').as('c').select('a', 'b', 'c').by(project('id', 'age', 'name', 'height').by('id').by(__.values('height').mean()).by('name').by('height')).by(project('id', 'name', 'gender').by('id').by('name').by(__.values('id').mean().math('_ - _'))).by(project('id', 'gender', 'height').by('id').by('gender').by('height')).select(values).unfold().select('a', 'b', 'c').by(project('id', 'age', 'name', 'height').by('id').by('age').by('name').by('height')).by(project('id', 'name', 'gender').by('id').by('name').by('gender')).by(project('id', 'gender', 'height').by('id').by('gender').by('height')).select('a', 'b', 'c').by(project('id').by('height')).by('name').by('gender')"
 请找出与微软公司合作且被其他城市包含的大学数量。,"g.V().has('company', 'name', '微软').outE('cooperate').inV().hasLabel('university').inE('contain').outV().hasLabel('city').dedup().count()"
请帮我查找名字不等于重庆的节点,"g.V().has('name', neq('重庆'))"
"查找全部person的相关者,或其相关者的相关者",g.V().hasLabel('person').repeat(out('relation')).times(2).dedup()
帮我查询与person吴若涵有parent关系的1度以内的环,"g.V().has('person', 'name', '吴若涵').as('a').bothE('parent').bothV().where(eq('a')).as('b').select('a', 'b').by('id').by('id').select(values).unfold().project('a.id', 'b_id').by(select('a')).by(select('b'))"
 找出与王科（buyer)存在取消关系，且与椅子（goods)存在包含关系的订单（orders)节点，返回这些订单的price、name、以及王科的姓名和王科购买的椅子的值。,"g.V().hasLabel('buyer').has('name', '王科').as('a').outE('cancel').inV().hasLabel('orders').as('b').inE('contain').outV().hasLabel('goods').has('name', '椅子').as('c').select('a', 'b', 'c').by('name').by(values('price', 'name')).by('value')"
"以944,455,157作为请求点id, 源点的id等于输入表id,返回所有类型是software的点","g.withSideEffect('p', [944, 455, 157]).V().hasLabel('software').has('id', within('p')).dedup()"
"帮我查询所有与陈宏存在认识关系的作家,作家与作家存在认识关系的点,返回这些点的身高","g.V().has('name', '陈宏').out('knows').hasLabel('author').out('knows').hasLabel('author').values('height')"
找出与person黄思思有属于关系的1跳以内的环,"g.V().has('person', 'name', '黄思思').as('a').bothE('belong').bothV().where(neq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"请帮我找出id为157的person关联的person, 并将person有关的person的性别的最大值赋值给person(b)的薪资, 接着查询person(b)的薪资小于157的person关联的person","g.V().hasLabel('person').has('id', 157).outE('relates').inV().hasLabel('person').as('b').project('b_salary', 'd').by(__.coalesce(__.select('b').bothE().otherV().hasLabel('person').values('gender').max(), __.constant(null))).by(__.select('b').filter(__.values('salary').is(lt(157))).outE('relates').inV().hasLabel('person'))"
找到 Order_452 这个订单,"g.V().hasLabel('orders').has('name', 'Order_452')"
请帮我查找所有person的朋友，或者他们朋友的朋友,"g.V().hasLabel('person').as('a').outE('friend').inV().range(1, 2).as('b').select('b')"
"查找和帖子点有拥有关系的标签节点,且边满足条件f0为空,目标标签节点id大于10","g.V().hasLabel('post').as('a').outE('has').has('f0', eq(null)).as('e').inV().hasLabel('tag').has('id', gt(10)).as('b').select('b')"
"输入请求点id的列表395,946,941,266, 源点的id等于输入表id,给出id为103的点的年龄,薪资,身高","g.V().has('id', within(395, 946, 941, 266)).has('id', '103').project('age', 'salary', 'height').by(values('age')).by(values('salary')).by(values('height'))"
 查找与美团和蚂蚁集团共同合作、类型为大学的节点。,"g.V().has('name', '美团').outE('cooperate').inV().hasLabel('university').as('b').inE('cooperate').outV().has('name', '蚂蚁集团').select('b')"
"查找与何思思存在认识关系的作家,作家与作家存在认识关系的点,返回这些点的身高","g.V().has('name', '何思思').out('knows').hasLabel('author').out('knows').hasLabel('author').values('height')"
"根据等级,名字分组,计算等级对2取余的平均值",g.V().hasLabel('a').group().by('level').by(group().by('name').by(values('level').math('_ % 2').mean()))
"查询类型为大学的点,返回171个",g.V().hasLabel('university').limit(171)
给出与论坛中国诗词论坛和天涯论坛都存在包含关系的点,"g.V().hasLabel('forum').has('name', '中国诗词论坛').outE('contain').inV().as('b').inE('contain').outV().hasLabel('forum').has('name', '天涯论坛').select('b')"
"根据身高,性别,id分组,计算age的个数减94减60的值",g.V().hasLabel('a').group().by('height').by('gender').by('id').by(count().by('age')).select(values).unfold().project('result').by(select(values).math('_ - 94 - 60'))
"用如下schema的图:CREATE GRAPH g ( Vertex film ( id int ID, name varchar, category varchar, value int ), Vertex cinema ( id int ID, name varchar, address varchar, size int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex comment ( id int ID, name varchar, createTime bigint, wordCount int ), Edge film_has_tag ( srcId int FROM film SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean ), Edge cinema_releases_film ( srcId int FROM cinema SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_creates_comment ( srcId int FROM person SOURCE ID, targetId int FROM comment DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge comment_belong_film ( srcId int FROM comment SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_watch_film ( srcId int FROM person SOURCE ID, targetId int FROM film DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));帮我查询188个与文艺和悬疑都存在关系的cinema节点","g.V().has('name', '文艺').outE().inV().hasLabel('cinema').as('b').inE().outV().has('name', '悬疑').select('b').limit(188)"
"给出34个名为周伟的点属于的标签为公司的节点,且节点id大于41且价值不等于792","g.V().has('name', '周伟').outE('belong').inV().hasLabel('company').has('id', gt(41)).has('value', neq(792)).limit(34)"
返回全部和医生李强之间有属于关系的部门,"g.V().hasLabel('doctor').has('name', '李强').outE('belong').inV().hasLabel('department')"
返回与department皮肤科有关系的medicine的price,"g.V().hasLabel('department').has('name', '皮肤科').bothE().otherV().hasLabel('medicine').values('price')"
 请帮我查找与电子科技大学存在关系且与杜科存在关系的大学，并返回它们的级别。,"g.V().has('university', 'name', '电子科技大学').outE().inV().hasLabel('university').as('b').inE().outV().has('student', 'name', '杜科').select('b').values('level')"
请找出与person周思琪有likes关系，并与person郑宏有pay关系的所有person节点。返回这些person的id、person周思琪的id以及person郑宏的salary,"g.V().has('person', 'name', '周思琪').as('a').out('likes').hasLabel('person').as('b').in('pay').has('person', 'name', '郑宏').as('c').select('a', 'b', 'c').by('id').by('id').by('salary')"
帮我查询121个与何思琪和周伟都存在关系的公司或person或账号节点,"g.V().has('name', '何思琪').as('a').outE().as('e').inV().has(label, within('company', 'person', 'account')).as('b').inE().as('e2').outV().has('name', '周伟').as('c').select('b').limit(121)"
"请帮我找出和标签等于城市的点有包含关系的公司,以及和这些公司有属于关系的城市,以及和这些城市有包含关系的公司",g.V().hasLabel('city').as('a').out('contain').hasLabel('company').as('b').out('belong').hasLabel('city').as('c').out('contain').hasLabel('company').as('d').select('d')
"查询和帖子Post_359有关的标签,称为X,再查询和这个X有关联的其他标签,以及和X有关联的标签","g.V().hasLabel('post').has('name', 'Post_359').as('a').bothE().as('e').otherV().hasLabel('tag').as('b').bothE().as('e2').otherV().hasLabel('tag').as('c').select('b').bothE().as('e3').otherV().hasLabel('tag').as('d').select('a', 'b', 'c', 'd')"
"返回被forum contain数量大于41的user,记为relationCount,再查询这些user contain的user","g.V().hasLabel('user').as('a').project('a', 'relationCount').by(identity()).by(__.in('contain').hasLabel('forum').id().mean()).select('a', 'relationCount').where(select('relationCount').is(gt(41))).select('a').out('contain').hasLabel('user')"
 返回Alice选择的课程中，被其他学生选择的数量。,"g.V().hasLabel('student').has('name', 'Alice').outE('selects').inV().hasLabel('course').inE('selects').outV().hasLabel('student').count()"
"请帮我查找59个名为字节的点雇佣的标签等于person的节点,且节点性别为famale或名字是韩建国","g.V().has('name', '字节').outE('employee').inV().hasLabel('person').or(has('gender', 'famale'), has('name', '韩建国')).limit(59)"
找到买方黄国强,"g.V().hasLabel('buyer').has('name', '黄国强')"
"帮我查询11个名为白夜行的点认识的标签为书的节点,且其名字不是白夜行且id在82到99之间","g.V().has('name', '白夜行').out('knows').hasLabel('book').has('name', neq('白夜行')).has('id', between(82, 99)).limit(11)"
"返回源点label为person,边label为认识,且权重为空,f1不等于true的边","g.V().hasLabel('person').outE('knows').where(and(__.not(has('weight')), __.has('f1', neq(true)))).as('e').select('e')"
"给出类型为学生的全部点,并根据身高升序排列","g.V().hasLabel('student').order().by('height', asc)"
"请帮我找出标签为belong,以及满足条件f1不等于false的边","g.E().hasLabel('belong').has('f1', neq(false))"
"查询与loan_27存在存款关系的账号,账号与账号存在转账关系的点,返回这些点的id","g.V().has('name', 'loan_27').out('deposit').hasLabel('account').out('transfer').hasLabel('account').values('id')"
查询读者张月喜欢的书节点关联的书,"g.V().hasLabel('reader').has('name', '张月').out('likes').out('relates')"
"返回源点面积在24155到99007之间或价值的最大值大于35,目标点人数不为空或id不等于71,且类型是包含的边","g.E().hasLabel('contain').where(and(__.inV().or(has('peopleNumber', neq(null)), has('id', neq(71))), __.outV().or(and(has('area', between(24155, 99007)), __.values('value').max().is(gt(35))))))"
帮我查询全部名为徐宏的点认识的person,"g.V().has('name', '徐宏').out('knows').hasLabel('person')"
请帮我找出被用户黄国强喜欢的帖子,"g.V().hasLabel('user').has('name', '黄国强').outE('likes').inV().hasLabel('post').as('b', 'a').select('a', 'b')"
 返回所有起点是部门，终点是医生，且带有拥有标签的边。,g.V().hasLabel('department').outE('has').inV().hasLabel('doctor').path().by(elementMap()).select('edges').unfold().select('edge')
"查找被电影拥有数量大于72的标签,记为relationCount,再查询这些标签拥有的电影院","g.V().hasLabel('tag').as('a').project('a', 'relationCount').by(__.identity()).by(__.outE('has').hasLabel('has').inV().hasLabel('film').id().max()).select('a', 'relationCount').as('b').select('a').where(__.select('b').select('relationCount').is(gt(72))).outE('has').hasLabel('has').inV().hasLabel('cinema').dedup()"
"给出91个价值大于等于515且创建时间是2021年02月23日的账号,根据价值从小到大排列","g.V().hasLabel('account').has('value', gte(515)).has('createTime', '2021-02-23').order().by('value', asc).limit(91)"
"请帮我找出全部名为中国军事论坛的,创建时间等于2010年07月05日的伙伴,返回这些伙伴的id,和边的目标点id","g.V().has('name', '中国军事论坛').outE('partner').as('e').inV().has('createTime', '2010-07-05').project('b.id', 'e.targetId').by(id()).by(select('e').values('targetId'))"
"请帮我找出名为孙建国的,语言是839且字数是170的伙伴,返回这些伙伴的创建时间,和边的源点id,权重,f0","g.V().has('name', '孙建国').outE('partner').as('e').inV().has('lang', 839).has('wordCount', 170).project('b.createTime', 'e.srcId', 'e.weight', 'e.f0').by(values('createTime')).by(select('e').values('srcId')).by(select('e').values('weight')).by(select('e').values('f0'))"
"输入请求点id的列表336,119,167,748,35, 以属性id作为相等条件,帮我查询前7个满足条件name不是徐国强或salary乘7009对1585取余不是190的publisher","g.inject([336, 119, 167, 748, 35]).unfold().as('p').V().hasLabel('publisher').has('id', __.select('p')).filter(or(not(has('name', '徐国强')), not(has('salary', __.math('_ * 7009 % 1585').is(190))))).limit(7)"
"给出和loan loan_46有关的person,称为X,再给出和这个X有关联的其他company,以及和X有关联的account","g.V().has('loan', 'name', 'loan_46').as('a').bothE().otherV().hasLabel('person').as('b').bothE().otherV().hasLabel('company').as('c').select('b').bothE().otherV().hasLabel('account').as('d').select('a', 'b', 'c', 'd')"
"请帮我找出186个年龄在12到43之间的person,根据性别从小到大排列","g.V().hasLabel('person').has('age', between(12, 43)).order().by('gender', asc).limit(186)"
请帮我找出全部与编辑张科有关系的书的字数,"g.V().has('publisher', 'name', '张科').bothE().otherV().hasLabel('book').values('wordCount')"
"帮我查询全部和person点有喜欢关系的person节点,且边满足条件目标点id小于170,目标person节点满足条件性别不等于famale","g.V().hasLabel('person').as('a').outE('likes').has('targetId', lt(170)).as('e').inV().hasLabel('person').has('gender', neq('famale')).as('b').select('b')"
"请帮我查找person赵建国关联的person,被其他person关联的数量","g.V().has('person', 'name', '赵建国').outE('relates').inV().hasLabel('person').inE('relates').outV().hasLabel('person').count()"
找出与Prescription_395和Prescription_356都有联系的55个处方节点,"g.V().has('name', 'Prescription_395').outE().inV().hasLabel('prescription').as('b').inE().outV().has('name', 'Prescription_356').select('b').limit(55)"
"请帮我找出label为教师,名为何宏的点,返回这些点的薪资","g.V().hasLabel('teacher').has('name', '何宏').values('salary')"
返回所有名为Post_192的节点拥有的论坛,"g.V().has('name', 'Post_192').out('has').hasLabel('forum')"
"帮我查询源点满足条件性别不等于famale,目标点满足条件价值为391或规格为small,且标签为属于的边","g.E().hasLabel('belong').where(and(outV().has('gender', neq('famale')), inV().or(has('value', 391), has('scale', 'small'))))"
"给出类型为部门的全部点,并根据价值升序排列","g.V().hasLabel('department').order().by('value', asc)"
"找出医生诊断的病人, 令病人的性别的值等于诊断病人的医生的年龄的平均值, 再查找病人接受的处方","g.V().hasLabel('doctor').as('a').outE('diagnose').as('e').inV().hasLabel('patient').as('b').sideEffect(__.select('b').sack(assign).by(__.inE('diagnose').as('e2').outV().hasLabel('doctor').as('c').values('age').mean()).sack()).select('b').outE('accept').as('e3').inV().hasLabel('prescription').as('d').select('b', 'd').by('gender').by()"
"查询所有和名为罪与罚的书有引用关系,或有引用的引用关系的书","g.V().has('book', 'name', '罪与罚').repeat(out('refers')).times(2).dedup()"
"返回和部门法学院有关的学生,称为X,再返回和这个X有关联的其他学生,以及和X有关联的大学","g.V().has('department', 'name', '法学院').as('a').bothE().otherV().hasLabel('student').as('b').bothE().otherV().hasLabel('student').as('c').select('b').bothE().otherV().hasLabel('university').as('d').select('a', 'b', 'c', 'd')"
"帮我查询全部源点标签为买家,边标签为创造的边,返回这些边的源点id乘156加目标点id的最小值,和f0的数量除731的值","g.V().hasLabel('buyer').outE('creates').project('minValue', 'countValue').by(__.math('srcId * 156 + targetId').min()).by(__.values('f0').count().math('_ / 731'))"
"查找id为23的person关联的软件,和以使用关系关联了这些软件的其他软件","g.V().has('person', 'id', 23).bothE().otherV().hasLabel('software').as('b').inE('uses').otherV().hasLabel('software').as('c').select('b', 'c')"
"请帮我查找全部名为韩宏的点的,id为空且scale大于等于45的friend,返回这些friend的id,和边的srcId,timeStamp,weight","g.V().has('name', '韩宏').outE('friend').as('e').inV().has('id', null).has('scale', gte(45)).as('b').select('b', 'e').by('id').by(values('srcId', 'timeStamp', 'weight'))"
给出和person吴宏之间有喜欢关系的评论,"g.V().has('person', 'name', '吴宏').out('likes').hasLabel('comment')"
给出全部名为中国军事论坛的点contain的post,"g.V().has('name', '中国军事论坛').out('contain').hasLabel('post')"
给出标签为合并请求或事项或仓库的点,"g.V().hasLabel(within('pullRequest', 'issue', 'repository'))"
"用如下schema的图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));找出person认识的person,返回其源点的薪资除薪资的值,以及目标点的age的最大值对51取余的最小值","g.V().hasLabel('person').as('a').outE('person_knows_person').inV().hasLabel('person').as('b').select('a', 'b').by().project('expr1', 'expr2').by(select('a').values('salary').math('_ / _').by(constant(1)).by(select('a').values('salary'))).by(select('b').values('age').max().math('_ % 51').by(constant(51))).select(values).unfold().select(values).min()"
"输入表的列为lang,stars,openSource, 数据为('go',590,true), 源点的lang等于输入表lang,请帮我查找类型为person的点,返回126个","g.withSideEffect('p', [['lang':'go','stars':590,'openSource':true]]).V().hasLabel('person').has('lang', __.select('p').unfold().select('lang')).limit(126)"
"输入请求点id的列表528,995,640,504,588, 以属性id作为相等条件,查找与person陈若涵有关系的film的category","g.inject([528, 995, 640, 504, 588]).as('p').V().hasLabel('person').as('a').where(and(__.select('a').values('id').where(within(select('p'))), __.select('a').has('name', '陈若涵'))).bothE().as('e').otherV().hasLabel('film').as('b').select('b').values('category').dedup()"
 查询与何若涵和黄轩有关联的公共人物节点列表，标签为'person'。,"g.V().hasLabel('person').has('name', '何若涵').outE('relation').inV().as('b').inE('relation').outV().hasLabel('person').has('name', '黄轩').select('b').values('name')"
找出全部名为陈轩的点likes的book,"g.V().has('name', '陈轩').out('likes').hasLabel('book')"
"查询和person韩梅有家人关系的person,再查询以同事关系关联了韩梅的person","g.V().hasLabel('person').has('name', '韩梅').as('a').outE('family').inV().as('b').select('a').inE('colleague').outV().as('c').select('a', 'b', 'c')"
"用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询和prescription Prescription_367有prescription_contain_medicine关系的medicine,以及和prescription Prescription_389有prescription_contain_medicine关系的medicine,将它们都返回","g.V().has('prescription', 'name', 'Prescription_367').as('a').out('prescription_contain_medicine').as('b').select('a').V().has('prescription', 'name', 'Prescription_389').as('c').out('prescription_contain_medicine').as('d').select('a', 'b', 'c', 'd')"
"返回id为11的person有关的person的恋人, 再返回和person有关系的朋友","g.V().has('person', 'id', 11).as('a').bothE().otherV().hasLabel('person').as('b').bothE('lover').otherV().as('c').select('b').bothE('friend').otherV().as('d').select('a', 'b', 'c', 'd')"
"请帮我找出全部学生以年龄,薪资,性别分组的id, 根据id降序排序","g.V().hasLabel('student').group().by(values('age', 'salary', 'gender')).by(values('id').fold()).order(local).by(keys, desc).select(values).unfold().order().by(desc)"
按照部门ID、值和名称对值进行分组，并根据值进行降序排序。,"g.V().hasLabel('department').group().by(values('id', 'value', 'name')).by(valueMap('value')).order(local).by(values, desc)"
"给出贷款loan_89存款的账号,以及存款这些账号的贷款, 令贷款(c)的金额等于贷款(a)的金额乘5942.54对64取余,令贷款的id等于账号的id的求和值乘id加id, 返回贷款(a)的权重,账号(b)的名字,贷款(c)的权重","g.V().has('loan', 'name', 'loan_89').as('a').outE('deposit').as('e').inV().hasLabel('account').as('b').inE('deposit').as('e2').outV().hasLabel('loan').as('c').project('a_weight', 'b_name', 'c_weight').by(select('a').values('weight')).by(select('b').values('name')).by(select('c').values('weight'))"
"查找杭州的点belong的country,然后查找杭州被belong的university,一起返回","g.V().has('name', '杭州').as('a').outE('belong').inV().hasLabel('country').as('b').select('a').inE('belong').outV().hasLabel('university').as('c').select('a', 'b', 'c')"
"帮我查询所有与person有关系的贷款节点,且贷款节点的权重不是183,并返回这些贷款的weight的最小值减权重乘828的求和值,以及贷款的amount的求和值除金额的值","g.V().hasLabel('person').as('a').outE().as('e').inV().hasLabel('loan').has('weight', neq(183)).as('b').group().by(constant(1)).project('sum1', 'sum2').by(__.unfold().select('b').values('weight').min().as('minWeight').select('b').values('weight').as('weight').math('(minWeight - weight) * 828').sum()).by(__.unfold().select('b').values('amount').sum().as('sumAmount').select('b').values('amount').as('amount').math('sumAmount / amount').sum())"
 找到张梅和何伟的共同作家伙伴。,"g.V().has('author', 'name', '张梅').as('a').outE('partner').inV().as('b').inE('partner').outV().has('author', 'name', '何伟').as('c').select('b').limit(150)"
"找出person认识的person, 令person(b)的身高的值等于喜欢person的person的身高的个数, 再查找person喜欢的person","g.V().hasLabel('person').as('a').outE('knows').hasLabel('knows').inV().hasLabel('person').as('b').sideEffect(__.project('height').by(__.in('likes').hasLabel('person').values('height').count()).select('b').property('height', __.select('height'))).select('b').outE('likes').hasLabel('likes').inV().hasLabel('person').as('d').select('b', 'd').by('height').by()"
请帮我找出用户喜欢的35个标签为自己的帖子，以及这些帖子所涉及的所有标签,g.V().hasLabel('user').as('a').outE('likes').as('e').inV().hasLabel('post').as('b').outE('has').as('e2').inV().hasLabel('tag').as('c').select('c').limit(35)
"给出名为Alan和杜国强的,label为person的点公共的恋人节点的名单","g.V().has('person', 'name', 'Alan').out('lover').as('b').in('lover').has('person', 'name', '杜国强').select('b').values('name')"
 找出与字节公司有合作伙伴关系，或者与合作伙伴有合作伙伴关系的软件公司。,"g.V().hasLabel('company').has('name', '字节').outE('partner').inV().hasLabel('software').union(identity(), outE('partner').inV().hasLabel('software')).dedup()"
找出与作家相关的书籍节点，按ID和名称进行分组，并返回ID和名称。,"g.V().hasLabel('author').outE('write').inV().hasLabel('book').group().by(union(values('id'), values('name')).fold()).select(values).unfold().project('b.id', 'b.name').by(select(keys).limit(local, 1)).by(select(keys).tail(local, 1))"
"找出id为49的person有关的person的family, 再找出和person有关系的lover","g.V().has('person', 'id', 49).as('a').bothE().otherV().hasLabel('person').as('b').bothE('family').otherV().as('c').select('b').bothE('lover').otherV().as('d').select('a', 'b', 'c', 'd')"
"查找从person黄思琪出发,经过标签等于knows的边,走1跳到达的person点","g.V().has('person', 'name', '黄思琪').outE('knows').inV().hasLabel('person')"
"根据薪资,年龄分组,计算id乘id的个数","g.V().hasLabel('a').group().by(values('salary', 'age').fold()).by(count().by(values('id').math('_ * _')))"
"找出被城市包含数量大于32的公司,记为relationCount,再查询这些公司包含的公司","g.V().hasLabel('company').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('contain').hasLabel('city').id().max()).where(__.select('relationCount').is(gt(32))).select('a').out('contain').hasLabel('company')"
找出王轩创建的评论,"g.V().hasLabel('person').has('name', '王轩').outE('creates').inV().hasLabel('comment').as('b').select('b').as('a').select('a', 'b')"
找到教名为陈红和赵雪的课程的节点,"g.V().has('name', '陈红').as('a').outE('teach').inV().hasLabel('course').as('b').inE('teach').outV().has('name', '赵雪').as('c').select('b')"
请帮我找出既属于清华大学又属于电子科技大学的点,"g.V().has('university', 'name', '清华大学').outE('belong').inV().as('b').inE('belong').outV().has('university', 'name', '电子科技大学').select('b')"
"给出拥有部门土木学院的大学,和这些大学拥有的部门","g.V().has('department', 'name', '土木学院').in('has').as('b').out('has').as('c').select('b', 'c').by(valueMap(true))"
请帮我查询与复旦大学有关的部门，以及与教师马红有关的课程，并将结果返回。,"g.V().has('university', 'name', '复旦大学').as('a').out('has').as('b').select('a', 'b').by().by().fold().as('univ_dept').V().has('teacher', 'name', '马红').as('c').out('teach').as('d').select('c', 'd').by().by().fold().as('teacher_course').select('univ_dept', 'teacher_course').unfold().unfold()"
"用如下schema的图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));查询名为Prescription_455的prescription,以及与其有关的prescription,并返回Prescription_455的name和这些prescription的name","g.V().has('prescription', 'name', 'Prescription_455').as('a').both().hasLabel('prescription').as('b').select('a', 'b').by('name')"
返回所有由黄雪所写的书及其作者信息,"g.V().has('name', '黄雪').as('a').outE('write').inV().hasLabel('book').as('b').select('a').inE('knows').outV().hasLabel('author').as('c').select('a', 'b', 'c')"
请帮我查找和教师陈建国之间有教关系的课程,"g.V().hasLabel('teacher').has('name', '陈建国').outE('teach').inV().hasLabel('course')"
"查找software uses的software, 令software的openSource的值等于buysoftware的person的height的平均值, 再查找software uses的software","g.V().hasLabel('software').as('a').outE('uses').inV().hasLabel('software').as('b').sideEffect(__.coalesce(__.V().hasLabel('software').as('b_temp').inE('buy').outV().hasLabel('person').values('height').mean(), __.constant(null)).store('b_openSource')).select('b').outE('uses').inV().hasLabel('software').as('d').select('b_openSource', 'd').by(__.select('b_openSource').unfold()).by()"
查询以belong关系关联了film复仇者联盟的comment,"g.V().hasLabel('film').has('name', '复仇者联盟').inE('belong').outV().hasLabel('comment')"
"帮我查询书呐喊关联的书,以及发布这些书的编辑, 令编辑的id等于书的类别,令书的创建时间等于书的id的平均值减5, 返回书(a)的创建时间,书(b)的id,编辑(c)的性别","g.V().hasLabel('book').has('name', '呐喊').as('a').outE('relates').inV().hasLabel('book').as('b').inE('publish').outV().hasLabel('publisher').as('c').select('a', 'b', 'c').by(__.project('createTime', 'id').by(__.values('id').mean().is(neq(null)).by(__.math('_ - 5'))).by(__.id())).by(__.id()).by(__.values('gender')).select(values).unfold().project('a.createTime', 'b.id', 'c.gender').by(select('createTime')).by(select('id')).by(select('gender'))"
 查找与陈伟和李轩有关联的130个课程节点。,"g.V().has('name', '陈伟').outE().inV().hasLabel('course').as('b').inE().outV().has('name', '李轩').select('b').limit(130)"
"返回大学武汉大学合作的公司,以及合作这些公司的大学, 令大学的名字等于大学的id, 返回大学(a)的等级,公司(b)的规格,大学(c)的名字","g.V().has('university', 'name', '武汉大学').as('a').outE('cooperate').as('e').inV().hasLabel('company').as('b').inE('cooperate').as('e2').outV().hasLabel('university').as('c').select('a', 'b', 'c').by('level').by('scale').by(union(identity(), values('id')).fold())"
找出与电影院横店影院有关系的评论的id,"g.V().hasLabel('cinema').has('name', '横店影院').bothE().otherV().hasLabel('comment').values('id')"
给出id大于30且身高不为空的节点,"g.V().has('id', gt(30)).has('height', neq(null))"
请帮我找出与中国科技大学有关系，并且在上海的国家的名字,"g.V().has('university', 'name', '中国科技大学').outE().inV().has('country').as('b').inE().outV().has('city', 'name', '上海').select('b').values('name')"
 查询年龄小于等于86且ID大于等于6758或名字为何科的学生，按身高从小到大排列。,"g.V().hasLabel('student').or(and(has('age', lte(86)), has('id', gte(6758))), has('name', '何科')).order().by('height', asc).limit(94)"
"根据salary,name分组,计算salary对salary取余除34除5435的值","g.V().hasLabel('a').group().by(union(values('salary'), values('name')).fold()).by(values('salary').as('s').math('s % s / 34 / 5435'))"
 查询郑红发布的帖子被其他用户喜欢的数量。,"g.V().has('user', 'name', '郑红').outE('publish').inV().hasLabel('post').inE('likes').outV().hasLabel('user').count()"
请帮我找出20个与李建聪和王轩都存在关系的卖家或买家或商品节点,"g.V().has('name', '李建聪').as('a').outE().as('e').inV().hasLabel(within('seller', 'buyer', 'goods')).as('b').inE().as('e2').outV().has('name', '王轩').as('c').select('b').limit(20)"
给出名为赵月的节点属于的处方,"g.V().has('name', '赵月').outE('belong').inV().hasLabel('prescription')"
 找出与 XiaoHu 相关的账户，找出 XiaoHu 偿还的贷款，然后返回它们。,"g.V().hasLabel('account').has('name', 'XiaoHu').as('a').bothE().otherV().hasLabel('account').as('b').select('a').outE('repay').inV().hasLabel('loan').as('c').select('a', 'b', 'c')"
 陈国强卖什么货物？,"g.V().hasLabel('seller').has('name', '陈国强').as('b').outE('has').as('e').inV().hasLabel('goods').as('a').select('a', 'b')"
帮我查询公司Bilibili属于的城市节点包含的公司,"g.V().hasLabel('company').has('name', 'Bilibili').out('belong').out('contain').hasLabel('company')"
"返回所有与李思琪存在belong关系的department,department与doctor存在has关系的点,返回这些点的age","g.V().has('name', '李思琪').out('belong').hasLabel('department').out('has').hasLabel('doctor').values('age')"
"使用这个图:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找源点value不等于849且value大于443,或value为空,目标点value为空,且类型是orders_contain_goods的边","g.E().hasLabel('orders_contain_goods').where(__.and(__.or(__.and(__.outV().has('value', neq(849)), __.outV().has('value', gt(443))), __.outV().hasNot('value')), __.inV().hasNot('value')))"
找出张轩和吴若涵这两位老师共同的合作伙伴，共有196位。,"g.V().has('teacher', 'name', '张轩').outE('partner').inV().as('b').inE('partner').outV().has('teacher', 'name', '吴若涵').select('b').limit(196)"
"查询城市属于的国家,返回其源点的价值加327的个数,以及目标点的价值乘995的个数","g.V().hasLabel('city').as('a').outE('belong').as('e').inV().hasLabel('country').as('b').select('a', 'b').by('value').project('count_a_plus_327', 'count_b_times_995').by(select('a').math('_ + 327').count()).by(select('b').math('_ * 995').count())"
请帮我找出以contain关系关联了user周国强的forum,"g.V().hasLabel('user').has('name', '周国强').in('contain').hasLabel('forum')"
"查询course线性代数belong的department, 令department的size等于department的id, 返回course的id, department的id","g.V().hasLabel('course').has('name', '线性代数').as('a').outE('belong').as('e').inV().hasLabel('department').as('b').project('a_id', 'b_id').by(select('a').id()).by(select('b').id())"
 找到一个共同标签为'部门'的节点，该节点属于Amily和张伟。,"g.V().has('name', 'Amily').outE('belong').inV().hasLabel('department').as('b').inE('belong').outV().has('name', '张伟').select('b')"
找出所有和电影院好视影院之间有上映关系的电影,"g.V().hasLabel('cinema').has('name', '好视影院').outE('releases').inV().hasLabel('film')"
查找与seller何强有has关系的2跳的环,"g.V().has('seller', 'name', '何强').as('a').outE('has').inV().as('b').where(__.out().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"帮我查询源点规格不等于small或名字等于字节或价值小于508,目标点id大于3,等级小于2,且类型是合作的边","g.V().has('scale', neq('small')).or(has('name', '字节')).or(has('value', lt(508))).outE('cooperate').as('e').inV().has('id', gt(3)).has('level', lt(2)).select('e')"
"查询所有和公司点有属于关系的城市节点,且边满足条件f1不是false,目标城市节点面积大于39449","g.V().hasLabel('company').as('a').outE('belong').has('f1', neq(false)).as('e').inV().hasLabel('city').has('area', gt(39449)).as('b').select('b')"
找到与医生赵若涵和药品枇杷糖浆相关的处方节点,"g.V().hasLabel('doctor').has('name', '赵若涵').bothE('creates').otherV().hasLabel('prescription').as('b').bothE('contain').otherV().hasLabel('medicine').has('name', '枇杷糖浆').select('b')"
"使用列为id,scale,value, 数据为(20,'small',420),(35,'large',100),(42,'small',107),(81,'small',188)的子查询作为输入表, 源点的value等于输入表value,查询所有类型是大学的点","g.inject([['id':20, 'scale':'small', 'value':420], ['id':35, 'scale':'large', 'value':100], ['id':42, 'scale':'small', 'value':107], ['id':81, 'scale':'small', 'value':188]]).as('p').flatMap(select('p').unfold()).as('row').V().hasLabel('university').as('a').where(eq('a')).by('value').by(select('row').select('value')).select('a')"
请帮我查找名为何伟的点喜欢的person,"g.V().has('name', '何伟').outE('likes').inV().hasLabel('person')"
"请帮我查找person徐月喜欢的person,被其他person喜欢的数量","g.V().has('person', 'name', '徐月').out('likes').in('likes').dedup().count()"
找出所有与合并请求PR-354有关系的合并请求的名字,"g.V().hasLabel('pullRequest').has('name', 'PR-354').bothE().otherV().hasLabel('pullRequest').values('name')"
"请帮我找出从公司Bilibili出发,经过label为雇佣的边,走1度到达的person点","g.V().hasLabel('company').has('name', 'Bilibili').outE('employee').inV().hasLabel('person').range(0, 1)"
请帮我找出173个与天涯论坛和知乎都存在关系的标签节点,"g.V().has('name', '天涯论坛').outE().inV().hasLabel('tag').as('b').inE().outV().has('name', '知乎').select('b').limit(173)"
"输入请求点id的列表189,644,520,493,363, 源点的id等于输入表id,给出id为158的person有关的person的朋友, 再给出和person有关系的同事","g.withSideEffect('p', [189, 644, 520, 493, 363]).V().hasLabel('person').where(and(values('id').is(within('p')), values('id').is(eq('158')))).as('a').bothE().otherV().hasLabel('person').as('b').outE('person_friend_person').otherV().as('c').select('b').outE('person_colleague_person').otherV().as('d').select('a', 'b', 'c', 'd')"
"查询类型为software的点,返回191个",g.V().hasLabel('software').limit(191)
请找出与患者马建国和杜建国有接受关系的所有处方，并将它们一起返回。,"g.V().has('patient', 'name', '马建国').as('a').out('accept').as('b').select('a').V().has('patient', 'name', '杜建国').as('c').out('accept').as('d').select('a', 'b', 'c', 'd')"
"使用这个图:CREATE GRAPH g ( Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找和prescription Prescription_443有关的prescription,称为X,再请帮我查找和这个X有关联的其他prescription,以及和X有关联的user","g.V().has('prescription', 'name', 'Prescription_443').as('a').bothE().otherV().hasLabel('prescription').as('b').bothE().otherV().hasLabel('prescription').as('c').select('b').bothE().otherV().hasLabel('user').as('d').select('a', 'b', 'c', 'd')"
"查找名为张思琪和李红的,标签等于读者的点公共的伙伴节点的名单","g.V().hasLabel('reader').has('name', '张思琪').as('a').outE('partner').inV().as('b').inE('partner').outV().hasLabel('reader').has('name', '李红').as('c').select('b').values('name')"
"查询买家的三角的环,边label为创造, 并返回这些点的id","g.V().hasLabel('buyer').as('a').outE('creates').inV().as('b').outE('creates').inV().as('c').where(__.out('creates').as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"请帮我查找label为编辑的点,返回38个",g.V().hasLabel('publisher').limit(38)
 请问上海所属的国家是什么？重庆有哪些大学包含在其中？,"g.V().has('city', 'name', '上海').as('a').out('belong').as('b').select('a').V().has('city', 'name', '重庆').as('c').out('contain').as('d').select('a', 'b', 'c', 'd')"
"帮我查询publisher的三角的环,边label为publish, 并返回这些点的id","g.V().hasLabel('publisher').as('a').outE('publish').inV().as('b').outE('publish').inV().as('c').where(__.inE('publish').outV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"查找被account repay数量大于46的loan,记为relationCount,再查询这些loan repay的loan","g.V().hasLabel('loan').as('a').project('a', 'relationCount').by(identity()).by(bothE('repay').hasLabel('repay').otherV().hasLabel('account').dedup().count()).where(select('relationCount').is(gt(46))).select('a').outE('repay').hasLabel('repay').otherV().hasLabel('loan').dedup()"
"找出和标签其他有关的帖子,称为X,再找出和这个X有关联的其他标签,以及和X有关联的帖子","g.V().has('tag', 'name', '其他').as('a').bothE().otherV().hasLabel('post').as('b').bothE().otherV().hasLabel('tag').as('c').select('b').bothE().otherV().hasLabel('post').as('d').select('a', 'b', 'c', 'd')"
 找出标签为person且名称为张思琪的点，返回这些点的gender和salary。,"g.V().hasLabel('person').has('name', '张思琪').project('gender', 'salary').by('gender').by('salary')"
"以177,360,969作为请求点id, 源点的id等于输入表id,帮我查询用户孙科喜欢的帖子,被其他论坛包含的数量","g.inject([177, 360, 969]).unfold().as('p').V().hasLabel('user').has('id', __.select('p')).has('name', '孙科').as('a').outE('user_likes_post').inV().hasLabel('post').as('b').inE('forum_contain_post').outV().hasLabel('forum').as('c').select('c').dedup().count()"
找出与'中国军事论坛'有关联的人员，以及与用户'马思思'有关联的帖子，并返回所有结果。,"g.V().hasLabel('forum').has('name', '中国军事论坛').as('a').outE('contain').inV().hasLabel('person').as('b').select('a').V().hasLabel('user').has('name', '马思思').as('c').outE('publish').inV().hasLabel('post').as('d').select('a', 'b', 'c', 'd')"
"使用列为value,name,area, 数据为(81,'武汉',49205)的子查询作为输入表, 源点的name等于输入表name,请帮我找出标签等于company,名为阿里的点,返回这些点的value","g.withSideEffect('p', [['value':81, 'name':'武汉', 'area':49205]]).V().hasLabel('company').has('name', '武汉').has('name', '阿里').values('value')"
"帮我查询所有名为韩建国的,age小于41且age大于等于31的lover,返回这些lover的id,和边的targetId,weight","g.V().has('name', '韩建国').outE('lover').as('e').inV().has('age', lt(41)).has('age', gte(31)).as('b').select('b', 'e').by('id').by(values('targetId', 'weight').fold())"
 找出与微软有隶属关系且属于法国的城市的节点，返回这些城市的名称、人口数量、微软的隶属关系以及法国的隶属关系。,"g.V().has('company', 'name', '微软').as('a').outE('belong').as('e').inV().hasLabel('city').as('b').inE('belong').as('e2').outV().has('country', 'name', '法国').as('c').select('a', 'b', 'c').by('value').by(values('peopleNumber', 'name').fold()).by('peopleNumber')"
 请帮我找出医院里所有外科医生的名单，然后帮我找出属于某个外科的医生，一并回复我。,"g.V().has('name', '外科').as('a').outE('has').inV().hasLabel('doctor').as('b').select('a').inE('belong').outV().hasLabel('doctor').as('c').select('a', 'b', 'c')"
" 请帮我查询所有以age、name、id分组的人的ID,并按ID升序排序。","g.V().hasLabel('person').group().by(values('age', 'name', 'id').fold()).by(values('id').fold()).order(local).by(keys, asc).select(values).unfold()"
"查找id为83的person knows的person, 并将person有关的person的height的和赋值给person(b)的id, 接着查询person(b)的id小于83的person likes的person","g.V().has('person', 'id', 83).out('knows').hasLabel('person').as('b').project('b_id', 'd').by(__.coalesce(__.select('b').bothE().otherV().hasLabel('person').values('height').sum(), __.constant(0))).by(__.select('b').filter(__.values('id').is(lt(83))).out('likes').hasLabel('person'))"
 请找出与韩红有恋人关系的对象，以及与韩红有亲属关系的人。,"g.V().has('person', 'name', '韩红').as('a').out('lover').hasLabel('person').as('b').select('a').in('family').hasLabel('person').as('c').select('a', 'b', 'c')"
"帮我查询patient的三角的环,边标签为accept, 并返回这些点的id","g.V().hasLabel('patient').as('a').outE('accept').inV().as('b').outE('accept').inV().as('c').where(__.outE('accept').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
 请问文学院有哪些老师？,"g.V().hasLabel('department').has('name', '文学院').as('b').inE('has').as('e').outV().hasLabel('teacher').as('a').select('a', 'b')"
"请帮我找出133个名字不等于神探狄仁杰或类别等于文艺,且名字是西虹市首富的电影,根据价值从小到大排列","g.V().hasLabel('film').has('name', '西虹市首富').and(has('name', neq('神探狄仁杰')).or().has('category', '文艺')).order().by('value', asc).limit(133)"
"以763,762,894,613,994作为请求点id, 以属性id作为相等条件,帮我查询前174个满足条件年龄为空或薪资小于等于50或身高不为空的编辑","g.withSideEffect('p', [763, 762, 894, 613, 994]).V().has('id', within('p')).or(hasNot('age'), has('salary', lte(50)), has('height')).limit(174)"
"请帮我找出所有与杭州存在包含关系的大学,大学与公司存在合作关系的点,返回这些点的id","g.V().has('name', '杭州').out('contain').hasLabel('university').out('cooperate').hasLabel('company').id()"
"请帮我查找和person周科有喜欢关系的person,再请帮我查找以认识关系关联了周科的person","g.V().has('person', 'name', '周科').as('a').outE('likes').inV().hasLabel('person').as('b').select('a').inE('knows').outV().hasLabel('person').as('c').select('a', 'b', 'c')"
"找出订单Order_327包含的商品,以及查看这些商品的买家, 令商品的价格等于商品的id乘id,令买家的价格等于商品的类别的平均值, 返回订单的价值,商品的名字,买家的名字","g.V().hasLabel('orders').has('name', 'Order_327').as('a').outE('contain').inV().hasLabel('goods').as('b').inE('look').outV().hasLabel('buyer').as('c').select('a', 'b', 'c').by(choose(values('value')).option(none, constant('null')).option(__.identity())).by(choose(values('name')).option(none, constant('null')).option(__.identity())).by(choose(values('name')).option(none, constant('null')).option(__.identity())).project('a_value', 'b_name', 'c_name').by(select('a').values('value')).by(select('b').values('name')).by(select('c').values('name'))"
请帮我找出所有名为'呐喊'的书籍的详细信息，包括它们的ID、字数和出版年份。,"g.V().hasLabel('book').has('name', '呐喊').project('a.id', 'a.wordCount', 'a.id').by(values('id')).by(values('wordCount')).by(values('id'))"
"查询前50个年龄为空或名字是赵若涵,且id大于80的作家","g.V().hasLabel('author').or(hasNot('age'), has('name', '赵若涵')).has('id', gt(80)).limit(50)"
 查找与纽约有关的公司和与澳大利亚有关的城市，并返回它们。,"g.V().has('city', 'name', '纽约').as('a').out('contain').hasLabel('company').as('b').select('a').V().has('country', 'name', '澳大利亚').as('c').out('contain').hasLabel('city').as('d').select('a', 'b', 'c', 'd')"
"返回读者杜月喜欢的书,被其他书关联的数量","g.V().has('reader', 'name', '杜月').out('likes').in('relates').count()"
给出全部标签为大学或教师或部门的点,"g.V().hasLabel(within('university', 'teacher', 'department'))"
"请帮我查找全部id为74的部门关联的学生,和以拥有关系关联了这些学生的其他部门","g.V().has('department', 'id', 74).bothE().otherV().hasLabel('student').as('b').inE('has').outV().hasLabel('department').as('c').select('b', 'c')"
"帮我查询全部JavaGuid的点拥有的合并请求,然后帮我查询JavaGuid被喜欢的用户,一起返回","g.V().has('name', 'JavaGuid').as('a').outE('has').inV().hasLabel('pullRequest').as('b').select('a').inE('likes').outV().hasLabel('user').as('c').select('a', 'b', 'c')"
"找出orders Order_404 contain的goods,以及look这些goods的buyer","g.V().hasLabel('orders').has('name', 'Order_404').outE('contain').inV().hasLabel('goods').as('b').inE('look').outV().hasLabel('buyer').as('c').select('b', 'c')"
"给出全部和评论点有属于关系的电影节点,且边满足条件f0等于717,目标电影节点满足条件id不等于37","g.V().hasLabel('comment').as('a').outE('belong').has('f0', 717).as('e').inV().hasLabel('film').has('id', neq(37)).as('b').select('b')"
"使用这个图:CREATE GRAPH g ( Vertex forum ( id int ID, name varchar, peopleNumber int, createTime bigint, value int ), Vertex post ( id int ID, name varchar, lang varchar, createTime bigint, wordCount int, value int ), Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex tag ( id int ID, name varchar, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge forum_contain_post ( srcId int FROM forum SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_likes_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge post_has_tag ( srcId int FROM post SOURCE ID, targetId int FROM tag DESTINATION ID, weight double, f0 int, f1 boolean ), Edge forum_contain_person ( srcId int FROM forum SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_publish_post ( srcId int FROM user SOURCE ID, targetId int FROM post DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找全部与post有关系的post节点,且post节点的name不是Post_392,并返回这些点的id除57加725的最小值,以及value除53的求和值","g.V().hasLabel('post').as('a').outE().inV().hasLabel('post').has('name', neq('Post_392')).as('b').select('b').project('min_val', 'sum_val').by(__.values('id').math('_ / 57 + 725').min()).by(__.values('value').math('_ / 53').sum())"
"查找doctor diagnose的patient, 令patient的height的值等于diagnosepatient的doctor的salary的和, 再查找patient accept的prescription","g.V().hasLabel('doctor').as('a').outE('diagnose').as('e').inV().hasLabel('patient').as('b').sideEffect(__.select('b').property('height', __.select('b').inE('diagnose').as('e2').outV().hasLabel('doctor').as('c').values('salary').sum())).select('b').outE('accept').as('e3').inV().hasLabel('prescription').as('d').select('b', 'd').by('height').by()"
"帮我查询patient陈建国accept的prescription,以及accept这些prescription的patient","g.V().has('patient', 'name', '陈建国').as('a').outE('accept').as('e').inV().hasLabel('prescription').as('b').inE('accept').as('e2').outV().hasLabel('patient').as('c').select('b', 'c')"
"找出和评论Comment_165有属于关系的电影,再找出以属于关系关联了Comment_165的电影","g.V().hasLabel('comment').has('name', 'Comment_165').as('a').outE('belong').inV().hasLabel('film').as('b').select('a').inE('belong').outV().hasLabel('film').as('c').select('a', 'b', 'c')"
"请帮我找出person的三角的环,边标签等于knows, 并返回这些点的id","g.V().hasLabel('person').as('a').outE('knows').inV().as('b').outE('knows').inV().as('c').where(__.outE('knows').inV().as('a')).select('a', 'b', 'c').by().by('id').by('id').project('a', 'b_id', 'c_id').by().by(select('b')).by(select('c'))"
"给定图的schema如下:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));找出所有id为1的商品关联的商品,和以拥有关系关联了这些商品的其他卖家","g.V().has('goods', 'id', 1).bothE().otherV().hasLabel('goods').as('b').inE('seller_has_goods').outV().hasLabel('seller').as('c').select('b', 'c')"
帮我查询被person杜雪关联的person,"g.V().hasLabel('person').has('name', '杜雪').as('b').outE('relates').as('e').inV().hasLabel('person').as('a').select('a', 'b')"
 陈科和张国强共同创造了一些东西。,"g.V().has('buyer', 'name', '陈科').outE('creates').inV().as('b').inE('creates').outV().has('buyer', 'name', '张国强').select('b')"
"返回全部源点height在171到191之间,目标点stars小于356,且label为likes的边","g.E().hasLabel('likes').where(and(__.outV().has('height', between(171, 191)), __.inV().has('stars', lt(356))))"
请帮我查找与公司华为和腾讯都存在申请关系的点,"g.V().has('company', 'name', '华为').outE('apply').inV().as('b').inE('apply').outV().has('company', 'name', '腾讯').select('b')"
请帮我查找id为74的person的parent，再帮我查找与person相关的parent。,"g.V().has('person', 'id', '74').as('a').bothE().otherV().hasLabel('person').as('b').outE('parent').otherV().as('c').select('b').outE('parent').otherV().as('d').select('a', 'b', 'c', 'd')"
返回与person周轩有关系的person的年龄,"g.V().has('person', 'name', '周轩').bothE().otherV().hasLabel('person').values('age')"
找出以关联关系关联了person郑国强的person,"g.V().hasLabel('person').has('name', '郑国强').inE('relates').outV()"
 请帮我查找名为杜伟和周梅的，标签为作家的朋友圈名单。,"g.V().has('author', 'name', '杜伟').out('friend').as('b').in('friend').has('author', 'name', '周梅').select('b').values('name')"
"以113,62,351,466,633作为请求点id, 以属性id作为相等条件,请帮我找出10个department传染部和放射科,共同的partner","g.inject([113, 62, 351, 466, 633]).unfold().as('p').V().hasLabel('department').has('id', __.select('p')).has('name', '传染部').as('a').outE('partner').as('e').inV().as('b').inE('partner').as('e2').outV().hasLabel('department').has('name', '放射科').as('c').select('b').limit(10)"
"给出标签等于person的点,返回181个",g.V().hasLabel('person').limit(181)
"帮我查询与person周思思有关系的person, 返回和这些person有关联的person的,height的求和值除身高的值","g.V().has('person', 'name', '周思思').bothE().otherV().hasLabel('person').bothE().otherV().hasLabel('person').group().by().by(values('height').sum()).select(values).unfold().as('sums').select('sums').by(identity()).by(select('sums').math('_ / _').by(constant(1)).by(values('height'))).select(values)"
"给定图的schema如下:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找country的三角的环,边类型是country_contain_city, 并返回这些点的id","g.V().hasLabel('country').as('a').out('country_contain_city').as('b').out('country_contain_city').as('c').where(__.in('country_contain_city').as('a')).select('a', 'b', 'c').by().by(id()).by(id()).project('a', 'b_id', 'c_id').by().by(select('b')).by(select('c'))"
"用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出doctor王轩的标签等于friend的边,并根据weight从小到大排列,返回14个","g.V().hasLabel('doctor').has('name', '王轩').outE('friend').order().by('weight', asc).limit(14).inV()"
"帮我查询user的三角的环,边标签为creates, 并返回这些点的id","g.V().hasLabel('user').as('a').outE('creates').inV().as('b').outE('creates').inV().as('c').where(__.inE('creates').outV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"给出所有和名为功夫的电影有朋友关系,或有朋友的朋友关系的标签","g.V().has('film', 'name', '功夫').bothE('friend').otherV().hasLabel('tag').simplePath().by(T.id).dedup()"
"找出所有名为PR-301的,权重不为空的相关者,返回这些相关者的语言,和边的f0,f1,权重","g.V().has('name', 'PR-301').outE('relation').as('e').inV().as('b').has('weight', neq(null)).select('b', 'e').by('lang').by(project('f0', 'f1', 'weight').by('f0').by('f1').by('weight'))"
"查找49个名为Post_233的点拥有的类型为标签的节点,且节点价值小于等于984,价值大于等于339","g.V().has('name', 'Post_233').outE('has').inV().hasLabel('tag').has('value', between(339, 984)).limit(49)"
"返回所有和名为黄若涵的publisher有friend关系,或有friend的friend关系的book","g.V().has('publisher', 'name', '黄若涵').repeat(out('friend')).times(2).hasLabel('book').dedup()"
 查询孙国强买家创建的订单中包含的商品。,"g.V().hasLabel('buyer').has('name', '孙国强').out('creates').hasLabel('orders').out('contain').hasLabel('goods')"
"帮我查询名为Order_202和Order_439的,标签等于订单的点公共的伙伴节点的名单","g.V().hasLabel('orders').has('name', 'Order_202').outE('partner').inV().as('b').inE('partner').outV().hasLabel('orders').has('name', 'Order_439').select('b').values('name')"
查询与buyer张梅有关，且与goods键盘有关系的seller节点。,"g.V().hasLabel('buyer').has('name', '张梅').bothE('consult').otherV().hasLabel('seller').bothE('has').otherV().hasLabel('goods').has('name', '键盘').select('seller')"
"查找名为徐思琪的点的,语言为French或创建时间为1998年07月09日的朋友,返回这些朋友的价值,和边的权重,f1,f0","g.V().has('name', '徐思琪').outE('friend').as('e').inV().as('b').where(or(__.has('lang', 'French'), __.has('createTime', '1998-07-09'))).select('b', 'e').by('value').by(project('weight', 'f1', 'f0').by('weight').by('f1').by('f0'))"
"以120作为请求点id, 以属性id作为相等条件,查找和person点有belong关系的company节点,且边满足条件f1不是true,目标company节点满足条件value在286到707之间","g.inject(120).as('p').V().hasLabel('person').has('id', __.select('p')).as('a').outE('person_belong_company').has('f1', neq(true)).as('e').inV().hasLabel('company').has('value', between(286, 707)).as('b').select('b')"
"使用这个图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查找源点类型为医生,目标点类型为病人,类型为doctor_diagnose_patient的边",g.E().hasLabel('doctor_diagnose_patient').where(outV().hasLabel('doctor')).where(inV().hasLabel('patient'))
 请找出我们公司所有的关联账户，以及它们与其他账户之间的存款关系。,"g.V().has('company', 'id', '148').bothE().otherV().hasLabel('account').as('b').inE('deposit').outV().hasLabel('loan').as('c').select('b', 'c')"
"输入表的列为name,peopleNumber,scale, 数据为('腾讯',604,'large'),('蚂蚁集团',545,'medium'),('蚂蚁集团',753,'large'),('滴滴',909,'small'), 源点的name等于输入表name,查询所有和person吴建聪之间有person_buy_software关系的software","g.withSideEffect('p', [['腾讯', 604, 'large'], ['蚂蚁集团', 545, 'medium'], ['蚂蚁集团', 753, 'large'], ['滴滴', 909, 'small']]).V().hasLabel('person').has('name', '吴建聪').outE('person_buy_software').inV().hasLabel('software').dedup()"
查询'三体'这本书中，refers关系的partner。,"g.V().has('book', 'name', '三体').out('refers').out('relation').out('partner')"
"返回类型为person的点,返回87个",g.V().hasLabel('person').limit(87)
"请帮我找出名为推特的论坛,以及与其有关的帖子,并返回推特的名字和这些帖子的id","g.V().hasLabel('forum').has('name', '推特').bothE().otherV().hasLabel('post').project('a.name', 'b.id').by(select(all, 'a').values('name')).by(values('id'))"
"帮我查询类型为喜欢,并且满足条件f1不是false的边","g.E().hasLabel('likes').has('f1', neq(false))"
"请帮我找出id为90的买家有关的买家的相关者, 再请帮我找出和买家有关系的相关者","g.V().has('buyer', 'id', 90).as('a').bothE().otherV().hasLabel('buyer').as('b').bothE('relation').otherV().as('c').select('b').bothE('relation').otherV().as('d').select('a', 'b', 'c', 'd')"
帮我查询与买家孙科有取消关系的1跳以内的环,"g.V().has('buyer', 'name', '孙科').as('a').bothE('cancel').bothV().where(neq('a')).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
 找出Order_398和Order_289共同包含的节点，并且这些节点被标记为商品。,"g.V().has('name', 'Order_398').out('contain').hasLabel('goods').as('b').in('contain').has('name', 'Order_289').select('b')"
给出作家张梅撰写的书节点关联的书,"g.V().has('author', 'name', '张梅').out('write').out('relates').dedup()"
"找出类型是person,名为杜思琪的点,返回这些点的age,name","g.V().hasLabel('person').has('name', '杜思琪').project('age', 'name').by('age').by('name')"
"帮我查询age小于96或gender是famale的doctor belong的department的名称,以及这些department has的doctor的名称","g.V().hasLabel('doctor').or(has('age', lt(96)), has('gender', 'famale')).outE('belong').inV().hasLabel('department').as('b').outE('has').inV().hasLabel('doctor').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
 查询所有与某人相关的贷款，以及这些贷款与哪些公司有关联。,"g.V().has('person', 'id', '19').bothE().otherV().hasLabel('loan').as('b').inE('apply').outV().hasLabel('company').as('c').select('b', 'c')"
"请帮我找出名为历史的论坛,以及与其有关的帖子,并返回历史的价值和这些帖子的价值","g.V().hasLabel('forum').has('name', '历史').bothE().otherV().hasLabel('post').project('a.value', 'b.value').by(select('a').values('value')).by(values('value'))"
"查找id为137的点的name,value,id","g.V().has('id', 137).project('a.name', 'a.value', 'a.id').by('name').by('value').by('id')"
 找出喜欢Post_232的用户。,"g.V().hasLabel('post').has('name', 'Post_232').inE('likes').outV().hasLabel('user')"
请帮我找出满足条件价值小于等于818的节点,"g.V().has('value', lte(818))"
"找出所有和person张轩有关系的person或company或software,返回这些点的id,value,lang","g.V().has('person', 'name', '张轩').bothE().otherV().hasLabel(within('person', 'company', 'software')).project('id', 'value', 'lang').by(id()).by(values('value')).by(values('lang'))"
"输入表的列为height,name,id, 数据为(177,'郑强',43),(183,'吴科',41), 源点的id等于输入表id,找出被person Amily支付的person","g.withSideEffect('p', [[177, '郑强', 43], [183, '吴科', 41]]).V().hasLabel('person').as('a').where(and(__.select('a').values('id'), __.select('a').values('id').is(within(__.select('p').unfold().tail(2))))).select('a').inE('person_pay_person').as('e').outV().hasLabel('person').has('name', 'Amily').as('b').select('a', 'b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));给出所有id为84的teacher关联的teacher,和以has关系关联了这些teacher的其他department","g.V().has('teacher', 'id', 84).bothE().otherV().hasLabel('teacher').as('b').inE('department_has_teacher').outV().hasLabel('department').as('c').select('b', 'c')"
找出tag的2度的环,"g.V().hasLabel('tag').as('a').out().range(1, 1).as('b').where(__.out().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
请帮我找出person的1跳的环,"g.V().hasLabel('person').as('a').both().as('b').where('a', eq('b')).by(T.id).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').values('id')).by(select('b').values('id'))"
"以979,558,746,250,209作为请求点id, 源点的id等于输入表id,帮我查询名为孙强的seller,以及与其有关的goods,并返回孙强的name和这些goods的sellerNumber","g.inject([979, 558, 746, 250, 209]).unfold().as('p').V().hasLabel('seller').has('id', __.as('p')).has('name', '孙强').as('a').bothE().otherV().hasLabel('goods').as('b').select('a', 'b').by('name').by('sellerNumber')"
 能帮我找出与商品杯子有关联的买家吗？,"g.V().hasLabel('goods').has('name', '杯子').inE('look').outV().hasLabel('buyer')"
"请帮我找出133个名为美团的点雇佣的标签等于person的节点,且其薪资等于164","g.V().has('name', '美团').outE('employee').inV().hasLabel('person').has('salary', 164).limit(133)"
"帮我查询源点label为university,边label为belong,且f1不等于true且f0大于等于950的边","g.V().hasLabel('university').outE('belong').has('f1', neq(true)).has('f0', gte(950)).dedup()"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询和person吴强有person_likes_person关系的person,再帮我查询以person_likes_person关系关联了吴强的person","g.V().has('person', 'name', '吴强').as('a').bothE('person_likes_person').as('e', 'e2').otherV().as('b', 'c').select('a', 'b', 'c')"
请帮我查找被department计算机学院has的student,"g.V().hasLabel('department').has('name', '计算机学院').outE('has').inV().hasLabel('student').as('b').select('b').by().as('a').select('a', 'b')"
"给出id为183的点的价值,名字","g.V().has('id', 183).project('a.value', 'a.name').by(values('value')).by(values('name'))"
"请帮我找出与名为阿里和Bilibili的点共同属于的,类型是城市的节点","g.V().has('name', '阿里').outE('belong').inV().hasLabel('city').as('b').inE('belong').outV().has('name', 'Bilibili').select('b')"
返回与病人马建聪有接受关系的3跳以内的环,"g.V().has('patient', 'name', '马建聪').as('a').repeat(bothE('accept').otherV().simplePath()).times(2).where(cyclicPath()).path().unfold().filter(hasLabel('patient')).dedup().project('a.id', 'b_id').by(select('a').id()).by(id())"
"返回160个和类型是person的点有朋友关系的person,且和这些person有同事关系的person",g.V().hasLabel('person').as('a').outE('friend').as('e').inV().hasLabel('person').as('b').outE('colleague').as('e2').inV().hasLabel('person').as('c').select('c').limit(160)
"查询标签等于电影的点,返回80个",g.V().hasLabel('film').limit(80)
返回城市的3度的环,"g.V().hasLabel('city').as('a').repeat(both().simplePath()).times(2).where(loops().is(2)).as('b').where(out().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').values('id')).by(select('b').values('id'))"
value除value的最小值,g.V().hasLabel('a').project('result').by(values('value').math('_ / _')).select('result').min()
"输入请求点id的列表186, 以属性id作为相等条件,帮我查询被处方Prescription_236包含的药品","g.withSideEffect('p', [[186]]).V().hasLabel('medicine').as('a').where(__.select('a').values('id').is(within(__.select('p').unfold()))).where(__.in('prescription_contain_medicine').hasLabel('prescription').has('name', 'Prescription_236').as('b')).select('a', 'b')"
返回159个与郑月和韩思琪都存在关系的person节点,"g.V().has('name', '郑月').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '韩思琪').select('b').limit(159)"
"请帮我找出所有和名为PR-488的合并请求有伙伴关系,或有伙伴的伙伴关系的仓库","g.V().hasLabel('pullRequest').has('name', 'PR-488').repeat(out('partner')).times(2).hasLabel('repository').dedup()"
查询所有和doctor陈月之间有belong关系的department,"g.V().has('doctor', 'name', '陈月').outE('belong').inV().hasLabel('department')"
 请帮我查找所有订单源点与商品目标点之间的包含边。,g.V().hasLabel('orders').outE('contain').inV().hasLabel('goods').select('e')
"查询id小于等于67或name为复旦大学的university has的department的名称,以及这些department has的student的名称","g.V().hasLabel('university').has('id', lte(67)).or().has('name', '复旦大学').outE('has').inV().hasLabel('department').as('b').outE('has').inV().hasLabel('student').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"返回label为拥有,以及满足条件f0小于851或f0大于等于834的边","g.E().hasLabel('has').or(has('f0', lt(851)), has('f0', gte(834)))"
 找出在天津的公司。,"g.V().hasLabel('city').has('name', '天津').outE('contain').inV().hasLabel('company').as('b', 'a').select('a', 'b')"
"用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));给出全部id为109的doctor关联的patient,和以diagnose关系关联了这些patient的其他doctor","g.V().hasLabel('doctor').has('id', 109).bothE().otherV().hasLabel('patient').as('b').inE('doctor_diagnose_patient').outV().hasLabel('doctor').as('c').select('b', 'c')"
返回与68个公司类型的点有归属关系的城市，以及这些城市中包含的公司。,g.V().hasLabel('company').as('a').out('belong').hasLabel('city').as('b').out('contain').hasLabel('company').as('c').select('c').limit(68)
给出所有和贷款loan_49之间有存款关系的账号,"g.V().hasLabel('loan').has('name', 'loan_49').outE('deposit').inV().hasLabel('account')"
"返回人数为空或人数不等于962的公司创造的软件的名称,以及这些软件 使用的软件的名称","g.V().hasLabel('company').has('peopleNumber', eq(null)).or().has('peopleNumber', neq(962)).out('creates').hasLabel('software').as('b').out('uses').hasLabel('software').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"请帮我找出从person赵思思出发,经过标签等于家人的边,走1度到达的person点","g.V().has('person', 'name', '赵思思').outE('family').inV().hasLabel('person')"
"请帮我找出被city武汉belong的country,和武汉contain的company","g.V().has('city', 'name', '武汉').as('b').outE('belong').inV().hasLabel('country').as('a').select('b').outE('contain').inV().hasLabel('company').as('c').select('a', 'b', 'c')"
从publisher赵科出发，沿着publish标签的边走3步，找到对应的book点,"g.V().has('publisher', 'name', '赵科').repeat(out('publish')).times(3).hasLabel('book')"
"查询学生的三角的环,边标签为选择, 并返回这些点的id","g.V().hasLabel('student').as('a').outE('selects').inV().as('b').outE('selects').inV().as('c').where(__.out('selects').as('a')).select('a', 'b', 'c').by(__.id()).by(__.id()).by(__.id()).project('a', 'b_id', 'c_id').by(__.select('a')).by(__.select('b')).by(__.select('c'))"
请帮我找出id为124的点的规格,"g.V().has('id', 124).values('scale')"
"给出王月的点选择的课程,然后给出王月被拥有的部门,一起返回","g.V().has('name', '王月').as('a').outE('selects').inV().hasLabel('course').as('b').select('a').inE('has').outV().hasLabel('department').as('c').select('a', 'b', 'c')"
找出标签的2跳以内的环,"g.V().hasLabel('tag').as('a').optional(__.out().as('b').where(__.out().as('a'))).select('a', 'b').by('id').by(coalesce(__.values('id'), constant('null')))"
"帮我查询所有源点标签等于编辑,边标签等于发布的边,返回这些边的targetId的最小值除149的平均值,和权重对113.75取余除94的值","g.V().hasLabel('publisher').outE('publish').project('avg_min_targetId_div_149', 'weight_mod_113_75_div_94').by(__.values('targetId').min().math('_ / 149').mean()).by(__.values('weight').math('_ % 113.75').math('_ / 94'))"
"请帮我查找全部id为44的论坛关联的帖子,和以包含关系关联了这些帖子的其他论坛","g.V().has('forum', 'id', 44).bothE().otherV().hasLabel('post').as('b').inE('contain').outV().hasLabel('forum').as('c').select('b', 'c')"
"查询与名为何伟和孙宏的点共同关联的,类型为person的节点","g.V().has('name', '何伟').out('relates').as('b').in('relates').has('name', '孙宏').select('b').hasLabel('person')"
"以339作为请求点id, 源点的id等于输入表id,请帮我找出全部和company美团有关系的company节点,返回这些点的id,scale,name","g.withSideEffect('p', [339]).V().hasLabel('company').has('id', within('p')).has('name', '美团').bothE().otherV().hasLabel('company').project('b.id', 'b.scale', 'b.name').by(values('id')).by(values('scale')).by(values('name'))"
'韩国和英国是133个国家中的共同合作伙伴。',"g.V().has('country', 'name', '韩国').outE('partner').inV().as('b').inE('partner').outV().has('country', 'name', '英国').select('b').limit(133)"
"请帮我查找全部源点类型是country,边类型是contain,且f0在950到966之间的边","g.V().hasLabel('country').outE('contain').has('f0', between(950, 966))"
"请帮我找出country contain的city,返回其源点的peopleNumber对85082取余的值,以及目标点的id的平均值乘id对42139取余的最小值","g.V().hasLabel('country').as('a').outE('contain').inV().hasLabel('city').as('b').select('a', 'b').by(values('peopleNumber')).by(values('id')).project('mod_people', 'min_val').by(select('a').math('_ % 85082')).by(select('b').fold().project('avg_id', 'id').by(mean()).by().math('(avg_id * _) % 42139').min())"
请帮我查找全部和合并请求PR-462有2跳关系的事项,"g.V().hasLabel('pullRequest').has('name', 'PR-462').repeat(out().simplePath()).times(2).hasLabel('issue').dedup()"
找出与Comment_134和Comment_389都有归属关系的点,"g.V().has('comment', 'name', 'Comment_134').out('belong').as('b').in('belong').has('comment', 'name', 'Comment_389').select('b')"
"查询用户黄伟发布的帖子,被其他用户喜欢的数量","g.V().has('user', 'name', '黄伟').outE('publish').inV().hasLabel('post').inE('likes').outV().hasLabel('user').count()"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出标签等于university_belong_city,以及f0在669到871之间的边","g.E().hasLabel('university_belong_city').has('f0', between(669, 871))"
查询与名为'周宏'的人不同名的 person 对象，以及这些对象认识的所有 person 的名称。,"g.V().hasLabel('person').has('name', neq('周宏')).as('a').outE('relates').as('e').inV().hasLabel('person').as('b').outE('knows').as('e2').inV().hasLabel('person').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
找到位于越南的城市中的大学。,"g.V().has('country', 'name', '越南').out('contain').hasLabel('city').out('contain').hasLabel('university')"
"查找名为杜国强的点观看的全部电影,并对这些电影的id进行求和","g.V().has('name', '杜国强').outE('watch').inV().hasLabel('film').values('id').sum()"
"给出与author何思思有关,且与book少年闰土有关系的author节点","g.V().has('author', 'name', '何思思').bothE('knows').otherV().hasLabel('author').bothE('write').otherV().has('book', 'name', '少年闰土').select('b')"
获取用户的所有朋友，以及这些朋友的其他朋友。,g.V().hasLabel('user').as('a').outE('friend').inV().hasLabel('user').as('b').select('b')
"请帮我查找所有和person点有创造关系的评论节点,且边满足条件目标点id小于等于49,目标评论节点创建时间等于2019年10月20日","g.V().hasLabel('person').as('a').outE('creates').as('e').has('targetId', lte(49)).inV().hasLabel('comment').has('createTime', '2019-10-20').as('b').select('b')"
"用这个schema:CREATE GRAPH g ( Vertex user ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_user ( srcId int FROM repository SOURCE ID, targetId int FROM user DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge repository_has_issue ( srcId int FROM repository SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge issue_belong_repository ( srcId int FROM issue SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ), Edge user_creates_issue ( srcId int FROM user SOURCE ID, targetId int FROM issue DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge user_likes_repository ( srcId int FROM user SOURCE ID, targetId int FROM repository DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询用户何伟的标签为伙伴的边,并根据目标点id升序排列,返回22个","g.V().has('user', 'name', '何伟').outE('partner').order().by('targetId', asc).limit(22).inV()"
"找出创造软件Hive的公司,和这些公司雇佣的person","g.V().has('software', 'name', 'Hive').in('creates').as('b').out('employee').as('c').select('b', 'c')"
"输入表的列为age,name,id, 数据为(82,'马思思',98),(23,'黄思琪',10),(53,'李宏',6),(92,'杜强',75), 以属性id作为相等条件,找出89个与周轩和郑宏都存在关系的person节点","g.inject([['age':82,'name':'马思思','id':98],['age':23,'name':'黄思琪','id':10],['age':53,'name':'李宏','id':6],['age':92,'name':'杜强','id':75]]).unfold().as('p').V().has('id', __.select('p').select('id')).has('name', '周轩').as('a').outE().as('e').inV().hasLabel('person').as('b').inE().as('e2').outV().has('name', '郑宏').as('c').select('b').limit(89)"
"查询label为uses,并且满足条件weight不为空,weight在110.62到115.19之间的边","g.E().hasLabel('uses').has('weight', between(110.62, 115.19))"
给出repository的3度的环,"g.V().hasLabel('repository').as('a').repeat(both().simplePath()).times(3).where(cyclicPath()).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').values('id')).by(select('b').values('id'))"
 查询与department节点关联的teacher节点，按其id和salary分组，返回id和salary。,"g.V().hasLabel('department').bothE('has').otherV().hasLabel('teacher').group().by(values('id', 'salary')).by(fold())"
给出与公司美团有申请关系的2跳的环,"g.V().has('company', 'name', '美团').as('a').bothE('apply').bothV().where(neq('a')).as('b').bothE().bothV().where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
 返回与土木学院相关的大学，再返回土木学院的其他教师。,"g.V().has('department', 'name', '土木学院').as('a').bothE().otherV().hasLabel('university').as('b').select('a').bothE('has').otherV().hasLabel('teacher').as('c').select('a', 'b', 'c')"
"请帮我找出与城市有关系的国家节点,且国家节点的名字不等于澳大利亚,并返回这些国家的价值除218的平均值,以及国家的id的求和值乘id的值","g.V().hasLabel('city').as('a').outE().as('e').inV().hasLabel('country').has('name', neq('澳大利亚')).as('b').select('b').project('avg_value', 'sum_id_times_id').by(__.values('value').math('_ / 218').mean()).by(__.values('id').sum().math('_ * __.select(""b"").values(""id"")'))"
"调用personalRank函数,以'cZ', 3作为输入,返回id, value","g.call('PERSONALRANK').with('input', 'cZ').with('depth', 3).select('id', 'value')"
"以562,656,753,715,800作为请求点id, 源点的id等于输入表id,请帮我查找被person杜科commits的software","g.inject([562, 656, 753, 715, 800]).unfold().as('p').V().has('software', 'id', __.select('p')).as('a').in('person_commits_software').has('person', 'name', '杜科').as('b').select('a', 'b')"
"返回账号Faker转账的账号, 令账号的id等于账号的id乘0, 返回账号(a)的是否冻结, 账号(b)的是否冻结","g.V().has('account', 'name', 'Faker').as('a').outE('transfer').as('e').inV().as('b').project('a.isBlock', 'b.isBlock').by(select('a').values('isBlock')).by(select('b').values('isBlock'))"
 孙建聪取消了哪个订单？,"g.V().hasLabel('buyer').has('name', '孙建聪').outE('cancel').inV().hasLabel('orders').as('b', 'a').select('a', 'b')"
"请帮我查找id为130的person关联的person, 并将person有关的person的id的最大值赋值给person(b)的年龄, 接着查询person(b)的年龄小于130的person关联的person","g.V().hasLabel('person').has('id', 130).outE('relates').inV().hasLabel('person').as('b').project('b_age', 'd').by(__.select('b').bothE().otherV().hasLabel('person').values('id').max()).by(__.select('b').filter(__.values('b_age').is(lt(130))).outE('relates').inV().hasLabel('person'))"
"查询源点身高的最小值大于等于192且薪资在2412到4802之间,边标签为投资,且源点id小于等于24或源点id小于152或源点id加52的最小值大于33的边,返回这些边的目标点id减171的值","g.V().hasLabel('a').has('salary', between(2412, 4802)).group().by(constant('minHeight')).by(values('height').min()).unfold().filter(select(values).is(gt(191))).select(keys).V().as('a').outE('invest').as('e').filter(or(has('srcId', lte(24)), has('srcId', lt(152)), group().by(constant('minSrcIdPlus52')).by(values('srcId').math('_ + 52').min()).unfold().filter(select(values).is(gt(33))).select(keys))).select('e').values('targetId').math('_ - 171')"
"查询height为空的buyer consult的seller的名称,以及这些seller ask的buyer的名称","g.V().hasLabel('buyer').has('height').where(__.not(__.values('height'))).out('consult').hasLabel('seller').as('b').out('ask').hasLabel('buyer').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
查询id为38的patient有关的doctor的friend，再查询这些friend与doctor的关系。,"g.V().has('patient', 'id', '38').as('a').bothE().bothV().hasLabel('doctor').as('b').bothE('friend').bothV().as('c').select('b').bothE('relation').bothV().as('d').select('a', 'b', 'c', 'd')"
"查找大学四川大学属于的城市,以及属于这些城市的公司","g.V().has('university', 'name', '四川大学').outE('belong').inV().hasLabel('city').as('b').inE('belong').outV().hasLabel('company').as('c').select('b', 'c')"
找出名为李红的节点查看的订单或商品,"g.V().has('name', '李红').outE('look').inV().hasLabel(within('orders', 'goods')).dedup()"
请帮我查一下赵伟和杜梅的共同朋友，他们都是卖家。,"g.V().has('seller', 'name', '赵伟').out('friend').as('b').in('friend').has('seller', 'name', '杜梅').select('b').limit(166)"
"请帮我查找patient赵建聪accept的prescription,以及creates这些prescription的doctor","g.V().hasLabel('patient').has('name', '赵建聪').outE('accept').inV().hasLabel('prescription').as('b').inE('creates').outV().hasLabel('doctor').as('c').select('b', 'c')"
"查询id为83的标签关联的标签,和以拥有关系关联了这些标签的其他帖子","g.V().has('tag', 'id', 83).bothE().otherV().hasLabel('tag').as('b').inE('has').otherV().hasLabel('post').as('c').select('b', 'c')"
"输入表的列为gender,height,salary, 数据为('male',158,5671), 以属性height作为相等条件,请帮我找出person的2跳的环","g.withSideEffect('p', [['gender': 'male', 'height': 158, 'salary': 5671]]).V().hasLabel('person').has('height', __.select('p').unfold().select('height')).as('a').both().as('b').both().where(eq('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"以109,673,306,844,191作为请求点id, 以属性id作为相等条件,返回类型为company的点","g.inject([109, 673, 306, 844, 191]).unfold().as('p').V().has('company', 'id', __.select('p')).dedup()"
"输入请求点id的列表660,870,111, 源点的id等于输入表id,返回id为70的person有关的person的同事, 再返回和person有关系的家人","g.withSideEffect('p', [660, 870, 111]).V().hasLabel('person').has('id', within('p')).has('id', '70').as('a').bothE().otherV().hasLabel('person').as('b').bothE('person_colleague_person').otherV().as('c').select('b').bothE('person_family_person').otherV().as('d').select('a', 'b', 'c', 'd')"
 返回与耳鼻喉科部门有has关系的医生，以及赵国强接受的处方。,"g.V().hasLabel('department').has('name', '耳鼻喉科').as('a').out('has').hasLabel('doctor').as('b').select('a', 'b').V().hasLabel('patient').has('name', '赵国强').as('c').out('accept').hasLabel('prescription').as('d').select('c', 'd').select('a', 'b', 'c', 'd')"
返回全部和person杜科之间有恋人关系的person,"g.V().hasLabel('person').has('name', '杜科').outE('lover').inV().hasLabel('person')"
"给出全部和pullRequest PR-249有关系的issue,返回这些点的changeFileNumber","g.V().hasLabel('pullRequest').has('name', 'PR-249').bothE().otherV().hasLabel('issue').values('changeFileNumber')"
"输入请求点id的列表119, 源点的id等于输入表id,请帮我找出名为杜科和吴国强的,标签等于person的点公共的朋友节点的名单","g.withSideEffect('p', [119]).V().hasLabel('person').has('id', within('p')).has('name', '杜科').outE('friend').inV().as('b').inE('friend').outV().hasLabel('person').has('name', '吴国强').select('b').values('name')"
 找出 username 为 '周建国' 的用户。,"g.V().hasLabel('user').has('name', '周建国')"
 请帮我查找person源点与贷款目标点之间申请的边。,g.V().hasLabel('person').outE('apply').as('e').inV().hasLabel('loan').select('e')
"返回名为李若涵的点关联的person,并对这些person的身高进行求和","g.V().has('name', '李若涵').outE('relates').inV().hasLabel('person').values('height').sum()"
"以915,453,521,412,790作为请求点id, 源点的id等于输入表id,请帮我找出和person杜思思有关的person,再请帮我找出和杜思思person_lover_person的其他person,返回它们","g.withSideEffect('p', [915, 453, 521, 412, 790]).V().hasLabel('person').has('id', within('p')).has('name', '杜思思').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('person_lover_person').inV().hasLabel('person').as('c').select('a', 'b', 'c')"
帮我查询类型为大学的点,g.V().hasLabel('university')
"找出person支付的person,返回其源点的id的平均值加9的值,以及目标点的身高减163的最小值","g.V().hasLabel('person').as('a').outE('pay').as('e').inV().hasLabel('person').as('b').select('a', 'b').by('id').by('height').project('avg_id_plus_9', 'min_height_diff').by(__.select('a').mean().math('_ + 9')).by(__.select('b').math('_ - 163').min())"
"返回全部源点人数小于等于25,目标点id为空或身高等于162,且类型为包含的边","g.V().has('peopleNumber', lte(25)).outE('contain').as('e').inV().where(or(has('id', eq(null)), has('height', 162))).select('e')"
"查找和国家澳大利亚有关的大学,称为X,再查找和这个X有关联的其他公司,以及和X有关联的大学","g.V().has('country', 'name', '澳大利亚').as('a').bothE().otherV().hasLabel('university').as('b').bothE().otherV().hasLabel('company').as('c').select('b').bothE().otherV().hasLabel('university').as('d').select('a', 'b', 'c', 'd')"
"帮我查询62个名为陈伟的点申请的类型是贷款的节点,且节点金额小于3797.92且金额不是6939.67","g.V().has('name', '陈伟').outE('apply').inV().hasLabel('loan').has('amount', lt(3797.92)).has('amount', neq(6939.67)).limit(62)"
"帮我查询所有teacher的relation,或其relation的relation",g.V().hasLabel('teacher').repeat(out('relation')).times(2).dedup()
"找出81个名字等于体育学院,价值在113到615之间,价值为空的部门,根据名字从小到大排列","g.V().hasLabel('department').has('name', '体育学院').has('value', between(113, 615)).hasNot('value').order().by('name', asc).limit(81)"
"请帮我找出名为郑思思的patient,以及与其有关的patient,并返回郑思思的id和这些patient的id","g.V().hasLabel('patient').has('name', '郑思思').as('a').bothE().otherV().hasLabel('patient').as('b').select('a', 'b').by('id')"
给出病人的3度以内的环,"g.V().hasLabel('patient').as('a').repeat(both().simplePath().as('b')).times(2).emit().where(__.both().where(eq('a'))).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"输入表的列为credit,id,courseHour, 数据为(3,75,26), 以属性id作为相等条件,给出全部与计算机学院存在department_has_student关系的学生,学生与课程存在student_selects_course关系的点,返回这些点的名字","g.withSideEffect('p', [['credit':3, 'id':75, 'courseHour':26]]).V().has('id', __.select('p').unfold().select('id')).has('name', '计算机学院').out('department_has_student').hasLabel('student').out('student_selects_course').hasLabel('course').values('name')"
"以'cG', 53, 'Po'作为输入调用SSSP函数,返回运算结果","g.withSideEffect('cG', 'cG').withSideEffect('53', 53).withSideEffect('Po', 'Po').V().hasLabel('cG').has('id', 53).has('type', 'Po').shortestPath().with(ShortestPath.target, hasLabel('Po')).with(ShortestPath.distance, 'distance').project('id', 'distance').by(select('target').id()).by(select('distance'))"
帮我查询前174个类型是同事的边,g.E().hasLabel('colleague').limit(174)
找出所有被徐强和马红都咨询过的点,"g.V().has('buyer', 'name', '徐强').outE('consult').inV().as('b').inE('consult').outV().has('buyer', 'name', '马红').select('b').dedup()"
 找周梅在微软公司的同事或联系人。,"g.V().has('company', 'name', '微软').bothE('employee').otherV().hasLabel('person').bothE('knows').otherV().has('person', 'name', '周梅').as('c').select('c').by(__.bothE('knows').otherV().hasLabel('person').bothE('employee').otherV().has('company', 'name', '微软')).dedup()"
返回与person周科有喜欢关系的1度以内的环,"g.V().has('person', 'name', '周科').as('a').bothE('likes').otherV().where(loops().is(1)).as('b').select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a').values('id')).by(select('b').values('id'))"
"查找99个和类型是医生的点有属于关系的部门,且和这些部门有拥有关系的医生",g.V().hasLabel('doctor').as('a').out('belong').hasLabel('department').as('b').out('has').hasLabel('doctor').as('c').select('c').limit(99)
 找出所有从大学到城市的边，且边标签为'belong'。,g.V().hasLabel('university').outE('belong').as('e').inV().hasLabel('city').select('e')
给出标签为读者的点,g.V().hasLabel('reader')
"请帮我查找buyer的三角的环,边标签为consult, 并返回这些点的id","g.V().hasLabel('buyer').as('a').outE('consult').inV().as('b').outE('consult').inV().as('c').where(__.out('consult').as('a')).select('a', 'b', 'c').by(id()).by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
"输入请求点id的列表499, 以属性id作为相等条件,计算所有person的salary减2294的值","g.withSideEffect('p', [499]).V().hasLabel('person').as('a').where(__.as('a').values('id').is(__.select('p'))).values('salary').math('_ - 2294')"
"使用这个图:CREATE GRAPH g ( Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex loan ( id int ID, amount double, weight int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我找出和person赵思琪有person_invest_company关系的company,再请帮我找出以person_invest_company关系关联了赵思琪的company","g.V().has('person', 'name', '赵思琪').as('a').outE('person_invest_company').inV().as('b').select('a').inE('person_invest_company').outV().as('c').select('a', 'b', 'c')"
帮我查询author的3跳的环,"g.V().hasLabel('author').as('a').repeat(both().simplePath()).times(3).where(loops().is(3)).where(eq('a')).select('a').by('id').project('a.id', 'b_id').by(select('a').by('id')).by(select('a').both().both().both().simplePath().where(eq('a')).id())"
 给出weight不是5267.41或id在71到82之间的loan deposit的账户名称，以及这些账户转移的账户名称。,"g.V().hasLabel('loan').or(has('weight', neq(5267.41)), has('id', between(71, 82))).outE('deposit').inV().hasLabel('account').as('b').outE('transfer').inV().hasLabel('account').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"以'fQ', 'Jq'作为输入调用personalRank函数,返回id, value","g.call('personalRank').with('input1', 'fQ').with('input2', 'Jq').project('id', 'value').by(__.select('id')).by(__.select('value'))"
"给出标签等于person,名为徐月的点,返回这些点的gender,name","g.V().hasLabel('person').has('name', '徐月').project('gender', 'name').by('gender').by('name')"
找出在百度贴吧的论坛中，被其他用户喜欢的帖子数量。,"g.V().has('forum', 'name', '百度贴吧').out('contain').as('b').in('likes').as('c').select('b').dedup().count()"
请帮我找出被person何红观看的电影,"g.V().hasLabel('person').has('name', '何红').as('b').outE('watch').as('e').inV().hasLabel('film').as('a').select('a', 'b')"
"调用SSSP函数,以10, 4, 62作为输入,返回id, distance","g.call('SSSP').with('parameters', [10, 4, 62]).select('id', 'distance')"
"查找与repository Flink存在has关系,且与repository Kafka存在likes关系的user节点，返回这些user的name,age,及repository Flink的lang,及repository Kafka的weight","g.V().has('repository', 'name', 'Flink').as('a').out('has').hasLabel('user').as('b').in('likes').has('repository', 'name', 'Kafka').as('c').select('a', 'b', 'c').by('lang').by(values('name', 'age')).by('weight')"
"请帮我找出全部和person张伟有关系的person,返回这些点的age,salary","g.V().hasLabel('person').has('name', '张伟').bothE().otherV().hasLabel('person').project('age', 'salary').by(values('age')).by(values('salary'))"
"用这个schema:CREATE GRAPH g ( Vertex course ( id int ID, name varchar, credit int, courseHour int, value int ), Vertex teacher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex student ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, size int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Edge department_has_teacher ( srcId int FROM department SOURCE ID, targetId int FROM teacher DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_student ( srcId int FROM department SOURCE ID, targetId int FROM student DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_has_department ( srcId int FROM university SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ), Edge teacher_teach_course ( srcId int FROM teacher SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ), Edge student_selects_course ( srcId int FROM student SOURCE ID, targetId int FROM course DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我找出全部名为浙江大学的点拥有的部门","g.V().has('university', 'name', '浙江大学').out('university_has_department').hasLabel('department')"
"返回源点标签为合并请求,目标点标签为仓库,标签为事项的边",g.E().hasLabel('issue').where(outV().hasLabel('pullRequest')).where(inV().hasLabel('repository'))
 帮我找找我有处方的朋友，或者朋友的朋友。,g.V().hasLabel('prescription').outE('friend').inV().outE('friend').inV().dedup()
"查找全部名为Light的点的,价值在723到751之间或上次登录时间不等于2002年08月04日的朋友,返回这些朋友的上次登录时间,和边的源点id,目标点id","g.V().has('name', 'Light').outE('friend').as('e').inV().as('b').where(or(__.has('value', between(723, 751)), __.has('lastLoginTime', neq('2002-08-04')))).select('b', 'e').by('lastLoginTime').by(union(__.select('srcId'), __.select('targetId')).fold())"
"请帮我查找被医生陈强属于的部门,和陈强属于的部门","g.V().hasLabel('doctor').has('name', '陈强').as('b').bothE('belong').otherV().hasLabel('department').as('a', 'c').select('a', 'b', 'c')"
请帮我查找全部与课程大学物理有关系的学生的身高,"g.V().hasLabel('course').has('name', '大学物理').bothE().otherV().hasLabel('student').values('height')"
"输入请求点id的列表198,695,538,833, 以属性id作为相等条件,请帮我查找前36个类型是person_knows_person的边","g.inject([198, 695, 538, 833]).unfold().as('p').V().has('id', __.select('p')).outE('person_knows_person').limit(36)"
"查询用户张月发布的帖子,以及发布这些帖子的用户, 令用户的id等于用户的id减47,令帖子的价值等于帖子的价值加78,令用户的id等于用户的性别的最大值, 返回用户(a)的性别,帖子(b)的价值,用户(c)的身高","g.V().has('user', 'name', '张月').as('a').outE('publish').inV().hasLabel('post').as('b').inE('publish').outV().hasLabel('user').as('c').select('a', 'b', 'c').by(project('id', 'gender').by(values('id').math('_ - 47')).by(values('gender'))).by(project('value', 'height').by(values('value').math('_ + 78')).by(constant(null))).by(project('id', 'height').by(values('gender').max()).by(values('height'))).select(values).unfold().project('a.gender', 'b.value', 'c.height').by(select('a').select('gender')).by(select('b').select('value')).by(select('c').select('height'))"
请帮我找出王建国喜欢的评论，以及这些评论所属电影的ID,"g.V().has('person', 'name', '王建国').out('likes').hasLabel('comment').out('belong').hasLabel('film').id()"
 请帮我查询与ID为69的处方相关的用户关系，并查询与这些用户有关系的用户的朋友。,"g.V().has('prescription', 'id', '69').as('a').bothE().as('e').otherV().hasLabel('user').as('b').outE('relation').as('e2').inV().as('c').select('b').outE('friend').as('e3').inV().as('d').select('a', 'b', 'c', 'd')"
请帮我查找全部与大学华中科技大学有关系的教师的身高,"g.V().has('university', 'name', '华中科技大学').bothE().otherV().hasLabel('teacher').values('height')"
请帮我找出163个与马轩和赵梅都存在关系的user节点,"g.V().has('name', '马轩').outE().inV().hasLabel('user').as('b').inE().outV().has('name', '赵梅').select('b').limit(163)"
 返回与华中科技大学和电子科技大学有has关系的department。,"g.V().has('university', 'name', '华中科技大学').as('a').out('has').as('b').select('a').V().has('university', 'name', '电子科技大学').as('c').out('has').as('d').select('a', 'b', 'c', 'd')"
"请帮我查找和名为Hive的software有relation关系,或有relation的relation关系的software","g.V().has('software', 'name', 'Hive').out('relation').emit().repeat(__.out('relation')).times(2).hasLabel('software').dedup()"
 搜索南京大学。,"g.V().hasLabel('university').has('name', '南京大学')"
"使用这个图:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex country ( id int ID, name varchar, area int, peopleNumber int, value int ), Vertex university ( id int ID, name varchar, level int, value int ), Vertex city ( id int ID, name varchar, area int, peopleNumber int, value int ), Edge country_contain_city ( srcId int FROM country SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_belong_country ( srcId int FROM city SOURCE ID, targetId int FROM country DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_cooperate_university ( srcId int FROM company SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_university ( srcId int FROM city SOURCE ID, targetId int FROM university DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_belong_city ( srcId int FROM university SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_belong_city ( srcId int FROM company SOURCE ID, targetId int FROM city DESTINATION ID, weight double, f0 int, f1 boolean ), Edge university_cooperate_company ( srcId int FROM university SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ), Edge city_contain_company ( srcId int FROM city SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean ));请帮我查找id为136的国家关联的国家,和以属于关系关联了这些国家的其他城市","g.V().has('country', 'id', 136).both().hasLabel('country').as('b').in('city_belong_country').hasLabel('city').as('c').select('b', 'c')"
"给出类型是包含,且满足条件目标点id的和小于104.30的边",g.E().hasLabel('contain').where(__.inV().values('targetId').sum().is(lt(104.30))).select('e')
找出所有源头是person，目标是account，类型是own的边。,g.V().hasLabel('person').outE('own').where(inV().hasLabel('account'))
找出所有名为孙月的用户点，返回它们的id、salary和height。,"g.V().hasLabel('user').has('name', '孙月').project('a.id', 'a.salary', 'a.height').by(values('id')).by(values('salary')).by(values('height'))"
"找出cinema横店影院releases的film,以及releases这些film的cinema, 令cinema的address等于cinema的id对98取余, 返回cinema(a)的size,film(b)的value,cinema(c)的name","g.V().hasLabel('cinema').has('name', '横店影院').as('a').outE('releases').inV().hasLabel('film').as('b').inE('releases').outV().hasLabel('cinema').as('c').select('a', 'b', 'c').by(project('size', 'address').by('size').by(__.select('a').values('id').math('_ % 98'))).by('value').by('name')"
"给出类型为user,名为李若涵的点,返回这些点的id,age","g.V().hasLabel('user').has('name', '李若涵').project('a.id', 'a.age').by('id').by('age')"
"以(52,152,'famale')作为请求表数据,属性分别为age,height,gender, 源点的height等于输入表height,请帮我查找名为陈强的person","g.withSideEffect('p', [['age':52, 'height':152, 'gender':'famale']]).V().hasLabel('person').has('height', __.select('p').unfold().select('height')).has('name', '陈强')"
 找出与Tom有关且与黄若涵有关的人。,"g.V().has('person', 'name', 'Tom').bothE('lover').otherV().hasLabel('person').bothE('lover').otherV().has('person', 'name', '黄若涵').path().by(__.choose(__.hasLabel('person'), __.values('name'), __.label())).unfold().filter(__.hasLabel('person')).dedup()"
 返回名称为孤城和悲惨世界且标签为书的节点。,"g.V().has('name', '孤城').outE('relates').inV().hasLabel('book').as('b').inE('relates').outV().has('name', '悲惨世界').select('b')"
"帮我查询id为145的repository has的user, 并将user有关的issue的createTime的数量赋值给user的age, 接着查询user的age小于145的user likes的repository","g.V().has('repository', 'id', 145).out('has').hasLabel('user').as('b').sideEffect(__.project('age').by(__.bothE().otherV().hasLabel('issue').values('createTime').count()).select('age').store('b_age')).select('b').where(__.select('b_age').is(lt(145))).out('likes').hasLabel('repository').as('d').select('b').values('age').as('b_age').select('d').select('b_age', 'd')"
"请帮我找出116个名为Spark的点uses的label为software的节点,且其openSource是false或openSource等于false","g.V().has('name', 'Spark').outE('uses').inV().hasLabel('software').has('openSource', false).limit(116)"
"查找120个名为韩建国的点likes的类型为post的节点,且其lang不等于German","g.V().has('name', '韩建国').outE('likes').inV().hasLabel('post').has('lang', neq('German')).limit(120)"
找出与Comment_133和Comment_401都有关联的点,"g.V().has('comment', 'name', 'Comment_133').as('a').outE('belong').inV().as('b').inE('belong').outV().has('comment', 'name', 'Comment_401').as('c').select('b')"
"请帮我查找stars在355到679之间的repository has的pullRequest的名称,以及这些pullRequest belong的repository的名称","g.V().hasLabel('repository').has('stars', between(355, 679)).out('has').hasLabel('pullRequest').as('b').out('belong').hasLabel('repository').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"返回被评论属于数量大于91的电影,记为relationCount,再查询这些电影属于的电影","g.V().hasLabel('film').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('belong').hasLabel('comment').values('id').sum()).where(__.select('relationCount').is(gt(91))).select('a').out('belong').hasLabel('film')"
请帮我查找id为138的company的相关partner，以及与该company相关的partner,"g.V().has('company', 'id', '138').as('a').bothE().otherV().hasLabel('company').as('b').bothE().hasLabel('partner').otherV().as('c').select('b').bothE().hasLabel('partner').otherV().as('d').select('a', 'b', 'c', 'd')"
"用这个schema:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));查找前161个满足条件薪资大于1849的医生","g.V().hasLabel('doctor').has('salary', gt(1849)).limit(161)"
"找出person认识的person, 令person的性别的值等于雇佣person的公司的人数的最小值, 再查找person属于的公司","g.V().hasLabel('person').as('a').outE('knows').inV().hasLabel('person').as('b').sideEffect(__.select('b').inE('employee').outV().hasLabel('company').values('peopleNumber').min().as('minPeopleNumber').select('b').property('gender', __.select('minPeopleNumber'))).select('b').outE('belong').inV().hasLabel('company').as('d').select('b', 'd').by('gender').by()"
"找出全部名为Tugraph的,创建时间的最大值是272或id为空的相关者,返回这些相关者的权重,和边的源点id","g.V().has('name', 'Tugraph').outE('relation').as('e').inV().as('b').where(or(__.select('b').values('createTime').max().is(eq(272)), __.select('b').hasNot('id'))).select('b', 'e').by('weight').by('srcId')"
"请帮我找出大学电子科技大学拥有的部门,以及属于这些部门的课程","g.V().has('university', 'name', '电子科技大学').outE('has').inV().hasLabel('department').as('b').inE('belong').outV().hasLabel('course').as('c').select('b', 'c')"
"查找与公司美团存在属于关系,且与国家澳大利亚存在属于关系的城市节点，返回这些城市的价值,及公司美团的名字,及国家澳大利亚的人数","g.V().has('company', 'name', '美团').as('a').outE('belong').inV().hasLabel('city').as('b').inE('belong').outV().has('country', 'name', '澳大利亚').as('c').select('a', 'b', 'c').by('name').by('value').by('peopleNumber')"
找出全部名为杜若涵的点认识的person,"g.V().has('name', '杜若涵').out('knows').hasLabel('person')"
"请帮我找出person的friend,或其friend的friend",g.V().hasLabel('person').repeat(out('friend')).times(2).dedup()
"找出医生的三角的环,边类型是创造, 并返回这些点的id","g.V().hasLabel('doctor').as('a').outE('creates').inV().as('b').outE('creates').inV().as('c').where(__.inE('creates').outV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id').project('a', 'b_id', 'c_id').by(select('a')).by(select('b')).by(select('c'))"
"根据id,名字分组,计算价值除908的最小值","g.V().hasLabel('a').group().by(union(identity().values('id'), identity().values('name')).fold()).by(values('value').math('/ 908').min())"
"查询仓库XXRepo拥有的合并请求, 令仓库的名字等于合并请求的id减77,令仓库的语言等于仓库的id,令仓库的名字等于合并请求的id加96, 返回仓库的名字, 合并请求的创建时间","g.V().hasLabel('repository').has('name', 'XXRepo').as('a').outE('has').inV().hasLabel('pullRequest').as('b').select('a', 'b').by(project('name', 'lang').by(__.select('b').values('id').math('_ - 77')).by(__.select('a').values('id'))).by(project('name').by(__.select('b').values('id').math('_ + 96'))).select('a', 'b').by(select('name')).by(values('createTime'))"
"帮我查询和卖家有关联的商品节点,并根据其销量分组,返回销量,以及销量除464.89的值","g.V().hasLabel('seller').as('a').outE('has').inV().hasLabel('goods').as('b').select('b').values('sellerNumber').group().by(identity()).by(__.identity()).select(values).unfold().project('sellerNumber', 'divisionResult').by(select(keys)).by(select(values).math('_ / 464.89'))"
找出与张强和何思琪都有关联的publisher节点。,"g.V().has('name', '张强').as('a').outE().as('e').inV().hasLabel('publisher').as('b').inE().as('e2').outV().has('name', '何思琪').as('c').select('b').limit(28)"
"输入表的列为id,salary,height, 数据为(5,2357,174), 源点的height等于输入表height,请帮我查找和person黄建国有关的person,称为X,再请帮我查找和这个X有关联的其他person,以及和X有关联的person","g.withSideEffect('p', [['id':5, 'salary':2357, 'height':174]]).V().hasLabel('person').has('height', __.select('p').unfold().select('height')).has('name', '黄建国').as('a').bothE().as('e').otherV().hasLabel('person').as('b').bothE().as('e2').otherV().hasLabel('person').as('c').select('b').bothE().as('e3').otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
 帮我查询与作家类型有关联的作家，以及这些作家所撰写的书籍和引用这些书籍的书籍。,g.V().hasLabel('author').as('a').outE('knows').inV().hasLabel('author').as('b').outE('write').inV().hasLabel('book').as('c').outE('refers').inV().hasLabel('book').as('d').select('d')
"用这个schema:CREATE GRAPH g ( Vertex company ( id int ID, name varchar, scale varchar, peopleNumber int, value int ), Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex loan ( id int ID, amount double, weight int ), Vertex account ( id int ID, name varchar, createTime bigint, lastLoginTime bigint, isBlock boolean, value int ), Edge person_invest_company ( srcId int FROM person SOURCE ID, targetId int FROM company DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_apply_loan ( srcId int FROM person SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge company_apply_loan ( srcId int FROM company SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean ), Edge loan_deposit_account ( srcId int FROM loan SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_repay_loan ( srcId int FROM account SOURCE ID, targetId int FROM loan DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge account_transfer_account ( srcId int FROM account SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_own_account ( srcId int FROM person SOURCE ID, targetId int FROM account DESTINATION ID, weight double, f0 int, f1 boolean ));帮我查询满足条件gender为famale,salary小于84的节点","g.V().hasLabel('person').has('gender', 'famale').has('salary', lt(84))"
 找出122个与孙雪和张雪有关的人。,"g.V().has('name', '孙雪').outE().inV().hasLabel('person').as('b').inE().outV().has('name', '张雪').select('b').limit(122)"
"返回24个department眼科和急诊部,共同的friend","g.V().has('department', 'name', '眼科').outE('friend').inV().as('b').inE('friend').outV().has('department', 'name', '急诊部').select('b').limit(24)"
"查找和标签为卖家的点有回答关系的买家,且和这些买家有取消关系的订单,且和这些订单有包含关系的商品",g.V().hasLabel('seller').as('a').out('ask').hasLabel('buyer').as('b').out('cancel').hasLabel('orders').as('c').out('contain').hasLabel('goods').as('d').select('d')
 请帮我查询点标签为'person'，名称中包含'何红'的点的性别和名称。,"g.V().hasLabel('person').has('name', '何红').project('gender', 'name').by('gender').by('name')"
 查询名称为谷歌的公司点，并返回这些点的人数。,"g.V().hasLabel('company').has('name', '谷歌').values('peopleNumber')"
"查找id为34的person有关的person的friend, 再查找和person有关系的friend","g.V().has('person', 'id', 34).as('a').bothE().otherV().hasLabel('person').as('b').both().hasLabel('person').as('c').select('b').bothE('friend').otherV().hasLabel('person').as('d').select('a', 'b', 'c', 'd')"
请帮我查找所有label为教师的点,g.V().hasLabel('teacher')
"帮我查询全部id为118的国家关联的大学,和以包含关系关联了这些大学的其他城市","g.V().has('country', 'id', 118).bothE().otherV().hasLabel('university').as('b').inE('contain').otherV().hasLabel('city').as('c').select('b', 'c')"
给出全部与person赵建聪有关系的person的id,"g.V().hasLabel('person').has('name', '赵建聪').bothE().otherV().hasLabel('person').id()"
"请帮我查找名为何红的点属于的部门,并对这些部门的地址进行求和","g.V().has('name', '何红').outE('belong').inV().hasLabel('department').values('address').sum()"
返回所有从大学出发，到部门结束，并且标记为'has'的边。,g.V().hasLabel('university').outE('has').as('e').inV().hasLabel('department').select('e')
"查找所有和person点有creates关系的comment节点,且边满足条件weight小于166.46,目标comment节点id在2到52之间","g.V().hasLabel('person').as('a').outE('creates').has('weight', lt(166.46)).as('e').inV().hasLabel('comment').has('id', between(2, 52)).as('b').select('b')"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_lover_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_colleague_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_family_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_parent_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_friend_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出全部person以性别分组的薪资, 根据薪资降序排序","g.V().hasLabel('person').group().by('gender').by(values('salary').fold()).order(local).by(values, desc)"
"帮我查询名为郑月的person,以及与其有关的person,并返回郑月的性别和这些person的年龄","g.V().has('person', 'name', '郑月').as('a').bothE().as('e').otherV().hasLabel('person').as('b').select('a', 'b').by('gender').by('age')"
返回全部和书java程序设计之间有引用关系的书,"g.V().hasLabel('book').has('name', 'java程序设计').outE('refers').inV().hasLabel('book')"
请帮我找出马国强喜欢的评论中，其他人也喜欢的数量。,"g.V().has('person', 'name', '马国强').out('likes').hasLabel('comment').in('likes').hasLabel('person').dedup().count()"
"请帮我找出和公司滴滴有申请关系的贷款,再请帮我找出以申请关系关联了滴滴的贷款","g.V().has('company', 'name', '滴滴').as('a').outE('apply').inV().hasLabel('loan').as('b').select('a').inE('apply').outV().hasLabel('loan').as('c').select('a', 'b', 'c')"
"输入请求点id的列表423,115,360,771,403, 源点的id等于输入表id,给出person的三角的环,边标签等于person_likes_person, 并返回这些点的id","g.withSideEffect('p', [423, 115, 360, 771, 403]).V().hasLabel('person').where(__.values('id').is(within('p'))).as('a').outE('person_likes_person').inV().as('b').inE('person_likes_person').outV().as('c').where(eq('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
"请帮我找出和订单Order_314有包含关系的商品,再请帮我找出以包含关系关联了Order_314的商品","g.V().hasLabel('orders').has('name', 'Order_314').as('a').bothE('contain').otherV().hasLabel('goods').as('b', 'c').select('a', 'b', 'c')"
"给定图的schema如下:CREATE GRAPH g ( Vertex book ( id int ID, name varchar, id int ID, name varchar, category varchar, price int, wordCount int, createTime bigint ), Vertex publisher ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex reader ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex author ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge author_write_book ( srcId int FROM author SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge publisher_publish_book ( srcId int FROM publisher SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge book_refers_book ( srcId int FROM book SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge reader_likes_book ( srcId int FROM reader SOURCE ID, targetId int FROM book DESTINATION ID, weight double, f0 int, f1 boolean ), Edge author_knows_author ( srcId int FROM author SOURCE ID, targetId int FROM author DESTINATION ID, weight double, f0 int, f1 boolean ));返回56个与少年闰土和呐喊都存在关系的读者节点","g.V().has('name', '少年闰土').outE().inV().hasLabel('reader').as('b').inE().outV().has('name', '呐喊').select('b').limit(56)"
"使用列为value,peopleNumber,name, 数据为(317,59751,'中国'),(761,99928,'俄罗斯')的子查询作为输入表, 源点的peopleNumber等于输入表peopleNumber,返回全部id为38的公司关联的公司,和以合作关系关联了这些公司的其他大学","g.withSideEffect('p', [[317, 59751, '中国'], [761, 99928, '俄罗斯']]).V().hasLabel('company').has('peopleNumber', within(select('p').unfold().tail(1))).has('id', '38').bothE().otherV().hasLabel('company').as('b').inE('university_cooperate_company').otherV().hasLabel('university').as('c').select('b', 'c')"
"返回名为周建聪的person,以及与其有关的person,并返回周建聪的salary和这些person的salary","g.V().has('person', 'name', '周建聪').as('a').bothE().otherV().hasLabel('person').as('b').select('a', 'b').by('salary')"
"帮我查询关联person何梅的person,和这些person同事的person","g.V().hasLabel('person').has('name', '何梅').as('a').in('relates').hasLabel('person').as('b').out('colleague').hasLabel('person').as('c').select('b', 'c')"
"帮我查询名为吴国强的点accept的所有prescription,并对这些prescription的createTime进行求和","g.V().has('name', '吴国强').outE('accept').inV().hasLabel('prescription').values('createTime').sum()"
请帮我找出被买家杜雪咨询的卖家,"g.V().hasLabel('buyer').has('name', '杜雪').outE('consult').inV().hasLabel('seller').as('b').select('b').by().as('a').select('a', 'b')"
找出与张伟和赵思思都有关联的40个标签节点,"g.V().has('name', '张伟').outE().inV().hasLabel('tag').as('b').inE().outV().has('name', '赵思思').select('b').limit(40)"
"帮我查询forum的三角的环,边标签等于contain, 并返回这些点的id","g.V().hasLabel('forum').as('a').outE('contain').inV().as('b').outE('contain').inV().as('c').where(__.inE('contain').outV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
帮我查询与person孙思琪和黄若涵都存在认识关系的点,"g.V().hasLabel('person').has('name', '孙思琪').outE('knows').inV().as('b').inE('knows').outV().hasLabel('person').has('name', '黄若涵').select('b')"
"找出39个名为Prescription_120的点包含的label为药品的节点,且其权重小于879","g.V().has('name', 'Prescription_120').outE('contain').inV().hasLabel('medicine').has('weight', lt(879)).limit(39)"
"给出id为51的publisher关联的book,和以write关系关联了这些book的其他author","g.V().has('publisher', 'id', 51).bothE().otherV().hasLabel('book').as('b').inE('write').otherV().hasLabel('author').as('c').select('b', 'c')"
"帮我查询id为66的person认识的person, 并将person有关的person的年龄的最小值赋值给person(b)的年龄, 接着查询person(b)的年龄小于66的person支付的person","g.V().has('person', 'id', 66).out('knows').hasLabel('person').as('b').project('b_age', 'd').by(__.coalesce(__.bothE().otherV().hasLabel('person').values('age').min(), __.constant(null))).by(__.where(__.select('b_age').is(lt(66))).out('pay').hasLabel('person'))"
"找出提交软件Calcite的person,和这些person属于的公司","g.V().hasLabel('software').has('name', 'Calcite').in('commits').hasLabel('person').as('b').out('belong').hasLabel('company').as('c').select('b', 'c')"
"找出与部门内科有关,且与病人周国强有关系的医生节点","g.V().has('department', 'name', '内科').bothE('has').otherV().hasLabel('doctor').bothE('diagnose').otherV().has('patient', 'name', '周国强').select('doctor')"
请帮我找出196个与周思琪和徐建国都存在关系的book节点,"g.V().has('name', '周思琪').outE().inV().hasLabel('book').as('b').inE().outV().has('name', '徐建国').select('b').limit(196)"
"给定图的schema如下:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出id为111的点的年龄,性别,身高","g.V().has('id', '111').project('age', 'gender', 'height').by('age').by('gender').by('height')"
请找出与Prescription_293和Prescription_487共享药品标签的节点,"g.V().has('name', 'Prescription_293').outE('contain').inV().hasLabel('medicine').as('b').inE('contain').outV().has('name', 'Prescription_487').select('b')"
请帮我查找person的1跳的环,"g.V().hasLabel('person').as('a').both().as('b').where('a', eq('b')).by(T.id).select('a', 'b').by('id').by('id')"
"使用这个图:CREATE GRAPH g ( Vertex person ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge person_pay_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge person_knows_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ), Edge person_likes_person ( srcId int FROM person SOURCE ID, targetId int FROM person DESTINATION ID, weight double, f0 int, f1 boolean ));给出所有源点标签为person,目标点标签为person,标签为person_knows_person的边",g.E().hasLabel('person_knows_person').where(outV().hasLabel('person')).where(inV().hasLabel('person'))
"返回全部与Zeus存在还款关系的贷款,贷款与账号存在存款关系的点,返回这些点的上次登录时间","g.V().has('name', 'Zeus').outE('repay').inV().hasLabel('loan').outE('deposit').inV().hasLabel('account').values('lastLoginTime')"
返回全部名为王宏的点取消的订单,"g.V().has('name', '王宏').outE('cancel').inV().hasLabel('orders')"
 查询92个大众影院和横店影院之间的关系。,"g.V().has('cinema', 'name', '大众影院').as('a').outE('relation').as('e').inV().as('b').inE('relation').as('e2').outV().has('cinema', 'name', '横店影院').as('c').select('b').limit(92)"
查询所有和教师王红之间有教关系的课程,"g.V().has('teacher', 'name', '王红').out('teach').hasLabel('course')"
找出所有标签为'医生'的点，并按照性别从低到高排序。,"g.V().hasLabel('doctor').order().by('gender', asc)"
"返回和用户有关联的帖子节点,并根据其价值,名字,创建时间分组,返回价值,名字,创建时间,以及id对61取余的值","g.V().hasLabel('user').bothE('likes').bothV().hasLabel('post').dedup().group().by(project('value', 'name', 'createTime').by(values('value')).by(values('name')).by(values('createTime'))).by(project('value', 'name', 'createTime', 'idMod').by(values('value')).by(values('name')).by(values('createTime')).by(values('id').math('_ % 61'))).select(values).unfold().select('value', 'name', 'createTime', 'idMod')"
找到与用户ID为156相关的用户关系，然后找出这些用户关系中的相关关系。,"g.V().has('user', 'id', '156').as('a').bothE().otherV().hasLabel('user').as('b').bothE('relation').otherV().as('c', 'd').select('a', 'b', 'c', 'd')"
"找出标签等于company,名为华为的点,返回这些点的id,value,name","g.V().hasLabel('company').has('name', '华为').project('id', 'value', 'name').by('id').by('value').by('name')"
 请帮我查找与我们公司有关联的软件，以及与这些软件有关联的其他人员。,"g.V().has('company', 'id', '194').bothE().otherV().hasLabel('software').as('b').inE('commits').otherV().hasLabel('person').as('c').select('b', 'c')"
"输入表的列为id,level,name, 数据为(26,4,'重庆大学'),(19,3,'清华大学'),(98,2,'北京大学'),(30,3,'复旦大学'), 以属性level作为相等条件,查找与学生孙科有student_selects_course关系的3度的环","g.withSideEffect('p', [['id':26, 'level':4, 'name':'重庆大学'], ['id':19, 'level':3, 'name':'清华大学'], ['id':98, 'level':2, 'name':'北京大学'], ['id':30, 'level':3, 'name':'复旦大学']]).V().hasLabel('student').has('name', '孙科').as('a').where(__.select('a').values('level').as('l').select('p').unfold().where(__.select('l').is(eq(__.select('p_level')))).by('level').by('level')).repeat(__.out('student_selects_course').simplePath()).times(2).where(__.as('b').out('student_selects_course').where(eq('a'))).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(__.select('a')).by(__.select('b'))"
"给出id为30的作家有关的书的引用, 再给出和书有关系的引用","g.V().has('author', 'id', 30).as('a').bothE().otherV().hasLabel('book').as('b').bothE('refers').otherV().as('c').select('b').bothE('refers').otherV().as('d').select('a', 'b', 'c', 'd')"
返回满足条件peopleNumber小于845且scale的最大值小于等于586的节点,"g.V().has('peopleNumber', lt(845)).where(__.values('scale').max().is(lte(586))).valueMap(true)"
"查询全部源点标签等于person,边标签等于恋人,以及f1为true的边","g.V().hasLabel('person').outE('lover').has('f1', true)"
请帮我找出与comment Comment_463存在belong关系，并且与tag存在has关系的film节点。返回这些film的id、name、category，以及comment Comment_463的createTime和tag的value。,"g.V().hasLabel('comment').has('name', 'Comment_463').as('a').outE('belong').inV().hasLabel('film').as('b').inE('has').outV().hasLabel('tag').has('name', '其他').as('c').select('a', 'b', 'c').by('createTime').by(__.id()).by('name').by('category').by('value')"
"用如下schema的图:CREATE GRAPH g ( Vertex doctor ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex department ( id int ID, name varchar, address varchar, weight int ), Vertex patient ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex medicine ( id int ID, name varchar, price int, category varchar, weight int ), Vertex prescription ( id int ID, name varchar, createTime bigint, weight int ), Edge patient_accept_prescription ( srcId int FROM patient SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge department_has_doctor ( srcId int FROM department SOURCE ID, targetId int FROM doctor DESTINATION ID, weight double, f0 int, f1 boolean ), Edge prescription_contain_medicine ( srcId int FROM prescription SOURCE ID, targetId int FROM medicine DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_creates_prescription ( srcId int FROM doctor SOURCE ID, targetId int FROM prescription DESTINATION ID, weight double, f0 int, f1 boolean ), Edge doctor_diagnose_patient ( srcId int FROM doctor SOURCE ID, targetId int FROM patient DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge doctor_belong_department ( srcId int FROM doctor SOURCE ID, targetId int FROM department DESTINATION ID, weight double, f0 int, f1 boolean ));给出全部与处方Prescription_484有关系的部门的权重","g.V().has('prescription', 'name', 'Prescription_484').bothE().otherV().hasLabel('department').values('weight')"
 请帮我按照性别从大到小排序，查询所有以'gender'，'id'和'age'为分组条件的人的记录。,"g.V().hasLabel('person').group().by(values('gender', 'id', 'age').fold()).by(__.identity()).order().by(keys, desc).unfold().select(values).unfold().project('gender', 'id', 'age').by(values('gender')).by(values('id')).by(values('age'))"
"找出id为78的person喜欢的person, 并将person有关的person的身高的最小值赋值给person(b)的年龄, 接着查询person(b)的年龄小于78的person支付的person","g.V().has('person', 'id', 78).out('likes').hasLabel('person').as('b').project('b_age', 'd').by(__.coalesce(__.bothE().otherV().hasLabel('person').values('height').min(), __.constant(null))).by(__.where(__.select('b_age').is(lt(78))).out('pay').hasLabel('person'))"
给出前126个标签为创造的边,g.E().hasLabel('creates').limit(126)
"输入请求点id的列表414,75,877, 源点的id等于输入表id,请帮我找出author徐宏knows的author,被其他author knows的数量","g.inject([414, 75, 877]).as('p').flatMap(select('p').unfold()).as('id').V().hasLabel('author').has('id', where(eq('id'))).has('name', '徐宏').as('a').outE('author_knows_author').as('e').inV().hasLabel('author').as('b').inE('author_knows_author').as('e2').outV().hasLabel('author').as('c').select('c').dedup().count()"
"返回身高不等于161,性别大于98的节点","g.V().has('height', neq(161)).has('gender', gt(98))"
"找出41个person马轩和黄月,共同的父母","g.V().has('person', 'name', '马轩').outE('parent').inV().as('b').inE('parent').outV().has('person', 'name', '黄月').select('b').limit(41)"
"请帮我找出病人陈轩接受的处方, 令病人的年龄等于病人的年龄, 返回病人的名字, 处方的创建时间","g.V().has('patient', 'name', '陈轩').as('a').outE('accept').inV().hasLabel('prescription').as('b').select('a', 'b').by('name').by('createTime')"
 按等级、价值和ID分组，然后按升序排序所有大学。,"g.V().hasLabel('university').group().by(values('level', 'value', 'id').fold()).by(__.identity()).order().by(keys, Order.asc).select(values).unfold().project('level', 'value', 'id').by(select('level')).by(select('value')).by(select('id'))"
找出和订单Order_241之间有包含关系的商品,"g.V().hasLabel('orders').has('name', 'Order_241').out('contain').hasLabel('goods')"
"帮我查询city的三角的环,边label为belong, 并返回这些点的id","g.V().hasLabel('city').as('a').outE('belong').inV().as('b').outE('belong').inV().as('c').where('a', eq('c')).select('a', 'b', 'c').by(id()).by('id').by('id')"
"给出和评论Comment_365有关的person,再给出和Comment_365属于的其他电影,返回它们","g.V().hasLabel('comment').has('name', 'Comment_365').as('a').bothE().otherV().hasLabel('person').as('b').select('a').outE('belong').inV().hasLabel('film').as('c').select('a', 'b', 'c')"
查找所有类型是person的点,g.V().hasLabel('person')
" 查找与作家何宏有撰写关系，且引用了书《呐喊》的书节点，返回这些书的类别、名称、ID,以及作家何宏的ID和《呐喊》的ID。","g.V().has('author', 'name', '何宏').as('a').out('write').as('b').in('refers').has('book', 'name', '呐喊').as('c').select('a', 'b', 'c').by('id').by(values('category', 'name', 'id')).by('id').project('a.id', 'b.category', 'b.name', 'b.id', 'c.id').by(select('a')).by(select('b').select('category')).by(select('b').select('name')).by(select('b').select('id')).by(select('c'))"
找出标签为account且同时包含LX001和Faker关系节点的列表。,"g.V().hasLabel('account').has('name', 'LX001').outE('relation').inV().as('b').inE('relation').outV().hasLabel('account').has('name', 'Faker').select('b').values('name')"
"查找用户发布的帖子, 令帖子的id的值等于喜欢帖子的用户的性别的数量, 再查找帖子拥有的标签","g.V().hasLabel('user').as('a').outE('publish').inV().hasLabel('post').as('b').sideEffect(__.select('b').aggregate('postNodes')).select('b').as('b').outE('has').inV().hasLabel('tag').as('d').select('b', 'd').by('id').by()"
"返回名为何轩的点accept的全部prescription,并对这些prescription的createTime进行求和","g.V().has('name', '何轩').outE('accept').inV().hasLabel('prescription').values('createTime').sum()"
"使用列为age,height,id, 数据为(44,171,37)的子查询作为输入表, 源点的id等于输入表id,返回63个seller孙梅和王科,共同的relation","g.withSideEffect('p', [['age': 44, 'height': 171, 'id': 37]]).V().hasLabel('seller').has('id', __.select('p').unfold().select('id')).has('name', '孙梅').outE('relation').inV().as('b').inE('relation').as('e2').outV().hasLabel('seller').has('name', '王科').select('b').limit(63)"
"以680,744,605作为请求点id, 源点的id等于输入表id,帮我查询被person吴科关联的person","g.inject([680, 744, 605]).unfold().as('p').V().has('person', 'id', __.select('p')).as('a').in('relates').has('person', 'name', '吴科').as('b').select('a', 'b')"
查找全部名为越南的节点包含的公司或大学,"g.V().has('name', '越南').out('contain').hasLabel(within('company', 'university'))"
"帮我查询源点标签等于卖家,边标签等于拥有,以及满足条件f0小于等于766或源点id小于等于83或源点id为190的边","g.V().hasLabel('seller').as('a').outE('has').as('e').where(or(has('f0', lte(766)), has('srcId', lte(83)), has('srcId', 190))).select('e')"
"查找名为马克思原理的点属于的所有部门,并对这些部门的大小进行求和","g.V().has('name', '马克思原理').outE('belong').inV().hasLabel('department').values('size').sum()"
"找出person watch的film,返回其源点的salary减7711的值,以及目标点的value对215取余的最大值","g.V().hasLabel('person').as('a').outE('watch').as('e').inV().hasLabel('film').as('b').project('salary_minus_7711', 'max_value_mod_215').by(select('a').values('salary').math('_ - 7711')).by(select('b').values('value').math('_ % 215').max())"
请帮我找出被编辑陈伟发布的书,"g.V().hasLabel('publisher').has('name', '陈伟').outE('publish').inV().hasLabel('book').as('b').select('b').by().as('a').select('a', 'b')"
"查找被评论Comment_279属于的电影,和Comment_279属于的电影","g.V().hasLabel('comment').has('name', 'Comment_279').as('b').bothE('belong').otherV().hasLabel('film').as('a', 'c').select('a', 'b', 'c')"
帮我查询所有名为知乎的点包含的帖子,"g.V().has('name', '知乎').out('contain').hasLabel('post')"
"找出和cinema UME有关的film,称为X,再找出和这个X有关联的其他comment,以及和X有关联的cinema","g.V().has('cinema', 'name', 'UME').as('a').bothE().otherV().hasLabel('film').as('b').bothE().otherV().hasLabel('comment').as('c').select('b').bothE().otherV().hasLabel('cinema').as('d').select('a', 'b', 'c', 'd')"
"给出与名为吴建国和吴宏的点共同回答的,类型是买家的节点","g.V().has('name', '吴建国').outE('ask').inV().hasLabel('buyer').as('b').where(__.inE('ask').outV().has('name', '吴宏')).select('b')"
"使用列为name,createTime,id, 数据为('Comment_464',2013-12-21,54)的子查询作为输入表, 以属性name作为相等条件,查询与名为孙国强和Alan的点共同创造的,标签等于评论的节点","g.withSideEffect('p', [['name': 'Comment_464', 'createTime': '2013-12-21', 'id': 54]]).V().has('name', '孙国强').as('a').outE('person_creates_comment').inV().hasLabel('comment').as('b').inE('person_creates_comment').outV().has('name', 'Alan').as('c').select('b')"
"查询全部和person张轩有关系的person或company或software,返回这些点的openSource","g.V().has('person', 'name', '张轩').bothE().otherV().hasLabel(within('person', 'company', 'software')).values('openSource')"
"找出label为还款,并且f0不为空或f0为空,且f1等于false的边","g.E().hasLabel('repay').or(has('f0'), hasNot('f0')).has('f1', false)"
 请帮我查询按ID分组的所有人的年龄，并以从小到大的顺序排序。,"g.V().hasLabel('person').group().by('id').by(values('age').fold()).unfold().order().by(values, asc)"
查找被person王红knows的person,"g.V().has('person', 'name', '王红').as('b').outE('knows').as('e').inV().hasLabel('person').as('a').select('a', 'b')"
"帮我查询标签等于订单,名为Order_404的点,返回这些点的名字","g.V().hasLabel('orders').has('name', 'Order_404').values('name')"
 找出姓名为郑宏的人。,"g.V().hasLabel('person').has('name', '郑宏')"
"帮我查询前61个名字是BIN或价值大于等于548,且上次登录时间不是2004年04月28日的账号","g.V().hasLabel('account').has('name', 'BIN').or().has('value', gte(548)).has('lastLoginTime', neq('2004-04-28')).limit(61)"
"查询label为person的点,返回14个",g.V().hasLabel('person').limit(14)
请帮我找出所有与person有关的评论，以及这些评论被其他以喜欢关系关联的person所喜爱。,"g.V().hasLabel('person').has('id', '123').bothE().otherV().hasLabel('comment').as('b').inE('likes').otherV().hasLabel('person').as('c').select('b', 'c')"
"给出被公司创造数量大于61的软件,记为relationCount,再查询这些软件创造的软件","g.V().hasLabel('software').as('a').project('a', 'relationCount').by(__.identity()).by(__.in('creates').hasLabel('company').id().mean()).select('a', 'relationCount').where(__.select('relationCount').is(gt(61))).select('a').out('creates').hasLabel('software').dedup()"
请找出与评论Comment_119有关联，并且拥有悬疑标签的电影。并返回这些电影的名称、Comment_119的创建时间和悬疑标签的ID。,"g.V().has('comment', 'name', 'Comment_119').as('a').outE('belong').inV().hasLabel('film').as('b').inE('has').outV().has('tag', 'name', '悬疑').as('c').select('a', 'b', 'c').by('createTime').by('name').by('id')"
返回满足条件学分不为空或价值不为空的节点,"g.V().or(has('credit'), has('value'))"
"查找所有名为百度贴吧的,id小于28且身高是157的朋友,返回这些朋友的身高,和边的f0","g.V().has('name', '百度贴吧').outE('friend').as('e').inV().has('id', lt(28)).has('height', 157).project('b.height', 'e.f0').by(values('height')).by(select('e').values('f0'))"
找到所有名为'伦敦'且标签为'城市'的点，并返回它们的ID。,"g.V().hasLabel('city').has('name', '伦敦').id()"
"给出183个名为Tugraph的点拥有的label为事项的节点,且其创建时间是2018年04月03日","g.V().has('name', 'Tugraph').outE('has').inV().hasLabel('issue').has('createTime', '2018-04-03').limit(183)"
请找出与李宏和吴红都有关联的人，并返回他们的年龄,"g.V().has('person', 'name', '李宏').outE().inV().hasLabel('person').as('b').inE().outV().has('person', 'name', '吴红').select('b').values('age')"
 请帮我找出和评论Comment_481有关联的电影。,"g.V().hasLabel('comment').has('name', 'Comment_481').as('a').outE('belong').inV().hasLabel('film').as('b').select('a').inE('belong').outV().hasLabel('film').as('c').select('a', 'b', 'c')"
"给出合作城市东京包含的公司,的大学","g.V().hasLabel('city').has('name', '东京').outE('contain').inV().hasLabel('company').as('b').inE('cooperate').outV().hasLabel('university').as('c').select('b', 'c')"
返回所有类型为person的点,g.V().hasLabel('person')
找出与person郑思琪有own关系的1度以内的环,"g.V().hasLabel('person').has('name', '郑思琪').as('a').outE('own').inV().as('b').where(__.as('b').out().as('a')).select('a', 'b').by('id').by('id').project('a.id', 'b_id').by(select('a')).by(select('b'))"
"查询被作家韩思思认识的作家,和韩思思撰写的书","g.V().has('author', 'name', '韩思思').as('b').out('knows').as('a').select('b').out('write').as('c').select('a', 'b', 'c')"
给出前5个类型是咨询的边,g.E().hasLabel('consult').limit(5)
"请帮我查找和部门点有拥有关系的教师节点,且边满足条件目标点id在58到79之间,目标教师节点满足条件身高不等于188","g.V().hasLabel('department').as('a').outE('has').has('targetId', between(58, 79)).as('e').inV().hasLabel('teacher').has('height', neq(188)).as('b').select('b')"
"请帮我找出源点名字不等于郑国强或年龄大于32或薪资不为空,边label为创造,且f0不为空的边,返回这些边的目标点id除72的值","g.V().has('name', neq('郑国强')).or().has('age', gt(32)).or().has('salary', neq(null)).outE('creates').has('f0', neq(null)).project('result').by(values('targetId').math('/ 72')).select('result')"
查找全部名为陈建聪的点belong的department,"g.V().has('name', '陈建聪').outE('belong').inV().hasLabel('department')"
请帮我找出与马红和Alice都有关联的83个账户节点,"g.V().has('name', '马红').outE().inV().hasLabel('account').as('b').inE().outV().has('name', 'Alice').select('b').limit(83)"
"请帮我查找标签等于film,名为神探狄仁杰的点,返回这些点的category,name","g.V().hasLabel('film').has('name', '神探狄仁杰').project('category', 'name').by('category').by('name')"
 Forum百度贴吧中包含的帖子，其他用户发布的数量。,"g.V().hasLabel('forum').has('name', '百度贴吧').outE('contain').inV().hasLabel('post').inE('publish').outV().hasLabel('user').dedup().count()"
"查找名为徐雪的点接受的处方,并对这些处方的权重进行求和","g.V().has('name', '徐雪').outE('accept').inV().hasLabel('prescription').values('weight').sum()"
"找出和卖家杜红有关的商品,再找出和杜红拥有的其他商品,返回它们","g.V().hasLabel('seller').has('name', '杜红').as('a').bothE().otherV().hasLabel('goods').as('b').select('a').outE('has').inV().hasLabel('goods').as('c').select('a', 'b', 'c')"
"返回createTime不是933的account transfer的account的名称,以及这些account transfer的account的名称","g.V().hasLabel('account').has('createTime', neq(933)).outE('transfer').inV().as('b').outE('transfer').inV().as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"返回名为黄梅和郑强的,标签等于person的点公共的parent节点的名单","g.V().has('person', 'name', '黄梅').out('parent').as('b').in('parent').has('person', 'name', '郑强').select('b').values('name')"
 请帮我查找接受prescription的age为空且id小于72的患者，并给出这些prescription中包含的药品名称。,"g.V().hasLabel('patient').has('age', null).has('id', lt(72)).outE('accept').inV().hasLabel('prescription').as('b').outE('contain').inV().hasLabel('medicine').as('c').select('b', 'c').by('name').by('name').project('b_name', 'c_name').by(select('b')).by(select('c'))"
"查询编辑发布的书,返回其源点的年龄减31的值,以及目标点的wordCount的数量除178的值","g.V().hasLabel('publisher').as('a').outE('publish').as('e').inV().hasLabel('book').as('b').project('age_minus_31', 'wordCount_div_178').by(select('a').values('age').math('_ - 31')).by(select('b').values('wordCount').count().math('_ / 178'))"
查询与person周国强和王建国都存在认识关系的点,"g.V().has('person', 'name', '周国强').out('knows').as('b').in('knows').has('person', 'name', '王建国').select('b')"
"请帮我查找全部person以id分组的age, 根据age从大到小排序","g.V().hasLabel('person').group().by('id').by(values('age').fold()).order(local).by(values, desc)"
"输入请求点id的列表339, 以属性id作为相等条件,请帮我查找全部国家以价值分组的名字, 根据名字从小到大排序","g.withSideEffect('p', [339]).V().hasLabel('country').has('id', within('p')).group().by('value').by(values('name').order().fold())"
"请帮我查找用户的三角的环,边类型为创造, 并返回这些点的id","g.V().hasLabel('user').as('a').outE('creates').inV().as('b').outE('creates').inV().as('c').where(__.outE('creates').inV().as('a')).select('a', 'b', 'c').by('id').by('id').by('id')"
 查找吴思思的伴侣的朋友关系,"g.V().has('person', 'name', '吴思思').outE('partner').inV().outE('friend').inV().outE('relation').inV()"
找到与标签为'reader'的点有喜欢关系的书，以及这些书有引用关系的书，并且这些书也有引用关系。,g.V().hasLabel('reader').out('likes').hasLabel('book').out('refers').hasLabel('book').out('refers').hasLabel('book')
 返回与 person 点关联的评论节点，并按 id 分组。,g.V().hasLabel('person').bothE('likes').otherV().hasLabel('comment').values('id').group().by()
"以173,460作为请求点id, 以属性id作为相等条件,查询名为南京大学的大学","g.withSideEffect('p', [173, 460]).V().hasLabel('university').has('id', within('p')).has('name', '南京大学')"
"用这个schema:CREATE GRAPH g ( Vertex goods ( id int ID, name varchar, category varchar, price double, sellerNumber double, value int ), Vertex orders ( id int ID, name varchar, price double, value int ), Vertex seller ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Vertex buyer ( id int ID, name varchar, age int, gender varchar, height int, salary int ), Edge buyer_cancel_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge buyer_consult_seller ( srcId int FROM buyer SOURCE ID, targetId int FROM seller DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ), Edge seller_has_goods ( srcId int FROM seller SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_look_goods ( srcId int FROM buyer SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge orders_contain_goods ( srcId int FROM orders SOURCE ID, targetId int FROM goods DESTINATION ID, weight double, f0 int, f1 boolean ), Edge buyer_creates_orders ( srcId int FROM buyer SOURCE ID, targetId int FROM orders DESTINATION ID, weight double, f0 int, f1 boolean, timeStamp bigint ));请帮我查找源点满足条件身高小于188且年龄不等于52,年龄大于13,目标点满足条件价格小于39或名字等于Order_151,且价值小于767,且label为buyer_creates_orders的边","g.E().hasLabel('buyer_creates_orders').where(outV().and(has('height', lt(188)), has('age', neq(52)), has('age', gt(13)))).where(inV().and(or(has('price', lt(39)), has('name', 'Order_151')), has('value', lt(767))))"
"返回和label为person的点有认识关系的person,以及和这些person有支付关系的person,以及和这些person有认识关系的person",g.V().hasLabel('person').as('a').out('knows').hasLabel('person').as('b').out('pay').hasLabel('person').as('c').out('knows').hasLabel('person').as('d').select('d')
